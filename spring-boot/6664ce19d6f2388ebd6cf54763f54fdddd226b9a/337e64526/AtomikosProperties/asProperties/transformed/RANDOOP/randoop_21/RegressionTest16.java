import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest16 {

    public static boolean debug = false;

    @Test
    public void test08001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08001");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setMaxActives(0);
        boolean boolean7 = atomikosProperties0.threadedTwoPhaseCommit;
        boolean boolean8 = atomikosProperties0.allowSubTransactions;
        atomikosProperties0.logBaseDir = "{}";
        boolean boolean11 = atomikosProperties0.threadedTwoPhaseCommit;
        long long12 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery13 = atomikosProperties0.getRecovery();
        recovery13.retryInterval = 0L;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10000L + "'", long12 == 10000L);
        org.junit.Assert.assertNotNull(recovery13);
    }

    @Test
    public void test08002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08002");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.consoleFileLimit = '#';
        atomikosProperties0.setMaxTimeout((long) 100);
        long long9 = atomikosProperties0.defaultJtaTimeout;
        java.lang.String str10 = atomikosProperties0.getService();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel11 = atomikosProperties0.getConsoleLogLevel();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10000L + "'", long9 == 10000L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "{-1.0=100}" + "'", str10, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel11 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel11.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
    }

    @Test
    public void test08003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08003");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties0.setService("tm.out");
        int int5 = atomikosProperties0.consoleFileLimit;
        java.util.Properties properties6 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties8 = atomikosProperties7.asProperties();
        atomikosProperties7.service = "{-1.0=100}";
        long long11 = atomikosProperties7.getDefaultJtaTimeout();
        atomikosProperties7.serialJtaTransactions = true;
        long long14 = atomikosProperties7.maxTimeout;
        atomikosProperties7.setLogBaseDir("{-1.0=100}");
        int int17 = atomikosProperties7.getConsoleFileCount();
        atomikosProperties7.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties21 = atomikosProperties20.asProperties();
        atomikosProperties20.service = "{-1.0=100}";
        long long24 = atomikosProperties20.getDefaultJtaTimeout();
        atomikosProperties20.setTransactionManagerUniqueName("{}");
        atomikosProperties20.consoleFileName = "hi!";
        int int29 = atomikosProperties20.getConsoleFileCount();
        boolean boolean30 = atomikosProperties20.isThreadedTwoPhaseCommit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel31 = atomikosProperties20.consoleLogLevel;
        atomikosProperties7.consoleLogLevel = atomikosLoggingLevel31;
        int int33 = atomikosProperties7.getMaxActives();
        boolean boolean34 = properties6.contains((java.lang.Object) int33);
        java.lang.Object obj37 = properties6.setProperty("{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}", "tmlog");
        int int38 = properties6.size();
        java.lang.String str40 = properties6.getProperty("{-1.0=100}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties42 = atomikosProperties41.asProperties();
        atomikosProperties41.service = "{-1.0=100}";
        long long45 = atomikosProperties41.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel46 = null;
        atomikosProperties41.setConsoleLogLevel(atomikosLoggingLevel46);
        int int48 = atomikosProperties41.maxActives;
        atomikosProperties41.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery51 = atomikosProperties41.getRecovery();
        atomikosProperties41.consoleFileName = "{-1.0=100}";
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel54 = null;
        atomikosProperties41.setConsoleLogLevel(atomikosLoggingLevel54);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel56 = atomikosProperties41.getConsoleLogLevel();
        int int57 = atomikosProperties41.consoleFileLimit;
        atomikosProperties41.setDefaultJtaTimeout((long) 'a');
        atomikosProperties41.outputDir = "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}";
        java.lang.String str62 = atomikosProperties41.getTransactionManagerUniqueName();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean63 = properties6.containsValue((java.lang.Object) str62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(properties6);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10000L + "'", long11 == 10000L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 300000L + "'", long14 == 300000L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(properties21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 10000L + "'", long24 == 10000L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel31 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel31.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 50 + "'", int33 == 50);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 21 + "'", int38 == 21);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(properties42);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 10000L + "'", long45 == 10000L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 50 + "'", int48 == 50);
        org.junit.Assert.assertNotNull(recovery51);
        org.junit.Assert.assertNull(atomikosLoggingLevel56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNull(str62);
    }

    @Test
    public void test08004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08004");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileLimit = (byte) 10;
        long long7 = atomikosProperties0.getMaxTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel8 = null;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel8;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.recovery;
        atomikosProperties0.consoleFileCount = (short) -1;
        boolean boolean13 = atomikosProperties0.isAllowSubTransactions();
        boolean boolean14 = atomikosProperties0.forceShutdownOnVmExit;
        java.lang.String str15 = atomikosProperties0.getTransactionManagerUniqueName();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test08005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08005");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        long long5 = atomikosProperties0.getMaxTimeout();
        java.lang.String str6 = atomikosProperties0.outputDir;
        atomikosProperties0.consoleFileName = "tm.out";
        java.lang.String str9 = atomikosProperties0.consoleFileName;
        atomikosProperties0.enableLogging = true;
        int int12 = atomikosProperties0.consoleFileCount;
        atomikosProperties0.setLogBaseName("");
        atomikosProperties0.maxTimeout = (short) -1;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel17 = atomikosProperties0.getConsoleLogLevel();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tm.out" + "'", str9, "tm.out");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel17 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel17.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
    }

    @Test
    public void test08006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08006");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setAllowSubTransactions(true);
        java.lang.String str3 = atomikosProperties0.transactionManagerUniqueName;
        int int4 = atomikosProperties0.getConsoleFileLimit();
        java.lang.String str5 = atomikosProperties0.outputDir;
        atomikosProperties0.defaultJtaTimeout = '#';
        atomikosProperties0.consoleFileLimit = 18;
        atomikosProperties0.setThreadedTwoPhaseCommit(false);
        atomikosProperties0.setService("{}");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test08007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08007");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileLimit = (byte) 10;
        long long7 = atomikosProperties0.getMaxTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel8 = null;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel8;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.getRecovery();
        atomikosProperties0.outputDir = "{{={-1.0=100}, -1.0=100}=}";
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertNotNull(recovery10);
    }

    @Test
    public void test08008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08008");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        boolean boolean2 = properties0.isEmpty();
        java.lang.Object obj5 = properties0.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Properties properties6 = new java.util.Properties();
        java.lang.Object obj8 = properties6.remove((java.lang.Object) (-1.0d));
        boolean boolean9 = properties6.isEmpty();
        java.lang.Object obj12 = properties6.setProperty("hi!", "{}");
        java.lang.Object obj14 = properties0.getOrDefault((java.lang.Object) "hi!", (java.lang.Object) 100.0d);
        properties0.clear();
        java.util.Properties properties16 = new java.util.Properties();
        java.lang.String str17 = properties16.toString();
        java.util.Properties properties18 = new java.util.Properties(properties16);
        boolean boolean19 = properties18.isEmpty();
        java.lang.Object obj22 = properties18.setProperty("tmlog", "{}");
        boolean boolean23 = properties0.containsValue((java.lang.Object) properties18);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery24 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery24.retryInterval = (short) 100;
        recovery24.setForgetOrphanedLogEntriesDelay((long) 5);
        recovery24.setRetryInterval((long) (-1));
        recovery24.retryInterval = (byte) 100;
        long long33 = recovery24.getDelay();
        long long34 = recovery24.forgetOrphanedLogEntriesDelay;
        long long35 = recovery24.getRetryInterval();
        long long36 = recovery24.getForgetOrphanedLogEntriesDelay();
        boolean boolean37 = properties0.containsValue((java.lang.Object) recovery24);
        java.util.Properties properties38 = new java.util.Properties();
        java.lang.Object obj40 = properties38.remove((java.lang.Object) (-1.0d));
        boolean boolean41 = properties38.isEmpty();
        int int42 = properties38.size();
        java.lang.String str44 = properties38.getProperty("{}");
        java.util.Set<java.lang.Object> objSet45 = properties38.keySet();
        boolean boolean47 = properties38.containsKey((java.lang.Object) (short) 1);
        java.util.Enumeration<java.lang.Object> objEnumeration48 = properties38.elements();
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties38);
        boolean boolean50 = properties38.isEmpty();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + 100.0d + "'", obj14, 100.0d);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "{}" + "'", str17, "{}");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 10000L + "'", long33 == 10000L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 5L + "'", long34 == 5L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 100L + "'", long35 == 100L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 5L + "'", long36 == 5L);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(objSet45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(objEnumeration48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
    }

    @Test
    public void test08009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08009");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj14 = properties0.setProperty("", "{-1.0=100}");
        java.lang.String str15 = properties0.toString();
        java.util.Set<java.lang.String> strSet16 = properties0.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties18 = atomikosProperties17.asProperties();
        atomikosProperties17.service = "{-1.0=100}";
        long long21 = atomikosProperties17.getDefaultJtaTimeout();
        atomikosProperties17.enableLogging = false;
        atomikosProperties17.setMaxTimeout((long) (byte) 0);
        atomikosProperties17.setAllowSubTransactions(true);
        java.util.Properties properties28 = new java.util.Properties();
        java.lang.Object obj30 = properties28.remove((java.lang.Object) (-1.0d));
        boolean boolean31 = properties28.isEmpty();
        java.util.Collection<java.lang.Object> objCollection32 = properties28.values();
        java.lang.Object obj33 = properties0.put((java.lang.Object) true, (java.lang.Object) properties28);
        java.util.Collection<java.lang.Object> objCollection34 = properties28.values();
        java.io.OutputStream outputStream35 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties28.storeToXML(outputStream35, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{={-1.0=100}, -1.0=100}" + "'", str15, "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10000L + "'", long21 == 10000L);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objCollection32);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNotNull(objCollection34);
    }

    @Test
    public void test08010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08010");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        atomikosProperties0.maxActives = ' ';
        int int9 = atomikosProperties0.getConsoleFileCount();
        atomikosProperties0.setService("{={-1.0=100}, -1.0=100}");
        int int12 = atomikosProperties0.getConsoleFileCount();
        java.util.Properties properties13 = atomikosProperties0.asProperties();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(properties13);
    }

    @Test
    public void test08011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08011");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        long long7 = atomikosProperties0.getDefaultJtaTimeout();
        long long8 = atomikosProperties0.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery9 = atomikosProperties0.getRecovery();
        java.lang.String str10 = atomikosProperties0.outputDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        long long13 = atomikosProperties0.getCheckpointInterval();
        atomikosProperties0.allowSubTransactions = false;
        boolean boolean16 = atomikosProperties0.isAllowSubTransactions();
        java.lang.String str17 = atomikosProperties0.getLogBaseName();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(recovery9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 500L + "'", long13 == 500L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
    }

    @Test
    public void test08012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08012");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel7 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel7);
        boolean boolean9 = atomikosProperties0.enableLogging;
        int int10 = atomikosProperties0.getConsoleFileLimit();
        atomikosProperties0.serialJtaTransactions = false;
        atomikosProperties0.setLogBaseName("");
        atomikosProperties0.checkpointInterval = (byte) -1;
        long long17 = atomikosProperties0.defaultJtaTimeout;
        atomikosProperties0.setService("{1.0=-1}");
        atomikosProperties0.maxActives = (short) 0;
        atomikosProperties0.outputDir = "{{}={}}";
        atomikosProperties0.setForceShutdownOnVmExit(false);
        int int26 = atomikosProperties0.consoleFileLimit;
        boolean boolean27 = atomikosProperties0.allowSubTransactions;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10000L + "'", long17 == 10000L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test08013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08013");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        atomikosProperties0.setConsoleFileCount((int) (byte) 100);
        atomikosProperties0.setAllowSubTransactions(true);
        int int10 = atomikosProperties0.getMaxActives();
        boolean boolean11 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.maxActives = 2;
        java.lang.String str14 = atomikosProperties0.getLogBaseDir();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 50 + "'", int10 == 50);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test08014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08014");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isThreadedTwoPhaseCommit();
        java.lang.String str2 = atomikosProperties0.logBaseDir;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery3 = atomikosProperties0.recovery;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel4 = atomikosProperties0.getConsoleLogLevel();
        atomikosProperties0.allowSubTransactions = true;
        atomikosProperties0.enableLogging = true;
        atomikosProperties0.setTransactionManagerUniqueName("{{}={}}");
        atomikosProperties0.forceShutdownOnVmExit = true;
        atomikosProperties0.setEnableLogging(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(recovery3);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel4 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel4.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
    }

    @Test
    public void test08015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08015");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        boolean boolean2 = properties0.isEmpty();
        java.util.Properties properties3 = new java.util.Properties();
        java.lang.String str4 = properties3.toString();
        java.lang.Object obj6 = properties3.remove((java.lang.Object) (short) 100);
        java.lang.Object obj9 = properties3.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean11 = properties3.containsKey((java.lang.Object) 0L);
        java.lang.Object obj14 = properties3.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties15 = new java.util.Properties();
        java.lang.String str16 = properties15.toString();
        java.lang.Object obj18 = properties15.remove((java.lang.Object) (short) 100);
        java.lang.Object obj21 = properties15.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj22 = properties15.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration23 = properties15.elements();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties15);
        java.lang.Object obj25 = properties15.clone();
        properties15.clear();
        int int27 = properties15.size();
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties15);
        java.util.Enumeration<?> wildcardEnumeration29 = properties0.propertyNames();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet30 = properties0.entrySet();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet31 = properties0.entrySet();
        java.util.Properties properties32 = new java.util.Properties();
        java.lang.Object obj34 = properties32.remove((java.lang.Object) (-1.0d));
        boolean boolean35 = properties32.isEmpty();
        java.lang.Object obj38 = properties32.setProperty("hi!", "{}");
        java.util.Set<java.lang.String> strSet39 = properties32.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties41 = atomikosProperties40.asProperties();
        atomikosProperties40.service = "{-1.0=100}";
        long long44 = atomikosProperties40.getDefaultJtaTimeout();
        atomikosProperties40.serialJtaTransactions = true;
        long long47 = atomikosProperties40.getDefaultJtaTimeout();
        long long48 = atomikosProperties40.checkpointInterval;
        atomikosProperties40.setForceShutdownOnVmExit(true);
        java.util.Properties properties51 = atomikosProperties40.asProperties();
        java.lang.Object obj52 = properties0.putIfAbsent((java.lang.Object) properties32, (java.lang.Object) properties51);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery53 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery53.retryInterval = (short) 100;
        recovery53.delay = (-1L);
        long long58 = recovery53.delay;
        recovery53.delay = (short) 1;
        long long61 = recovery53.getRetryInterval();
        int int62 = recovery53.maxRetries;
        int int63 = recovery53.maxRetries;
        recovery53.setMaxRetries(0);
        recovery53.setDelay(97L);
        recovery53.retryInterval = (short) 10;
        long long70 = recovery53.getRetryInterval();
        java.lang.Object obj71 = properties0.remove((java.lang.Object) long70);
        java.io.Reader reader72 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.load(reader72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{}" + "'", str4, "{}");
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{}" + "'", str16, "{}");
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration23);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "{1.0=-1}");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(wildcardEnumeration29);
        org.junit.Assert.assertNotNull(objEntrySet30);
        org.junit.Assert.assertNotNull(objEntrySet31);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertNotNull(properties41);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 10000L + "'", long44 == 10000L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 10000L + "'", long47 == 10000L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 500L + "'", long48 == 500L);
        org.junit.Assert.assertNotNull(properties51);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-1L) + "'", long58 == (-1L));
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 100L + "'", long61 == 100L);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 5 + "'", int62 == 5);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 5 + "'", int63 == 5);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 10L + "'", long70 == 10L);
        org.junit.Assert.assertNull(obj71);
    }

    @Test
    public void test08016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08016");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj3 = properties0.setProperty("{}", "{}");
        java.util.Enumeration<java.lang.Object> objEnumeration4 = properties0.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties0.elements();
        java.util.Properties properties6 = new java.util.Properties(properties0);
        java.util.Set<java.lang.Object> objSet7 = properties0.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean9 = atomikosProperties8.isSerialJtaTransactions();
        atomikosProperties8.logBaseName = "{-1.0=100}";
        int int12 = atomikosProperties8.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery13 = atomikosProperties8.getRecovery();
        atomikosProperties8.setConsoleFileCount((int) (byte) 100);
        long long16 = atomikosProperties8.getDefaultJtaTimeout();
        atomikosProperties8.consoleFileName = "{1.0=-1}";
        java.lang.Object obj19 = null;
        java.lang.Object obj20 = properties0.getOrDefault((java.lang.Object) "{1.0=-1}", obj19);
        java.io.OutputStream outputStream21 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.storeToXML(outputStream21, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir={={-1.0=100}, -1.0=100}, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.output_dir={1.0=-1, -1.0=100}, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={-1.0=100}, com.atomikos.icatch.force_shutdown_on_vm_exit=true, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNotNull(objEnumeration4);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNotNull(objSet7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 50 + "'", int12 == 50);
        org.junit.Assert.assertNotNull(recovery13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10000L + "'", long16 == 10000L);
        org.junit.Assert.assertNull(obj20);
    }

    @Test
    public void test08017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08017");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties();
        java.lang.String str2 = properties1.toString();
        boolean boolean3 = properties1.isEmpty();
        java.util.Properties properties4 = new java.util.Properties();
        java.lang.String str5 = properties4.toString();
        java.lang.Object obj7 = properties4.remove((java.lang.Object) (short) 100);
        java.lang.Object obj10 = properties4.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean12 = properties4.containsKey((java.lang.Object) 0L);
        boolean boolean13 = properties1.containsValue((java.lang.Object) 0L);
        boolean boolean16 = properties0.replace((java.lang.Object) 0L, (java.lang.Object) 0.0f, (java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration17 = properties0.elements();
        java.util.Set<java.lang.String> strSet18 = properties0.stringPropertyNames();
        java.util.Properties properties19 = new java.util.Properties();
        java.lang.String str20 = properties19.toString();
        java.lang.Object obj22 = properties19.remove((java.lang.Object) (short) 100);
        java.lang.Object obj25 = properties19.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.util.Properties properties26 = new java.util.Properties();
        java.lang.String str27 = properties26.toString();
        java.lang.Object obj29 = properties26.remove((java.lang.Object) (short) 100);
        java.lang.Object obj32 = properties26.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        int int33 = properties26.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery34 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery34.retryInterval = (short) 100;
        recovery34.forgetOrphanedLogEntriesDelay = 'a';
        long long39 = recovery34.retryInterval;
        recovery34.setForgetOrphanedLogEntriesDelay((long) 0);
        java.lang.Object obj42 = properties19.replace((java.lang.Object) int33, (java.lang.Object) recovery34);
        boolean boolean43 = properties0.containsValue((java.lang.Object) properties19);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties45 = atomikosProperties44.asProperties();
        atomikosProperties44.service = "{-1.0=100}";
        long long48 = atomikosProperties44.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel49 = null;
        atomikosProperties44.setConsoleLogLevel(atomikosLoggingLevel49);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel51 = null;
        atomikosProperties44.setConsoleLogLevel(atomikosLoggingLevel51);
        atomikosProperties44.setLogBaseName("{={-1.0=100}, -1.0=100}");
        atomikosProperties44.setConsoleFileLimit(0);
        boolean boolean57 = atomikosProperties44.isThreadedTwoPhaseCommit();
        boolean boolean58 = atomikosProperties44.forceShutdownOnVmExit;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties59 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties60 = atomikosProperties59.asProperties();
        atomikosProperties59.service = "{-1.0=100}";
        long long63 = atomikosProperties59.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel64 = null;
        atomikosProperties59.setConsoleLogLevel(atomikosLoggingLevel64);
        int int66 = atomikosProperties59.maxActives;
        atomikosProperties59.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery69 = atomikosProperties59.getRecovery();
        atomikosProperties59.outputDir = "hi!";
        atomikosProperties59.setDefaultJtaTimeout((long) 10);
        atomikosProperties59.setCheckpointInterval((long) (short) -1);
        boolean boolean76 = properties0.remove((java.lang.Object) atomikosProperties44, (java.lang.Object) atomikosProperties59);
        java.lang.String str77 = atomikosProperties44.getLogBaseName();
        atomikosProperties44.setConsoleFileLimit(0);
        java.lang.Class<?> wildcardClass80 = atomikosProperties44.getClass();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{}" + "'", str2, "{}");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{}" + "'", str5, "{}");
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objEnumeration17);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{}" + "'", str20, "{}");
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "{}" + "'", str27, "{}");
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 100L + "'", long39 == 100L);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(properties45);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 10000L + "'", long48 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(properties60);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 10000L + "'", long63 == 10000L);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 50 + "'", int66 == 50);
        org.junit.Assert.assertNotNull(recovery69);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "{={-1.0=100}, -1.0=100}" + "'", str77, "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test08018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08018");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties0.setMaxActives(100);
        boolean boolean9 = atomikosProperties0.enableLogging;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.recovery;
        atomikosProperties0.setConsoleFileLimit(100);
        boolean boolean13 = atomikosProperties0.enableLogging;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery14 = atomikosProperties0.getRecovery();
        recovery14.delay = 0L;
        recovery14.retryInterval = 52L;
        long long19 = recovery14.getForgetOrphanedLogEntriesDelay();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(recovery14);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 86400000L + "'", long19 == 86400000L);
    }

    @Test
    public void test08019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08019");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        boolean boolean7 = atomikosProperties0.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery8 = atomikosProperties0.recovery;
        atomikosProperties0.setLogBaseDir("");
        java.lang.String str11 = atomikosProperties0.logBaseName;
        atomikosProperties0.defaultJtaTimeout = 100;
        java.lang.String str14 = atomikosProperties0.logBaseName;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(recovery8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "tmlog" + "'", str11, "tmlog");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "tmlog" + "'", str14, "tmlog");
    }

    @Test
    public void test08020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08020");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.util.Properties properties3 = new java.util.Properties();
        java.lang.String str4 = properties3.toString();
        java.lang.Object obj6 = properties3.remove((java.lang.Object) (short) 100);
        java.lang.Object obj9 = properties3.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean11 = properties3.containsKey((java.lang.Object) 0L);
        java.lang.Object obj14 = properties3.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj17 = properties3.setProperty("", "{-1.0=100}");
        java.util.Enumeration<java.lang.Object> objEnumeration18 = properties3.keys();
        java.util.Properties properties19 = new java.util.Properties();
        java.lang.String str20 = properties19.toString();
        boolean boolean21 = properties19.isEmpty();
        java.lang.Object obj24 = properties19.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration25 = properties19.elements();
        java.lang.Object obj26 = properties2.replace((java.lang.Object) objEnumeration18, (java.lang.Object) properties19);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties2.keys();
        java.lang.String str28 = properties2.toString();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet29 = properties2.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery30 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long31 = recovery30.forgetOrphanedLogEntriesDelay;
        long long32 = recovery30.forgetOrphanedLogEntriesDelay;
        long long33 = recovery30.getDelay();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties34 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties35 = atomikosProperties34.asProperties();
        atomikosProperties34.service = "{-1.0=100}";
        long long38 = atomikosProperties34.getDefaultJtaTimeout();
        long long39 = atomikosProperties34.getMaxTimeout();
        atomikosProperties34.threadedTwoPhaseCommit = true;
        atomikosProperties34.setSerialJtaTransactions(true);
        atomikosProperties34.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties34.logBaseDir = "{1.0=-1, -1.0=100}";
        boolean boolean48 = properties2.remove((java.lang.Object) recovery30, (java.lang.Object) "{1.0=-1, -1.0=100}");
        java.lang.Object obj49 = properties2.clone();
        java.util.Set<java.lang.Object> objSet50 = properties2.keySet();
        java.io.Writer writer51 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties2.store(writer51, "{com.atomikos.icatch.tm.out=hi!}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{}" + "'", str4, "{}");
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(objEnumeration18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{}" + "'", str20, "{}");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(objEnumeration25);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "{}" + "'", str28, "{}");
        org.junit.Assert.assertNotNull(objEntrySet29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 86400000L + "'", long31 == 86400000L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 86400000L + "'", long32 == 86400000L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 10000L + "'", long33 == 10000L);
        org.junit.Assert.assertNotNull(properties35);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 10000L + "'", long38 == 10000L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 300000L + "'", long39 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "{}");
        org.junit.Assert.assertNotNull(objSet50);
    }

    @Test
    public void test08021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08021");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.enableLogging = false;
        atomikosProperties0.setMaxTimeout((long) (byte) 0);
        atomikosProperties0.setAllowSubTransactions(true);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties12 = atomikosProperties11.asProperties();
        atomikosProperties11.service = "{-1.0=100}";
        java.lang.String str15 = atomikosProperties11.getTransactionManagerUniqueName();
        boolean boolean16 = atomikosProperties11.isSerialJtaTransactions();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel17 = atomikosProperties11.getConsoleLogLevel();
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel17;
        atomikosProperties0.threadedTwoPhaseCommit = true;
        int int21 = atomikosProperties0.getConsoleFileLimit();
        atomikosProperties0.checkpointInterval = 300000L;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertNotNull(properties12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel17 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel17.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
    }

    @Test
    public void test08022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08022");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        long long5 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.threadedTwoPhaseCommit = true;
        long long8 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.setConsoleFileCount((int) (byte) -1);
        atomikosProperties0.service = "hi!";
        boolean boolean13 = atomikosProperties0.isSerialJtaTransactions();
        java.lang.String str14 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.transactionManagerUniqueName = "hi!";
        boolean boolean17 = atomikosProperties0.isThreadedTwoPhaseCommit();
        boolean boolean18 = atomikosProperties0.forceShutdownOnVmExit;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test08023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08023");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.util.Properties properties7 = new java.util.Properties();
        java.lang.String str8 = properties7.toString();
        java.lang.Object obj10 = properties7.remove((java.lang.Object) (short) 100);
        java.lang.Object obj13 = properties7.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        int int14 = properties7.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery15 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery15.retryInterval = (short) 100;
        recovery15.forgetOrphanedLogEntriesDelay = 'a';
        long long20 = recovery15.retryInterval;
        recovery15.setForgetOrphanedLogEntriesDelay((long) 0);
        java.lang.Object obj23 = properties0.replace((java.lang.Object) int14, (java.lang.Object) recovery15);
        recovery15.forgetOrphanedLogEntriesDelay = (byte) 0;
        recovery15.setDelay((long) 5);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{}" + "'", str8, "{}");
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 100L + "'", long20 == 100L);
        org.junit.Assert.assertNull(obj23);
    }

    @Test
    public void test08024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08024");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj3 = properties0.setProperty("{}", "{}");
        java.util.Enumeration<java.lang.Object> objEnumeration4 = properties0.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties0.elements();
        java.util.Properties properties6 = new java.util.Properties(properties0);
        java.lang.String str8 = properties0.getProperty("");
        java.util.Set<java.lang.String> strSet9 = properties0.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties13 = atomikosProperties12.asProperties();
        atomikosProperties12.service = "{-1.0=100}";
        long long16 = atomikosProperties12.getDefaultJtaTimeout();
        atomikosProperties12.consoleFileLimit = '#';
        java.lang.Object obj19 = properties11.get((java.lang.Object) atomikosProperties12);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet20 = properties11.entrySet();
        java.lang.Object obj21 = properties0.get((java.lang.Object) properties11);
        java.util.Enumeration<?> wildcardEnumeration22 = properties0.propertyNames();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNotNull(objEnumeration4);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNotNull(properties13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10000L + "'", long16 == 10000L);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNotNull(objEntrySet20);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNotNull(wildcardEnumeration22);
    }

    @Test
    public void test08025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08025");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        long long7 = atomikosProperties0.getDefaultJtaTimeout();
        long long8 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.setForceShutdownOnVmExit(true);
        atomikosProperties0.setLogBaseDir("{}");
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
    }

    @Test
    public void test08026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08026");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        boolean boolean7 = atomikosProperties0.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery8 = atomikosProperties0.recovery;
        atomikosProperties0.setLogBaseDir("");
        long long11 = atomikosProperties0.maxTimeout;
        boolean boolean12 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.enableLogging = false;
        int int15 = atomikosProperties0.getConsoleFileCount();
        java.lang.String str16 = atomikosProperties0.getOutputDir();
        java.util.Properties properties17 = new java.util.Properties();
        java.lang.String str18 = properties17.toString();
        java.lang.Object obj20 = properties17.remove((java.lang.Object) (short) 100);
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.String str22 = properties21.toString();
        boolean boolean23 = properties21.isEmpty();
        java.lang.Object obj26 = properties21.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties21.elements();
        boolean boolean28 = properties17.containsKey((java.lang.Object) properties21);
        java.util.Set<java.lang.String> strSet29 = properties17.stringPropertyNames();
        java.util.Set<java.lang.Object> objSet30 = properties17.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties32 = atomikosProperties31.asProperties();
        atomikosProperties31.service = "{-1.0=100}";
        long long35 = atomikosProperties31.getDefaultJtaTimeout();
        atomikosProperties31.enableLogging = false;
        atomikosProperties31.setMaxTimeout((long) (byte) 0);
        atomikosProperties31.setAllowSubTransactions(true);
        java.util.Properties properties42 = new java.util.Properties();
        java.lang.Object obj44 = properties42.remove((java.lang.Object) (-1.0d));
        boolean boolean45 = properties42.isEmpty();
        java.util.Properties properties46 = new java.util.Properties();
        java.lang.String str47 = properties46.toString();
        java.lang.Object obj49 = properties46.remove((java.lang.Object) (short) 100);
        java.lang.Object obj52 = properties46.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean54 = properties46.containsKey((java.lang.Object) 0L);
        java.lang.Object obj57 = properties46.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj60 = properties46.setProperty("", "{-1.0=100}");
        java.lang.Object obj61 = properties46.clone();
        java.lang.Object obj62 = properties42.get((java.lang.Object) properties46);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery64 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery64.retryInterval = (short) 100;
        recovery64.forgetOrphanedLogEntriesDelay = 'a';
        long long69 = recovery64.getDelay();
        long long70 = recovery64.getRetryInterval();
        recovery64.forgetOrphanedLogEntriesDelay = 10000L;
        atomikosProperties31.set(properties46, "tmlog", (java.lang.Object) recovery64);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties74 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties75 = atomikosProperties74.asProperties();
        atomikosProperties74.service = "{-1.0=100}";
        long long78 = atomikosProperties74.getDefaultJtaTimeout();
        atomikosProperties74.serialJtaTransactions = true;
        java.lang.Object obj81 = properties17.put((java.lang.Object) "tmlog", (java.lang.Object) true);
        java.lang.Object obj83 = null;
        atomikosProperties0.set(properties17, "{-1.0=100}", obj83);
        boolean boolean85 = atomikosProperties0.forceShutdownOnVmExit;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(recovery8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 300000L + "'", long11 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "{}" + "'", str18, "{}");
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{}" + "'", str22, "{}");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNotNull(objSet30);
        org.junit.Assert.assertNotNull(properties32);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 10000L + "'", long35 == 10000L);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "{}" + "'", str47, "{}");
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertNotNull(obj61);
// flaky:         org.junit.Assert.assertEquals(obj61.toString(), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj61), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj61), "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 10000L + "'", long69 == 10000L);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 100L + "'", long70 == 100L);
        org.junit.Assert.assertNotNull(properties75);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 10000L + "'", long78 == 10000L);
        org.junit.Assert.assertNull(obj81);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test08027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08027");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.remove((java.lang.Object) (-1.0d));
        boolean boolean3 = properties0.isEmpty();
        java.util.Collection<java.lang.Object> objCollection4 = properties0.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet5 = properties0.entrySet();
        java.lang.String str6 = properties0.toString();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(objCollection4);
        org.junit.Assert.assertNotNull(objEntrySet5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "{}" + "'", str6, "{}");
    }

    @Test
    public void test08028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08028");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setTransactionManagerUniqueName("{}");
        atomikosProperties0.consoleFileName = "hi!";
        int int9 = atomikosProperties0.getConsoleFileCount();
        boolean boolean10 = atomikosProperties0.isThreadedTwoPhaseCommit();
        atomikosProperties0.maxTimeout = 0;
        atomikosProperties0.setLogBaseName("hi!");
        boolean boolean15 = atomikosProperties0.threadedTwoPhaseCommit;
        java.lang.String str16 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setAllowSubTransactions(true);
        atomikosProperties0.consoleFileName = "{1.0=-1}";
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
    }

    @Test
    public void test08029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08029");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        boolean boolean7 = atomikosProperties0.isAllowSubTransactions();
        boolean boolean8 = atomikosProperties0.isEnableLogging();
        long long9 = atomikosProperties0.getCheckpointInterval();
        int int10 = atomikosProperties0.getConsoleFileLimit();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 500L + "'", long9 == 500L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test08030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08030");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        int int7 = atomikosProperties0.maxActives;
        atomikosProperties0.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.getRecovery();
        atomikosProperties0.outputDir = "hi!";
        atomikosProperties0.setDefaultJtaTimeout((long) 10);
        atomikosProperties0.setCheckpointInterval((long) (short) -1);
        long long17 = atomikosProperties0.defaultJtaTimeout;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10L + "'", long17 == 10L);
    }

    @Test
    public void test08031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08031");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.remove((java.lang.Object) (-1.0d));
        boolean boolean4 = properties0.contains((java.lang.Object) "{-1.0=100}");
        java.lang.Object obj7 = properties0.setProperty("{={-1.0=100}, -1.0=100}", "");
        java.lang.String str8 = properties0.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties9.setEnableLogging(true);
        atomikosProperties9.consoleFileCount = 0;
        int int14 = atomikosProperties9.getMaxActives();
        java.lang.String str15 = atomikosProperties9.getLogBaseDir();
        java.lang.String str16 = atomikosProperties9.service;
        atomikosProperties9.transactionManagerUniqueName = "tmlog";
        int int19 = atomikosProperties9.maxActives;
        atomikosProperties9.logBaseName = "{1.0=-1}";
        atomikosProperties9.allowSubTransactions = true;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties25 = atomikosProperties24.asProperties();
        atomikosProperties24.service = "{-1.0=100}";
        long long28 = atomikosProperties24.getDefaultJtaTimeout();
        atomikosProperties24.setTransactionManagerUniqueName("{}");
        atomikosProperties24.consoleFileName = "hi!";
        int int33 = atomikosProperties24.getConsoleFileLimit();
        java.lang.Object obj34 = properties0.put((java.lang.Object) true, (java.lang.Object) int33);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties36 = atomikosProperties35.asProperties();
        atomikosProperties35.service = "{-1.0=100}";
        java.lang.String str39 = atomikosProperties35.getLogBaseName();
        long long40 = atomikosProperties35.defaultJtaTimeout;
        long long41 = atomikosProperties35.getMaxTimeout();
        boolean boolean42 = atomikosProperties35.forceShutdownOnVmExit;
        java.util.Properties properties43 = atomikosProperties35.asProperties();
        int int44 = atomikosProperties35.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery45 = atomikosProperties35.recovery;
        java.util.Properties properties46 = new java.util.Properties();
        java.lang.String str47 = properties46.toString();
        boolean boolean48 = properties46.isEmpty();
        java.lang.Object obj51 = properties46.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery52 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long53 = recovery52.getRetryInterval();
        long long54 = recovery52.retryInterval;
        long long55 = recovery52.forgetOrphanedLogEntriesDelay;
        boolean boolean56 = properties46.equals((java.lang.Object) recovery52);
        boolean boolean57 = properties0.remove((java.lang.Object) recovery45, (java.lang.Object) properties46);
        recovery45.setMaxRetries(32);
        long long60 = recovery45.retryInterval;
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{{={-1.0=100}, -1.0=100}=}" + "'", str8, "{{={-1.0=100}, -1.0=100}=}");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 50 + "'", int14 == 50);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 50 + "'", int19 == 50);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 10000L + "'", long28 == 10000L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNotNull(properties36);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "tmlog" + "'", str39, "tmlog");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 10000L + "'", long40 == 10000L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 300000L + "'", long41 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(properties43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 50 + "'", int44 == 50);
        org.junit.Assert.assertNotNull(recovery45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "{}" + "'", str47, "{}");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 10000L + "'", long53 == 10000L);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 10000L + "'", long54 == 10000L);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 86400000L + "'", long55 == 86400000L);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 10000L + "'", long60 == 10000L);
    }

    @Test
    public void test08032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08032");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.util.Properties properties3 = new java.util.Properties();
        java.lang.String str4 = properties3.toString();
        java.lang.Object obj6 = properties3.remove((java.lang.Object) (short) 100);
        java.lang.Object obj9 = properties3.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean11 = properties3.containsKey((java.lang.Object) 0L);
        java.lang.Object obj14 = properties3.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj17 = properties3.setProperty("", "{-1.0=100}");
        java.util.Enumeration<java.lang.Object> objEnumeration18 = properties3.keys();
        java.util.Properties properties19 = new java.util.Properties();
        java.lang.String str20 = properties19.toString();
        boolean boolean21 = properties19.isEmpty();
        java.lang.Object obj24 = properties19.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration25 = properties19.elements();
        java.lang.Object obj26 = properties2.replace((java.lang.Object) objEnumeration18, (java.lang.Object) properties19);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties2.keys();
        java.lang.String str28 = properties2.toString();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet29 = properties2.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery30 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long31 = recovery30.forgetOrphanedLogEntriesDelay;
        long long32 = recovery30.forgetOrphanedLogEntriesDelay;
        long long33 = recovery30.getDelay();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties34 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties35 = atomikosProperties34.asProperties();
        atomikosProperties34.service = "{-1.0=100}";
        long long38 = atomikosProperties34.getDefaultJtaTimeout();
        long long39 = atomikosProperties34.getMaxTimeout();
        atomikosProperties34.threadedTwoPhaseCommit = true;
        atomikosProperties34.setSerialJtaTransactions(true);
        atomikosProperties34.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties34.logBaseDir = "{1.0=-1, -1.0=100}";
        boolean boolean48 = properties2.remove((java.lang.Object) recovery30, (java.lang.Object) "{1.0=-1, -1.0=100}");
        long long49 = recovery30.delay;
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{}" + "'", str4, "{}");
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(objEnumeration18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{}" + "'", str20, "{}");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(objEnumeration25);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "{}" + "'", str28, "{}");
        org.junit.Assert.assertNotNull(objEntrySet29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 86400000L + "'", long31 == 86400000L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 86400000L + "'", long32 == 86400000L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 10000L + "'", long33 == 10000L);
        org.junit.Assert.assertNotNull(properties35);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 10000L + "'", long38 == 10000L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 300000L + "'", long39 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 10000L + "'", long49 == 10000L);
    }

    @Test
    public void test08033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08033");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Enumeration<?> wildcardEnumeration1 = properties0.propertyNames();
        java.lang.Object obj4 = properties0.setProperty("{={-1.0=100}, -1.0=100}", "{={-1.0=100}, -1.0=100}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long6 = recovery5.getRetryInterval();
        long long7 = recovery5.getDelay();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties9 = atomikosProperties8.asProperties();
        atomikosProperties8.service = "{-1.0=100}";
        java.lang.String str12 = atomikosProperties8.getTransactionManagerUniqueName();
        atomikosProperties8.consoleFileName = "hi!";
        atomikosProperties8.serialJtaTransactions = true;
        atomikosProperties8.outputDir = "tm.out";
        boolean boolean19 = atomikosProperties8.isAllowSubTransactions();
        atomikosProperties8.consoleFileName = "";
        atomikosProperties8.transactionManagerUniqueName = "";
        java.lang.Object obj24 = properties0.replace((java.lang.Object) long7, (java.lang.Object) atomikosProperties8);
        boolean boolean25 = properties0.isEmpty();
        properties0.clear();
        java.lang.Object obj29 = properties0.setProperty("{com.atomikos.icatch.={}, 100=100}", "{100=100}");
        java.io.PrintStream printStream30 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.list(printStream30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardEnumeration1);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(obj29);
    }

    @Test
    public void test08034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08034");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        java.lang.String str6 = atomikosProperties0.getOutputDir();
        boolean boolean7 = atomikosProperties0.isForceShutdownOnVmExit();
        boolean boolean8 = atomikosProperties0.enableLogging;
        atomikosProperties0.setLogBaseName("{-1.0=100}");
        atomikosProperties0.setConsoleFileLimit(0);
        java.lang.String str13 = atomikosProperties0.transactionManagerUniqueName;
        boolean boolean14 = atomikosProperties0.isAllowSubTransactions();
        atomikosProperties0.consoleFileCount = (short) -1;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test08035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08035");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.remove((java.lang.Object) (-1.0d));
        boolean boolean3 = properties0.isEmpty();
        java.util.Properties properties4 = new java.util.Properties();
        java.lang.String str5 = properties4.toString();
        java.lang.Object obj7 = properties4.remove((java.lang.Object) (short) 100);
        java.lang.Object obj10 = properties4.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean12 = properties4.containsKey((java.lang.Object) 0L);
        java.lang.Object obj15 = properties4.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj18 = properties4.setProperty("", "{-1.0=100}");
        java.lang.Object obj19 = properties4.clone();
        java.lang.Object obj20 = properties0.get((java.lang.Object) properties4);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties21.setEnableLogging(true);
        atomikosProperties21.consoleFileCount = 0;
        int int26 = atomikosProperties21.getMaxActives();
        java.lang.String str27 = atomikosProperties21.getLogBaseDir();
        java.lang.String str28 = atomikosProperties21.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery29 = atomikosProperties21.getRecovery();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties31 = atomikosProperties30.asProperties();
        atomikosProperties30.service = "{-1.0=100}";
        long long34 = atomikosProperties30.getDefaultJtaTimeout();
        atomikosProperties30.setThreadedTwoPhaseCommit(true);
        boolean boolean37 = atomikosProperties30.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery38 = atomikosProperties30.recovery;
        atomikosProperties30.setLogBaseDir("");
        java.lang.Object obj41 = properties4.replace((java.lang.Object) recovery29, (java.lang.Object) "");
        long long42 = recovery29.getForgetOrphanedLogEntriesDelay();
        recovery29.retryInterval = 0L;
        long long45 = recovery29.getForgetOrphanedLogEntriesDelay();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{}" + "'", str5, "{}");
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(obj19);
// flaky:         org.junit.Assert.assertEquals(obj19.toString(), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 50 + "'", int26 == 50);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(recovery29);
        org.junit.Assert.assertNotNull(properties31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 10000L + "'", long34 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(recovery38);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 86400000L + "'", long42 == 86400000L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 86400000L + "'", long45 == 86400000L);
    }

    @Test
    public void test08036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08036");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        boolean boolean7 = atomikosProperties0.isAllowSubTransactions();
        boolean boolean8 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.allowSubTransactions = false;
        atomikosProperties0.threadedTwoPhaseCommit = true;
        atomikosProperties0.setLogBaseName("tm.out");
        atomikosProperties0.allowSubTransactions = false;
        long long17 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.threadedTwoPhaseCommit = false;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 300000L + "'", long17 == 300000L);
    }

    @Test
    public void test08037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08037");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        atomikosProperties0.setConsoleFileCount((int) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel8 = null;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel8;
        java.lang.String str10 = atomikosProperties0.logBaseDir;
        java.lang.String str11 = atomikosProperties0.consoleFileName;
        int int12 = atomikosProperties0.getConsoleFileCount();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties13.setAllowSubTransactions(true);
        boolean boolean16 = atomikosProperties13.enableLogging;
        boolean boolean17 = atomikosProperties13.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel18 = atomikosProperties13.consoleLogLevel;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel18);
        java.lang.String str20 = atomikosProperties0.getService();
        atomikosProperties0.consoleFileCount = 0;
        atomikosProperties0.consoleFileCount = 0;
        atomikosProperties0.consoleFileName = "{{1.0=-1, -1.0=100}={1.0=-1}, 1.0=-1}";
        java.lang.String str27 = atomikosProperties0.getLogBaseDir();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "tm.out" + "'", str11, "tm.out");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel18 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel18.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str27);
    }

    @Test
    public void test08038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08038");
        java.util.Properties properties0 = new java.util.Properties();
        properties0.clear();
        java.lang.String str2 = properties0.toString();
        java.lang.Object obj3 = properties0.clone();
        java.util.Properties properties4 = new java.util.Properties();
        java.lang.Object obj6 = properties4.remove((java.lang.Object) (-1.0d));
        boolean boolean7 = properties4.isEmpty();
        int int8 = properties4.size();
        java.lang.String str10 = properties4.getProperty("{}");
        java.util.Set<java.lang.Object> objSet11 = properties4.keySet();
        boolean boolean13 = properties4.containsKey((java.lang.Object) (short) 1);
        int int14 = properties4.size();
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet16 = properties4.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties18 = atomikosProperties17.asProperties();
        atomikosProperties17.service = "{-1.0=100}";
        long long21 = atomikosProperties17.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel22 = null;
        atomikosProperties17.setConsoleLogLevel(atomikosLoggingLevel22);
        int int24 = atomikosProperties17.maxActives;
        int int25 = atomikosProperties17.maxActives;
        atomikosProperties17.setThreadedTwoPhaseCommit(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties29 = atomikosProperties28.asProperties();
        atomikosProperties28.service = "{-1.0=100}";
        long long32 = atomikosProperties28.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel33 = null;
        atomikosProperties28.setConsoleLogLevel(atomikosLoggingLevel33);
        atomikosProperties28.setTransactionManagerUniqueName("{-1.0=100}");
        atomikosProperties28.consoleFileCount = 0;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery39 = atomikosProperties28.getRecovery();
        long long40 = recovery39.retryInterval;
        recovery39.setDelay((long) (byte) -1);
        boolean boolean43 = properties4.remove((java.lang.Object) false, (java.lang.Object) recovery39);
        java.util.Set<java.lang.String> strSet44 = properties4.stringPropertyNames();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{}" + "'", str2, "{}");
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(objSet11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(objEntrySet16);
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10000L + "'", long21 == 10000L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 50 + "'", int24 == 50);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 50 + "'", int25 == 50);
        org.junit.Assert.assertNotNull(properties29);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 10000L + "'", long32 == 10000L);
        org.junit.Assert.assertNotNull(recovery39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 10000L + "'", long40 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(strSet44);
    }

    @Test
    public void test08039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08039");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        boolean boolean2 = properties0.isEmpty();
        java.lang.Object obj5 = properties0.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Properties properties6 = new java.util.Properties();
        java.lang.String str7 = properties6.toString();
        java.lang.Object obj9 = properties6.remove((java.lang.Object) (short) 100);
        java.lang.Object obj12 = properties6.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean14 = properties6.containsKey((java.lang.Object) 0L);
        java.lang.Object obj17 = properties6.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties18 = new java.util.Properties(properties6);
        boolean boolean19 = properties0.containsValue((java.lang.Object) properties6);
        java.lang.String str21 = properties0.getProperty("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties23 = atomikosProperties22.asProperties();
        atomikosProperties22.service = "{-1.0=100}";
        long long26 = atomikosProperties22.getDefaultJtaTimeout();
        atomikosProperties22.enableLogging = false;
        atomikosProperties22.setMaxTimeout((long) (byte) 0);
        atomikosProperties22.setAllowSubTransactions(true);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties34 = atomikosProperties33.asProperties();
        atomikosProperties33.service = "{-1.0=100}";
        java.lang.String str37 = atomikosProperties33.getTransactionManagerUniqueName();
        boolean boolean38 = atomikosProperties33.isSerialJtaTransactions();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel39 = atomikosProperties33.getConsoleLogLevel();
        atomikosProperties22.consoleLogLevel = atomikosLoggingLevel39;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties41.setAllowSubTransactions(true);
        boolean boolean44 = atomikosProperties41.enableLogging;
        boolean boolean45 = atomikosProperties41.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel46 = atomikosProperties41.consoleLogLevel;
        atomikosProperties22.consoleLogLevel = atomikosLoggingLevel46;
        atomikosProperties22.setConsoleFileName("{1.0=-1, -1.0=100}");
        java.util.Properties properties50 = new java.util.Properties();
        java.lang.String str51 = properties50.toString();
        java.util.Properties properties52 = new java.util.Properties(properties50);
        boolean boolean53 = properties52.isEmpty();
        java.lang.Object obj56 = properties52.setProperty("tmlog", "{}");
        java.lang.Object obj57 = properties52.clone();
        java.lang.Object obj58 = properties0.putIfAbsent((java.lang.Object) atomikosProperties22, obj57);
        java.util.Enumeration<java.lang.Object> objEnumeration59 = properties0.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties60 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties61 = atomikosProperties60.asProperties();
        atomikosProperties60.service = "{-1.0=100}";
        long long64 = atomikosProperties60.getDefaultJtaTimeout();
        atomikosProperties60.setThreadedTwoPhaseCommit(true);
        boolean boolean67 = atomikosProperties60.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery68 = atomikosProperties60.recovery;
        boolean boolean69 = atomikosProperties60.threadedTwoPhaseCommit;
        atomikosProperties60.service = "{-1.0=100}";
        atomikosProperties60.setThreadedTwoPhaseCommit(false);
        int int74 = atomikosProperties60.getMaxActives();
        java.lang.Object obj75 = properties0.remove((java.lang.Object) atomikosProperties60);
        java.lang.String str77 = properties0.getProperty("{com.atomikos.icatch.{}=5}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties78 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties79 = atomikosProperties78.asProperties();
        atomikosProperties78.service = "{-1.0=100}";
        java.lang.String str82 = atomikosProperties78.getTransactionManagerUniqueName();
        atomikosProperties78.consoleFileName = "hi!";
        atomikosProperties78.setCheckpointInterval((long) 5);
        atomikosProperties78.setLogBaseDir("{-1.0=100}");
        java.lang.String str89 = atomikosProperties78.transactionManagerUniqueName;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean90 = properties0.containsValue((java.lang.Object) str89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "{}" + "'", str7, "{}");
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(properties23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 10000L + "'", long26 == 10000L);
        org.junit.Assert.assertNotNull(properties34);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel39 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel39.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel46 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel46.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "{}" + "'", str51, "{}");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertNotNull(obj57);
        org.junit.Assert.assertEquals(obj57.toString(), "{tmlog={}}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj57), "{tmlog={}}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj57), "{tmlog={}}");
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertNotNull(objEnumeration59);
        org.junit.Assert.assertNotNull(properties61);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 10000L + "'", long64 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(recovery68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 50 + "'", int74 == 50);
        org.junit.Assert.assertNull(obj75);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertNotNull(properties79);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNull(str89);
    }

    @Test
    public void test08040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08040");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setAllowSubTransactions(true);
        java.lang.String str3 = atomikosProperties0.transactionManagerUniqueName;
        int int4 = atomikosProperties0.getConsoleFileLimit();
        java.lang.String str5 = atomikosProperties0.outputDir;
        atomikosProperties0.defaultJtaTimeout = '#';
        boolean boolean8 = atomikosProperties0.allowSubTransactions;
        atomikosProperties0.setForceShutdownOnVmExit(false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test08041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08041");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.enableLogging = false;
        atomikosProperties0.setMaxTimeout((long) (byte) 0);
        atomikosProperties0.setService("tm.out");
        atomikosProperties0.setMaxActives((-1));
        atomikosProperties0.maxActives = 50;
        long long15 = atomikosProperties0.maxTimeout;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
    }

    @Test
    public void test08042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08042");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        java.util.Properties properties8 = new java.util.Properties();
        java.lang.String str9 = properties8.toString();
        java.lang.Object obj11 = properties8.remove((java.lang.Object) (short) 100);
        java.lang.Object obj14 = properties8.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj15 = properties8.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration16 = properties8.elements();
        java.lang.Object obj17 = properties0.putIfAbsent((java.lang.Object) 10.0f, (java.lang.Object) objEnumeration16);
        java.util.Properties properties18 = new java.util.Properties();
        java.util.Enumeration<?> wildcardEnumeration19 = properties18.propertyNames();
        java.lang.Object obj20 = properties18.clone();
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.String str22 = properties21.toString();
        boolean boolean23 = properties21.isEmpty();
        java.lang.Object obj26 = properties21.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties21.elements();
        java.lang.Object obj28 = properties0.put(obj20, (java.lang.Object) objEnumeration27);
        properties0.clear();
        java.util.Properties properties30 = new java.util.Properties();
        java.util.Properties properties31 = new java.util.Properties();
        java.lang.Object obj33 = properties31.remove((java.lang.Object) (-1.0d));
        int int34 = properties31.size();
        java.util.Enumeration<java.lang.Object> objEnumeration35 = properties31.elements();
        java.util.Properties properties36 = new java.util.Properties();
        properties36.clear();
        java.lang.String str38 = properties36.toString();
        boolean boolean39 = properties0.replace((java.lang.Object) properties30, (java.lang.Object) properties31, (java.lang.Object) str38);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean41 = atomikosProperties40.isSerialJtaTransactions();
        atomikosProperties40.logBaseName = "{-1.0=100}";
        int int44 = atomikosProperties40.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery45 = atomikosProperties40.getRecovery();
        atomikosProperties40.setConsoleFileCount((int) (byte) 100);
        atomikosProperties40.setAllowSubTransactions(true);
        atomikosProperties40.setService("tm.out");
        boolean boolean52 = atomikosProperties40.isForceShutdownOnVmExit();
        java.util.Properties properties53 = new java.util.Properties();
        java.lang.String str54 = properties53.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties55 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties56 = atomikosProperties55.asProperties();
        atomikosProperties55.service = "{-1.0=100}";
        long long59 = atomikosProperties55.getDefaultJtaTimeout();
        atomikosProperties55.setThreadedTwoPhaseCommit(true);
        boolean boolean62 = atomikosProperties55.isEnableLogging();
        atomikosProperties55.defaultJtaTimeout = (byte) 10;
        boolean boolean65 = properties31.replace((java.lang.Object) boolean52, (java.lang.Object) properties53, (java.lang.Object) (byte) 10);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet66 = properties31.entrySet();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{}" + "'", str9, "{}");
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration16);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(wildcardEnumeration19);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{}");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{}" + "'", str22, "{}");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(objEnumeration35);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "{}" + "'", str38, "{}");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 50 + "'", int44 == 50);
        org.junit.Assert.assertNotNull(recovery45);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "{}" + "'", str54, "{}");
        org.junit.Assert.assertNotNull(properties56);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 10000L + "'", long59 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objEntrySet66);
    }

    @Test
    public void test08043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08043");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.enableLogging = false;
        atomikosProperties0.setMaxTimeout((long) (byte) 0);
        atomikosProperties0.setAllowSubTransactions(true);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties12 = atomikosProperties11.asProperties();
        atomikosProperties11.service = "{-1.0=100}";
        java.lang.String str15 = atomikosProperties11.getTransactionManagerUniqueName();
        boolean boolean16 = atomikosProperties11.isSerialJtaTransactions();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel17 = atomikosProperties11.getConsoleLogLevel();
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel17;
        atomikosProperties0.threadedTwoPhaseCommit = true;
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.String str22 = properties21.toString();
        java.lang.Object obj24 = properties21.remove((java.lang.Object) (short) 100);
        java.lang.Object obj27 = properties21.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj28 = properties21.clone();
        java.lang.String str30 = properties21.getProperty("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties32 = atomikosProperties31.asProperties();
        atomikosProperties31.service = "{-1.0=100}";
        long long35 = atomikosProperties31.getDefaultJtaTimeout();
        atomikosProperties31.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties31.setMaxActives(100);
        boolean boolean40 = atomikosProperties31.enableLogging;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery41 = atomikosProperties31.recovery;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties43 = atomikosProperties42.asProperties();
        atomikosProperties42.service = "{-1.0=100}";
        long long46 = atomikosProperties42.getDefaultJtaTimeout();
        atomikosProperties42.setMaxActives(0);
        boolean boolean49 = atomikosProperties42.threadedTwoPhaseCommit;
        boolean boolean50 = atomikosProperties42.allowSubTransactions;
        atomikosProperties42.logBaseDir = "{}";
        atomikosProperties42.service = "{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}";
        java.lang.Object obj55 = properties21.put((java.lang.Object) recovery41, (java.lang.Object) atomikosProperties42);
        atomikosProperties42.serialJtaTransactions = true;
        java.lang.String str58 = atomikosProperties42.getLogBaseDir();
        int int59 = atomikosProperties42.getMaxActives();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel60 = atomikosProperties42.consoleLogLevel;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel60;
        atomikosProperties0.defaultJtaTimeout = (-1L);
        java.lang.String str64 = atomikosProperties0.getService();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertNotNull(properties12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel17 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel17.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{}" + "'", str22, "{}");
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "{1.0=-1}");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(properties32);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 10000L + "'", long35 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(recovery41);
        org.junit.Assert.assertNotNull(properties43);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 10000L + "'", long46 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "{}" + "'", str58, "{}");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel60 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel60.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "{-1.0=100}" + "'", str64, "{-1.0=100}");
    }

    @Test
    public void test08044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08044");
        java.util.Properties properties0 = new java.util.Properties();
        properties0.clear();
        java.lang.String str2 = properties0.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties3 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties4 = atomikosProperties3.asProperties();
        atomikosProperties3.service = "{-1.0=100}";
        long long7 = atomikosProperties3.getDefaultJtaTimeout();
        atomikosProperties3.setThreadedTwoPhaseCommit(true);
        boolean boolean10 = atomikosProperties3.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery11 = atomikosProperties3.recovery;
        long long12 = recovery11.getForgetOrphanedLogEntriesDelay();
        boolean boolean13 = properties0.containsValue((java.lang.Object) long12);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties15 = atomikosProperties14.asProperties();
        atomikosProperties14.service = "{-1.0=100}";
        long long18 = atomikosProperties14.getDefaultJtaTimeout();
        atomikosProperties14.serialJtaTransactions = true;
        long long21 = atomikosProperties14.getDefaultJtaTimeout();
        long long22 = atomikosProperties14.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery23 = atomikosProperties14.getRecovery();
        java.lang.String str24 = atomikosProperties14.outputDir;
        atomikosProperties14.setTransactionManagerUniqueName("");
        atomikosProperties14.setTransactionManagerUniqueName("");
        atomikosProperties14.setLogBaseDir("{{}={}}");
        boolean boolean31 = properties0.containsKey((java.lang.Object) atomikosProperties14);
        atomikosProperties14.consoleFileLimit = 100;
        java.lang.String str34 = atomikosProperties14.outputDir;
        java.lang.String str35 = atomikosProperties14.transactionManagerUniqueName;
        java.util.Properties properties36 = new java.util.Properties();
        java.lang.String str37 = properties36.toString();
        java.lang.Object obj39 = properties36.remove((java.lang.Object) (short) 100);
        java.lang.Object obj42 = properties36.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean44 = properties36.containsKey((java.lang.Object) 0L);
        java.lang.Object obj47 = properties36.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties48 = new java.util.Properties(properties36);
        java.util.Enumeration<java.lang.Object> objEnumeration49 = properties36.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties51 = atomikosProperties50.asProperties();
        atomikosProperties50.service = "{-1.0=100}";
        long long54 = atomikosProperties50.getDefaultJtaTimeout();
        long long55 = atomikosProperties50.getMaxTimeout();
        java.lang.String str56 = atomikosProperties50.outputDir;
        atomikosProperties50.consoleFileName = "tm.out";
        long long59 = atomikosProperties50.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel60 = atomikosProperties50.consoleLogLevel;
        java.util.Properties properties61 = new java.util.Properties();
        java.lang.String str62 = properties61.toString();
        java.lang.Object obj64 = properties61.remove((java.lang.Object) (short) 100);
        java.lang.Object obj67 = properties61.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean69 = properties61.containsKey((java.lang.Object) 0L);
        java.lang.String str70 = properties61.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties71 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties72 = atomikosProperties71.asProperties();
        atomikosProperties71.service = "{-1.0=100}";
        long long75 = atomikosProperties71.getDefaultJtaTimeout();
        atomikosProperties71.setMaxActives(0);
        atomikosProperties71.maxActives = 'a';
        boolean boolean80 = atomikosProperties71.isThreadedTwoPhaseCommit();
        boolean boolean81 = atomikosProperties71.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel82 = atomikosProperties71.consoleLogLevel;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties83 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties84 = atomikosProperties83.asProperties();
        atomikosProperties83.service = "{-1.0=100}";
        long long87 = atomikosProperties83.getDefaultJtaTimeout();
        atomikosProperties83.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties83.setMaxActives(100);
        java.lang.String str92 = atomikosProperties83.logBaseDir;
        java.lang.String str93 = atomikosProperties83.outputDir;
        java.lang.Object obj94 = properties61.replace((java.lang.Object) atomikosLoggingLevel82, (java.lang.Object) atomikosProperties83);
        java.lang.Object obj95 = properties36.replace((java.lang.Object) atomikosProperties50, (java.lang.Object) atomikosLoggingLevel82);
        int int96 = atomikosProperties50.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel97 = atomikosProperties50.getConsoleLogLevel();
        atomikosProperties14.setConsoleLogLevel(atomikosLoggingLevel97);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{}" + "'", str2, "{}");
        org.junit.Assert.assertNotNull(properties4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(recovery11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 86400000L + "'", long12 == 86400000L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10000L + "'", long18 == 10000L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10000L + "'", long21 == 10000L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 500L + "'", long22 == 500L);
        org.junit.Assert.assertNotNull(recovery23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "{}" + "'", str37, "{}");
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNotNull(objEnumeration49);
        org.junit.Assert.assertNotNull(properties51);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 10000L + "'", long54 == 10000L);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 300000L + "'", long55 == 300000L);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 500L + "'", long59 == 500L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel60 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel60.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "{}" + "'", str62, "{}");
        org.junit.Assert.assertNull(obj64);
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "{-1.0=100}" + "'", str70, "{-1.0=100}");
        org.junit.Assert.assertNotNull(properties72);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 10000L + "'", long75 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel82 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel82.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(properties84);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 10000L + "'", long87 == 10000L);
        org.junit.Assert.assertNull(str92);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "{={-1.0=100}, -1.0=100}" + "'", str93, "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNull(obj94);
        org.junit.Assert.assertNull(obj95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + (-1) + "'", int96 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel97 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel97.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
    }

    @Test
    public void test08045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08045");
        java.util.Properties properties0 = new java.util.Properties();
        properties0.clear();
        java.lang.String str2 = properties0.toString();
        int int3 = properties0.size();
        java.util.Properties properties4 = new java.util.Properties();
        java.lang.String str5 = properties4.toString();
        java.lang.Object obj7 = properties4.remove((java.lang.Object) (short) 100);
        java.lang.Object obj10 = properties4.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        java.util.Properties properties12 = new java.util.Properties();
        java.lang.String str13 = properties12.toString();
        java.lang.Object obj15 = properties12.remove((java.lang.Object) (short) 100);
        java.lang.Object obj18 = properties12.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj19 = properties12.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration20 = properties12.elements();
        java.lang.Object obj21 = properties4.putIfAbsent((java.lang.Object) 10.0f, (java.lang.Object) objEnumeration20);
        java.util.Properties properties22 = new java.util.Properties();
        java.util.Enumeration<?> wildcardEnumeration23 = properties22.propertyNames();
        java.lang.Object obj24 = properties22.clone();
        java.util.Properties properties25 = new java.util.Properties();
        java.lang.String str26 = properties25.toString();
        boolean boolean27 = properties25.isEmpty();
        java.lang.Object obj30 = properties25.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration31 = properties25.elements();
        java.lang.Object obj32 = properties4.put(obj24, (java.lang.Object) objEnumeration31);
        properties4.clear();
        java.util.Properties properties34 = new java.util.Properties();
        java.util.Properties properties35 = new java.util.Properties();
        java.lang.Object obj37 = properties35.remove((java.lang.Object) (-1.0d));
        int int38 = properties35.size();
        java.util.Enumeration<java.lang.Object> objEnumeration39 = properties35.elements();
        java.util.Properties properties40 = new java.util.Properties();
        properties40.clear();
        java.lang.String str42 = properties40.toString();
        boolean boolean43 = properties4.replace((java.lang.Object) properties34, (java.lang.Object) properties35, (java.lang.Object) str42);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean45 = atomikosProperties44.isSerialJtaTransactions();
        atomikosProperties44.logBaseName = "{-1.0=100}";
        int int48 = atomikosProperties44.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery49 = atomikosProperties44.getRecovery();
        atomikosProperties44.setConsoleFileCount((int) (byte) 100);
        atomikosProperties44.setAllowSubTransactions(true);
        atomikosProperties44.setService("tm.out");
        boolean boolean56 = atomikosProperties44.isForceShutdownOnVmExit();
        java.util.Properties properties57 = new java.util.Properties();
        java.lang.String str58 = properties57.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties59 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties60 = atomikosProperties59.asProperties();
        atomikosProperties59.service = "{-1.0=100}";
        long long63 = atomikosProperties59.getDefaultJtaTimeout();
        atomikosProperties59.setThreadedTwoPhaseCommit(true);
        boolean boolean66 = atomikosProperties59.isEnableLogging();
        atomikosProperties59.defaultJtaTimeout = (byte) 10;
        boolean boolean69 = properties35.replace((java.lang.Object) boolean56, (java.lang.Object) properties57, (java.lang.Object) (byte) 10);
        java.lang.Object obj70 = properties35.clone();
        java.lang.Object obj71 = properties0.get((java.lang.Object) properties35);
        java.lang.Object obj72 = properties0.clone();
        java.util.Collection<java.lang.Object> objCollection73 = properties0.values();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{}" + "'", str2, "{}");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{}" + "'", str5, "{}");
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{}" + "'", str13, "{}");
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration20);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNotNull(wildcardEnumeration23);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "{}");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "{}" + "'", str26, "{}");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNotNull(objEnumeration31);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(objEnumeration39);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "{}" + "'", str42, "{}");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 50 + "'", int48 == 50);
        org.junit.Assert.assertNotNull(recovery49);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "{}" + "'", str58, "{}");
        org.junit.Assert.assertNotNull(properties60);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 10000L + "'", long63 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(obj70);
        org.junit.Assert.assertEquals(obj70.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj70), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj70), "{}");
        org.junit.Assert.assertNull(obj71);
        org.junit.Assert.assertNotNull(obj72);
        org.junit.Assert.assertEquals(obj72.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj72), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj72), "{}");
        org.junit.Assert.assertNotNull(objCollection73);
    }

    @Test
    public void test08046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08046");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        java.lang.String str7 = atomikosProperties0.getLogBaseName();
        int int8 = atomikosProperties0.maxActives;
        atomikosProperties0.setOutputDir("hi!");
        boolean boolean11 = atomikosProperties0.allowSubTransactions;
        int int12 = atomikosProperties0.getConsoleFileCount();
        boolean boolean13 = atomikosProperties0.isThreadedTwoPhaseCommit();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "tmlog" + "'", str7, "tmlog");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 50 + "'", int8 == 50);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test08047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08047");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.retryInterval = (short) 100;
        recovery0.forgetOrphanedLogEntriesDelay = 'a';
        recovery0.forgetOrphanedLogEntriesDelay = 0L;
        long long7 = recovery0.retryInterval;
        recovery0.delay = 0L;
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L + "'", long7 == 100L);
    }

    @Test
    public void test08048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08048");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties12 = new java.util.Properties();
        java.lang.String str13 = properties12.toString();
        java.lang.Object obj15 = properties12.remove((java.lang.Object) (short) 100);
        java.lang.Object obj18 = properties12.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj19 = properties12.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration20 = properties12.elements();
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties12);
        boolean boolean23 = properties0.equals((java.lang.Object) 1.0f);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean25 = atomikosProperties24.isThreadedTwoPhaseCommit();
        long long26 = atomikosProperties24.getCheckpointInterval();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean28 = atomikosProperties27.isSerialJtaTransactions();
        atomikosProperties27.logBaseName = "{-1.0=100}";
        int int31 = atomikosProperties27.maxActives;
        int int32 = atomikosProperties27.getConsoleFileCount();
        boolean boolean33 = properties0.remove((java.lang.Object) atomikosProperties24, (java.lang.Object) atomikosProperties27);
        atomikosProperties27.setThreadedTwoPhaseCommit(false);
        java.lang.String str36 = atomikosProperties27.transactionManagerUniqueName;
        int int37 = atomikosProperties27.consoleFileCount;
        java.util.Properties properties38 = atomikosProperties27.asProperties();
        java.io.Reader reader39 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties38.load(reader39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{}" + "'", str13, "{}");
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 500L + "'", long26 == 500L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 50 + "'", int31 == 50);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(properties38);
    }

    @Test
    public void test08049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08049");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.checkpointInterval = 86400000L;
        long long4 = atomikosProperties0.checkpointInterval;
        java.lang.String str5 = atomikosProperties0.getLogBaseName();
        java.lang.String str6 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.setConsoleFileName("{{={-1.0=100}, -1.0=100}=}");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 86400000L + "'", long4 == 86400000L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tmlog" + "'", str5, "tmlog");
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test08050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08050");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setTransactionManagerUniqueName("{}");
        atomikosProperties0.enableLogging = true;
        java.lang.String str9 = atomikosProperties0.getService();
        atomikosProperties0.setTransactionManagerUniqueName("{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}");
        boolean boolean12 = atomikosProperties0.isThreadedTwoPhaseCommit();
        int int13 = atomikosProperties0.maxActives;
        java.lang.String str14 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.allowSubTransactions = false;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{-1.0=100}" + "'", str9, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 50 + "'", int13 == 50);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "tm.out" + "'", str14, "tm.out");
    }

    @Test
    public void test08051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08051");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        int int7 = atomikosProperties0.maxActives;
        atomikosProperties0.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.getRecovery();
        atomikosProperties0.outputDir = "hi!";
        atomikosProperties0.setDefaultJtaTimeout((long) 10);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery15 = atomikosProperties0.recovery;
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertNotNull(recovery15);
    }

    @Test
    public void test08052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08052");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setAllowSubTransactions(true);
        atomikosProperties0.maxActives = (short) -1;
        atomikosProperties0.setService("tm.out");
        atomikosProperties0.setConsoleFileName("tmlog");
        java.lang.String str9 = atomikosProperties0.logBaseName;
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tmlog" + "'", str9, "tmlog");
    }

    @Test
    public void test08053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08053");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        boolean boolean5 = atomikosProperties0.isSerialJtaTransactions();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel6 = atomikosProperties0.getConsoleLogLevel();
        long long7 = atomikosProperties0.getCheckpointInterval();
        java.lang.String str8 = atomikosProperties0.service;
        atomikosProperties0.setForceShutdownOnVmExit(true);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel6 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel6.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{-1.0=100}" + "'", str8, "{-1.0=100}");
    }

    @Test
    public void test08054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08054");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.retryInterval = (short) 100;
        recovery0.delay = (-1L);
        long long5 = recovery0.delay;
        recovery0.delay = (short) 1;
        long long8 = recovery0.getRetryInterval();
        long long9 = recovery0.getForgetOrphanedLogEntriesDelay();
        recovery0.setMaxRetries(10);
        int int12 = recovery0.maxRetries;
        recovery0.setDelay((long) (short) 100);
        recovery0.forgetOrphanedLogEntriesDelay = 300000L;
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 86400000L + "'", long9 == 86400000L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
    }

    @Test
    public void test08055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08055");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        boolean boolean5 = atomikosProperties0.enableLogging;
        boolean boolean6 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.consoleFileLimit = (byte) -1;
        java.lang.String str9 = atomikosProperties0.getService();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel10 = atomikosProperties0.consoleLogLevel;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties12 = atomikosProperties11.asProperties();
        atomikosProperties11.service = "{-1.0=100}";
        long long15 = atomikosProperties11.getDefaultJtaTimeout();
        atomikosProperties11.serialJtaTransactions = true;
        long long18 = atomikosProperties11.maxTimeout;
        atomikosProperties11.setLogBaseDir("{-1.0=100}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties21.setAllowSubTransactions(true);
        atomikosProperties21.maxActives = (short) -1;
        atomikosProperties21.setService("tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties28.setAllowSubTransactions(true);
        boolean boolean31 = atomikosProperties28.enableLogging;
        boolean boolean32 = atomikosProperties28.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel33 = atomikosProperties28.consoleLogLevel;
        atomikosProperties21.setConsoleLogLevel(atomikosLoggingLevel33);
        atomikosProperties11.consoleLogLevel = atomikosLoggingLevel33;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel33;
        atomikosProperties0.setDefaultJtaTimeout((long) 19);
        atomikosProperties0.setConsoleFileName("{={-1.0=100}, -1.0=100}");
        java.lang.String str41 = atomikosProperties0.getLogBaseName();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{-1.0=100}" + "'", str9, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel10 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel10.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(properties12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10000L + "'", long15 == 10000L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 300000L + "'", long18 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel33 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel33.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "tmlog" + "'", str41, "tmlog");
    }

    @Test
    public void test08056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08056");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj14 = properties0.setProperty("", "{-1.0=100}");
        boolean boolean15 = properties0.isEmpty();
        java.util.Properties properties16 = new java.util.Properties();
        java.lang.String str17 = properties16.toString();
        java.util.Properties properties18 = new java.util.Properties(properties16);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet19 = properties18.entrySet();
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.Object obj23 = properties21.remove((java.lang.Object) (-1.0d));
        int int24 = properties21.size();
        boolean boolean25 = properties0.replace((java.lang.Object) properties18, (java.lang.Object) 100L, (java.lang.Object) properties21);
        java.util.Enumeration<java.lang.Object> objEnumeration26 = properties18.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean28 = atomikosProperties27.isSerialJtaTransactions();
        atomikosProperties27.logBaseName = "{-1.0=100}";
        int int31 = atomikosProperties27.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery32 = atomikosProperties27.getRecovery();
        atomikosProperties27.setConsoleFileCount((int) (byte) 100);
        atomikosProperties27.maxTimeout = 50;
        java.lang.String str37 = atomikosProperties27.getConsoleFileName();
        boolean boolean38 = properties18.containsValue((java.lang.Object) atomikosProperties27);
        boolean boolean39 = atomikosProperties27.forceShutdownOnVmExit;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery40 = atomikosProperties27.getRecovery();
        atomikosProperties27.serialJtaTransactions = false;
        java.lang.String str43 = atomikosProperties27.getOutputDir();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "{}" + "'", str17, "{}");
        org.junit.Assert.assertNotNull(objEntrySet19);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(objEnumeration26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 50 + "'", int31 == 50);
        org.junit.Assert.assertNotNull(recovery32);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "tm.out" + "'", str37, "tm.out");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(recovery40);
        org.junit.Assert.assertNull(str43);
    }

    @Test
    public void test08057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08057");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getLogBaseName();
        long long5 = atomikosProperties0.defaultJtaTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel6 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel6);
        atomikosProperties0.threadedTwoPhaseCommit = false;
        atomikosProperties0.allowSubTransactions = false;
        java.lang.String str12 = atomikosProperties0.getConsoleFileName();
        boolean boolean13 = atomikosProperties0.isForceShutdownOnVmExit();
        boolean boolean14 = atomikosProperties0.isSerialJtaTransactions();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tmlog" + "'", str4, "tmlog");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 10000L + "'", long5 == 10000L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "tm.out" + "'", str12, "tm.out");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test08058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08058");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.enableLogging = false;
        atomikosProperties0.setMaxTimeout((long) (byte) 0);
        atomikosProperties0.setService("tm.out");
        atomikosProperties0.setMaxActives((-1));
        atomikosProperties0.outputDir = "tmlog";
        atomikosProperties0.consoleFileCount = 5;
        atomikosProperties0.threadedTwoPhaseCommit = true;
        atomikosProperties0.setConsoleFileLimit((int) (byte) -1);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
    }

    @Test
    public void test08059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08059");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery4 = atomikosProperties0.recovery;
        java.lang.String str5 = atomikosProperties0.getLogBaseDir();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery6 = atomikosProperties0.recovery;
        long long7 = recovery6.retryInterval;
        recovery6.maxRetries = 97;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNotNull(recovery4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(recovery6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
    }

    @Test
    public void test08060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08060");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.retryInterval = (short) 100;
        recovery0.setForgetOrphanedLogEntriesDelay((long) 5);
        long long5 = recovery0.forgetOrphanedLogEntriesDelay;
        recovery0.setMaxRetries(3);
        long long8 = recovery0.getRetryInterval();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 5L + "'", long5 == 5L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
    }

    @Test
    public void test08061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08061");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.remove((java.lang.Object) (-1.0d));
        boolean boolean3 = properties0.isEmpty();
        java.util.Properties properties4 = new java.util.Properties();
        java.lang.String str5 = properties4.toString();
        java.lang.Object obj7 = properties4.remove((java.lang.Object) (short) 100);
        java.lang.Object obj10 = properties4.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean12 = properties4.containsKey((java.lang.Object) 0L);
        java.lang.Object obj15 = properties4.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj18 = properties4.setProperty("", "{-1.0=100}");
        java.lang.Object obj19 = properties4.clone();
        java.lang.Object obj20 = properties0.get((java.lang.Object) properties4);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties21.setEnableLogging(true);
        atomikosProperties21.consoleFileCount = 0;
        int int26 = atomikosProperties21.getMaxActives();
        java.lang.String str27 = atomikosProperties21.getLogBaseDir();
        java.lang.String str28 = atomikosProperties21.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery29 = atomikosProperties21.getRecovery();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties31 = atomikosProperties30.asProperties();
        atomikosProperties30.service = "{-1.0=100}";
        long long34 = atomikosProperties30.getDefaultJtaTimeout();
        atomikosProperties30.setThreadedTwoPhaseCommit(true);
        boolean boolean37 = atomikosProperties30.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery38 = atomikosProperties30.recovery;
        atomikosProperties30.setLogBaseDir("");
        java.lang.Object obj41 = properties4.replace((java.lang.Object) recovery29, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery42 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery42.retryInterval = (short) 100;
        recovery42.forgetOrphanedLogEntriesDelay = 'a';
        long long47 = recovery42.getDelay();
        int int48 = recovery42.maxRetries;
        int int49 = recovery42.maxRetries;
        recovery42.setDelay((long) 'a');
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties52 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties53 = atomikosProperties52.asProperties();
        atomikosProperties52.service = "{-1.0=100}";
        long long56 = atomikosProperties52.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel57 = null;
        atomikosProperties52.setConsoleLogLevel(atomikosLoggingLevel57);
        int int59 = atomikosProperties52.maxActives;
        atomikosProperties52.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery62 = atomikosProperties52.getRecovery();
        atomikosProperties52.forceShutdownOnVmExit = false;
        java.util.Properties properties65 = atomikosProperties52.asProperties();
        boolean boolean66 = atomikosProperties52.isAllowSubTransactions();
        java.lang.Object obj67 = properties4.getOrDefault((java.lang.Object) recovery42, (java.lang.Object) boolean66);
        long long68 = recovery42.forgetOrphanedLogEntriesDelay;
        recovery42.delay = 10L;
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{}" + "'", str5, "{}");
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(obj19);
// flaky:         org.junit.Assert.assertEquals(obj19.toString(), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 50 + "'", int26 == 50);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(recovery29);
        org.junit.Assert.assertNotNull(properties31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 10000L + "'", long34 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(recovery38);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 10000L + "'", long47 == 10000L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 5 + "'", int48 == 5);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 5 + "'", int49 == 5);
        org.junit.Assert.assertNotNull(properties53);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 10000L + "'", long56 == 10000L);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 50 + "'", int59 == 50);
        org.junit.Assert.assertNotNull(recovery62);
        org.junit.Assert.assertNotNull(properties65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertEquals("'" + obj67 + "' != '" + true + "'", obj67, true);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 97L + "'", long68 == 97L);
    }

    @Test
    public void test08062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08062");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.outputDir = "{={-1.0=100}, -1.0=100}";
        java.lang.String str3 = atomikosProperties0.logBaseDir;
        java.util.Properties properties4 = new java.util.Properties();
        java.lang.String str5 = properties4.toString();
        java.lang.Object obj7 = properties4.remove((java.lang.Object) (short) 100);
        java.lang.Object obj10 = properties4.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        int int11 = properties4.size();
        java.util.Properties properties14 = new java.util.Properties();
        java.lang.Object obj16 = properties14.remove((java.lang.Object) (-1.0d));
        boolean boolean17 = properties14.isEmpty();
        java.lang.Object obj20 = properties14.setProperty("hi!", "{}");
        boolean boolean21 = properties4.replace((java.lang.Object) 1, (java.lang.Object) 1, (java.lang.Object) "{}");
        java.util.Properties properties22 = new java.util.Properties(properties4);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean25 = atomikosProperties24.isSerialJtaTransactions();
        atomikosProperties24.logBaseName = "{-1.0=100}";
        int int28 = atomikosProperties24.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery29 = atomikosProperties24.getRecovery();
        recovery29.setMaxRetries((int) (byte) 100);
        long long32 = recovery29.forgetOrphanedLogEntriesDelay;
        long long33 = recovery29.forgetOrphanedLogEntriesDelay;
        atomikosProperties0.set(properties4, "{1.0=-1, -1.0=100}", (java.lang.Object) long33);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet35 = properties4.entrySet();
        java.lang.String str36 = properties4.toString();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{}" + "'", str5, "{}");
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 50 + "'", int28 == 50);
        org.junit.Assert.assertNotNull(recovery29);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 86400000L + "'", long32 == 86400000L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 86400000L + "'", long33 == 86400000L);
        org.junit.Assert.assertNotNull(objEntrySet35);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "{com.atomikos.icatch.{1.0=-1, -1.0=100}=86400000, -1.0=100}" + "'", str36, "{com.atomikos.icatch.{1.0=-1, -1.0=100}=86400000, -1.0=100}");
    }

    @Test
    public void test08063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08063");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        java.lang.String str6 = atomikosProperties0.getLogBaseName();
        atomikosProperties0.setCheckpointInterval((long) 32);
        boolean boolean9 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.maxActives = (short) 0;
        atomikosProperties0.maxActives = (byte) 1;
        atomikosProperties0.setEnableLogging(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "{-1.0=100}" + "'", str6, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test08064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08064");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.remove((java.lang.Object) (-1.0d));
        boolean boolean3 = properties0.isEmpty();
        java.util.Properties properties4 = new java.util.Properties();
        java.lang.String str5 = properties4.toString();
        java.lang.Object obj7 = properties4.remove((java.lang.Object) (short) 100);
        java.lang.Object obj10 = properties4.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean12 = properties4.containsKey((java.lang.Object) 0L);
        java.lang.Object obj15 = properties4.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj18 = properties4.setProperty("", "{-1.0=100}");
        java.lang.Object obj19 = properties4.clone();
        java.lang.Object obj20 = properties0.get((java.lang.Object) properties4);
        java.lang.Object obj21 = properties4.clone();
        int int22 = properties4.size();
        java.lang.Object obj23 = properties4.clone();
        java.util.Properties properties24 = new java.util.Properties();
        java.lang.Object obj27 = properties24.setProperty("{}", "{}");
        java.util.Enumeration<java.lang.Object> objEnumeration28 = properties24.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration29 = properties24.elements();
        java.util.Properties properties30 = new java.util.Properties(properties24);
        java.util.Properties properties31 = new java.util.Properties(properties30);
        java.util.Properties properties32 = new java.util.Properties(properties30);
        java.util.Collection<java.lang.Object> objCollection33 = properties30.values();
        boolean boolean34 = properties4.contains((java.lang.Object) objCollection33);
        java.util.Set<java.lang.Object> objSet35 = properties4.keySet();
        java.lang.Object obj38 = properties4.setProperty("{com.atomikos.icatch.{}=5}", "{1.0=-1}");
        java.io.OutputStream outputStream39 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties4.store(outputStream39, "{100=100}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{}" + "'", str5, "{}");
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(obj19);
// flaky:         org.junit.Assert.assertEquals(obj19.toString(), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNotNull(obj21);
// flaky:         org.junit.Assert.assertEquals(obj21.toString(), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(obj23);
// flaky:         org.junit.Assert.assertEquals(obj23.toString(), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNotNull(objEnumeration28);
        org.junit.Assert.assertNotNull(objEnumeration29);
        org.junit.Assert.assertNotNull(objCollection33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(objSet35);
        org.junit.Assert.assertNull(obj38);
    }

    @Test
    public void test08065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08065");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        atomikosProperties2.service = "{-1.0=100}";
        long long6 = atomikosProperties2.getDefaultJtaTimeout();
        atomikosProperties2.consoleFileLimit = '#';
        java.lang.Object obj9 = properties1.get((java.lang.Object) atomikosProperties2);
        boolean boolean10 = atomikosProperties2.forceShutdownOnVmExit;
        atomikosProperties2.setOutputDir("");
        long long13 = atomikosProperties2.defaultJtaTimeout;
        java.lang.String str14 = atomikosProperties2.getLogBaseName();
        atomikosProperties2.setEnableLogging(false);
        int int17 = atomikosProperties2.consoleFileCount;
        atomikosProperties2.outputDir = "tmlog";
        long long20 = atomikosProperties2.getDefaultJtaTimeout();
        atomikosProperties2.transactionManagerUniqueName = "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name={}, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={-1.0=100}, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}";
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10000L + "'", long13 == 10000L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "tmlog" + "'", str14, "tmlog");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10000L + "'", long20 == 10000L);
    }

    @Test
    public void test08066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08066");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        atomikosProperties2.service = "{-1.0=100}";
        long long6 = atomikosProperties2.getDefaultJtaTimeout();
        atomikosProperties2.consoleFileLimit = '#';
        java.lang.Object obj9 = properties1.get((java.lang.Object) atomikosProperties2);
        boolean boolean10 = atomikosProperties2.forceShutdownOnVmExit;
        atomikosProperties2.setOutputDir("");
        long long13 = atomikosProperties2.defaultJtaTimeout;
        atomikosProperties2.setConsoleFileLimit((int) (short) -1);
        boolean boolean16 = atomikosProperties2.serialJtaTransactions;
        atomikosProperties2.setEnableLogging(false);
        atomikosProperties2.maxTimeout = 1L;
        int int21 = atomikosProperties2.consoleFileLimit;
        boolean boolean22 = atomikosProperties2.isSerialJtaTransactions();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10000L + "'", long13 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test08067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08067");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj3 = properties0.setProperty("{}", "{}");
        java.util.Enumeration<java.lang.Object> objEnumeration4 = properties0.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties0.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties7 = atomikosProperties6.asProperties();
        atomikosProperties6.service = "{-1.0=100}";
        long long10 = atomikosProperties6.getDefaultJtaTimeout();
        long long11 = atomikosProperties6.getMaxTimeout();
        java.lang.String str12 = atomikosProperties6.outputDir;
        atomikosProperties6.consoleFileName = "tm.out";
        int int15 = atomikosProperties6.consoleFileCount;
        java.lang.Object obj16 = properties0.get((java.lang.Object) int15);
        int int17 = properties0.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties19 = atomikosProperties18.asProperties();
        atomikosProperties18.service = "{-1.0=100}";
        long long22 = atomikosProperties18.getDefaultJtaTimeout();
        atomikosProperties18.enableLogging = false;
        atomikosProperties18.setMaxTimeout((long) (byte) 0);
        atomikosProperties18.setService("tm.out");
        atomikosProperties18.setMaxActives((-1));
        atomikosProperties18.outputDir = "tmlog";
        atomikosProperties18.consoleFileCount = 5;
        atomikosProperties18.threadedTwoPhaseCommit = true;
        atomikosProperties18.setService("{{={-1.0=100}, -1.0=100}=}");
        atomikosProperties18.setThreadedTwoPhaseCommit(false);
        java.util.Properties properties41 = new java.util.Properties();
        java.lang.String str42 = properties41.toString();
        java.lang.Object obj44 = properties41.remove((java.lang.Object) (short) 100);
        java.lang.Object obj47 = properties41.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        java.util.Properties properties49 = new java.util.Properties();
        java.lang.String str50 = properties49.toString();
        java.lang.Object obj52 = properties49.remove((java.lang.Object) (short) 100);
        java.lang.Object obj55 = properties49.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj56 = properties49.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration57 = properties49.elements();
        java.lang.Object obj58 = properties41.putIfAbsent((java.lang.Object) 10.0f, (java.lang.Object) objEnumeration57);
        java.util.Set<java.lang.String> strSet59 = properties41.stringPropertyNames();
        java.util.Enumeration<java.lang.Object> objEnumeration60 = properties41.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties61 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties61.setEnableLogging(true);
        atomikosProperties61.setConsoleFileLimit((int) (short) 0);
        atomikosProperties61.maxActives = 1;
        atomikosProperties61.setMaxActives(10);
        boolean boolean70 = properties0.replace((java.lang.Object) atomikosProperties18, (java.lang.Object) objEnumeration60, (java.lang.Object) 10);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNotNull(objEnumeration4);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 300000L + "'", long11 == 300000L);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(properties19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 10000L + "'", long22 == 10000L);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "{}" + "'", str42, "{}");
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "{}" + "'", str50, "{}");
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertEquals(obj56.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj56), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj56), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration57);
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertNotNull(strSet59);
        org.junit.Assert.assertNotNull(objEnumeration60);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test08068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08068");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.retryInterval = (short) 100;
        recovery0.forgetOrphanedLogEntriesDelay = 'a';
        long long5 = recovery0.retryInterval;
        recovery0.setForgetOrphanedLogEntriesDelay((long) 0);
        recovery0.delay = 97;
        recovery0.delay = '4';
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 100L + "'", long5 == 100L);
    }

    @Test
    public void test08069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08069");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.outputDir = "{={-1.0=100}, -1.0=100}";
        long long7 = atomikosProperties0.getCheckpointInterval();
        boolean boolean8 = atomikosProperties0.isThreadedTwoPhaseCommit();
        java.lang.String str9 = atomikosProperties0.service;
        int int10 = atomikosProperties0.consoleFileCount;
        atomikosProperties0.logBaseName = "tm.out";
        java.lang.String str13 = atomikosProperties0.getService();
        atomikosProperties0.setCheckpointInterval(300000L);
        atomikosProperties0.setMaxActives((int) (byte) -1);
        atomikosProperties0.checkpointInterval = 32L;
        java.lang.String str20 = atomikosProperties0.transactionManagerUniqueName;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{-1.0=100}" + "'", str9, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{-1.0=100}" + "'", str13, "{-1.0=100}");
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test08070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08070");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        boolean boolean2 = properties0.isEmpty();
        java.lang.Object obj5 = properties0.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Properties properties6 = new java.util.Properties();
        java.lang.Object obj8 = properties6.remove((java.lang.Object) (-1.0d));
        boolean boolean9 = properties6.isEmpty();
        java.lang.Object obj12 = properties6.setProperty("hi!", "{}");
        java.lang.Object obj14 = properties0.getOrDefault((java.lang.Object) "hi!", (java.lang.Object) 100.0d);
        properties0.clear();
        java.util.Properties properties16 = new java.util.Properties();
        java.lang.String str17 = properties16.toString();
        java.util.Properties properties18 = new java.util.Properties(properties16);
        boolean boolean19 = properties18.isEmpty();
        java.lang.Object obj22 = properties18.setProperty("tmlog", "{}");
        boolean boolean23 = properties0.containsValue((java.lang.Object) properties18);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery24 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery24.retryInterval = (short) 100;
        recovery24.setForgetOrphanedLogEntriesDelay((long) 5);
        recovery24.setRetryInterval((long) (-1));
        recovery24.retryInterval = (byte) 100;
        long long33 = recovery24.getDelay();
        long long34 = recovery24.forgetOrphanedLogEntriesDelay;
        long long35 = recovery24.getRetryInterval();
        long long36 = recovery24.getForgetOrphanedLogEntriesDelay();
        boolean boolean37 = properties0.containsValue((java.lang.Object) recovery24);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties39 = atomikosProperties38.asProperties();
        atomikosProperties38.service = "{-1.0=100}";
        long long42 = atomikosProperties38.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel43 = null;
        atomikosProperties38.setConsoleLogLevel(atomikosLoggingLevel43);
        int int45 = atomikosProperties38.maxActives;
        atomikosProperties38.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery48 = atomikosProperties38.getRecovery();
        atomikosProperties38.consoleFileName = "{-1.0=100}";
        atomikosProperties38.setSerialJtaTransactions(false);
        atomikosProperties38.consoleFileName = "{={-1.0=100}, -1.0=100}";
        atomikosProperties38.defaultJtaTimeout = 50;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel57 = atomikosProperties38.getConsoleLogLevel();
        atomikosProperties38.enableLogging = true;
        java.lang.Object obj60 = properties0.remove((java.lang.Object) true);
        java.io.OutputStream outputStream61 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.storeToXML(outputStream61, "{1.0=-1}", "{100=100}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + 100.0d + "'", obj14, 100.0d);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "{}" + "'", str17, "{}");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 10000L + "'", long33 == 10000L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 5L + "'", long34 == 5L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 100L + "'", long35 == 100L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 5L + "'", long36 == 5L);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(properties39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 10000L + "'", long42 == 10000L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 50 + "'", int45 == 50);
        org.junit.Assert.assertNotNull(recovery48);
        org.junit.Assert.assertNull(atomikosLoggingLevel57);
        org.junit.Assert.assertNull(obj60);
    }

    @Test
    public void test08071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08071");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        long long7 = atomikosProperties0.maxTimeout;
        atomikosProperties0.setLogBaseDir("{-1.0=100}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.setAllowSubTransactions(true);
        atomikosProperties10.maxActives = (short) -1;
        atomikosProperties10.setService("tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties17.setAllowSubTransactions(true);
        boolean boolean20 = atomikosProperties17.enableLogging;
        boolean boolean21 = atomikosProperties17.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel22 = atomikosProperties17.consoleLogLevel;
        atomikosProperties10.setConsoleLogLevel(atomikosLoggingLevel22);
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel22;
        atomikosProperties0.setConsoleFileCount((int) (byte) 0);
        java.util.Properties properties27 = atomikosProperties0.asProperties();
        atomikosProperties0.setLogBaseDir("{{}={}}");
        atomikosProperties0.setTransactionManagerUniqueName("hi!");
        int int32 = atomikosProperties0.consoleFileCount;
        int int33 = atomikosProperties0.maxActives;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel22 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel22.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(properties27);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 50 + "'", int33 == 50);
    }

    @Test
    public void test08072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08072");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        int int7 = atomikosProperties0.maxActives;
        atomikosProperties0.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.getRecovery();
        atomikosProperties0.forceShutdownOnVmExit = false;
        long long13 = atomikosProperties0.checkpointInterval;
        int int14 = atomikosProperties0.getMaxActives();
        java.lang.String str15 = atomikosProperties0.consoleFileName;
        boolean boolean16 = atomikosProperties0.isAllowSubTransactions();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 500L + "'", long13 == 500L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 50 + "'", int14 == 50);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "tm.out" + "'", str15, "tm.out");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test08073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08073");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        atomikosProperties0.setConsoleFileCount((int) (byte) 100);
        atomikosProperties0.setAllowSubTransactions(true);
        atomikosProperties0.setService("tm.out");
        int int12 = atomikosProperties0.consoleFileLimit;
        atomikosProperties0.setDefaultJtaTimeout((long) 'a');
        boolean boolean15 = atomikosProperties0.enableLogging;
        java.lang.String str16 = atomikosProperties0.consoleFileName;
        java.lang.String str17 = atomikosProperties0.transactionManagerUniqueName;
        boolean boolean18 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.serialJtaTransactions = true;
        java.lang.String str21 = atomikosProperties0.consoleFileName;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel22 = atomikosProperties0.consoleLogLevel;
        atomikosProperties0.setDefaultJtaTimeout((long) 0);
        java.lang.String str25 = atomikosProperties0.getOutputDir();
        boolean boolean26 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.setLogBaseDir("{1.0=-1}");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tm.out" + "'", str16, "tm.out");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "tm.out" + "'", str21, "tm.out");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel22 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel22.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test08074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08074");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Enumeration<java.lang.Object> objEnumeration1 = properties0.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        atomikosProperties2.service = "{-1.0=100}";
        long long6 = atomikosProperties2.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel7 = null;
        atomikosProperties2.setConsoleLogLevel(atomikosLoggingLevel7);
        int int9 = atomikosProperties2.maxActives;
        atomikosProperties2.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery12 = atomikosProperties2.getRecovery();
        atomikosProperties2.consoleFileName = "{-1.0=100}";
        atomikosProperties2.setSerialJtaTransactions(false);
        atomikosProperties2.consoleFileName = "{={-1.0=100}, -1.0=100}";
        atomikosProperties2.defaultJtaTimeout = 50;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel21 = atomikosProperties2.getConsoleLogLevel();
        atomikosProperties2.enableLogging = true;
        atomikosProperties2.checkpointInterval = (-1L);
        atomikosProperties2.setMaxActives((int) (byte) -1);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties29 = atomikosProperties28.asProperties();
        atomikosProperties28.service = "{-1.0=100}";
        long long32 = atomikosProperties28.getDefaultJtaTimeout();
        atomikosProperties28.consoleFileLimit = '#';
        atomikosProperties28.setLogBaseName("{={-1.0=100}, -1.0=100}");
        long long37 = atomikosProperties28.defaultJtaTimeout;
        boolean boolean38 = properties0.remove((java.lang.Object) (byte) -1, (java.lang.Object) atomikosProperties28);
        java.util.Enumeration<java.lang.Object> objEnumeration39 = properties0.keys();
        java.util.Enumeration<?> wildcardEnumeration40 = properties0.propertyNames();
        org.junit.Assert.assertNotNull(objEnumeration1);
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertNotNull(recovery12);
        org.junit.Assert.assertNull(atomikosLoggingLevel21);
        org.junit.Assert.assertNotNull(properties29);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 10000L + "'", long32 == 10000L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 10000L + "'", long37 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objEnumeration39);
        org.junit.Assert.assertNotNull(wildcardEnumeration40);
    }

    @Test
    public void test08075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08075");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setAllowSubTransactions(true);
        boolean boolean3 = atomikosProperties0.enableLogging;
        atomikosProperties0.consoleFileLimit = (byte) 100;
        java.util.Properties properties6 = new java.util.Properties();
        java.lang.String str7 = properties6.toString();
        java.util.Properties properties8 = new java.util.Properties(properties6);
        java.util.Properties properties10 = new java.util.Properties();
        java.lang.String str11 = properties10.toString();
        java.lang.Object obj13 = properties10.remove((java.lang.Object) (short) 100);
        java.lang.Object obj16 = properties10.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean18 = properties10.containsKey((java.lang.Object) 0L);
        java.lang.Object obj21 = properties10.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties22 = new java.util.Properties(properties10);
        java.util.Enumeration<java.lang.Object> objEnumeration23 = properties22.elements();
        atomikosProperties0.set(properties8, "{={-1.0=100}, -1.0=100}", (java.lang.Object) properties22);
        int int25 = properties8.size();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet26 = properties8.entrySet();
        java.lang.String str27 = properties8.toString();
        java.util.Enumeration<?> wildcardEnumeration28 = properties8.propertyNames();
        java.lang.Object obj29 = properties8.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties31 = atomikosProperties30.asProperties();
        atomikosProperties30.service = "{-1.0=100}";
        long long34 = atomikosProperties30.getDefaultJtaTimeout();
        long long35 = atomikosProperties30.getMaxTimeout();
        atomikosProperties30.threadedTwoPhaseCommit = true;
        atomikosProperties30.setConsoleFileName("{}");
        boolean boolean40 = properties8.containsKey((java.lang.Object) "{}");
        java.io.OutputStream outputStream41 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties8.save(outputStream41, "{-1.0=100}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "{}" + "'", str7, "{}");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "{}" + "'", str11, "{}");
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNotNull(objEnumeration23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(objEntrySet26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}" + "'", str27, "{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}");
        org.junit.Assert.assertNotNull(wildcardEnumeration28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}");
        org.junit.Assert.assertNotNull(properties31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 10000L + "'", long34 == 10000L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 300000L + "'", long35 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test08076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08076");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery4 = atomikosProperties0.recovery;
        atomikosProperties0.enableLogging = true;
        int int7 = atomikosProperties0.getConsoleFileCount();
        atomikosProperties0.outputDir = "hi!";
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        atomikosProperties0.setSerialJtaTransactions(true);
        atomikosProperties0.forceShutdownOnVmExit = false;
        boolean boolean16 = atomikosProperties0.allowSubTransactions;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNotNull(recovery4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test08077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08077");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj14 = properties0.setProperty("", "{-1.0=100}");
        boolean boolean15 = properties0.isEmpty();
        java.util.Properties properties16 = new java.util.Properties();
        java.lang.String str17 = properties16.toString();
        java.util.Properties properties18 = new java.util.Properties(properties16);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet19 = properties18.entrySet();
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.Object obj23 = properties21.remove((java.lang.Object) (-1.0d));
        int int24 = properties21.size();
        boolean boolean25 = properties0.replace((java.lang.Object) properties18, (java.lang.Object) 100L, (java.lang.Object) properties21);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties27 = atomikosProperties26.asProperties();
        atomikosProperties26.service = "{-1.0=100}";
        long long30 = atomikosProperties26.getDefaultJtaTimeout();
        atomikosProperties26.setThreadedTwoPhaseCommit(true);
        boolean boolean33 = atomikosProperties26.isAllowSubTransactions();
        boolean boolean34 = atomikosProperties26.isEnableLogging();
        atomikosProperties26.allowSubTransactions = false;
        atomikosProperties26.threadedTwoPhaseCommit = true;
        atomikosProperties26.setLogBaseName("tm.out");
        java.lang.String str41 = atomikosProperties26.getLogBaseDir();
        java.lang.String str42 = atomikosProperties26.outputDir;
        java.lang.Object obj43 = properties18.get((java.lang.Object) atomikosProperties26);
        atomikosProperties26.transactionManagerUniqueName = "tm.out";
        long long46 = atomikosProperties26.getMaxTimeout();
        atomikosProperties26.setEnableLogging(false);
        java.lang.String str49 = atomikosProperties26.getService();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "{}" + "'", str17, "{}");
        org.junit.Assert.assertNotNull(objEntrySet19);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(properties27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 10000L + "'", long30 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 300000L + "'", long46 == 300000L);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "{-1.0=100}" + "'", str49, "{-1.0=100}");
    }

    @Test
    public void test08078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08078");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        boolean boolean7 = atomikosProperties0.isAllowSubTransactions();
        int int8 = atomikosProperties0.getConsoleFileLimit();
        boolean boolean9 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.setAllowSubTransactions(true);
        atomikosProperties0.outputDir = "{1.0=-1, -1.0=100}";
        int int14 = atomikosProperties0.getMaxActives();
        atomikosProperties0.maxTimeout = 18L;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 50 + "'", int14 == 50);
    }

    @Test
    public void test08079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08079");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj3 = properties0.setProperty("{}", "{}");
        java.util.Enumeration<java.lang.Object> objEnumeration4 = properties0.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties0.elements();
        properties0.clear();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNotNull(objEnumeration4);
        org.junit.Assert.assertNotNull(objEnumeration5);
    }

    @Test
    public void test08080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08080");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setMaxActives(0);
        boolean boolean7 = atomikosProperties0.threadedTwoPhaseCommit;
        boolean boolean8 = atomikosProperties0.allowSubTransactions;
        int int9 = atomikosProperties0.consoleFileLimit;
        boolean boolean10 = atomikosProperties0.serialJtaTransactions;
        atomikosProperties0.setConsoleFileCount(2);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test08081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08081");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.util.Properties properties3 = new java.util.Properties();
        java.lang.String str4 = properties3.toString();
        java.lang.Object obj6 = properties3.remove((java.lang.Object) (short) 100);
        java.lang.Object obj9 = properties3.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean11 = properties3.containsKey((java.lang.Object) 0L);
        java.lang.Object obj14 = properties3.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj17 = properties3.setProperty("", "{-1.0=100}");
        java.util.Enumeration<java.lang.Object> objEnumeration18 = properties3.keys();
        java.util.Properties properties19 = new java.util.Properties();
        java.lang.String str20 = properties19.toString();
        boolean boolean21 = properties19.isEmpty();
        java.lang.Object obj24 = properties19.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration25 = properties19.elements();
        java.lang.Object obj26 = properties2.replace((java.lang.Object) objEnumeration18, (java.lang.Object) properties19);
        java.io.InputStream inputStream27 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties2.loadFromXML(inputStream27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{}" + "'", str4, "{}");
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(objEnumeration18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{}" + "'", str20, "{}");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(objEnumeration25);
        org.junit.Assert.assertNull(obj26);
    }

    @Test
    public void test08082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08082");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        atomikosProperties2.service = "{-1.0=100}";
        long long6 = atomikosProperties2.getDefaultJtaTimeout();
        atomikosProperties2.consoleFileLimit = '#';
        java.lang.Object obj9 = properties1.get((java.lang.Object) atomikosProperties2);
        boolean boolean10 = atomikosProperties2.forceShutdownOnVmExit;
        atomikosProperties2.setOutputDir("");
        long long13 = atomikosProperties2.defaultJtaTimeout;
        int int14 = atomikosProperties2.maxActives;
        java.lang.String str15 = atomikosProperties2.outputDir;
        long long16 = atomikosProperties2.getCheckpointInterval();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10000L + "'", long13 == 10000L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 50 + "'", int14 == 50);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 500L + "'", long16 == 500L);
    }

    @Test
    public void test08083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08083");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setAllowSubTransactions(true);
        boolean boolean3 = atomikosProperties0.enableLogging;
        atomikosProperties0.consoleFileLimit = (byte) 100;
        java.util.Properties properties6 = new java.util.Properties();
        java.lang.String str7 = properties6.toString();
        java.util.Properties properties8 = new java.util.Properties(properties6);
        java.util.Properties properties10 = new java.util.Properties();
        java.lang.String str11 = properties10.toString();
        java.lang.Object obj13 = properties10.remove((java.lang.Object) (short) 100);
        java.lang.Object obj16 = properties10.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean18 = properties10.containsKey((java.lang.Object) 0L);
        java.lang.Object obj21 = properties10.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties22 = new java.util.Properties(properties10);
        java.util.Enumeration<java.lang.Object> objEnumeration23 = properties22.elements();
        atomikosProperties0.set(properties8, "{={-1.0=100}, -1.0=100}", (java.lang.Object) properties22);
        int int25 = properties8.size();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet26 = properties8.entrySet();
        java.lang.String str27 = properties8.toString();
        int int28 = properties8.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties30 = atomikosProperties29.asProperties();
        atomikosProperties29.service = "{-1.0=100}";
        long long33 = atomikosProperties29.getDefaultJtaTimeout();
        atomikosProperties29.setThreadedTwoPhaseCommit(true);
        boolean boolean36 = atomikosProperties29.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery37 = atomikosProperties29.recovery;
        long long38 = recovery37.getForgetOrphanedLogEntriesDelay();
        long long39 = recovery37.forgetOrphanedLogEntriesDelay;
        int int40 = recovery37.getMaxRetries();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties42 = atomikosProperties41.asProperties();
        atomikosProperties41.service = "{-1.0=100}";
        long long45 = atomikosProperties41.getDefaultJtaTimeout();
        atomikosProperties41.serialJtaTransactions = true;
        atomikosProperties41.setDefaultJtaTimeout(500L);
        java.util.Properties properties50 = atomikosProperties41.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties51 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties52 = atomikosProperties51.asProperties();
        atomikosProperties51.service = "{-1.0=100}";
        long long55 = atomikosProperties51.getDefaultJtaTimeout();
        atomikosProperties51.serialJtaTransactions = true;
        long long58 = atomikosProperties51.maxTimeout;
        atomikosProperties51.setLogBaseDir("{-1.0=100}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties61 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties61.setAllowSubTransactions(true);
        atomikosProperties61.maxActives = (short) -1;
        atomikosProperties61.setService("tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties68 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties68.setAllowSubTransactions(true);
        boolean boolean71 = atomikosProperties68.enableLogging;
        boolean boolean72 = atomikosProperties68.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel73 = atomikosProperties68.consoleLogLevel;
        atomikosProperties61.setConsoleLogLevel(atomikosLoggingLevel73);
        atomikosProperties51.consoleLogLevel = atomikosLoggingLevel73;
        atomikosProperties51.setConsoleFileCount((int) (byte) 0);
        atomikosProperties51.setForceShutdownOnVmExit(true);
        boolean boolean80 = properties8.replace((java.lang.Object) recovery37, (java.lang.Object) atomikosProperties41, (java.lang.Object) true);
        boolean boolean81 = properties8.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "{}" + "'", str7, "{}");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "{}" + "'", str11, "{}");
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNotNull(objEnumeration23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(objEntrySet26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}" + "'", str27, "{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(properties30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 10000L + "'", long33 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(recovery37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 86400000L + "'", long38 == 86400000L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 86400000L + "'", long39 == 86400000L);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 5 + "'", int40 == 5);
        org.junit.Assert.assertNotNull(properties42);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 10000L + "'", long45 == 10000L);
        org.junit.Assert.assertNotNull(properties50);
        org.junit.Assert.assertNotNull(properties52);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 10000L + "'", long55 == 10000L);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 300000L + "'", long58 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel73 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel73.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test08084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08084");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel7 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel7);
        boolean boolean9 = atomikosProperties0.enableLogging;
        int int10 = atomikosProperties0.getConsoleFileLimit();
        atomikosProperties0.serialJtaTransactions = false;
        atomikosProperties0.setLogBaseName("");
        atomikosProperties0.checkpointInterval = (byte) -1;
        long long17 = atomikosProperties0.defaultJtaTimeout;
        atomikosProperties0.setService("{1.0=-1}");
        atomikosProperties0.maxActives = (short) 0;
        int int22 = atomikosProperties0.getMaxActives();
        java.lang.String str23 = atomikosProperties0.getLogBaseName();
        atomikosProperties0.enableLogging = false;
        atomikosProperties0.setAllowSubTransactions(true);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10000L + "'", long17 == 10000L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
    }

    @Test
    public void test08085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08085");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        boolean boolean5 = atomikosProperties0.enableLogging;
        boolean boolean6 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.consoleFileLimit = (byte) -1;
        boolean boolean9 = atomikosProperties0.serialJtaTransactions;
        atomikosProperties0.setThreadedTwoPhaseCommit(false);
        java.lang.String str12 = atomikosProperties0.logBaseDir;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel13 = atomikosProperties0.getConsoleLogLevel();
        long long14 = atomikosProperties0.getMaxTimeout();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel13 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel13.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 300000L + "'", long14 == 300000L);
    }

    @Test
    public void test08086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08086");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        long long5 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.threadedTwoPhaseCommit = true;
        atomikosProperties0.setConsoleFileName("{}");
        java.util.Properties properties10 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties12 = atomikosProperties11.asProperties();
        atomikosProperties11.service = "{-1.0=100}";
        long long15 = atomikosProperties11.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel16 = null;
        atomikosProperties11.setConsoleLogLevel(atomikosLoggingLevel16);
        int int18 = atomikosProperties11.maxActives;
        atomikosProperties11.setConsoleFileName("tmlog");
        java.lang.String str21 = atomikosProperties11.logBaseName;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery22 = atomikosProperties11.getRecovery();
        atomikosProperties11.setConsoleFileCount((int) (byte) 100);
        boolean boolean25 = properties10.contains((java.lang.Object) atomikosProperties11);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertNotNull(properties12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10000L + "'", long15 == 10000L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 50 + "'", int18 == 50);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "tmlog" + "'", str21, "tmlog");
        org.junit.Assert.assertNotNull(recovery22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test08087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08087");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        boolean boolean7 = atomikosProperties0.isAllowSubTransactions();
        boolean boolean8 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.allowSubTransactions = false;
        atomikosProperties0.threadedTwoPhaseCommit = true;
        atomikosProperties0.forceShutdownOnVmExit = false;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test08088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08088");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.lang.Object obj5 = properties0.setProperty("", "{={-1.0=100}, -1.0=100}");
        java.util.Properties properties6 = new java.util.Properties();
        java.lang.String str7 = properties6.toString();
        java.lang.Object obj9 = properties6.remove((java.lang.Object) (short) 100);
        java.lang.Object obj12 = properties6.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean14 = properties6.containsKey((java.lang.Object) 0L);
        java.lang.Object obj17 = properties6.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj20 = properties6.setProperty("", "{-1.0=100}");
        java.util.Enumeration<java.lang.Object> objEnumeration21 = properties6.keys();
        boolean boolean22 = properties0.equals((java.lang.Object) properties6);
        java.io.Writer writer23 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.store(writer23, "{com.atomikos.icatch.console_file_name=hi!, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.output_dir=tm.out, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={-1.0=100}, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "{}" + "'", str7, "{}");
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNotNull(objEnumeration21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test08089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08089");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileLimit = (byte) 10;
        long long7 = atomikosProperties0.maxTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel8 = atomikosProperties0.consoleLogLevel;
        long long9 = atomikosProperties0.checkpointInterval;
        long long10 = atomikosProperties0.maxTimeout;
        java.lang.String str11 = atomikosProperties0.outputDir;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel8 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel8.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 500L + "'", long9 == 500L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 300000L + "'", long10 == 300000L);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test08090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08090");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileLimit = (byte) 10;
        boolean boolean7 = atomikosProperties0.isAllowSubTransactions();
        java.lang.String str8 = atomikosProperties0.logBaseName;
        atomikosProperties0.setService("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        atomikosProperties0.threadedTwoPhaseCommit = false;
        int int13 = atomikosProperties0.getMaxActives();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "tmlog" + "'", str8, "tmlog");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 50 + "'", int13 == 50);
    }

    @Test
    public void test08091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08091");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Enumeration<?> wildcardEnumeration1 = properties0.propertyNames();
        java.lang.Object obj2 = properties0.clone();
        java.util.Set<java.lang.Object> objSet3 = properties0.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties4.setAllowSubTransactions(true);
        boolean boolean7 = atomikosProperties4.isSerialJtaTransactions();
        atomikosProperties4.setConsoleFileCount(5);
        int int10 = atomikosProperties4.consoleFileCount;
        boolean boolean11 = atomikosProperties4.enableLogging;
        long long12 = atomikosProperties4.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties14 = atomikosProperties13.asProperties();
        atomikosProperties13.service = "{-1.0=100}";
        long long17 = atomikosProperties13.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel18 = null;
        atomikosProperties13.setConsoleLogLevel(atomikosLoggingLevel18);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel20 = null;
        atomikosProperties13.setConsoleLogLevel(atomikosLoggingLevel20);
        boolean boolean22 = atomikosProperties13.enableLogging;
        int int23 = atomikosProperties13.getConsoleFileLimit();
        atomikosProperties13.serialJtaTransactions = false;
        atomikosProperties13.setLogBaseName("");
        atomikosProperties13.transactionManagerUniqueName = "tmlog";
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery30 = atomikosProperties13.recovery;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery31 = atomikosProperties13.getRecovery();
        java.lang.Object obj32 = properties0.putIfAbsent((java.lang.Object) long12, (java.lang.Object) recovery31);
        org.junit.Assert.assertNotNull(wildcardEnumeration1);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "{}");
        org.junit.Assert.assertNotNull(objSet3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5 + "'", int10 == 5);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10000L + "'", long12 == 10000L);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10000L + "'", long17 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(recovery30);
        org.junit.Assert.assertNotNull(recovery31);
        org.junit.Assert.assertNull(obj32);
    }

    @Test
    public void test08092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08092");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        java.lang.String str7 = atomikosProperties0.getLogBaseName();
        atomikosProperties0.setLogBaseName("");
        atomikosProperties0.enableLogging = false;
        atomikosProperties0.setConsoleFileCount((-1));
        java.lang.String str14 = atomikosProperties0.transactionManagerUniqueName;
        boolean boolean15 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.setTransactionManagerUniqueName("tm.out");
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "tmlog" + "'", str7, "tmlog");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test08093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08093");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        boolean boolean7 = atomikosProperties0.isAllowSubTransactions();
        int int8 = atomikosProperties0.getConsoleFileLimit();
        atomikosProperties0.setForceShutdownOnVmExit(false);
        long long11 = atomikosProperties0.defaultJtaTimeout;
        java.util.Properties properties12 = new java.util.Properties();
        java.lang.String str13 = properties12.toString();
        java.lang.Object obj15 = properties12.remove((java.lang.Object) (short) 100);
        java.lang.Object obj18 = properties12.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj19 = properties12.clone();
        java.util.Set<java.lang.String> strSet20 = properties12.stringPropertyNames();
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.String str22 = properties21.toString();
        java.lang.Object obj24 = properties21.remove((java.lang.Object) (short) 100);
        java.lang.Object obj27 = properties21.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean29 = properties21.containsKey((java.lang.Object) 0L);
        java.lang.Object obj32 = properties21.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties33 = new java.util.Properties();
        java.lang.String str34 = properties33.toString();
        java.lang.Object obj36 = properties33.remove((java.lang.Object) (short) 100);
        java.lang.Object obj39 = properties33.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj40 = properties33.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration41 = properties33.elements();
        properties21.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties33);
        java.util.Properties properties43 = new java.util.Properties();
        java.lang.String str44 = properties43.toString();
        java.lang.Object obj46 = properties43.remove((java.lang.Object) (short) 100);
        java.lang.Object obj49 = properties43.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean51 = properties43.containsKey((java.lang.Object) 0L);
        java.lang.Object obj54 = properties43.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties55 = new java.util.Properties();
        java.lang.String str56 = properties55.toString();
        java.lang.Object obj58 = properties55.remove((java.lang.Object) (short) 100);
        java.lang.Object obj61 = properties55.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj62 = properties55.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration63 = properties55.elements();
        properties43.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties55);
        java.lang.Object obj65 = properties12.putIfAbsent((java.lang.Object) properties21, (java.lang.Object) properties55);
        java.util.Enumeration<java.lang.Object> objEnumeration66 = properties12.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties68 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean69 = atomikosProperties68.isSerialJtaTransactions();
        atomikosProperties68.logBaseName = "{-1.0=100}";
        int int72 = atomikosProperties68.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery73 = atomikosProperties68.getRecovery();
        java.lang.String str74 = atomikosProperties68.getLogBaseName();
        atomikosProperties68.setCheckpointInterval((long) 32);
        atomikosProperties0.set(properties12, "{-1.0=100}", (java.lang.Object) atomikosProperties68);
        java.lang.String str78 = atomikosProperties0.getService();
        atomikosProperties0.setMaxTimeout((long) (byte) -1);
        boolean boolean81 = atomikosProperties0.threadedTwoPhaseCommit;
        long long82 = atomikosProperties0.checkpointInterval;
        int int83 = atomikosProperties0.getConsoleFileCount();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10000L + "'", long11 == 10000L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{}" + "'", str13, "{}");
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "{1.0=-1}");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{}" + "'", str22, "{}");
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "{}" + "'", str34, "{}");
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertEquals(obj40.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration41);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "{}" + "'", str44, "{}");
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "{}" + "'", str56, "{}");
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertNull(obj61);
        org.junit.Assert.assertNotNull(obj62);
        org.junit.Assert.assertEquals(obj62.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj62), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj62), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration63);
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertNotNull(objEnumeration66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 50 + "'", int72 == 50);
        org.junit.Assert.assertNotNull(recovery73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "{-1.0=100}" + "'", str74, "{-1.0=100}");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "{-1.0=100}" + "'", str78, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 500L + "'", long82 == 500L);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
    }

    @Test
    public void test08094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08094");
        java.util.Properties properties0 = new java.util.Properties();
        properties0.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        atomikosProperties2.service = "{-1.0=100}";
        long long6 = atomikosProperties2.getDefaultJtaTimeout();
        atomikosProperties2.outputDir = "{={-1.0=100}, -1.0=100}";
        long long9 = atomikosProperties2.getCheckpointInterval();
        boolean boolean10 = atomikosProperties2.isForceShutdownOnVmExit();
        java.util.Properties properties11 = atomikosProperties2.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties13 = atomikosProperties12.asProperties();
        atomikosProperties12.service = "{-1.0=100}";
        long long16 = atomikosProperties12.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel17 = null;
        atomikosProperties12.setConsoleLogLevel(atomikosLoggingLevel17);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel19 = null;
        atomikosProperties12.setConsoleLogLevel(atomikosLoggingLevel19);
        boolean boolean21 = atomikosProperties12.enableLogging;
        int int22 = atomikosProperties12.getConsoleFileLimit();
        atomikosProperties12.serialJtaTransactions = false;
        atomikosProperties12.setLogBaseName("");
        atomikosProperties12.checkpointInterval = (byte) -1;
        long long29 = atomikosProperties12.defaultJtaTimeout;
        atomikosProperties12.setService("{1.0=-1}");
        atomikosProperties12.maxActives = (short) 0;
        int int34 = atomikosProperties12.getMaxActives();
        boolean boolean35 = properties0.remove((java.lang.Object) properties11, (java.lang.Object) atomikosProperties12);
        java.util.Properties properties36 = new java.util.Properties();
        java.lang.String str37 = properties36.toString();
        java.lang.Object obj39 = properties36.remove((java.lang.Object) (short) 100);
        java.lang.Object obj42 = properties36.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean44 = properties36.containsKey((java.lang.Object) 0L);
        java.lang.Object obj47 = properties36.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties48 = new java.util.Properties();
        java.lang.String str49 = properties48.toString();
        java.lang.Object obj51 = properties48.remove((java.lang.Object) (short) 100);
        java.lang.Object obj54 = properties48.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj55 = properties48.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration56 = properties48.elements();
        properties36.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties48);
        boolean boolean59 = properties36.equals((java.lang.Object) 1.0f);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties60 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean61 = atomikosProperties60.isThreadedTwoPhaseCommit();
        long long62 = atomikosProperties60.getCheckpointInterval();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties63 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean64 = atomikosProperties63.isSerialJtaTransactions();
        atomikosProperties63.logBaseName = "{-1.0=100}";
        int int67 = atomikosProperties63.maxActives;
        int int68 = atomikosProperties63.getConsoleFileCount();
        boolean boolean69 = properties36.remove((java.lang.Object) atomikosProperties60, (java.lang.Object) atomikosProperties63);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties70 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties70.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties70.setService("tm.out");
        int int75 = atomikosProperties70.consoleFileLimit;
        atomikosProperties70.serialJtaTransactions = true;
        boolean boolean78 = properties36.equals((java.lang.Object) atomikosProperties70);
        boolean boolean79 = properties11.containsValue((java.lang.Object) atomikosProperties70);
        java.io.Writer writer80 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties11.store(writer80, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir={={-1.0=100}, -1.0=100}, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.output_dir={1.0=-1, -1.0=100}, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={-1.0=100}, com.atomikos.icatch.force_shutdown_on_vm_exit=true, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 500L + "'", long9 == 500L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNotNull(properties13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10000L + "'", long16 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 10000L + "'", long29 == 10000L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "{}" + "'", str37, "{}");
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "{}" + "'", str49, "{}");
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertEquals(obj55.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj55), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj55), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 500L + "'", long62 == 500L);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 50 + "'", int67 == 50);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test08095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08095");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        atomikosProperties2.service = "{-1.0=100}";
        long long6 = atomikosProperties2.getDefaultJtaTimeout();
        atomikosProperties2.consoleFileLimit = '#';
        java.lang.Object obj9 = properties1.get((java.lang.Object) atomikosProperties2);
        boolean boolean10 = atomikosProperties2.forceShutdownOnVmExit;
        atomikosProperties2.setOutputDir("");
        boolean boolean13 = atomikosProperties2.forceShutdownOnVmExit;
        boolean boolean14 = atomikosProperties2.isThreadedTwoPhaseCommit();
        long long15 = atomikosProperties2.getMaxTimeout();
        java.lang.String str16 = atomikosProperties2.getService();
        java.lang.String str17 = atomikosProperties2.outputDir;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 300000L + "'", long15 == 300000L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{-1.0=100}" + "'", str16, "{-1.0=100}");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test08096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08096");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.enableLogging = false;
        atomikosProperties0.setMaxTimeout((long) (byte) 0);
        java.util.Properties properties9 = atomikosProperties0.asProperties();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertNotNull(properties9);
    }

    @Test
    public void test08097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08097");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        long long7 = atomikosProperties0.getDefaultJtaTimeout();
        long long8 = atomikosProperties0.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery9 = atomikosProperties0.getRecovery();
        long long10 = atomikosProperties0.getCheckpointInterval();
        atomikosProperties0.setOutputDir("{1.0=-1, -1.0=100}");
        boolean boolean13 = atomikosProperties0.enableLogging;
        int int14 = atomikosProperties0.consoleFileLimit;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(recovery9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 500L + "'", long10 == 500L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
    }

    @Test
    public void test08098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08098");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties12 = new java.util.Properties();
        java.lang.String str13 = properties12.toString();
        java.lang.Object obj15 = properties12.remove((java.lang.Object) (short) 100);
        java.lang.Object obj18 = properties12.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj19 = properties12.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration20 = properties12.elements();
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties12);
        boolean boolean23 = properties0.equals((java.lang.Object) 1.0f);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties25 = atomikosProperties24.asProperties();
        atomikosProperties24.service = "{-1.0=100}";
        long long28 = atomikosProperties24.getDefaultJtaTimeout();
        long long29 = atomikosProperties24.getMaxTimeout();
        int int30 = atomikosProperties24.consoleFileCount;
        int int31 = atomikosProperties24.getMaxActives();
        boolean boolean32 = atomikosProperties24.forceShutdownOnVmExit;
        java.lang.String str33 = atomikosProperties24.getTransactionManagerUniqueName();
        boolean boolean34 = properties0.containsValue((java.lang.Object) atomikosProperties24);
        java.util.Collection<java.lang.Object> objCollection35 = properties0.values();
        java.lang.String str36 = properties0.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties38 = atomikosProperties37.asProperties();
        atomikosProperties37.service = "{-1.0=100}";
        java.lang.String str41 = atomikosProperties37.getLogBaseName();
        long long42 = atomikosProperties37.defaultJtaTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel43 = null;
        atomikosProperties37.setConsoleLogLevel(atomikosLoggingLevel43);
        atomikosProperties37.threadedTwoPhaseCommit = false;
        atomikosProperties37.allowSubTransactions = false;
        java.lang.String str49 = atomikosProperties37.getConsoleFileName();
        java.util.Properties properties50 = atomikosProperties37.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties51 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties52 = atomikosProperties51.asProperties();
        atomikosProperties51.service = "{-1.0=100}";
        java.lang.String str55 = atomikosProperties51.getTransactionManagerUniqueName();
        atomikosProperties51.consoleFileLimit = (byte) 10;
        java.lang.String str58 = atomikosProperties51.getTransactionManagerUniqueName();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel59 = atomikosProperties51.consoleLogLevel;
        java.lang.Object obj60 = properties0.put((java.lang.Object) properties50, (java.lang.Object) atomikosProperties51);
        java.lang.String str61 = atomikosProperties51.logBaseDir;
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{}" + "'", str13, "{}");
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 10000L + "'", long28 == 10000L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 300000L + "'", long29 == 300000L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 50 + "'", int31 == 50);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(objCollection35);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "{1.0=-1, -1.0=100}" + "'", str36, "{1.0=-1, -1.0=100}");
        org.junit.Assert.assertNotNull(properties38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "tmlog" + "'", str41, "tmlog");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 10000L + "'", long42 == 10000L);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "tm.out" + "'", str49, "tm.out");
        org.junit.Assert.assertNotNull(properties50);
        org.junit.Assert.assertNotNull(properties52);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel59 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel59.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertNull(str61);
    }

    @Test
    public void test08099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08099");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setEnableLogging(true);
        atomikosProperties0.consoleFileCount = 0;
        int int5 = atomikosProperties0.getMaxActives();
        java.lang.String str6 = atomikosProperties0.getLogBaseDir();
        java.lang.String str7 = atomikosProperties0.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery8 = atomikosProperties0.getRecovery();
        long long9 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.allowSubTransactions = false;
        atomikosProperties0.consoleFileLimit = 18;
        atomikosProperties0.defaultJtaTimeout = 5;
        java.lang.Class<?> wildcardClass16 = atomikosProperties0.getClass();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 50 + "'", int5 == 50);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(recovery8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10000L + "'", long9 == 10000L);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test08100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08100");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        long long7 = atomikosProperties0.getDefaultJtaTimeout();
        long long8 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties9 = new java.util.Properties();
        java.lang.Object obj11 = properties9.remove((java.lang.Object) (-1.0d));
        boolean boolean12 = properties9.isEmpty();
        java.lang.Object obj15 = properties9.setProperty("hi!", "{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties18 = atomikosProperties17.asProperties();
        atomikosProperties17.service = "{-1.0=100}";
        long long21 = atomikosProperties17.getDefaultJtaTimeout();
        atomikosProperties17.serialJtaTransactions = true;
        atomikosProperties17.maxActives = ' ';
        atomikosProperties0.set(properties9, "", (java.lang.Object) ' ');
        boolean boolean27 = atomikosProperties0.isEnableLogging();
        java.lang.String str28 = atomikosProperties0.transactionManagerUniqueName;
        boolean boolean29 = atomikosProperties0.threadedTwoPhaseCommit;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10000L + "'", long21 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test08101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08101");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj14 = properties0.setProperty("", "{-1.0=100}");
        boolean boolean15 = properties0.isEmpty();
        java.util.Properties properties16 = new java.util.Properties();
        java.lang.String str17 = properties16.toString();
        java.util.Properties properties18 = new java.util.Properties(properties16);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet19 = properties18.entrySet();
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.Object obj23 = properties21.remove((java.lang.Object) (-1.0d));
        int int24 = properties21.size();
        boolean boolean25 = properties0.replace((java.lang.Object) properties18, (java.lang.Object) 100L, (java.lang.Object) properties21);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties26.setAllowSubTransactions(true);
        boolean boolean29 = atomikosProperties26.enableLogging;
        atomikosProperties26.consoleFileLimit = (byte) 100;
        java.util.Properties properties32 = new java.util.Properties();
        java.lang.String str33 = properties32.toString();
        java.util.Properties properties34 = new java.util.Properties(properties32);
        java.util.Properties properties36 = new java.util.Properties();
        java.lang.String str37 = properties36.toString();
        java.lang.Object obj39 = properties36.remove((java.lang.Object) (short) 100);
        java.lang.Object obj42 = properties36.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean44 = properties36.containsKey((java.lang.Object) 0L);
        java.lang.Object obj47 = properties36.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties48 = new java.util.Properties(properties36);
        java.util.Enumeration<java.lang.Object> objEnumeration49 = properties48.elements();
        atomikosProperties26.set(properties34, "{={-1.0=100}, -1.0=100}", (java.lang.Object) properties48);
        atomikosProperties26.setOutputDir("hi!");
        java.lang.String str53 = atomikosProperties26.getLogBaseName();
        boolean boolean54 = properties21.equals((java.lang.Object) atomikosProperties26);
        java.io.InputStream inputStream55 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties21.loadFromXML(inputStream55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "{}" + "'", str17, "{}");
        org.junit.Assert.assertNotNull(objEntrySet19);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "{}" + "'", str33, "{}");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "{}" + "'", str37, "{}");
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNotNull(objEnumeration49);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "tmlog" + "'", str53, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test08102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08102");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.remove((java.lang.Object) (-1.0d));
        boolean boolean3 = properties0.isEmpty();
        int int4 = properties0.size();
        java.lang.String str6 = properties0.getProperty("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties7.setAllowSubTransactions(true);
        boolean boolean10 = atomikosProperties7.enableLogging;
        boolean boolean11 = atomikosProperties7.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel12 = atomikosProperties7.consoleLogLevel;
        boolean boolean13 = properties0.contains((java.lang.Object) atomikosProperties7);
        java.util.Collection<java.lang.Object> objCollection14 = properties0.values();
        java.lang.Object obj17 = properties0.setProperty("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=true, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=35, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=10, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={-1.0=100}, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}", "{1.0=-1, ={1.0=-1}, -1.0=100}");
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel12 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel12.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objCollection14);
        org.junit.Assert.assertNull(obj17);
    }

    @Test
    public void test08103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08103");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileLimit = (byte) 10;
        boolean boolean7 = atomikosProperties0.isAllowSubTransactions();
        java.lang.String str8 = atomikosProperties0.logBaseName;
        atomikosProperties0.setService("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        atomikosProperties0.threadedTwoPhaseCommit = false;
        long long13 = atomikosProperties0.maxTimeout;
        boolean boolean14 = atomikosProperties0.isAllowSubTransactions();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "tmlog" + "'", str8, "tmlog");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 300000L + "'", long13 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test08104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08104");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.retryInterval = (short) 100;
        recovery0.forgetOrphanedLogEntriesDelay = 'a';
        long long5 = recovery0.getDelay();
        recovery0.retryInterval = 97;
        recovery0.setRetryInterval((long) 18);
        long long10 = recovery0.getRetryInterval();
        long long11 = recovery0.retryInterval;
        int int12 = recovery0.maxRetries;
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 10000L + "'", long5 == 10000L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 18L + "'", long10 == 18L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 18L + "'", long11 == 18L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 5 + "'", int12 == 5);
    }

    @Test
    public void test08105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08105");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj14 = properties0.setProperty("", "{-1.0=100}");
        java.lang.Object obj15 = properties0.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery16 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery16.retryInterval = (short) 100;
        recovery16.forgetOrphanedLogEntriesDelay = 'a';
        boolean boolean21 = properties0.equals((java.lang.Object) 'a');
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery22 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery22.retryInterval = (short) 100;
        recovery22.forgetOrphanedLogEntriesDelay = 'a';
        long long27 = recovery22.getDelay();
        int int28 = recovery22.maxRetries;
        int int29 = recovery22.maxRetries;
        long long30 = recovery22.getRetryInterval();
        java.util.Properties properties31 = new java.util.Properties();
        java.util.Enumeration<?> wildcardEnumeration32 = properties31.propertyNames();
        java.lang.Object obj33 = properties0.put((java.lang.Object) long30, (java.lang.Object) wildcardEnumeration32);
        java.util.Properties properties34 = new java.util.Properties(properties0);
        java.io.InputStream inputStream35 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.loadFromXML(inputStream35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(obj15);
// flaky:         org.junit.Assert.assertEquals(obj15.toString(), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10000L + "'", long27 == 10000L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5 + "'", int28 == 5);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5 + "'", int29 == 5);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 100L + "'", long30 == 100L);
        org.junit.Assert.assertNotNull(wildcardEnumeration32);
        org.junit.Assert.assertNull(obj33);
    }

    @Test
    public void test08106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08106");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj14 = properties0.setProperty("", "{-1.0=100}");
        boolean boolean15 = properties0.isEmpty();
        java.util.Properties properties16 = new java.util.Properties();
        java.lang.String str17 = properties16.toString();
        java.util.Properties properties18 = new java.util.Properties(properties16);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet19 = properties18.entrySet();
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.Object obj23 = properties21.remove((java.lang.Object) (-1.0d));
        int int24 = properties21.size();
        boolean boolean25 = properties0.replace((java.lang.Object) properties18, (java.lang.Object) 100L, (java.lang.Object) properties21);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties27 = atomikosProperties26.asProperties();
        atomikosProperties26.service = "{-1.0=100}";
        long long30 = atomikosProperties26.getDefaultJtaTimeout();
        boolean boolean31 = atomikosProperties26.enableLogging;
        boolean boolean32 = atomikosProperties26.isForceShutdownOnVmExit();
        boolean boolean33 = atomikosProperties26.allowSubTransactions;
        boolean boolean34 = atomikosProperties26.threadedTwoPhaseCommit;
        java.lang.Object obj35 = null;
        java.lang.Object obj36 = properties18.getOrDefault((java.lang.Object) boolean34, obj35);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "{}" + "'", str17, "{}");
        org.junit.Assert.assertNotNull(objEntrySet19);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(properties27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 10000L + "'", long30 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(obj36);
    }

    @Test
    public void test08107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08107");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        boolean boolean7 = atomikosProperties0.isAllowSubTransactions();
        boolean boolean8 = atomikosProperties0.isEnableLogging();
        java.lang.String str9 = atomikosProperties0.logBaseDir;
        java.lang.String str10 = atomikosProperties0.getLogBaseDir();
        java.lang.String str11 = atomikosProperties0.getLogBaseName();
        java.util.Properties properties12 = new java.util.Properties();
        java.lang.String str13 = properties12.toString();
        boolean boolean15 = properties12.containsValue((java.lang.Object) (-1L));
        java.lang.Object obj17 = properties12.get((java.lang.Object) 97L);
        properties12.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery19 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery19.retryInterval = (short) 100;
        recovery19.delay = (-1L);
        long long24 = recovery19.delay;
        recovery19.delay = (short) 1;
        long long27 = recovery19.getRetryInterval();
        int int28 = recovery19.maxRetries;
        long long29 = recovery19.getForgetOrphanedLogEntriesDelay();
        recovery19.setMaxRetries(0);
        recovery19.setMaxRetries(0);
        java.util.Properties properties34 = new java.util.Properties();
        java.util.Properties properties35 = new java.util.Properties(properties34);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet36 = properties35.entrySet();
        java.util.Properties properties37 = new java.util.Properties();
        java.lang.Object obj40 = properties37.setProperty("{}", "{}");
        java.util.Enumeration<java.lang.Object> objEnumeration41 = properties37.keys();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet42 = properties37.entrySet();
        properties35.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties37);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery44 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery44.retryInterval = (short) 100;
        recovery44.delay = (-1L);
        long long49 = recovery44.delay;
        recovery44.delay = (short) 1;
        long long52 = recovery44.getRetryInterval();
        java.util.Properties properties53 = new java.util.Properties();
        java.lang.String str54 = properties53.toString();
        properties53.clear();
        java.lang.Object obj56 = properties35.getOrDefault((java.lang.Object) recovery44, (java.lang.Object) properties53);
        java.lang.Object obj57 = properties12.getOrDefault((java.lang.Object) 0, (java.lang.Object) properties35);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties59 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties60 = atomikosProperties59.asProperties();
        atomikosProperties59.service = "{-1.0=100}";
        long long63 = atomikosProperties59.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel64 = null;
        atomikosProperties59.setConsoleLogLevel(atomikosLoggingLevel64);
        int int66 = atomikosProperties59.maxActives;
        atomikosProperties59.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery69 = atomikosProperties59.getRecovery();
        atomikosProperties59.consoleFileName = "{-1.0=100}";
        atomikosProperties59.setSerialJtaTransactions(false);
        atomikosProperties59.consoleFileName = "{={-1.0=100}, -1.0=100}";
        atomikosProperties59.defaultJtaTimeout = 50;
        long long78 = atomikosProperties59.getCheckpointInterval();
        long long79 = atomikosProperties59.defaultJtaTimeout;
        atomikosProperties0.set(properties12, "{}", (java.lang.Object) atomikosProperties59);
        boolean boolean81 = atomikosProperties0.enableLogging;
        atomikosProperties0.setForceShutdownOnVmExit(false);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "tmlog" + "'", str11, "tmlog");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{}" + "'", str13, "{}");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 100L + "'", long27 == 100L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5 + "'", int28 == 5);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 86400000L + "'", long29 == 86400000L);
        org.junit.Assert.assertNotNull(objEntrySet36);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNotNull(objEnumeration41);
        org.junit.Assert.assertNotNull(objEntrySet42);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-1L) + "'", long49 == (-1L));
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 100L + "'", long52 == 100L);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "{}" + "'", str54, "{}");
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertEquals(obj56.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj56), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj56), "{}");
        org.junit.Assert.assertNotNull(obj57);
        org.junit.Assert.assertEquals(obj57.toString(), "{{}={}}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj57), "{{}={}}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj57), "{{}={}}");
        org.junit.Assert.assertNotNull(properties60);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 10000L + "'", long63 == 10000L);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 50 + "'", int66 == 50);
        org.junit.Assert.assertNotNull(recovery69);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 500L + "'", long78 == 500L);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 50L + "'", long79 == 50L);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
    }

    @Test
    public void test08108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08108");
        java.util.Properties properties0 = new java.util.Properties();
        properties0.clear();
        java.lang.String str2 = properties0.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties3 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties4 = atomikosProperties3.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties6 = atomikosProperties5.asProperties();
        atomikosProperties5.service = "{-1.0=100}";
        long long9 = atomikosProperties5.getDefaultJtaTimeout();
        atomikosProperties5.consoleFileLimit = '#';
        java.lang.Object obj12 = properties4.get((java.lang.Object) atomikosProperties5);
        boolean boolean13 = atomikosProperties5.forceShutdownOnVmExit;
        atomikosProperties5.setOutputDir("");
        boolean boolean16 = atomikosProperties5.forceShutdownOnVmExit;
        atomikosProperties5.setEnableLogging(false);
        long long19 = atomikosProperties5.getCheckpointInterval();
        int int20 = atomikosProperties5.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties22 = atomikosProperties21.asProperties();
        atomikosProperties21.service = "{-1.0=100}";
        long long25 = atomikosProperties21.getDefaultJtaTimeout();
        atomikosProperties21.serialJtaTransactions = true;
        long long28 = atomikosProperties21.maxTimeout;
        atomikosProperties21.setLogBaseDir("{-1.0=100}");
        atomikosProperties21.setEnableLogging(true);
        boolean boolean33 = atomikosProperties21.forceShutdownOnVmExit;
        java.lang.String str34 = atomikosProperties21.service;
        java.lang.String str35 = atomikosProperties21.getService();
        java.lang.Object obj36 = properties0.put((java.lang.Object) atomikosProperties5, (java.lang.Object) atomikosProperties21);
        java.lang.String str37 = atomikosProperties5.getConsoleFileName();
        int int38 = atomikosProperties5.consoleFileCount;
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{}" + "'", str2, "{}");
        org.junit.Assert.assertNotNull(properties4);
        org.junit.Assert.assertNotNull(properties6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10000L + "'", long9 == 10000L);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 500L + "'", long19 == 500L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 50 + "'", int20 == 50);
        org.junit.Assert.assertNotNull(properties22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 10000L + "'", long25 == 10000L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 300000L + "'", long28 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "{-1.0=100}" + "'", str34, "{-1.0=100}");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "{-1.0=100}" + "'", str35, "{-1.0=100}");
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "tm.out" + "'", str37, "tm.out");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
    }

    @Test
    public void test08109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08109");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setEnableLogging(true);
        atomikosProperties0.consoleFileCount = 0;
        atomikosProperties0.consoleFileCount = (byte) 0;
        atomikosProperties0.setAllowSubTransactions(true);
        atomikosProperties0.setConsoleFileCount(18);
        boolean boolean11 = atomikosProperties0.isForceShutdownOnVmExit();
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test08110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08110");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet2 = properties1.entrySet();
        java.util.Properties properties3 = new java.util.Properties();
        java.lang.Object obj6 = properties3.setProperty("{}", "{}");
        java.util.Enumeration<java.lang.Object> objEnumeration7 = properties3.keys();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet8 = properties3.entrySet();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        atomikosProperties10.service = "{-1.0=100}";
        java.lang.String str14 = atomikosProperties10.getLogBaseName();
        long long15 = atomikosProperties10.defaultJtaTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel16 = null;
        atomikosProperties10.setConsoleLogLevel(atomikosLoggingLevel16);
        atomikosProperties10.setLogBaseDir("");
        java.util.Properties properties20 = atomikosProperties10.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties22 = atomikosProperties21.asProperties();
        atomikosProperties21.service = "{-1.0=100}";
        long long25 = atomikosProperties21.getDefaultJtaTimeout();
        long long26 = atomikosProperties21.getMaxTimeout();
        int int27 = atomikosProperties21.consoleFileCount;
        int int28 = atomikosProperties21.getMaxActives();
        atomikosProperties21.setAllowSubTransactions(true);
        boolean boolean31 = atomikosProperties21.serialJtaTransactions;
        java.lang.Object obj32 = properties20.remove((java.lang.Object) boolean31);
        boolean boolean33 = properties1.containsKey((java.lang.Object) boolean31);
        java.lang.Object obj34 = properties1.clone();
        java.util.Collection<java.lang.Object> objCollection35 = properties1.values();
        java.util.Set<java.lang.Object> objSet36 = properties1.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties38 = atomikosProperties37.asProperties();
        atomikosProperties37.service = "{-1.0=100}";
        long long41 = atomikosProperties37.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel42 = null;
        atomikosProperties37.setConsoleLogLevel(atomikosLoggingLevel42);
        int int44 = atomikosProperties37.maxActives;
        atomikosProperties37.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery47 = atomikosProperties37.getRecovery();
        atomikosProperties37.consoleFileName = "{-1.0=100}";
        atomikosProperties37.setSerialJtaTransactions(false);
        atomikosProperties37.consoleFileName = "{={-1.0=100}, -1.0=100}";
        atomikosProperties37.defaultJtaTimeout = 50;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel56 = atomikosProperties37.getConsoleLogLevel();
        atomikosProperties37.enableLogging = true;
        atomikosProperties37.checkpointInterval = (-1L);
        int int61 = atomikosProperties37.maxActives;
        boolean boolean62 = properties1.contains((java.lang.Object) atomikosProperties37);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties63 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties64 = atomikosProperties63.asProperties();
        atomikosProperties63.service = "{-1.0=100}";
        long long67 = atomikosProperties63.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel68 = null;
        atomikosProperties63.setConsoleLogLevel(atomikosLoggingLevel68);
        int int70 = atomikosProperties63.maxActives;
        atomikosProperties63.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery73 = atomikosProperties63.getRecovery();
        atomikosProperties63.forceShutdownOnVmExit = false;
        long long76 = atomikosProperties63.checkpointInterval;
        atomikosProperties63.consoleFileLimit = (short) 0;
        int int79 = atomikosProperties63.getMaxActives();
        boolean boolean80 = atomikosProperties63.threadedTwoPhaseCommit;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties81 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties81.setEnableLogging(true);
        atomikosProperties81.consoleFileCount = 0;
        atomikosProperties81.consoleFileCount = 100;
        boolean boolean88 = atomikosProperties81.isSerialJtaTransactions();
        long long89 = atomikosProperties81.checkpointInterval;
        java.lang.Object obj90 = properties1.replace((java.lang.Object) atomikosProperties63, (java.lang.Object) long89);
        boolean boolean91 = atomikosProperties63.isForceShutdownOnVmExit();
        org.junit.Assert.assertNotNull(objEntrySet2);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(objEnumeration7);
        org.junit.Assert.assertNotNull(objEntrySet8);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "tmlog" + "'", str14, "tmlog");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10000L + "'", long15 == 10000L);
        org.junit.Assert.assertNotNull(properties20);
        org.junit.Assert.assertNotNull(properties22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 10000L + "'", long25 == 10000L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 300000L + "'", long26 == 300000L);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 50 + "'", int28 == 50);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "{{}={}}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "{{}={}}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "{{}={}}");
        org.junit.Assert.assertNotNull(objCollection35);
        org.junit.Assert.assertNotNull(objSet36);
        org.junit.Assert.assertNotNull(properties38);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 10000L + "'", long41 == 10000L);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 50 + "'", int44 == 50);
        org.junit.Assert.assertNotNull(recovery47);
        org.junit.Assert.assertNull(atomikosLoggingLevel56);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 50 + "'", int61 == 50);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(properties64);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 10000L + "'", long67 == 10000L);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 50 + "'", int70 == 50);
        org.junit.Assert.assertNotNull(recovery73);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 500L + "'", long76 == 500L);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 50 + "'", int79 == 50);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 500L + "'", long89 == 500L);
        org.junit.Assert.assertNull(obj90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test08111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08111");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        atomikosProperties0.transactionManagerUniqueName = "tmlog";
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
    }

    @Test
    public void test08112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08112");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties0.setMaxActives(100);
        java.lang.String str9 = atomikosProperties0.logBaseDir;
        atomikosProperties0.consoleFileCount = (short) 0;
        atomikosProperties0.defaultJtaTimeout = 10000L;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel14 = atomikosProperties0.consoleLogLevel;
        long long15 = atomikosProperties0.defaultJtaTimeout;
        int int16 = atomikosProperties0.consoleFileLimit;
        java.lang.String str17 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.logBaseName = "{{-1.0=100}=}";
        atomikosProperties0.setMaxActives(21);
        int int22 = atomikosProperties0.consoleFileLimit;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel14 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel14.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10000L + "'", long15 == 10000L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
    }

    @Test
    public void test08113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08113");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj3 = properties0.setProperty("{}", "{}");
        java.util.Enumeration<java.lang.Object> objEnumeration4 = properties0.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties0.elements();
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Enumeration<?> wildcardEnumeration7 = properties6.propertyNames();
        java.lang.Object obj8 = properties0.remove((java.lang.Object) wildcardEnumeration7);
        java.util.Properties properties9 = new java.util.Properties(properties0);
        properties9.clear();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet11 = properties9.entrySet();
        java.util.Enumeration<java.lang.Object> objEnumeration12 = properties9.elements();
        java.util.Set<java.lang.String> strSet13 = properties9.stringPropertyNames();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNotNull(objEnumeration4);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNotNull(wildcardEnumeration7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(objEntrySet11);
        org.junit.Assert.assertNotNull(objEnumeration12);
        org.junit.Assert.assertNotNull(strSet13);
    }

    @Test
    public void test08114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08114");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long1 = recovery0.getRetryInterval();
        long long2 = recovery0.retryInterval;
        recovery0.forgetOrphanedLogEntriesDelay = (byte) -1;
        recovery0.setMaxRetries(10);
        recovery0.forgetOrphanedLogEntriesDelay = 1L;
        long long9 = recovery0.delay;
        long long10 = recovery0.retryInterval;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 10000L + "'", long1 == 10000L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10000L + "'", long2 == 10000L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10000L + "'", long9 == 10000L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
    }

    @Test
    public void test08115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08115");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        atomikosProperties2.service = "{-1.0=100}";
        long long6 = atomikosProperties2.getDefaultJtaTimeout();
        atomikosProperties2.consoleFileLimit = '#';
        java.lang.Object obj9 = properties1.get((java.lang.Object) atomikosProperties2);
        boolean boolean10 = atomikosProperties2.forceShutdownOnVmExit;
        atomikosProperties2.setOutputDir("");
        java.lang.String str13 = atomikosProperties2.getLogBaseName();
        long long14 = atomikosProperties2.getCheckpointInterval();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 500L + "'", long14 == 500L);
    }

    @Test
    public void test08116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08116");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.retryInterval = (short) 100;
        recovery0.delay = (-1L);
        long long5 = recovery0.delay;
        recovery0.delay = (short) 1;
        long long8 = recovery0.getRetryInterval();
        long long9 = recovery0.getForgetOrphanedLogEntriesDelay();
        recovery0.setMaxRetries(10);
        int int12 = recovery0.maxRetries;
        recovery0.setForgetOrphanedLogEntriesDelay((long) 32);
        long long15 = recovery0.delay;
        int int16 = recovery0.getMaxRetries();
        recovery0.forgetOrphanedLogEntriesDelay = (short) 10;
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 86400000L + "'", long9 == 86400000L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
    }

    @Test
    public void test08117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08117");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj7 = properties0.clone();
        java.util.Set<java.lang.String> strSet8 = properties0.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery9 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery9.retryInterval = (short) 100;
        recovery9.delay = (-1L);
        long long14 = recovery9.delay;
        recovery9.delay = (short) 1;
        long long17 = recovery9.getRetryInterval();
        int int18 = recovery9.maxRetries;
        int int19 = recovery9.maxRetries;
        long long20 = recovery9.forgetOrphanedLogEntriesDelay;
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.Object obj23 = properties21.remove((java.lang.Object) (-1.0d));
        boolean boolean24 = properties21.isEmpty();
        int int25 = properties21.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery26 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery26.retryInterval = (short) 100;
        recovery26.forgetOrphanedLogEntriesDelay = 'a';
        java.util.Properties properties31 = new java.util.Properties();
        java.lang.Object obj33 = properties31.remove((java.lang.Object) (-1.0d));
        boolean boolean34 = properties31.isEmpty();
        int int35 = properties31.size();
        java.lang.String str37 = properties31.getProperty("{}");
        boolean boolean38 = properties21.remove((java.lang.Object) recovery26, (java.lang.Object) properties31);
        java.lang.Object obj39 = properties0.putIfAbsent((java.lang.Object) long20, (java.lang.Object) properties21);
        java.util.Collection<java.lang.Object> objCollection40 = properties21.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties42 = atomikosProperties41.asProperties();
        atomikosProperties41.service = "{-1.0=100}";
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery45 = atomikosProperties41.recovery;
        atomikosProperties41.enableLogging = true;
        int int48 = atomikosProperties41.getConsoleFileCount();
        atomikosProperties41.setMaxTimeout((long) (byte) -1);
        atomikosProperties41.setSerialJtaTransactions(true);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel53 = atomikosProperties41.getConsoleLogLevel();
        java.util.Properties properties54 = atomikosProperties41.asProperties();
        java.lang.Object obj55 = properties21.remove((java.lang.Object) properties54);
        properties54.clear();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{1.0=-1}");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 100L + "'", long17 == 100L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5 + "'", int18 == 5);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 5 + "'", int19 == 5);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 86400000L + "'", long20 == 86400000L);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNotNull(objCollection40);
        org.junit.Assert.assertNotNull(properties42);
        org.junit.Assert.assertNotNull(recovery45);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel53 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel53.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(properties54);
        org.junit.Assert.assertNull(obj55);
    }

    @Test
    public void test08118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08118");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.retryInterval = (short) 100;
        recovery0.forgetOrphanedLogEntriesDelay = 'a';
        long long5 = recovery0.retryInterval;
        recovery0.setForgetOrphanedLogEntriesDelay((long) 0);
        long long8 = recovery0.retryInterval;
        long long9 = recovery0.retryInterval;
        long long10 = recovery0.retryInterval;
        recovery0.setForgetOrphanedLogEntriesDelay((long) 32);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 100L + "'", long5 == 100L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100L + "'", long9 == 100L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 100L + "'", long10 == 100L);
    }

    @Test
    public void test08119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08119");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties0.setService("tm.out");
        long long5 = atomikosProperties0.getCheckpointInterval();
        long long6 = atomikosProperties0.getCheckpointInterval();
        atomikosProperties0.setAllowSubTransactions(true);
        boolean boolean9 = atomikosProperties0.allowSubTransactions;
        atomikosProperties0.setCheckpointInterval((long) 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 500L + "'", long5 == 500L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test08120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08120");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel7 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel7);
        boolean boolean9 = atomikosProperties0.enableLogging;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel10 = atomikosProperties0.consoleLogLevel;
        java.lang.String str11 = atomikosProperties0.getOutputDir();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(atomikosLoggingLevel10);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test08121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08121");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        properties0.clear();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet3 = properties0.entrySet();
        java.lang.Object obj6 = properties0.setProperty("{1.0=-1, -1.0=100}", "{1.0=-1, -1.0=100}");
        java.util.Properties properties7 = new java.util.Properties();
        java.lang.Object obj9 = properties7.remove((java.lang.Object) (-1.0d));
        boolean boolean10 = properties7.isEmpty();
        java.lang.Object obj13 = properties7.setProperty("hi!", "{}");
        java.util.Collection<java.lang.Object> objCollection14 = properties7.values();
        java.util.Set<java.lang.Object> objSet15 = properties7.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties17 = atomikosProperties16.asProperties();
        atomikosProperties16.service = "{-1.0=100}";
        long long20 = atomikosProperties16.getDefaultJtaTimeout();
        atomikosProperties16.serialJtaTransactions = true;
        atomikosProperties16.maxActives = ' ';
        int int25 = atomikosProperties16.getConsoleFileCount();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties26.setEnableLogging(true);
        atomikosProperties26.consoleFileCount = 0;
        int int31 = atomikosProperties26.getMaxActives();
        java.lang.String str32 = atomikosProperties26.getLogBaseDir();
        java.lang.String str33 = atomikosProperties26.service;
        boolean boolean34 = atomikosProperties26.allowSubTransactions;
        atomikosProperties26.setForceShutdownOnVmExit(true);
        atomikosProperties26.maxActives = 32;
        java.lang.Object obj39 = properties7.replace((java.lang.Object) atomikosProperties16, (java.lang.Object) atomikosProperties26);
        boolean boolean40 = properties0.containsValue((java.lang.Object) properties7);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNotNull(objEntrySet3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNotNull(objCollection14);
        org.junit.Assert.assertNotNull(objSet15);
        org.junit.Assert.assertNotNull(properties17);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10000L + "'", long20 == 10000L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 50 + "'", int31 == 50);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test08122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08122");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        long long5 = atomikosProperties0.getMaxTimeout();
        int int6 = atomikosProperties0.consoleFileCount;
        int int7 = atomikosProperties0.getMaxActives();
        atomikosProperties0.setAllowSubTransactions(true);
        atomikosProperties0.transactionManagerUniqueName = "{={-1.0=100}, -1.0=100}";
        atomikosProperties0.allowSubTransactions = true;
        boolean boolean14 = atomikosProperties0.allowSubTransactions;
        java.lang.String str15 = atomikosProperties0.service;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{-1.0=100}" + "'", str15, "{-1.0=100}");
    }

    @Test
    public void test08123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08123");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        boolean boolean7 = atomikosProperties0.isAllowSubTransactions();
        int int8 = atomikosProperties0.getConsoleFileLimit();
        atomikosProperties0.setForceShutdownOnVmExit(false);
        long long11 = atomikosProperties0.defaultJtaTimeout;
        java.util.Properties properties12 = new java.util.Properties();
        java.lang.String str13 = properties12.toString();
        java.lang.Object obj15 = properties12.remove((java.lang.Object) (short) 100);
        java.lang.Object obj18 = properties12.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj19 = properties12.clone();
        java.util.Set<java.lang.String> strSet20 = properties12.stringPropertyNames();
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.String str22 = properties21.toString();
        java.lang.Object obj24 = properties21.remove((java.lang.Object) (short) 100);
        java.lang.Object obj27 = properties21.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean29 = properties21.containsKey((java.lang.Object) 0L);
        java.lang.Object obj32 = properties21.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties33 = new java.util.Properties();
        java.lang.String str34 = properties33.toString();
        java.lang.Object obj36 = properties33.remove((java.lang.Object) (short) 100);
        java.lang.Object obj39 = properties33.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj40 = properties33.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration41 = properties33.elements();
        properties21.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties33);
        java.util.Properties properties43 = new java.util.Properties();
        java.lang.String str44 = properties43.toString();
        java.lang.Object obj46 = properties43.remove((java.lang.Object) (short) 100);
        java.lang.Object obj49 = properties43.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean51 = properties43.containsKey((java.lang.Object) 0L);
        java.lang.Object obj54 = properties43.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties55 = new java.util.Properties();
        java.lang.String str56 = properties55.toString();
        java.lang.Object obj58 = properties55.remove((java.lang.Object) (short) 100);
        java.lang.Object obj61 = properties55.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj62 = properties55.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration63 = properties55.elements();
        properties43.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties55);
        java.lang.Object obj65 = properties12.putIfAbsent((java.lang.Object) properties21, (java.lang.Object) properties55);
        java.util.Enumeration<java.lang.Object> objEnumeration66 = properties12.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties68 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean69 = atomikosProperties68.isSerialJtaTransactions();
        atomikosProperties68.logBaseName = "{-1.0=100}";
        int int72 = atomikosProperties68.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery73 = atomikosProperties68.getRecovery();
        java.lang.String str74 = atomikosProperties68.getLogBaseName();
        atomikosProperties68.setCheckpointInterval((long) 32);
        atomikosProperties0.set(properties12, "{-1.0=100}", (java.lang.Object) atomikosProperties68);
        java.util.Set<java.lang.Object> objSet78 = properties12.keySet();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10000L + "'", long11 == 10000L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{}" + "'", str13, "{}");
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "{1.0=-1}");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{}" + "'", str22, "{}");
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "{}" + "'", str34, "{}");
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertEquals(obj40.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration41);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "{}" + "'", str44, "{}");
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "{}" + "'", str56, "{}");
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertNull(obj61);
        org.junit.Assert.assertNotNull(obj62);
        org.junit.Assert.assertEquals(obj62.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj62), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj62), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration63);
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertNotNull(objEnumeration66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 50 + "'", int72 == 50);
        org.junit.Assert.assertNotNull(recovery73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "{-1.0=100}" + "'", str74, "{-1.0=100}");
        org.junit.Assert.assertNotNull(objSet78);
    }

    @Test
    public void test08124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08124");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileName = "hi!";
        atomikosProperties0.setCheckpointInterval((long) 5);
        atomikosProperties0.setConsoleFileLimit((int) (short) 100);
        atomikosProperties0.outputDir = "{100=100}";
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel13 = atomikosProperties0.getConsoleLogLevel();
        java.lang.String str14 = atomikosProperties0.getLogBaseDir();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel13 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel13.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test08125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08125");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getLogBaseName();
        long long5 = atomikosProperties0.defaultJtaTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel6 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel6);
        atomikosProperties0.threadedTwoPhaseCommit = false;
        atomikosProperties0.allowSubTransactions = false;
        java.lang.String str12 = atomikosProperties0.getConsoleFileName();
        java.util.Properties properties13 = atomikosProperties0.asProperties();
        atomikosProperties0.transactionManagerUniqueName = "{1.0=-1, -1.0=100}";
        int int16 = atomikosProperties0.getConsoleFileLimit();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tmlog" + "'", str4, "tmlog");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 10000L + "'", long5 == 10000L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "tm.out" + "'", str12, "tm.out");
        org.junit.Assert.assertNotNull(properties13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
    }

    @Test
    public void test08126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08126");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        long long5 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.threadedTwoPhaseCommit = true;
        long long8 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.setConsoleFileCount((int) (byte) -1);
        atomikosProperties0.service = "hi!";
        java.lang.String str13 = atomikosProperties0.getOutputDir();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test08127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08127");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        long long5 = atomikosProperties0.getMaxTimeout();
        int int6 = atomikosProperties0.consoleFileCount;
        atomikosProperties0.setConsoleFileCount(0);
        atomikosProperties0.setEnableLogging(true);
        atomikosProperties0.consoleFileLimit = '#';
        java.util.Properties properties13 = atomikosProperties0.asProperties();
        java.lang.String str15 = properties13.getProperty("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties17 = atomikosProperties16.asProperties();
        atomikosProperties16.service = "{-1.0=100}";
        long long20 = atomikosProperties16.getDefaultJtaTimeout();
        long long21 = atomikosProperties16.getMaxTimeout();
        int int22 = atomikosProperties16.consoleFileCount;
        long long23 = atomikosProperties16.getCheckpointInterval();
        atomikosProperties16.setTransactionManagerUniqueName("{1.0=-1, -1.0=100}");
        atomikosProperties16.checkpointInterval = (byte) 1;
        java.util.Properties properties28 = atomikosProperties16.asProperties();
        java.lang.Object obj31 = properties28.setProperty("{={={-1.0=100}, -1.0=100}}", "{com.atomikos.icatch.{}=5}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties33 = atomikosProperties32.asProperties();
        atomikosProperties32.service = "{-1.0=100}";
        long long36 = atomikosProperties32.getDefaultJtaTimeout();
        atomikosProperties32.enableLogging = false;
        atomikosProperties32.setMaxTimeout((long) (byte) 0);
        atomikosProperties32.setService("tm.out");
        atomikosProperties32.setMaxActives((-1));
        atomikosProperties32.maxActives = 50;
        atomikosProperties32.forceShutdownOnVmExit = true;
        java.util.Properties properties49 = new java.util.Properties();
        java.lang.String str50 = properties49.toString();
        boolean boolean51 = properties49.isEmpty();
        java.util.Properties properties52 = new java.util.Properties();
        java.lang.String str53 = properties52.toString();
        java.lang.Object obj55 = properties52.remove((java.lang.Object) (short) 100);
        java.lang.Object obj58 = properties52.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean60 = properties52.containsKey((java.lang.Object) 0L);
        java.lang.Object obj63 = properties52.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties64 = new java.util.Properties();
        java.lang.String str65 = properties64.toString();
        java.lang.Object obj67 = properties64.remove((java.lang.Object) (short) 100);
        java.lang.Object obj70 = properties64.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj71 = properties64.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration72 = properties64.elements();
        properties52.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties64);
        java.lang.Object obj74 = properties64.clone();
        properties64.clear();
        int int76 = properties64.size();
        properties49.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties64);
        boolean boolean78 = properties64.isEmpty();
        java.lang.Object obj79 = properties28.put((java.lang.Object) atomikosProperties32, (java.lang.Object) boolean78);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties80 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties81 = atomikosProperties80.asProperties();
        atomikosProperties80.service = "{-1.0=100}";
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery84 = atomikosProperties80.recovery;
        atomikosProperties80.enableLogging = true;
        int int87 = atomikosProperties80.getConsoleFileCount();
        boolean boolean88 = atomikosProperties80.isEnableLogging();
        long long89 = atomikosProperties80.checkpointInterval;
        atomikosProperties80.setAllowSubTransactions(false);
        int int92 = atomikosProperties80.consoleFileLimit;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj93 = properties13.put(obj79, (java.lang.Object) atomikosProperties80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(properties13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(properties17);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10000L + "'", long20 == 10000L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 300000L + "'", long21 == 300000L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 500L + "'", long23 == 500L);
        org.junit.Assert.assertNotNull(properties28);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNotNull(properties33);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 10000L + "'", long36 == 10000L);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "{}" + "'", str50, "{}");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "{}" + "'", str53, "{}");
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "{}" + "'", str65, "{}");
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertNull(obj70);
        org.junit.Assert.assertNotNull(obj71);
        org.junit.Assert.assertEquals(obj71.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj71), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj71), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration72);
        org.junit.Assert.assertNotNull(obj74);
        org.junit.Assert.assertEquals(obj74.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj74), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj74), "{1.0=-1}");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNull(obj79);
        org.junit.Assert.assertNotNull(properties81);
        org.junit.Assert.assertNotNull(recovery84);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 500L + "'", long89 == 500L);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-1) + "'", int92 == (-1));
    }

    @Test
    public void test08128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08128");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.lang.Object obj5 = properties0.setProperty("", "{={-1.0=100}, -1.0=100}");
        java.util.Properties properties6 = new java.util.Properties(properties0);
        java.lang.Object obj7 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean8 = properties0.containsKey(obj7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj5);
    }

    @Test
    public void test08129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08129");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        int int7 = atomikosProperties0.maxActives;
        atomikosProperties0.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.getRecovery();
        atomikosProperties0.consoleFileName = "{-1.0=100}";
        atomikosProperties0.setSerialJtaTransactions(false);
        atomikosProperties0.consoleFileName = "{={-1.0=100}, -1.0=100}";
        boolean boolean17 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.service = "tm.out";
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel20 = atomikosProperties0.consoleLogLevel;
        atomikosProperties0.logBaseDir = "{{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}=, ={-1.0=100}, -1.0=100}";
        atomikosProperties0.maxTimeout = 21;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(atomikosLoggingLevel20);
    }

    @Test
    public void test08130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08130");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.remove((java.lang.Object) (-1.0d));
        boolean boolean3 = properties0.isEmpty();
        java.util.Collection<java.lang.Object> objCollection4 = properties0.values();
        java.util.Properties properties5 = new java.util.Properties(properties0);
        java.util.Properties properties6 = new java.util.Properties();
        java.lang.String str7 = properties6.toString();
        java.lang.Object obj9 = properties6.remove((java.lang.Object) (short) 100);
        java.lang.Object obj12 = properties6.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean14 = properties6.containsKey((java.lang.Object) 0L);
        java.lang.Object obj17 = properties6.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj20 = properties6.setProperty("", "{-1.0=100}");
        java.lang.Object obj21 = properties6.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery22 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery22.retryInterval = (short) 100;
        recovery22.forgetOrphanedLogEntriesDelay = 'a';
        boolean boolean27 = properties6.equals((java.lang.Object) 'a');
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery28 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long29 = recovery28.getRetryInterval();
        long long30 = recovery28.getDelay();
        long long31 = recovery28.getDelay();
        recovery28.retryInterval = 100L;
        boolean boolean34 = properties6.contains((java.lang.Object) recovery28);
        recovery28.setMaxRetries((int) (byte) 10);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties38 = atomikosProperties37.asProperties();
        atomikosProperties37.service = "{-1.0=100}";
        long long41 = atomikosProperties37.getDefaultJtaTimeout();
        atomikosProperties37.serialJtaTransactions = true;
        atomikosProperties37.maxActives = ' ';
        atomikosProperties37.maxActives = (byte) 10;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery48 = atomikosProperties37.recovery;
        java.lang.Object obj49 = properties0.replace((java.lang.Object) recovery28, (java.lang.Object) atomikosProperties37);
        long long50 = recovery28.forgetOrphanedLogEntriesDelay;
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(objCollection4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "{}" + "'", str7, "{}");
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNotNull(obj21);
// flaky:         org.junit.Assert.assertEquals(obj21.toString(), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 10000L + "'", long29 == 10000L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 10000L + "'", long30 == 10000L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 10000L + "'", long31 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(properties38);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 10000L + "'", long41 == 10000L);
        org.junit.Assert.assertNotNull(recovery48);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 86400000L + "'", long50 == 86400000L);
    }

    @Test
    public void test08131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08131");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties12 = new java.util.Properties();
        java.lang.String str13 = properties12.toString();
        java.lang.Object obj15 = properties12.remove((java.lang.Object) (short) 100);
        java.lang.Object obj18 = properties12.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj19 = properties12.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration20 = properties12.elements();
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties12);
        boolean boolean23 = properties0.equals((java.lang.Object) 1.0f);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties25 = atomikosProperties24.asProperties();
        atomikosProperties24.service = "{-1.0=100}";
        long long28 = atomikosProperties24.getDefaultJtaTimeout();
        long long29 = atomikosProperties24.getMaxTimeout();
        int int30 = atomikosProperties24.consoleFileCount;
        int int31 = atomikosProperties24.getMaxActives();
        boolean boolean32 = atomikosProperties24.forceShutdownOnVmExit;
        java.lang.String str33 = atomikosProperties24.getTransactionManagerUniqueName();
        boolean boolean34 = properties0.containsValue((java.lang.Object) atomikosProperties24);
        java.util.Collection<java.lang.Object> objCollection35 = properties0.values();
        java.lang.String str36 = properties0.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties38 = atomikosProperties37.asProperties();
        atomikosProperties37.service = "{-1.0=100}";
        java.lang.String str41 = atomikosProperties37.getLogBaseName();
        long long42 = atomikosProperties37.defaultJtaTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel43 = null;
        atomikosProperties37.setConsoleLogLevel(atomikosLoggingLevel43);
        atomikosProperties37.threadedTwoPhaseCommit = false;
        atomikosProperties37.allowSubTransactions = false;
        java.lang.String str49 = atomikosProperties37.getConsoleFileName();
        java.util.Properties properties50 = atomikosProperties37.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties51 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties52 = atomikosProperties51.asProperties();
        atomikosProperties51.service = "{-1.0=100}";
        java.lang.String str55 = atomikosProperties51.getTransactionManagerUniqueName();
        atomikosProperties51.consoleFileLimit = (byte) 10;
        java.lang.String str58 = atomikosProperties51.getTransactionManagerUniqueName();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel59 = atomikosProperties51.consoleLogLevel;
        java.lang.Object obj60 = properties0.put((java.lang.Object) properties50, (java.lang.Object) atomikosProperties51);
        long long61 = atomikosProperties51.getDefaultJtaTimeout();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{}" + "'", str13, "{}");
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 10000L + "'", long28 == 10000L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 300000L + "'", long29 == 300000L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 50 + "'", int31 == 50);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(objCollection35);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "{1.0=-1, -1.0=100}" + "'", str36, "{1.0=-1, -1.0=100}");
        org.junit.Assert.assertNotNull(properties38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "tmlog" + "'", str41, "tmlog");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 10000L + "'", long42 == 10000L);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "tm.out" + "'", str49, "tm.out");
        org.junit.Assert.assertNotNull(properties50);
        org.junit.Assert.assertNotNull(properties52);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel59 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel59.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 10000L + "'", long61 == 10000L);
    }

    @Test
    public void test08132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08132");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        long long7 = atomikosProperties0.getDefaultJtaTimeout();
        long long8 = atomikosProperties0.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery9 = atomikosProperties0.getRecovery();
        java.lang.String str10 = atomikosProperties0.outputDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        long long13 = atomikosProperties0.getCheckpointInterval();
        java.lang.String str14 = atomikosProperties0.getLogBaseName();
        boolean boolean15 = atomikosProperties0.serialJtaTransactions;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(recovery9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 500L + "'", long13 == 500L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "tmlog" + "'", str14, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test08133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08133");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.enableLogging = false;
        atomikosProperties0.setMaxActives((int) ' ');
        java.util.Properties properties9 = atomikosProperties0.asProperties();
        java.util.Set<java.lang.Object> objSet10 = properties9.keySet();
        java.lang.String str11 = properties9.toString();
        java.util.Collection<java.lang.Object> objCollection12 = properties9.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties13.setEnableLogging(true);
        atomikosProperties13.consoleFileCount = 0;
        int int18 = atomikosProperties13.getMaxActives();
        java.lang.String str19 = atomikosProperties13.getLogBaseName();
        atomikosProperties13.checkpointInterval = 32L;
        java.util.Properties properties22 = new java.util.Properties();
        java.lang.String str23 = properties22.toString();
        java.lang.Object obj25 = properties22.remove((java.lang.Object) (short) 100);
        java.lang.Object obj28 = properties22.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj29 = properties22.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration30 = properties22.elements();
        java.util.Properties properties31 = new java.util.Properties();
        java.lang.Object obj34 = properties31.setProperty("{}", "{}");
        java.util.Enumeration<java.lang.Object> objEnumeration35 = properties31.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration36 = properties31.elements();
        java.util.Properties properties37 = new java.util.Properties(properties31);
        java.util.Properties properties38 = new java.util.Properties(properties37);
        java.util.Properties properties39 = new java.util.Properties();
        java.lang.String str40 = properties39.toString();
        java.lang.Object obj42 = properties39.remove((java.lang.Object) (short) 100);
        java.lang.Object obj45 = properties39.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.util.Properties properties46 = new java.util.Properties();
        java.lang.String str47 = properties46.toString();
        java.lang.Object obj49 = properties46.remove((java.lang.Object) (short) 100);
        java.lang.Object obj52 = properties46.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        int int53 = properties46.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery54 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery54.retryInterval = (short) 100;
        recovery54.forgetOrphanedLogEntriesDelay = 'a';
        long long59 = recovery54.retryInterval;
        recovery54.setForgetOrphanedLogEntriesDelay((long) 0);
        java.lang.Object obj62 = properties39.replace((java.lang.Object) int53, (java.lang.Object) recovery54);
        recovery54.forgetOrphanedLogEntriesDelay = (byte) 0;
        long long65 = recovery54.retryInterval;
        long long66 = recovery54.delay;
        long long67 = recovery54.getDelay();
        long long68 = recovery54.getForgetOrphanedLogEntriesDelay();
        java.lang.Object obj69 = properties38.get((java.lang.Object) long68);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties70 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties71 = atomikosProperties70.asProperties();
        atomikosProperties70.service = "{-1.0=100}";
        long long74 = atomikosProperties70.getDefaultJtaTimeout();
        atomikosProperties70.setThreadedTwoPhaseCommit(true);
        boolean boolean77 = atomikosProperties70.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery78 = atomikosProperties70.recovery;
        atomikosProperties70.setLogBaseDir("");
        long long81 = atomikosProperties70.maxTimeout;
        boolean boolean82 = atomikosProperties70.forceShutdownOnVmExit;
        atomikosProperties70.enableLogging = false;
        boolean boolean85 = properties38.equals((java.lang.Object) atomikosProperties70);
        boolean boolean86 = properties38.isEmpty();
        boolean boolean87 = properties22.equals((java.lang.Object) boolean86);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet88 = properties22.entrySet();
        boolean boolean89 = properties9.remove((java.lang.Object) atomikosProperties13, (java.lang.Object) properties22);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertNotNull(objSet10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=32, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={-1.0=100}, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}" + "'", str11, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=32, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={-1.0=100}, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        org.junit.Assert.assertNotNull(objCollection12);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 50 + "'", int18 == 50);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "tmlog" + "'", str19, "tmlog");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "{}" + "'", str23, "{}");
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration30);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNotNull(objEnumeration35);
        org.junit.Assert.assertNotNull(objEnumeration36);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "{}" + "'", str40, "{}");
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "{}" + "'", str47, "{}");
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 100L + "'", long59 == 100L);
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 100L + "'", long65 == 100L);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 10000L + "'", long66 == 10000L);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 10000L + "'", long67 == 10000L);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertNull(obj69);
        org.junit.Assert.assertNotNull(properties71);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 10000L + "'", long74 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(recovery78);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 300000L + "'", long81 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(objEntrySet88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test08134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08134");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        atomikosProperties0.maxActives = ' ';
        int int9 = atomikosProperties0.getConsoleFileCount();
        int int10 = atomikosProperties0.consoleFileLimit;
        java.util.Properties properties11 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean13 = atomikosProperties12.isSerialJtaTransactions();
        atomikosProperties12.logBaseName = "{-1.0=100}";
        int int16 = atomikosProperties12.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery17 = atomikosProperties12.getRecovery();
        atomikosProperties12.setConsoleFileCount((int) (byte) 100);
        atomikosProperties12.setAllowSubTransactions(true);
        atomikosProperties12.setService("tm.out");
        boolean boolean24 = atomikosProperties12.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel25 = atomikosProperties12.getConsoleLogLevel();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties26.setAllowSubTransactions(true);
        boolean boolean29 = atomikosProperties26.enableLogging;
        atomikosProperties26.consoleFileLimit = (byte) 100;
        java.util.Properties properties32 = new java.util.Properties();
        java.lang.String str33 = properties32.toString();
        java.util.Properties properties34 = new java.util.Properties(properties32);
        java.util.Properties properties36 = new java.util.Properties();
        java.lang.String str37 = properties36.toString();
        java.lang.Object obj39 = properties36.remove((java.lang.Object) (short) 100);
        java.lang.Object obj42 = properties36.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean44 = properties36.containsKey((java.lang.Object) 0L);
        java.lang.Object obj47 = properties36.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties48 = new java.util.Properties(properties36);
        java.util.Enumeration<java.lang.Object> objEnumeration49 = properties48.elements();
        atomikosProperties26.set(properties34, "{={-1.0=100}, -1.0=100}", (java.lang.Object) properties48);
        atomikosProperties26.allowSubTransactions = false;
        java.lang.Object obj53 = properties11.put((java.lang.Object) atomikosProperties12, (java.lang.Object) false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties54 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties55 = atomikosProperties54.asProperties();
        atomikosProperties54.service = "{-1.0=100}";
        long long58 = atomikosProperties54.getDefaultJtaTimeout();
        long long59 = atomikosProperties54.getMaxTimeout();
        int int60 = atomikosProperties54.consoleFileCount;
        atomikosProperties54.setConsoleFileCount(0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties63 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties64 = atomikosProperties63.asProperties();
        atomikosProperties63.service = "{-1.0=100}";
        long long67 = atomikosProperties63.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel68 = null;
        atomikosProperties63.setConsoleLogLevel(atomikosLoggingLevel68);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel70 = null;
        atomikosProperties63.setConsoleLogLevel(atomikosLoggingLevel70);
        atomikosProperties63.setLogBaseName("{={-1.0=100}, -1.0=100}");
        boolean boolean74 = atomikosProperties63.enableLogging;
        java.lang.Object obj75 = properties11.replace((java.lang.Object) atomikosProperties54, (java.lang.Object) atomikosProperties63);
        atomikosProperties54.setLogBaseName("");
        boolean boolean78 = atomikosProperties54.forceShutdownOnVmExit;
        atomikosProperties54.setOutputDir("tmlog");
        atomikosProperties54.consoleFileLimit = 20;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 50 + "'", int16 == 50);
        org.junit.Assert.assertNotNull(recovery17);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel25 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel25.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "{}" + "'", str33, "{}");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "{}" + "'", str37, "{}");
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNotNull(objEnumeration49);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertNotNull(properties55);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 10000L + "'", long58 == 10000L);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 300000L + "'", long59 == 300000L);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(properties64);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 10000L + "'", long67 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNull(obj75);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test08135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08135");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setTransactionManagerUniqueName("{}");
        java.lang.String str7 = atomikosProperties0.getService();
        java.util.Properties properties8 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery9 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery9.retryInterval = (short) 100;
        recovery9.forgetOrphanedLogEntriesDelay = 'a';
        long long14 = recovery9.getDelay();
        int int15 = recovery9.maxRetries;
        int int16 = recovery9.maxRetries;
        long long17 = recovery9.getRetryInterval();
        recovery9.retryInterval = 10L;
        long long20 = recovery9.getForgetOrphanedLogEntriesDelay();
        boolean boolean21 = properties8.contains((java.lang.Object) long20);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties23 = atomikosProperties22.asProperties();
        atomikosProperties22.service = "{-1.0=100}";
        long long26 = atomikosProperties22.getDefaultJtaTimeout();
        atomikosProperties22.setThreadedTwoPhaseCommit(true);
        boolean boolean29 = atomikosProperties22.isEnableLogging();
        atomikosProperties22.defaultJtaTimeout = (byte) 10;
        int int32 = atomikosProperties22.getMaxActives();
        int int33 = atomikosProperties22.consoleFileCount;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel34 = atomikosProperties22.getConsoleLogLevel();
        java.lang.Object obj35 = properties8.get((java.lang.Object) atomikosLoggingLevel34);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties36.setEnableLogging(true);
        atomikosProperties36.consoleFileCount = 0;
        atomikosProperties36.setSerialJtaTransactions(false);
        atomikosProperties36.consoleFileCount = (short) 1;
        java.lang.String str45 = atomikosProperties36.outputDir;
        boolean boolean46 = atomikosProperties36.allowSubTransactions;
        java.lang.Object obj47 = properties8.get((java.lang.Object) atomikosProperties36);
        int int48 = atomikosProperties36.getConsoleFileCount();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "{-1.0=100}" + "'", str7, "{-1.0=100}");
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10000L + "'", long14 == 10000L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5 + "'", int15 == 5);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 100L + "'", long17 == 100L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 97L + "'", long20 == 97L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(properties23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 10000L + "'", long26 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 50 + "'", int32 == 50);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel34 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel34.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
    }

    @Test
    public void test08136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08136");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long1 = recovery0.getRetryInterval();
        long long2 = recovery0.getDelay();
        long long3 = recovery0.getDelay();
        recovery0.setForgetOrphanedLogEntriesDelay(10000L);
        recovery0.retryInterval = '4';
        recovery0.setRetryInterval((long) (short) 0);
        long long10 = recovery0.getForgetOrphanedLogEntriesDelay();
        recovery0.setForgetOrphanedLogEntriesDelay(0L);
        recovery0.maxRetries = (byte) -1;
        recovery0.retryInterval = 10L;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 10000L + "'", long1 == 10000L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10000L + "'", long2 == 10000L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 10000L + "'", long3 == 10000L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
    }

    @Test
    public void test08137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08137");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setEnableLogging(true);
        atomikosProperties0.consoleFileCount = 0;
        int int5 = atomikosProperties0.getMaxActives();
        java.lang.String str6 = atomikosProperties0.getLogBaseDir();
        java.lang.String str7 = atomikosProperties0.service;
        atomikosProperties0.transactionManagerUniqueName = "tmlog";
        java.lang.String str10 = atomikosProperties0.service;
        atomikosProperties0.setConsoleFileLimit(32);
        atomikosProperties0.setDefaultJtaTimeout((long) (short) 100);
        long long15 = atomikosProperties0.checkpointInterval;
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 50 + "'", int5 == 50);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 500L + "'", long15 == 500L);
    }

    @Test
    public void test08138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08138");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties();
        java.lang.String str2 = properties1.toString();
        boolean boolean3 = properties1.isEmpty();
        java.util.Properties properties4 = new java.util.Properties();
        java.lang.String str5 = properties4.toString();
        java.lang.Object obj7 = properties4.remove((java.lang.Object) (short) 100);
        java.lang.Object obj10 = properties4.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean12 = properties4.containsKey((java.lang.Object) 0L);
        boolean boolean13 = properties1.containsValue((java.lang.Object) 0L);
        boolean boolean16 = properties0.replace((java.lang.Object) 0L, (java.lang.Object) 0.0f, (java.lang.Object) 10.0d);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties18 = atomikosProperties17.asProperties();
        atomikosProperties17.service = "{-1.0=100}";
        long long21 = atomikosProperties17.getDefaultJtaTimeout();
        atomikosProperties17.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties17.logBaseName = "hi!";
        long long26 = atomikosProperties17.getCheckpointInterval();
        boolean boolean27 = properties0.containsValue((java.lang.Object) long26);
        java.lang.Object obj30 = properties0.setProperty("tm.out", "{{-1.0=100}=}");
        java.lang.String str32 = properties0.getProperty("{1.0=-1, 10000=0}");
        properties0.clear();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{}" + "'", str2, "{}");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{}" + "'", str5, "{}");
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10000L + "'", long21 == 10000L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 500L + "'", long26 == 500L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNull(str32);
    }

    @Test
    public void test08139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08139");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.util.Properties properties4 = new java.util.Properties();
        java.lang.String str5 = properties4.toString();
        boolean boolean6 = properties4.isEmpty();
        java.lang.Object obj9 = properties4.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration10 = properties4.elements();
        boolean boolean11 = properties0.containsKey((java.lang.Object) properties4);
        java.util.Set<java.lang.String> strSet12 = properties0.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean14 = atomikosProperties13.isSerialJtaTransactions();
        atomikosProperties13.logBaseName = "{-1.0=100}";
        int int17 = atomikosProperties13.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery18 = atomikosProperties13.getRecovery();
        atomikosProperties13.outputDir = "tm.out";
        java.lang.Object obj21 = properties0.get((java.lang.Object) atomikosProperties13);
        atomikosProperties13.setOutputDir("{{}={}}");
        boolean boolean24 = atomikosProperties13.forceShutdownOnVmExit;
        java.lang.String str25 = atomikosProperties13.outputDir;
        atomikosProperties13.transactionManagerUniqueName = "{com.atomikos.icatch.console_file_name=hi!, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.output_dir=tm.out, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={-1.0=100}, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}";
        boolean boolean28 = atomikosProperties13.serialJtaTransactions;
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{}" + "'", str5, "{}");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNotNull(objEnumeration10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 50 + "'", int17 == 50);
        org.junit.Assert.assertNotNull(recovery18);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "{{}={}}" + "'", str25, "{{}={}}");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test08140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08140");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setTransactionManagerUniqueName("{}");
        atomikosProperties0.consoleFileName = "hi!";
        int int9 = atomikosProperties0.getConsoleFileCount();
        boolean boolean10 = atomikosProperties0.isThreadedTwoPhaseCommit();
        atomikosProperties0.maxTimeout = 0;
        atomikosProperties0.setLogBaseName("hi!");
        atomikosProperties0.setMaxActives((int) (short) 100);
        atomikosProperties0.setOutputDir("{{-1.0=100}=}");
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test08141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08141");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        atomikosProperties2.service = "{-1.0=100}";
        long long6 = atomikosProperties2.getDefaultJtaTimeout();
        atomikosProperties2.consoleFileLimit = '#';
        java.lang.Object obj9 = properties1.get((java.lang.Object) atomikosProperties2);
        boolean boolean10 = atomikosProperties2.forceShutdownOnVmExit;
        java.util.Properties properties11 = new java.util.Properties();
        java.lang.String str12 = properties11.toString();
        java.lang.Object obj14 = properties11.remove((java.lang.Object) (short) 100);
        java.lang.Object obj17 = properties11.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj18 = properties11.clone();
        java.lang.String str20 = properties11.getProperty("{}");
        java.lang.Object obj23 = properties11.put((java.lang.Object) 86400000L, (java.lang.Object) "{-1.0=100}");
        atomikosProperties2.set(properties11, "tmlog", (java.lang.Object) 5L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties28 = atomikosProperties27.asProperties();
        atomikosProperties27.service = "{-1.0=100}";
        long long31 = atomikosProperties27.getDefaultJtaTimeout();
        atomikosProperties27.setThreadedTwoPhaseCommit(true);
        java.lang.String str34 = atomikosProperties27.getLogBaseName();
        java.lang.String str35 = atomikosProperties27.consoleFileName;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean37 = atomikosProperties36.isSerialJtaTransactions();
        atomikosProperties36.logBaseName = "{-1.0=100}";
        int int40 = atomikosProperties36.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery41 = atomikosProperties36.getRecovery();
        atomikosProperties36.setConsoleFileCount((int) (byte) 100);
        atomikosProperties36.setAllowSubTransactions(true);
        atomikosProperties36.setService("tm.out");
        int int48 = atomikosProperties36.consoleFileLimit;
        atomikosProperties36.setLogBaseName("");
        java.util.Properties properties51 = new java.util.Properties();
        java.util.Enumeration<?> wildcardEnumeration52 = properties51.propertyNames();
        java.lang.Object obj53 = properties51.clone();
        java.util.Collection<java.lang.Object> objCollection54 = properties51.values();
        boolean boolean55 = properties11.replace((java.lang.Object) str35, (java.lang.Object) atomikosProperties36, (java.lang.Object) objCollection54);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties56 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties57 = atomikosProperties56.asProperties();
        atomikosProperties56.service = "{-1.0=100}";
        long long60 = atomikosProperties56.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel61 = null;
        atomikosProperties56.setConsoleLogLevel(atomikosLoggingLevel61);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel63 = null;
        atomikosProperties56.setConsoleLogLevel(atomikosLoggingLevel63);
        boolean boolean65 = atomikosProperties56.enableLogging;
        int int66 = atomikosProperties56.getConsoleFileLimit();
        atomikosProperties56.serialJtaTransactions = false;
        atomikosProperties56.setLogBaseName("");
        atomikosProperties56.checkpointInterval = (byte) -1;
        boolean boolean73 = properties11.containsValue((java.lang.Object) atomikosProperties56);
        java.lang.String str74 = atomikosProperties56.getOutputDir();
        atomikosProperties56.setLogBaseName("tmlog");
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "{}" + "'", str12, "{}");
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "{1.0=-1}");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNotNull(properties28);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 10000L + "'", long31 == 10000L);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "tmlog" + "'", str34, "tmlog");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "tm.out" + "'", str35, "tm.out");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 50 + "'", int40 == 50);
        org.junit.Assert.assertNotNull(recovery41);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(wildcardEnumeration52);
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertEquals(obj53.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj53), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj53), "{}");
        org.junit.Assert.assertNotNull(objCollection54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(properties57);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 10000L + "'", long60 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(str74);
    }

    @Test
    public void test08142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08142");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setEnableLogging(true);
        atomikosProperties0.consoleFileCount = 0;
        int int5 = atomikosProperties0.getMaxActives();
        java.lang.String str6 = atomikosProperties0.getLogBaseDir();
        java.lang.String str7 = atomikosProperties0.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery8 = atomikosProperties0.getRecovery();
        long long9 = recovery8.getDelay();
        int int10 = recovery8.maxRetries;
        long long11 = recovery8.retryInterval;
        int int12 = recovery8.getMaxRetries();
        long long13 = recovery8.getRetryInterval();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 50 + "'", int5 == 50);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(recovery8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10000L + "'", long9 == 10000L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5 + "'", int10 == 5);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10000L + "'", long11 == 10000L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 5 + "'", int12 == 5);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10000L + "'", long13 == 10000L);
    }

    @Test
    public void test08143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08143");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj14 = properties0.setProperty("", "{-1.0=100}");
        java.lang.Object obj15 = properties0.clone();
        java.util.Properties properties16 = new java.util.Properties();
        java.lang.Object obj19 = properties16.setProperty("{}", "{}");
        java.util.Enumeration<java.lang.Object> objEnumeration20 = properties16.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration21 = properties16.elements();
        java.util.Properties properties22 = new java.util.Properties(properties16);
        java.util.Properties properties23 = new java.util.Properties(properties22);
        java.util.Properties properties24 = new java.util.Properties(properties22);
        java.util.Properties properties25 = new java.util.Properties();
        java.lang.String str26 = properties25.toString();
        java.lang.Object obj28 = properties25.remove((java.lang.Object) (short) 100);
        java.lang.Object obj31 = properties25.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean33 = properties25.containsKey((java.lang.Object) 0L);
        java.lang.Object obj36 = properties25.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj39 = properties25.setProperty("", "{-1.0=100}");
        boolean boolean40 = properties25.isEmpty();
        java.util.Properties properties41 = new java.util.Properties();
        java.lang.String str42 = properties41.toString();
        java.util.Properties properties43 = new java.util.Properties(properties41);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet44 = properties43.entrySet();
        java.util.Properties properties46 = new java.util.Properties();
        java.lang.Object obj48 = properties46.remove((java.lang.Object) (-1.0d));
        int int49 = properties46.size();
        boolean boolean50 = properties25.replace((java.lang.Object) properties43, (java.lang.Object) 100L, (java.lang.Object) properties46);
        java.util.Collection<java.lang.Object> objCollection51 = properties25.values();
        boolean boolean52 = properties22.containsKey((java.lang.Object) properties25);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties25);
        java.util.Properties properties54 = new java.util.Properties(properties25);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Enumeration<?> wildcardEnumeration55 = properties54.propertyNames();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.Double cannot be cast to java.lang.String");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(obj15);
// flaky:         org.junit.Assert.assertEquals(obj15.toString(), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNotNull(objEnumeration20);
        org.junit.Assert.assertNotNull(objEnumeration21);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "{}" + "'", str26, "{}");
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "{}" + "'", str42, "{}");
        org.junit.Assert.assertNotNull(objEntrySet44);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(objCollection51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test08144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08144");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.checkpointInterval = 300000L;
        java.lang.String str3 = atomikosProperties0.logBaseName;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "tmlog" + "'", str3, "tmlog");
    }

    @Test
    public void test08145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08145");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setEnableLogging(true);
        atomikosProperties0.consoleFileCount = 0;
        atomikosProperties0.setSerialJtaTransactions(false);
        atomikosProperties0.checkpointInterval = 21;
    }

    @Test
    public void test08146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08146");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj3 = properties0.setProperty("{}", "{}");
        java.util.Enumeration<java.lang.Object> objEnumeration4 = properties0.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties0.elements();
        java.util.Properties properties6 = new java.util.Properties(properties0);
        java.util.Set<java.lang.String> strSet7 = properties6.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties8.setEnableLogging(true);
        atomikosProperties8.consoleFileCount = 0;
        int int13 = atomikosProperties8.getMaxActives();
        java.lang.String str14 = atomikosProperties8.getLogBaseDir();
        java.lang.String str15 = atomikosProperties8.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery16 = atomikosProperties8.getRecovery();
        boolean boolean17 = atomikosProperties8.serialJtaTransactions;
        atomikosProperties8.defaultJtaTimeout = 1;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties21 = atomikosProperties20.asProperties();
        atomikosProperties20.service = "{-1.0=100}";
        long long24 = atomikosProperties20.getDefaultJtaTimeout();
        atomikosProperties20.setThreadedTwoPhaseCommit(true);
        boolean boolean27 = atomikosProperties20.isEnableLogging();
        atomikosProperties20.defaultJtaTimeout = (byte) 10;
        java.lang.Object obj30 = properties6.getOrDefault((java.lang.Object) 1, (java.lang.Object) atomikosProperties20);
        java.lang.String str32 = properties6.getProperty("{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean34 = atomikosProperties33.isSerialJtaTransactions();
        atomikosProperties33.logBaseName = "{-1.0=100}";
        int int37 = atomikosProperties33.maxActives;
        atomikosProperties33.setAllowSubTransactions(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery40 = atomikosProperties33.getRecovery();
        atomikosProperties33.transactionManagerUniqueName = "{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}";
        atomikosProperties33.setMaxTimeout((long) 50);
        java.lang.String str45 = atomikosProperties33.transactionManagerUniqueName;
        boolean boolean46 = properties6.containsKey((java.lang.Object) atomikosProperties33);
        atomikosProperties33.setLogBaseDir("{100=100}");
        java.lang.String str49 = atomikosProperties33.getTransactionManagerUniqueName();
        java.lang.String str50 = atomikosProperties33.getConsoleFileName();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery51 = atomikosProperties33.recovery;
        atomikosProperties33.enableLogging = true;
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNotNull(objEnumeration4);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 50 + "'", int13 == 50);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(recovery16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(properties21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 10000L + "'", long24 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 50 + "'", int37 == 50);
        org.junit.Assert.assertNotNull(recovery40);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}" + "'", str45, "{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}" + "'", str49, "{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "tm.out" + "'", str50, "tm.out");
        org.junit.Assert.assertNotNull(recovery51);
    }

    @Test
    public void test08147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08147");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long1 = recovery0.forgetOrphanedLogEntriesDelay;
        recovery0.setRetryInterval((long) 3);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 86400000L + "'", long1 == 86400000L);
    }

    @Test
    public void test08148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08148");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        atomikosProperties0.setConsoleFileCount((int) (byte) 100);
        atomikosProperties0.setAllowSubTransactions(true);
        long long10 = atomikosProperties0.getCheckpointInterval();
        atomikosProperties0.setAllowSubTransactions(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 500L + "'", long10 == 500L);
    }

    @Test
    public void test08149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08149");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties0.setMaxActives(100);
        boolean boolean9 = atomikosProperties0.enableLogging;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.recovery;
        atomikosProperties0.checkpointInterval = 300000L;
        int int13 = atomikosProperties0.consoleFileCount;
        atomikosProperties0.enableLogging = true;
        atomikosProperties0.setLogBaseName("hi!");
        atomikosProperties0.setLogBaseDir("hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties21 = atomikosProperties20.asProperties();
        atomikosProperties20.service = "{-1.0=100}";
        long long24 = atomikosProperties20.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel25 = null;
        atomikosProperties20.setConsoleLogLevel(atomikosLoggingLevel25);
        int int27 = atomikosProperties20.maxActives;
        atomikosProperties20.setLogBaseDir("{}");
        java.lang.String str30 = atomikosProperties20.logBaseDir;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties32 = atomikosProperties31.asProperties();
        atomikosProperties31.service = "{-1.0=100}";
        long long35 = atomikosProperties31.getDefaultJtaTimeout();
        boolean boolean36 = atomikosProperties31.enableLogging;
        boolean boolean37 = atomikosProperties31.isForceShutdownOnVmExit();
        atomikosProperties31.consoleFileLimit = (byte) -1;
        java.lang.String str40 = atomikosProperties31.getService();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel41 = atomikosProperties31.consoleLogLevel;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties43 = atomikosProperties42.asProperties();
        atomikosProperties42.service = "{-1.0=100}";
        long long46 = atomikosProperties42.getDefaultJtaTimeout();
        atomikosProperties42.serialJtaTransactions = true;
        long long49 = atomikosProperties42.maxTimeout;
        atomikosProperties42.setLogBaseDir("{-1.0=100}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties52 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties52.setAllowSubTransactions(true);
        atomikosProperties52.maxActives = (short) -1;
        atomikosProperties52.setService("tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties59 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties59.setAllowSubTransactions(true);
        boolean boolean62 = atomikosProperties59.enableLogging;
        boolean boolean63 = atomikosProperties59.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel64 = atomikosProperties59.consoleLogLevel;
        atomikosProperties52.setConsoleLogLevel(atomikosLoggingLevel64);
        atomikosProperties42.consoleLogLevel = atomikosLoggingLevel64;
        atomikosProperties31.consoleLogLevel = atomikosLoggingLevel64;
        atomikosProperties20.setConsoleLogLevel(atomikosLoggingLevel64);
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel64);
        boolean boolean70 = atomikosProperties0.forceShutdownOnVmExit;
        java.lang.String str71 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.setConsoleFileLimit(100);
        java.lang.String str74 = atomikosProperties0.getTransactionManagerUniqueName();
        java.lang.String str75 = atomikosProperties0.getOutputDir();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties76 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties77 = atomikosProperties76.asProperties();
        atomikosProperties76.service = "{-1.0=100}";
        java.lang.String str80 = atomikosProperties76.getTransactionManagerUniqueName();
        atomikosProperties76.consoleFileName = "hi!";
        atomikosProperties76.service = "tm.out";
        atomikosProperties76.logBaseName = "tm.out";
        atomikosProperties76.setThreadedTwoPhaseCommit(true);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel89 = atomikosProperties76.consoleLogLevel;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel89;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(properties21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 10000L + "'", long24 == 10000L);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 50 + "'", int27 == 50);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "{}" + "'", str30, "{}");
        org.junit.Assert.assertNotNull(properties32);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 10000L + "'", long35 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "{-1.0=100}" + "'", str40, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel41 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel41.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(properties43);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 10000L + "'", long46 == 10000L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 300000L + "'", long49 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel64 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel64.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "{={-1.0=100}, -1.0=100}" + "'", str75, "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNotNull(properties77);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel89 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel89.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
    }

    @Test
    public void test08150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08150");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.retryInterval = (short) 100;
        recovery0.forgetOrphanedLogEntriesDelay = 'a';
        long long5 = recovery0.getDelay();
        int int6 = recovery0.maxRetries;
        int int7 = recovery0.maxRetries;
        long long8 = recovery0.getRetryInterval();
        recovery0.retryInterval = (byte) -1;
        long long11 = recovery0.getRetryInterval();
        recovery0.setDelay(10000L);
        recovery0.setRetryInterval((long) (byte) 100);
        int int16 = recovery0.getMaxRetries();
        recovery0.setDelay((long) (short) 1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 10000L + "'", long5 == 10000L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 5 + "'", int7 == 5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
    }

    @Test
    public void test08151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08151");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long1 = recovery0.getRetryInterval();
        long long2 = recovery0.getDelay();
        int int3 = recovery0.maxRetries;
        recovery0.setForgetOrphanedLogEntriesDelay(10L);
        long long6 = recovery0.getDelay();
        long long7 = recovery0.forgetOrphanedLogEntriesDelay;
        int int8 = recovery0.maxRetries;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 10000L + "'", long1 == 10000L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10000L + "'", long2 == 10000L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 5 + "'", int3 == 5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10L + "'", long7 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 5 + "'", int8 == 5);
    }

    @Test
    public void test08152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08152");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        int int7 = atomikosProperties0.maxActives;
        atomikosProperties0.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.getRecovery();
        atomikosProperties0.consoleFileName = "{-1.0=100}";
        boolean boolean13 = atomikosProperties0.isThreadedTwoPhaseCommit();
        boolean boolean14 = atomikosProperties0.isThreadedTwoPhaseCommit();
        java.lang.String str15 = atomikosProperties0.consoleFileName;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties17 = atomikosProperties16.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties19 = atomikosProperties18.asProperties();
        atomikosProperties18.service = "{-1.0=100}";
        long long22 = atomikosProperties18.getDefaultJtaTimeout();
        atomikosProperties18.consoleFileLimit = '#';
        java.lang.Object obj25 = properties17.get((java.lang.Object) atomikosProperties18);
        boolean boolean26 = atomikosProperties18.forceShutdownOnVmExit;
        atomikosProperties18.setOutputDir("");
        long long29 = atomikosProperties18.defaultJtaTimeout;
        long long30 = atomikosProperties18.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel31 = atomikosProperties18.consoleLogLevel;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel31;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{-1.0=100}" + "'", str15, "{-1.0=100}");
        org.junit.Assert.assertNotNull(properties17);
        org.junit.Assert.assertNotNull(properties19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 10000L + "'", long22 == 10000L);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 10000L + "'", long29 == 10000L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 10000L + "'", long30 == 10000L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel31 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel31.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
    }

    @Test
    public void test08153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08153");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        atomikosProperties0.setConsoleFileCount((int) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel8 = null;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel8;
        java.lang.String str10 = atomikosProperties0.logBaseDir;
        java.lang.String str11 = atomikosProperties0.consoleFileName;
        int int12 = atomikosProperties0.getConsoleFileCount();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties13.setAllowSubTransactions(true);
        boolean boolean16 = atomikosProperties13.enableLogging;
        boolean boolean17 = atomikosProperties13.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel18 = atomikosProperties13.consoleLogLevel;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel18);
        atomikosProperties0.serialJtaTransactions = true;
        atomikosProperties0.setLogBaseName("{1.0=-1, 10000=0}");
        atomikosProperties0.setService("{100=100}");
        long long26 = atomikosProperties0.defaultJtaTimeout;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "tm.out" + "'", str11, "tm.out");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel18 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel18.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 10000L + "'", long26 == 10000L);
    }

    @Test
    public void test08154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08154");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.outputDir = "{={-1.0=100}, -1.0=100}";
        int int7 = atomikosProperties0.getConsoleFileLimit();
        boolean boolean8 = atomikosProperties0.isSerialJtaTransactions();
        int int9 = atomikosProperties0.getConsoleFileLimit();
        boolean boolean10 = atomikosProperties0.isThreadedTwoPhaseCommit();
        atomikosProperties0.service = "{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}";
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test08155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08155");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        boolean boolean7 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.defaultJtaTimeout = (byte) 10;
        atomikosProperties0.logBaseDir = "tm.out";
        int int12 = atomikosProperties0.getMaxActives();
        atomikosProperties0.consoleFileCount = (short) -1;
        atomikosProperties0.enableLogging = false;
        java.lang.String str17 = atomikosProperties0.consoleFileName;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 50 + "'", int12 == 50);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tm.out" + "'", str17, "tm.out");
    }

    @Test
    public void test08156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08156");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileName = "hi!";
        atomikosProperties0.serialJtaTransactions = true;
        atomikosProperties0.enableLogging = true;
        atomikosProperties0.checkpointInterval = 300000L;
        atomikosProperties0.setLogBaseDir("hi!");
        atomikosProperties0.consoleFileName = "{com.atomikos.icatch.{}=5}";
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test08157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08157");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        boolean boolean7 = atomikosProperties0.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery8 = atomikosProperties0.recovery;
        boolean boolean9 = atomikosProperties0.threadedTwoPhaseCommit;
        atomikosProperties0.setOutputDir("tmlog");
        boolean boolean12 = atomikosProperties0.isAllowSubTransactions();
        int int13 = atomikosProperties0.getMaxActives();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(recovery8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 50 + "'", int13 == 50);
    }

    @Test
    public void test08158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08158");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileName = "hi!";
        atomikosProperties0.setCheckpointInterval((long) 5);
        atomikosProperties0.setService("");
        java.lang.String str11 = atomikosProperties0.outputDir;
        java.lang.String str12 = atomikosProperties0.outputDir;
        atomikosProperties0.forceShutdownOnVmExit = true;
        java.lang.String str15 = atomikosProperties0.getLogBaseName();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "tmlog" + "'", str15, "tmlog");
    }

    @Test
    public void test08159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08159");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj7 = properties0.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration8 = properties0.elements();
        properties0.clear();
        java.lang.Object obj10 = properties0.clone();
        java.lang.String str11 = properties0.toString();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration8);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{}");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "{}" + "'", str11, "{}");
    }

    @Test
    public void test08160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08160");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setEnableLogging(true);
        atomikosProperties12.setConsoleFileLimit((int) (short) 0);
        boolean boolean17 = properties0.contains((java.lang.Object) atomikosProperties12);
        java.lang.String str18 = properties0.toString();
        java.lang.String str19 = properties0.toString();
        java.lang.String str20 = properties0.toString();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "{-1.0=100}" + "'", str18, "{-1.0=100}");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "{-1.0=100}" + "'", str19, "{-1.0=100}");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{-1.0=100}" + "'", str20, "{-1.0=100}");
    }

    @Test
    public void test08161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08161");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.enableLogging = false;
        atomikosProperties0.setMaxActives((int) ' ');
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties9.setAllowSubTransactions(true);
        boolean boolean12 = atomikosProperties9.enableLogging;
        boolean boolean13 = atomikosProperties9.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel14 = atomikosProperties9.consoleLogLevel;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel14);
        atomikosProperties0.setTransactionManagerUniqueName("tmlog");
        long long18 = atomikosProperties0.checkpointInterval;
        long long19 = atomikosProperties0.defaultJtaTimeout;
        atomikosProperties0.setAllowSubTransactions(false);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel14 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel14.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 500L + "'", long18 == 500L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10000L + "'", long19 == 10000L);
    }

    @Test
    public void test08162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08162");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj14 = properties0.setProperty("", "{-1.0=100}");
        boolean boolean15 = properties0.isEmpty();
        java.util.Properties properties16 = new java.util.Properties();
        java.lang.String str17 = properties16.toString();
        java.util.Properties properties18 = new java.util.Properties(properties16);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet19 = properties18.entrySet();
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.Object obj23 = properties21.remove((java.lang.Object) (-1.0d));
        int int24 = properties21.size();
        boolean boolean25 = properties0.replace((java.lang.Object) properties18, (java.lang.Object) 100L, (java.lang.Object) properties21);
        java.util.Properties properties26 = new java.util.Properties();
        java.lang.Object obj29 = properties26.setProperty("{}", "{}");
        java.util.Enumeration<java.lang.Object> objEnumeration30 = properties26.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration31 = properties26.elements();
        java.util.Properties properties32 = new java.util.Properties(properties26);
        boolean boolean33 = properties0.containsValue((java.lang.Object) properties32);
        java.util.Properties properties34 = new java.util.Properties();
        java.util.Properties properties35 = new java.util.Properties();
        java.lang.String str36 = properties35.toString();
        boolean boolean37 = properties35.isEmpty();
        java.util.Properties properties38 = new java.util.Properties();
        java.lang.String str39 = properties38.toString();
        java.lang.Object obj41 = properties38.remove((java.lang.Object) (short) 100);
        java.lang.Object obj44 = properties38.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean46 = properties38.containsKey((java.lang.Object) 0L);
        boolean boolean47 = properties35.containsValue((java.lang.Object) 0L);
        boolean boolean50 = properties34.replace((java.lang.Object) 0L, (java.lang.Object) 0.0f, (java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration51 = properties34.elements();
        java.lang.Class<?> wildcardClass52 = objEnumeration51.getClass();
        java.util.Properties properties53 = new java.util.Properties();
        java.util.Properties properties54 = new java.util.Properties(properties53);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet55 = properties54.entrySet();
        java.util.Properties properties56 = new java.util.Properties();
        java.lang.Object obj59 = properties56.setProperty("{}", "{}");
        java.util.Enumeration<java.lang.Object> objEnumeration60 = properties56.keys();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet61 = properties56.entrySet();
        properties54.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties56);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery63 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery63.retryInterval = (short) 100;
        recovery63.delay = (-1L);
        long long68 = recovery63.delay;
        recovery63.delay = (short) 1;
        long long71 = recovery63.getRetryInterval();
        java.util.Properties properties72 = new java.util.Properties();
        java.lang.String str73 = properties72.toString();
        properties72.clear();
        java.lang.Object obj75 = properties54.getOrDefault((java.lang.Object) recovery63, (java.lang.Object) properties72);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties76 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties77 = atomikosProperties76.asProperties();
        atomikosProperties76.service = "{-1.0=100}";
        java.lang.String str80 = atomikosProperties76.getTransactionManagerUniqueName();
        atomikosProperties76.consoleFileName = "hi!";
        atomikosProperties76.setCheckpointInterval((long) 5);
        atomikosProperties76.setConsoleFileCount(0);
        atomikosProperties76.setService("{-1.0=100}");
        atomikosProperties76.setDefaultJtaTimeout((long) 100);
        atomikosProperties76.setConsoleFileCount(18);
        boolean boolean93 = properties32.replace((java.lang.Object) wildcardClass52, (java.lang.Object) properties72, (java.lang.Object) 18);
        java.io.PrintStream printStream94 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties32.list(printStream94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "{}" + "'", str17, "{}");
        org.junit.Assert.assertNotNull(objEntrySet19);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNotNull(objEnumeration30);
        org.junit.Assert.assertNotNull(objEnumeration31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "{}" + "'", str36, "{}");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "{}" + "'", str39, "{}");
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(objEnumeration51);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(objEntrySet55);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertNotNull(objEnumeration60);
        org.junit.Assert.assertNotNull(objEntrySet61);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + (-1L) + "'", long68 == (-1L));
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 100L + "'", long71 == 100L);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "{}" + "'", str73, "{}");
        org.junit.Assert.assertNotNull(obj75);
        org.junit.Assert.assertEquals(obj75.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj75), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj75), "{}");
        org.junit.Assert.assertNotNull(properties77);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test08163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08163");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.retryInterval = (short) 100;
        recovery0.forgetOrphanedLogEntriesDelay = 'a';
        long long5 = recovery0.retryInterval;
        recovery0.forgetOrphanedLogEntriesDelay = 0L;
        long long8 = recovery0.getForgetOrphanedLogEntriesDelay();
        long long9 = recovery0.getForgetOrphanedLogEntriesDelay();
        recovery0.retryInterval = 0L;
        int int12 = recovery0.getMaxRetries();
        recovery0.maxRetries = (byte) 100;
        recovery0.setMaxRetries((int) (short) 10);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 100L + "'", long5 == 100L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 5 + "'", int12 == 5);
    }

    @Test
    public void test08164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08164");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        java.util.Properties properties7 = new java.util.Properties();
        java.util.Properties properties8 = new java.util.Properties(properties7);
        java.util.Enumeration<java.lang.Object> objEnumeration9 = properties8.elements();
        java.util.Properties properties10 = new java.util.Properties();
        java.lang.String str11 = properties10.toString();
        java.lang.Object obj13 = properties10.remove((java.lang.Object) (short) 100);
        java.lang.Object obj16 = properties10.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean18 = properties10.containsKey((java.lang.Object) 0L);
        java.lang.Object obj21 = properties10.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj24 = properties10.setProperty("", "{-1.0=100}");
        boolean boolean25 = properties10.isEmpty();
        java.util.Properties properties26 = new java.util.Properties();
        java.lang.String str27 = properties26.toString();
        java.util.Properties properties28 = new java.util.Properties(properties26);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet29 = properties28.entrySet();
        java.util.Properties properties31 = new java.util.Properties();
        java.lang.Object obj33 = properties31.remove((java.lang.Object) (-1.0d));
        int int34 = properties31.size();
        boolean boolean35 = properties10.replace((java.lang.Object) properties28, (java.lang.Object) 100L, (java.lang.Object) properties31);
        boolean boolean36 = properties10.isEmpty();
        java.util.Set<java.lang.Object> objSet37 = properties10.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties39 = atomikosProperties38.asProperties();
        atomikosProperties38.service = "{-1.0=100}";
        long long42 = atomikosProperties38.getDefaultJtaTimeout();
        long long43 = atomikosProperties38.getMaxTimeout();
        int int44 = atomikosProperties38.consoleFileCount;
        java.lang.String str45 = atomikosProperties38.getOutputDir();
        boolean boolean46 = properties8.remove((java.lang.Object) properties10, (java.lang.Object) atomikosProperties38);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties47 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties48 = atomikosProperties47.asProperties();
        atomikosProperties47.service = "{-1.0=100}";
        long long51 = atomikosProperties47.getDefaultJtaTimeout();
        long long52 = atomikosProperties47.getMaxTimeout();
        int int53 = atomikosProperties47.consoleFileCount;
        atomikosProperties47.setConsoleFileCount(0);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel56 = atomikosProperties47.getConsoleLogLevel();
        boolean boolean57 = properties10.equals((java.lang.Object) atomikosLoggingLevel56);
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel56);
        int int59 = atomikosProperties0.consoleFileLimit;
        java.lang.String str60 = atomikosProperties0.getOutputDir();
        atomikosProperties0.setDefaultJtaTimeout(100L);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertNotNull(objEnumeration9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "{}" + "'", str11, "{}");
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "{}" + "'", str27, "{}");
        org.junit.Assert.assertNotNull(objEntrySet29);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(objSet37);
        org.junit.Assert.assertNotNull(properties39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 10000L + "'", long42 == 10000L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 300000L + "'", long43 == 300000L);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(properties48);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 10000L + "'", long51 == 10000L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 300000L + "'", long52 == 300000L);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel56 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel56.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNull(str60);
    }

    @Test
    public void test08165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08165");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileLimit = (byte) 10;
        long long7 = atomikosProperties0.maxTimeout;
        boolean boolean8 = atomikosProperties0.isAllowSubTransactions();
        boolean boolean9 = atomikosProperties0.threadedTwoPhaseCommit;
        boolean boolean10 = atomikosProperties0.serialJtaTransactions;
        atomikosProperties0.setConsoleFileName("{com.atomikos.icatch.console_file_name=hi!, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.output_dir=tm.out, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={-1.0=100}, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test08166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08166");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getLogBaseName();
        long long5 = atomikosProperties0.defaultJtaTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel6 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel6);
        atomikosProperties0.service = "";
        atomikosProperties0.setConsoleFileCount((int) 'a');
        atomikosProperties0.setSerialJtaTransactions(true);
        java.lang.String str14 = atomikosProperties0.transactionManagerUniqueName;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tmlog" + "'", str4, "tmlog");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 10000L + "'", long5 == 10000L);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test08167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08167");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj7 = properties0.clone();
        java.util.Set<java.lang.String> strSet8 = properties0.stringPropertyNames();
        java.util.Properties properties9 = new java.util.Properties();
        java.lang.String str10 = properties9.toString();
        java.lang.Object obj12 = properties9.remove((java.lang.Object) (short) 100);
        java.lang.Object obj15 = properties9.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean17 = properties9.containsKey((java.lang.Object) 0L);
        java.lang.Object obj20 = properties9.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.String str22 = properties21.toString();
        java.lang.Object obj24 = properties21.remove((java.lang.Object) (short) 100);
        java.lang.Object obj27 = properties21.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj28 = properties21.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration29 = properties21.elements();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties21);
        java.util.Properties properties31 = new java.util.Properties();
        java.lang.String str32 = properties31.toString();
        java.lang.Object obj34 = properties31.remove((java.lang.Object) (short) 100);
        java.lang.Object obj37 = properties31.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean39 = properties31.containsKey((java.lang.Object) 0L);
        java.lang.Object obj42 = properties31.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties43 = new java.util.Properties();
        java.lang.String str44 = properties43.toString();
        java.lang.Object obj46 = properties43.remove((java.lang.Object) (short) 100);
        java.lang.Object obj49 = properties43.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj50 = properties43.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration51 = properties43.elements();
        properties31.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties43);
        java.lang.Object obj53 = properties0.putIfAbsent((java.lang.Object) properties9, (java.lang.Object) properties43);
        java.util.Properties properties54 = new java.util.Properties(properties0);
        java.util.Set<java.lang.Object> objSet55 = properties0.keySet();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet56 = properties0.entrySet();
        properties0.clear();
        java.util.Properties properties58 = new java.util.Properties();
        java.util.Properties properties59 = new java.util.Properties();
        java.lang.String str60 = properties59.toString();
        java.lang.Object obj62 = properties59.remove((java.lang.Object) (short) 100);
        java.lang.Object obj65 = properties59.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        int int66 = properties59.size();
        java.util.Properties properties67 = new java.util.Properties();
        java.lang.Object obj69 = properties67.remove((java.lang.Object) (-1.0d));
        boolean boolean70 = properties67.isEmpty();
        java.lang.Object obj73 = properties67.setProperty("hi!", "{}");
        boolean boolean74 = properties58.remove((java.lang.Object) int66, (java.lang.Object) properties67);
        java.util.Enumeration<java.lang.Object> objEnumeration75 = properties58.keys();
        java.lang.String str76 = properties58.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties77 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties78 = atomikosProperties77.asProperties();
        atomikosProperties77.service = "{-1.0=100}";
        long long81 = atomikosProperties77.getDefaultJtaTimeout();
        long long82 = atomikosProperties77.getMaxTimeout();
        int int83 = atomikosProperties77.consoleFileCount;
        long long84 = atomikosProperties77.getCheckpointInterval();
        atomikosProperties77.serialJtaTransactions = true;
        java.lang.String str87 = atomikosProperties77.logBaseName;
        java.util.Properties properties88 = new java.util.Properties();
        java.lang.Object obj90 = properties88.remove((java.lang.Object) (-1.0d));
        java.lang.Object obj91 = properties58.getOrDefault((java.lang.Object) str87, (java.lang.Object) (-1.0d));
        java.util.Enumeration<java.lang.Object> objEnumeration92 = properties58.elements();
        java.util.Collection<java.lang.Object> objCollection93 = properties58.values();
        java.lang.Object obj96 = properties58.setProperty("{0={100=100}, {}={}}", "{com.atomikos.icatch.{}=5}");
        boolean boolean97 = properties0.contains((java.lang.Object) "{0={100=100}, {}={}}");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{1.0=-1}");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "{}" + "'", str10, "{}");
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{}" + "'", str22, "{}");
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "{}" + "'", str32, "{}");
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "{}" + "'", str44, "{}");
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertEquals(obj50.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj50), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj50), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration51);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertNotNull(objSet55);
        org.junit.Assert.assertNotNull(objEntrySet56);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "{}" + "'", str60, "{}");
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNull(obj69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNull(obj73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(objEnumeration75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "{}" + "'", str76, "{}");
        org.junit.Assert.assertNotNull(properties78);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 10000L + "'", long81 == 10000L);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 300000L + "'", long82 == 300000L);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 500L + "'", long84 == 500L);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "tmlog" + "'", str87, "tmlog");
        org.junit.Assert.assertNull(obj90);
        org.junit.Assert.assertEquals("'" + obj91 + "' != '" + (-1.0d) + "'", obj91, (-1.0d));
        org.junit.Assert.assertNotNull(objEnumeration92);
        org.junit.Assert.assertNotNull(objCollection93);
        org.junit.Assert.assertNull(obj96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test08168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08168");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        java.util.Properties properties8 = new java.util.Properties();
        java.lang.String str9 = properties8.toString();
        java.lang.Object obj11 = properties8.remove((java.lang.Object) (short) 100);
        java.lang.Object obj14 = properties8.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj15 = properties8.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration16 = properties8.elements();
        java.lang.Object obj17 = properties0.putIfAbsent((java.lang.Object) 10.0f, (java.lang.Object) objEnumeration16);
        java.util.Set<java.lang.String> strSet18 = properties0.stringPropertyNames();
        java.util.Enumeration<java.lang.Object> objEnumeration19 = properties0.elements();
        java.io.Writer writer20 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.store(writer20, "{{1.0=-1, -1.0=100}={1.0=-1}, 1.0=-1}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{}" + "'", str9, "{}");
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration16);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNotNull(objEnumeration19);
    }

    @Test
    public void test08169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08169");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        int int7 = properties0.size();
        int int8 = properties0.size();
        java.util.Properties properties9 = new java.util.Properties();
        java.lang.String str10 = properties9.toString();
        java.lang.Object obj12 = properties9.remove((java.lang.Object) (short) 100);
        java.lang.Object obj15 = properties9.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean17 = properties9.containsKey((java.lang.Object) 0L);
        java.lang.Object obj20 = properties9.replace((java.lang.Object) false, (java.lang.Object) ' ');
        boolean boolean21 = properties9.isEmpty();
        boolean boolean22 = properties9.isEmpty();
        java.lang.Object obj23 = properties0.remove((java.lang.Object) properties9);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties25 = atomikosProperties24.asProperties();
        atomikosProperties24.service = "{-1.0=100}";
        long long28 = atomikosProperties24.getDefaultJtaTimeout();
        atomikosProperties24.enableLogging = false;
        atomikosProperties24.setMaxTimeout((long) (byte) 0);
        atomikosProperties24.setService("tm.out");
        atomikosProperties24.enableLogging = true;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties38 = atomikosProperties37.asProperties();
        atomikosProperties37.service = "{-1.0=100}";
        long long41 = atomikosProperties37.getDefaultJtaTimeout();
        atomikosProperties37.setThreadedTwoPhaseCommit(true);
        boolean boolean44 = atomikosProperties37.isAllowSubTransactions();
        boolean boolean45 = atomikosProperties37.isEnableLogging();
        atomikosProperties37.allowSubTransactions = false;
        atomikosProperties37.threadedTwoPhaseCommit = true;
        atomikosProperties37.setLogBaseName("tm.out");
        java.lang.String str52 = atomikosProperties37.getLogBaseDir();
        java.lang.String str53 = atomikosProperties37.outputDir;
        java.lang.Object obj54 = properties0.putIfAbsent((java.lang.Object) atomikosProperties24, (java.lang.Object) atomikosProperties37);
        atomikosProperties24.setLogBaseName("{com.atomikos.icatch.{}=5}");
        atomikosProperties24.setMaxTimeout((long) (byte) 10);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel59 = atomikosProperties24.getConsoleLogLevel();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "{}" + "'", str10, "{}");
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 10000L + "'", long28 == 10000L);
        org.junit.Assert.assertNotNull(properties38);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 10000L + "'", long41 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel59 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel59.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
    }

    @Test
    public void test08170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08170");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        long long7 = atomikosProperties0.getDefaultJtaTimeout();
        long long8 = atomikosProperties0.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery9 = atomikosProperties0.getRecovery();
        java.lang.String str10 = atomikosProperties0.outputDir;
        boolean boolean11 = atomikosProperties0.isSerialJtaTransactions();
        boolean boolean12 = atomikosProperties0.forceShutdownOnVmExit;
        long long13 = atomikosProperties0.getDefaultJtaTimeout();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(recovery9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10000L + "'", long13 == 10000L);
    }

    @Test
    public void test08171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08171");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.lang.Object obj5 = properties0.setProperty("", "{={-1.0=100}, -1.0=100}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties7 = atomikosProperties6.asProperties();
        atomikosProperties6.service = "{-1.0=100}";
        long long10 = atomikosProperties6.getDefaultJtaTimeout();
        atomikosProperties6.serialJtaTransactions = true;
        atomikosProperties6.maxActives = ' ';
        int int15 = atomikosProperties6.maxActives;
        java.util.Properties properties16 = new java.util.Properties();
        java.lang.String str17 = properties16.toString();
        java.lang.Object obj19 = properties16.remove((java.lang.Object) (short) 100);
        java.lang.Object obj22 = properties16.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        java.util.Properties properties24 = new java.util.Properties();
        java.lang.String str25 = properties24.toString();
        java.lang.Object obj27 = properties24.remove((java.lang.Object) (short) 100);
        java.lang.Object obj30 = properties24.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj31 = properties24.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration32 = properties24.elements();
        java.lang.Object obj33 = properties16.putIfAbsent((java.lang.Object) 10.0f, (java.lang.Object) objEnumeration32);
        java.lang.String str34 = properties16.toString();
        boolean boolean35 = properties0.remove((java.lang.Object) atomikosProperties6, (java.lang.Object) properties16);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet36 = properties16.entrySet();
        java.io.PrintWriter printWriter37 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties16.list(printWriter37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 32 + "'", int15 == 32);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "{}" + "'", str17, "{}");
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "{}" + "'", str25, "{}");
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertEquals(obj31.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration32);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objEntrySet36);
    }

    @Test
    public void test08172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08172");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj14 = properties0.setProperty("", "{-1.0=100}");
        java.lang.String str15 = properties0.toString();
        java.util.Set<java.lang.String> strSet16 = properties0.stringPropertyNames();
        java.util.Properties properties17 = new java.util.Properties(properties0);
        java.util.Set<java.lang.Object> objSet18 = properties17.keySet();
        int int19 = properties17.size();
        java.util.Properties properties20 = new java.util.Properties();
        java.lang.String str21 = properties20.toString();
        java.lang.Object obj23 = properties20.remove((java.lang.Object) (short) 100);
        java.lang.Object obj26 = properties20.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        java.util.Properties properties28 = new java.util.Properties();
        java.lang.String str29 = properties28.toString();
        java.lang.Object obj31 = properties28.remove((java.lang.Object) (short) 100);
        java.lang.Object obj34 = properties28.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj35 = properties28.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration36 = properties28.elements();
        java.lang.Object obj37 = properties20.putIfAbsent((java.lang.Object) 10.0f, (java.lang.Object) objEnumeration36);
        java.util.Properties properties38 = new java.util.Properties();
        java.util.Enumeration<?> wildcardEnumeration39 = properties38.propertyNames();
        java.lang.Object obj40 = properties38.clone();
        java.util.Properties properties41 = new java.util.Properties();
        java.lang.String str42 = properties41.toString();
        boolean boolean43 = properties41.isEmpty();
        java.lang.Object obj46 = properties41.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration47 = properties41.elements();
        java.lang.Object obj48 = properties20.put(obj40, (java.lang.Object) objEnumeration47);
        properties20.clear();
        java.util.Properties properties50 = new java.util.Properties();
        java.util.Properties properties51 = new java.util.Properties();
        java.lang.Object obj53 = properties51.remove((java.lang.Object) (-1.0d));
        int int54 = properties51.size();
        java.util.Enumeration<java.lang.Object> objEnumeration55 = properties51.elements();
        java.util.Properties properties56 = new java.util.Properties();
        properties56.clear();
        java.lang.String str58 = properties56.toString();
        boolean boolean59 = properties20.replace((java.lang.Object) properties50, (java.lang.Object) properties51, (java.lang.Object) str58);
        java.lang.String str61 = properties20.getProperty("");
        java.util.Collection<java.lang.Object> objCollection62 = properties20.values();
        java.lang.Object obj63 = properties17.get((java.lang.Object) objCollection62);
        java.lang.String str65 = properties17.getProperty("tm.out");
        boolean boolean66 = properties17.isEmpty();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{={-1.0=100}, -1.0=100}" + "'", str15, "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(objSet18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "{}" + "'", str21, "{}");
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "{}" + "'", str29, "{}");
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertEquals(obj35.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj35), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj35), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration36);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNotNull(wildcardEnumeration39);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertEquals(obj40.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "{}");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "{}" + "'", str42, "{}");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNotNull(objEnumeration47);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(objEnumeration55);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "{}" + "'", str58, "{}");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(objCollection62);
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
    }

    @Test
    public void test08173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08173");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.util.Properties properties7 = new java.util.Properties();
        java.lang.String str8 = properties7.toString();
        java.lang.Object obj10 = properties7.remove((java.lang.Object) (short) 100);
        java.lang.Object obj13 = properties7.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        int int14 = properties7.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery15 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery15.retryInterval = (short) 100;
        recovery15.forgetOrphanedLogEntriesDelay = 'a';
        long long20 = recovery15.retryInterval;
        recovery15.setForgetOrphanedLogEntriesDelay((long) 0);
        java.lang.Object obj23 = properties0.replace((java.lang.Object) int14, (java.lang.Object) recovery15);
        java.util.Enumeration<java.lang.Object> objEnumeration24 = properties0.elements();
        java.util.Enumeration<java.lang.Object> objEnumeration25 = properties0.elements();
        java.lang.String str28 = properties0.getProperty("{{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}=hi!}", "{{1.0=-1, -1.0=100}={1.0=-1}, 1.0=-1}");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{}" + "'", str8, "{}");
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 100L + "'", long20 == 100L);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNotNull(objEnumeration24);
        org.junit.Assert.assertNotNull(objEnumeration25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "{{1.0=-1, -1.0=100}={1.0=-1}, 1.0=-1}" + "'", str28, "{{1.0=-1, -1.0=100}={1.0=-1}, 1.0=-1}");
    }

    @Test
    public void test08174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08174");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        boolean boolean3 = properties0.containsValue((java.lang.Object) (-1L));
        java.lang.Object obj5 = properties0.get((java.lang.Object) 97L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties6.setAllowSubTransactions(true);
        atomikosProperties6.maxActives = (short) -1;
        atomikosProperties6.setCheckpointInterval((long) 0);
        int int13 = atomikosProperties6.getMaxActives();
        boolean boolean14 = properties0.contains((java.lang.Object) atomikosProperties6);
        java.util.Properties properties15 = new java.util.Properties();
        java.lang.String str16 = properties15.toString();
        java.lang.Object obj18 = properties15.remove((java.lang.Object) (short) 100);
        java.lang.Object obj21 = properties15.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties22.setEnableLogging(true);
        atomikosProperties22.consoleFileCount = 0;
        atomikosProperties22.setSerialJtaTransactions(false);
        java.lang.String str29 = atomikosProperties22.getOutputDir();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties31 = atomikosProperties30.asProperties();
        atomikosProperties30.service = "{-1.0=100}";
        long long34 = atomikosProperties30.getDefaultJtaTimeout();
        atomikosProperties30.serialJtaTransactions = true;
        long long37 = atomikosProperties30.getDefaultJtaTimeout();
        long long38 = atomikosProperties30.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery39 = atomikosProperties30.getRecovery();
        recovery39.setRetryInterval((long) (byte) 0);
        java.lang.Object obj42 = properties15.replace((java.lang.Object) atomikosProperties22, (java.lang.Object) (byte) 0);
        int int43 = properties15.size();
        java.util.Properties properties44 = new java.util.Properties(properties15);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet45 = properties44.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery46 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery46.retryInterval = (byte) 0;
        int int49 = recovery46.maxRetries;
        int int50 = recovery46.maxRetries;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties51 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties52 = atomikosProperties51.asProperties();
        atomikosProperties51.service = "{-1.0=100}";
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery55 = atomikosProperties51.recovery;
        atomikosProperties51.enableLogging = true;
        java.lang.String str58 = atomikosProperties51.logBaseName;
        atomikosProperties51.setTransactionManagerUniqueName("tmlog");
        boolean boolean61 = properties44.remove((java.lang.Object) int50, (java.lang.Object) atomikosProperties51);
        boolean boolean62 = properties0.containsKey((java.lang.Object) boolean61);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{}" + "'", str16, "{}");
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(properties31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 10000L + "'", long34 == 10000L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 10000L + "'", long37 == 10000L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 500L + "'", long38 == 500L);
        org.junit.Assert.assertNotNull(recovery39);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(objEntrySet45);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 5 + "'", int49 == 5);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 5 + "'", int50 == 5);
        org.junit.Assert.assertNotNull(properties52);
        org.junit.Assert.assertNotNull(recovery55);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "tmlog" + "'", str58, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test08175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08175");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.remove((java.lang.Object) (-1.0d));
        boolean boolean3 = properties0.isEmpty();
        java.util.Properties properties4 = new java.util.Properties();
        java.lang.String str5 = properties4.toString();
        java.lang.Object obj7 = properties4.remove((java.lang.Object) (short) 100);
        java.lang.Object obj10 = properties4.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean12 = properties4.containsKey((java.lang.Object) 0L);
        java.lang.Object obj15 = properties4.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj18 = properties4.setProperty("", "{-1.0=100}");
        java.lang.Object obj19 = properties4.clone();
        java.lang.Object obj20 = properties0.get((java.lang.Object) properties4);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties21.setEnableLogging(true);
        atomikosProperties21.consoleFileCount = 0;
        int int26 = atomikosProperties21.getMaxActives();
        java.lang.String str27 = atomikosProperties21.getLogBaseDir();
        java.lang.String str28 = atomikosProperties21.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery29 = atomikosProperties21.getRecovery();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties31 = atomikosProperties30.asProperties();
        atomikosProperties30.service = "{-1.0=100}";
        long long34 = atomikosProperties30.getDefaultJtaTimeout();
        atomikosProperties30.setThreadedTwoPhaseCommit(true);
        boolean boolean37 = atomikosProperties30.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery38 = atomikosProperties30.recovery;
        atomikosProperties30.setLogBaseDir("");
        java.lang.Object obj41 = properties4.replace((java.lang.Object) recovery29, (java.lang.Object) "");
        java.util.Properties properties42 = new java.util.Properties();
        java.lang.Object obj44 = properties42.remove((java.lang.Object) (-1.0d));
        boolean boolean46 = properties42.contains((java.lang.Object) "{-1.0=100}");
        boolean boolean47 = properties4.equals((java.lang.Object) "{-1.0=100}");
        java.util.Enumeration<java.lang.Object> objEnumeration48 = properties4.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery49 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long50 = recovery49.getRetryInterval();
        long long51 = recovery49.getDelay();
        long long52 = recovery49.getDelay();
        recovery49.setForgetOrphanedLogEntriesDelay(10000L);
        recovery49.retryInterval = '4';
        recovery49.setRetryInterval((long) (short) 0);
        boolean boolean59 = properties4.containsKey((java.lang.Object) recovery49);
        recovery49.maxRetries = 0;
        recovery49.forgetOrphanedLogEntriesDelay = 52L;
        int int64 = recovery49.getMaxRetries();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{}" + "'", str5, "{}");
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(obj19);
// flaky:         org.junit.Assert.assertEquals(obj19.toString(), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 50 + "'", int26 == 50);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(recovery29);
        org.junit.Assert.assertNotNull(properties31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 10000L + "'", long34 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(recovery38);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(objEnumeration48);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 10000L + "'", long50 == 10000L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 10000L + "'", long51 == 10000L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 10000L + "'", long52 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
    }

    @Test
    public void test08176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08176");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        java.util.Properties properties8 = new java.util.Properties();
        java.lang.String str9 = properties8.toString();
        java.lang.Object obj11 = properties8.remove((java.lang.Object) (short) 100);
        java.lang.Object obj14 = properties8.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj15 = properties8.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration16 = properties8.elements();
        java.lang.Object obj17 = properties0.putIfAbsent((java.lang.Object) 10.0f, (java.lang.Object) objEnumeration16);
        java.util.Properties properties18 = new java.util.Properties();
        java.util.Enumeration<?> wildcardEnumeration19 = properties18.propertyNames();
        java.lang.Object obj20 = properties18.clone();
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.String str22 = properties21.toString();
        boolean boolean23 = properties21.isEmpty();
        java.lang.Object obj26 = properties21.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties21.elements();
        java.lang.Object obj28 = properties0.put(obj20, (java.lang.Object) objEnumeration27);
        properties0.clear();
        java.lang.String str30 = properties0.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties32 = atomikosProperties31.asProperties();
        atomikosProperties31.service = "{-1.0=100}";
        long long35 = atomikosProperties31.getDefaultJtaTimeout();
        atomikosProperties31.serialJtaTransactions = true;
        atomikosProperties31.maxActives = ' ';
        int int40 = atomikosProperties31.getConsoleFileCount();
        boolean boolean41 = properties0.equals((java.lang.Object) atomikosProperties31);
        java.lang.Object obj42 = properties0.clone();
        java.util.Enumeration<?> wildcardEnumeration43 = properties0.propertyNames();
        boolean boolean44 = properties0.isEmpty();
        java.util.Properties properties45 = new java.util.Properties();
        java.util.Properties properties46 = new java.util.Properties(properties45);
        java.util.Enumeration<java.lang.Object> objEnumeration47 = properties46.elements();
        java.util.Properties properties48 = new java.util.Properties();
        java.lang.String str49 = properties48.toString();
        java.lang.Object obj51 = properties48.remove((java.lang.Object) (short) 100);
        java.lang.Object obj54 = properties48.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean56 = properties48.containsKey((java.lang.Object) 0L);
        java.lang.Object obj59 = properties48.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj62 = properties48.setProperty("", "{-1.0=100}");
        boolean boolean63 = properties48.isEmpty();
        java.util.Properties properties64 = new java.util.Properties();
        java.lang.String str65 = properties64.toString();
        java.util.Properties properties66 = new java.util.Properties(properties64);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet67 = properties66.entrySet();
        java.util.Properties properties69 = new java.util.Properties();
        java.lang.Object obj71 = properties69.remove((java.lang.Object) (-1.0d));
        int int72 = properties69.size();
        boolean boolean73 = properties48.replace((java.lang.Object) properties66, (java.lang.Object) 100L, (java.lang.Object) properties69);
        boolean boolean74 = properties48.isEmpty();
        java.util.Set<java.lang.Object> objSet75 = properties48.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties76 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties77 = atomikosProperties76.asProperties();
        atomikosProperties76.service = "{-1.0=100}";
        long long80 = atomikosProperties76.getDefaultJtaTimeout();
        long long81 = atomikosProperties76.getMaxTimeout();
        int int82 = atomikosProperties76.consoleFileCount;
        java.lang.String str83 = atomikosProperties76.getOutputDir();
        boolean boolean84 = properties46.remove((java.lang.Object) properties48, (java.lang.Object) atomikosProperties76);
        boolean boolean85 = atomikosProperties76.enableLogging;
        int int86 = atomikosProperties76.consoleFileLimit;
        java.lang.Object obj87 = properties0.remove((java.lang.Object) atomikosProperties76);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{}" + "'", str9, "{}");
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration16);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(wildcardEnumeration19);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{}");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{}" + "'", str22, "{}");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "{}" + "'", str30, "{}");
        org.junit.Assert.assertNotNull(properties32);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 10000L + "'", long35 == 10000L);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "{}");
        org.junit.Assert.assertNotNull(wildcardEnumeration43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(objEnumeration47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "{}" + "'", str49, "{}");
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "{}" + "'", str65, "{}");
        org.junit.Assert.assertNotNull(objEntrySet67);
        org.junit.Assert.assertNull(obj71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(objSet75);
        org.junit.Assert.assertNotNull(properties77);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 10000L + "'", long80 == 10000L);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 300000L + "'", long81 == 300000L);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertNull(obj87);
    }

    @Test
    public void test08177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08177");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        atomikosProperties0.setConsoleFileCount((int) (byte) 100);
        atomikosProperties0.setAllowSubTransactions(true);
        atomikosProperties0.setService("tm.out");
        atomikosProperties0.setSerialJtaTransactions(true);
        java.util.Properties properties14 = atomikosProperties0.asProperties();
        java.lang.String str15 = atomikosProperties0.logBaseName;
        boolean boolean16 = atomikosProperties0.enableLogging;
        atomikosProperties0.allowSubTransactions = false;
        atomikosProperties0.consoleFileName = "{com.atomikos.icatch.{}=5}";
        java.lang.String str21 = atomikosProperties0.getConsoleFileName();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{-1.0=100}" + "'", str15, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "{com.atomikos.icatch.{}=5}" + "'", str21, "{com.atomikos.icatch.{}=5}");
    }

    @Test
    public void test08178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08178");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        long long7 = atomikosProperties0.maxTimeout;
        atomikosProperties0.setLogBaseDir("{-1.0=100}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.setAllowSubTransactions(true);
        atomikosProperties10.maxActives = (short) -1;
        atomikosProperties10.setService("tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties17.setAllowSubTransactions(true);
        boolean boolean20 = atomikosProperties17.enableLogging;
        boolean boolean21 = atomikosProperties17.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel22 = atomikosProperties17.consoleLogLevel;
        atomikosProperties10.setConsoleLogLevel(atomikosLoggingLevel22);
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel22;
        atomikosProperties0.setConsoleFileCount((int) (byte) 0);
        java.lang.String str27 = atomikosProperties0.logBaseDir;
        long long28 = atomikosProperties0.getMaxTimeout();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel22 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel22.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "{-1.0=100}" + "'", str27, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 300000L + "'", long28 == 300000L);
    }

    @Test
    public void test08179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08179");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj14 = properties0.setProperty("", "{-1.0=100}");
        java.lang.String str15 = properties0.toString();
        java.util.Set<java.lang.String> strSet16 = properties0.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties18 = atomikosProperties17.asProperties();
        atomikosProperties17.service = "{-1.0=100}";
        long long21 = atomikosProperties17.getDefaultJtaTimeout();
        atomikosProperties17.enableLogging = false;
        atomikosProperties17.setMaxTimeout((long) (byte) 0);
        atomikosProperties17.setAllowSubTransactions(true);
        java.util.Properties properties28 = new java.util.Properties();
        java.lang.Object obj30 = properties28.remove((java.lang.Object) (-1.0d));
        boolean boolean31 = properties28.isEmpty();
        java.util.Collection<java.lang.Object> objCollection32 = properties28.values();
        java.lang.Object obj33 = properties0.put((java.lang.Object) true, (java.lang.Object) properties28);
        java.util.Collection<java.lang.Object> objCollection34 = properties28.values();
        java.lang.Object obj37 = properties28.setProperty("", "{1.0=-1}");
        java.util.Properties properties38 = new java.util.Properties();
        java.lang.String str39 = properties38.toString();
        java.lang.Object obj41 = properties38.remove((java.lang.Object) (short) 100);
        java.lang.Object obj44 = properties38.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean46 = properties38.containsKey((java.lang.Object) 0L);
        java.lang.Object obj49 = properties38.replace((java.lang.Object) false, (java.lang.Object) ' ');
        boolean boolean50 = properties38.isEmpty();
        boolean boolean51 = properties38.isEmpty();
        properties28.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties38);
        java.io.InputStream inputStream53 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties28.load(inputStream53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{={-1.0=100}, -1.0=100}" + "'", str15, "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10000L + "'", long21 == 10000L);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objCollection32);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNotNull(objCollection34);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "{}" + "'", str39, "{}");
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test08180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08180");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        java.util.Properties properties8 = new java.util.Properties();
        java.lang.String str9 = properties8.toString();
        java.lang.Object obj11 = properties8.remove((java.lang.Object) (short) 100);
        java.lang.Object obj14 = properties8.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj15 = properties8.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration16 = properties8.elements();
        java.lang.Object obj17 = properties0.putIfAbsent((java.lang.Object) 10.0f, (java.lang.Object) objEnumeration16);
        java.util.Enumeration<java.lang.Object> objEnumeration18 = properties0.keys();
        java.util.Properties properties19 = new java.util.Properties();
        java.lang.Object obj21 = properties19.remove((java.lang.Object) (-1.0d));
        boolean boolean22 = properties19.isEmpty();
        int int23 = properties19.size();
        java.lang.String str25 = properties19.getProperty("{}");
        java.util.Enumeration<java.lang.Object> objEnumeration26 = properties19.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties27.setEnableLogging(true);
        atomikosProperties27.consoleFileCount = 0;
        int int32 = atomikosProperties27.getMaxActives();
        atomikosProperties27.setTransactionManagerUniqueName("tmlog");
        atomikosProperties27.setEnableLogging(true);
        boolean boolean37 = atomikosProperties27.threadedTwoPhaseCommit;
        boolean boolean38 = atomikosProperties27.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties39 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties40 = atomikosProperties39.asProperties();
        atomikosProperties39.service = "{-1.0=100}";
        long long43 = atomikosProperties39.getDefaultJtaTimeout();
        atomikosProperties39.outputDir = "{={-1.0=100}, -1.0=100}";
        long long46 = atomikosProperties39.getCheckpointInterval();
        boolean boolean47 = atomikosProperties39.isThreadedTwoPhaseCommit();
        java.lang.Object obj48 = properties19.putIfAbsent((java.lang.Object) atomikosProperties27, (java.lang.Object) atomikosProperties39);
        atomikosProperties39.logBaseDir = "{100=100}";
        boolean boolean51 = properties0.containsKey((java.lang.Object) atomikosProperties39);
        java.lang.String str53 = properties0.getProperty("{tmlog=hi!, com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties54 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties54.setAllowSubTransactions(true);
        atomikosProperties54.logBaseName = "{={-1.0=100}, -1.0=100}";
        java.lang.String str59 = atomikosProperties54.logBaseDir;
        java.lang.String str60 = atomikosProperties54.consoleFileName;
        atomikosProperties54.setMaxActives(32);
        boolean boolean63 = properties0.containsKey((java.lang.Object) atomikosProperties54);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{}" + "'", str9, "{}");
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration16);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(objEnumeration18);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(objEnumeration26);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 50 + "'", int32 == 50);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(properties40);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 10000L + "'", long43 == 10000L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 500L + "'", long46 == 500L);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "tm.out" + "'", str60, "tm.out");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test08181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08181");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        atomikosProperties0.maxActives = ' ';
        int int9 = atomikosProperties0.getConsoleFileCount();
        int int10 = atomikosProperties0.consoleFileLimit;
        java.util.Properties properties11 = atomikosProperties0.asProperties();
        long long12 = atomikosProperties0.defaultJtaTimeout;
        java.lang.String str13 = atomikosProperties0.getLogBaseDir();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery14 = atomikosProperties0.getRecovery();
        long long15 = atomikosProperties0.maxTimeout;
        long long16 = atomikosProperties0.getDefaultJtaTimeout();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10000L + "'", long12 == 10000L);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(recovery14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 300000L + "'", long15 == 300000L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10000L + "'", long16 == 10000L);
    }

    @Test
    public void test08182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08182");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        boolean boolean5 = atomikosProperties0.enableLogging;
        boolean boolean6 = atomikosProperties0.isForceShutdownOnVmExit();
        boolean boolean7 = atomikosProperties0.allowSubTransactions;
        atomikosProperties0.setCheckpointInterval((long) (byte) 100);
        java.lang.String str10 = atomikosProperties0.getOutputDir();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test08183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08183");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.remove((java.lang.Object) (-1.0d));
        boolean boolean3 = properties0.isEmpty();
        int int4 = properties0.size();
        java.lang.String str6 = properties0.getProperty("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean8 = atomikosProperties7.isSerialJtaTransactions();
        atomikosProperties7.logBaseName = "{-1.0=100}";
        int int11 = atomikosProperties7.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery12 = atomikosProperties7.getRecovery();
        atomikosProperties7.setConsoleFileCount((int) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel15 = null;
        atomikosProperties7.consoleLogLevel = atomikosLoggingLevel15;
        java.lang.String str17 = atomikosProperties7.logBaseDir;
        atomikosProperties7.checkpointInterval = (byte) 0;
        java.lang.String str20 = atomikosProperties7.getTransactionManagerUniqueName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties22 = atomikosProperties21.asProperties();
        java.util.Properties properties23 = new java.util.Properties();
        java.lang.Object obj25 = properties23.remove((java.lang.Object) (-1.0d));
        boolean boolean26 = properties23.isEmpty();
        int int27 = properties23.size();
        java.lang.String str29 = properties23.getProperty("{}");
        java.lang.Object obj30 = properties22.remove((java.lang.Object) properties23);
        java.util.Properties properties31 = new java.util.Properties();
        java.lang.String str32 = properties31.toString();
        java.util.Properties properties33 = new java.util.Properties(properties31);
        properties22.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties31);
        java.lang.Object obj35 = properties0.getOrDefault((java.lang.Object) atomikosProperties7, (java.lang.Object) properties31);
        atomikosProperties7.forceShutdownOnVmExit = false;
        boolean boolean38 = atomikosProperties7.isAllowSubTransactions();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 50 + "'", int11 == 50);
        org.junit.Assert.assertNotNull(recovery12);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(properties22);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "{}" + "'", str32, "{}");
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertEquals(obj35.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj35), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj35), "{}");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test08184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08184");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        atomikosProperties0.setConsoleFileCount((int) (byte) 100);
        atomikosProperties0.setAllowSubTransactions(true);
        atomikosProperties0.setService("tm.out");
        int int12 = atomikosProperties0.consoleFileLimit;
        atomikosProperties0.setDefaultJtaTimeout((long) ' ');
        java.lang.String str15 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setEnableLogging(false);
        atomikosProperties0.serialJtaTransactions = true;
        int int20 = atomikosProperties0.getConsoleFileCount();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
    }

    @Test
    public void test08185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08185");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        atomikosProperties0.setLogBaseName("{}");
        atomikosProperties0.logBaseName = "{100=100}";
        boolean boolean11 = atomikosProperties0.allowSubTransactions;
        java.lang.String str12 = atomikosProperties0.getLogBaseDir();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery13 = atomikosProperties0.getRecovery();
        java.lang.String str14 = atomikosProperties0.service;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(recovery13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "{-1.0=100}" + "'", str14, "{-1.0=100}");
    }

    @Test
    public void test08186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08186");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        boolean boolean5 = properties0.containsKey((java.lang.Object) 0L);
        java.util.Properties properties6 = new java.util.Properties();
        java.lang.String str7 = properties6.toString();
        java.util.Properties properties8 = new java.util.Properties(properties6);
        java.util.Properties properties9 = new java.util.Properties();
        java.lang.String str10 = properties9.toString();
        java.lang.Object obj12 = properties9.remove((java.lang.Object) (short) 100);
        java.lang.Object obj15 = properties9.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean17 = properties9.containsKey((java.lang.Object) 0L);
        java.lang.Object obj20 = properties9.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj23 = properties9.setProperty("", "{-1.0=100}");
        java.util.Enumeration<java.lang.Object> objEnumeration24 = properties9.keys();
        java.util.Properties properties25 = new java.util.Properties();
        java.lang.String str26 = properties25.toString();
        boolean boolean27 = properties25.isEmpty();
        java.lang.Object obj30 = properties25.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration31 = properties25.elements();
        java.lang.Object obj32 = properties8.replace((java.lang.Object) objEnumeration24, (java.lang.Object) properties25);
        java.util.Enumeration<java.lang.Object> objEnumeration33 = properties25.elements();
        java.util.Properties properties34 = new java.util.Properties();
        java.lang.String str35 = properties34.toString();
        boolean boolean36 = properties34.isEmpty();
        java.lang.Object obj39 = properties34.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Properties properties40 = new java.util.Properties();
        java.lang.String str41 = properties40.toString();
        java.lang.Object obj43 = properties40.remove((java.lang.Object) (short) 100);
        java.lang.Object obj46 = properties40.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean48 = properties40.containsKey((java.lang.Object) 0L);
        java.lang.Object obj51 = properties40.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties52 = new java.util.Properties(properties40);
        boolean boolean53 = properties34.containsValue((java.lang.Object) properties40);
        java.util.Properties properties54 = new java.util.Properties();
        java.lang.String str55 = properties54.toString();
        java.lang.Object obj57 = properties54.remove((java.lang.Object) (short) 100);
        java.lang.Object obj60 = properties54.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean62 = properties54.containsKey((java.lang.Object) 0L);
        java.lang.Object obj65 = properties54.replace((java.lang.Object) false, (java.lang.Object) ' ');
        boolean boolean66 = properties54.isEmpty();
        boolean boolean67 = properties0.replace((java.lang.Object) properties25, (java.lang.Object) properties34, (java.lang.Object) properties54);
        java.io.OutputStream outputStream68 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties25.storeToXML(outputStream68, "{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "{}" + "'", str7, "{}");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "{}" + "'", str10, "{}");
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNotNull(objEnumeration24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "{}" + "'", str26, "{}");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNotNull(objEnumeration31);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNotNull(objEnumeration33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "{}" + "'", str35, "{}");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "{}" + "'", str41, "{}");
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "{}" + "'", str55, "{}");
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test08187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08187");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setEnableLogging(true);
        atomikosProperties12.setConsoleFileLimit((int) (short) 0);
        boolean boolean17 = properties0.contains((java.lang.Object) atomikosProperties12);
        java.util.Properties properties18 = new java.util.Properties();
        java.lang.String str19 = properties18.toString();
        java.util.Properties properties20 = new java.util.Properties(properties18);
        java.util.Set<java.lang.String> strSet21 = properties20.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties23 = atomikosProperties22.asProperties();
        atomikosProperties22.service = "{-1.0=100}";
        long long26 = atomikosProperties22.getDefaultJtaTimeout();
        atomikosProperties22.enableLogging = false;
        atomikosProperties22.setMaxTimeout((long) (byte) 0);
        atomikosProperties22.setAllowSubTransactions(true);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties34 = atomikosProperties33.asProperties();
        atomikosProperties33.service = "{-1.0=100}";
        java.lang.String str37 = atomikosProperties33.getTransactionManagerUniqueName();
        boolean boolean38 = atomikosProperties33.isSerialJtaTransactions();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel39 = atomikosProperties33.getConsoleLogLevel();
        atomikosProperties22.consoleLogLevel = atomikosLoggingLevel39;
        long long41 = atomikosProperties22.checkpointInterval;
        atomikosProperties22.service = "tm.out";
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties45 = atomikosProperties44.asProperties();
        atomikosProperties44.service = "{-1.0=100}";
        java.lang.String str48 = atomikosProperties44.getLogBaseName();
        long long49 = atomikosProperties44.defaultJtaTimeout;
        long long50 = atomikosProperties44.getMaxTimeout();
        boolean boolean51 = atomikosProperties44.forceShutdownOnVmExit;
        atomikosProperties44.setService("{-1.0=100}");
        atomikosProperties44.setOutputDir("{}");
        boolean boolean56 = properties0.replace((java.lang.Object) properties20, (java.lang.Object) "tm.out", (java.lang.Object) atomikosProperties44);
        java.util.Properties properties57 = new java.util.Properties(properties0);
        java.util.Properties properties58 = new java.util.Properties();
        java.lang.Object obj60 = properties58.remove((java.lang.Object) (-1.0d));
        boolean boolean62 = properties58.contains((java.lang.Object) "{-1.0=100}");
        java.lang.Object obj65 = properties58.setProperty("{={-1.0=100}, -1.0=100}", "");
        java.lang.Object obj68 = properties58.setProperty("tm.out", "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties69 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties70 = atomikosProperties69.asProperties();
        atomikosProperties69.service = "{-1.0=100}";
        long long73 = atomikosProperties69.getDefaultJtaTimeout();
        atomikosProperties69.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties69.setMaxActives(100);
        boolean boolean78 = atomikosProperties69.enableLogging;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery79 = atomikosProperties69.recovery;
        atomikosProperties69.setConsoleFileLimit(100);
        boolean boolean82 = atomikosProperties69.enableLogging;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery83 = atomikosProperties69.getRecovery();
        java.lang.Object obj84 = properties57.putIfAbsent((java.lang.Object) properties58, (java.lang.Object) recovery83);
        java.util.Enumeration<java.lang.Object> objEnumeration85 = properties58.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties86 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties87 = atomikosProperties86.asProperties();
        atomikosProperties86.service = "{-1.0=100}";
        java.lang.String str90 = atomikosProperties86.getTransactionManagerUniqueName();
        atomikosProperties86.consoleFileLimit = (byte) 10;
        long long93 = atomikosProperties86.getMaxTimeout();
        boolean boolean94 = atomikosProperties86.allowSubTransactions;
        atomikosProperties86.serialJtaTransactions = true;
        boolean boolean97 = properties58.contains((java.lang.Object) atomikosProperties86);
        atomikosProperties86.outputDir = "{{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}=, ={-1.0=100}, -1.0=100}";
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "{}" + "'", str19, "{}");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(properties23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 10000L + "'", long26 == 10000L);
        org.junit.Assert.assertNotNull(properties34);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel39 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel39.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 500L + "'", long41 == 500L);
        org.junit.Assert.assertNotNull(properties45);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "tmlog" + "'", str48, "tmlog");
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 10000L + "'", long49 == 10000L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 300000L + "'", long50 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertNull(obj68);
        org.junit.Assert.assertNotNull(properties70);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 10000L + "'", long73 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(recovery79);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(recovery83);
        org.junit.Assert.assertNull(obj84);
        org.junit.Assert.assertNotNull(objEnumeration85);
        org.junit.Assert.assertNotNull(properties87);
        org.junit.Assert.assertNull(str90);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 300000L + "'", long93 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test08188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08188");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.util.Properties properties3 = new java.util.Properties();
        java.lang.String str4 = properties3.toString();
        java.lang.Object obj6 = properties3.remove((java.lang.Object) (short) 100);
        java.lang.Object obj9 = properties3.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean11 = properties3.containsKey((java.lang.Object) 0L);
        java.lang.Object obj14 = properties3.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj17 = properties3.setProperty("", "{-1.0=100}");
        java.util.Enumeration<java.lang.Object> objEnumeration18 = properties3.keys();
        java.util.Properties properties19 = new java.util.Properties();
        java.lang.String str20 = properties19.toString();
        boolean boolean21 = properties19.isEmpty();
        java.lang.Object obj24 = properties19.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration25 = properties19.elements();
        java.lang.Object obj26 = properties2.replace((java.lang.Object) objEnumeration18, (java.lang.Object) properties19);
        java.util.Properties properties27 = new java.util.Properties();
        java.lang.String str28 = properties27.toString();
        java.lang.Object obj30 = properties27.remove((java.lang.Object) (short) 100);
        java.lang.Object obj33 = properties27.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj34 = properties27.clone();
        java.util.Set<java.lang.String> strSet35 = properties27.stringPropertyNames();
        java.util.Properties properties36 = new java.util.Properties();
        java.lang.String str37 = properties36.toString();
        java.lang.Object obj39 = properties36.remove((java.lang.Object) (short) 100);
        java.lang.Object obj42 = properties36.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean44 = properties36.containsKey((java.lang.Object) 0L);
        java.lang.Object obj47 = properties36.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties48 = new java.util.Properties();
        java.lang.String str49 = properties48.toString();
        java.lang.Object obj51 = properties48.remove((java.lang.Object) (short) 100);
        java.lang.Object obj54 = properties48.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj55 = properties48.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration56 = properties48.elements();
        properties36.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties48);
        java.util.Properties properties58 = new java.util.Properties();
        java.lang.String str59 = properties58.toString();
        java.lang.Object obj61 = properties58.remove((java.lang.Object) (short) 100);
        java.lang.Object obj64 = properties58.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean66 = properties58.containsKey((java.lang.Object) 0L);
        java.lang.Object obj69 = properties58.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties70 = new java.util.Properties();
        java.lang.String str71 = properties70.toString();
        java.lang.Object obj73 = properties70.remove((java.lang.Object) (short) 100);
        java.lang.Object obj76 = properties70.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj77 = properties70.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration78 = properties70.elements();
        properties58.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties70);
        java.lang.Object obj80 = properties27.putIfAbsent((java.lang.Object) properties36, (java.lang.Object) properties70);
        java.lang.Object obj82 = properties2.getOrDefault((java.lang.Object) properties70, (java.lang.Object) (short) 10);
        java.util.Set<java.lang.String> strSet83 = properties2.stringPropertyNames();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet84 = properties2.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties85 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties86 = atomikosProperties85.asProperties();
        atomikosProperties85.service = "{-1.0=100}";
        long long89 = atomikosProperties85.getDefaultJtaTimeout();
        long long90 = atomikosProperties85.getMaxTimeout();
        java.lang.String str91 = atomikosProperties85.outputDir;
        atomikosProperties85.consoleFileName = "tm.out";
        boolean boolean94 = atomikosProperties85.forceShutdownOnVmExit;
        atomikosProperties85.logBaseName = "tm.out";
        atomikosProperties85.threadedTwoPhaseCommit = false;
        java.lang.Object obj99 = properties2.get((java.lang.Object) false);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{}" + "'", str4, "{}");
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(objEnumeration18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{}" + "'", str20, "{}");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(objEnumeration25);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "{}" + "'", str28, "{}");
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "{1.0=-1}");
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "{}" + "'", str37, "{}");
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "{}" + "'", str49, "{}");
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertEquals(obj55.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj55), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj55), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration56);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "{}" + "'", str59, "{}");
        org.junit.Assert.assertNull(obj61);
        org.junit.Assert.assertNull(obj64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(obj69);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "{}" + "'", str71, "{}");
        org.junit.Assert.assertNull(obj73);
        org.junit.Assert.assertNull(obj76);
        org.junit.Assert.assertNotNull(obj77);
        org.junit.Assert.assertEquals(obj77.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj77), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj77), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration78);
        org.junit.Assert.assertNull(obj80);
        org.junit.Assert.assertEquals("'" + obj82 + "' != '" + (short) 10 + "'", obj82, (short) 10);
        org.junit.Assert.assertNotNull(strSet83);
        org.junit.Assert.assertNotNull(objEntrySet84);
        org.junit.Assert.assertNotNull(properties86);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 10000L + "'", long89 == 10000L);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 300000L + "'", long90 == 300000L);
        org.junit.Assert.assertNull(str91);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNull(obj99);
    }

    @Test
    public void test08189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08189");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        java.util.Properties properties8 = new java.util.Properties();
        java.lang.String str9 = properties8.toString();
        java.lang.Object obj11 = properties8.remove((java.lang.Object) (short) 100);
        java.lang.Object obj14 = properties8.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj15 = properties8.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration16 = properties8.elements();
        java.lang.Object obj17 = properties0.putIfAbsent((java.lang.Object) 10.0f, (java.lang.Object) objEnumeration16);
        java.lang.String str18 = properties0.toString();
        java.lang.String str20 = properties0.getProperty("hi!");
        boolean boolean21 = properties0.isEmpty();
        java.util.Properties properties22 = new java.util.Properties(properties0);
        java.lang.Object obj23 = properties22.clone();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{}" + "'", str9, "{}");
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration16);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "{}");
    }

    @Test
    public void test08190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08190");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        boolean boolean2 = properties0.isEmpty();
        java.util.Properties properties3 = new java.util.Properties();
        java.lang.String str4 = properties3.toString();
        java.lang.Object obj6 = properties3.remove((java.lang.Object) (short) 100);
        java.lang.Object obj9 = properties3.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean11 = properties3.containsKey((java.lang.Object) 0L);
        boolean boolean12 = properties0.containsValue((java.lang.Object) 0L);
        java.util.Set<java.lang.String> strSet13 = properties0.stringPropertyNames();
        boolean boolean14 = properties0.isEmpty();
        java.util.Properties properties15 = new java.util.Properties();
        java.lang.String str16 = properties15.toString();
        java.lang.Object obj18 = properties15.remove((java.lang.Object) (short) 100);
        java.lang.Object obj21 = properties15.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties23 = atomikosProperties22.asProperties();
        java.lang.Object obj24 = properties15.remove((java.lang.Object) properties23);
        java.util.Properties properties25 = new java.util.Properties(properties23);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties27 = atomikosProperties26.asProperties();
        atomikosProperties26.service = "{-1.0=100}";
        long long30 = atomikosProperties26.getDefaultJtaTimeout();
        atomikosProperties26.setThreadedTwoPhaseCommit(true);
        boolean boolean33 = atomikosProperties26.isAllowSubTransactions();
        boolean boolean34 = atomikosProperties26.isEnableLogging();
        atomikosProperties26.allowSubTransactions = false;
        atomikosProperties26.threadedTwoPhaseCommit = true;
        atomikosProperties26.setLogBaseName("tm.out");
        long long41 = atomikosProperties26.defaultJtaTimeout;
        int int42 = atomikosProperties26.consoleFileLimit;
        java.lang.String str43 = atomikosProperties26.getTransactionManagerUniqueName();
        atomikosProperties26.service = "{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}";
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties46 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties47 = atomikosProperties46.asProperties();
        atomikosProperties46.service = "{-1.0=100}";
        java.lang.String str50 = atomikosProperties46.getLogBaseName();
        java.lang.String str51 = atomikosProperties46.transactionManagerUniqueName;
        atomikosProperties46.consoleFileName = "";
        java.lang.Object obj54 = properties23.putIfAbsent((java.lang.Object) atomikosProperties26, (java.lang.Object) "");
        boolean boolean55 = properties0.containsValue((java.lang.Object) "");
        java.util.Set<java.lang.Object> objSet56 = properties0.keySet();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{}" + "'", str4, "{}");
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{}" + "'", str16, "{}");
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNotNull(properties23);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(properties27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 10000L + "'", long30 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 10000L + "'", long41 == 10000L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(properties47);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "tmlog" + "'", str50, "tmlog");
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(objSet56);
    }

    @Test
    public void test08191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08191");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj7 = properties0.clone();
        java.lang.String str9 = properties0.getProperty("{}");
        java.util.Properties properties10 = new java.util.Properties();
        java.lang.Object obj12 = properties10.remove((java.lang.Object) (-1.0d));
        boolean boolean13 = properties10.isEmpty();
        java.util.Collection<java.lang.Object> objCollection14 = properties10.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties16 = atomikosProperties15.asProperties();
        atomikosProperties15.service = "{-1.0=100}";
        long long19 = atomikosProperties15.getDefaultJtaTimeout();
        atomikosProperties15.serialJtaTransactions = true;
        long long22 = atomikosProperties15.getDefaultJtaTimeout();
        long long23 = atomikosProperties15.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery24 = atomikosProperties15.getRecovery();
        long long25 = recovery24.delay;
        int int26 = recovery24.maxRetries;
        java.lang.Object obj27 = properties10.get((java.lang.Object) int26);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties29.setAllowSubTransactions(true);
        boolean boolean32 = atomikosProperties29.enableLogging;
        atomikosProperties29.consoleFileLimit = (byte) 100;
        java.util.Properties properties35 = new java.util.Properties();
        java.lang.String str36 = properties35.toString();
        java.util.Properties properties37 = new java.util.Properties(properties35);
        java.util.Properties properties39 = new java.util.Properties();
        java.lang.String str40 = properties39.toString();
        java.lang.Object obj42 = properties39.remove((java.lang.Object) (short) 100);
        java.lang.Object obj45 = properties39.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean47 = properties39.containsKey((java.lang.Object) 0L);
        java.lang.Object obj50 = properties39.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties51 = new java.util.Properties(properties39);
        java.util.Enumeration<java.lang.Object> objEnumeration52 = properties51.elements();
        atomikosProperties29.set(properties37, "{={-1.0=100}, -1.0=100}", (java.lang.Object) properties51);
        int int54 = properties37.size();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet55 = properties37.entrySet();
        java.util.Collection<java.lang.Object> objCollection56 = properties37.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties57 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties58 = atomikosProperties57.asProperties();
        atomikosProperties57.service = "{-1.0=100}";
        java.lang.String str61 = atomikosProperties57.getTransactionManagerUniqueName();
        atomikosProperties57.consoleFileLimit = (byte) 10;
        atomikosProperties57.consoleFileName = "hi!";
        java.lang.Object obj66 = properties10.replace((java.lang.Object) objCollection56, (java.lang.Object) atomikosProperties57);
        atomikosProperties57.serialJtaTransactions = true;
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{1.0=-1}");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objCollection14);
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10000L + "'", long19 == 10000L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 10000L + "'", long22 == 10000L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 500L + "'", long23 == 500L);
        org.junit.Assert.assertNotNull(recovery24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 10000L + "'", long25 == 10000L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 5 + "'", int26 == 5);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "{}" + "'", str36, "{}");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "{}" + "'", str40, "{}");
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertNotNull(objEnumeration52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(objEntrySet55);
        org.junit.Assert.assertNotNull(objCollection56);
        org.junit.Assert.assertNotNull(properties58);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNull(obj66);
    }

    @Test
    public void test08192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08192");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        atomikosProperties0.setConsoleFileCount((int) (byte) 100);
        atomikosProperties0.setAllowSubTransactions(true);
        atomikosProperties0.setService("tm.out");
        atomikosProperties0.serialJtaTransactions = true;
        atomikosProperties0.service = "{com.atomikos.icatch.{}=5}";
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int18 = atomikosProperties0.getMaxActives();
        atomikosProperties0.setTransactionManagerUniqueName("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=10, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={1.0=-1}, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        atomikosProperties0.setDefaultJtaTimeout(2L);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 50 + "'", int18 == 50);
    }

    @Test
    public void test08193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08193");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.retryInterval = (short) 100;
        recovery0.forgetOrphanedLogEntriesDelay = 'a';
        long long5 = recovery0.getDelay();
        int int6 = recovery0.maxRetries;
        int int7 = recovery0.maxRetries;
        long long8 = recovery0.getRetryInterval();
        recovery0.delay = '4';
        recovery0.retryInterval = (short) 100;
        recovery0.setDelay(0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 10000L + "'", long5 == 10000L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 5 + "'", int7 == 5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
    }

    @Test
    public void test08194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08194");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        java.util.Properties properties2 = new java.util.Properties();
        java.lang.Object obj4 = properties2.remove((java.lang.Object) (-1.0d));
        boolean boolean5 = properties2.isEmpty();
        int int6 = properties2.size();
        java.lang.String str8 = properties2.getProperty("{}");
        java.lang.Object obj9 = properties1.remove((java.lang.Object) properties2);
        java.util.Properties properties10 = new java.util.Properties();
        java.lang.String str11 = properties10.toString();
        java.util.Properties properties12 = new java.util.Properties(properties10);
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        boolean boolean14 = properties1.isEmpty();
        java.util.Collection<java.lang.Object> objCollection15 = properties1.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties16.setAllowSubTransactions(true);
        atomikosProperties16.maxActives = (short) -1;
        atomikosProperties16.setService("tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties23.setAllowSubTransactions(true);
        boolean boolean26 = atomikosProperties23.enableLogging;
        boolean boolean27 = atomikosProperties23.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel28 = atomikosProperties23.consoleLogLevel;
        atomikosProperties16.setConsoleLogLevel(atomikosLoggingLevel28);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery30 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery30.retryInterval = (short) 100;
        recovery30.forgetOrphanedLogEntriesDelay = 'a';
        long long35 = recovery30.retryInterval;
        recovery30.forgetOrphanedLogEntriesDelay = 0L;
        long long38 = recovery30.getForgetOrphanedLogEntriesDelay();
        long long39 = recovery30.getForgetOrphanedLogEntriesDelay();
        recovery30.retryInterval = 0L;
        long long42 = recovery30.retryInterval;
        int int43 = recovery30.maxRetries;
        recovery30.setMaxRetries((int) 'a');
        long long46 = recovery30.getForgetOrphanedLogEntriesDelay();
        long long47 = recovery30.getRetryInterval();
        long long48 = recovery30.getForgetOrphanedLogEntriesDelay();
        java.lang.Object obj49 = properties1.putIfAbsent((java.lang.Object) atomikosProperties16, (java.lang.Object) long48);
        atomikosProperties16.logBaseName = "{{1.0=-1, -1.0=100}={1.0=-1}, 1.0=-1}";
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "{}" + "'", str11, "{}");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(objCollection15);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel28 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel28.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 100L + "'", long35 == 100L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 5 + "'", int43 == 5);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNull(obj49);
    }

    @Test
    public void test08195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08195");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        int int7 = atomikosProperties0.maxActives;
        atomikosProperties0.setLogBaseDir("{}");
        java.lang.String str10 = atomikosProperties0.logBaseDir;
        atomikosProperties0.transactionManagerUniqueName = "";
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties14 = atomikosProperties13.asProperties();
        atomikosProperties13.service = "{-1.0=100}";
        long long17 = atomikosProperties13.getDefaultJtaTimeout();
        atomikosProperties13.setTransactionManagerUniqueName("{}");
        atomikosProperties13.consoleFileName = "hi!";
        int int22 = atomikosProperties13.getConsoleFileCount();
        boolean boolean23 = atomikosProperties13.isThreadedTwoPhaseCommit();
        atomikosProperties13.maxTimeout = 0;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean27 = atomikosProperties26.isSerialJtaTransactions();
        atomikosProperties26.logBaseName = "{-1.0=100}";
        int int30 = atomikosProperties26.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery31 = atomikosProperties26.getRecovery();
        atomikosProperties26.setConsoleFileCount((int) (byte) 100);
        atomikosProperties26.setAllowSubTransactions(true);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean37 = atomikosProperties36.isThreadedTwoPhaseCommit();
        long long38 = atomikosProperties36.getCheckpointInterval();
        atomikosProperties36.setCheckpointInterval((long) 5);
        java.util.Properties properties41 = new java.util.Properties();
        java.lang.String str42 = properties41.toString();
        java.lang.Object obj44 = properties41.remove((java.lang.Object) (short) 100);
        java.lang.Object obj47 = properties41.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean49 = properties41.containsKey((java.lang.Object) 0L);
        java.lang.String str50 = properties41.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties51 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties52 = atomikosProperties51.asProperties();
        atomikosProperties51.service = "{-1.0=100}";
        long long55 = atomikosProperties51.getDefaultJtaTimeout();
        atomikosProperties51.setMaxActives(0);
        atomikosProperties51.maxActives = 'a';
        boolean boolean60 = atomikosProperties51.isThreadedTwoPhaseCommit();
        boolean boolean61 = atomikosProperties51.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel62 = atomikosProperties51.consoleLogLevel;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties63 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties64 = atomikosProperties63.asProperties();
        atomikosProperties63.service = "{-1.0=100}";
        long long67 = atomikosProperties63.getDefaultJtaTimeout();
        atomikosProperties63.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties63.setMaxActives(100);
        java.lang.String str72 = atomikosProperties63.logBaseDir;
        java.lang.String str73 = atomikosProperties63.outputDir;
        java.lang.Object obj74 = properties41.replace((java.lang.Object) atomikosLoggingLevel62, (java.lang.Object) atomikosProperties63);
        atomikosProperties36.consoleLogLevel = atomikosLoggingLevel62;
        atomikosProperties26.setConsoleLogLevel(atomikosLoggingLevel62);
        atomikosProperties13.consoleLogLevel = atomikosLoggingLevel62;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel62);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel79 = atomikosProperties0.consoleLogLevel;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "{}" + "'", str10, "{}");
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10000L + "'", long17 == 10000L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 50 + "'", int30 == 50);
        org.junit.Assert.assertNotNull(recovery31);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 500L + "'", long38 == 500L);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "{}" + "'", str42, "{}");
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "{-1.0=100}" + "'", str50, "{-1.0=100}");
        org.junit.Assert.assertNotNull(properties52);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 10000L + "'", long55 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel62 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel62.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(properties64);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 10000L + "'", long67 == 10000L);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "{={-1.0=100}, -1.0=100}" + "'", str73, "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel79 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel79.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
    }

    @Test
    public void test08196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08196");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.retryInterval = (short) 100;
        recovery0.forgetOrphanedLogEntriesDelay = 'a';
        long long5 = recovery0.retryInterval;
        recovery0.setForgetOrphanedLogEntriesDelay((long) 0);
        long long8 = recovery0.getRetryInterval();
        recovery0.setDelay((long) ' ');
        long long11 = recovery0.getForgetOrphanedLogEntriesDelay();
        long long12 = recovery0.getForgetOrphanedLogEntriesDelay();
        recovery0.maxRetries = 19;
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 100L + "'", long5 == 100L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test08197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08197");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        atomikosProperties2.service = "{-1.0=100}";
        long long6 = atomikosProperties2.getDefaultJtaTimeout();
        atomikosProperties2.consoleFileLimit = '#';
        java.lang.Object obj9 = properties1.get((java.lang.Object) atomikosProperties2);
        boolean boolean10 = atomikosProperties2.isForceShutdownOnVmExit();
        atomikosProperties2.consoleFileName = "";
        atomikosProperties2.outputDir = "{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}";
        long long15 = atomikosProperties2.maxTimeout;
        atomikosProperties2.transactionManagerUniqueName = "{hi!={}}";
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 300000L + "'", long15 == 300000L);
    }

    @Test
    public void test08198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08198");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        boolean boolean5 = atomikosProperties0.enableLogging;
        boolean boolean6 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.consoleFileLimit = (byte) -1;
        java.lang.String str9 = atomikosProperties0.getService();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel10 = atomikosProperties0.consoleLogLevel;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties12 = atomikosProperties11.asProperties();
        atomikosProperties11.service = "{-1.0=100}";
        long long15 = atomikosProperties11.getDefaultJtaTimeout();
        atomikosProperties11.serialJtaTransactions = true;
        long long18 = atomikosProperties11.maxTimeout;
        atomikosProperties11.setLogBaseDir("{-1.0=100}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties21.setAllowSubTransactions(true);
        atomikosProperties21.maxActives = (short) -1;
        atomikosProperties21.setService("tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties28.setAllowSubTransactions(true);
        boolean boolean31 = atomikosProperties28.enableLogging;
        boolean boolean32 = atomikosProperties28.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel33 = atomikosProperties28.consoleLogLevel;
        atomikosProperties21.setConsoleLogLevel(atomikosLoggingLevel33);
        atomikosProperties11.consoleLogLevel = atomikosLoggingLevel33;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel33;
        atomikosProperties0.setDefaultJtaTimeout((long) 19);
        atomikosProperties0.consoleFileLimit = (byte) -1;
        atomikosProperties0.service = "{1.0=-1}";
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{-1.0=100}" + "'", str9, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel10 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel10.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(properties12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10000L + "'", long15 == 10000L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 300000L + "'", long18 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel33 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel33.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
    }

    @Test
    public void test08199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08199");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj7 = properties0.clone();
        java.lang.String str9 = properties0.getProperty("{}");
        java.lang.String str12 = properties0.getProperty("{={-1.0=100}, -1.0=100}", "{com.atomikos.icatch.{1.0=-1, -1.0=100}=86400000, -1.0=100}");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{1.0=-1}");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "{com.atomikos.icatch.{1.0=-1, -1.0=100}=86400000, -1.0=100}" + "'", str12, "{com.atomikos.icatch.{1.0=-1, -1.0=100}=86400000, -1.0=100}");
    }

    @Test
    public void test08200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08200");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        boolean boolean7 = atomikosProperties0.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery8 = atomikosProperties0.recovery;
        boolean boolean9 = atomikosProperties0.threadedTwoPhaseCommit;
        atomikosProperties0.setOutputDir("tmlog");
        boolean boolean12 = atomikosProperties0.isAllowSubTransactions();
        atomikosProperties0.transactionManagerUniqueName = "{={-1.0=100}, -1.0=100}";
        atomikosProperties0.logBaseName = "{1.0=-1}";
        boolean boolean17 = atomikosProperties0.enableLogging;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(recovery8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test08201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08201");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        long long7 = atomikosProperties0.getDefaultJtaTimeout();
        long long8 = atomikosProperties0.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery9 = atomikosProperties0.getRecovery();
        java.lang.String str10 = atomikosProperties0.outputDir;
        int int11 = atomikosProperties0.consoleFileCount;
        atomikosProperties0.setAllowSubTransactions(false);
        int int14 = atomikosProperties0.maxActives;
        atomikosProperties0.logBaseName = "tm.out";
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(recovery9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 50 + "'", int14 == 50);
    }

    @Test
    public void test08202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08202");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setEnableLogging(true);
        atomikosProperties0.consoleFileCount = 0;
        int int5 = atomikosProperties0.getMaxActives();
        java.lang.String str6 = atomikosProperties0.getLogBaseName();
        atomikosProperties0.checkpointInterval = 32L;
        java.lang.String str9 = atomikosProperties0.getLogBaseName();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.recovery;
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 50 + "'", int5 == 50);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tmlog" + "'", str9, "tmlog");
        org.junit.Assert.assertNotNull(recovery10);
    }

    @Test
    public void test08203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08203");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.consoleFileLimit = '#';
        boolean boolean7 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.setDefaultJtaTimeout((long) (short) 1);
        atomikosProperties0.forceShutdownOnVmExit = true;
        atomikosProperties0.threadedTwoPhaseCommit = false;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test08204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08204");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.enableLogging = false;
        atomikosProperties0.setMaxActives((int) ' ');
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties9.setAllowSubTransactions(true);
        boolean boolean12 = atomikosProperties9.enableLogging;
        boolean boolean13 = atomikosProperties9.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel14 = atomikosProperties9.consoleLogLevel;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel14);
        java.util.Properties properties16 = atomikosProperties0.asProperties();
        atomikosProperties0.logBaseName = "{{}={}}";
        java.lang.String str19 = atomikosProperties0.getService();
        atomikosProperties0.service = "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=32, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={-1.0=100}, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}";
        atomikosProperties0.threadedTwoPhaseCommit = false;
        java.util.Properties properties24 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties26 = atomikosProperties25.asProperties();
        atomikosProperties25.service = "{-1.0=100}";
        long long29 = atomikosProperties25.getDefaultJtaTimeout();
        long long30 = atomikosProperties25.getMaxTimeout();
        atomikosProperties25.threadedTwoPhaseCommit = true;
        atomikosProperties25.setSerialJtaTransactions(true);
        atomikosProperties25.setDefaultJtaTimeout((-1L));
        atomikosProperties25.allowSubTransactions = false;
        boolean boolean39 = atomikosProperties25.isForceShutdownOnVmExit();
        atomikosProperties25.setSerialJtaTransactions(true);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties43 = atomikosProperties42.asProperties();
        java.lang.Object obj44 = properties24.replace((java.lang.Object) true, (java.lang.Object) properties43);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel14 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel14.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "{-1.0=100}" + "'", str19, "{-1.0=100}");
        org.junit.Assert.assertNotNull(properties24);
        org.junit.Assert.assertNotNull(properties26);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 10000L + "'", long29 == 10000L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 300000L + "'", long30 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(properties43);
        org.junit.Assert.assertNull(obj44);
    }

    @Test
    public void test08205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08205");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setEnableLogging(true);
        atomikosProperties0.consoleFileCount = 0;
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        atomikosProperties0.setMaxTimeout(10L);
        java.lang.String str8 = atomikosProperties0.logBaseDir;
        atomikosProperties0.service = "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=32, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={-1.0=100}, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}";
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test08206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08206");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        atomikosProperties2.service = "{-1.0=100}";
        long long6 = atomikosProperties2.getDefaultJtaTimeout();
        atomikosProperties2.consoleFileLimit = '#';
        java.lang.Object obj9 = properties1.get((java.lang.Object) atomikosProperties2);
        boolean boolean10 = atomikosProperties2.forceShutdownOnVmExit;
        atomikosProperties2.setOutputDir("");
        long long13 = atomikosProperties2.defaultJtaTimeout;
        java.lang.String str14 = atomikosProperties2.getLogBaseName();
        atomikosProperties2.setEnableLogging(false);
        int int17 = atomikosProperties2.consoleFileCount;
        atomikosProperties2.outputDir = "tmlog";
        java.util.Properties properties20 = new java.util.Properties();
        java.lang.String str21 = properties20.toString();
        java.lang.Object obj23 = properties20.remove((java.lang.Object) (short) 100);
        java.lang.Object obj26 = properties20.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj27 = properties20.clone();
        java.util.Set<java.lang.String> strSet28 = properties20.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties31 = atomikosProperties30.asProperties();
        atomikosProperties30.service = "{-1.0=100}";
        long long34 = atomikosProperties30.getDefaultJtaTimeout();
        long long35 = atomikosProperties30.getMaxTimeout();
        java.lang.String str36 = atomikosProperties30.outputDir;
        atomikosProperties30.consoleFileName = "tm.out";
        long long39 = atomikosProperties30.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel40 = atomikosProperties30.consoleLogLevel;
        atomikosProperties2.set(properties20, "{1.0=-1, -1.0=100}", (java.lang.Object) atomikosProperties30);
        java.util.Properties properties42 = atomikosProperties2.asProperties();
        atomikosProperties2.maxTimeout = 32L;
        boolean boolean45 = atomikosProperties2.allowSubTransactions;
        atomikosProperties2.setCheckpointInterval((long) 2);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10000L + "'", long13 == 10000L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "tmlog" + "'", str14, "tmlog");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "{}" + "'", str21, "{}");
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "{1.0=-1}");
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNotNull(properties31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 10000L + "'", long34 == 10000L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 300000L + "'", long35 == 300000L);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 500L + "'", long39 == 500L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel40 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel40.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(properties42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    }

    @Test
    public void test08207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08207");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties3 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties4 = atomikosProperties3.asProperties();
        atomikosProperties3.service = "{-1.0=100}";
        java.lang.String str7 = atomikosProperties3.getLogBaseName();
        long long8 = atomikosProperties3.defaultJtaTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel9 = null;
        atomikosProperties3.setConsoleLogLevel(atomikosLoggingLevel9);
        atomikosProperties3.threadedTwoPhaseCommit = false;
        atomikosProperties3.allowSubTransactions = false;
        java.lang.String str15 = atomikosProperties3.getConsoleFileName();
        java.util.Properties properties16 = atomikosProperties3.asProperties();
        atomikosProperties3.setCheckpointInterval(2L);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery19 = atomikosProperties3.recovery;
        java.lang.Object obj20 = properties0.putIfAbsent((java.lang.Object) "{{={-1.0=100}, -1.0=100}=}", (java.lang.Object) recovery19);
        long long21 = recovery19.delay;
        org.junit.Assert.assertNotNull(properties4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "tmlog" + "'", str7, "tmlog");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 10000L + "'", long8 == 10000L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "tm.out" + "'", str15, "tm.out");
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertNotNull(recovery19);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10000L + "'", long21 == 10000L);
    }

    @Test
    public void test08208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08208");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        boolean boolean7 = atomikosProperties0.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery8 = atomikosProperties0.recovery;
        atomikosProperties0.setLogBaseDir("");
        long long11 = atomikosProperties0.maxTimeout;
        atomikosProperties0.setService("{={-1.0=100}, -1.0=100}");
        long long14 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.forceShutdownOnVmExit = true;
        atomikosProperties0.setLogBaseDir("{{}={}}");
        atomikosProperties0.setOutputDir("{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(recovery8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 300000L + "'", long11 == 300000L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10000L + "'", long14 == 10000L);
    }

    @Test
    public void test08209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08209");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        int int5 = atomikosProperties0.consoleFileCount;
        atomikosProperties0.transactionManagerUniqueName = "tm.out";
        atomikosProperties0.consoleFileName = "tm.out";
        atomikosProperties0.allowSubTransactions = false;
        boolean boolean12 = atomikosProperties0.allowSubTransactions;
        java.lang.String str13 = atomikosProperties0.logBaseName;
        int int14 = atomikosProperties0.consoleFileLimit;
        boolean boolean15 = atomikosProperties0.isEnableLogging();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{-1.0=100}" + "'", str13, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test08210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08210");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties0.setMaxActives(100);
        boolean boolean9 = atomikosProperties0.enableLogging;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.recovery;
        atomikosProperties0.setConsoleFileLimit(100);
        boolean boolean13 = atomikosProperties0.enableLogging;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery14 = atomikosProperties0.getRecovery();
        recovery14.delay = 0L;
        recovery14.setRetryInterval((long) (short) 1);
        recovery14.delay = (byte) -1;
        long long21 = recovery14.forgetOrphanedLogEntriesDelay;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(recovery14);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 86400000L + "'", long21 == 86400000L);
    }

    @Test
    public void test08211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08211");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        long long5 = atomikosProperties0.getMaxTimeout();
        int int6 = atomikosProperties0.consoleFileCount;
        int int7 = atomikosProperties0.getMaxActives();
        atomikosProperties0.setAllowSubTransactions(true);
        atomikosProperties0.setCheckpointInterval(300000L);
        boolean boolean12 = atomikosProperties0.forceShutdownOnVmExit;
        boolean boolean13 = atomikosProperties0.isForceShutdownOnVmExit();
        java.lang.String str14 = atomikosProperties0.outputDir;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test08212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08212");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        java.util.Properties properties8 = new java.util.Properties();
        java.lang.String str9 = properties8.toString();
        java.lang.Object obj11 = properties8.remove((java.lang.Object) (short) 100);
        java.lang.Object obj14 = properties8.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj15 = properties8.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration16 = properties8.elements();
        java.lang.Object obj17 = properties0.putIfAbsent((java.lang.Object) 10.0f, (java.lang.Object) objEnumeration16);
        java.util.Properties properties18 = new java.util.Properties();
        java.util.Enumeration<?> wildcardEnumeration19 = properties18.propertyNames();
        java.lang.Object obj20 = properties18.clone();
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.String str22 = properties21.toString();
        boolean boolean23 = properties21.isEmpty();
        java.lang.Object obj26 = properties21.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties21.elements();
        java.lang.Object obj28 = properties0.put(obj20, (java.lang.Object) objEnumeration27);
        java.lang.String str29 = properties0.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Enumeration<?> wildcardEnumeration30 = properties0.propertyNames();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.Float cannot be cast to java.lang.String");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{}" + "'", str9, "{}");
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration16);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(wildcardEnumeration19);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{}");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{}" + "'", str22, "{}");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertNull(obj28);
    }

    @Test
    public void test08213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08213");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.outputDir = "{={-1.0=100}, -1.0=100}";
        long long7 = atomikosProperties0.getCheckpointInterval();
        boolean boolean8 = atomikosProperties0.isThreadedTwoPhaseCommit();
        java.lang.String str9 = atomikosProperties0.service;
        java.lang.String str10 = atomikosProperties0.getOutputDir();
        long long11 = atomikosProperties0.maxTimeout;
        int int12 = atomikosProperties0.getMaxActives();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{-1.0=100}" + "'", str9, "{-1.0=100}");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "{={-1.0=100}, -1.0=100}" + "'", str10, "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 300000L + "'", long11 == 300000L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 50 + "'", int12 == 50);
    }

    @Test
    public void test08214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08214");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setMaxActives(0);
        atomikosProperties0.maxActives = 'a';
        atomikosProperties0.service = "";
        atomikosProperties0.setMaxActives(0);
        atomikosProperties0.transactionManagerUniqueName = "{{1.0=-1}=hi!}";
        boolean boolean15 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.serialJtaTransactions = false;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test08215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08215");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.enableLogging = false;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties7.setEnableLogging(true);
        atomikosProperties7.consoleFileCount = 0;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties13 = atomikosProperties12.asProperties();
        atomikosProperties12.service = "{-1.0=100}";
        long long16 = atomikosProperties12.getDefaultJtaTimeout();
        boolean boolean17 = atomikosProperties12.enableLogging;
        boolean boolean18 = atomikosProperties12.isForceShutdownOnVmExit();
        atomikosProperties12.consoleFileLimit = (byte) -1;
        java.lang.String str21 = atomikosProperties12.getService();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel22 = atomikosProperties12.consoleLogLevel;
        atomikosProperties7.consoleLogLevel = atomikosLoggingLevel22;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel22);
        atomikosProperties0.setLogBaseName("{={-1.0=100}, -1.0=100}");
        atomikosProperties0.setMaxActives((int) (byte) -1);
        java.lang.String str29 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setAllowSubTransactions(false);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertNotNull(properties13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10000L + "'", long16 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "{-1.0=100}" + "'", str21, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel22 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel22.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(str29);
    }

    @Test
    public void test08216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08216");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        atomikosProperties0.setConsoleFileCount((int) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel8 = null;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel8;
        java.lang.String str10 = atomikosProperties0.logBaseDir;
        atomikosProperties0.checkpointInterval = (byte) 0;
        java.lang.String str13 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.serialJtaTransactions = true;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel16 = atomikosProperties0.getConsoleLogLevel();
        java.lang.String str17 = atomikosProperties0.consoleFileName;
        atomikosProperties0.setForceShutdownOnVmExit(true);
        atomikosProperties0.setCheckpointInterval((long) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery22 = atomikosProperties0.recovery;
        long long23 = recovery22.getRetryInterval();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(atomikosLoggingLevel16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tm.out" + "'", str17, "tm.out");
        org.junit.Assert.assertNotNull(recovery22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 10000L + "'", long23 == 10000L);
    }

    @Test
    public void test08217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08217");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties();
        java.lang.String str2 = properties1.toString();
        boolean boolean3 = properties1.isEmpty();
        java.util.Properties properties4 = new java.util.Properties();
        java.lang.String str5 = properties4.toString();
        java.lang.Object obj7 = properties4.remove((java.lang.Object) (short) 100);
        java.lang.Object obj10 = properties4.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean12 = properties4.containsKey((java.lang.Object) 0L);
        boolean boolean13 = properties1.containsValue((java.lang.Object) 0L);
        boolean boolean16 = properties0.replace((java.lang.Object) 0L, (java.lang.Object) 0.0f, (java.lang.Object) 10.0d);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties18 = atomikosProperties17.asProperties();
        atomikosProperties17.service = "{-1.0=100}";
        long long21 = atomikosProperties17.getDefaultJtaTimeout();
        atomikosProperties17.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties17.logBaseName = "hi!";
        long long26 = atomikosProperties17.getCheckpointInterval();
        boolean boolean27 = properties0.containsValue((java.lang.Object) long26);
        java.io.OutputStream outputStream28 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.store(outputStream28, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir={={-1.0=100}, -1.0=100}, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.output_dir={1.0=-1, -1.0=100}, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={-1.0=100}, com.atomikos.icatch.force_shutdown_on_vm_exit=true, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{}" + "'", str2, "{}");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{}" + "'", str5, "{}");
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10000L + "'", long21 == 10000L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 500L + "'", long26 == 500L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test08218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08218");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        atomikosProperties2.service = "{-1.0=100}";
        long long6 = atomikosProperties2.getDefaultJtaTimeout();
        atomikosProperties2.consoleFileLimit = '#';
        java.lang.Object obj9 = properties1.get((java.lang.Object) atomikosProperties2);
        boolean boolean10 = atomikosProperties2.forceShutdownOnVmExit;
        atomikosProperties2.setOutputDir("");
        atomikosProperties2.setThreadedTwoPhaseCommit(false);
        atomikosProperties2.enableLogging = false;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test08219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08219");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setAllowSubTransactions(true);
        boolean boolean3 = atomikosProperties0.enableLogging;
        atomikosProperties0.consoleFileLimit = (byte) 100;
        java.util.Properties properties6 = new java.util.Properties();
        java.lang.String str7 = properties6.toString();
        java.util.Properties properties8 = new java.util.Properties(properties6);
        java.util.Properties properties10 = new java.util.Properties();
        java.lang.String str11 = properties10.toString();
        java.lang.Object obj13 = properties10.remove((java.lang.Object) (short) 100);
        java.lang.Object obj16 = properties10.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean18 = properties10.containsKey((java.lang.Object) 0L);
        java.lang.Object obj21 = properties10.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties22 = new java.util.Properties(properties10);
        java.util.Enumeration<java.lang.Object> objEnumeration23 = properties22.elements();
        atomikosProperties0.set(properties8, "{={-1.0=100}, -1.0=100}", (java.lang.Object) properties22);
        int int25 = properties8.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery26 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery26.retryInterval = (short) 100;
        recovery26.forgetOrphanedLogEntriesDelay = 'a';
        long long31 = recovery26.getDelay();
        int int32 = recovery26.maxRetries;
        int int33 = recovery26.maxRetries;
        long long34 = recovery26.getRetryInterval();
        recovery26.retryInterval = (byte) -1;
        int int37 = recovery26.maxRetries;
        recovery26.setRetryInterval((long) (short) 100);
        long long40 = recovery26.getDelay();
        long long41 = recovery26.forgetOrphanedLogEntriesDelay;
        boolean boolean42 = properties8.equals((java.lang.Object) long41);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "{}" + "'", str7, "{}");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "{}" + "'", str11, "{}");
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNotNull(objEnumeration23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 10000L + "'", long31 == 10000L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 5 + "'", int32 == 5);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5 + "'", int33 == 5);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 100L + "'", long34 == 100L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 10000L + "'", long40 == 10000L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 97L + "'", long41 == 97L);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test08220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08220");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileName = "hi!";
        atomikosProperties0.service = "{-1.0=100}";
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery9 = atomikosProperties0.getRecovery();
        recovery9.maxRetries = 19;
        recovery9.setForgetOrphanedLogEntriesDelay((long) 20);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(recovery9);
    }

    @Test
    public void test08221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08221");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties12 = new java.util.Properties();
        java.lang.String str13 = properties12.toString();
        java.lang.Object obj15 = properties12.remove((java.lang.Object) (short) 100);
        java.lang.Object obj18 = properties12.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj19 = properties12.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration20 = properties12.elements();
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties12);
        boolean boolean23 = properties0.equals((java.lang.Object) 1.0f);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties25 = atomikosProperties24.asProperties();
        atomikosProperties24.service = "{-1.0=100}";
        long long28 = atomikosProperties24.getDefaultJtaTimeout();
        long long29 = atomikosProperties24.getMaxTimeout();
        int int30 = atomikosProperties24.consoleFileCount;
        int int31 = atomikosProperties24.getMaxActives();
        boolean boolean32 = atomikosProperties24.forceShutdownOnVmExit;
        java.lang.String str33 = atomikosProperties24.getTransactionManagerUniqueName();
        boolean boolean34 = properties0.containsValue((java.lang.Object) atomikosProperties24);
        java.util.Collection<java.lang.Object> objCollection35 = properties0.values();
        java.util.Properties properties36 = new java.util.Properties();
        java.lang.String str37 = properties36.toString();
        java.lang.Object obj39 = properties36.remove((java.lang.Object) (short) 100);
        java.lang.Object obj42 = properties36.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean44 = properties36.containsKey((java.lang.Object) 0L);
        java.lang.Object obj47 = properties36.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties48 = new java.util.Properties();
        java.lang.String str49 = properties48.toString();
        java.lang.Object obj51 = properties48.remove((java.lang.Object) (short) 100);
        java.lang.Object obj54 = properties48.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj55 = properties48.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration56 = properties48.elements();
        properties36.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties48);
        java.lang.Object obj60 = properties48.setProperty("{={-1.0=100}, -1.0=100}", "hi!");
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties48);
        java.lang.Object obj62 = properties0.clone();
        java.util.Set<java.lang.String> strSet63 = properties0.stringPropertyNames();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{}" + "'", str13, "{}");
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 10000L + "'", long28 == 10000L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 300000L + "'", long29 == 300000L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 50 + "'", int31 == 50);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(objCollection35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "{}" + "'", str37, "{}");
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "{}" + "'", str49, "{}");
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertEquals(obj55.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj55), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj55), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration56);
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertNotNull(obj62);
// flaky:         org.junit.Assert.assertEquals(obj62.toString(), "{{={-1.0=100}, -1.0=100}=hi!, 1.0=-1, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj62), "{{={-1.0=100}, -1.0=100}=hi!, 1.0=-1, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj62), "{{={-1.0=100}, -1.0=100}=hi!, 1.0=-1, -1.0=100}");
        org.junit.Assert.assertNotNull(strSet63);
    }

    @Test
    public void test08222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08222");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj3 = properties0.setProperty("{}", "{}");
        java.util.Enumeration<java.lang.Object> objEnumeration4 = properties0.keys();
        java.util.Enumeration<?> wildcardEnumeration5 = properties0.propertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties7 = atomikosProperties6.asProperties();
        atomikosProperties6.service = "{-1.0=100}";
        long long10 = atomikosProperties6.getDefaultJtaTimeout();
        long long11 = atomikosProperties6.getMaxTimeout();
        atomikosProperties6.threadedTwoPhaseCommit = true;
        long long14 = atomikosProperties6.checkpointInterval;
        boolean boolean15 = atomikosProperties6.allowSubTransactions;
        boolean boolean16 = properties0.equals((java.lang.Object) boolean15);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties18 = atomikosProperties17.asProperties();
        atomikosProperties17.service = "{-1.0=100}";
        java.lang.String str21 = atomikosProperties17.getTransactionManagerUniqueName();
        atomikosProperties17.consoleFileName = "hi!";
        atomikosProperties17.service = "tm.out";
        atomikosProperties17.logBaseName = "tm.out";
        atomikosProperties17.setThreadedTwoPhaseCommit(true);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel30 = atomikosProperties17.consoleLogLevel;
        atomikosProperties17.service = "tm.out";
        boolean boolean33 = atomikosProperties17.enableLogging;
        boolean boolean34 = properties0.contains((java.lang.Object) atomikosProperties17);
        int int35 = properties0.size();
        java.util.Properties properties36 = new java.util.Properties();
        java.lang.String str37 = properties36.toString();
        boolean boolean38 = properties36.isEmpty();
        java.lang.Object obj41 = properties36.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration42 = properties36.elements();
        java.util.Properties properties43 = new java.util.Properties();
        java.util.Properties properties44 = new java.util.Properties(properties43);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery45 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery45.retryInterval = (short) 100;
        recovery45.forgetOrphanedLogEntriesDelay = 'a';
        long long50 = recovery45.retryInterval;
        recovery45.forgetOrphanedLogEntriesDelay = 0L;
        long long53 = recovery45.getForgetOrphanedLogEntriesDelay();
        recovery45.setRetryInterval((long) 0);
        boolean boolean56 = properties36.remove((java.lang.Object) properties44, (java.lang.Object) 0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties57 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties58 = atomikosProperties57.asProperties();
        atomikosProperties57.service = "{-1.0=100}";
        long long61 = atomikosProperties57.getDefaultJtaTimeout();
        atomikosProperties57.enableLogging = false;
        atomikosProperties57.setMaxTimeout((long) (byte) 0);
        java.lang.Object obj66 = properties36.get((java.lang.Object) (byte) 0);
        java.util.Set<java.lang.String> strSet67 = properties36.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties68 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties69 = atomikosProperties68.asProperties();
        atomikosProperties68.service = "{-1.0=100}";
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery72 = atomikosProperties68.recovery;
        java.lang.String str73 = atomikosProperties68.getLogBaseDir();
        atomikosProperties68.setMaxActives(35);
        boolean boolean76 = atomikosProperties68.isThreadedTwoPhaseCommit();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties77 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties78 = atomikosProperties77.asProperties();
        atomikosProperties77.service = "{-1.0=100}";
        java.lang.String str81 = atomikosProperties77.getLogBaseName();
        long long82 = atomikosProperties77.defaultJtaTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel83 = null;
        atomikosProperties77.setConsoleLogLevel(atomikosLoggingLevel83);
        atomikosProperties77.service = "";
        atomikosProperties77.serialJtaTransactions = true;
        atomikosProperties77.forceShutdownOnVmExit = false;
        int int91 = atomikosProperties77.maxActives;
        boolean boolean92 = properties0.replace((java.lang.Object) strSet67, (java.lang.Object) atomikosProperties68, (java.lang.Object) atomikosProperties77);
        atomikosProperties77.setDefaultJtaTimeout((long) (short) -1);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNotNull(objEnumeration4);
        org.junit.Assert.assertNotNull(wildcardEnumeration5);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 300000L + "'", long11 == 300000L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 500L + "'", long14 == 500L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel30 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel30.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "{}" + "'", str37, "{}");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertNotNull(objEnumeration42);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 100L + "'", long50 == 100L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(properties58);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 10000L + "'", long61 == 10000L);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertNotNull(strSet67);
        org.junit.Assert.assertNotNull(properties69);
        org.junit.Assert.assertNotNull(recovery72);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(properties78);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "tmlog" + "'", str81, "tmlog");
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 10000L + "'", long82 == 10000L);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 50 + "'", int91 == 50);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test08223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08223");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getLogBaseName();
        long long5 = atomikosProperties0.defaultJtaTimeout;
        long long6 = atomikosProperties0.getMaxTimeout();
        boolean boolean7 = atomikosProperties0.forceShutdownOnVmExit;
        java.util.Properties properties8 = atomikosProperties0.asProperties();
        atomikosProperties0.setSerialJtaTransactions(false);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tmlog" + "'", str4, "tmlog");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 10000L + "'", long5 == 10000L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 300000L + "'", long6 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(properties8);
    }

    @Test
    public void test08224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08224");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties12 = new java.util.Properties();
        java.lang.String str13 = properties12.toString();
        java.lang.Object obj15 = properties12.remove((java.lang.Object) (short) 100);
        java.lang.Object obj18 = properties12.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj19 = properties12.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration20 = properties12.elements();
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties12);
        boolean boolean23 = properties0.equals((java.lang.Object) 1.0f);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties25 = atomikosProperties24.asProperties();
        atomikosProperties24.service = "{-1.0=100}";
        long long28 = atomikosProperties24.getDefaultJtaTimeout();
        long long29 = atomikosProperties24.getMaxTimeout();
        int int30 = atomikosProperties24.consoleFileCount;
        int int31 = atomikosProperties24.getMaxActives();
        boolean boolean32 = atomikosProperties24.forceShutdownOnVmExit;
        java.lang.String str33 = atomikosProperties24.getTransactionManagerUniqueName();
        boolean boolean34 = properties0.containsValue((java.lang.Object) atomikosProperties24);
        java.util.Collection<java.lang.Object> objCollection35 = properties0.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties37 = atomikosProperties36.asProperties();
        atomikosProperties36.service = "{-1.0=100}";
        long long40 = atomikosProperties36.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel41 = null;
        atomikosProperties36.setConsoleLogLevel(atomikosLoggingLevel41);
        int int43 = atomikosProperties36.maxActives;
        atomikosProperties36.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery46 = atomikosProperties36.getRecovery();
        atomikosProperties36.outputDir = "hi!";
        java.lang.String str49 = atomikosProperties36.getLogBaseName();
        atomikosProperties36.setService("{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}");
        boolean boolean52 = properties0.equals((java.lang.Object) atomikosProperties36);
        atomikosProperties36.setMaxTimeout((long) 1);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{}" + "'", str13, "{}");
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 10000L + "'", long28 == 10000L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 300000L + "'", long29 == 300000L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 50 + "'", int31 == 50);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(objCollection35);
        org.junit.Assert.assertNotNull(properties37);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 10000L + "'", long40 == 10000L);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 50 + "'", int43 == 50);
        org.junit.Assert.assertNotNull(recovery46);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "tmlog" + "'", str49, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test08225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08225");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj7 = properties0.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration8 = properties0.elements();
        java.util.Properties properties9 = new java.util.Properties();
        java.lang.String str10 = properties9.toString();
        java.lang.Object obj12 = properties9.remove((java.lang.Object) (short) 100);
        java.lang.Object obj15 = properties9.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj16 = properties9.clone();
        java.util.Set<java.lang.String> strSet17 = properties9.stringPropertyNames();
        java.util.Properties properties18 = new java.util.Properties(properties9);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties20 = atomikosProperties19.asProperties();
        atomikosProperties19.service = "{-1.0=100}";
        java.lang.String str23 = atomikosProperties19.getTransactionManagerUniqueName();
        boolean boolean24 = atomikosProperties19.isSerialJtaTransactions();
        int int25 = atomikosProperties19.getConsoleFileLimit();
        java.util.Properties properties26 = new java.util.Properties();
        java.lang.String str27 = properties26.toString();
        java.lang.Object obj29 = properties26.remove((java.lang.Object) (short) 100);
        java.lang.Object obj32 = properties26.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean34 = properties26.containsKey((java.lang.Object) 0L);
        java.lang.Object obj37 = properties26.replace((java.lang.Object) false, (java.lang.Object) ' ');
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties38.setEnableLogging(true);
        atomikosProperties38.setConsoleFileLimit((int) (short) 0);
        boolean boolean43 = properties26.contains((java.lang.Object) atomikosProperties38);
        java.lang.Object obj44 = properties18.putIfAbsent((java.lang.Object) int25, (java.lang.Object) atomikosProperties38);
        java.util.Properties properties45 = new java.util.Properties(properties18);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties18);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties47 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties48 = atomikosProperties47.asProperties();
        atomikosProperties47.service = "{-1.0=100}";
        long long51 = atomikosProperties47.getDefaultJtaTimeout();
        atomikosProperties47.setThreadedTwoPhaseCommit(true);
        boolean boolean54 = atomikosProperties47.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery55 = atomikosProperties47.recovery;
        atomikosProperties47.setLogBaseDir("");
        long long58 = atomikosProperties47.maxTimeout;
        atomikosProperties47.setService("{={-1.0=100}, -1.0=100}");
        boolean boolean61 = atomikosProperties47.enableLogging;
        atomikosProperties47.consoleFileCount = (short) 100;
        boolean boolean64 = properties18.containsValue((java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration65 = properties18.keys();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "{}" + "'", str10, "{}");
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "{1.0=-1}");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(properties20);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "{}" + "'", str27, "{}");
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNotNull(properties48);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 10000L + "'", long51 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(recovery55);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 300000L + "'", long58 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(objEnumeration65);
    }

    @Test
    public void test08226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08226");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileName = "hi!";
        atomikosProperties0.setCheckpointInterval((long) 5);
        atomikosProperties0.setConsoleFileCount(0);
        atomikosProperties0.setService("{-1.0=100}");
        atomikosProperties0.setDefaultJtaTimeout((long) 100);
        atomikosProperties0.setLogBaseDir("tmlog");
        atomikosProperties0.setAllowSubTransactions(false);
        atomikosProperties0.transactionManagerUniqueName = "{com.atomikos.icatch.{}=5}";
        atomikosProperties0.checkpointInterval = 52;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test08227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08227");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileName = "hi!";
        atomikosProperties0.serialJtaTransactions = true;
        atomikosProperties0.outputDir = "tm.out";
        int int11 = atomikosProperties0.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery12 = atomikosProperties0.recovery;
        long long13 = recovery12.getForgetOrphanedLogEntriesDelay();
        recovery12.setForgetOrphanedLogEntriesDelay((long) (short) 0);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(recovery12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 86400000L + "'", long13 == 86400000L);
    }

    @Test
    public void test08228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08228");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj3 = properties0.setProperty("{}", "{}");
        java.util.Enumeration<java.lang.Object> objEnumeration4 = properties0.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties0.elements();
        java.util.Properties properties6 = new java.util.Properties(properties0);
        boolean boolean7 = properties0.isEmpty();
        java.util.Set<java.lang.Object> objSet8 = properties0.keySet();
        java.util.Properties properties9 = new java.util.Properties();
        java.lang.String str10 = properties9.toString();
        java.lang.Object obj12 = properties9.remove((java.lang.Object) (short) 100);
        java.lang.Object obj15 = properties9.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.util.Properties properties16 = new java.util.Properties();
        java.lang.String str17 = properties16.toString();
        java.lang.Object obj19 = properties16.remove((java.lang.Object) (short) 100);
        java.lang.Object obj22 = properties16.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        int int23 = properties16.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery24 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery24.retryInterval = (short) 100;
        recovery24.forgetOrphanedLogEntriesDelay = 'a';
        long long29 = recovery24.retryInterval;
        recovery24.setForgetOrphanedLogEntriesDelay((long) 0);
        java.lang.Object obj32 = properties9.replace((java.lang.Object) int23, (java.lang.Object) recovery24);
        int int33 = recovery24.maxRetries;
        long long34 = recovery24.delay;
        recovery24.setDelay(0L);
        java.lang.Object obj37 = properties0.get((java.lang.Object) recovery24);
        java.lang.String str38 = properties0.toString();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNotNull(objEnumeration4);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objSet8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "{}" + "'", str10, "{}");
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "{}" + "'", str17, "{}");
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 100L + "'", long29 == 100L);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5 + "'", int33 == 5);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 10000L + "'", long34 == 10000L);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "{{}={}}" + "'", str38, "{{}={}}");
    }

    @Test
    public void test08229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08229");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        boolean boolean2 = properties0.isEmpty();
        java.util.Properties properties3 = new java.util.Properties();
        java.lang.String str4 = properties3.toString();
        java.lang.Object obj6 = properties3.remove((java.lang.Object) (short) 100);
        java.lang.Object obj9 = properties3.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean11 = properties3.containsKey((java.lang.Object) 0L);
        boolean boolean12 = properties0.containsValue((java.lang.Object) 0L);
        java.util.Set<java.lang.String> strSet13 = properties0.stringPropertyNames();
        java.util.Collection<java.lang.Object> objCollection14 = properties0.values();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{}" + "'", str4, "{}");
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(objCollection14);
    }

    @Test
    public void test08230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08230");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.enableLogging = false;
        atomikosProperties0.setMaxTimeout((long) (byte) 0);
        atomikosProperties0.setAllowSubTransactions(true);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties12 = atomikosProperties11.asProperties();
        atomikosProperties11.service = "{-1.0=100}";
        java.lang.String str15 = atomikosProperties11.getTransactionManagerUniqueName();
        boolean boolean16 = atomikosProperties11.isSerialJtaTransactions();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel17 = atomikosProperties11.getConsoleLogLevel();
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel17;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setAllowSubTransactions(true);
        boolean boolean22 = atomikosProperties19.enableLogging;
        boolean boolean23 = atomikosProperties19.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel24 = atomikosProperties19.consoleLogLevel;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel24;
        atomikosProperties0.setConsoleFileName("{1.0=-1, -1.0=100}");
        java.lang.String str28 = atomikosProperties0.logBaseDir;
        boolean boolean29 = atomikosProperties0.enableLogging;
        long long30 = atomikosProperties0.getCheckpointInterval();
        long long31 = atomikosProperties0.checkpointInterval;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertNotNull(properties12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel17 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel17.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel24 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel24.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 500L + "'", long30 == 500L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 500L + "'", long31 == 500L);
    }

    @Test
    public void test08231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08231");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        boolean boolean7 = atomikosProperties0.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery8 = atomikosProperties0.recovery;
        boolean boolean9 = atomikosProperties0.threadedTwoPhaseCommit;
        atomikosProperties0.service = "{-1.0=100}";
        atomikosProperties0.setThreadedTwoPhaseCommit(false);
        int int14 = atomikosProperties0.getMaxActives();
        atomikosProperties0.setTransactionManagerUniqueName("tm.out");
        atomikosProperties0.setLogBaseDir("tmlog");
        int int19 = atomikosProperties0.getMaxActives();
        atomikosProperties0.maxActives = (byte) -1;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(recovery8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 50 + "'", int14 == 50);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 50 + "'", int19 == 50);
    }

    @Test
    public void test08232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08232");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        atomikosProperties2.service = "{-1.0=100}";
        long long6 = atomikosProperties2.getDefaultJtaTimeout();
        atomikosProperties2.consoleFileLimit = '#';
        java.lang.Object obj9 = properties1.get((java.lang.Object) atomikosProperties2);
        boolean boolean10 = atomikosProperties2.forceShutdownOnVmExit;
        atomikosProperties2.setOutputDir("");
        boolean boolean13 = atomikosProperties2.forceShutdownOnVmExit;
        atomikosProperties2.setEnableLogging(false);
        long long16 = atomikosProperties2.getCheckpointInterval();
        int int17 = atomikosProperties2.maxActives;
        atomikosProperties2.setMaxActives(100);
        boolean boolean20 = atomikosProperties2.threadedTwoPhaseCommit;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 500L + "'", long16 == 500L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 50 + "'", int17 == 50);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test08233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08233");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.enableLogging = false;
        atomikosProperties0.setMaxTimeout((long) (byte) 0);
        atomikosProperties0.setService("tm.out");
        boolean boolean11 = atomikosProperties0.enableLogging;
        atomikosProperties0.defaultJtaTimeout = 5;
        atomikosProperties0.setService("{1.0=-1, ={1.0=-1}, -1.0=100}");
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test08234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08234");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj7 = properties0.clone();
        java.util.Set<java.lang.String> strSet8 = properties0.stringPropertyNames();
        java.util.Properties properties9 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        atomikosProperties10.service = "{-1.0=100}";
        java.lang.String str14 = atomikosProperties10.getTransactionManagerUniqueName();
        boolean boolean15 = atomikosProperties10.isSerialJtaTransactions();
        int int16 = atomikosProperties10.getConsoleFileLimit();
        java.util.Properties properties17 = new java.util.Properties();
        java.lang.String str18 = properties17.toString();
        java.lang.Object obj20 = properties17.remove((java.lang.Object) (short) 100);
        java.lang.Object obj23 = properties17.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean25 = properties17.containsKey((java.lang.Object) 0L);
        java.lang.Object obj28 = properties17.replace((java.lang.Object) false, (java.lang.Object) ' ');
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties29.setEnableLogging(true);
        atomikosProperties29.setConsoleFileLimit((int) (short) 0);
        boolean boolean34 = properties17.contains((java.lang.Object) atomikosProperties29);
        java.lang.Object obj35 = properties9.putIfAbsent((java.lang.Object) int16, (java.lang.Object) atomikosProperties29);
        boolean boolean36 = properties9.isEmpty();
        java.util.Properties properties37 = new java.util.Properties();
        java.lang.String str38 = properties37.toString();
        java.lang.Object obj40 = properties37.remove((java.lang.Object) (short) 100);
        java.lang.Object obj43 = properties37.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.util.Properties properties44 = new java.util.Properties();
        java.lang.String str45 = properties44.toString();
        java.lang.Object obj47 = properties44.remove((java.lang.Object) (short) 100);
        java.lang.Object obj50 = properties44.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        int int51 = properties44.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery52 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery52.retryInterval = (short) 100;
        recovery52.forgetOrphanedLogEntriesDelay = 'a';
        long long57 = recovery52.retryInterval;
        recovery52.setForgetOrphanedLogEntriesDelay((long) 0);
        java.lang.Object obj60 = properties37.replace((java.lang.Object) int51, (java.lang.Object) recovery52);
        int int61 = recovery52.maxRetries;
        recovery52.setRetryInterval(86400000L);
        long long64 = recovery52.forgetOrphanedLogEntriesDelay;
        java.lang.Object obj65 = properties9.get((java.lang.Object) long64);
        java.util.Set<java.lang.String> strSet66 = properties9.stringPropertyNames();
        java.util.Enumeration<java.lang.Object> objEnumeration67 = properties9.elements();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{1.0=-1}");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "{}" + "'", str18, "{}");
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "{}" + "'", str38, "{}");
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "{}" + "'", str45, "{}");
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 100L + "'", long57 == 100L);
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 5 + "'", int61 == 5);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertNotNull(strSet66);
        org.junit.Assert.assertNotNull(objEnumeration67);
    }

    @Test
    public void test08235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08235");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery4 = atomikosProperties0.recovery;
        atomikosProperties0.enableLogging = true;
        int int7 = atomikosProperties0.getConsoleFileCount();
        atomikosProperties0.outputDir = "hi!";
        atomikosProperties0.enableLogging = true;
        int int12 = atomikosProperties0.getConsoleFileCount();
        atomikosProperties0.maxTimeout = 300000L;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNotNull(recovery4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test08236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08236");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.outputDir = "{={-1.0=100}, -1.0=100}";
        boolean boolean3 = atomikosProperties0.isThreadedTwoPhaseCommit();
        atomikosProperties0.consoleFileLimit = 2;
        java.util.Properties properties6 = atomikosProperties0.asProperties();
        java.util.Set<java.lang.String> strSet7 = properties6.stringPropertyNames();
        java.io.Reader reader8 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties6.load(reader8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(properties6);
        org.junit.Assert.assertNotNull(strSet7);
    }

    @Test
    public void test08237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08237");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        int int7 = atomikosProperties0.maxActives;
        atomikosProperties0.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.getRecovery();
        atomikosProperties0.forceShutdownOnVmExit = false;
        java.util.Properties properties13 = atomikosProperties0.asProperties();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet14 = properties13.entrySet();
        java.util.Properties properties15 = new java.util.Properties();
        java.lang.String str16 = properties15.toString();
        java.lang.Object obj18 = properties15.remove((java.lang.Object) (short) 100);
        java.lang.Object obj19 = properties15.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean21 = atomikosProperties20.enableLogging;
        long long22 = atomikosProperties20.getDefaultJtaTimeout();
        java.lang.Object obj23 = properties13.put(obj19, (java.lang.Object) atomikosProperties20);
        int int24 = atomikosProperties20.maxActives;
        java.lang.String str25 = atomikosProperties20.getService();
        atomikosProperties20.checkpointInterval = 20;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertNotNull(properties13);
        org.junit.Assert.assertNotNull(objEntrySet14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{}" + "'", str16, "{}");
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "{}");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 10000L + "'", long22 == 10000L);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 50 + "'", int24 == 50);
        org.junit.Assert.assertNull(str25);
    }

    @Test
    public void test08238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08238");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        atomikosProperties2.service = "{-1.0=100}";
        long long6 = atomikosProperties2.getDefaultJtaTimeout();
        atomikosProperties2.consoleFileLimit = '#';
        java.lang.Object obj9 = properties1.get((java.lang.Object) atomikosProperties2);
        boolean boolean10 = atomikosProperties2.forceShutdownOnVmExit;
        atomikosProperties2.setOutputDir("");
        boolean boolean13 = atomikosProperties2.forceShutdownOnVmExit;
        atomikosProperties2.setEnableLogging(false);
        atomikosProperties2.logBaseName = "tmlog";
        atomikosProperties2.setSerialJtaTransactions(true);
        atomikosProperties2.setAllowSubTransactions(true);
        atomikosProperties2.setDefaultJtaTimeout((long) 100);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test08239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08239");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setEnableLogging(true);
        atomikosProperties0.consoleFileCount = 0;
        atomikosProperties0.setSerialJtaTransactions(false);
        atomikosProperties0.consoleFileCount = (short) 1;
        java.lang.String str9 = atomikosProperties0.outputDir;
        java.lang.String str10 = atomikosProperties0.getConsoleFileName();
        java.lang.String str11 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.logBaseDir = "{com.atomikos.icatch.tm.out={}}";
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "tm.out" + "'", str10, "tm.out");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "tm.out" + "'", str11, "tm.out");
    }

    @Test
    public void test08240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08240");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        boolean boolean7 = atomikosProperties0.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery8 = atomikosProperties0.recovery;
        boolean boolean9 = atomikosProperties0.threadedTwoPhaseCommit;
        atomikosProperties0.setOutputDir("tmlog");
        boolean boolean12 = atomikosProperties0.isAllowSubTransactions();
        atomikosProperties0.logBaseName = "";
        long long15 = atomikosProperties0.checkpointInterval;
        java.lang.String str16 = atomikosProperties0.getOutputDir();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(recovery8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 500L + "'", long15 == 500L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tmlog" + "'", str16, "tmlog");
    }

    @Test
    public void test08241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08241");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setEnableLogging(true);
        atomikosProperties0.consoleFileCount = 0;
        atomikosProperties0.setSerialJtaTransactions(false);
        atomikosProperties0.consoleFileCount = (short) 1;
        java.lang.String str9 = atomikosProperties0.outputDir;
        java.lang.String str10 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setForceShutdownOnVmExit(true);
        atomikosProperties0.defaultJtaTimeout = 21;
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test08242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08242");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileLimit = (byte) 10;
        long long7 = atomikosProperties0.maxTimeout;
        atomikosProperties0.setTransactionManagerUniqueName("{{}={}}");
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        atomikosProperties0.setMaxTimeout((long) 19);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
    }

    @Test
    public void test08243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08243");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setTransactionManagerUniqueName("{}");
        atomikosProperties0.enableLogging = true;
        java.lang.String str9 = atomikosProperties0.getService();
        atomikosProperties0.consoleFileName = "{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}";
        boolean boolean12 = atomikosProperties0.serialJtaTransactions;
        atomikosProperties0.setMaxActives((int) (byte) -1);
        boolean boolean15 = atomikosProperties0.serialJtaTransactions;
        java.lang.String str16 = atomikosProperties0.getLogBaseDir();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{-1.0=100}" + "'", str9, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test08244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08244");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setAllowSubTransactions(true);
        boolean boolean3 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.setConsoleFileCount(5);
        int int6 = atomikosProperties0.consoleFileLimit;
        java.lang.String str7 = atomikosProperties0.service;
        atomikosProperties0.transactionManagerUniqueName = "{1.0=-1}";
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test08245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08245");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.retryInterval = (short) 100;
        recovery0.delay = (-1L);
        long long5 = recovery0.delay;
        recovery0.delay = (short) 1;
        long long8 = recovery0.getRetryInterval();
        long long9 = recovery0.getForgetOrphanedLogEntriesDelay();
        recovery0.setMaxRetries(10);
        int int12 = recovery0.maxRetries;
        recovery0.setForgetOrphanedLogEntriesDelay((long) 32);
        long long15 = recovery0.delay;
        int int16 = recovery0.getMaxRetries();
        recovery0.retryInterval = 300000L;
        recovery0.setDelay(0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 86400000L + "'", long9 == 86400000L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
    }

    @Test
    public void test08246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08246");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getLogBaseName();
        java.lang.String str5 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.consoleFileName = "";
        atomikosProperties0.forceShutdownOnVmExit = false;
        boolean boolean10 = atomikosProperties0.isAllowSubTransactions();
        atomikosProperties0.setLogBaseName("{-1.0=100}");
        atomikosProperties0.transactionManagerUniqueName = "{100=100}";
        boolean boolean15 = atomikosProperties0.allowSubTransactions;
        java.util.Properties properties16 = new java.util.Properties();
        java.lang.Object obj19 = properties16.setProperty("{}", "{}");
        java.util.Enumeration<java.lang.Object> objEnumeration20 = properties16.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration21 = properties16.elements();
        java.util.Properties properties22 = new java.util.Properties(properties16);
        java.util.Set<java.lang.String> strSet23 = properties22.stringPropertyNames();
        java.util.Set<java.lang.String> strSet24 = properties22.stringPropertyNames();
        java.util.Properties properties26 = new java.util.Properties();
        java.lang.String str27 = properties26.toString();
        java.lang.Object obj29 = properties26.remove((java.lang.Object) (short) 100);
        java.lang.Object obj32 = properties26.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean34 = properties26.containsKey((java.lang.Object) 0L);
        java.lang.Object obj37 = properties26.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj40 = properties26.setProperty("", "{-1.0=100}");
        java.lang.Object obj41 = properties26.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery42 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery42.retryInterval = (short) 100;
        recovery42.forgetOrphanedLogEntriesDelay = 'a';
        boolean boolean47 = properties26.equals((java.lang.Object) 'a');
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery48 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long49 = recovery48.getRetryInterval();
        long long50 = recovery48.getDelay();
        long long51 = recovery48.getDelay();
        recovery48.retryInterval = 100L;
        boolean boolean54 = properties26.contains((java.lang.Object) recovery48);
        recovery48.maxRetries = 32;
        atomikosProperties0.set(properties22, "{1.0=-1, -1.0=100}", (java.lang.Object) 32);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties58 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties59 = atomikosProperties58.asProperties();
        atomikosProperties58.service = "{-1.0=100}";
        java.lang.String str62 = atomikosProperties58.getLogBaseName();
        long long63 = atomikosProperties58.defaultJtaTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel64 = null;
        atomikosProperties58.setConsoleLogLevel(atomikosLoggingLevel64);
        atomikosProperties58.service = "";
        atomikosProperties58.forceShutdownOnVmExit = true;
        java.lang.Object obj70 = properties22.get((java.lang.Object) true);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tmlog" + "'", str4, "tmlog");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNotNull(objEnumeration20);
        org.junit.Assert.assertNotNull(objEnumeration21);
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "{}" + "'", str27, "{}");
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNotNull(obj41);
// flaky:         org.junit.Assert.assertEquals(obj41.toString(), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 10000L + "'", long49 == 10000L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 10000L + "'", long50 == 10000L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 10000L + "'", long51 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(properties59);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "tmlog" + "'", str62, "tmlog");
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 10000L + "'", long63 == 10000L);
        org.junit.Assert.assertNull(obj70);
    }

    @Test
    public void test08247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08247");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.retryInterval = (short) 100;
        recovery0.forgetOrphanedLogEntriesDelay = 'a';
        long long5 = recovery0.getDelay();
        long long6 = recovery0.getRetryInterval();
        int int7 = recovery0.getMaxRetries();
        recovery0.maxRetries = 18;
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 10000L + "'", long5 == 10000L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 100L + "'", long6 == 100L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 5 + "'", int7 == 5);
    }

    @Test
    public void test08248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08248");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj3 = properties0.setProperty("{}", "{}");
        java.util.Enumeration<java.lang.Object> objEnumeration4 = properties0.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties0.elements();
        java.util.Properties properties6 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties7.setEnableLogging(true);
        atomikosProperties7.setConsoleFileLimit((int) (short) 0);
        atomikosProperties7.outputDir = "tmlog";
        java.lang.String str14 = atomikosProperties7.getOutputDir();
        boolean boolean15 = properties0.contains((java.lang.Object) str14);
        java.io.InputStream inputStream16 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.load(inputStream16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNotNull(objEnumeration4);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "tmlog" + "'", str14, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test08249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08249");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties();
        java.lang.String str2 = properties1.toString();
        boolean boolean3 = properties1.isEmpty();
        java.util.Properties properties4 = new java.util.Properties();
        java.lang.String str5 = properties4.toString();
        java.lang.Object obj7 = properties4.remove((java.lang.Object) (short) 100);
        java.lang.Object obj10 = properties4.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean12 = properties4.containsKey((java.lang.Object) 0L);
        boolean boolean13 = properties1.containsValue((java.lang.Object) 0L);
        boolean boolean16 = properties0.replace((java.lang.Object) 0L, (java.lang.Object) 0.0f, (java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration17 = properties0.elements();
        java.lang.Class<?> wildcardClass18 = properties0.getClass();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{}" + "'", str2, "{}");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{}" + "'", str5, "{}");
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objEnumeration17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test08250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08250");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        long long7 = atomikosProperties0.maxTimeout;
        boolean boolean8 = atomikosProperties0.isThreadedTwoPhaseCommit();
        atomikosProperties0.setCheckpointInterval(1L);
        atomikosProperties0.setOutputDir("{}");
        atomikosProperties0.allowSubTransactions = true;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test08251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08251");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getLogBaseName();
        long long5 = atomikosProperties0.defaultJtaTimeout;
        long long6 = atomikosProperties0.getMaxTimeout();
        boolean boolean7 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.setService("{-1.0=100}");
        atomikosProperties0.setOutputDir("{}");
        atomikosProperties0.setConsoleFileLimit((int) (byte) 1);
        atomikosProperties0.threadedTwoPhaseCommit = true;
        java.lang.String str16 = atomikosProperties0.logBaseName;
        atomikosProperties0.checkpointInterval = ' ';
        java.lang.String str19 = atomikosProperties0.consoleFileName;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tmlog" + "'", str4, "tmlog");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 10000L + "'", long5 == 10000L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 300000L + "'", long6 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tmlog" + "'", str16, "tmlog");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "tm.out" + "'", str19, "tm.out");
    }

    @Test
    public void test08252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08252");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj3 = properties0.setProperty("{}", "{}");
        java.util.Enumeration<java.lang.Object> objEnumeration4 = properties0.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties0.elements();
        java.util.Properties properties6 = new java.util.Properties(properties0);
        java.util.Set<java.lang.Object> objSet7 = properties0.keySet();
        java.util.Set<java.lang.String> strSet8 = properties0.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery9 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery9.retryInterval = (short) 100;
        recovery9.forgetOrphanedLogEntriesDelay = 'a';
        long long14 = recovery9.retryInterval;
        int int15 = recovery9.maxRetries;
        boolean boolean16 = properties0.containsKey((java.lang.Object) int15);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties18 = atomikosProperties17.asProperties();
        atomikosProperties17.service = "{-1.0=100}";
        long long21 = atomikosProperties17.getDefaultJtaTimeout();
        atomikosProperties17.setThreadedTwoPhaseCommit(true);
        boolean boolean24 = atomikosProperties17.isAllowSubTransactions();
        boolean boolean25 = atomikosProperties17.isEnableLogging();
        atomikosProperties17.allowSubTransactions = false;
        atomikosProperties17.threadedTwoPhaseCommit = true;
        atomikosProperties17.setLogBaseName("tm.out");
        java.lang.String str32 = atomikosProperties17.getLogBaseDir();
        atomikosProperties17.allowSubTransactions = true;
        boolean boolean35 = properties0.containsKey((java.lang.Object) atomikosProperties17);
        java.lang.String str36 = properties0.toString();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNotNull(objEnumeration4);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNotNull(objSet7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 100L + "'", long14 == 100L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5 + "'", int15 == 5);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10000L + "'", long21 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "{{}={}}" + "'", str36, "{{}={}}");
    }

    @Test
    public void test08253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08253");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.remove((java.lang.Object) (-1.0d));
        boolean boolean3 = properties0.isEmpty();
        java.util.Properties properties4 = new java.util.Properties();
        java.lang.String str5 = properties4.toString();
        java.lang.Object obj7 = properties4.remove((java.lang.Object) (short) 100);
        java.lang.Object obj10 = properties4.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean12 = properties4.containsKey((java.lang.Object) 0L);
        java.lang.Object obj15 = properties4.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties16 = new java.util.Properties();
        java.lang.String str17 = properties16.toString();
        java.lang.Object obj19 = properties16.remove((java.lang.Object) (short) 100);
        java.lang.Object obj22 = properties16.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj23 = properties16.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration24 = properties16.elements();
        properties4.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties16);
        java.lang.Object obj26 = properties16.clone();
        properties16.clear();
        int int28 = properties16.size();
        java.util.Properties properties29 = new java.util.Properties();
        java.lang.String str30 = properties29.toString();
        java.lang.Object obj32 = properties29.remove((java.lang.Object) (short) 100);
        java.lang.Object obj35 = properties29.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj36 = properties29.clone();
        java.util.Set<java.lang.String> strSet37 = properties29.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery38 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery38.retryInterval = (short) 100;
        recovery38.delay = (-1L);
        long long43 = recovery38.delay;
        recovery38.delay = (short) 1;
        long long46 = recovery38.getRetryInterval();
        int int47 = recovery38.maxRetries;
        int int48 = recovery38.maxRetries;
        long long49 = recovery38.forgetOrphanedLogEntriesDelay;
        java.util.Properties properties50 = new java.util.Properties();
        java.lang.Object obj52 = properties50.remove((java.lang.Object) (-1.0d));
        boolean boolean53 = properties50.isEmpty();
        int int54 = properties50.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery55 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery55.retryInterval = (short) 100;
        recovery55.forgetOrphanedLogEntriesDelay = 'a';
        java.util.Properties properties60 = new java.util.Properties();
        java.lang.Object obj62 = properties60.remove((java.lang.Object) (-1.0d));
        boolean boolean63 = properties60.isEmpty();
        int int64 = properties60.size();
        java.lang.String str66 = properties60.getProperty("{}");
        boolean boolean67 = properties50.remove((java.lang.Object) recovery55, (java.lang.Object) properties60);
        java.lang.Object obj68 = properties29.putIfAbsent((java.lang.Object) long49, (java.lang.Object) properties50);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties69 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties69.setAllowSubTransactions(true);
        atomikosProperties69.maxActives = (short) -1;
        atomikosProperties69.setLogBaseDir("{-1.0=100}");
        boolean boolean76 = properties0.replace((java.lang.Object) properties16, (java.lang.Object) long49, (java.lang.Object) "{-1.0=100}");
        java.lang.Object obj79 = properties16.setProperty("tm.out", "{1.0=-1, 10000=0}");
        java.lang.Object obj80 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean81 = properties16.contains(obj80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{}" + "'", str5, "{}");
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "{}" + "'", str17, "{}");
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration24);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "{1.0=-1}");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "{}" + "'", str30, "{}");
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "{1.0=-1}");
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-1L) + "'", long43 == (-1L));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 100L + "'", long46 == 100L);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 5 + "'", int47 == 5);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 5 + "'", int48 == 5);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 86400000L + "'", long49 == 86400000L);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(obj68);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(obj79);
    }

    @Test
    public void test08254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08254");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileName = "hi!";
        atomikosProperties0.service = "tm.out";
        java.lang.String str9 = atomikosProperties0.getOutputDir();
        boolean boolean10 = atomikosProperties0.serialJtaTransactions;
        boolean boolean11 = atomikosProperties0.isSerialJtaTransactions();
        java.lang.String str12 = atomikosProperties0.consoleFileName;
        atomikosProperties0.setDefaultJtaTimeout((long) (short) 1);
        boolean boolean15 = atomikosProperties0.serialJtaTransactions;
        java.util.Properties properties16 = atomikosProperties0.asProperties();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(properties16);
    }

    @Test
    public void test08255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08255");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.checkpointInterval = 86400000L;
        long long4 = atomikosProperties0.checkpointInterval;
        long long5 = atomikosProperties0.maxTimeout;
        atomikosProperties0.setMaxTimeout((long) (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 86400000L + "'", long4 == 86400000L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
    }

    @Test
    public void test08256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08256");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties13 = atomikosProperties12.asProperties();
        atomikosProperties12.service = "{-1.0=100}";
        long long16 = atomikosProperties12.getDefaultJtaTimeout();
        atomikosProperties12.serialJtaTransactions = true;
        long long19 = atomikosProperties12.maxTimeout;
        atomikosProperties12.setLogBaseDir("{-1.0=100}");
        int int22 = atomikosProperties12.getConsoleFileCount();
        atomikosProperties12.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties26 = atomikosProperties25.asProperties();
        atomikosProperties25.service = "{-1.0=100}";
        long long29 = atomikosProperties25.getDefaultJtaTimeout();
        atomikosProperties25.setTransactionManagerUniqueName("{}");
        atomikosProperties25.consoleFileName = "hi!";
        int int34 = atomikosProperties25.getConsoleFileCount();
        boolean boolean35 = atomikosProperties25.isThreadedTwoPhaseCommit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel36 = atomikosProperties25.consoleLogLevel;
        atomikosProperties12.consoleLogLevel = atomikosLoggingLevel36;
        atomikosProperties12.setMaxTimeout(500L);
        atomikosProperties12.consoleFileLimit = 18;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties42.setAllowSubTransactions(true);
        java.lang.String str45 = atomikosProperties42.transactionManagerUniqueName;
        java.lang.String str46 = atomikosProperties42.consoleFileName;
        long long47 = atomikosProperties42.getDefaultJtaTimeout();
        java.lang.String str48 = atomikosProperties42.getConsoleFileName();
        atomikosProperties42.serialJtaTransactions = true;
        boolean boolean51 = properties0.remove((java.lang.Object) atomikosProperties12, (java.lang.Object) atomikosProperties42);
        java.io.InputStream inputStream52 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.loadFromXML(inputStream52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNotNull(properties13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10000L + "'", long16 == 10000L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 300000L + "'", long19 == 300000L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(properties26);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 10000L + "'", long29 == 10000L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel36 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel36.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "tm.out" + "'", str46, "tm.out");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 10000L + "'", long47 == 10000L);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "tm.out" + "'", str48, "tm.out");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test08257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08257");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileLimit = (byte) 10;
        long long7 = atomikosProperties0.getMaxTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel8 = null;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel8;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.recovery;
        atomikosProperties0.consoleFileCount = (short) -1;
        boolean boolean13 = atomikosProperties0.isAllowSubTransactions();
        atomikosProperties0.setSerialJtaTransactions(true);
        long long16 = atomikosProperties0.checkpointInterval;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 500L + "'", long16 == 500L);
    }

    @Test
    public void test08258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08258");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        properties0.clear();
        java.util.Set<java.lang.Object> objSet3 = properties0.keySet();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNotNull(objSet3);
    }

    @Test
    public void test08259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08259");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setAllowSubTransactions(true);
        java.lang.String str3 = atomikosProperties0.transactionManagerUniqueName;
        int int4 = atomikosProperties0.getConsoleFileLimit();
        java.lang.String str5 = atomikosProperties0.logBaseDir;
        long long6 = atomikosProperties0.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel7 = atomikosProperties0.consoleLogLevel;
        java.lang.String str8 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.serialJtaTransactions = true;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery11 = atomikosProperties0.getRecovery();
        atomikosProperties0.setService("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=true, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=35, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=10, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={-1.0=100}, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel7 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel7.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "tm.out" + "'", str8, "tm.out");
        org.junit.Assert.assertNotNull(recovery11);
    }

    @Test
    public void test08260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08260");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        atomikosProperties0.setConsoleFileCount((int) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel8 = null;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel8;
        java.lang.String str10 = atomikosProperties0.logBaseDir;
        atomikosProperties0.checkpointInterval = (byte) 0;
        java.lang.String str13 = atomikosProperties0.getTransactionManagerUniqueName();
        java.lang.String str14 = atomikosProperties0.getOutputDir();
        java.lang.String str15 = atomikosProperties0.getTransactionManagerUniqueName();
        boolean boolean16 = atomikosProperties0.allowSubTransactions;
        java.lang.String str17 = atomikosProperties0.getService();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test08261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08261");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        atomikosProperties0.setConsoleFileCount((int) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel8 = null;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel8;
        java.lang.String str10 = atomikosProperties0.logBaseDir;
        atomikosProperties0.checkpointInterval = (byte) 0;
        java.lang.String str13 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.serialJtaTransactions = true;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel16 = atomikosProperties0.getConsoleLogLevel();
        java.lang.String str17 = atomikosProperties0.consoleFileName;
        atomikosProperties0.setForceShutdownOnVmExit(true);
        atomikosProperties0.setCheckpointInterval((long) 100);
        java.lang.String str22 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.maxActives = (short) 1;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(atomikosLoggingLevel16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tm.out" + "'", str17, "tm.out");
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test08262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08262");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setAllowSubTransactions(true);
        atomikosProperties0.logBaseName = "{={-1.0=100}, -1.0=100}";
        int int5 = atomikosProperties0.getConsoleFileLimit();
        int int6 = atomikosProperties0.consoleFileCount;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties8 = atomikosProperties7.asProperties();
        atomikosProperties7.service = "{-1.0=100}";
        long long11 = atomikosProperties7.getDefaultJtaTimeout();
        atomikosProperties7.serialJtaTransactions = true;
        long long14 = atomikosProperties7.maxTimeout;
        atomikosProperties7.setLogBaseDir("{-1.0=100}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties17.setAllowSubTransactions(true);
        atomikosProperties17.maxActives = (short) -1;
        atomikosProperties17.setService("tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties24.setAllowSubTransactions(true);
        boolean boolean27 = atomikosProperties24.enableLogging;
        boolean boolean28 = atomikosProperties24.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel29 = atomikosProperties24.consoleLogLevel;
        atomikosProperties17.setConsoleLogLevel(atomikosLoggingLevel29);
        atomikosProperties7.consoleLogLevel = atomikosLoggingLevel29;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel29);
        java.lang.String str33 = atomikosProperties0.service;
        atomikosProperties0.setMaxActives(0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10000L + "'", long11 == 10000L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 300000L + "'", long14 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel29 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel29.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(str33);
    }

    @Test
    public void test08263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08263");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        java.lang.String str6 = atomikosProperties0.getOutputDir();
        int int7 = atomikosProperties0.getMaxActives();
        boolean boolean8 = atomikosProperties0.allowSubTransactions;
        int int9 = atomikosProperties0.maxActives;
        boolean boolean10 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.setLogBaseDir("{100=100}");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test08264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08264");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.remove((java.lang.Object) (-1.0d));
        boolean boolean3 = properties0.isEmpty();
        java.util.Properties properties4 = new java.util.Properties();
        java.lang.String str5 = properties4.toString();
        java.lang.Object obj7 = properties4.remove((java.lang.Object) (short) 100);
        java.lang.Object obj10 = properties4.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean12 = properties4.containsKey((java.lang.Object) 0L);
        java.lang.Object obj15 = properties4.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj18 = properties4.setProperty("", "{-1.0=100}");
        java.lang.Object obj19 = properties4.clone();
        java.lang.Object obj20 = properties0.get((java.lang.Object) properties4);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties21.setEnableLogging(true);
        atomikosProperties21.consoleFileCount = 0;
        int int26 = atomikosProperties21.getMaxActives();
        java.lang.String str27 = atomikosProperties21.getLogBaseDir();
        java.lang.String str28 = atomikosProperties21.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery29 = atomikosProperties21.getRecovery();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties31 = atomikosProperties30.asProperties();
        atomikosProperties30.service = "{-1.0=100}";
        long long34 = atomikosProperties30.getDefaultJtaTimeout();
        atomikosProperties30.setThreadedTwoPhaseCommit(true);
        boolean boolean37 = atomikosProperties30.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery38 = atomikosProperties30.recovery;
        atomikosProperties30.setLogBaseDir("");
        java.lang.Object obj41 = properties4.replace((java.lang.Object) recovery29, (java.lang.Object) "");
        java.util.Properties properties42 = new java.util.Properties();
        java.lang.Object obj44 = properties42.remove((java.lang.Object) (-1.0d));
        boolean boolean46 = properties42.contains((java.lang.Object) "{-1.0=100}");
        boolean boolean47 = properties4.equals((java.lang.Object) "{-1.0=100}");
        properties4.clear();
        java.util.Properties properties49 = new java.util.Properties();
        java.lang.String str50 = properties49.toString();
        java.lang.Object obj52 = properties49.remove((java.lang.Object) (short) 100);
        java.lang.Object obj55 = properties49.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean57 = properties49.containsKey((java.lang.Object) 0L);
        java.lang.Object obj60 = properties49.replace((java.lang.Object) false, (java.lang.Object) ' ');
        boolean boolean61 = properties49.isEmpty();
        boolean boolean62 = properties49.isEmpty();
        boolean boolean63 = properties4.containsKey((java.lang.Object) boolean62);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties64 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean65 = atomikosProperties64.isSerialJtaTransactions();
        atomikosProperties64.logBaseName = "{-1.0=100}";
        int int68 = atomikosProperties64.maxActives;
        int int69 = atomikosProperties64.consoleFileCount;
        atomikosProperties64.transactionManagerUniqueName = "tm.out";
        atomikosProperties64.consoleFileName = "tm.out";
        atomikosProperties64.allowSubTransactions = false;
        boolean boolean76 = atomikosProperties64.allowSubTransactions;
        boolean boolean77 = properties4.containsValue((java.lang.Object) boolean76);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties78 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties79 = atomikosProperties78.asProperties();
        atomikosProperties78.service = "{-1.0=100}";
        atomikosProperties78.setTransactionManagerUniqueName("{}");
        int int84 = atomikosProperties78.getMaxActives();
        boolean boolean85 = atomikosProperties78.forceShutdownOnVmExit;
        java.lang.Object obj86 = properties4.get((java.lang.Object) boolean85);
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{}" + "'", str5, "{}");
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(obj19);
// flaky:         org.junit.Assert.assertEquals(obj19.toString(), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 50 + "'", int26 == 50);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(recovery29);
        org.junit.Assert.assertNotNull(properties31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 10000L + "'", long34 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(recovery38);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "{}" + "'", str50, "{}");
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 50 + "'", int68 == 50);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(properties79);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 50 + "'", int84 == 50);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNull(obj86);
    }

    @Test
    public void test08265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08265");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileName = "hi!";
        atomikosProperties0.service = "tm.out";
        atomikosProperties0.logBaseName = "tm.out";
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        atomikosProperties0.setThreadedTwoPhaseCommit(false);
        boolean boolean15 = atomikosProperties0.isThreadedTwoPhaseCommit();
        boolean boolean16 = atomikosProperties0.enableLogging;
        java.lang.String str17 = atomikosProperties0.getTransactionManagerUniqueName();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test08266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08266");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        atomikosProperties0.maxActives = ' ';
        int int9 = atomikosProperties0.getConsoleFileCount();
        int int10 = atomikosProperties0.consoleFileLimit;
        java.util.Properties properties11 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean13 = atomikosProperties12.isSerialJtaTransactions();
        atomikosProperties12.logBaseName = "{-1.0=100}";
        int int16 = atomikosProperties12.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery17 = atomikosProperties12.getRecovery();
        atomikosProperties12.setConsoleFileCount((int) (byte) 100);
        atomikosProperties12.setAllowSubTransactions(true);
        atomikosProperties12.setService("tm.out");
        boolean boolean24 = atomikosProperties12.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel25 = atomikosProperties12.getConsoleLogLevel();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties26.setAllowSubTransactions(true);
        boolean boolean29 = atomikosProperties26.enableLogging;
        atomikosProperties26.consoleFileLimit = (byte) 100;
        java.util.Properties properties32 = new java.util.Properties();
        java.lang.String str33 = properties32.toString();
        java.util.Properties properties34 = new java.util.Properties(properties32);
        java.util.Properties properties36 = new java.util.Properties();
        java.lang.String str37 = properties36.toString();
        java.lang.Object obj39 = properties36.remove((java.lang.Object) (short) 100);
        java.lang.Object obj42 = properties36.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean44 = properties36.containsKey((java.lang.Object) 0L);
        java.lang.Object obj47 = properties36.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties48 = new java.util.Properties(properties36);
        java.util.Enumeration<java.lang.Object> objEnumeration49 = properties48.elements();
        atomikosProperties26.set(properties34, "{={-1.0=100}, -1.0=100}", (java.lang.Object) properties48);
        atomikosProperties26.allowSubTransactions = false;
        java.lang.Object obj53 = properties11.put((java.lang.Object) atomikosProperties12, (java.lang.Object) false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties54 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties55 = atomikosProperties54.asProperties();
        atomikosProperties54.service = "{-1.0=100}";
        long long58 = atomikosProperties54.getDefaultJtaTimeout();
        long long59 = atomikosProperties54.getMaxTimeout();
        int int60 = atomikosProperties54.consoleFileCount;
        atomikosProperties54.setConsoleFileCount(0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties63 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties64 = atomikosProperties63.asProperties();
        atomikosProperties63.service = "{-1.0=100}";
        long long67 = atomikosProperties63.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel68 = null;
        atomikosProperties63.setConsoleLogLevel(atomikosLoggingLevel68);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel70 = null;
        atomikosProperties63.setConsoleLogLevel(atomikosLoggingLevel70);
        atomikosProperties63.setLogBaseName("{={-1.0=100}, -1.0=100}");
        boolean boolean74 = atomikosProperties63.enableLogging;
        java.lang.Object obj75 = properties11.replace((java.lang.Object) atomikosProperties54, (java.lang.Object) atomikosProperties63);
        atomikosProperties54.setLogBaseName("");
        atomikosProperties54.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties54.setMaxActives(10);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 50 + "'", int16 == 50);
        org.junit.Assert.assertNotNull(recovery17);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel25 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel25.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "{}" + "'", str33, "{}");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "{}" + "'", str37, "{}");
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNotNull(objEnumeration49);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertNotNull(properties55);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 10000L + "'", long58 == 10000L);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 300000L + "'", long59 == 300000L);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(properties64);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 10000L + "'", long67 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNull(obj75);
    }

    @Test
    public void test08267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08267");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setTransactionManagerUniqueName("{}");
        atomikosProperties0.consoleFileName = "hi!";
        int int9 = atomikosProperties0.getConsoleFileCount();
        boolean boolean10 = atomikosProperties0.isThreadedTwoPhaseCommit();
        atomikosProperties0.maxTimeout = 0;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean14 = atomikosProperties13.isSerialJtaTransactions();
        atomikosProperties13.logBaseName = "{-1.0=100}";
        int int17 = atomikosProperties13.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery18 = atomikosProperties13.getRecovery();
        atomikosProperties13.setConsoleFileCount((int) (byte) 100);
        atomikosProperties13.setAllowSubTransactions(true);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean24 = atomikosProperties23.isThreadedTwoPhaseCommit();
        long long25 = atomikosProperties23.getCheckpointInterval();
        atomikosProperties23.setCheckpointInterval((long) 5);
        java.util.Properties properties28 = new java.util.Properties();
        java.lang.String str29 = properties28.toString();
        java.lang.Object obj31 = properties28.remove((java.lang.Object) (short) 100);
        java.lang.Object obj34 = properties28.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean36 = properties28.containsKey((java.lang.Object) 0L);
        java.lang.String str37 = properties28.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties39 = atomikosProperties38.asProperties();
        atomikosProperties38.service = "{-1.0=100}";
        long long42 = atomikosProperties38.getDefaultJtaTimeout();
        atomikosProperties38.setMaxActives(0);
        atomikosProperties38.maxActives = 'a';
        boolean boolean47 = atomikosProperties38.isThreadedTwoPhaseCommit();
        boolean boolean48 = atomikosProperties38.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel49 = atomikosProperties38.consoleLogLevel;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties51 = atomikosProperties50.asProperties();
        atomikosProperties50.service = "{-1.0=100}";
        long long54 = atomikosProperties50.getDefaultJtaTimeout();
        atomikosProperties50.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties50.setMaxActives(100);
        java.lang.String str59 = atomikosProperties50.logBaseDir;
        java.lang.String str60 = atomikosProperties50.outputDir;
        java.lang.Object obj61 = properties28.replace((java.lang.Object) atomikosLoggingLevel49, (java.lang.Object) atomikosProperties50);
        atomikosProperties23.consoleLogLevel = atomikosLoggingLevel49;
        atomikosProperties13.setConsoleLogLevel(atomikosLoggingLevel49);
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel49;
        atomikosProperties0.setLogBaseName("{-1.0=100}");
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 50 + "'", int17 == 50);
        org.junit.Assert.assertNotNull(recovery18);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 500L + "'", long25 == 500L);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "{}" + "'", str29, "{}");
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "{-1.0=100}" + "'", str37, "{-1.0=100}");
        org.junit.Assert.assertNotNull(properties39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 10000L + "'", long42 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel49 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel49.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(properties51);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 10000L + "'", long54 == 10000L);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "{={-1.0=100}, -1.0=100}" + "'", str60, "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNull(obj61);
    }

    @Test
    public void test08268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08268");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileName = "hi!";
        atomikosProperties0.setCheckpointInterval((long) 5);
        atomikosProperties0.setConsoleFileCount(0);
        atomikosProperties0.setService("{-1.0=100}");
        atomikosProperties0.setDefaultJtaTimeout((long) 100);
        atomikosProperties0.defaultJtaTimeout = 32;
        atomikosProperties0.setService("{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}");
        atomikosProperties0.serialJtaTransactions = true;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test08269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08269");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        atomikosProperties2.service = "{-1.0=100}";
        long long6 = atomikosProperties2.getDefaultJtaTimeout();
        atomikosProperties2.consoleFileLimit = '#';
        java.lang.Object obj9 = properties1.get((java.lang.Object) atomikosProperties2);
        boolean boolean10 = atomikosProperties2.forceShutdownOnVmExit;
        java.util.Properties properties11 = new java.util.Properties();
        java.lang.String str12 = properties11.toString();
        java.lang.Object obj14 = properties11.remove((java.lang.Object) (short) 100);
        java.lang.Object obj17 = properties11.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj18 = properties11.clone();
        java.lang.String str20 = properties11.getProperty("{}");
        java.lang.Object obj23 = properties11.put((java.lang.Object) 86400000L, (java.lang.Object) "{-1.0=100}");
        atomikosProperties2.set(properties11, "tmlog", (java.lang.Object) 5L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties28 = atomikosProperties27.asProperties();
        atomikosProperties27.service = "{-1.0=100}";
        long long31 = atomikosProperties27.getDefaultJtaTimeout();
        atomikosProperties27.setThreadedTwoPhaseCommit(true);
        java.lang.String str34 = atomikosProperties27.getLogBaseName();
        java.lang.String str35 = atomikosProperties27.consoleFileName;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean37 = atomikosProperties36.isSerialJtaTransactions();
        atomikosProperties36.logBaseName = "{-1.0=100}";
        int int40 = atomikosProperties36.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery41 = atomikosProperties36.getRecovery();
        atomikosProperties36.setConsoleFileCount((int) (byte) 100);
        atomikosProperties36.setAllowSubTransactions(true);
        atomikosProperties36.setService("tm.out");
        int int48 = atomikosProperties36.consoleFileLimit;
        atomikosProperties36.setLogBaseName("");
        java.util.Properties properties51 = new java.util.Properties();
        java.util.Enumeration<?> wildcardEnumeration52 = properties51.propertyNames();
        java.lang.Object obj53 = properties51.clone();
        java.util.Collection<java.lang.Object> objCollection54 = properties51.values();
        boolean boolean55 = properties11.replace((java.lang.Object) str35, (java.lang.Object) atomikosProperties36, (java.lang.Object) objCollection54);
        java.util.Properties properties56 = new java.util.Properties();
        java.lang.String str57 = properties56.toString();
        boolean boolean58 = properties56.isEmpty();
        java.lang.Object obj61 = properties56.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Set<java.lang.Object> objSet62 = properties56.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties64 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties65 = atomikosProperties64.asProperties();
        atomikosProperties64.service = "{-1.0=100}";
        java.lang.String str68 = atomikosProperties64.getTransactionManagerUniqueName();
        atomikosProperties64.consoleFileName = "hi!";
        atomikosProperties64.setCheckpointInterval((long) 5);
        atomikosProperties64.setConsoleFileCount(0);
        boolean boolean75 = atomikosProperties64.isThreadedTwoPhaseCommit();
        atomikosProperties64.consoleFileLimit = 5;
        atomikosProperties64.maxActives = 18;
        atomikosProperties36.set(properties56, "{{={-1.0=100}, -1.0=100}=}", (java.lang.Object) atomikosProperties64);
        atomikosProperties36.setService("{0={100=100}, {}={}}");
        atomikosProperties36.setMaxActives((int) 'a');
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "{}" + "'", str12, "{}");
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "{1.0=-1}");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNotNull(properties28);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 10000L + "'", long31 == 10000L);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "tmlog" + "'", str34, "tmlog");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "tm.out" + "'", str35, "tm.out");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 50 + "'", int40 == 50);
        org.junit.Assert.assertNotNull(recovery41);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(wildcardEnumeration52);
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertEquals(obj53.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj53), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj53), "{}");
        org.junit.Assert.assertNotNull(objCollection54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "{}" + "'", str57, "{}");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNull(obj61);
        org.junit.Assert.assertNotNull(objSet62);
        org.junit.Assert.assertNotNull(properties65);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test08270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08270");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj14 = properties0.setProperty("", "{-1.0=100}");
        boolean boolean15 = properties0.isEmpty();
        java.util.Properties properties16 = new java.util.Properties();
        java.lang.String str17 = properties16.toString();
        java.util.Properties properties18 = new java.util.Properties(properties16);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet19 = properties18.entrySet();
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.Object obj23 = properties21.remove((java.lang.Object) (-1.0d));
        int int24 = properties21.size();
        boolean boolean25 = properties0.replace((java.lang.Object) properties18, (java.lang.Object) 100L, (java.lang.Object) properties21);
        java.util.Enumeration<?> wildcardEnumeration26 = properties21.propertyNames();
        java.util.Enumeration<?> wildcardEnumeration27 = properties21.propertyNames();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "{}" + "'", str17, "{}");
        org.junit.Assert.assertNotNull(objEntrySet19);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(wildcardEnumeration26);
        org.junit.Assert.assertNotNull(wildcardEnumeration27);
    }

    @Test
    public void test08271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08271");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.util.Properties properties3 = new java.util.Properties();
        java.lang.String str4 = properties3.toString();
        java.lang.Object obj6 = properties3.remove((java.lang.Object) (short) 100);
        java.lang.Object obj9 = properties3.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean11 = properties3.containsKey((java.lang.Object) 0L);
        java.lang.Object obj14 = properties3.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj17 = properties3.setProperty("", "{-1.0=100}");
        java.util.Enumeration<java.lang.Object> objEnumeration18 = properties3.keys();
        java.util.Properties properties19 = new java.util.Properties();
        java.lang.String str20 = properties19.toString();
        boolean boolean21 = properties19.isEmpty();
        java.lang.Object obj24 = properties19.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration25 = properties19.elements();
        java.lang.Object obj26 = properties2.replace((java.lang.Object) objEnumeration18, (java.lang.Object) properties19);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties19.elements();
        java.util.Properties properties28 = new java.util.Properties(properties19);
        java.util.Properties properties29 = new java.util.Properties();
        java.lang.String str30 = properties29.toString();
        java.lang.Object obj32 = properties29.remove((java.lang.Object) (short) 100);
        java.lang.Object obj35 = properties29.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean37 = properties29.containsKey((java.lang.Object) 0L);
        java.lang.Object obj40 = properties29.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties41 = new java.util.Properties();
        java.lang.String str42 = properties41.toString();
        java.lang.Object obj44 = properties41.remove((java.lang.Object) (short) 100);
        java.lang.Object obj47 = properties41.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj48 = properties41.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration49 = properties41.elements();
        properties29.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties41);
        java.lang.Object obj51 = properties41.clone();
        properties41.clear();
        java.util.Enumeration<?> wildcardEnumeration53 = properties41.propertyNames();
        boolean boolean54 = properties19.contains((java.lang.Object) wildcardEnumeration53);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties55 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties56 = atomikosProperties55.asProperties();
        atomikosProperties55.service = "{-1.0=100}";
        long long59 = atomikosProperties55.getDefaultJtaTimeout();
        atomikosProperties55.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties55.setMaxActives(100);
        java.lang.String str64 = atomikosProperties55.logBaseDir;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties65 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean66 = atomikosProperties65.isSerialJtaTransactions();
        boolean boolean67 = atomikosProperties65.allowSubTransactions;
        java.lang.Object obj68 = properties19.getOrDefault((java.lang.Object) atomikosProperties55, (java.lang.Object) atomikosProperties65);
        properties19.clear();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{}" + "'", str4, "{}");
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(objEnumeration18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{}" + "'", str20, "{}");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(objEnumeration25);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "{}" + "'", str30, "{}");
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "{}" + "'", str42, "{}");
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertEquals(obj48.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj48), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj48), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration49);
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertEquals(obj51.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj51), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj51), "{1.0=-1}");
        org.junit.Assert.assertNotNull(wildcardEnumeration53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(properties56);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 10000L + "'", long59 == 10000L);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(obj68);
    }

    @Test
    public void test08272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08272");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        long long7 = atomikosProperties0.getDefaultJtaTimeout();
        long long8 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.setForceShutdownOnVmExit(true);
        java.lang.String str11 = atomikosProperties0.consoleFileName;
        long long12 = atomikosProperties0.defaultJtaTimeout;
        boolean boolean13 = atomikosProperties0.allowSubTransactions;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "tm.out" + "'", str11, "tm.out");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10000L + "'", long12 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test08273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08273");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.retryInterval = (short) 100;
        recovery0.forgetOrphanedLogEntriesDelay = 'a';
        long long5 = recovery0.retryInterval;
        int int6 = recovery0.maxRetries;
        long long7 = recovery0.getForgetOrphanedLogEntriesDelay();
        recovery0.setRetryInterval(32L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 100L + "'", long5 == 100L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 97L + "'", long7 == 97L);
    }

    @Test
    public void test08274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08274");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        long long7 = atomikosProperties0.maxTimeout;
        atomikosProperties0.setLogBaseDir("{-1.0=100}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.setAllowSubTransactions(true);
        atomikosProperties10.maxActives = (short) -1;
        atomikosProperties10.setService("tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties17.setAllowSubTransactions(true);
        boolean boolean20 = atomikosProperties17.enableLogging;
        boolean boolean21 = atomikosProperties17.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel22 = atomikosProperties17.consoleLogLevel;
        atomikosProperties10.setConsoleLogLevel(atomikosLoggingLevel22);
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel22;
        atomikosProperties0.setConsoleFileCount((int) (byte) 0);
        java.util.Properties properties27 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{com.atomikos.icatch.={}, 100=100}";
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel22 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel22.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(properties27);
    }

    @Test
    public void test08275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08275");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        java.util.Properties properties8 = new java.util.Properties();
        java.lang.String str9 = properties8.toString();
        java.lang.Object obj11 = properties8.remove((java.lang.Object) (short) 100);
        java.lang.Object obj14 = properties8.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj15 = properties8.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration16 = properties8.elements();
        java.lang.Object obj17 = properties0.putIfAbsent((java.lang.Object) 10.0f, (java.lang.Object) objEnumeration16);
        java.util.Properties properties18 = new java.util.Properties();
        java.util.Enumeration<?> wildcardEnumeration19 = properties18.propertyNames();
        java.lang.Object obj20 = properties18.clone();
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.String str22 = properties21.toString();
        boolean boolean23 = properties21.isEmpty();
        java.lang.Object obj26 = properties21.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties21.elements();
        java.lang.Object obj28 = properties0.put(obj20, (java.lang.Object) objEnumeration27);
        properties0.clear();
        java.util.Properties properties30 = new java.util.Properties();
        java.lang.Object obj32 = properties30.remove((java.lang.Object) (-1.0d));
        boolean boolean33 = properties30.isEmpty();
        int int34 = properties30.size();
        java.lang.String str36 = properties30.getProperty("{}");
        java.util.Properties properties37 = new java.util.Properties();
        java.lang.String str38 = properties37.toString();
        java.lang.Object obj40 = properties37.remove((java.lang.Object) (short) 100);
        java.lang.Object obj43 = properties37.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean45 = properties37.containsKey((java.lang.Object) 0L);
        java.lang.Object obj48 = properties37.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties49 = new java.util.Properties(properties37);
        java.util.Enumeration<java.lang.Object> objEnumeration50 = properties37.keys();
        java.lang.Object obj51 = properties0.replace((java.lang.Object) properties30, (java.lang.Object) properties37);
        boolean boolean52 = properties30.isEmpty();
        java.util.Properties properties53 = new java.util.Properties();
        java.lang.String str54 = properties53.toString();
        boolean boolean55 = properties53.isEmpty();
        java.util.Properties properties56 = new java.util.Properties();
        java.lang.String str57 = properties56.toString();
        java.lang.Object obj59 = properties56.remove((java.lang.Object) (short) 100);
        java.lang.Object obj62 = properties56.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean64 = properties56.containsKey((java.lang.Object) 0L);
        boolean boolean65 = properties53.containsValue((java.lang.Object) 0L);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery66 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        boolean boolean67 = properties53.contains((java.lang.Object) recovery66);
        java.util.Properties properties68 = new java.util.Properties();
        java.lang.String str69 = properties68.toString();
        java.lang.Object obj71 = properties68.remove((java.lang.Object) (short) 100);
        java.lang.Object obj74 = properties68.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj75 = properties68.clone();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet76 = properties68.entrySet();
        java.lang.Object obj77 = properties30.replace((java.lang.Object) properties53, (java.lang.Object) properties68);
        java.lang.Object obj80 = properties68.setProperty("{1.0=-1}", "");
        java.io.PrintWriter printWriter81 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties68.list(printWriter81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{}" + "'", str9, "{}");
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration16);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(wildcardEnumeration19);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{}");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{}" + "'", str22, "{}");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "{}" + "'", str38, "{}");
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertNotNull(objEnumeration50);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "{}" + "'", str54, "{}");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "{}" + "'", str57, "{}");
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "{}" + "'", str69, "{}");
        org.junit.Assert.assertNull(obj71);
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertNotNull(obj75);
        org.junit.Assert.assertEquals(obj75.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj75), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj75), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEntrySet76);
        org.junit.Assert.assertNull(obj77);
        org.junit.Assert.assertNull(obj80);
    }

    @Test
    public void test08276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08276");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setEnableLogging(true);
        atomikosProperties0.consoleFileCount = 0;
        int int5 = atomikosProperties0.getMaxActives();
        java.lang.String str6 = atomikosProperties0.getLogBaseDir();
        java.lang.String str7 = atomikosProperties0.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery8 = atomikosProperties0.getRecovery();
        long long9 = atomikosProperties0.getDefaultJtaTimeout();
        int int10 = atomikosProperties0.getMaxActives();
        atomikosProperties0.consoleFileLimit = 50;
        long long13 = atomikosProperties0.getDefaultJtaTimeout();
        java.lang.String str14 = atomikosProperties0.consoleFileName;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean16 = atomikosProperties15.isSerialJtaTransactions();
        atomikosProperties15.logBaseName = "{-1.0=100}";
        int int19 = atomikosProperties15.maxActives;
        int int20 = atomikosProperties15.consoleFileCount;
        atomikosProperties15.transactionManagerUniqueName = "tm.out";
        atomikosProperties15.consoleFileName = "tm.out";
        atomikosProperties15.allowSubTransactions = false;
        boolean boolean27 = atomikosProperties15.allowSubTransactions;
        java.lang.String str28 = atomikosProperties15.logBaseName;
        atomikosProperties15.maxActives = (byte) 100;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel31 = atomikosProperties15.consoleLogLevel;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel31);
        atomikosProperties0.setService("{1.0=-1, -1.0=100}");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 50 + "'", int5 == 50);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(recovery8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10000L + "'", long9 == 10000L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 50 + "'", int10 == 50);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10000L + "'", long13 == 10000L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "tm.out" + "'", str14, "tm.out");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 50 + "'", int19 == 50);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "{-1.0=100}" + "'", str28, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel31 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel31.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
    }

    @Test
    public void test08277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08277");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj14 = properties0.setProperty("", "{-1.0=100}");
        java.lang.Object obj15 = properties0.clone();
        java.lang.Object obj18 = properties0.setProperty("hi!", "{}");
        java.util.Properties properties19 = new java.util.Properties();
        java.lang.Object obj21 = properties19.remove((java.lang.Object) (-1.0d));
        boolean boolean23 = properties19.contains((java.lang.Object) "{-1.0=100}");
        java.util.Enumeration<java.lang.Object> objEnumeration24 = properties19.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties26 = atomikosProperties25.asProperties();
        atomikosProperties25.service = "{-1.0=100}";
        java.lang.String str29 = atomikosProperties25.getTransactionManagerUniqueName();
        atomikosProperties25.consoleFileName = "hi!";
        atomikosProperties25.setCheckpointInterval((long) 5);
        atomikosProperties25.setConsoleFileCount(0);
        boolean boolean36 = atomikosProperties25.isThreadedTwoPhaseCommit();
        int int37 = atomikosProperties25.maxActives;
        atomikosProperties25.setConsoleFileName("{={-1.0=100}, -1.0=100}");
        atomikosProperties25.setConsoleFileCount(50);
        java.lang.String str42 = atomikosProperties25.getTransactionManagerUniqueName();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel43 = atomikosProperties25.getConsoleLogLevel();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel44 = atomikosProperties25.consoleLogLevel;
        java.lang.Object obj45 = properties0.putIfAbsent((java.lang.Object) properties19, (java.lang.Object) atomikosLoggingLevel44);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties46 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties46.setAllowSubTransactions(true);
        atomikosProperties46.maxActives = (short) -1;
        atomikosProperties46.setCheckpointInterval((long) 0);
        atomikosProperties46.setMaxTimeout(100L);
        java.lang.String str55 = atomikosProperties46.logBaseName;
        java.lang.Class<?> wildcardClass56 = atomikosProperties46.getClass();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties57 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties58 = atomikosProperties57.asProperties();
        java.lang.Object obj59 = properties0.getOrDefault((java.lang.Object) wildcardClass56, (java.lang.Object) properties58);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties60 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties61 = atomikosProperties60.asProperties();
        atomikosProperties60.service = "{-1.0=100}";
        long long64 = atomikosProperties60.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel65 = null;
        atomikosProperties60.setConsoleLogLevel(atomikosLoggingLevel65);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel67 = null;
        atomikosProperties60.setConsoleLogLevel(atomikosLoggingLevel67);
        boolean boolean69 = atomikosProperties60.enableLogging;
        int int70 = atomikosProperties60.getConsoleFileLimit();
        atomikosProperties60.serialJtaTransactions = false;
        java.lang.String str73 = atomikosProperties60.logBaseName;
        boolean boolean74 = atomikosProperties60.isSerialJtaTransactions();
        java.lang.Object obj75 = properties0.remove((java.lang.Object) atomikosProperties60);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(obj15);
// flaky:         org.junit.Assert.assertEquals(obj15.toString(), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(objEnumeration24);
        org.junit.Assert.assertNotNull(properties26);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 50 + "'", int37 == 50);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel43 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel43.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel44 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel44.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "tmlog" + "'", str55, "tmlog");
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertNotNull(properties58);
        org.junit.Assert.assertNotNull(obj59);
// flaky:         org.junit.Assert.assertEquals(obj59.toString(), "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj59), "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj59), "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        org.junit.Assert.assertNotNull(properties61);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 10000L + "'", long64 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "tmlog" + "'", str73, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(obj75);
    }

    @Test
    public void test08278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08278");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        java.lang.String str6 = atomikosProperties0.getOutputDir();
        int int7 = atomikosProperties0.getMaxActives();
        boolean boolean8 = atomikosProperties0.allowSubTransactions;
        atomikosProperties0.maxActives = 35;
        boolean boolean11 = atomikosProperties0.threadedTwoPhaseCommit;
        atomikosProperties0.setOutputDir("{com.atomikos.icatch.console_file_name=hi!, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.output_dir=tm.out, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={-1.0=100}, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test08279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08279");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setEnableLogging(true);
        atomikosProperties12.setConsoleFileLimit((int) (short) 0);
        boolean boolean17 = properties0.contains((java.lang.Object) atomikosProperties12);
        java.util.Properties properties18 = new java.util.Properties();
        java.lang.String str19 = properties18.toString();
        java.util.Properties properties20 = new java.util.Properties(properties18);
        java.util.Set<java.lang.String> strSet21 = properties20.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties23 = atomikosProperties22.asProperties();
        atomikosProperties22.service = "{-1.0=100}";
        long long26 = atomikosProperties22.getDefaultJtaTimeout();
        atomikosProperties22.enableLogging = false;
        atomikosProperties22.setMaxTimeout((long) (byte) 0);
        atomikosProperties22.setAllowSubTransactions(true);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties34 = atomikosProperties33.asProperties();
        atomikosProperties33.service = "{-1.0=100}";
        java.lang.String str37 = atomikosProperties33.getTransactionManagerUniqueName();
        boolean boolean38 = atomikosProperties33.isSerialJtaTransactions();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel39 = atomikosProperties33.getConsoleLogLevel();
        atomikosProperties22.consoleLogLevel = atomikosLoggingLevel39;
        long long41 = atomikosProperties22.checkpointInterval;
        atomikosProperties22.service = "tm.out";
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties45 = atomikosProperties44.asProperties();
        atomikosProperties44.service = "{-1.0=100}";
        java.lang.String str48 = atomikosProperties44.getLogBaseName();
        long long49 = atomikosProperties44.defaultJtaTimeout;
        long long50 = atomikosProperties44.getMaxTimeout();
        boolean boolean51 = atomikosProperties44.forceShutdownOnVmExit;
        atomikosProperties44.setService("{-1.0=100}");
        atomikosProperties44.setOutputDir("{}");
        boolean boolean56 = properties0.replace((java.lang.Object) properties20, (java.lang.Object) "tm.out", (java.lang.Object) atomikosProperties44);
        java.util.Properties properties57 = new java.util.Properties(properties0);
        java.lang.String str59 = properties0.getProperty("{com.atomikos.icatch.tm.out={}}");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "{}" + "'", str19, "{}");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(properties23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 10000L + "'", long26 == 10000L);
        org.junit.Assert.assertNotNull(properties34);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel39 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel39.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 500L + "'", long41 == 500L);
        org.junit.Assert.assertNotNull(properties45);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "tmlog" + "'", str48, "tmlog");
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 10000L + "'", long49 == 10000L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 300000L + "'", long50 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(str59);
    }

    @Test
    public void test08280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08280");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        java.lang.String str6 = atomikosProperties0.getOutputDir();
        int int7 = atomikosProperties0.getMaxActives();
        boolean boolean8 = atomikosProperties0.allowSubTransactions;
        int int9 = atomikosProperties0.consoleFileLimit;
        java.lang.String str10 = atomikosProperties0.getService();
        java.lang.String str11 = atomikosProperties0.getLogBaseName();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "{-1.0=100}" + "'", str11, "{-1.0=100}");
    }

    @Test
    public void test08281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08281");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileName = "hi!";
        atomikosProperties0.serialJtaTransactions = true;
        atomikosProperties0.outputDir = "tm.out";
        int int11 = atomikosProperties0.getConsoleFileLimit();
        int int12 = atomikosProperties0.getConsoleFileLimit();
        atomikosProperties0.setMaxActives(20);
        atomikosProperties0.threadedTwoPhaseCommit = true;
        atomikosProperties0.allowSubTransactions = true;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test08282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08282");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj3 = properties0.setProperty("{}", "{}");
        java.util.Enumeration<java.lang.Object> objEnumeration4 = properties0.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties0.elements();
        java.util.Properties properties6 = new java.util.Properties(properties0);
        java.util.Set<java.lang.Object> objSet7 = properties0.keySet();
        java.util.Set<java.lang.String> strSet8 = properties0.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery9 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery9.retryInterval = (short) 100;
        recovery9.forgetOrphanedLogEntriesDelay = 'a';
        long long14 = recovery9.retryInterval;
        int int15 = recovery9.maxRetries;
        boolean boolean16 = properties0.containsKey((java.lang.Object) int15);
        java.util.Enumeration<?> wildcardEnumeration17 = properties0.propertyNames();
        java.lang.String str18 = properties0.toString();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNotNull(objEnumeration4);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNotNull(objSet7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 100L + "'", long14 == 100L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5 + "'", int15 == 5);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(wildcardEnumeration17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "{{}={}}" + "'", str18, "{{}={}}");
    }

    @Test
    public void test08283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08283");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        atomikosProperties2.service = "{-1.0=100}";
        long long6 = atomikosProperties2.getDefaultJtaTimeout();
        atomikosProperties2.consoleFileLimit = '#';
        java.lang.Object obj9 = properties1.get((java.lang.Object) atomikosProperties2);
        boolean boolean10 = atomikosProperties2.forceShutdownOnVmExit;
        atomikosProperties2.setOutputDir("");
        long long13 = atomikosProperties2.defaultJtaTimeout;
        java.lang.String str14 = atomikosProperties2.getLogBaseName();
        atomikosProperties2.serialJtaTransactions = true;
        java.lang.String str17 = atomikosProperties2.transactionManagerUniqueName;
        atomikosProperties2.setMaxActives(10);
        java.lang.String str20 = atomikosProperties2.transactionManagerUniqueName;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10000L + "'", long13 == 10000L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "tmlog" + "'", str14, "tmlog");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test08284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08284");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.retryInterval = (short) 100;
        recovery0.delay = (-1L);
        long long5 = recovery0.delay;
        recovery0.delay = (short) 1;
        long long8 = recovery0.getRetryInterval();
        int int9 = recovery0.maxRetries;
        int int10 = recovery0.maxRetries;
        long long11 = recovery0.forgetOrphanedLogEntriesDelay;
        recovery0.delay = 100;
        long long14 = recovery0.getRetryInterval();
        long long15 = recovery0.forgetOrphanedLogEntriesDelay;
        long long16 = recovery0.getForgetOrphanedLogEntriesDelay();
        recovery0.forgetOrphanedLogEntriesDelay = (byte) 1;
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5 + "'", int9 == 5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5 + "'", int10 == 5);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 86400000L + "'", long11 == 86400000L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 100L + "'", long14 == 100L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 86400000L + "'", long15 == 86400000L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 86400000L + "'", long16 == 86400000L);
    }

    @Test
    public void test08285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08285");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setAllowSubTransactions(true);
        boolean boolean3 = atomikosProperties0.enableLogging;
        atomikosProperties0.consoleFileLimit = (byte) 100;
        java.util.Properties properties6 = new java.util.Properties();
        java.lang.String str7 = properties6.toString();
        java.util.Properties properties8 = new java.util.Properties(properties6);
        java.util.Properties properties10 = new java.util.Properties();
        java.lang.String str11 = properties10.toString();
        java.lang.Object obj13 = properties10.remove((java.lang.Object) (short) 100);
        java.lang.Object obj16 = properties10.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean18 = properties10.containsKey((java.lang.Object) 0L);
        java.lang.Object obj21 = properties10.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties22 = new java.util.Properties(properties10);
        java.util.Enumeration<java.lang.Object> objEnumeration23 = properties22.elements();
        atomikosProperties0.set(properties8, "{={-1.0=100}, -1.0=100}", (java.lang.Object) properties22);
        atomikosProperties0.setOutputDir("hi!");
        java.lang.String str27 = atomikosProperties0.getLogBaseName();
        atomikosProperties0.logBaseDir = "{={={-1.0=100}, -1.0=100}}";
        atomikosProperties0.logBaseDir = "{com.atomikos.icatch.tm.out={}}";
        boolean boolean32 = atomikosProperties0.enableLogging;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "{}" + "'", str7, "{}");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "{}" + "'", str11, "{}");
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNotNull(objEnumeration23);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "tmlog" + "'", str27, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test08286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08286");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery4 = atomikosProperties0.recovery;
        recovery4.setDelay((long) (short) 0);
        long long7 = recovery4.delay;
        long long8 = recovery4.getForgetOrphanedLogEntriesDelay();
        recovery4.forgetOrphanedLogEntriesDelay = 0L;
        recovery4.delay = 50L;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNotNull(recovery4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 86400000L + "'", long8 == 86400000L);
    }

    @Test
    public void test08287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08287");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        boolean boolean7 = atomikosProperties0.isAllowSubTransactions();
        boolean boolean8 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.allowSubTransactions = false;
        atomikosProperties0.threadedTwoPhaseCommit = true;
        java.lang.String str13 = atomikosProperties0.getLogBaseDir();
        long long14 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.logBaseName = "";
        java.lang.String str17 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10000L + "'", long14 == 10000L);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test08288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08288");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        int int7 = atomikosProperties0.maxActives;
        atomikosProperties0.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.getRecovery();
        atomikosProperties0.forceShutdownOnVmExit = false;
        java.lang.String str13 = atomikosProperties0.service;
        atomikosProperties0.allowSubTransactions = false;
        atomikosProperties0.forceShutdownOnVmExit = false;
        atomikosProperties0.logBaseName = "{100=100}";
        long long20 = atomikosProperties0.getDefaultJtaTimeout();
        java.lang.String str21 = atomikosProperties0.getTransactionManagerUniqueName();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{-1.0=100}" + "'", str13, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10000L + "'", long20 == 10000L);
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test08289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08289");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties12 = new java.util.Properties(properties0);
        int int13 = properties0.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties15 = atomikosProperties14.asProperties();
        atomikosProperties14.service = "{-1.0=100}";
        long long18 = atomikosProperties14.getDefaultJtaTimeout();
        atomikosProperties14.serialJtaTransactions = true;
        long long21 = atomikosProperties14.getDefaultJtaTimeout();
        long long22 = atomikosProperties14.checkpointInterval;
        java.util.Properties properties23 = new java.util.Properties();
        java.lang.Object obj25 = properties23.remove((java.lang.Object) (-1.0d));
        boolean boolean26 = properties23.isEmpty();
        java.lang.Object obj29 = properties23.setProperty("hi!", "{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties32 = atomikosProperties31.asProperties();
        atomikosProperties31.service = "{-1.0=100}";
        long long35 = atomikosProperties31.getDefaultJtaTimeout();
        atomikosProperties31.serialJtaTransactions = true;
        atomikosProperties31.maxActives = ' ';
        atomikosProperties14.set(properties23, "", (java.lang.Object) ' ');
        java.util.Properties properties41 = new java.util.Properties();
        java.lang.String str42 = properties41.toString();
        java.lang.Object obj44 = properties41.remove((java.lang.Object) (short) 100);
        java.lang.Object obj47 = properties41.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean49 = properties41.containsKey((java.lang.Object) 0L);
        java.lang.Object obj52 = properties41.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties53 = new java.util.Properties();
        java.lang.String str54 = properties53.toString();
        java.lang.Object obj56 = properties53.remove((java.lang.Object) (short) 100);
        java.lang.Object obj59 = properties53.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj60 = properties53.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration61 = properties53.elements();
        properties41.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties53);
        java.lang.Object obj63 = properties53.clone();
        java.util.Set<java.lang.String> strSet64 = properties53.stringPropertyNames();
        java.lang.Object obj65 = properties0.replace((java.lang.Object) atomikosProperties14, (java.lang.Object) strSet64);
        atomikosProperties14.setSerialJtaTransactions(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery68 = atomikosProperties14.getRecovery();
        atomikosProperties14.setService("{{-1.0=100}=}");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10000L + "'", long18 == 10000L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10000L + "'", long21 == 10000L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 500L + "'", long22 == 500L);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNotNull(properties32);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 10000L + "'", long35 == 10000L);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "{}" + "'", str42, "{}");
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "{}" + "'", str54, "{}");
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertNotNull(obj60);
        org.junit.Assert.assertEquals(obj60.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj60), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj60), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration61);
        org.junit.Assert.assertNotNull(obj63);
        org.junit.Assert.assertEquals(obj63.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj63), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj63), "{1.0=-1}");
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertNotNull(recovery68);
    }

    @Test
    public void test08290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08290");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        java.util.Properties properties8 = new java.util.Properties();
        java.lang.String str9 = properties8.toString();
        java.lang.Object obj11 = properties8.remove((java.lang.Object) (short) 100);
        java.lang.Object obj14 = properties8.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj15 = properties8.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration16 = properties8.elements();
        java.lang.Object obj17 = properties0.putIfAbsent((java.lang.Object) 10.0f, (java.lang.Object) objEnumeration16);
        java.util.Properties properties18 = new java.util.Properties();
        java.util.Enumeration<?> wildcardEnumeration19 = properties18.propertyNames();
        java.lang.Object obj20 = properties18.clone();
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.String str22 = properties21.toString();
        boolean boolean23 = properties21.isEmpty();
        java.lang.Object obj26 = properties21.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties21.elements();
        java.lang.Object obj28 = properties0.put(obj20, (java.lang.Object) objEnumeration27);
        properties0.clear();
        java.util.Properties properties30 = new java.util.Properties();
        java.util.Properties properties31 = new java.util.Properties();
        java.lang.Object obj33 = properties31.remove((java.lang.Object) (-1.0d));
        int int34 = properties31.size();
        java.util.Enumeration<java.lang.Object> objEnumeration35 = properties31.elements();
        java.util.Properties properties36 = new java.util.Properties();
        properties36.clear();
        java.lang.String str38 = properties36.toString();
        boolean boolean39 = properties0.replace((java.lang.Object) properties30, (java.lang.Object) properties31, (java.lang.Object) str38);
        java.util.Enumeration<java.lang.Object> objEnumeration40 = properties31.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery41 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery41.retryInterval = (short) 100;
        recovery41.delay = (-1L);
        recovery41.setForgetOrphanedLogEntriesDelay(10000L);
        java.lang.Object obj48 = properties31.get((java.lang.Object) 10000L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties50 = atomikosProperties49.asProperties();
        atomikosProperties49.service = "{-1.0=100}";
        long long53 = atomikosProperties49.getDefaultJtaTimeout();
        atomikosProperties49.serialJtaTransactions = true;
        long long56 = atomikosProperties49.getDefaultJtaTimeout();
        long long57 = atomikosProperties49.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery58 = atomikosProperties49.getRecovery();
        long long59 = recovery58.delay;
        int int60 = recovery58.maxRetries;
        recovery58.setMaxRetries((int) '#');
        long long63 = recovery58.getForgetOrphanedLogEntriesDelay();
        recovery58.maxRetries = 35;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties66 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties67 = atomikosProperties66.asProperties();
        atomikosProperties66.service = "{-1.0=100}";
        java.lang.String str70 = atomikosProperties66.getLogBaseName();
        java.lang.String str71 = atomikosProperties66.transactionManagerUniqueName;
        atomikosProperties66.consoleFileName = "";
        atomikosProperties66.forceShutdownOnVmExit = false;
        boolean boolean76 = atomikosProperties66.isAllowSubTransactions();
        atomikosProperties66.setLogBaseName("{-1.0=100}");
        atomikosProperties66.transactionManagerUniqueName = "{100=100}";
        java.lang.Object obj81 = properties31.putIfAbsent((java.lang.Object) recovery58, (java.lang.Object) atomikosProperties66);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties82 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties83 = atomikosProperties82.asProperties();
        atomikosProperties82.service = "{-1.0=100}";
        long long86 = atomikosProperties82.getDefaultJtaTimeout();
        atomikosProperties82.enableLogging = false;
        atomikosProperties82.setMaxActives((int) ' ');
        java.util.Properties properties91 = atomikosProperties82.asProperties();
        java.util.Set<java.lang.Object> objSet92 = properties91.keySet();
        java.lang.String str93 = properties91.toString();
        java.util.Enumeration<java.lang.Object> objEnumeration94 = properties91.keys();
        java.util.Enumeration<?> wildcardEnumeration95 = properties91.propertyNames();
        java.lang.Object obj97 = null;
        atomikosProperties66.set(properties91, "{tmlog=hi!, com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}", obj97);
        boolean boolean99 = atomikosProperties66.isAllowSubTransactions();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{}" + "'", str9, "{}");
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration16);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(wildcardEnumeration19);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{}");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{}" + "'", str22, "{}");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(objEnumeration35);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "{}" + "'", str38, "{}");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(objEnumeration40);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertNotNull(properties50);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 10000L + "'", long53 == 10000L);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 10000L + "'", long56 == 10000L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 500L + "'", long57 == 500L);
        org.junit.Assert.assertNotNull(recovery58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 10000L + "'", long59 == 10000L);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 5 + "'", int60 == 5);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 86400000L + "'", long63 == 86400000L);
        org.junit.Assert.assertNotNull(properties67);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "tmlog" + "'", str70, "tmlog");
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNull(obj81);
        org.junit.Assert.assertNotNull(properties83);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 10000L + "'", long86 == 10000L);
        org.junit.Assert.assertNotNull(properties91);
        org.junit.Assert.assertNotNull(objSet92);
// flaky:         org.junit.Assert.assertEquals("'" + str93 + "' != '" + "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=32, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={-1.0=100}, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}" + "'", str93, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=32, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={-1.0=100}, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        org.junit.Assert.assertNotNull(objEnumeration94);
        org.junit.Assert.assertNotNull(wildcardEnumeration95);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + true + "'", boolean99 == true);
    }

    @Test
    public void test08291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08291");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        boolean boolean2 = properties0.isEmpty();
        java.lang.Object obj5 = properties0.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Properties properties6 = new java.util.Properties();
        java.lang.Object obj8 = properties6.remove((java.lang.Object) (-1.0d));
        boolean boolean9 = properties6.isEmpty();
        java.util.Properties properties10 = new java.util.Properties();
        java.lang.String str11 = properties10.toString();
        java.lang.Object obj13 = properties10.remove((java.lang.Object) (short) 100);
        java.lang.Object obj16 = properties10.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean18 = properties10.containsKey((java.lang.Object) 0L);
        java.lang.Object obj21 = properties10.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj24 = properties10.setProperty("", "{-1.0=100}");
        java.lang.Object obj25 = properties10.clone();
        java.lang.Object obj26 = properties6.get((java.lang.Object) properties10);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties27.setEnableLogging(true);
        atomikosProperties27.consoleFileCount = 0;
        int int32 = atomikosProperties27.getMaxActives();
        java.lang.String str33 = atomikosProperties27.getLogBaseDir();
        java.lang.String str34 = atomikosProperties27.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery35 = atomikosProperties27.getRecovery();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties37 = atomikosProperties36.asProperties();
        atomikosProperties36.service = "{-1.0=100}";
        long long40 = atomikosProperties36.getDefaultJtaTimeout();
        atomikosProperties36.setThreadedTwoPhaseCommit(true);
        boolean boolean43 = atomikosProperties36.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery44 = atomikosProperties36.recovery;
        atomikosProperties36.setLogBaseDir("");
        java.lang.Object obj47 = properties10.replace((java.lang.Object) recovery35, (java.lang.Object) "");
        java.util.Properties properties48 = new java.util.Properties();
        java.lang.Object obj50 = properties48.remove((java.lang.Object) (-1.0d));
        boolean boolean52 = properties48.contains((java.lang.Object) "{-1.0=100}");
        boolean boolean53 = properties10.equals((java.lang.Object) "{-1.0=100}");
        properties10.clear();
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        java.util.Properties properties56 = new java.util.Properties();
        java.lang.Object obj59 = properties56.setProperty("{}", "{}");
        java.util.Enumeration<java.lang.Object> objEnumeration60 = properties56.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration61 = properties56.elements();
        java.util.Properties properties62 = new java.util.Properties(properties56);
        java.util.Set<java.lang.Object> objSet63 = properties56.keySet();
        java.util.Set<java.lang.String> strSet64 = properties56.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery65 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery65.retryInterval = (short) 100;
        recovery65.forgetOrphanedLogEntriesDelay = 'a';
        long long70 = recovery65.getDelay();
        long long71 = recovery65.getRetryInterval();
        recovery65.setRetryInterval((long) 'a');
        long long74 = recovery65.getRetryInterval();
        int int75 = recovery65.maxRetries;
        java.lang.Object obj76 = properties0.put((java.lang.Object) properties56, (java.lang.Object) recovery65);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties77 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties78 = atomikosProperties77.asProperties();
        atomikosProperties77.service = "{-1.0=100}";
        java.lang.String str81 = atomikosProperties77.getTransactionManagerUniqueName();
        atomikosProperties77.consoleFileName = "hi!";
        atomikosProperties77.serialJtaTransactions = true;
        atomikosProperties77.outputDir = "tm.out";
        int int88 = atomikosProperties77.getConsoleFileLimit();
        atomikosProperties77.threadedTwoPhaseCommit = false;
        java.lang.String str91 = atomikosProperties77.logBaseName;
        boolean boolean92 = properties56.containsValue((java.lang.Object) atomikosProperties77);
        int int93 = atomikosProperties77.consoleFileLimit;
        java.lang.String str94 = atomikosProperties77.getLogBaseName();
        java.lang.String str95 = atomikosProperties77.getLogBaseDir();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "{}" + "'", str11, "{}");
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(obj25);
// flaky:         org.junit.Assert.assertEquals(obj25.toString(), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 50 + "'", int32 == 50);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(recovery35);
        org.junit.Assert.assertNotNull(properties37);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 10000L + "'", long40 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(recovery44);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertNotNull(objEnumeration60);
        org.junit.Assert.assertNotNull(objEnumeration61);
        org.junit.Assert.assertNotNull(objSet63);
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 10000L + "'", long70 == 10000L);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 100L + "'", long71 == 100L);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 97L + "'", long74 == 97L);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 5 + "'", int75 == 5);
        org.junit.Assert.assertNull(obj76);
        org.junit.Assert.assertNotNull(properties78);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "tmlog" + "'", str91, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-1) + "'", int93 == (-1));
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "tmlog" + "'", str94, "tmlog");
        org.junit.Assert.assertNull(str95);
    }

    @Test
    public void test08292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08292");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj7 = properties0.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration8 = properties0.elements();
        java.util.Properties properties9 = new java.util.Properties();
        java.lang.String str10 = properties9.toString();
        java.lang.Object obj12 = properties9.remove((java.lang.Object) (short) 100);
        java.lang.Object obj15 = properties9.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj16 = properties9.clone();
        java.util.Set<java.lang.String> strSet17 = properties9.stringPropertyNames();
        java.util.Properties properties18 = new java.util.Properties(properties9);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties20 = atomikosProperties19.asProperties();
        atomikosProperties19.service = "{-1.0=100}";
        java.lang.String str23 = atomikosProperties19.getTransactionManagerUniqueName();
        boolean boolean24 = atomikosProperties19.isSerialJtaTransactions();
        int int25 = atomikosProperties19.getConsoleFileLimit();
        java.util.Properties properties26 = new java.util.Properties();
        java.lang.String str27 = properties26.toString();
        java.lang.Object obj29 = properties26.remove((java.lang.Object) (short) 100);
        java.lang.Object obj32 = properties26.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean34 = properties26.containsKey((java.lang.Object) 0L);
        java.lang.Object obj37 = properties26.replace((java.lang.Object) false, (java.lang.Object) ' ');
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties38.setEnableLogging(true);
        atomikosProperties38.setConsoleFileLimit((int) (short) 0);
        boolean boolean43 = properties26.contains((java.lang.Object) atomikosProperties38);
        java.lang.Object obj44 = properties18.putIfAbsent((java.lang.Object) int25, (java.lang.Object) atomikosProperties38);
        java.util.Properties properties45 = new java.util.Properties(properties18);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties18);
        java.lang.String str48 = properties18.getProperty("tmlog");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties50 = atomikosProperties49.asProperties();
        atomikosProperties49.service = "{-1.0=100}";
        java.lang.String str53 = atomikosProperties49.getTransactionManagerUniqueName();
        atomikosProperties49.consoleFileLimit = (byte) 10;
        long long56 = atomikosProperties49.getMaxTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel57 = null;
        atomikosProperties49.consoleLogLevel = atomikosLoggingLevel57;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery59 = atomikosProperties49.getRecovery();
        boolean boolean60 = atomikosProperties49.isForceShutdownOnVmExit();
        atomikosProperties49.setForceShutdownOnVmExit(false);
        boolean boolean63 = properties18.equals((java.lang.Object) false);
        java.io.PrintWriter printWriter64 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties18.list(printWriter64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "{}" + "'", str10, "{}");
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "{1.0=-1}");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(properties20);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "{}" + "'", str27, "{}");
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(properties50);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 300000L + "'", long56 == 300000L);
        org.junit.Assert.assertNotNull(recovery59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test08293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08293");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        boolean boolean7 = atomikosProperties0.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery8 = atomikosProperties0.recovery;
        boolean boolean9 = atomikosProperties0.threadedTwoPhaseCommit;
        atomikosProperties0.consoleFileCount = 2;
        boolean boolean12 = atomikosProperties0.enableLogging;
        java.lang.String str13 = atomikosProperties0.getLogBaseDir();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(recovery8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test08294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08294");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setAllowSubTransactions(true);
        boolean boolean3 = atomikosProperties0.enableLogging;
        atomikosProperties0.consoleFileLimit = (byte) 100;
        java.util.Properties properties6 = new java.util.Properties();
        java.lang.String str7 = properties6.toString();
        java.util.Properties properties8 = new java.util.Properties(properties6);
        java.util.Properties properties10 = new java.util.Properties();
        java.lang.String str11 = properties10.toString();
        java.lang.Object obj13 = properties10.remove((java.lang.Object) (short) 100);
        java.lang.Object obj16 = properties10.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean18 = properties10.containsKey((java.lang.Object) 0L);
        java.lang.Object obj21 = properties10.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties22 = new java.util.Properties(properties10);
        java.util.Enumeration<java.lang.Object> objEnumeration23 = properties22.elements();
        atomikosProperties0.set(properties8, "{={-1.0=100}, -1.0=100}", (java.lang.Object) properties22);
        int int25 = properties8.size();
        java.lang.Object obj28 = properties8.setProperty("tmlog", "hi!");
        java.util.Properties properties29 = new java.util.Properties();
        java.lang.String str30 = properties29.toString();
        java.lang.Object obj32 = properties29.remove((java.lang.Object) (short) 100);
        java.lang.Object obj35 = properties29.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean37 = properties29.containsKey((java.lang.Object) 0L);
        java.lang.Object obj40 = properties29.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties41 = new java.util.Properties(properties29);
        java.util.Enumeration<java.lang.Object> objEnumeration42 = properties41.elements();
        java.util.Properties properties43 = new java.util.Properties();
        java.lang.Object obj46 = properties43.setProperty("{}", "{}");
        java.util.Enumeration<java.lang.Object> objEnumeration47 = properties43.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration48 = properties43.elements();
        java.util.Properties properties49 = new java.util.Properties(properties43);
        java.util.Set<java.lang.Object> objSet50 = properties43.keySet();
        java.util.Set<java.lang.String> strSet51 = properties43.stringPropertyNames();
        boolean boolean52 = properties41.contains((java.lang.Object) properties43);
        properties8.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties43);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties54 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties55 = atomikosProperties54.asProperties();
        atomikosProperties54.service = "{-1.0=100}";
        long long58 = atomikosProperties54.getDefaultJtaTimeout();
        long long59 = atomikosProperties54.getMaxTimeout();
        int int60 = atomikosProperties54.consoleFileCount;
        int int61 = atomikosProperties54.getMaxActives();
        atomikosProperties54.setAllowSubTransactions(true);
        atomikosProperties54.transactionManagerUniqueName = "{={-1.0=100}, -1.0=100}";
        boolean boolean66 = atomikosProperties54.isAllowSubTransactions();
        boolean boolean67 = atomikosProperties54.isSerialJtaTransactions();
        boolean boolean68 = properties43.contains((java.lang.Object) boolean67);
        int int69 = properties43.size();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "{}" + "'", str7, "{}");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "{}" + "'", str11, "{}");
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNotNull(objEnumeration23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "{}" + "'", str30, "{}");
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNotNull(objEnumeration42);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNotNull(objEnumeration47);
        org.junit.Assert.assertNotNull(objEnumeration48);
        org.junit.Assert.assertNotNull(objSet50);
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(properties55);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 10000L + "'", long58 == 10000L);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 300000L + "'", long59 == 300000L);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 50 + "'", int61 == 50);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
    }

    @Test
    public void test08295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08295");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long1 = recovery0.getRetryInterval();
        long long2 = recovery0.getDelay();
        long long3 = recovery0.getDelay();
        recovery0.setForgetOrphanedLogEntriesDelay(10000L);
        recovery0.retryInterval = '4';
        recovery0.setRetryInterval((long) (short) 0);
        recovery0.setMaxRetries(0);
        recovery0.setDelay((long) 2);
        long long14 = recovery0.getDelay();
        long long15 = recovery0.delay;
        int int16 = recovery0.maxRetries;
        recovery0.maxRetries = 'a';
        long long19 = recovery0.retryInterval;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 10000L + "'", long1 == 10000L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10000L + "'", long2 == 10000L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 10000L + "'", long3 == 10000L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 2L + "'", long14 == 2L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 2L + "'", long15 == 2L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
    }

    @Test
    public void test08296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08296");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        long long7 = atomikosProperties0.getDefaultJtaTimeout();
        long long8 = atomikosProperties0.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery9 = atomikosProperties0.getRecovery();
        java.lang.String str10 = atomikosProperties0.outputDir;
        boolean boolean11 = atomikosProperties0.isSerialJtaTransactions();
        boolean boolean12 = atomikosProperties0.serialJtaTransactions;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(recovery9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test08297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08297");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel7 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel7);
        boolean boolean9 = atomikosProperties0.enableLogging;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel10 = atomikosProperties0.consoleLogLevel;
        atomikosProperties0.consoleFileCount = 5;
        atomikosProperties0.logBaseDir = "{1.0=-1}";
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(atomikosLoggingLevel10);
    }

    @Test
    public void test08298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08298");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        atomikosProperties0.setTransactionManagerUniqueName("{-1.0=100}");
        boolean boolean9 = atomikosProperties0.enableLogging;
        int int10 = atomikosProperties0.consoleFileCount;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test08299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08299");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setEnableLogging(true);
        atomikosProperties0.consoleFileCount = 0;
        int int5 = atomikosProperties0.getMaxActives();
        java.lang.String str6 = atomikosProperties0.getLogBaseDir();
        java.lang.String str7 = atomikosProperties0.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery8 = atomikosProperties0.getRecovery();
        long long9 = atomikosProperties0.getDefaultJtaTimeout();
        int int10 = atomikosProperties0.getMaxActives();
        atomikosProperties0.consoleFileLimit = 50;
        boolean boolean13 = atomikosProperties0.isEnableLogging();
        long long14 = atomikosProperties0.maxTimeout;
        atomikosProperties0.setLogBaseName("{{={-1.0=100}, -1.0=100}=}");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 50 + "'", int5 == 50);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(recovery8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10000L + "'", long9 == 10000L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 50 + "'", int10 == 50);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 300000L + "'", long14 == 300000L);
    }

    @Test
    public void test08300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08300");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery4 = atomikosProperties0.recovery;
        atomikosProperties0.enableLogging = true;
        int int7 = atomikosProperties0.getConsoleFileCount();
        atomikosProperties0.outputDir = "hi!";
        java.util.Properties properties10 = new java.util.Properties();
        java.lang.String str11 = properties10.toString();
        java.lang.Object obj13 = properties10.remove((java.lang.Object) (short) 100);
        java.lang.Object obj16 = properties10.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean18 = properties10.containsKey((java.lang.Object) 0L);
        java.lang.Object obj21 = properties10.replace((java.lang.Object) false, (java.lang.Object) ' ');
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties22.setEnableLogging(true);
        atomikosProperties22.setConsoleFileLimit((int) (short) 0);
        boolean boolean27 = properties10.contains((java.lang.Object) atomikosProperties22);
        java.lang.String str29 = properties10.getProperty("{{1.0=-1}=hi!}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties32 = atomikosProperties31.asProperties();
        atomikosProperties31.service = "{-1.0=100}";
        java.lang.String str35 = atomikosProperties31.getTransactionManagerUniqueName();
        atomikosProperties31.consoleFileName = "hi!";
        atomikosProperties31.setCheckpointInterval((long) 5);
        atomikosProperties31.setLogBaseDir("{-1.0=100}");
        java.lang.String str42 = atomikosProperties31.getOutputDir();
        atomikosProperties0.set(properties10, "{1.0=-1}", (java.lang.Object) atomikosProperties31);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery44 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery44.retryInterval = (short) 100;
        recovery44.delay = (-1L);
        long long49 = recovery44.delay;
        int int50 = recovery44.getMaxRetries();
        recovery44.setForgetOrphanedLogEntriesDelay((long) (byte) 0);
        long long53 = recovery44.getForgetOrphanedLogEntriesDelay();
        recovery44.delay = (short) 1;
        recovery44.setForgetOrphanedLogEntriesDelay((long) 2);
        java.lang.Object obj58 = properties10.get((java.lang.Object) recovery44);
        java.util.Set<java.lang.String> strSet59 = properties10.stringPropertyNames();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNotNull(recovery4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "{}" + "'", str11, "{}");
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(properties32);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-1L) + "'", long49 == (-1L));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 5 + "'", int50 == 5);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertNotNull(strSet59);
    }

    @Test
    public void test08301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08301");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileName = "hi!";
        atomikosProperties0.serialJtaTransactions = true;
        long long9 = atomikosProperties0.maxTimeout;
        boolean boolean10 = atomikosProperties0.enableLogging;
        atomikosProperties0.setTransactionManagerUniqueName("{{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}=hi!}");
        java.lang.String str13 = atomikosProperties0.getLogBaseName();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 300000L + "'", long9 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
    }

    @Test
    public void test08302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08302");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        atomikosProperties0.setConsoleFileCount((int) (byte) 100);
        atomikosProperties0.setAllowSubTransactions(true);
        int int10 = atomikosProperties0.getMaxActives();
        boolean boolean11 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.setOutputDir("");
        long long14 = atomikosProperties0.getMaxTimeout();
        java.lang.Class<?> wildcardClass15 = atomikosProperties0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 50 + "'", int10 == 50);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 300000L + "'", long14 == 300000L);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test08303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08303");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.retryInterval = (short) 100;
        recovery0.forgetOrphanedLogEntriesDelay = 'a';
        long long5 = recovery0.retryInterval;
        recovery0.forgetOrphanedLogEntriesDelay = 0L;
        long long8 = recovery0.getForgetOrphanedLogEntriesDelay();
        long long9 = recovery0.getForgetOrphanedLogEntriesDelay();
        recovery0.retryInterval = 0L;
        long long12 = recovery0.retryInterval;
        int int13 = recovery0.maxRetries;
        recovery0.setMaxRetries((int) 'a');
        long long16 = recovery0.getForgetOrphanedLogEntriesDelay();
        long long17 = recovery0.getRetryInterval();
        long long18 = recovery0.getForgetOrphanedLogEntriesDelay();
        recovery0.forgetOrphanedLogEntriesDelay = 3;
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 100L + "'", long5 == 100L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
    }

    @Test
    public void test08304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08304");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.checkpointInterval = 86400000L;
        boolean boolean4 = atomikosProperties0.isThreadedTwoPhaseCommit();
        atomikosProperties0.allowSubTransactions = true;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test08305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08305");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        long long5 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.threadedTwoPhaseCommit = true;
        long long8 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.enableLogging = false;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery11 = atomikosProperties0.recovery;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(recovery11);
    }

    @Test
    public void test08306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08306");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        long long7 = atomikosProperties0.getDefaultJtaTimeout();
        long long8 = atomikosProperties0.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery9 = atomikosProperties0.getRecovery();
        long long10 = recovery9.delay;
        int int11 = recovery9.maxRetries;
        recovery9.setMaxRetries((int) '#');
        long long14 = recovery9.getForgetOrphanedLogEntriesDelay();
        recovery9.maxRetries = 3;
        int int17 = recovery9.getMaxRetries();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(recovery9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 86400000L + "'", long14 == 86400000L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
    }

    @Test
    public void test08307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08307");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.retryInterval = (short) 100;
        recovery0.delay = (-1L);
        long long5 = recovery0.delay;
        recovery0.delay = (short) 1;
        long long8 = recovery0.getRetryInterval();
        int int9 = recovery0.maxRetries;
        int int10 = recovery0.maxRetries;
        long long11 = recovery0.forgetOrphanedLogEntriesDelay;
        recovery0.delay = 100;
        long long14 = recovery0.getRetryInterval();
        long long15 = recovery0.getDelay();
        long long16 = recovery0.getDelay();
        recovery0.maxRetries = 3;
        recovery0.setDelay(18L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5 + "'", int9 == 5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5 + "'", int10 == 5);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 86400000L + "'", long11 == 86400000L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 100L + "'", long14 == 100L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 100L + "'", long15 == 100L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 100L + "'", long16 == 100L);
    }

    @Test
    public void test08308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08308");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.remove((java.lang.Object) (-1.0d));
        boolean boolean3 = properties0.isEmpty();
        java.util.Properties properties4 = new java.util.Properties();
        java.lang.String str5 = properties4.toString();
        java.lang.Object obj7 = properties4.remove((java.lang.Object) (short) 100);
        java.lang.Object obj10 = properties4.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean12 = properties4.containsKey((java.lang.Object) 0L);
        java.lang.Object obj15 = properties4.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj18 = properties4.setProperty("", "{-1.0=100}");
        java.lang.Object obj19 = properties4.clone();
        java.lang.Object obj20 = properties0.get((java.lang.Object) properties4);
        java.lang.Object obj21 = properties4.clone();
        java.lang.String str22 = properties4.toString();
        java.lang.Object obj25 = properties4.setProperty("{1.0=-1, -1.0=100}", "{1.0=-1, -1.0=100}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery26 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery26.retryInterval = (short) 100;
        recovery26.delay = (-1L);
        long long31 = recovery26.delay;
        recovery26.delay = (short) 1;
        long long34 = recovery26.getRetryInterval();
        long long35 = recovery26.getForgetOrphanedLogEntriesDelay();
        recovery26.setMaxRetries(10);
        int int38 = recovery26.maxRetries;
        long long39 = recovery26.getDelay();
        recovery26.forgetOrphanedLogEntriesDelay = 500L;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery42 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery42.retryInterval = (short) 100;
        recovery42.delay = (-1L);
        long long47 = recovery42.delay;
        int int48 = recovery42.getMaxRetries();
        long long49 = recovery42.getForgetOrphanedLogEntriesDelay();
        boolean boolean50 = properties4.remove((java.lang.Object) 500L, (java.lang.Object) recovery42);
        java.lang.String str53 = properties4.getProperty("{com.atomikos.icatch.console_file_name=hi!, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.output_dir=tm.out, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={-1.0=100}, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}", "{tmlog=hi!, com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}");
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{}" + "'", str5, "{}");
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(obj19);
// flaky:         org.junit.Assert.assertEquals(obj19.toString(), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNotNull(obj21);
// flaky:         org.junit.Assert.assertEquals(obj21.toString(), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{={-1.0=100}, -1.0=100}" + "'", str22, "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 100L + "'", long34 == 100L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 86400000L + "'", long35 == 86400000L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10 + "'", int38 == 10);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1L + "'", long39 == 1L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-1L) + "'", long47 == (-1L));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 5 + "'", int48 == 5);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 86400000L + "'", long49 == 86400000L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "{tmlog=hi!, com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}" + "'", str53, "{tmlog=hi!, com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}");
    }

    @Test
    public void test08309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08309");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setTransactionManagerUniqueName("{}");
        atomikosProperties0.consoleFileName = "hi!";
        boolean boolean9 = atomikosProperties0.threadedTwoPhaseCommit;
        atomikosProperties0.setConsoleFileLimit(5);
        atomikosProperties0.logBaseDir = "{100=100}";
        atomikosProperties0.setConsoleFileLimit(100);
        atomikosProperties0.threadedTwoPhaseCommit = false;
        java.util.Properties properties18 = new java.util.Properties();
        java.lang.String str19 = properties18.toString();
        java.lang.Object obj21 = properties18.remove((java.lang.Object) (short) 100);
        java.lang.Object obj24 = properties18.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        java.util.Properties properties26 = new java.util.Properties();
        java.lang.String str27 = properties26.toString();
        java.lang.Object obj29 = properties26.remove((java.lang.Object) (short) 100);
        java.lang.Object obj32 = properties26.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj33 = properties26.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration34 = properties26.elements();
        java.lang.Object obj35 = properties18.putIfAbsent((java.lang.Object) 10.0f, (java.lang.Object) objEnumeration34);
        java.util.Properties properties36 = new java.util.Properties();
        java.util.Enumeration<?> wildcardEnumeration37 = properties36.propertyNames();
        java.lang.Object obj38 = properties36.clone();
        java.util.Properties properties39 = new java.util.Properties();
        java.lang.String str40 = properties39.toString();
        boolean boolean41 = properties39.isEmpty();
        java.lang.Object obj44 = properties39.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration45 = properties39.elements();
        java.lang.Object obj46 = properties18.put(obj38, (java.lang.Object) objEnumeration45);
        properties18.clear();
        java.util.Properties properties48 = new java.util.Properties();
        java.util.Properties properties49 = new java.util.Properties();
        java.lang.Object obj51 = properties49.remove((java.lang.Object) (-1.0d));
        int int52 = properties49.size();
        java.util.Enumeration<java.lang.Object> objEnumeration53 = properties49.elements();
        java.util.Properties properties54 = new java.util.Properties();
        properties54.clear();
        java.lang.String str56 = properties54.toString();
        boolean boolean57 = properties18.replace((java.lang.Object) properties48, (java.lang.Object) properties49, (java.lang.Object) str56);
        java.lang.String str59 = properties18.getProperty("");
        java.util.Collection<java.lang.Object> objCollection60 = properties18.values();
        java.lang.Object obj63 = properties18.setProperty("{}", "{-1.0=100}");
        java.lang.Object obj64 = properties18.clone();
        int int65 = properties18.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties67 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties68 = atomikosProperties67.asProperties();
        atomikosProperties67.service = "{-1.0=100}";
        long long71 = atomikosProperties67.getDefaultJtaTimeout();
        atomikosProperties67.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties67.setMaxActives(100);
        boolean boolean76 = atomikosProperties67.enableLogging;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery77 = atomikosProperties67.recovery;
        atomikosProperties67.checkpointInterval = 300000L;
        java.lang.String str80 = atomikosProperties67.consoleFileName;
        atomikosProperties67.forceShutdownOnVmExit = false;
        java.lang.Class<?> wildcardClass83 = atomikosProperties67.getClass();
        atomikosProperties0.set(properties18, "{com.atomikos.icatch.tm.out=hi!}", (java.lang.Object) wildcardClass83);
        java.lang.Object obj87 = properties18.setProperty("{1.0=-1, ={1.0=-1}, -1.0=100}", "{WARN={}, 0={100=100}, {}={}}");
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "{}" + "'", str19, "{}");
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "{}" + "'", str27, "{}");
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration34);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNotNull(wildcardEnumeration37);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertEquals(obj38.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "{}");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "{}" + "'", str40, "{}");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNotNull(objEnumeration45);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(objEnumeration53);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "{}" + "'", str56, "{}");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(objCollection60);
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertNotNull(obj64);
        org.junit.Assert.assertEquals(obj64.toString(), "{{}={-1.0=100}}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj64), "{{}={-1.0=100}}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj64), "{{}={-1.0=100}}");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(properties68);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 10000L + "'", long71 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(recovery77);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "tm.out" + "'", str80, "tm.out");
        org.junit.Assert.assertNotNull(wildcardClass83);
        org.junit.Assert.assertNull(obj87);
    }

    @Test
    public void test08310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08310");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setAllowSubTransactions(true);
        boolean boolean3 = atomikosProperties0.enableLogging;
        atomikosProperties0.consoleFileLimit = (byte) 100;
        java.util.Properties properties6 = new java.util.Properties();
        java.lang.String str7 = properties6.toString();
        java.util.Properties properties8 = new java.util.Properties(properties6);
        java.util.Properties properties10 = new java.util.Properties();
        java.lang.String str11 = properties10.toString();
        java.lang.Object obj13 = properties10.remove((java.lang.Object) (short) 100);
        java.lang.Object obj16 = properties10.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean18 = properties10.containsKey((java.lang.Object) 0L);
        java.lang.Object obj21 = properties10.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties22 = new java.util.Properties(properties10);
        java.util.Enumeration<java.lang.Object> objEnumeration23 = properties22.elements();
        atomikosProperties0.set(properties8, "{={-1.0=100}, -1.0=100}", (java.lang.Object) properties22);
        int int25 = properties8.size();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet26 = properties8.entrySet();
        boolean boolean27 = properties8.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties29 = atomikosProperties28.asProperties();
        java.util.Properties properties30 = new java.util.Properties();
        java.lang.Object obj32 = properties30.remove((java.lang.Object) (-1.0d));
        boolean boolean33 = properties30.isEmpty();
        int int34 = properties30.size();
        java.lang.String str36 = properties30.getProperty("{}");
        java.lang.Object obj37 = properties29.remove((java.lang.Object) properties30);
        properties8.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties30);
        java.lang.Object obj39 = properties8.clone();
        java.io.Reader reader40 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties8.load(reader40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "{}" + "'", str7, "{}");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "{}" + "'", str11, "{}");
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNotNull(objEnumeration23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(objEntrySet26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(properties29);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertEquals(obj39.toString(), "{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}");
    }

    @Test
    public void test08311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08311");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        java.util.Properties properties2 = new java.util.Properties();
        java.lang.Object obj4 = properties2.remove((java.lang.Object) (-1.0d));
        boolean boolean5 = properties2.isEmpty();
        int int6 = properties2.size();
        java.lang.String str8 = properties2.getProperty("{}");
        java.lang.Object obj9 = properties1.remove((java.lang.Object) properties2);
        java.util.Properties properties10 = new java.util.Properties();
        java.util.Properties properties11 = new java.util.Properties();
        java.lang.String str12 = properties11.toString();
        boolean boolean13 = properties11.isEmpty();
        java.util.Properties properties14 = new java.util.Properties();
        java.lang.String str15 = properties14.toString();
        java.lang.Object obj17 = properties14.remove((java.lang.Object) (short) 100);
        java.lang.Object obj20 = properties14.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean22 = properties14.containsKey((java.lang.Object) 0L);
        boolean boolean23 = properties11.containsValue((java.lang.Object) 0L);
        boolean boolean26 = properties10.replace((java.lang.Object) 0L, (java.lang.Object) 0.0f, (java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties10.elements();
        java.lang.String str28 = properties10.toString();
        java.util.Enumeration<java.lang.Object> objEnumeration29 = properties10.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties31 = atomikosProperties30.asProperties();
        boolean boolean32 = properties1.remove((java.lang.Object) properties10, (java.lang.Object) properties31);
        java.util.Properties properties33 = new java.util.Properties();
        java.lang.Object obj35 = properties33.remove((java.lang.Object) (-1.0d));
        boolean boolean37 = properties33.contains((java.lang.Object) "{-1.0=100}");
        java.util.Enumeration<java.lang.Object> objEnumeration38 = properties33.keys();
        java.util.Properties properties39 = new java.util.Properties(properties33);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties41 = atomikosProperties40.asProperties();
        atomikosProperties40.service = "{-1.0=100}";
        java.lang.String str44 = atomikosProperties40.getTransactionManagerUniqueName();
        atomikosProperties40.consoleFileName = "hi!";
        atomikosProperties40.serialJtaTransactions = true;
        atomikosProperties40.outputDir = "tm.out";
        boolean boolean51 = atomikosProperties40.isAllowSubTransactions();
        atomikosProperties40.consoleFileName = "";
        java.lang.Object obj54 = properties31.replace((java.lang.Object) properties39, (java.lang.Object) "");
        java.util.Set<java.lang.Object> objSet55 = properties39.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties56 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties57 = atomikosProperties56.asProperties();
        atomikosProperties56.service = "{-1.0=100}";
        long long60 = atomikosProperties56.getDefaultJtaTimeout();
        atomikosProperties56.consoleFileLimit = '#';
        int int63 = atomikosProperties56.getConsoleFileCount();
        atomikosProperties56.defaultJtaTimeout = ' ';
        java.lang.Object obj66 = properties39.get((java.lang.Object) ' ');
        java.util.Set<java.lang.Object> objSet67 = properties39.keySet();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "{}" + "'", str12, "{}");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{}" + "'", str15, "{}");
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "{}" + "'", str28, "{}");
        org.junit.Assert.assertNotNull(objEnumeration29);
        org.junit.Assert.assertNotNull(properties31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(objEnumeration38);
        org.junit.Assert.assertNotNull(properties41);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertNotNull(objSet55);
        org.junit.Assert.assertNotNull(properties57);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 10000L + "'", long60 == 10000L);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertNotNull(objSet67);
    }

    @Test
    public void test08312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08312");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setAllowSubTransactions(true);
        boolean boolean3 = atomikosProperties0.enableLogging;
        atomikosProperties0.consoleFileLimit = (byte) 100;
        java.util.Properties properties6 = new java.util.Properties();
        java.lang.String str7 = properties6.toString();
        java.util.Properties properties8 = new java.util.Properties(properties6);
        java.util.Properties properties10 = new java.util.Properties();
        java.lang.String str11 = properties10.toString();
        java.lang.Object obj13 = properties10.remove((java.lang.Object) (short) 100);
        java.lang.Object obj16 = properties10.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean18 = properties10.containsKey((java.lang.Object) 0L);
        java.lang.Object obj21 = properties10.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties22 = new java.util.Properties(properties10);
        java.util.Enumeration<java.lang.Object> objEnumeration23 = properties22.elements();
        atomikosProperties0.set(properties8, "{={-1.0=100}, -1.0=100}", (java.lang.Object) properties22);
        atomikosProperties0.setOutputDir("hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery27 = atomikosProperties0.getRecovery();
        atomikosProperties0.setTransactionManagerUniqueName("{{-1.0=100}=}");
        java.lang.String str30 = atomikosProperties0.logBaseName;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "{}" + "'", str7, "{}");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "{}" + "'", str11, "{}");
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNotNull(objEnumeration23);
        org.junit.Assert.assertNotNull(recovery27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "tmlog" + "'", str30, "tmlog");
    }

    @Test
    public void test08313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08313");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        int int7 = properties0.size();
        int int8 = properties0.size();
        java.util.Properties properties9 = new java.util.Properties();
        java.lang.String str10 = properties9.toString();
        java.lang.Object obj12 = properties9.remove((java.lang.Object) (short) 100);
        java.lang.Object obj15 = properties9.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean17 = properties9.containsKey((java.lang.Object) 0L);
        java.lang.Object obj20 = properties9.replace((java.lang.Object) false, (java.lang.Object) ' ');
        boolean boolean21 = properties9.isEmpty();
        boolean boolean22 = properties9.isEmpty();
        java.lang.Object obj23 = properties0.remove((java.lang.Object) properties9);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties25 = atomikosProperties24.asProperties();
        atomikosProperties24.service = "{-1.0=100}";
        long long28 = atomikosProperties24.getDefaultJtaTimeout();
        atomikosProperties24.enableLogging = false;
        atomikosProperties24.setMaxTimeout((long) (byte) 0);
        atomikosProperties24.setService("tm.out");
        atomikosProperties24.enableLogging = true;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties38 = atomikosProperties37.asProperties();
        atomikosProperties37.service = "{-1.0=100}";
        long long41 = atomikosProperties37.getDefaultJtaTimeout();
        atomikosProperties37.setThreadedTwoPhaseCommit(true);
        boolean boolean44 = atomikosProperties37.isAllowSubTransactions();
        boolean boolean45 = atomikosProperties37.isEnableLogging();
        atomikosProperties37.allowSubTransactions = false;
        atomikosProperties37.threadedTwoPhaseCommit = true;
        atomikosProperties37.setLogBaseName("tm.out");
        java.lang.String str52 = atomikosProperties37.getLogBaseDir();
        java.lang.String str53 = atomikosProperties37.outputDir;
        java.lang.Object obj54 = properties0.putIfAbsent((java.lang.Object) atomikosProperties24, (java.lang.Object) atomikosProperties37);
        atomikosProperties37.setMaxTimeout(97L);
        int int57 = atomikosProperties37.maxActives;
        atomikosProperties37.setSerialJtaTransactions(false);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "{}" + "'", str10, "{}");
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 10000L + "'", long28 == 10000L);
        org.junit.Assert.assertNotNull(properties38);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 10000L + "'", long41 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 50 + "'", int57 == 50);
    }

    @Test
    public void test08314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08314");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj3 = properties0.setProperty("{}", "{}");
        java.util.Enumeration<java.lang.Object> objEnumeration4 = properties0.keys();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet5 = properties0.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str7 = atomikosProperties6.getOutputDir();
        atomikosProperties6.threadedTwoPhaseCommit = true;
        boolean boolean10 = properties0.contains((java.lang.Object) atomikosProperties6);
        atomikosProperties6.setConsoleFileCount((int) (short) 1);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery13 = atomikosProperties6.getRecovery();
        int int14 = recovery13.maxRetries;
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNotNull(objEnumeration4);
        org.junit.Assert.assertNotNull(objEntrySet5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(recovery13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
    }

    @Test
    public void test08315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08315");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setEnableLogging(true);
        atomikosProperties0.consoleFileCount = 0;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties6 = atomikosProperties5.asProperties();
        atomikosProperties5.service = "{-1.0=100}";
        long long9 = atomikosProperties5.getDefaultJtaTimeout();
        boolean boolean10 = atomikosProperties5.enableLogging;
        boolean boolean11 = atomikosProperties5.isForceShutdownOnVmExit();
        atomikosProperties5.consoleFileLimit = (byte) -1;
        java.lang.String str14 = atomikosProperties5.getService();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel15 = atomikosProperties5.consoleLogLevel;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel15;
        boolean boolean17 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.setMaxTimeout(97L);
        java.lang.String str20 = atomikosProperties0.getService();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery21 = atomikosProperties0.recovery;
        org.junit.Assert.assertNotNull(properties6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10000L + "'", long9 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "{-1.0=100}" + "'", str14, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel15 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel15.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(recovery21);
    }

    @Test
    public void test08316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08316");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.retryInterval = (short) 100;
        recovery0.delay = (-1L);
        long long5 = recovery0.delay;
        recovery0.delay = (short) 1;
        long long8 = recovery0.getRetryInterval();
        int int9 = recovery0.maxRetries;
        int int10 = recovery0.maxRetries;
        long long11 = recovery0.forgetOrphanedLogEntriesDelay;
        recovery0.delay = 100;
        recovery0.forgetOrphanedLogEntriesDelay = (short) 1;
        long long16 = recovery0.delay;
        recovery0.maxRetries = (short) 10;
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5 + "'", int9 == 5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5 + "'", int10 == 5);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 86400000L + "'", long11 == 86400000L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 100L + "'", long16 == 100L);
    }

    @Test
    public void test08317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08317");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        java.util.Properties properties7 = new java.util.Properties();
        java.lang.String str8 = properties7.toString();
        properties7.clear();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet10 = properties7.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties12 = atomikosProperties11.asProperties();
        atomikosProperties11.service = "{-1.0=100}";
        long long15 = atomikosProperties11.getDefaultJtaTimeout();
        atomikosProperties11.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties11.setMaxActives(100);
        java.lang.String str20 = atomikosProperties11.logBaseDir;
        atomikosProperties11.consoleFileCount = (short) 0;
        atomikosProperties11.defaultJtaTimeout = 10000L;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel25 = atomikosProperties11.consoleLogLevel;
        java.lang.Object obj26 = properties0.putIfAbsent((java.lang.Object) properties7, (java.lang.Object) atomikosLoggingLevel25);
        boolean boolean28 = properties7.contains((java.lang.Object) 100L);
        properties7.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties31 = atomikosProperties30.asProperties();
        atomikosProperties30.service = "{-1.0=100}";
        java.lang.String str34 = atomikosProperties30.getTransactionManagerUniqueName();
        atomikosProperties30.consoleFileName = "hi!";
        atomikosProperties30.setCheckpointInterval((long) 5);
        atomikosProperties30.setConsoleFileCount(0);
        boolean boolean41 = atomikosProperties30.isThreadedTwoPhaseCommit();
        long long42 = atomikosProperties30.checkpointInterval;
        atomikosProperties30.setConsoleFileLimit((int) (byte) 100);
        boolean boolean45 = atomikosProperties30.isAllowSubTransactions();
        java.lang.Object obj46 = properties7.get((java.lang.Object) atomikosProperties30);
        java.util.Properties properties47 = new java.util.Properties(properties7);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet48 = properties47.entrySet();
        java.io.InputStream inputStream49 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties47.loadFromXML(inputStream49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{}" + "'", str8, "{}");
        org.junit.Assert.assertNotNull(objEntrySet10);
        org.junit.Assert.assertNotNull(properties12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10000L + "'", long15 == 10000L);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel25 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel25.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(properties31);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 5L + "'", long42 == 5L);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNotNull(objEntrySet48);
    }

    @Test
    public void test08318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08318");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        atomikosProperties2.service = "{-1.0=100}";
        long long6 = atomikosProperties2.getDefaultJtaTimeout();
        atomikosProperties2.consoleFileLimit = '#';
        java.lang.Object obj9 = properties1.get((java.lang.Object) atomikosProperties2);
        boolean boolean10 = atomikosProperties2.isForceShutdownOnVmExit();
        boolean boolean11 = atomikosProperties2.isEnableLogging();
        int int12 = atomikosProperties2.consoleFileLimit;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
    }

    @Test
    public void test08319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08319");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj3 = properties0.setProperty("{}", "{}");
        java.util.Enumeration<java.lang.Object> objEnumeration4 = properties0.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties0.elements();
        java.util.Properties properties6 = new java.util.Properties(properties0);
        java.util.Set<java.lang.Object> objSet7 = properties0.keySet();
        java.util.Set<java.lang.String> strSet8 = properties0.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties10 = atomikosProperties9.asProperties();
        atomikosProperties9.service = "{-1.0=100}";
        long long13 = atomikosProperties9.getDefaultJtaTimeout();
        atomikosProperties9.setMaxActives(0);
        atomikosProperties9.maxActives = 'a';
        boolean boolean18 = atomikosProperties9.isThreadedTwoPhaseCommit();
        boolean boolean19 = atomikosProperties9.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel20 = atomikosProperties9.consoleLogLevel;
        long long21 = atomikosProperties9.defaultJtaTimeout;
        java.lang.String str22 = atomikosProperties9.getLogBaseDir();
        atomikosProperties9.outputDir = "{{1.0=-1}=hi!}";
        boolean boolean25 = properties0.containsKey((java.lang.Object) "{{1.0=-1}=hi!}");
        properties0.clear();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNotNull(objEnumeration4);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNotNull(objSet7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10000L + "'", long13 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel20 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel20.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10000L + "'", long21 == 10000L);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test08320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08320");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileName = "hi!";
        atomikosProperties0.serialJtaTransactions = true;
        atomikosProperties0.enableLogging = true;
        atomikosProperties0.setSerialJtaTransactions(false);
        atomikosProperties0.consoleFileCount = (byte) 100;
        atomikosProperties0.serialJtaTransactions = false;
        atomikosProperties0.maxActives = 0;
        java.lang.String str19 = atomikosProperties0.getLogBaseDir();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test08321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08321");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.remove((java.lang.Object) (-1.0d));
        boolean boolean3 = properties0.isEmpty();
        int int4 = properties0.size();
        java.lang.String str6 = properties0.getProperty("{}");
        java.util.Set<java.lang.Object> objSet7 = properties0.keySet();
        java.lang.String str9 = properties0.getProperty("hi!");
        java.lang.String str10 = properties0.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties12 = atomikosProperties11.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties14 = atomikosProperties13.asProperties();
        atomikosProperties13.service = "{-1.0=100}";
        long long17 = atomikosProperties13.getDefaultJtaTimeout();
        atomikosProperties13.consoleFileLimit = '#';
        java.lang.Object obj20 = properties12.get((java.lang.Object) atomikosProperties13);
        boolean boolean21 = atomikosProperties13.forceShutdownOnVmExit;
        boolean boolean22 = properties0.equals((java.lang.Object) atomikosProperties13);
        boolean boolean23 = atomikosProperties13.enableLogging;
        int int24 = atomikosProperties13.consoleFileLimit;
        java.util.Properties properties25 = new java.util.Properties();
        java.lang.String str26 = properties25.toString();
        java.lang.Object obj28 = properties25.remove((java.lang.Object) (short) 100);
        java.lang.Object obj31 = properties25.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        int int32 = properties25.size();
        java.util.Properties properties35 = new java.util.Properties();
        java.lang.Object obj37 = properties35.remove((java.lang.Object) (-1.0d));
        boolean boolean38 = properties35.isEmpty();
        java.lang.Object obj41 = properties35.setProperty("hi!", "{}");
        boolean boolean42 = properties25.replace((java.lang.Object) 1, (java.lang.Object) 1, (java.lang.Object) "{}");
        java.util.Set<java.lang.String> strSet43 = properties25.stringPropertyNames();
        java.util.Properties properties45 = new java.util.Properties();
        java.util.Properties properties46 = new java.util.Properties(properties45);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet47 = properties46.entrySet();
        java.util.Properties properties48 = new java.util.Properties();
        java.lang.Object obj51 = properties48.setProperty("{}", "{}");
        java.util.Enumeration<java.lang.Object> objEnumeration52 = properties48.keys();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet53 = properties48.entrySet();
        properties46.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties48);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery55 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery55.retryInterval = (short) 100;
        recovery55.delay = (-1L);
        long long60 = recovery55.delay;
        recovery55.delay = (short) 1;
        long long63 = recovery55.getRetryInterval();
        java.util.Properties properties64 = new java.util.Properties();
        java.lang.String str65 = properties64.toString();
        properties64.clear();
        java.lang.Object obj67 = properties46.getOrDefault((java.lang.Object) recovery55, (java.lang.Object) properties64);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery68 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery68.retryInterval = (short) 100;
        recovery68.forgetOrphanedLogEntriesDelay = 'a';
        long long73 = recovery68.retryInterval;
        recovery68.forgetOrphanedLogEntriesDelay = 0L;
        long long76 = recovery68.getForgetOrphanedLogEntriesDelay();
        long long77 = recovery68.getForgetOrphanedLogEntriesDelay();
        recovery68.retryInterval = 0L;
        long long80 = recovery68.retryInterval;
        boolean boolean81 = properties46.containsKey((java.lang.Object) recovery68);
        java.util.Set<java.lang.Object> objSet82 = properties46.keySet();
        atomikosProperties13.set(properties25, "", (java.lang.Object) objSet82);
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(objSet7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "{}" + "'", str10, "{}");
        org.junit.Assert.assertNotNull(properties12);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10000L + "'", long17 == 10000L);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "{}" + "'", str26, "{}");
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertNotNull(objEntrySet47);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNotNull(objEnumeration52);
        org.junit.Assert.assertNotNull(objEntrySet53);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-1L) + "'", long60 == (-1L));
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 100L + "'", long63 == 100L);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "{}" + "'", str65, "{}");
        org.junit.Assert.assertNotNull(obj67);
        org.junit.Assert.assertEquals(obj67.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj67), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj67), "{}");
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 100L + "'", long73 == 100L);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(objSet82);
    }

    @Test
    public void test08322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08322");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        atomikosProperties2.service = "{-1.0=100}";
        long long6 = atomikosProperties2.getDefaultJtaTimeout();
        atomikosProperties2.consoleFileLimit = '#';
        java.lang.Object obj9 = properties1.get((java.lang.Object) atomikosProperties2);
        boolean boolean10 = atomikosProperties2.forceShutdownOnVmExit;
        atomikosProperties2.logBaseName = "";
        java.util.Properties properties13 = new java.util.Properties();
        java.lang.String str14 = properties13.toString();
        java.lang.Object obj16 = properties13.remove((java.lang.Object) (short) 100);
        java.lang.Object obj19 = properties13.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties21 = atomikosProperties20.asProperties();
        java.lang.Object obj22 = properties13.remove((java.lang.Object) properties21);
        java.util.Properties properties23 = new java.util.Properties(properties21);
        java.util.Properties properties25 = new java.util.Properties();
        java.lang.Object obj27 = properties25.remove((java.lang.Object) (-1.0d));
        boolean boolean28 = properties25.isEmpty();
        java.util.Collection<java.lang.Object> objCollection29 = properties25.values();
        java.util.Properties properties30 = new java.util.Properties(properties25);
        java.util.Properties properties31 = new java.util.Properties();
        java.lang.String str32 = properties31.toString();
        java.lang.Object obj34 = properties31.remove((java.lang.Object) (short) 100);
        java.lang.Object obj37 = properties31.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean39 = properties31.containsKey((java.lang.Object) 0L);
        java.lang.Object obj42 = properties31.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj45 = properties31.setProperty("", "{-1.0=100}");
        java.lang.Object obj46 = properties31.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery47 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery47.retryInterval = (short) 100;
        recovery47.forgetOrphanedLogEntriesDelay = 'a';
        boolean boolean52 = properties31.equals((java.lang.Object) 'a');
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery53 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long54 = recovery53.getRetryInterval();
        long long55 = recovery53.getDelay();
        long long56 = recovery53.getDelay();
        recovery53.retryInterval = 100L;
        boolean boolean59 = properties31.contains((java.lang.Object) recovery53);
        recovery53.setMaxRetries((int) (byte) 10);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties62 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties63 = atomikosProperties62.asProperties();
        atomikosProperties62.service = "{-1.0=100}";
        long long66 = atomikosProperties62.getDefaultJtaTimeout();
        atomikosProperties62.serialJtaTransactions = true;
        atomikosProperties62.maxActives = ' ';
        atomikosProperties62.maxActives = (byte) 10;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery73 = atomikosProperties62.recovery;
        java.lang.Object obj74 = properties25.replace((java.lang.Object) recovery53, (java.lang.Object) atomikosProperties62);
        atomikosProperties2.set(properties21, "{com.atomikos.icatch.tm.out=hi!}", (java.lang.Object) properties25);
        java.lang.String str76 = atomikosProperties2.outputDir;
        java.lang.String str77 = atomikosProperties2.consoleFileName;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "{}" + "'", str14, "{}");
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNotNull(properties21);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objCollection29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "{}" + "'", str32, "{}");
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertNotNull(obj46);
// flaky:         org.junit.Assert.assertEquals(obj46.toString(), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj46), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj46), "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 10000L + "'", long54 == 10000L);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 10000L + "'", long55 == 10000L);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 10000L + "'", long56 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(properties63);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 10000L + "'", long66 == 10000L);
        org.junit.Assert.assertNotNull(recovery73);
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "tm.out" + "'", str77, "tm.out");
    }

    @Test
    public void test08323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08323");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties0.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties0.keys();
        java.lang.String str4 = properties0.toString();
        boolean boolean5 = properties0.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties7 = atomikosProperties6.asProperties();
        atomikosProperties6.service = "{-1.0=100}";
        long long10 = atomikosProperties6.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel11 = null;
        atomikosProperties6.setConsoleLogLevel(atomikosLoggingLevel11);
        int int13 = atomikosProperties6.maxActives;
        atomikosProperties6.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery16 = atomikosProperties6.getRecovery();
        atomikosProperties6.forceShutdownOnVmExit = false;
        java.util.Properties properties19 = atomikosProperties6.asProperties();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet20 = properties19.entrySet();
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.String str22 = properties21.toString();
        java.lang.Object obj24 = properties21.remove((java.lang.Object) (short) 100);
        java.lang.Object obj25 = properties21.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean27 = atomikosProperties26.enableLogging;
        long long28 = atomikosProperties26.getDefaultJtaTimeout();
        java.lang.Object obj29 = properties19.put(obj25, (java.lang.Object) atomikosProperties26);
        boolean boolean30 = atomikosProperties26.isThreadedTwoPhaseCommit();
        atomikosProperties26.setOutputDir("tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties34 = atomikosProperties33.asProperties();
        atomikosProperties33.service = "{-1.0=100}";
        long long37 = atomikosProperties33.getDefaultJtaTimeout();
        atomikosProperties33.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties33.setMaxActives(100);
        java.lang.Object obj42 = properties0.replace((java.lang.Object) "tm.out", (java.lang.Object) atomikosProperties33);
        int int43 = properties0.size();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(objEnumeration3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{}" + "'", str4, "{}");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 50 + "'", int13 == 50);
        org.junit.Assert.assertNotNull(recovery16);
        org.junit.Assert.assertNotNull(properties19);
        org.junit.Assert.assertNotNull(objEntrySet20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{}" + "'", str22, "{}");
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "{}");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 10000L + "'", long28 == 10000L);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(properties34);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 10000L + "'", long37 == 10000L);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
    }

    @Test
    public void test08324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08324");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long1 = recovery0.getRetryInterval();
        long long2 = recovery0.getDelay();
        long long3 = recovery0.getDelay();
        recovery0.setForgetOrphanedLogEntriesDelay(10000L);
        recovery0.retryInterval = '4';
        recovery0.setRetryInterval((long) (short) 0);
        long long10 = recovery0.getForgetOrphanedLogEntriesDelay();
        long long11 = recovery0.delay;
        long long12 = recovery0.getDelay();
        int int13 = recovery0.getMaxRetries();
        recovery0.retryInterval = 19L;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 10000L + "'", long1 == 10000L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10000L + "'", long2 == 10000L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 10000L + "'", long3 == 10000L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10000L + "'", long11 == 10000L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10000L + "'", long12 == 10000L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
    }

    @Test
    public void test08325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08325");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        boolean boolean2 = properties0.isEmpty();
        java.util.Properties properties3 = new java.util.Properties();
        java.lang.String str4 = properties3.toString();
        java.lang.Object obj6 = properties3.remove((java.lang.Object) (short) 100);
        java.lang.Object obj9 = properties3.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean11 = properties3.containsKey((java.lang.Object) 0L);
        boolean boolean12 = properties0.containsValue((java.lang.Object) 0L);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery13 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        boolean boolean14 = properties0.contains((java.lang.Object) recovery13);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean16 = atomikosProperties15.isSerialJtaTransactions();
        atomikosProperties15.logBaseName = "{-1.0=100}";
        int int19 = atomikosProperties15.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery20 = atomikosProperties15.getRecovery();
        atomikosProperties15.setConsoleFileCount((int) (byte) 100);
        atomikosProperties15.setAllowSubTransactions(true);
        atomikosProperties15.setService("tm.out");
        int int27 = atomikosProperties15.consoleFileLimit;
        atomikosProperties15.setDefaultJtaTimeout((long) 'a');
        boolean boolean30 = atomikosProperties15.enableLogging;
        java.lang.String str31 = atomikosProperties15.consoleFileName;
        java.lang.String str32 = atomikosProperties15.transactionManagerUniqueName;
        boolean boolean33 = atomikosProperties15.isSerialJtaTransactions();
        atomikosProperties15.serialJtaTransactions = true;
        boolean boolean36 = properties0.containsValue((java.lang.Object) atomikosProperties15);
        atomikosProperties15.consoleFileCount = (byte) -1;
        long long39 = atomikosProperties15.maxTimeout;
        atomikosProperties15.setOutputDir("");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{}" + "'", str4, "{}");
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 50 + "'", int19 == 50);
        org.junit.Assert.assertNotNull(recovery20);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "tm.out" + "'", str31, "tm.out");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 300000L + "'", long39 == 300000L);
    }

    @Test
    public void test08326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08326");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties12 = new java.util.Properties(properties0);
        int int13 = properties0.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties15 = atomikosProperties14.asProperties();
        atomikosProperties14.service = "{-1.0=100}";
        long long18 = atomikosProperties14.getDefaultJtaTimeout();
        atomikosProperties14.serialJtaTransactions = true;
        long long21 = atomikosProperties14.getDefaultJtaTimeout();
        long long22 = atomikosProperties14.checkpointInterval;
        java.util.Properties properties23 = new java.util.Properties();
        java.lang.Object obj25 = properties23.remove((java.lang.Object) (-1.0d));
        boolean boolean26 = properties23.isEmpty();
        java.lang.Object obj29 = properties23.setProperty("hi!", "{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties32 = atomikosProperties31.asProperties();
        atomikosProperties31.service = "{-1.0=100}";
        long long35 = atomikosProperties31.getDefaultJtaTimeout();
        atomikosProperties31.serialJtaTransactions = true;
        atomikosProperties31.maxActives = ' ';
        atomikosProperties14.set(properties23, "", (java.lang.Object) ' ');
        java.util.Properties properties41 = new java.util.Properties();
        java.lang.String str42 = properties41.toString();
        java.lang.Object obj44 = properties41.remove((java.lang.Object) (short) 100);
        java.lang.Object obj47 = properties41.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean49 = properties41.containsKey((java.lang.Object) 0L);
        java.lang.Object obj52 = properties41.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties53 = new java.util.Properties();
        java.lang.String str54 = properties53.toString();
        java.lang.Object obj56 = properties53.remove((java.lang.Object) (short) 100);
        java.lang.Object obj59 = properties53.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj60 = properties53.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration61 = properties53.elements();
        properties41.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties53);
        java.lang.Object obj63 = properties53.clone();
        java.util.Set<java.lang.String> strSet64 = properties53.stringPropertyNames();
        java.lang.Object obj65 = properties0.replace((java.lang.Object) atomikosProperties14, (java.lang.Object) strSet64);
        atomikosProperties14.setSerialJtaTransactions(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery68 = atomikosProperties14.getRecovery();
        long long69 = recovery68.getForgetOrphanedLogEntriesDelay();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10000L + "'", long18 == 10000L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10000L + "'", long21 == 10000L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 500L + "'", long22 == 500L);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNotNull(properties32);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 10000L + "'", long35 == 10000L);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "{}" + "'", str42, "{}");
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "{}" + "'", str54, "{}");
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertNotNull(obj60);
        org.junit.Assert.assertEquals(obj60.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj60), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj60), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration61);
        org.junit.Assert.assertNotNull(obj63);
        org.junit.Assert.assertEquals(obj63.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj63), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj63), "{1.0=-1}");
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertNotNull(recovery68);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 86400000L + "'", long69 == 86400000L);
    }

    @Test
    public void test08327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08327");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        int int5 = atomikosProperties0.consoleFileCount;
        atomikosProperties0.transactionManagerUniqueName = "tm.out";
        atomikosProperties0.consoleFileName = "tm.out";
        boolean boolean10 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.setMaxTimeout(0L);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test08328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08328");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        atomikosProperties2.service = "{-1.0=100}";
        long long6 = atomikosProperties2.getDefaultJtaTimeout();
        atomikosProperties2.consoleFileLimit = '#';
        java.lang.Object obj9 = properties1.get((java.lang.Object) atomikosProperties2);
        boolean boolean10 = atomikosProperties2.forceShutdownOnVmExit;
        atomikosProperties2.setOutputDir("");
        atomikosProperties2.setThreadedTwoPhaseCommit(false);
        boolean boolean15 = atomikosProperties2.isEnableLogging();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery16 = atomikosProperties2.getRecovery();
        atomikosProperties2.setAllowSubTransactions(false);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(recovery16);
    }

    @Test
    public void test08329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08329");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.enableLogging = false;
        atomikosProperties0.setMaxActives((int) ' ');
        java.util.Properties properties9 = atomikosProperties0.asProperties();
        java.util.Enumeration<java.lang.Object> objEnumeration10 = properties9.elements();
        java.lang.String str11 = properties9.toString();
        java.lang.String str14 = properties9.getProperty("{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}", "");
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertNotNull(objEnumeration10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=32, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={-1.0=100}, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}" + "'", str11, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=32, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={-1.0=100}, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test08330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08330");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        boolean boolean5 = properties0.containsKey((java.lang.Object) 0L);
        java.util.Properties properties6 = new java.util.Properties();
        java.lang.String str7 = properties6.toString();
        java.util.Properties properties8 = new java.util.Properties(properties6);
        java.util.Properties properties9 = new java.util.Properties();
        java.lang.String str10 = properties9.toString();
        java.lang.Object obj12 = properties9.remove((java.lang.Object) (short) 100);
        java.lang.Object obj15 = properties9.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean17 = properties9.containsKey((java.lang.Object) 0L);
        java.lang.Object obj20 = properties9.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj23 = properties9.setProperty("", "{-1.0=100}");
        java.util.Enumeration<java.lang.Object> objEnumeration24 = properties9.keys();
        java.util.Properties properties25 = new java.util.Properties();
        java.lang.String str26 = properties25.toString();
        boolean boolean27 = properties25.isEmpty();
        java.lang.Object obj30 = properties25.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration31 = properties25.elements();
        java.lang.Object obj32 = properties8.replace((java.lang.Object) objEnumeration24, (java.lang.Object) properties25);
        java.util.Enumeration<java.lang.Object> objEnumeration33 = properties25.elements();
        java.util.Properties properties34 = new java.util.Properties();
        java.lang.String str35 = properties34.toString();
        boolean boolean36 = properties34.isEmpty();
        java.lang.Object obj39 = properties34.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Properties properties40 = new java.util.Properties();
        java.lang.String str41 = properties40.toString();
        java.lang.Object obj43 = properties40.remove((java.lang.Object) (short) 100);
        java.lang.Object obj46 = properties40.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean48 = properties40.containsKey((java.lang.Object) 0L);
        java.lang.Object obj51 = properties40.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties52 = new java.util.Properties(properties40);
        boolean boolean53 = properties34.containsValue((java.lang.Object) properties40);
        java.util.Properties properties54 = new java.util.Properties();
        java.lang.String str55 = properties54.toString();
        java.lang.Object obj57 = properties54.remove((java.lang.Object) (short) 100);
        java.lang.Object obj60 = properties54.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean62 = properties54.containsKey((java.lang.Object) 0L);
        java.lang.Object obj65 = properties54.replace((java.lang.Object) false, (java.lang.Object) ' ');
        boolean boolean66 = properties54.isEmpty();
        boolean boolean67 = properties0.replace((java.lang.Object) properties25, (java.lang.Object) properties34, (java.lang.Object) properties54);
        java.util.Enumeration<java.lang.Object> objEnumeration68 = properties25.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties69 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties70 = atomikosProperties69.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties71 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties72 = atomikosProperties71.asProperties();
        atomikosProperties71.service = "{-1.0=100}";
        long long75 = atomikosProperties71.getDefaultJtaTimeout();
        atomikosProperties71.consoleFileLimit = '#';
        java.lang.Object obj78 = properties70.get((java.lang.Object) atomikosProperties71);
        boolean boolean79 = atomikosProperties71.forceShutdownOnVmExit;
        atomikosProperties71.setOutputDir("");
        long long82 = atomikosProperties71.defaultJtaTimeout;
        java.lang.String str83 = atomikosProperties71.getLogBaseName();
        atomikosProperties71.setEnableLogging(false);
        atomikosProperties71.consoleFileName = "{1.0=-1, -1.0=100}";
        atomikosProperties71.allowSubTransactions = true;
        atomikosProperties71.consoleFileName = "{-1.0=100}";
        java.lang.Object obj92 = properties25.get((java.lang.Object) atomikosProperties71);
        atomikosProperties71.setLogBaseName("{1.0=-1, ={1.0=-1}, -1.0=100}");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "{}" + "'", str7, "{}");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "{}" + "'", str10, "{}");
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNotNull(objEnumeration24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "{}" + "'", str26, "{}");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNotNull(objEnumeration31);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNotNull(objEnumeration33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "{}" + "'", str35, "{}");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "{}" + "'", str41, "{}");
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "{}" + "'", str55, "{}");
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(objEnumeration68);
        org.junit.Assert.assertNotNull(properties70);
        org.junit.Assert.assertNotNull(properties72);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 10000L + "'", long75 == 10000L);
        org.junit.Assert.assertNull(obj78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 10000L + "'", long82 == 10000L);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "tmlog" + "'", str83, "tmlog");
        org.junit.Assert.assertNull(obj92);
    }

    @Test
    public void test08331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08331");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties3 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties4 = atomikosProperties3.asProperties();
        atomikosProperties3.service = "{-1.0=100}";
        long long7 = atomikosProperties3.getDefaultJtaTimeout();
        atomikosProperties3.setThreadedTwoPhaseCommit(true);
        boolean boolean10 = atomikosProperties3.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery11 = atomikosProperties3.recovery;
        atomikosProperties3.setLogBaseDir("");
        atomikosProperties3.setConsoleFileName("");
        atomikosProperties3.setThreadedTwoPhaseCommit(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean19 = atomikosProperties18.isSerialJtaTransactions();
        atomikosProperties18.logBaseName = "{-1.0=100}";
        int int22 = atomikosProperties18.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery23 = atomikosProperties18.getRecovery();
        atomikosProperties18.setConsoleFileCount((int) (byte) 100);
        atomikosProperties18.setAllowSubTransactions(true);
        atomikosProperties18.setService("tm.out");
        int int30 = atomikosProperties18.consoleFileLimit;
        atomikosProperties18.setDefaultJtaTimeout((long) 'a');
        atomikosProperties18.setEnableLogging(true);
        java.util.Properties properties35 = new java.util.Properties();
        java.util.Enumeration<?> wildcardEnumeration36 = properties35.propertyNames();
        boolean boolean37 = properties0.replace((java.lang.Object) atomikosProperties3, (java.lang.Object) true, (java.lang.Object) properties35);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties39 = atomikosProperties38.asProperties();
        atomikosProperties38.service = "{-1.0=100}";
        long long42 = atomikosProperties38.getDefaultJtaTimeout();
        long long43 = atomikosProperties38.getMaxTimeout();
        java.lang.String str44 = atomikosProperties38.outputDir;
        atomikosProperties38.consoleFileName = "tm.out";
        java.lang.String str47 = atomikosProperties38.consoleFileName;
        atomikosProperties38.enableLogging = true;
        java.util.Properties properties50 = new java.util.Properties();
        java.util.Enumeration<?> wildcardEnumeration51 = properties50.propertyNames();
        java.lang.Object obj52 = properties50.clone();
        java.util.Collection<java.lang.Object> objCollection53 = properties50.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties54 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties54.setEnableLogging(true);
        atomikosProperties54.setConsoleFileLimit((int) (short) 0);
        atomikosProperties54.maxActives = 1;
        java.util.Properties properties61 = new java.util.Properties();
        java.lang.Object obj63 = properties61.remove((java.lang.Object) (-1.0d));
        int int64 = properties61.size();
        java.util.Enumeration<java.lang.Object> objEnumeration65 = properties61.elements();
        java.lang.Object obj66 = properties50.getOrDefault((java.lang.Object) 1, (java.lang.Object) properties61);
        java.lang.Object obj67 = properties35.put((java.lang.Object) true, (java.lang.Object) properties61);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties68 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean69 = atomikosProperties68.isSerialJtaTransactions();
        atomikosProperties68.logBaseName = "{-1.0=100}";
        int int72 = atomikosProperties68.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery73 = atomikosProperties68.getRecovery();
        recovery73.setForgetOrphanedLogEntriesDelay(1L);
        boolean boolean76 = properties61.containsValue((java.lang.Object) 1L);
        java.lang.String str78 = properties61.getProperty("");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNotNull(properties4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(recovery11);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 50 + "'", int22 == 50);
        org.junit.Assert.assertNotNull(recovery23);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(wildcardEnumeration36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(properties39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 10000L + "'", long42 == 10000L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 300000L + "'", long43 == 300000L);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "tm.out" + "'", str47, "tm.out");
        org.junit.Assert.assertNotNull(wildcardEnumeration51);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertEquals(obj52.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj52), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj52), "{}");
        org.junit.Assert.assertNotNull(objCollection53);
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(objEnumeration65);
        org.junit.Assert.assertNotNull(obj66);
        org.junit.Assert.assertEquals(obj66.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj66), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj66), "{}");
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 50 + "'", int72 == 50);
        org.junit.Assert.assertNotNull(recovery73);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(str78);
    }

    @Test
    public void test08332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08332");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        boolean boolean7 = atomikosProperties0.isAllowSubTransactions();
        int int8 = atomikosProperties0.getConsoleFileLimit();
        boolean boolean9 = atomikosProperties0.serialJtaTransactions;
        atomikosProperties0.setEnableLogging(false);
        int int12 = atomikosProperties0.getConsoleFileLimit();
        boolean boolean13 = atomikosProperties0.isSerialJtaTransactions();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test08333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08333");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileLimit = (byte) 10;
        long long7 = atomikosProperties0.getMaxTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel8 = null;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel8;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.getRecovery();
        boolean boolean11 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.setForceShutdownOnVmExit(false);
        long long14 = atomikosProperties0.getMaxTimeout();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery15 = atomikosProperties0.recovery;
        long long16 = recovery15.getDelay();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 300000L + "'", long14 == 300000L);
        org.junit.Assert.assertNotNull(recovery15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10000L + "'", long16 == 10000L);
    }

    @Test
    public void test08334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08334");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        boolean boolean7 = atomikosProperties0.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery8 = atomikosProperties0.recovery;
        atomikosProperties0.setLogBaseDir("");
        long long11 = atomikosProperties0.maxTimeout;
        boolean boolean12 = atomikosProperties0.isAllowSubTransactions();
        java.lang.String str13 = atomikosProperties0.service;
        java.lang.String str14 = atomikosProperties0.getTransactionManagerUniqueName();
        java.lang.String str15 = atomikosProperties0.logBaseDir;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(recovery8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 300000L + "'", long11 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{-1.0=100}" + "'", str13, "{-1.0=100}");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test08335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08335");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties0.setMaxActives(100);
        boolean boolean9 = atomikosProperties0.enableLogging;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.recovery;
        atomikosProperties0.checkpointInterval = 300000L;
        int int13 = atomikosProperties0.consoleFileCount;
        atomikosProperties0.enableLogging = true;
        atomikosProperties0.setLogBaseName("hi!");
        atomikosProperties0.setLogBaseDir("hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties21 = atomikosProperties20.asProperties();
        atomikosProperties20.service = "{-1.0=100}";
        long long24 = atomikosProperties20.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel25 = null;
        atomikosProperties20.setConsoleLogLevel(atomikosLoggingLevel25);
        int int27 = atomikosProperties20.maxActives;
        atomikosProperties20.setLogBaseDir("{}");
        java.lang.String str30 = atomikosProperties20.logBaseDir;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties32 = atomikosProperties31.asProperties();
        atomikosProperties31.service = "{-1.0=100}";
        long long35 = atomikosProperties31.getDefaultJtaTimeout();
        boolean boolean36 = atomikosProperties31.enableLogging;
        boolean boolean37 = atomikosProperties31.isForceShutdownOnVmExit();
        atomikosProperties31.consoleFileLimit = (byte) -1;
        java.lang.String str40 = atomikosProperties31.getService();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel41 = atomikosProperties31.consoleLogLevel;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties43 = atomikosProperties42.asProperties();
        atomikosProperties42.service = "{-1.0=100}";
        long long46 = atomikosProperties42.getDefaultJtaTimeout();
        atomikosProperties42.serialJtaTransactions = true;
        long long49 = atomikosProperties42.maxTimeout;
        atomikosProperties42.setLogBaseDir("{-1.0=100}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties52 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties52.setAllowSubTransactions(true);
        atomikosProperties52.maxActives = (short) -1;
        atomikosProperties52.setService("tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties59 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties59.setAllowSubTransactions(true);
        boolean boolean62 = atomikosProperties59.enableLogging;
        boolean boolean63 = atomikosProperties59.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel64 = atomikosProperties59.consoleLogLevel;
        atomikosProperties52.setConsoleLogLevel(atomikosLoggingLevel64);
        atomikosProperties42.consoleLogLevel = atomikosLoggingLevel64;
        atomikosProperties31.consoleLogLevel = atomikosLoggingLevel64;
        atomikosProperties20.setConsoleLogLevel(atomikosLoggingLevel64);
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel64);
        boolean boolean70 = atomikosProperties0.enableLogging;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(properties21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 10000L + "'", long24 == 10000L);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 50 + "'", int27 == 50);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "{}" + "'", str30, "{}");
        org.junit.Assert.assertNotNull(properties32);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 10000L + "'", long35 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "{-1.0=100}" + "'", str40, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel41 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel41.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(properties43);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 10000L + "'", long46 == 10000L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 300000L + "'", long49 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel64 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel64.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
    }

    @Test
    public void test08336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08336");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileLimit = (byte) 10;
        long long7 = atomikosProperties0.getMaxTimeout();
        boolean boolean8 = atomikosProperties0.threadedTwoPhaseCommit;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery9 = atomikosProperties0.getRecovery();
        atomikosProperties0.threadedTwoPhaseCommit = true;
        atomikosProperties0.enableLogging = true;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(recovery9);
    }

    @Test
    public void test08337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08337");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        int int7 = atomikosProperties0.maxActives;
        atomikosProperties0.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.getRecovery();
        atomikosProperties0.forceShutdownOnVmExit = false;
        long long13 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.consoleFileLimit = (short) 0;
        int int16 = atomikosProperties0.getMaxActives();
        int int17 = atomikosProperties0.maxActives;
        atomikosProperties0.checkpointInterval = 20;
        java.lang.String str20 = atomikosProperties0.getLogBaseName();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 500L + "'", long13 == 500L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 50 + "'", int16 == 50);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 50 + "'", int17 == 50);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "tmlog" + "'", str20, "tmlog");
    }

    @Test
    public void test08338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08338");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        long long7 = atomikosProperties0.getDefaultJtaTimeout();
        long long8 = atomikosProperties0.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery9 = atomikosProperties0.getRecovery();
        java.lang.String str10 = atomikosProperties0.outputDir;
        atomikosProperties0.consoleFileCount = 32;
        atomikosProperties0.consoleFileLimit = (short) -1;
        boolean boolean15 = atomikosProperties0.serialJtaTransactions;
        java.lang.String str16 = atomikosProperties0.consoleFileName;
        java.lang.String str17 = atomikosProperties0.service;
        java.util.Properties properties18 = new java.util.Properties();
        java.lang.String str19 = properties18.toString();
        properties18.clear();
        java.lang.String str21 = properties18.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties24 = atomikosProperties23.asProperties();
        atomikosProperties23.service = "{-1.0=100}";
        java.lang.String str27 = atomikosProperties23.getTransactionManagerUniqueName();
        atomikosProperties23.consoleFileName = "hi!";
        atomikosProperties23.serialJtaTransactions = true;
        atomikosProperties23.outputDir = "tm.out";
        int int34 = atomikosProperties23.getConsoleFileLimit();
        int int35 = atomikosProperties23.getMaxActives();
        atomikosProperties23.setForceShutdownOnVmExit(true);
        atomikosProperties0.set(properties18, "tm.out", (java.lang.Object) true);
        java.io.OutputStream outputStream39 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties18.storeToXML(outputStream39, "{={={-1.0=100}, -1.0=100}}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(recovery9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tm.out" + "'", str16, "tm.out");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "{-1.0=100}" + "'", str17, "{-1.0=100}");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "{}" + "'", str19, "{}");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "{}" + "'", str21, "{}");
        org.junit.Assert.assertNotNull(properties24);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 50 + "'", int35 == 50);
    }

    @Test
    public void test08339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08339");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        boolean boolean7 = atomikosProperties0.isAllowSubTransactions();
        boolean boolean8 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.allowSubTransactions = false;
        atomikosProperties0.threadedTwoPhaseCommit = true;
        atomikosProperties0.setLogBaseName("tm.out");
        boolean boolean15 = atomikosProperties0.isForceShutdownOnVmExit();
        int int16 = atomikosProperties0.consoleFileCount;
        atomikosProperties0.setMaxTimeout((long) (byte) -1);
        boolean boolean19 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.outputDir = "";
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test08340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08340");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        boolean boolean2 = properties0.isEmpty();
        java.lang.Object obj5 = properties0.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration6 = properties0.elements();
        java.lang.Object obj9 = properties0.setProperty("{100=100}", "tm.out");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(objEnumeration6);
        org.junit.Assert.assertNull(obj9);
    }

    @Test
    public void test08341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08341");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.util.Properties properties4 = new java.util.Properties();
        java.lang.String str5 = properties4.toString();
        boolean boolean6 = properties4.isEmpty();
        java.lang.Object obj9 = properties4.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration10 = properties4.elements();
        boolean boolean11 = properties0.containsKey((java.lang.Object) properties4);
        java.util.Set<java.lang.String> strSet12 = properties0.stringPropertyNames();
        java.lang.Object obj15 = properties0.setProperty("{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}", "hi!");
        java.io.Reader reader16 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.load(reader16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{}" + "'", str5, "{}");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNotNull(objEnumeration10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNull(obj15);
    }

    @Test
    public void test08342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08342");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        boolean boolean7 = atomikosProperties0.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery8 = atomikosProperties0.recovery;
        atomikosProperties0.setLogBaseDir("");
        long long11 = atomikosProperties0.getDefaultJtaTimeout();
        int int12 = atomikosProperties0.consoleFileCount;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(recovery8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10000L + "'", long11 == 10000L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test08343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08343");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        atomikosProperties0.maxActives = ' ';
        int int9 = atomikosProperties0.getConsoleFileCount();
        int int10 = atomikosProperties0.consoleFileLimit;
        java.util.Properties properties11 = atomikosProperties0.asProperties();
        atomikosProperties0.threadedTwoPhaseCommit = true;
        atomikosProperties0.setCheckpointInterval((long) 97);
        long long16 = atomikosProperties0.maxTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel17 = atomikosProperties0.getConsoleLogLevel();
        atomikosProperties0.service = "{{1.0=-1}=hi!}";
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 300000L + "'", long16 == 300000L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel17 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel17.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
    }

    @Test
    public void test08344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08344");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        atomikosProperties2.service = "{-1.0=100}";
        long long6 = atomikosProperties2.getDefaultJtaTimeout();
        atomikosProperties2.consoleFileLimit = '#';
        java.lang.Object obj9 = properties1.get((java.lang.Object) atomikosProperties2);
        boolean boolean10 = atomikosProperties2.forceShutdownOnVmExit;
        atomikosProperties2.setOutputDir("");
        long long13 = atomikosProperties2.defaultJtaTimeout;
        java.lang.String str14 = atomikosProperties2.getLogBaseName();
        java.lang.String str15 = atomikosProperties2.logBaseName;
        atomikosProperties2.setConsoleFileLimit((int) (short) 1);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel18 = atomikosProperties2.getConsoleLogLevel();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel19 = atomikosProperties2.consoleLogLevel;
        boolean boolean20 = atomikosProperties2.isSerialJtaTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery21 = atomikosProperties2.recovery;
        recovery21.setRetryInterval((long) 19);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10000L + "'", long13 == 10000L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "tmlog" + "'", str14, "tmlog");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "tmlog" + "'", str15, "tmlog");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel18 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel18.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel19 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel19.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(recovery21);
    }

    @Test
    public void test08345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08345");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        long long7 = atomikosProperties0.getDefaultJtaTimeout();
        long long8 = atomikosProperties0.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery9 = atomikosProperties0.getRecovery();
        long long10 = recovery9.delay;
        int int11 = recovery9.maxRetries;
        int int12 = recovery9.maxRetries;
        recovery9.setForgetOrphanedLogEntriesDelay((long) 3);
        recovery9.setForgetOrphanedLogEntriesDelay(1L);
        int int17 = recovery9.maxRetries;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(recovery9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 5 + "'", int12 == 5);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
    }

    @Test
    public void test08346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08346");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.checkpointInterval = 86400000L;
        int int4 = atomikosProperties0.getConsoleFileCount();
        atomikosProperties0.forceShutdownOnVmExit = false;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
    }

    @Test
    public void test08347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08347");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        long long7 = atomikosProperties0.maxTimeout;
        atomikosProperties0.setLogBaseDir("{-1.0=100}");
        atomikosProperties0.setEnableLogging(true);
        boolean boolean12 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.maxActives = 19;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test08348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08348");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.enableLogging = false;
        atomikosProperties0.setMaxTimeout((long) (byte) 0);
        atomikosProperties0.setAllowSubTransactions(true);
        java.util.Properties properties11 = new java.util.Properties();
        java.lang.Object obj13 = properties11.remove((java.lang.Object) (-1.0d));
        boolean boolean14 = properties11.isEmpty();
        java.util.Properties properties15 = new java.util.Properties();
        java.lang.String str16 = properties15.toString();
        java.lang.Object obj18 = properties15.remove((java.lang.Object) (short) 100);
        java.lang.Object obj21 = properties15.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean23 = properties15.containsKey((java.lang.Object) 0L);
        java.lang.Object obj26 = properties15.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj29 = properties15.setProperty("", "{-1.0=100}");
        java.lang.Object obj30 = properties15.clone();
        java.lang.Object obj31 = properties11.get((java.lang.Object) properties15);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery33 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery33.retryInterval = (short) 100;
        recovery33.forgetOrphanedLogEntriesDelay = 'a';
        long long38 = recovery33.getDelay();
        long long39 = recovery33.getRetryInterval();
        recovery33.forgetOrphanedLogEntriesDelay = 10000L;
        atomikosProperties0.set(properties15, "tmlog", (java.lang.Object) recovery33);
        atomikosProperties0.consoleFileLimit = 50;
        atomikosProperties0.setAllowSubTransactions(true);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{}" + "'", str16, "{}");
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNotNull(obj30);
// flaky:         org.junit.Assert.assertEquals(obj30.toString(), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 10000L + "'", long38 == 10000L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 100L + "'", long39 == 100L);
    }

    @Test
    public void test08349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08349");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileLimit = (byte) 10;
        long long7 = atomikosProperties0.getMaxTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel8 = null;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel8;
        atomikosProperties0.setService("");
        atomikosProperties0.setMaxTimeout((long) (short) -1);
        boolean boolean14 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.setConsoleFileLimit(18);
        atomikosProperties0.setCheckpointInterval(2L);
        atomikosProperties0.transactionManagerUniqueName = "{{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}=, ={-1.0=100}, -1.0=100}";
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test08350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08350");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        boolean boolean2 = properties0.isEmpty();
        java.lang.Object obj5 = properties0.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration6 = properties0.elements();
        java.util.Properties properties7 = new java.util.Properties();
        java.util.Properties properties8 = new java.util.Properties(properties7);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery9 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery9.retryInterval = (short) 100;
        recovery9.forgetOrphanedLogEntriesDelay = 'a';
        long long14 = recovery9.retryInterval;
        recovery9.forgetOrphanedLogEntriesDelay = 0L;
        long long17 = recovery9.getForgetOrphanedLogEntriesDelay();
        recovery9.setRetryInterval((long) 0);
        boolean boolean20 = properties0.remove((java.lang.Object) properties8, (java.lang.Object) 0);
        java.lang.String str22 = properties8.getProperty("hi!");
        java.util.Set<java.lang.Object> objSet23 = properties8.keySet();
        java.util.Properties properties24 = new java.util.Properties(properties8);
        java.util.Properties properties25 = new java.util.Properties(properties24);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties27 = atomikosProperties26.asProperties();
        atomikosProperties26.service = "{-1.0=100}";
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery30 = atomikosProperties26.recovery;
        atomikosProperties26.enableLogging = true;
        int int33 = atomikosProperties26.getConsoleFileCount();
        atomikosProperties26.maxTimeout = 1L;
        java.lang.String str36 = atomikosProperties26.outputDir;
        java.util.Properties properties37 = atomikosProperties26.asProperties();
        properties25.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties37);
        java.util.Properties properties39 = new java.util.Properties();
        java.lang.String str40 = properties39.toString();
        java.lang.Object obj42 = properties39.remove((java.lang.Object) (short) 100);
        java.lang.Object obj45 = properties39.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj46 = properties39.clone();
        java.util.Set<java.lang.String> strSet47 = properties39.stringPropertyNames();
        java.util.Properties properties48 = new java.util.Properties(properties39);
        java.lang.String str50 = properties48.getProperty("hi!");
        java.util.Collection<java.lang.Object> objCollection51 = properties48.values();
        properties37.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties48);
        java.io.InputStream inputStream53 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties37.loadFromXML(inputStream53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(objEnumeration6);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 100L + "'", long14 == 100L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(objSet23);
        org.junit.Assert.assertNotNull(properties27);
        org.junit.Assert.assertNotNull(recovery30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(properties37);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "{}" + "'", str40, "{}");
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertEquals(obj46.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj46), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj46), "{1.0=-1}");
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(objCollection51);
    }

    @Test
    public void test08351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08351");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        long long5 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.threadedTwoPhaseCommit = true;
        atomikosProperties0.setSerialJtaTransactions(true);
        atomikosProperties0.setDefaultJtaTimeout((-1L));
        atomikosProperties0.allowSubTransactions = false;
        int int14 = atomikosProperties0.consoleFileCount;
        atomikosProperties0.allowSubTransactions = true;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
    }

    @Test
    public void test08352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08352");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileName = "hi!";
        atomikosProperties0.setCheckpointInterval((long) 5);
        atomikosProperties0.setConsoleFileCount(0);
        boolean boolean11 = atomikosProperties0.isThreadedTwoPhaseCommit();
        long long12 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.setConsoleFileLimit((int) (byte) 100);
        boolean boolean15 = atomikosProperties0.isAllowSubTransactions();
        boolean boolean16 = atomikosProperties0.serialJtaTransactions;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 5L + "'", long12 == 5L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test08353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08353");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        atomikosProperties2.service = "{-1.0=100}";
        long long6 = atomikosProperties2.getDefaultJtaTimeout();
        atomikosProperties2.consoleFileLimit = '#';
        java.lang.Object obj9 = properties1.get((java.lang.Object) atomikosProperties2);
        boolean boolean10 = atomikosProperties2.forceShutdownOnVmExit;
        atomikosProperties2.setOutputDir("");
        boolean boolean13 = atomikosProperties2.forceShutdownOnVmExit;
        atomikosProperties2.enableLogging = true;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery16 = atomikosProperties2.recovery;
        long long17 = recovery16.retryInterval;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(recovery16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10000L + "'", long17 == 10000L);
    }

    @Test
    public void test08354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08354");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        boolean boolean5 = atomikosProperties0.isSerialJtaTransactions();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel6 = atomikosProperties0.getConsoleLogLevel();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery7 = atomikosProperties0.recovery;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties9 = atomikosProperties8.asProperties();
        atomikosProperties8.service = "{-1.0=100}";
        java.lang.String str12 = atomikosProperties8.getTransactionManagerUniqueName();
        atomikosProperties8.consoleFileName = "hi!";
        atomikosProperties8.service = "tm.out";
        atomikosProperties8.logBaseName = "tm.out";
        atomikosProperties8.setThreadedTwoPhaseCommit(true);
        atomikosProperties8.setThreadedTwoPhaseCommit(false);
        boolean boolean23 = atomikosProperties8.isSerialJtaTransactions();
        atomikosProperties8.setService("{100=100}");
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel26 = atomikosProperties8.consoleLogLevel;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel26);
        boolean boolean28 = atomikosProperties0.isEnableLogging();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel6 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel6.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(recovery7);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel26 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel26.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test08355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08355");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties12 = new java.util.Properties();
        java.lang.String str13 = properties12.toString();
        java.lang.Object obj15 = properties12.remove((java.lang.Object) (short) 100);
        java.lang.Object obj18 = properties12.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj19 = properties12.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration20 = properties12.elements();
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties12);
        boolean boolean23 = properties0.equals((java.lang.Object) 1.0f);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties25 = atomikosProperties24.asProperties();
        atomikosProperties24.service = "{-1.0=100}";
        long long28 = atomikosProperties24.getDefaultJtaTimeout();
        long long29 = atomikosProperties24.getMaxTimeout();
        int int30 = atomikosProperties24.consoleFileCount;
        int int31 = atomikosProperties24.getMaxActives();
        boolean boolean32 = atomikosProperties24.forceShutdownOnVmExit;
        java.lang.String str33 = atomikosProperties24.getTransactionManagerUniqueName();
        boolean boolean34 = properties0.containsValue((java.lang.Object) atomikosProperties24);
        java.util.Collection<java.lang.Object> objCollection35 = properties0.values();
        java.lang.String str36 = properties0.toString();
        java.lang.Object obj39 = properties0.setProperty("", "{1.0=-1}");
        java.util.Collection<java.lang.Object> objCollection40 = properties0.values();
        boolean boolean41 = properties0.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties43 = atomikosProperties42.asProperties();
        atomikosProperties42.service = "{-1.0=100}";
        long long46 = atomikosProperties42.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel47 = null;
        atomikosProperties42.setConsoleLogLevel(atomikosLoggingLevel47);
        int int49 = atomikosProperties42.maxActives;
        atomikosProperties42.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery52 = atomikosProperties42.getRecovery();
        atomikosProperties42.outputDir = "hi!";
        java.lang.String str55 = atomikosProperties42.getLogBaseName();
        boolean boolean56 = atomikosProperties42.serialJtaTransactions;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties57 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties58 = atomikosProperties57.asProperties();
        atomikosProperties57.service = "{-1.0=100}";
        long long61 = atomikosProperties57.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel62 = null;
        atomikosProperties57.setConsoleLogLevel(atomikosLoggingLevel62);
        int int64 = atomikosProperties57.maxActives;
        atomikosProperties57.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery67 = atomikosProperties57.getRecovery();
        atomikosProperties57.consoleFileName = "{-1.0=100}";
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel70 = null;
        atomikosProperties57.setConsoleLogLevel(atomikosLoggingLevel70);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel72 = atomikosProperties57.getConsoleLogLevel();
        int int73 = atomikosProperties57.consoleFileLimit;
        atomikosProperties57.setDefaultJtaTimeout((long) 'a');
        atomikosProperties57.setAllowSubTransactions(false);
        int int78 = atomikosProperties57.getConsoleFileLimit();
        java.lang.Object obj79 = properties0.put((java.lang.Object) boolean56, (java.lang.Object) int78);
        java.util.Enumeration<java.lang.Object> objEnumeration80 = properties0.keys();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{}" + "'", str13, "{}");
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 10000L + "'", long28 == 10000L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 300000L + "'", long29 == 300000L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 50 + "'", int31 == 50);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(objCollection35);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "{1.0=-1, -1.0=100}" + "'", str36, "{1.0=-1, -1.0=100}");
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNotNull(objCollection40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(properties43);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 10000L + "'", long46 == 10000L);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 50 + "'", int49 == 50);
        org.junit.Assert.assertNotNull(recovery52);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "tmlog" + "'", str55, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(properties58);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 10000L + "'", long61 == 10000L);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 50 + "'", int64 == 50);
        org.junit.Assert.assertNotNull(recovery67);
        org.junit.Assert.assertNull(atomikosLoggingLevel72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertNull(obj79);
        org.junit.Assert.assertNotNull(objEnumeration80);
    }

    @Test
    public void test08356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08356");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.consoleFileCount;
        int int5 = atomikosProperties0.getConsoleFileCount();
        atomikosProperties0.setSerialJtaTransactions(true);
        atomikosProperties0.serialJtaTransactions = false;
        boolean boolean10 = atomikosProperties0.isThreadedTwoPhaseCommit();
        atomikosProperties0.consoleFileLimit = 0;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test08357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08357");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setEnableLogging(true);
        atomikosProperties0.consoleFileCount = 0;
        atomikosProperties0.consoleFileCount = (byte) 0;
        int int7 = atomikosProperties0.maxActives;
        java.util.Properties properties8 = new java.util.Properties();
        java.lang.String str9 = properties8.toString();
        java.lang.Object obj11 = properties8.remove((java.lang.Object) (short) 100);
        java.lang.Object obj14 = properties8.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean16 = properties8.containsKey((java.lang.Object) 0L);
        java.lang.Object obj19 = properties8.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj22 = properties8.setProperty("", "{-1.0=100}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties25 = atomikosProperties24.asProperties();
        atomikosProperties24.service = "{-1.0=100}";
        long long28 = atomikosProperties24.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel29 = null;
        atomikosProperties24.setConsoleLogLevel(atomikosLoggingLevel29);
        int int31 = atomikosProperties24.maxActives;
        atomikosProperties24.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery34 = atomikosProperties24.getRecovery();
        atomikosProperties24.forceShutdownOnVmExit = false;
        java.lang.String str37 = atomikosProperties24.getConsoleFileName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties39 = atomikosProperties38.asProperties();
        atomikosProperties38.service = "{-1.0=100}";
        long long42 = atomikosProperties38.getDefaultJtaTimeout();
        atomikosProperties38.enableLogging = false;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties45 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties45.setEnableLogging(true);
        atomikosProperties45.consoleFileCount = 0;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties51 = atomikosProperties50.asProperties();
        atomikosProperties50.service = "{-1.0=100}";
        long long54 = atomikosProperties50.getDefaultJtaTimeout();
        boolean boolean55 = atomikosProperties50.enableLogging;
        boolean boolean56 = atomikosProperties50.isForceShutdownOnVmExit();
        atomikosProperties50.consoleFileLimit = (byte) -1;
        java.lang.String str59 = atomikosProperties50.getService();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel60 = atomikosProperties50.consoleLogLevel;
        atomikosProperties45.consoleLogLevel = atomikosLoggingLevel60;
        atomikosProperties38.setConsoleLogLevel(atomikosLoggingLevel60);
        atomikosProperties24.setConsoleLogLevel(atomikosLoggingLevel60);
        atomikosProperties0.set(properties8, "{100=100}", (java.lang.Object) atomikosProperties24);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery65 = atomikosProperties24.getRecovery();
        atomikosProperties24.service = "{1.0=-1}";
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{}" + "'", str9, "{}");
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 10000L + "'", long28 == 10000L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 50 + "'", int31 == 50);
        org.junit.Assert.assertNotNull(recovery34);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "tm.out" + "'", str37, "tm.out");
        org.junit.Assert.assertNotNull(properties39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 10000L + "'", long42 == 10000L);
        org.junit.Assert.assertNotNull(properties51);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 10000L + "'", long54 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "{-1.0=100}" + "'", str59, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel60 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel60.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(recovery65);
    }

    @Test
    public void test08358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08358");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setAllowSubTransactions(true);
        atomikosProperties0.logBaseName = "{={-1.0=100}, -1.0=100}";
        int int5 = atomikosProperties0.getConsoleFileLimit();
        boolean boolean6 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.allowSubTransactions = true;
        atomikosProperties0.setMaxTimeout((long) 35);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test08359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08359");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel7 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel7);
        atomikosProperties0.setLogBaseName("{={-1.0=100}, -1.0=100}");
        boolean boolean11 = atomikosProperties0.enableLogging;
        atomikosProperties0.setOutputDir("");
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel14 = atomikosProperties0.consoleLogLevel;
        atomikosProperties0.checkpointInterval = 0L;
        long long17 = atomikosProperties0.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties19 = atomikosProperties18.asProperties();
        atomikosProperties18.service = "{-1.0=100}";
        long long22 = atomikosProperties18.getDefaultJtaTimeout();
        atomikosProperties18.setTransactionManagerUniqueName("{}");
        java.lang.String str25 = atomikosProperties18.getService();
        java.util.Properties properties26 = atomikosProperties18.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery27 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery27.retryInterval = (short) 100;
        recovery27.forgetOrphanedLogEntriesDelay = 'a';
        long long32 = recovery27.getDelay();
        int int33 = recovery27.maxRetries;
        int int34 = recovery27.maxRetries;
        long long35 = recovery27.getRetryInterval();
        recovery27.retryInterval = 10L;
        long long38 = recovery27.getForgetOrphanedLogEntriesDelay();
        boolean boolean39 = properties26.contains((java.lang.Object) long38);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean42 = atomikosProperties41.isSerialJtaTransactions();
        atomikosProperties41.logBaseName = "{-1.0=100}";
        int int45 = atomikosProperties41.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery46 = atomikosProperties41.getRecovery();
        atomikosProperties41.setConsoleFileCount((int) (byte) 100);
        atomikosProperties41.setAllowSubTransactions(true);
        int int51 = atomikosProperties41.getMaxActives();
        boolean boolean52 = atomikosProperties41.isEnableLogging();
        atomikosProperties41.setOutputDir("");
        atomikosProperties41.maxTimeout = 1;
        atomikosProperties0.set(properties26, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=32, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={-1.0=100}, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}", (java.lang.Object) atomikosProperties41);
        atomikosProperties41.logBaseDir = "{com.atomikos.icatch.={}, 100=100}";
        atomikosProperties41.setAllowSubTransactions(true);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(atomikosLoggingLevel14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(properties19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 10000L + "'", long22 == 10000L);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "{-1.0=100}" + "'", str25, "{-1.0=100}");
        org.junit.Assert.assertNotNull(properties26);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 10000L + "'", long32 == 10000L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5 + "'", int33 == 5);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 5 + "'", int34 == 5);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 100L + "'", long35 == 100L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 97L + "'", long38 == 97L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 50 + "'", int45 == 50);
        org.junit.Assert.assertNotNull(recovery46);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 50 + "'", int51 == 50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
    }

    @Test
    public void test08360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08360");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.String str9 = properties0.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        atomikosProperties10.service = "{-1.0=100}";
        long long14 = atomikosProperties10.getDefaultJtaTimeout();
        atomikosProperties10.setMaxActives(0);
        atomikosProperties10.maxActives = 'a';
        boolean boolean19 = atomikosProperties10.isThreadedTwoPhaseCommit();
        boolean boolean20 = atomikosProperties10.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel21 = atomikosProperties10.consoleLogLevel;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties23 = atomikosProperties22.asProperties();
        atomikosProperties22.service = "{-1.0=100}";
        long long26 = atomikosProperties22.getDefaultJtaTimeout();
        atomikosProperties22.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties22.setMaxActives(100);
        java.lang.String str31 = atomikosProperties22.logBaseDir;
        java.lang.String str32 = atomikosProperties22.outputDir;
        java.lang.Object obj33 = properties0.replace((java.lang.Object) atomikosLoggingLevel21, (java.lang.Object) atomikosProperties22);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery34 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long35 = recovery34.getRetryInterval();
        long long36 = recovery34.retryInterval;
        recovery34.forgetOrphanedLogEntriesDelay = (byte) -1;
        recovery34.setMaxRetries(10);
        java.lang.Object obj41 = properties0.get((java.lang.Object) recovery34);
        long long42 = recovery34.getDelay();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{-1.0=100}" + "'", str9, "{-1.0=100}");
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10000L + "'", long14 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel21 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel21.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(properties23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 10000L + "'", long26 == 10000L);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "{={-1.0=100}, -1.0=100}" + "'", str32, "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 10000L + "'", long35 == 10000L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 10000L + "'", long36 == 10000L);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 10000L + "'", long42 == 10000L);
    }

    @Test
    public void test08361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08361");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.threadedTwoPhaseCommit = true;
        java.lang.String str4 = atomikosProperties0.consoleFileName;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tm.out" + "'", str4, "tm.out");
    }

    @Test
    public void test08362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08362");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj7 = properties0.clone();
        java.lang.String str9 = properties0.getProperty("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        atomikosProperties10.service = "{-1.0=100}";
        long long14 = atomikosProperties10.getDefaultJtaTimeout();
        atomikosProperties10.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties10.setMaxActives(100);
        boolean boolean19 = atomikosProperties10.enableLogging;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery20 = atomikosProperties10.recovery;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties22 = atomikosProperties21.asProperties();
        atomikosProperties21.service = "{-1.0=100}";
        long long25 = atomikosProperties21.getDefaultJtaTimeout();
        atomikosProperties21.setMaxActives(0);
        boolean boolean28 = atomikosProperties21.threadedTwoPhaseCommit;
        boolean boolean29 = atomikosProperties21.allowSubTransactions;
        atomikosProperties21.logBaseDir = "{}";
        atomikosProperties21.service = "{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}";
        java.lang.Object obj34 = properties0.put((java.lang.Object) recovery20, (java.lang.Object) atomikosProperties21);
        atomikosProperties21.setService("{{}={}}");
        long long37 = atomikosProperties21.checkpointInterval;
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{1.0=-1}");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10000L + "'", long14 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(recovery20);
        org.junit.Assert.assertNotNull(properties22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 10000L + "'", long25 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 500L + "'", long37 == 500L);
    }

    @Test
    public void test08363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08363");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileLimit = (byte) 10;
        long long7 = atomikosProperties0.getMaxTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel8 = null;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel8;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.recovery;
        atomikosProperties0.consoleFileCount = (short) -1;
        boolean boolean13 = atomikosProperties0.isAllowSubTransactions();
        atomikosProperties0.consoleFileName = "tm.out";
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery16 = atomikosProperties0.getRecovery();
        atomikosProperties0.setThreadedTwoPhaseCommit(false);
        java.lang.String str19 = atomikosProperties0.getLogBaseDir();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(recovery16);
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test08364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08364");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getLogBaseName();
        long long5 = atomikosProperties0.defaultJtaTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel6 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel6);
        atomikosProperties0.threadedTwoPhaseCommit = false;
        atomikosProperties0.allowSubTransactions = false;
        java.lang.String str12 = atomikosProperties0.getConsoleFileName();
        java.util.Properties properties13 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery14 = atomikosProperties0.recovery;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tmlog" + "'", str4, "tmlog");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 10000L + "'", long5 == 10000L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "tm.out" + "'", str12, "tm.out");
        org.junit.Assert.assertNotNull(properties13);
        org.junit.Assert.assertNotNull(recovery14);
    }

    @Test
    public void test08365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08365");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setAllowSubTransactions(true);
        boolean boolean3 = atomikosProperties0.enableLogging;
        atomikosProperties0.consoleFileLimit = (byte) 100;
        java.util.Properties properties6 = new java.util.Properties();
        java.lang.String str7 = properties6.toString();
        java.util.Properties properties8 = new java.util.Properties(properties6);
        java.util.Properties properties10 = new java.util.Properties();
        java.lang.String str11 = properties10.toString();
        java.lang.Object obj13 = properties10.remove((java.lang.Object) (short) 100);
        java.lang.Object obj16 = properties10.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean18 = properties10.containsKey((java.lang.Object) 0L);
        java.lang.Object obj21 = properties10.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties22 = new java.util.Properties(properties10);
        java.util.Enumeration<java.lang.Object> objEnumeration23 = properties22.elements();
        atomikosProperties0.set(properties8, "{={-1.0=100}, -1.0=100}", (java.lang.Object) properties22);
        int int25 = properties8.size();
        java.lang.Object obj28 = properties8.setProperty("tmlog", "hi!");
        java.util.Properties properties29 = new java.util.Properties();
        java.lang.String str30 = properties29.toString();
        java.lang.Object obj32 = properties29.remove((java.lang.Object) (short) 100);
        java.lang.Object obj33 = properties29.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties34 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties35 = atomikosProperties34.asProperties();
        atomikosProperties34.service = "{-1.0=100}";
        long long38 = atomikosProperties34.getDefaultJtaTimeout();
        atomikosProperties34.setThreadedTwoPhaseCommit(true);
        boolean boolean41 = atomikosProperties34.isAllowSubTransactions();
        boolean boolean42 = atomikosProperties34.isEnableLogging();
        atomikosProperties34.allowSubTransactions = false;
        java.lang.Object obj45 = properties29.remove((java.lang.Object) false);
        int int46 = properties29.size();
        boolean boolean47 = properties8.containsKey((java.lang.Object) properties29);
        java.util.Set<java.lang.String> strSet48 = properties29.stringPropertyNames();
        java.io.PrintWriter printWriter49 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties29.list(printWriter49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "{}" + "'", str7, "{}");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "{}" + "'", str11, "{}");
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNotNull(objEnumeration23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "{}" + "'", str30, "{}");
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "{}");
        org.junit.Assert.assertNotNull(properties35);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 10000L + "'", long38 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strSet48);
    }

    @Test
    public void test08366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08366");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        atomikosProperties2.service = "{-1.0=100}";
        long long6 = atomikosProperties2.getDefaultJtaTimeout();
        atomikosProperties2.consoleFileLimit = '#';
        java.lang.Object obj9 = properties1.get((java.lang.Object) atomikosProperties2);
        boolean boolean10 = atomikosProperties2.forceShutdownOnVmExit;
        atomikosProperties2.setOutputDir("");
        boolean boolean13 = atomikosProperties2.forceShutdownOnVmExit;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel14 = atomikosProperties2.consoleLogLevel;
        java.lang.String str15 = atomikosProperties2.getLogBaseDir();
        atomikosProperties2.maxTimeout = 5L;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery18 = atomikosProperties2.getRecovery();
        atomikosProperties2.consoleFileLimit = 5;
        int int21 = atomikosProperties2.getConsoleFileLimit();
        java.lang.String str22 = atomikosProperties2.getTransactionManagerUniqueName();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel14 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel14.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(recovery18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 5 + "'", int21 == 5);
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test08367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08367");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        atomikosProperties2.service = "{-1.0=100}";
        long long6 = atomikosProperties2.getDefaultJtaTimeout();
        atomikosProperties2.consoleFileLimit = '#';
        java.lang.Object obj9 = properties1.get((java.lang.Object) atomikosProperties2);
        boolean boolean10 = atomikosProperties2.forceShutdownOnVmExit;
        atomikosProperties2.setOutputDir("");
        long long13 = atomikosProperties2.defaultJtaTimeout;
        java.lang.String str14 = atomikosProperties2.getLogBaseName();
        java.lang.String str15 = atomikosProperties2.logBaseName;
        atomikosProperties2.setLogBaseDir("{{}={}}");
        java.lang.String str18 = atomikosProperties2.getLogBaseName();
        atomikosProperties2.consoleFileName = "{{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}=hi!}";
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10000L + "'", long13 == 10000L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "tmlog" + "'", str14, "tmlog");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "tmlog" + "'", str15, "tmlog");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "tmlog" + "'", str18, "tmlog");
    }

    @Test
    public void test08368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08368");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setEnableLogging(true);
        atomikosProperties0.consoleFileCount = 0;
        int int5 = atomikosProperties0.getMaxActives();
        java.lang.String str6 = atomikosProperties0.getLogBaseDir();
        java.lang.String str7 = atomikosProperties0.service;
        atomikosProperties0.transactionManagerUniqueName = "tmlog";
        atomikosProperties0.setTransactionManagerUniqueName("tm.out");
        int int12 = atomikosProperties0.getMaxActives();
        boolean boolean13 = atomikosProperties0.isEnableLogging();
        boolean boolean14 = atomikosProperties0.allowSubTransactions;
        atomikosProperties0.setMaxActives((-1));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 50 + "'", int5 == 50);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 50 + "'", int12 == 50);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test08369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08369");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.outputDir = "{={-1.0=100}, -1.0=100}";
        long long7 = atomikosProperties0.getCheckpointInterval();
        boolean boolean8 = atomikosProperties0.isThreadedTwoPhaseCommit();
        java.lang.String str9 = atomikosProperties0.service;
        int int10 = atomikosProperties0.consoleFileCount;
        atomikosProperties0.logBaseName = "tm.out";
        java.lang.String str13 = atomikosProperties0.getService();
        atomikosProperties0.threadedTwoPhaseCommit = false;
        atomikosProperties0.transactionManagerUniqueName = "{0={100=100}, {}={}}";
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{-1.0=100}" + "'", str9, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{-1.0=100}" + "'", str13, "{-1.0=100}");
    }

    @Test
    public void test08370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08370");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties7.setEnableLogging(true);
        atomikosProperties7.consoleFileCount = 0;
        atomikosProperties7.setSerialJtaTransactions(false);
        java.lang.String str14 = atomikosProperties7.getOutputDir();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties16 = atomikosProperties15.asProperties();
        atomikosProperties15.service = "{-1.0=100}";
        long long19 = atomikosProperties15.getDefaultJtaTimeout();
        atomikosProperties15.serialJtaTransactions = true;
        long long22 = atomikosProperties15.getDefaultJtaTimeout();
        long long23 = atomikosProperties15.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery24 = atomikosProperties15.getRecovery();
        recovery24.setRetryInterval((long) (byte) 0);
        java.lang.Object obj27 = properties0.replace((java.lang.Object) atomikosProperties7, (java.lang.Object) (byte) 0);
        int int28 = properties0.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties29.setAllowSubTransactions(true);
        boolean boolean32 = atomikosProperties29.enableLogging;
        atomikosProperties29.consoleFileLimit = (byte) 100;
        java.lang.String str35 = atomikosProperties29.getService();
        atomikosProperties29.threadedTwoPhaseCommit = false;
        boolean boolean38 = properties0.contains((java.lang.Object) atomikosProperties29);
        java.io.OutputStream outputStream39 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.store(outputStream39, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir={={-1.0=100}, -1.0=100}, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.output_dir={1.0=-1, -1.0=100}, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={-1.0=100}, com.atomikos.icatch.force_shutdown_on_vm_exit=true, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10000L + "'", long19 == 10000L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 10000L + "'", long22 == 10000L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 500L + "'", long23 == 500L);
        org.junit.Assert.assertNotNull(recovery24);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test08371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08371");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setMaxActives(0);
        boolean boolean7 = atomikosProperties0.threadedTwoPhaseCommit;
        boolean boolean8 = atomikosProperties0.allowSubTransactions;
        atomikosProperties0.logBaseDir = "{}";
        boolean boolean11 = atomikosProperties0.threadedTwoPhaseCommit;
        atomikosProperties0.threadedTwoPhaseCommit = true;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test08372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08372");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setEnableLogging(true);
        atomikosProperties0.consoleFileCount = 0;
        int int5 = atomikosProperties0.getMaxActives();
        atomikosProperties0.setCheckpointInterval((long) 32);
        atomikosProperties0.setForceShutdownOnVmExit(false);
        java.util.Properties properties10 = new java.util.Properties();
        java.lang.String str11 = properties10.toString();
        properties10.clear();
        java.lang.Object obj14 = properties10.get((java.lang.Object) "{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery15 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long16 = recovery15.getRetryInterval();
        long long17 = recovery15.getDelay();
        long long18 = recovery15.getDelay();
        recovery15.setForgetOrphanedLogEntriesDelay(10000L);
        recovery15.retryInterval = '4';
        recovery15.setRetryInterval((long) (short) 0);
        recovery15.setMaxRetries(0);
        java.lang.Object obj27 = properties10.get((java.lang.Object) 0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties29 = atomikosProperties28.asProperties();
        atomikosProperties28.service = "{-1.0=100}";
        long long32 = atomikosProperties28.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel33 = null;
        atomikosProperties28.setConsoleLogLevel(atomikosLoggingLevel33);
        int int35 = atomikosProperties28.maxActives;
        atomikosProperties28.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery38 = atomikosProperties28.getRecovery();
        atomikosProperties28.outputDir = "hi!";
        java.lang.String str41 = atomikosProperties28.getService();
        boolean boolean42 = properties10.equals((java.lang.Object) atomikosProperties28);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties43 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean44 = atomikosProperties43.isThreadedTwoPhaseCommit();
        java.lang.String str45 = atomikosProperties43.logBaseDir;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery46 = atomikosProperties43.recovery;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel47 = atomikosProperties43.getConsoleLogLevel();
        atomikosProperties43.allowSubTransactions = true;
        atomikosProperties43.consoleFileLimit = 100;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties52 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean53 = atomikosProperties52.isSerialJtaTransactions();
        atomikosProperties52.logBaseName = "{-1.0=100}";
        int int56 = atomikosProperties52.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery57 = atomikosProperties52.getRecovery();
        atomikosProperties52.setConsoleFileCount((int) (byte) 100);
        atomikosProperties52.setAllowSubTransactions(true);
        int int62 = atomikosProperties52.getMaxActives();
        boolean boolean63 = atomikosProperties52.isEnableLogging();
        atomikosProperties52.setOutputDir("");
        java.lang.String str66 = atomikosProperties52.getTransactionManagerUniqueName();
        java.lang.String str67 = atomikosProperties52.getLogBaseDir();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel68 = atomikosProperties52.consoleLogLevel;
        atomikosProperties43.consoleLogLevel = atomikosLoggingLevel68;
        atomikosProperties28.setConsoleLogLevel(atomikosLoggingLevel68);
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel68);
        int int72 = atomikosProperties0.getConsoleFileLimit();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 50 + "'", int5 == 50);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "{}" + "'", str11, "{}");
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10000L + "'", long16 == 10000L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10000L + "'", long17 == 10000L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10000L + "'", long18 == 10000L);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNotNull(properties29);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 10000L + "'", long32 == 10000L);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 50 + "'", int35 == 50);
        org.junit.Assert.assertNotNull(recovery38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "{-1.0=100}" + "'", str41, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(recovery46);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel47 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel47.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 50 + "'", int56 == 50);
        org.junit.Assert.assertNotNull(recovery57);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 50 + "'", int62 == 50);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel68 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel68.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
    }

    @Test
    public void test08373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08373");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        int int7 = atomikosProperties0.consoleFileCount;
        atomikosProperties0.setLogBaseName("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        int int10 = atomikosProperties0.consoleFileCount;
        int int11 = atomikosProperties0.consoleFileCount;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel12 = atomikosProperties0.getConsoleLogLevel();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel12 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel12.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
    }

    @Test
    public void test08374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08374");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        properties0.clear();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet3 = properties0.entrySet();
        java.util.Properties properties4 = new java.util.Properties();
        java.lang.String str5 = properties4.toString();
        java.lang.Object obj7 = properties4.remove((java.lang.Object) (short) 100);
        java.lang.Object obj10 = properties4.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery11 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery11.retryInterval = (short) 100;
        recovery11.delay = (-1L);
        long long16 = recovery11.delay;
        boolean boolean17 = properties4.equals((java.lang.Object) long16);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery18 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery18.retryInterval = (short) 100;
        recovery18.forgetOrphanedLogEntriesDelay = 'a';
        long long23 = recovery18.retryInterval;
        recovery18.forgetOrphanedLogEntriesDelay = 0L;
        long long26 = recovery18.getForgetOrphanedLogEntriesDelay();
        recovery18.setRetryInterval((long) 0);
        boolean boolean29 = properties4.contains((java.lang.Object) recovery18);
        recovery18.retryInterval = 0L;
        boolean boolean32 = properties0.containsKey((java.lang.Object) recovery18);
        java.util.Properties properties33 = new java.util.Properties();
        java.util.Properties properties34 = new java.util.Properties();
        java.lang.String str35 = properties34.toString();
        java.lang.Object obj37 = properties34.remove((java.lang.Object) (short) 100);
        java.lang.Object obj40 = properties34.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        int int41 = properties34.size();
        java.util.Properties properties42 = new java.util.Properties();
        java.lang.Object obj44 = properties42.remove((java.lang.Object) (-1.0d));
        boolean boolean45 = properties42.isEmpty();
        java.lang.Object obj48 = properties42.setProperty("hi!", "{}");
        boolean boolean49 = properties33.remove((java.lang.Object) int41, (java.lang.Object) properties42);
        java.util.Enumeration<java.lang.Object> objEnumeration50 = properties33.keys();
        java.util.Properties properties51 = new java.util.Properties();
        properties51.clear();
        java.lang.String str53 = properties51.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties54 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties54.setEnableLogging(true);
        atomikosProperties54.consoleFileCount = 0;
        int int59 = atomikosProperties54.getMaxActives();
        java.lang.String str60 = atomikosProperties54.getLogBaseDir();
        java.lang.String str61 = atomikosProperties54.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery62 = atomikosProperties54.getRecovery();
        long long63 = atomikosProperties54.getDefaultJtaTimeout();
        int int64 = atomikosProperties54.getMaxActives();
        atomikosProperties54.consoleFileLimit = 50;
        boolean boolean67 = atomikosProperties54.isEnableLogging();
        atomikosProperties54.maxActives = (short) 10;
        atomikosProperties54.setLogBaseName("hi!");
        java.lang.Object obj72 = properties33.replace((java.lang.Object) properties51, (java.lang.Object) "hi!");
        java.lang.Object obj73 = null;
        boolean boolean74 = properties33.equals(obj73);
        java.util.Collection<java.lang.Object> objCollection75 = properties33.values();
        java.lang.Object obj76 = properties0.get((java.lang.Object) objCollection75);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNotNull(objEntrySet3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{}" + "'", str5, "{}");
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 100L + "'", long23 == 100L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "{}" + "'", str35, "{}");
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(objEnumeration50);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "{}" + "'", str53, "{}");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 50 + "'", int59 == 50);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(recovery62);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 10000L + "'", long63 == 10000L);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 50 + "'", int64 == 50);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNull(obj72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(objCollection75);
        org.junit.Assert.assertNull(obj76);
    }

    @Test
    public void test08375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08375");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj14 = properties0.setProperty("", "{-1.0=100}");
        boolean boolean15 = properties0.isEmpty();
        java.util.Properties properties16 = new java.util.Properties();
        java.lang.String str17 = properties16.toString();
        java.util.Properties properties18 = new java.util.Properties(properties16);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet19 = properties18.entrySet();
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.Object obj23 = properties21.remove((java.lang.Object) (-1.0d));
        int int24 = properties21.size();
        boolean boolean25 = properties0.replace((java.lang.Object) properties18, (java.lang.Object) 100L, (java.lang.Object) properties21);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties26.setAllowSubTransactions(true);
        boolean boolean29 = atomikosProperties26.enableLogging;
        atomikosProperties26.consoleFileLimit = (byte) 100;
        java.util.Properties properties32 = new java.util.Properties();
        java.lang.String str33 = properties32.toString();
        java.util.Properties properties34 = new java.util.Properties(properties32);
        java.util.Properties properties36 = new java.util.Properties();
        java.lang.String str37 = properties36.toString();
        java.lang.Object obj39 = properties36.remove((java.lang.Object) (short) 100);
        java.lang.Object obj42 = properties36.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean44 = properties36.containsKey((java.lang.Object) 0L);
        java.lang.Object obj47 = properties36.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties48 = new java.util.Properties(properties36);
        java.util.Enumeration<java.lang.Object> objEnumeration49 = properties48.elements();
        atomikosProperties26.set(properties34, "{={-1.0=100}, -1.0=100}", (java.lang.Object) properties48);
        atomikosProperties26.setOutputDir("hi!");
        java.lang.String str53 = atomikosProperties26.getLogBaseName();
        boolean boolean54 = properties21.equals((java.lang.Object) atomikosProperties26);
        int int55 = properties21.size();
        java.util.Set<java.lang.String> strSet56 = properties21.stringPropertyNames();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "{}" + "'", str17, "{}");
        org.junit.Assert.assertNotNull(objEntrySet19);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "{}" + "'", str33, "{}");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "{}" + "'", str37, "{}");
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNotNull(objEnumeration49);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "tmlog" + "'", str53, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(strSet56);
    }

    @Test
    public void test08376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08376");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileLimit = (byte) 10;
        long long7 = atomikosProperties0.getMaxTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel8 = null;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel8;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.getRecovery();
        boolean boolean11 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.setForceShutdownOnVmExit(false);
        long long14 = atomikosProperties0.getMaxTimeout();
        long long15 = atomikosProperties0.getCheckpointInterval();
        int int16 = atomikosProperties0.consoleFileCount;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 300000L + "'", long14 == 300000L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 500L + "'", long15 == 500L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test08377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08377");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        boolean boolean2 = properties0.isEmpty();
        java.util.Properties properties3 = new java.util.Properties();
        java.lang.String str4 = properties3.toString();
        java.lang.Object obj6 = properties3.remove((java.lang.Object) (short) 100);
        java.lang.Object obj9 = properties3.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean11 = properties3.containsKey((java.lang.Object) 0L);
        boolean boolean12 = properties0.containsValue((java.lang.Object) 0L);
        java.util.Set<java.lang.String> strSet13 = properties0.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties15 = atomikosProperties14.asProperties();
        atomikosProperties14.service = "{-1.0=100}";
        java.lang.String str18 = atomikosProperties14.getLogBaseName();
        java.lang.String str19 = atomikosProperties14.transactionManagerUniqueName;
        atomikosProperties14.consoleFileName = "";
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties22.setAllowSubTransactions(true);
        atomikosProperties22.logBaseName = "{={-1.0=100}, -1.0=100}";
        int int27 = atomikosProperties22.getConsoleFileLimit();
        java.lang.Object obj28 = properties0.putIfAbsent((java.lang.Object) atomikosProperties14, (java.lang.Object) atomikosProperties22);
        atomikosProperties14.consoleFileName = "{}";
        atomikosProperties14.enableLogging = true;
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{}" + "'", str4, "{}");
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "tmlog" + "'", str18, "tmlog");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNull(obj28);
    }

    @Test
    public void test08378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08378");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        atomikosProperties0.setConsoleFileCount((int) (byte) 100);
        java.lang.String str8 = atomikosProperties0.logBaseName;
        atomikosProperties0.setCheckpointInterval((long) 18);
        atomikosProperties0.checkpointInterval = 100;
        atomikosProperties0.enableLogging = false;
        java.lang.String str15 = atomikosProperties0.service;
        atomikosProperties0.service = "";
        atomikosProperties0.setEnableLogging(true);
        atomikosProperties0.consoleFileName = "{{-1.0=100}=}";
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{-1.0=100}" + "'", str8, "{-1.0=100}");
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test08379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08379");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.retryInterval = (short) 100;
        recovery0.setForgetOrphanedLogEntriesDelay((long) 5);
        recovery0.setForgetOrphanedLogEntriesDelay((long) (short) 0);
        recovery0.retryInterval = 'a';
        recovery0.setDelay(0L);
        int int11 = recovery0.maxRetries;
        recovery0.setDelay((long) 19);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
    }

    @Test
    public void test08380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08380");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties();
        java.lang.String str2 = properties1.toString();
        java.lang.Object obj4 = properties1.remove((java.lang.Object) (short) 100);
        java.lang.Object obj7 = properties1.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        int int8 = properties1.size();
        java.util.Properties properties9 = new java.util.Properties();
        java.lang.Object obj11 = properties9.remove((java.lang.Object) (-1.0d));
        boolean boolean12 = properties9.isEmpty();
        java.lang.Object obj15 = properties9.setProperty("hi!", "{}");
        boolean boolean16 = properties0.remove((java.lang.Object) int8, (java.lang.Object) properties9);
        java.util.Properties properties17 = new java.util.Properties();
        java.lang.String str18 = properties17.toString();
        java.lang.Object obj20 = properties17.remove((java.lang.Object) (short) 100);
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.String str22 = properties21.toString();
        boolean boolean23 = properties21.isEmpty();
        java.lang.Object obj26 = properties21.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties21.elements();
        boolean boolean28 = properties17.containsKey((java.lang.Object) properties21);
        boolean boolean29 = properties9.contains((java.lang.Object) boolean28);
        java.util.Set<java.lang.String> strSet30 = properties9.stringPropertyNames();
        java.util.Properties properties31 = new java.util.Properties(properties9);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet32 = properties9.entrySet();
        java.util.Properties properties33 = new java.util.Properties();
        java.lang.Object obj36 = properties33.setProperty("{}", "{}");
        java.util.Enumeration<java.lang.Object> objEnumeration37 = properties33.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration38 = properties33.elements();
        java.util.Properties properties39 = new java.util.Properties(properties33);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties41 = atomikosProperties40.asProperties();
        atomikosProperties40.service = "{-1.0=100}";
        long long44 = atomikosProperties40.getDefaultJtaTimeout();
        atomikosProperties40.setTransactionManagerUniqueName("{}");
        atomikosProperties40.consoleFileName = "hi!";
        int int49 = atomikosProperties40.getConsoleFileLimit();
        boolean boolean50 = atomikosProperties40.isThreadedTwoPhaseCommit();
        boolean boolean51 = atomikosProperties40.allowSubTransactions;
        java.util.Properties properties52 = new java.util.Properties();
        java.util.Properties properties53 = new java.util.Properties(properties52);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties54 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties55 = atomikosProperties54.asProperties();
        atomikosProperties54.service = "{-1.0=100}";
        long long58 = atomikosProperties54.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel59 = null;
        atomikosProperties54.setConsoleLogLevel(atomikosLoggingLevel59);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel61 = null;
        atomikosProperties54.setConsoleLogLevel(atomikosLoggingLevel61);
        atomikosProperties54.setLogBaseName("{={-1.0=100}, -1.0=100}");
        boolean boolean65 = atomikosProperties54.enableLogging;
        atomikosProperties54.setOutputDir("");
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel68 = atomikosProperties54.consoleLogLevel;
        atomikosProperties54.checkpointInterval = 0L;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties71 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties71.setAllowSubTransactions(true);
        atomikosProperties71.logBaseName = "{={-1.0=100}, -1.0=100}";
        atomikosProperties71.setTransactionManagerUniqueName("");
        java.lang.Object obj78 = properties53.putIfAbsent((java.lang.Object) atomikosProperties54, (java.lang.Object) atomikosProperties71);
        java.lang.Object obj79 = properties39.getOrDefault((java.lang.Object) boolean51, (java.lang.Object) properties53);
        boolean boolean80 = properties9.containsValue((java.lang.Object) properties39);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties81 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties81.setEnableLogging(true);
        atomikosProperties81.consoleFileCount = 0;
        java.util.Properties properties86 = atomikosProperties81.asProperties();
        java.util.Collection<java.lang.Object> objCollection87 = properties86.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet88 = properties86.entrySet();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties86);
        java.io.Reader reader90 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties86.load(reader90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{}" + "'", str2, "{}");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "{}" + "'", str18, "{}");
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{}" + "'", str22, "{}");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertNotNull(objEntrySet32);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNotNull(objEnumeration37);
        org.junit.Assert.assertNotNull(objEnumeration38);
        org.junit.Assert.assertNotNull(properties41);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 10000L + "'", long44 == 10000L);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(properties55);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 10000L + "'", long58 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNull(atomikosLoggingLevel68);
        org.junit.Assert.assertNull(obj78);
        org.junit.Assert.assertNotNull(obj79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(properties86);
        org.junit.Assert.assertNotNull(objCollection87);
        org.junit.Assert.assertNotNull(objEntrySet88);
    }

    @Test
    public void test08381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08381");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        java.util.Properties properties8 = new java.util.Properties();
        java.lang.String str9 = properties8.toString();
        java.lang.Object obj11 = properties8.remove((java.lang.Object) (short) 100);
        java.lang.Object obj14 = properties8.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj15 = properties8.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration16 = properties8.elements();
        java.lang.Object obj17 = properties0.putIfAbsent((java.lang.Object) 10.0f, (java.lang.Object) objEnumeration16);
        java.util.Properties properties18 = new java.util.Properties();
        java.util.Enumeration<?> wildcardEnumeration19 = properties18.propertyNames();
        java.lang.Object obj20 = properties18.clone();
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.String str22 = properties21.toString();
        boolean boolean23 = properties21.isEmpty();
        java.lang.Object obj26 = properties21.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties21.elements();
        java.lang.Object obj28 = properties0.put(obj20, (java.lang.Object) objEnumeration27);
        properties0.clear();
        java.util.Properties properties30 = new java.util.Properties();
        java.lang.Object obj32 = properties30.remove((java.lang.Object) (-1.0d));
        boolean boolean33 = properties30.isEmpty();
        int int34 = properties30.size();
        java.lang.String str36 = properties30.getProperty("{}");
        java.util.Properties properties37 = new java.util.Properties();
        java.lang.String str38 = properties37.toString();
        java.lang.Object obj40 = properties37.remove((java.lang.Object) (short) 100);
        java.lang.Object obj43 = properties37.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean45 = properties37.containsKey((java.lang.Object) 0L);
        java.lang.Object obj48 = properties37.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties49 = new java.util.Properties(properties37);
        java.util.Enumeration<java.lang.Object> objEnumeration50 = properties37.keys();
        java.lang.Object obj51 = properties0.replace((java.lang.Object) properties30, (java.lang.Object) properties37);
        java.lang.Object obj52 = properties30.clone();
        java.util.Enumeration<?> wildcardEnumeration53 = properties30.propertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery54 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery54.retryInterval = (short) 100;
        recovery54.forgetOrphanedLogEntriesDelay = 'a';
        long long59 = recovery54.retryInterval;
        long long60 = recovery54.getRetryInterval();
        boolean boolean61 = properties30.containsValue((java.lang.Object) long60);
        java.util.Enumeration<java.lang.Object> objEnumeration62 = properties30.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration63 = properties30.elements();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{}" + "'", str9, "{}");
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration16);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(wildcardEnumeration19);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{}");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{}" + "'", str22, "{}");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "{}" + "'", str38, "{}");
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertNotNull(objEnumeration50);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertEquals(obj52.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj52), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj52), "{}");
        org.junit.Assert.assertNotNull(wildcardEnumeration53);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 100L + "'", long59 == 100L);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 100L + "'", long60 == 100L);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(objEnumeration62);
        org.junit.Assert.assertNotNull(objEnumeration63);
    }

    @Test
    public void test08382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08382");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj3 = properties0.setProperty("{}", "{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery4 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery4.retryInterval = (short) 100;
        recovery4.setForgetOrphanedLogEntriesDelay((long) 5);
        recovery4.setForgetOrphanedLogEntriesDelay((long) (short) 0);
        java.util.Properties properties11 = new java.util.Properties();
        java.lang.String str12 = properties11.toString();
        java.lang.Object obj14 = properties11.remove((java.lang.Object) (short) 100);
        java.util.Properties properties15 = new java.util.Properties();
        java.lang.String str16 = properties15.toString();
        boolean boolean17 = properties15.isEmpty();
        java.lang.Object obj20 = properties15.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration21 = properties15.elements();
        boolean boolean22 = properties11.containsKey((java.lang.Object) properties15);
        java.lang.Object obj23 = properties0.putIfAbsent((java.lang.Object) (short) 0, (java.lang.Object) properties15);
        java.lang.Object obj26 = properties0.setProperty("{={-1.0=100}, -1.0=100}", "tmlog");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties27.setEnableLogging(true);
        atomikosProperties27.consoleFileCount = 0;
        int int32 = atomikosProperties27.getMaxActives();
        java.lang.String str33 = atomikosProperties27.getLogBaseDir();
        java.lang.String str34 = atomikosProperties27.service;
        atomikosProperties27.transactionManagerUniqueName = "tmlog";
        long long37 = atomikosProperties27.getMaxTimeout();
        boolean boolean38 = properties0.containsValue((java.lang.Object) long37);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties39 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties40 = atomikosProperties39.asProperties();
        atomikosProperties39.service = "{-1.0=100}";
        long long43 = atomikosProperties39.getDefaultJtaTimeout();
        boolean boolean44 = atomikosProperties39.threadedTwoPhaseCommit;
        atomikosProperties39.setOutputDir("{{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}=, ={-1.0=100}, -1.0=100}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties47 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties48 = atomikosProperties47.asProperties();
        atomikosProperties47.service = "{-1.0=100}";
        long long51 = atomikosProperties47.getDefaultJtaTimeout();
        atomikosProperties47.consoleFileLimit = '#';
        atomikosProperties47.setMaxTimeout((-1L));
        java.lang.String str56 = atomikosProperties47.service;
        atomikosProperties47.service = "{={-1.0=100}, -1.0=100}";
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties59 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties59.setEnableLogging(true);
        atomikosProperties59.consoleFileCount = 0;
        int int64 = atomikosProperties59.getMaxActives();
        java.lang.String str65 = atomikosProperties59.getLogBaseDir();
        java.lang.String str66 = atomikosProperties59.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery67 = atomikosProperties59.getRecovery();
        boolean boolean68 = atomikosProperties59.threadedTwoPhaseCommit;
        atomikosProperties59.enableLogging = false;
        java.lang.String str71 = atomikosProperties59.getOutputDir();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean72 = properties0.replace((java.lang.Object) "{{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}=, ={-1.0=100}, -1.0=100}", (java.lang.Object) atomikosProperties47, (java.lang.Object) str71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "{}" + "'", str12, "{}");
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{}" + "'", str16, "{}");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNotNull(objEnumeration21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 50 + "'", int32 == 50);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 300000L + "'", long37 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(properties40);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 10000L + "'", long43 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(properties48);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 10000L + "'", long51 == 10000L);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "{-1.0=100}" + "'", str56, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 50 + "'", int64 == 50);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(recovery67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(str71);
    }

    @Test
    public void test08383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08383");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setEnableLogging(true);
        atomikosProperties0.consoleFileCount = 0;
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        boolean boolean6 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.maxActives = 1;
        atomikosProperties0.logBaseDir = "{com.atomikos.icatch.tm.out={}}";
        atomikosProperties0.service = "{{}={}}";
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test08384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08384");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        int int5 = atomikosProperties0.consoleFileCount;
        atomikosProperties0.transactionManagerUniqueName = "tm.out";
        boolean boolean8 = atomikosProperties0.serialJtaTransactions;
        boolean boolean9 = atomikosProperties0.serialJtaTransactions;
        boolean boolean10 = atomikosProperties0.forceShutdownOnVmExit;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test08385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08385");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileLimit = (byte) 10;
        long long7 = atomikosProperties0.getMaxTimeout();
        boolean boolean8 = atomikosProperties0.allowSubTransactions;
        atomikosProperties0.threadedTwoPhaseCommit = false;
        java.util.Properties properties11 = new java.util.Properties();
        java.util.Properties properties12 = new java.util.Properties();
        java.lang.String str13 = properties12.toString();
        boolean boolean14 = properties12.isEmpty();
        java.util.Properties properties15 = new java.util.Properties();
        java.lang.String str16 = properties15.toString();
        java.lang.Object obj18 = properties15.remove((java.lang.Object) (short) 100);
        java.lang.Object obj21 = properties15.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean23 = properties15.containsKey((java.lang.Object) 0L);
        boolean boolean24 = properties12.containsValue((java.lang.Object) 0L);
        boolean boolean27 = properties11.replace((java.lang.Object) 0L, (java.lang.Object) 0.0f, (java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration28 = properties11.elements();
        java.lang.String str29 = properties11.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean32 = atomikosProperties31.isSerialJtaTransactions();
        atomikosProperties31.logBaseName = "{-1.0=100}";
        int int35 = atomikosProperties31.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery36 = atomikosProperties31.getRecovery();
        atomikosProperties31.setConsoleFileCount((int) (byte) 100);
        atomikosProperties31.maxTimeout = 50;
        java.lang.String str41 = atomikosProperties31.getConsoleFileName();
        atomikosProperties31.setDefaultJtaTimeout((long) 'a');
        int int44 = atomikosProperties31.maxActives;
        atomikosProperties0.set(properties11, "tm.out", (java.lang.Object) atomikosProperties31);
        java.util.Collection<java.lang.Object> objCollection46 = properties11.values();
        java.util.Properties properties47 = new java.util.Properties();
        java.lang.Object obj49 = properties47.remove((java.lang.Object) (-1.0d));
        boolean boolean50 = properties47.isEmpty();
        java.util.Collection<java.lang.Object> objCollection51 = properties47.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet52 = properties47.entrySet();
        boolean boolean53 = properties11.contains((java.lang.Object) objEntrySet52);
        java.util.Properties properties54 = new java.util.Properties(properties11);
        java.io.Reader reader55 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties54.load(reader55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{}" + "'", str13, "{}");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{}" + "'", str16, "{}");
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(objEnumeration28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "{}" + "'", str29, "{}");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 50 + "'", int35 == 50);
        org.junit.Assert.assertNotNull(recovery36);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "tm.out" + "'", str41, "tm.out");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 50 + "'", int44 == 50);
        org.junit.Assert.assertNotNull(objCollection46);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(objCollection51);
        org.junit.Assert.assertNotNull(objEntrySet52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test08386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08386");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setTransactionManagerUniqueName("{}");
        atomikosProperties0.enableLogging = true;
        int int9 = atomikosProperties0.getMaxActives();
        java.lang.String str10 = atomikosProperties0.getLogBaseName();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "tmlog" + "'", str10, "tmlog");
    }

    @Test
    public void test08387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08387");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.lang.Object obj5 = properties0.setProperty("", "{={-1.0=100}, -1.0=100}");
        java.util.Properties properties6 = new java.util.Properties(properties0);
        boolean boolean7 = properties6.isEmpty();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test08388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08388");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties0.setMaxActives(100);
        boolean boolean9 = atomikosProperties0.enableLogging;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.recovery;
        atomikosProperties0.checkpointInterval = 300000L;
        atomikosProperties0.enableLogging = false;
        java.util.Properties properties15 = atomikosProperties0.asProperties();
        atomikosProperties0.setConsoleFileCount(0);
        java.lang.String str18 = atomikosProperties0.outputDir;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "{={-1.0=100}, -1.0=100}" + "'", str18, "{={-1.0=100}, -1.0=100}");
    }

    @Test
    public void test08389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08389");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj3 = properties0.setProperty("{}", "{}");
        java.util.Properties properties4 = new java.util.Properties();
        java.lang.String str5 = properties4.toString();
        java.lang.Object obj7 = properties4.remove((java.lang.Object) (short) 100);
        java.lang.Object obj10 = properties4.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean12 = properties4.containsKey((java.lang.Object) 0L);
        java.lang.Object obj15 = properties4.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties16 = new java.util.Properties();
        java.lang.String str17 = properties16.toString();
        java.lang.Object obj19 = properties16.remove((java.lang.Object) (short) 100);
        java.lang.Object obj22 = properties16.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj23 = properties16.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration24 = properties16.elements();
        properties4.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties16);
        java.lang.Object obj26 = properties0.get((java.lang.Object) properties4);
        java.util.Set<java.lang.Object> objSet27 = properties4.keySet();
        java.util.Set<java.lang.String> strSet28 = properties4.stringPropertyNames();
        java.util.Set<java.lang.Object> objSet29 = properties4.keySet();
        java.util.Set<java.lang.String> strSet30 = properties4.stringPropertyNames();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{}" + "'", str5, "{}");
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "{}" + "'", str17, "{}");
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration24);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(objSet27);
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNotNull(objSet29);
        org.junit.Assert.assertNotNull(strSet30);
    }

    @Test
    public void test08390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08390");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        boolean boolean7 = atomikosProperties0.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery8 = atomikosProperties0.recovery;
        boolean boolean9 = atomikosProperties0.threadedTwoPhaseCommit;
        atomikosProperties0.setOutputDir("tmlog");
        boolean boolean12 = atomikosProperties0.isAllowSubTransactions();
        atomikosProperties0.defaultJtaTimeout = 1L;
        atomikosProperties0.consoleFileCount = 1;
        boolean boolean17 = atomikosProperties0.isThreadedTwoPhaseCommit();
        atomikosProperties0.setConsoleFileLimit(32);
        boolean boolean20 = atomikosProperties0.enableLogging;
        long long21 = atomikosProperties0.getCheckpointInterval();
        atomikosProperties0.threadedTwoPhaseCommit = false;
        atomikosProperties0.setTransactionManagerUniqueName("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(recovery8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 500L + "'", long21 == 500L);
    }

    @Test
    public void test08391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08391");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        boolean boolean2 = properties0.isEmpty();
        java.lang.Object obj5 = properties0.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Properties properties6 = new java.util.Properties();
        java.lang.String str7 = properties6.toString();
        java.lang.Object obj9 = properties6.remove((java.lang.Object) (short) 100);
        java.lang.Object obj12 = properties6.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean14 = properties6.containsKey((java.lang.Object) 0L);
        java.lang.Object obj17 = properties6.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties18 = new java.util.Properties(properties6);
        boolean boolean19 = properties0.containsValue((java.lang.Object) properties6);
        java.lang.String str21 = properties0.getProperty("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties23 = atomikosProperties22.asProperties();
        atomikosProperties22.service = "{-1.0=100}";
        long long26 = atomikosProperties22.getDefaultJtaTimeout();
        atomikosProperties22.enableLogging = false;
        atomikosProperties22.setMaxTimeout((long) (byte) 0);
        atomikosProperties22.setAllowSubTransactions(true);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties34 = atomikosProperties33.asProperties();
        atomikosProperties33.service = "{-1.0=100}";
        java.lang.String str37 = atomikosProperties33.getTransactionManagerUniqueName();
        boolean boolean38 = atomikosProperties33.isSerialJtaTransactions();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel39 = atomikosProperties33.getConsoleLogLevel();
        atomikosProperties22.consoleLogLevel = atomikosLoggingLevel39;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties41.setAllowSubTransactions(true);
        boolean boolean44 = atomikosProperties41.enableLogging;
        boolean boolean45 = atomikosProperties41.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel46 = atomikosProperties41.consoleLogLevel;
        atomikosProperties22.consoleLogLevel = atomikosLoggingLevel46;
        atomikosProperties22.setConsoleFileName("{1.0=-1, -1.0=100}");
        java.util.Properties properties50 = new java.util.Properties();
        java.lang.String str51 = properties50.toString();
        java.util.Properties properties52 = new java.util.Properties(properties50);
        boolean boolean53 = properties52.isEmpty();
        java.lang.Object obj56 = properties52.setProperty("tmlog", "{}");
        java.lang.Object obj57 = properties52.clone();
        java.lang.Object obj58 = properties0.putIfAbsent((java.lang.Object) atomikosProperties22, obj57);
        java.util.Enumeration<java.lang.Object> objEnumeration59 = properties0.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties60 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties61 = atomikosProperties60.asProperties();
        atomikosProperties60.service = "{-1.0=100}";
        java.lang.String str64 = atomikosProperties60.getLogBaseName();
        long long65 = atomikosProperties60.defaultJtaTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel66 = null;
        atomikosProperties60.setConsoleLogLevel(atomikosLoggingLevel66);
        atomikosProperties60.threadedTwoPhaseCommit = false;
        atomikosProperties60.setConsoleFileLimit((int) (byte) 10);
        java.util.Properties properties72 = new java.util.Properties();
        java.lang.String str73 = properties72.toString();
        boolean boolean74 = properties72.isEmpty();
        boolean boolean75 = properties72.isEmpty();
        java.lang.String str77 = properties72.getProperty("{-1.0=100}");
        java.util.Set<java.lang.String> strSet78 = properties72.stringPropertyNames();
        java.lang.Object obj79 = properties0.getOrDefault((java.lang.Object) (byte) 10, (java.lang.Object) strSet78);
        properties0.clear();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "{}" + "'", str7, "{}");
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(properties23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 10000L + "'", long26 == 10000L);
        org.junit.Assert.assertNotNull(properties34);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel39 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel39.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel46 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel46.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "{}" + "'", str51, "{}");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertNotNull(obj57);
        org.junit.Assert.assertEquals(obj57.toString(), "{tmlog={}}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj57), "{tmlog={}}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj57), "{tmlog={}}");
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertNotNull(objEnumeration59);
        org.junit.Assert.assertNotNull(properties61);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "tmlog" + "'", str64, "tmlog");
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 10000L + "'", long65 == 10000L);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "{}" + "'", str73, "{}");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertNotNull(strSet78);
        org.junit.Assert.assertNotNull(obj79);
        org.junit.Assert.assertEquals(obj79.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj79), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj79), "[]");
    }

    @Test
    public void test08392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08392");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isThreadedTwoPhaseCommit();
        long long2 = atomikosProperties0.getCheckpointInterval();
        boolean boolean3 = atomikosProperties0.serialJtaTransactions;
        atomikosProperties0.forceShutdownOnVmExit = true;
        boolean boolean6 = atomikosProperties0.allowSubTransactions;
        atomikosProperties0.setForceShutdownOnVmExit(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 500L + "'", long2 == 500L);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test08393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08393");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        atomikosProperties0.setConsoleFileCount((int) (byte) 100);
        atomikosProperties0.setAllowSubTransactions(true);
        long long10 = atomikosProperties0.getCheckpointInterval();
        boolean boolean11 = atomikosProperties0.isAllowSubTransactions();
        long long12 = atomikosProperties0.getCheckpointInterval();
        atomikosProperties0.allowSubTransactions = true;
        atomikosProperties0.setDefaultJtaTimeout((long) (byte) -1);
        atomikosProperties0.transactionManagerUniqueName = "{-1.0=100}";
        boolean boolean19 = atomikosProperties0.forceShutdownOnVmExit;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 500L + "'", long10 == 500L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 500L + "'", long12 == 500L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test08394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08394");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        java.lang.String str6 = atomikosProperties0.getOutputDir();
        atomikosProperties0.setLogBaseDir("{-1.0=100}");
        boolean boolean9 = atomikosProperties0.forceShutdownOnVmExit;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test08395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08395");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        boolean boolean5 = atomikosProperties0.enableLogging;
        boolean boolean6 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.consoleFileLimit = (byte) -1;
        java.lang.String str9 = atomikosProperties0.getService();
        long long10 = atomikosProperties0.getCheckpointInterval();
        atomikosProperties0.setCheckpointInterval(1L);
        atomikosProperties0.transactionManagerUniqueName = "{com.atomikos.icatch.{1.0=-1, -1.0=100}=86400000, -1.0=100}";
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{-1.0=100}" + "'", str9, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 500L + "'", long10 == 500L);
    }

    @Test
    public void test08396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08396");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.util.Properties properties4 = new java.util.Properties();
        java.lang.String str5 = properties4.toString();
        boolean boolean6 = properties4.isEmpty();
        java.lang.Object obj9 = properties4.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration10 = properties4.elements();
        boolean boolean11 = properties0.containsKey((java.lang.Object) properties4);
        java.util.Set<java.lang.String> strSet12 = properties0.stringPropertyNames();
        java.lang.Object obj15 = properties0.setProperty("{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}", "hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties17 = atomikosProperties16.asProperties();
        atomikosProperties16.service = "{-1.0=100}";
        long long20 = atomikosProperties16.getDefaultJtaTimeout();
        atomikosProperties16.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties16.setMaxActives(100);
        java.lang.String str25 = atomikosProperties16.logBaseDir;
        java.lang.String str26 = atomikosProperties16.getConsoleFileName();
        atomikosProperties16.checkpointInterval = 100L;
        int int29 = atomikosProperties16.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery30 = atomikosProperties16.recovery;
        boolean boolean31 = properties0.contains((java.lang.Object) atomikosProperties16);
        java.util.Enumeration<java.lang.Object> objEnumeration32 = properties0.keys();
        java.io.OutputStream outputStream33 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.save(outputStream33, "{com.atomikos.icatch.{}=5}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{}" + "'", str5, "{}");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNotNull(objEnumeration10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNotNull(properties17);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10000L + "'", long20 == 10000L);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "tm.out" + "'", str26, "tm.out");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 100 + "'", int29 == 100);
        org.junit.Assert.assertNotNull(recovery30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(objEnumeration32);
    }

    @Test
    public void test08397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08397");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        java.util.Properties properties2 = new java.util.Properties();
        java.lang.Object obj4 = properties2.remove((java.lang.Object) (-1.0d));
        boolean boolean5 = properties2.isEmpty();
        int int6 = properties2.size();
        java.lang.String str8 = properties2.getProperty("{}");
        java.lang.Object obj9 = properties1.remove((java.lang.Object) properties2);
        properties1.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties12 = atomikosProperties11.asProperties();
        atomikosProperties11.service = "{-1.0=100}";
        long long15 = atomikosProperties11.getDefaultJtaTimeout();
        atomikosProperties11.outputDir = "{={-1.0=100}, -1.0=100}";
        long long18 = atomikosProperties11.getCheckpointInterval();
        boolean boolean19 = atomikosProperties11.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel20 = atomikosProperties11.getConsoleLogLevel();
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.Object obj23 = properties21.remove((java.lang.Object) (-1.0d));
        java.util.Enumeration<?> wildcardEnumeration24 = properties21.propertyNames();
        java.util.Set<java.lang.Object> objSet25 = properties21.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties27 = atomikosProperties26.asProperties();
        atomikosProperties26.service = "{-1.0=100}";
        long long30 = atomikosProperties26.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel31 = null;
        atomikosProperties26.setConsoleLogLevel(atomikosLoggingLevel31);
        int int33 = atomikosProperties26.maxActives;
        atomikosProperties26.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery36 = atomikosProperties26.getRecovery();
        long long37 = recovery36.forgetOrphanedLogEntriesDelay;
        java.util.Properties properties38 = new java.util.Properties();
        java.lang.String str39 = properties38.toString();
        java.lang.Object obj41 = properties38.remove((java.lang.Object) (short) 100);
        java.lang.Object obj44 = properties38.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj45 = properties38.clone();
        java.util.Set<java.lang.String> strSet46 = properties38.stringPropertyNames();
        java.util.Properties properties47 = new java.util.Properties();
        java.lang.String str48 = properties47.toString();
        java.lang.Object obj50 = properties47.remove((java.lang.Object) (short) 100);
        java.lang.Object obj53 = properties47.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean55 = properties47.containsKey((java.lang.Object) 0L);
        java.lang.Object obj58 = properties47.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties59 = new java.util.Properties();
        java.lang.String str60 = properties59.toString();
        java.lang.Object obj62 = properties59.remove((java.lang.Object) (short) 100);
        java.lang.Object obj65 = properties59.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj66 = properties59.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration67 = properties59.elements();
        properties47.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties59);
        java.util.Properties properties69 = new java.util.Properties();
        java.lang.String str70 = properties69.toString();
        java.lang.Object obj72 = properties69.remove((java.lang.Object) (short) 100);
        java.lang.Object obj75 = properties69.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean77 = properties69.containsKey((java.lang.Object) 0L);
        java.lang.Object obj80 = properties69.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties81 = new java.util.Properties();
        java.lang.String str82 = properties81.toString();
        java.lang.Object obj84 = properties81.remove((java.lang.Object) (short) 100);
        java.lang.Object obj87 = properties81.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj88 = properties81.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration89 = properties81.elements();
        properties69.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties81);
        java.lang.Object obj91 = properties38.putIfAbsent((java.lang.Object) properties47, (java.lang.Object) properties81);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet92 = properties38.entrySet();
        java.lang.Object obj93 = properties21.putIfAbsent((java.lang.Object) long37, (java.lang.Object) objEntrySet92);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean94 = properties1.remove((java.lang.Object) atomikosLoggingLevel20, obj93);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNotNull(properties12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10000L + "'", long15 == 10000L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 500L + "'", long18 == 500L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel20 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel20.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNotNull(wildcardEnumeration24);
        org.junit.Assert.assertNotNull(objSet25);
        org.junit.Assert.assertNotNull(properties27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 10000L + "'", long30 == 10000L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 50 + "'", int33 == 50);
        org.junit.Assert.assertNotNull(recovery36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 86400000L + "'", long37 == 86400000L);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "{}" + "'", str39, "{}");
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertEquals(obj45.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "{1.0=-1}");
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "{}" + "'", str48, "{}");
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "{}" + "'", str60, "{}");
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertNotNull(obj66);
        org.junit.Assert.assertEquals(obj66.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj66), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj66), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration67);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "{}" + "'", str70, "{}");
        org.junit.Assert.assertNull(obj72);
        org.junit.Assert.assertNull(obj75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(obj80);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "{}" + "'", str82, "{}");
        org.junit.Assert.assertNull(obj84);
        org.junit.Assert.assertNull(obj87);
        org.junit.Assert.assertNotNull(obj88);
        org.junit.Assert.assertEquals(obj88.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj88), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj88), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration89);
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertNotNull(objEntrySet92);
        org.junit.Assert.assertNull(obj93);
    }

    @Test
    public void test08398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08398");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        boolean boolean2 = properties0.isEmpty();
        java.util.Properties properties3 = new java.util.Properties();
        java.lang.String str4 = properties3.toString();
        java.lang.Object obj6 = properties3.remove((java.lang.Object) (short) 100);
        java.lang.Object obj9 = properties3.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean11 = properties3.containsKey((java.lang.Object) 0L);
        boolean boolean12 = properties0.containsValue((java.lang.Object) 0L);
        java.util.Set<java.lang.String> strSet13 = properties0.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties15 = atomikosProperties14.asProperties();
        atomikosProperties14.service = "{-1.0=100}";
        java.lang.String str18 = atomikosProperties14.getLogBaseName();
        java.lang.String str19 = atomikosProperties14.transactionManagerUniqueName;
        atomikosProperties14.consoleFileName = "";
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties22.setAllowSubTransactions(true);
        atomikosProperties22.logBaseName = "{={-1.0=100}, -1.0=100}";
        int int27 = atomikosProperties22.getConsoleFileLimit();
        java.lang.Object obj28 = properties0.putIfAbsent((java.lang.Object) atomikosProperties14, (java.lang.Object) atomikosProperties22);
        atomikosProperties14.consoleFileCount = 0;
        java.lang.String str31 = atomikosProperties14.logBaseDir;
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{}" + "'", str4, "{}");
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "tmlog" + "'", str18, "tmlog");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNull(str31);
    }

    @Test
    public void test08399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08399");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties7.setEnableLogging(true);
        atomikosProperties7.consoleFileCount = 0;
        atomikosProperties7.setSerialJtaTransactions(false);
        java.lang.String str14 = atomikosProperties7.getOutputDir();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties16 = atomikosProperties15.asProperties();
        atomikosProperties15.service = "{-1.0=100}";
        long long19 = atomikosProperties15.getDefaultJtaTimeout();
        atomikosProperties15.serialJtaTransactions = true;
        long long22 = atomikosProperties15.getDefaultJtaTimeout();
        long long23 = atomikosProperties15.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery24 = atomikosProperties15.getRecovery();
        recovery24.setRetryInterval((long) (byte) 0);
        java.lang.Object obj27 = properties0.replace((java.lang.Object) atomikosProperties7, (java.lang.Object) (byte) 0);
        int int28 = atomikosProperties7.getConsoleFileLimit();
        java.lang.String str29 = atomikosProperties7.getLogBaseName();
        atomikosProperties7.setAllowSubTransactions(true);
        atomikosProperties7.setTransactionManagerUniqueName("{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}");
        atomikosProperties7.allowSubTransactions = false;
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10000L + "'", long19 == 10000L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 10000L + "'", long22 == 10000L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 500L + "'", long23 == 500L);
        org.junit.Assert.assertNotNull(recovery24);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "tmlog" + "'", str29, "tmlog");
    }

    @Test
    public void test08400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08400");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties8 = atomikosProperties7.asProperties();
        java.lang.Object obj9 = properties0.remove((java.lang.Object) properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        atomikosProperties10.service = "{-1.0=100}";
        long long14 = atomikosProperties10.getDefaultJtaTimeout();
        atomikosProperties10.setThreadedTwoPhaseCommit(true);
        boolean boolean17 = atomikosProperties10.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery18 = atomikosProperties10.recovery;
        atomikosProperties10.setLogBaseDir("");
        long long21 = atomikosProperties10.maxTimeout;
        boolean boolean22 = atomikosProperties10.forceShutdownOnVmExit;
        boolean boolean23 = properties8.containsValue((java.lang.Object) atomikosProperties10);
        int int24 = atomikosProperties10.getMaxActives();
        atomikosProperties10.threadedTwoPhaseCommit = false;
        boolean boolean27 = atomikosProperties10.serialJtaTransactions;
        boolean boolean28 = atomikosProperties10.isSerialJtaTransactions();
        java.lang.String str29 = atomikosProperties10.getService();
        long long30 = atomikosProperties10.maxTimeout;
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10000L + "'", long14 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(recovery18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 300000L + "'", long21 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 50 + "'", int24 == 50);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "{-1.0=100}" + "'", str29, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 300000L + "'", long30 == 300000L);
    }

    @Test
    public void test08401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08401");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getLogBaseName();
        long long5 = atomikosProperties0.defaultJtaTimeout;
        long long6 = atomikosProperties0.getMaxTimeout();
        boolean boolean7 = atomikosProperties0.forceShutdownOnVmExit;
        java.util.Properties properties8 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery9 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long10 = recovery9.getRetryInterval();
        long long11 = recovery9.getDelay();
        int int12 = recovery9.getMaxRetries();
        long long13 = recovery9.getDelay();
        recovery9.setDelay(500L);
        java.util.Properties properties16 = new java.util.Properties();
        java.lang.Object obj18 = properties16.remove((java.lang.Object) (-1.0d));
        boolean boolean20 = properties16.contains((java.lang.Object) "{-1.0=100}");
        java.util.Enumeration<?> wildcardEnumeration21 = properties16.propertyNames();
        java.lang.Object obj22 = properties8.replace((java.lang.Object) recovery9, (java.lang.Object) properties16);
        long long23 = recovery9.retryInterval;
        recovery9.setForgetOrphanedLogEntriesDelay(97L);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tmlog" + "'", str4, "tmlog");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 10000L + "'", long5 == 10000L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 300000L + "'", long6 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10000L + "'", long11 == 10000L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 5 + "'", int12 == 5);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10000L + "'", long13 == 10000L);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(wildcardEnumeration21);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 10000L + "'", long23 == 10000L);
    }

    @Test
    public void test08402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08402");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setMaxActives(0);
        boolean boolean7 = atomikosProperties0.threadedTwoPhaseCommit;
        boolean boolean8 = atomikosProperties0.allowSubTransactions;
        long long9 = atomikosProperties0.getCheckpointInterval();
        atomikosProperties0.checkpointInterval = (short) 1;
        int int12 = atomikosProperties0.getConsoleFileCount();
        atomikosProperties0.checkpointInterval = 0L;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery15 = atomikosProperties0.recovery;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 500L + "'", long9 == 500L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(recovery15);
    }

    @Test
    public void test08403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08403");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getLogBaseName();
        long long5 = atomikosProperties0.defaultJtaTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel6 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel6);
        atomikosProperties0.threadedTwoPhaseCommit = false;
        atomikosProperties0.allowSubTransactions = false;
        java.lang.String str12 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setSerialJtaTransactions(false);
        atomikosProperties0.checkpointInterval = 10;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery17 = atomikosProperties0.recovery;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery18 = atomikosProperties0.getRecovery();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tmlog" + "'", str4, "tmlog");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 10000L + "'", long5 == 10000L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "tm.out" + "'", str12, "tm.out");
        org.junit.Assert.assertNotNull(recovery17);
        org.junit.Assert.assertNotNull(recovery18);
    }

    @Test
    public void test08404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08404");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties0.setMaxActives(100);
        boolean boolean9 = atomikosProperties0.enableLogging;
        int int10 = atomikosProperties0.getConsoleFileCount();
        java.lang.String str11 = atomikosProperties0.getLogBaseName();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "tmlog" + "'", str11, "tmlog");
    }

    @Test
    public void test08405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08405");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        int int7 = atomikosProperties0.maxActives;
        atomikosProperties0.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.getRecovery();
        atomikosProperties0.forceShutdownOnVmExit = false;
        long long13 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.consoleFileLimit = (short) 0;
        java.util.Properties properties16 = atomikosProperties0.asProperties();
        java.util.Enumeration<java.lang.Object> objEnumeration17 = properties16.elements();
        properties16.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setEnableLogging(true);
        atomikosProperties19.consoleFileCount = 0;
        int int24 = atomikosProperties19.getMaxActives();
        java.lang.String str25 = atomikosProperties19.getLogBaseDir();
        java.lang.String str26 = atomikosProperties19.service;
        boolean boolean27 = atomikosProperties19.allowSubTransactions;
        atomikosProperties19.setForceShutdownOnVmExit(true);
        atomikosProperties19.consoleFileLimit = '#';
        atomikosProperties19.transactionManagerUniqueName = "{tmlog=hi!, com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}";
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties34 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean35 = atomikosProperties34.isSerialJtaTransactions();
        atomikosProperties34.logBaseName = "{-1.0=100}";
        int int38 = atomikosProperties34.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery39 = atomikosProperties34.getRecovery();
        atomikosProperties34.setConsoleFileCount((int) (byte) 100);
        atomikosProperties34.setAllowSubTransactions(true);
        atomikosProperties34.setService("tm.out");
        int int46 = atomikosProperties34.consoleFileLimit;
        atomikosProperties34.setLogBaseName("");
        java.lang.String str49 = atomikosProperties34.logBaseDir;
        atomikosProperties34.transactionManagerUniqueName = "hi!";
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel52 = atomikosProperties34.consoleLogLevel;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties53 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties54 = atomikosProperties53.asProperties();
        atomikosProperties53.service = "{-1.0=100}";
        java.lang.String str57 = atomikosProperties53.getTransactionManagerUniqueName();
        atomikosProperties53.consoleFileName = "hi!";
        atomikosProperties53.service = "{-1.0=100}";
        int int62 = atomikosProperties53.maxActives;
        boolean boolean63 = atomikosProperties53.isEnableLogging();
        boolean boolean64 = properties16.replace((java.lang.Object) "{tmlog=hi!, com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}", (java.lang.Object) atomikosProperties34, (java.lang.Object) atomikosProperties53);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 500L + "'", long13 == 500L);
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertNotNull(objEnumeration17);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 50 + "'", int24 == 50);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 50 + "'", int38 == 50);
        org.junit.Assert.assertNotNull(recovery39);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel52 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel52.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(properties54);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 50 + "'", int62 == 50);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test08406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08406");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileName = "hi!";
        atomikosProperties0.service = "tm.out";
        atomikosProperties0.logBaseName = "tm.out";
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        atomikosProperties0.setThreadedTwoPhaseCommit(false);
        boolean boolean15 = atomikosProperties0.isThreadedTwoPhaseCommit();
        long long16 = atomikosProperties0.getCheckpointInterval();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 500L + "'", long16 == 500L);
    }

    @Test
    public void test08407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08407");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        int int7 = atomikosProperties0.maxActives;
        atomikosProperties0.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.getRecovery();
        long long11 = recovery10.forgetOrphanedLogEntriesDelay;
        recovery10.setDelay(0L);
        int int14 = recovery10.getMaxRetries();
        long long15 = recovery10.delay;
        long long16 = recovery10.delay;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 86400000L + "'", long11 == 86400000L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
    }

    @Test
    public void test08408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08408");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj14 = properties0.setProperty("", "{-1.0=100}");
        boolean boolean15 = properties0.isEmpty();
        java.util.Properties properties16 = new java.util.Properties();
        java.lang.String str17 = properties16.toString();
        java.util.Properties properties18 = new java.util.Properties(properties16);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet19 = properties18.entrySet();
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.Object obj23 = properties21.remove((java.lang.Object) (-1.0d));
        int int24 = properties21.size();
        boolean boolean25 = properties0.replace((java.lang.Object) properties18, (java.lang.Object) 100L, (java.lang.Object) properties21);
        boolean boolean26 = properties0.isEmpty();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet27 = properties0.entrySet();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "{}" + "'", str17, "{}");
        org.junit.Assert.assertNotNull(objEntrySet19);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(objEntrySet27);
    }

    @Test
    public void test08409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08409");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel7 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel7);
        atomikosProperties0.setLogBaseName("{={-1.0=100}, -1.0=100}");
        atomikosProperties0.setConsoleFileLimit((-1));
        atomikosProperties0.logBaseDir = "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}";
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
    }

    @Test
    public void test08410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08410");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        atomikosProperties0.setConsoleFileCount((int) (byte) 100);
        atomikosProperties0.setAllowSubTransactions(true);
        atomikosProperties0.setService("tm.out");
        int int12 = atomikosProperties0.consoleFileLimit;
        atomikosProperties0.setDefaultJtaTimeout((long) 'a');
        boolean boolean15 = atomikosProperties0.enableLogging;
        atomikosProperties0.setService("{={-1.0=100}, -1.0=100}");
        atomikosProperties0.allowSubTransactions = true;
        atomikosProperties0.maxActives = 97;
        long long22 = atomikosProperties0.getCheckpointInterval();
        atomikosProperties0.setForceShutdownOnVmExit(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 500L + "'", long22 == 500L);
    }

    @Test
    public void test08411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08411");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj7 = properties0.clone();
        java.util.Set<java.lang.String> strSet8 = properties0.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery9 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery9.retryInterval = (short) 100;
        recovery9.delay = (-1L);
        long long14 = recovery9.delay;
        recovery9.delay = (short) 1;
        long long17 = recovery9.getRetryInterval();
        int int18 = recovery9.maxRetries;
        int int19 = recovery9.maxRetries;
        long long20 = recovery9.forgetOrphanedLogEntriesDelay;
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.Object obj23 = properties21.remove((java.lang.Object) (-1.0d));
        boolean boolean24 = properties21.isEmpty();
        int int25 = properties21.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery26 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery26.retryInterval = (short) 100;
        recovery26.forgetOrphanedLogEntriesDelay = 'a';
        java.util.Properties properties31 = new java.util.Properties();
        java.lang.Object obj33 = properties31.remove((java.lang.Object) (-1.0d));
        boolean boolean34 = properties31.isEmpty();
        int int35 = properties31.size();
        java.lang.String str37 = properties31.getProperty("{}");
        boolean boolean38 = properties21.remove((java.lang.Object) recovery26, (java.lang.Object) properties31);
        java.lang.Object obj39 = properties0.putIfAbsent((java.lang.Object) long20, (java.lang.Object) properties21);
        java.util.Enumeration<java.lang.Object> objEnumeration40 = properties0.keys();
        java.util.Properties properties41 = new java.util.Properties();
        java.lang.Object obj43 = properties41.remove((java.lang.Object) (-1.0d));
        boolean boolean44 = properties41.isEmpty();
        java.util.Collection<java.lang.Object> objCollection45 = properties41.values();
        java.util.Properties properties46 = new java.util.Properties();
        java.lang.Object obj49 = properties46.setProperty("{}", "{}");
        java.util.Enumeration<java.lang.Object> objEnumeration50 = properties46.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration51 = properties46.elements();
        java.util.Properties properties52 = new java.util.Properties();
        java.util.Properties properties53 = new java.util.Properties();
        java.lang.String str54 = properties53.toString();
        java.lang.Object obj56 = properties53.remove((java.lang.Object) (short) 100);
        java.lang.Object obj59 = properties53.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        int int60 = properties53.size();
        java.util.Properties properties61 = new java.util.Properties();
        java.lang.Object obj63 = properties61.remove((java.lang.Object) (-1.0d));
        boolean boolean64 = properties61.isEmpty();
        java.lang.Object obj67 = properties61.setProperty("hi!", "{}");
        boolean boolean68 = properties52.remove((java.lang.Object) int60, (java.lang.Object) properties61);
        boolean boolean69 = properties0.replace((java.lang.Object) objCollection45, (java.lang.Object) objEnumeration51, (java.lang.Object) properties61);
        java.util.Set<java.lang.Object> objSet70 = properties61.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties71 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties71.setEnableLogging(true);
        atomikosProperties71.consoleFileCount = 0;
        int int76 = atomikosProperties71.getMaxActives();
        java.lang.String str77 = atomikosProperties71.getLogBaseDir();
        java.lang.String str78 = atomikosProperties71.service;
        long long79 = atomikosProperties71.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery80 = atomikosProperties71.recovery;
        long long81 = recovery80.getRetryInterval();
        recovery80.setDelay(52L);
        java.lang.Object obj84 = properties61.remove((java.lang.Object) recovery80);
        java.util.Properties properties85 = new java.util.Properties(properties61);
        java.util.Set<java.lang.String> strSet86 = properties61.stringPropertyNames();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{1.0=-1}");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 100L + "'", long17 == 100L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5 + "'", int18 == 5);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 5 + "'", int19 == 5);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 86400000L + "'", long20 == 86400000L);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNotNull(objEnumeration40);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(objCollection45);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertNotNull(objEnumeration50);
        org.junit.Assert.assertNotNull(objEnumeration51);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "{}" + "'", str54, "{}");
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(objSet70);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 50 + "'", int76 == 50);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 500L + "'", long79 == 500L);
        org.junit.Assert.assertNotNull(recovery80);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 10000L + "'", long81 == 10000L);
        org.junit.Assert.assertNull(obj84);
        org.junit.Assert.assertNotNull(strSet86);
    }

    @Test
    public void test08412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08412");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        long long7 = atomikosProperties0.getDefaultJtaTimeout();
        long long8 = atomikosProperties0.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery9 = atomikosProperties0.getRecovery();
        java.lang.String str10 = atomikosProperties0.outputDir;
        atomikosProperties0.consoleFileCount = 32;
        atomikosProperties0.consoleFileLimit = (short) -1;
        boolean boolean15 = atomikosProperties0.serialJtaTransactions;
        java.lang.String str16 = atomikosProperties0.consoleFileName;
        java.lang.String str17 = atomikosProperties0.service;
        java.util.Properties properties18 = new java.util.Properties();
        java.lang.String str19 = properties18.toString();
        properties18.clear();
        java.lang.String str21 = properties18.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties24 = atomikosProperties23.asProperties();
        atomikosProperties23.service = "{-1.0=100}";
        java.lang.String str27 = atomikosProperties23.getTransactionManagerUniqueName();
        atomikosProperties23.consoleFileName = "hi!";
        atomikosProperties23.serialJtaTransactions = true;
        atomikosProperties23.outputDir = "tm.out";
        int int34 = atomikosProperties23.getConsoleFileLimit();
        int int35 = atomikosProperties23.getMaxActives();
        atomikosProperties23.setForceShutdownOnVmExit(true);
        atomikosProperties0.set(properties18, "tm.out", (java.lang.Object) true);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties39 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties40 = atomikosProperties39.asProperties();
        atomikosProperties39.service = "{-1.0=100}";
        java.lang.String str43 = atomikosProperties39.getTransactionManagerUniqueName();
        atomikosProperties39.consoleFileName = "hi!";
        atomikosProperties39.enableLogging = true;
        atomikosProperties39.setAllowSubTransactions(false);
        atomikosProperties39.forceShutdownOnVmExit = false;
        java.util.Properties properties52 = new java.util.Properties();
        java.lang.String str53 = properties52.toString();
        java.lang.Object obj55 = properties52.remove((java.lang.Object) (short) 100);
        java.lang.Object obj58 = properties52.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean60 = properties52.containsKey((java.lang.Object) 0L);
        java.lang.Object obj63 = properties52.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj66 = properties52.setProperty("", "{-1.0=100}");
        boolean boolean67 = properties52.isEmpty();
        java.util.Properties properties68 = new java.util.Properties();
        java.lang.String str69 = properties68.toString();
        java.util.Properties properties70 = new java.util.Properties(properties68);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet71 = properties70.entrySet();
        java.util.Properties properties73 = new java.util.Properties();
        java.lang.Object obj75 = properties73.remove((java.lang.Object) (-1.0d));
        int int76 = properties73.size();
        boolean boolean77 = properties52.replace((java.lang.Object) properties70, (java.lang.Object) 100L, (java.lang.Object) properties73);
        java.util.Enumeration<java.lang.Object> objEnumeration78 = properties70.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties79 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean80 = atomikosProperties79.isSerialJtaTransactions();
        atomikosProperties79.logBaseName = "{-1.0=100}";
        int int83 = atomikosProperties79.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery84 = atomikosProperties79.getRecovery();
        atomikosProperties79.setConsoleFileCount((int) (byte) 100);
        atomikosProperties79.maxTimeout = 50;
        java.lang.String str89 = atomikosProperties79.getConsoleFileName();
        boolean boolean90 = properties70.containsValue((java.lang.Object) atomikosProperties79);
        java.lang.Object obj91 = properties18.put((java.lang.Object) false, (java.lang.Object) atomikosProperties79);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(recovery9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tm.out" + "'", str16, "tm.out");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "{-1.0=100}" + "'", str17, "{-1.0=100}");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "{}" + "'", str19, "{}");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "{}" + "'", str21, "{}");
        org.junit.Assert.assertNotNull(properties24);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 50 + "'", int35 == 50);
        org.junit.Assert.assertNotNull(properties40);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "{}" + "'", str53, "{}");
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "{}" + "'", str69, "{}");
        org.junit.Assert.assertNotNull(objEntrySet71);
        org.junit.Assert.assertNull(obj75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(objEnumeration78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 50 + "'", int83 == 50);
        org.junit.Assert.assertNotNull(recovery84);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "tm.out" + "'", str89, "tm.out");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNull(obj91);
    }

    @Test
    public void test08413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08413");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        atomikosProperties2.service = "{-1.0=100}";
        long long6 = atomikosProperties2.getDefaultJtaTimeout();
        atomikosProperties2.consoleFileLimit = '#';
        java.lang.Object obj9 = properties1.get((java.lang.Object) atomikosProperties2);
        atomikosProperties2.setConsoleFileCount((int) (byte) -1);
        boolean boolean12 = atomikosProperties2.isForceShutdownOnVmExit();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test08414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08414");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        boolean boolean5 = properties0.containsKey((java.lang.Object) 0L);
        properties0.clear();
        java.util.Set<java.lang.Object> objSet7 = properties0.keySet();
        java.util.Enumeration<java.lang.Object> objEnumeration8 = properties0.elements();
        java.lang.Class<?> wildcardClass9 = objEnumeration8.getClass();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objSet7);
        org.junit.Assert.assertNotNull(objEnumeration8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test08415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08415");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        java.util.Properties properties7 = new java.util.Properties();
        java.util.Properties properties8 = new java.util.Properties(properties7);
        java.util.Enumeration<java.lang.Object> objEnumeration9 = properties8.elements();
        java.util.Properties properties10 = new java.util.Properties();
        java.lang.String str11 = properties10.toString();
        java.lang.Object obj13 = properties10.remove((java.lang.Object) (short) 100);
        java.lang.Object obj16 = properties10.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean18 = properties10.containsKey((java.lang.Object) 0L);
        java.lang.Object obj21 = properties10.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj24 = properties10.setProperty("", "{-1.0=100}");
        boolean boolean25 = properties10.isEmpty();
        java.util.Properties properties26 = new java.util.Properties();
        java.lang.String str27 = properties26.toString();
        java.util.Properties properties28 = new java.util.Properties(properties26);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet29 = properties28.entrySet();
        java.util.Properties properties31 = new java.util.Properties();
        java.lang.Object obj33 = properties31.remove((java.lang.Object) (-1.0d));
        int int34 = properties31.size();
        boolean boolean35 = properties10.replace((java.lang.Object) properties28, (java.lang.Object) 100L, (java.lang.Object) properties31);
        boolean boolean36 = properties10.isEmpty();
        java.util.Set<java.lang.Object> objSet37 = properties10.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties39 = atomikosProperties38.asProperties();
        atomikosProperties38.service = "{-1.0=100}";
        long long42 = atomikosProperties38.getDefaultJtaTimeout();
        long long43 = atomikosProperties38.getMaxTimeout();
        int int44 = atomikosProperties38.consoleFileCount;
        java.lang.String str45 = atomikosProperties38.getOutputDir();
        boolean boolean46 = properties8.remove((java.lang.Object) properties10, (java.lang.Object) atomikosProperties38);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties47 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties48 = atomikosProperties47.asProperties();
        atomikosProperties47.service = "{-1.0=100}";
        long long51 = atomikosProperties47.getDefaultJtaTimeout();
        long long52 = atomikosProperties47.getMaxTimeout();
        int int53 = atomikosProperties47.consoleFileCount;
        atomikosProperties47.setConsoleFileCount(0);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel56 = atomikosProperties47.getConsoleLogLevel();
        boolean boolean57 = properties10.equals((java.lang.Object) atomikosLoggingLevel56);
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel56);
        int int59 = atomikosProperties0.maxActives;
        atomikosProperties0.serialJtaTransactions = true;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertNotNull(objEnumeration9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "{}" + "'", str11, "{}");
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "{}" + "'", str27, "{}");
        org.junit.Assert.assertNotNull(objEntrySet29);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(objSet37);
        org.junit.Assert.assertNotNull(properties39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 10000L + "'", long42 == 10000L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 300000L + "'", long43 == 300000L);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(properties48);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 10000L + "'", long51 == 10000L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 300000L + "'", long52 == 300000L);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel56 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel56.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 50 + "'", int59 == 50);
    }

    @Test
    public void test08416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08416");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        int int7 = atomikosProperties0.maxActives;
        atomikosProperties0.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.getRecovery();
        atomikosProperties0.consoleFileName = "{-1.0=100}";
        atomikosProperties0.setSerialJtaTransactions(false);
        atomikosProperties0.consoleFileName = "{={-1.0=100}, -1.0=100}";
        boolean boolean17 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.service = "tm.out";
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel20 = atomikosProperties0.consoleLogLevel;
        atomikosProperties0.setConsoleFileCount(97);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel23 = atomikosProperties0.getConsoleLogLevel();
        boolean boolean24 = atomikosProperties0.isForceShutdownOnVmExit();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(atomikosLoggingLevel20);
        org.junit.Assert.assertNull(atomikosLoggingLevel23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test08417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08417");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.util.Properties properties3 = new java.util.Properties();
        java.lang.String str4 = properties3.toString();
        java.lang.Object obj6 = properties3.remove((java.lang.Object) (short) 100);
        java.lang.Object obj9 = properties3.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean11 = properties3.containsKey((java.lang.Object) 0L);
        java.lang.Object obj14 = properties3.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj17 = properties3.setProperty("", "{-1.0=100}");
        java.util.Enumeration<java.lang.Object> objEnumeration18 = properties3.keys();
        java.util.Properties properties19 = new java.util.Properties();
        java.lang.String str20 = properties19.toString();
        boolean boolean21 = properties19.isEmpty();
        java.lang.Object obj24 = properties19.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration25 = properties19.elements();
        java.lang.Object obj26 = properties2.replace((java.lang.Object) objEnumeration18, (java.lang.Object) properties19);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties19.elements();
        java.util.Enumeration<java.lang.Object> objEnumeration28 = properties19.keys();
        java.util.Properties properties29 = new java.util.Properties(properties19);
        java.util.Properties properties30 = new java.util.Properties();
        java.lang.String str31 = properties30.toString();
        java.lang.Object obj33 = properties30.remove((java.lang.Object) (short) 100);
        java.lang.Object obj36 = properties30.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean38 = properties30.containsKey((java.lang.Object) 0L);
        java.lang.Object obj41 = properties30.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj44 = properties30.setProperty("", "{-1.0=100}");
        boolean boolean45 = properties30.isEmpty();
        java.util.Properties properties46 = new java.util.Properties();
        java.lang.String str47 = properties46.toString();
        java.util.Properties properties48 = new java.util.Properties(properties46);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet49 = properties48.entrySet();
        java.util.Properties properties51 = new java.util.Properties();
        java.lang.Object obj53 = properties51.remove((java.lang.Object) (-1.0d));
        int int54 = properties51.size();
        boolean boolean55 = properties30.replace((java.lang.Object) properties48, (java.lang.Object) 100L, (java.lang.Object) properties51);
        java.util.Enumeration<java.lang.Object> objEnumeration56 = properties48.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties57 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean58 = atomikosProperties57.isSerialJtaTransactions();
        atomikosProperties57.logBaseName = "{-1.0=100}";
        int int61 = atomikosProperties57.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery62 = atomikosProperties57.getRecovery();
        atomikosProperties57.setConsoleFileCount((int) (byte) 100);
        atomikosProperties57.maxTimeout = 50;
        java.lang.String str67 = atomikosProperties57.getConsoleFileName();
        boolean boolean68 = properties48.containsValue((java.lang.Object) atomikosProperties57);
        boolean boolean69 = properties19.containsKey((java.lang.Object) atomikosProperties57);
        java.util.Enumeration<java.lang.Object> objEnumeration70 = properties19.elements();
        java.util.Collection<java.lang.Object> objCollection71 = properties19.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties72 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties73 = atomikosProperties72.asProperties();
        atomikosProperties72.service = "{-1.0=100}";
        long long76 = atomikosProperties72.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel77 = null;
        atomikosProperties72.setConsoleLogLevel(atomikosLoggingLevel77);
        int int79 = atomikosProperties72.maxActives;
        atomikosProperties72.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery82 = atomikosProperties72.getRecovery();
        int int83 = atomikosProperties72.getConsoleFileCount();
        long long84 = atomikosProperties72.maxTimeout;
        atomikosProperties72.logBaseName = "{1.0=-1, -1.0=100}";
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery87 = atomikosProperties72.recovery;
        boolean boolean88 = properties19.containsValue((java.lang.Object) atomikosProperties72);
        java.util.Properties properties89 = new java.util.Properties();
        java.lang.String str90 = properties89.toString();
        java.util.Properties properties91 = new java.util.Properties(properties89);
        java.lang.Object obj94 = properties89.setProperty("", "{={-1.0=100}, -1.0=100}");
        java.util.Set<java.lang.String> strSet95 = properties89.stringPropertyNames();
        properties19.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties89);
        java.lang.Object obj97 = properties19.clone();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{}" + "'", str4, "{}");
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(objEnumeration18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{}" + "'", str20, "{}");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(objEnumeration25);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertNotNull(objEnumeration28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "{}" + "'", str31, "{}");
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "{}" + "'", str47, "{}");
        org.junit.Assert.assertNotNull(objEntrySet49);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(objEnumeration56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 50 + "'", int61 == 50);
        org.junit.Assert.assertNotNull(recovery62);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "tm.out" + "'", str67, "tm.out");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(objEnumeration70);
        org.junit.Assert.assertNotNull(objCollection71);
        org.junit.Assert.assertNotNull(properties73);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 10000L + "'", long76 == 10000L);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 50 + "'", int79 == 50);
        org.junit.Assert.assertNotNull(recovery82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 300000L + "'", long84 == 300000L);
        org.junit.Assert.assertNotNull(recovery87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "{}" + "'", str90, "{}");
        org.junit.Assert.assertNull(obj94);
        org.junit.Assert.assertNotNull(strSet95);
        org.junit.Assert.assertNotNull(obj97);
// flaky:         org.junit.Assert.assertEquals(obj97.toString(), "{100=100, ={={-1.0=100}, -1.0=100}}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj97), "{100=100, ={={-1.0=100}, -1.0=100}}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj97), "{100=100, ={={-1.0=100}, -1.0=100}}");
    }

    @Test
    public void test08418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08418");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setMaxActives(0);
        boolean boolean7 = atomikosProperties0.threadedTwoPhaseCommit;
        boolean boolean8 = atomikosProperties0.allowSubTransactions;
        atomikosProperties0.logBaseDir = "{}";
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean12 = atomikosProperties11.isSerialJtaTransactions();
        atomikosProperties11.logBaseName = "{-1.0=100}";
        int int15 = atomikosProperties11.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery16 = atomikosProperties11.getRecovery();
        atomikosProperties11.setConsoleFileCount((int) (byte) 100);
        atomikosProperties11.setAllowSubTransactions(true);
        atomikosProperties11.setService("tm.out");
        boolean boolean23 = atomikosProperties11.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel24 = atomikosProperties11.getConsoleLogLevel();
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel24);
        atomikosProperties0.setDefaultJtaTimeout((long) (byte) 100);
        boolean boolean28 = atomikosProperties0.isAllowSubTransactions();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 50 + "'", int15 == 50);
        org.junit.Assert.assertNotNull(recovery16);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel24 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel24.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test08419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08419");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setTransactionManagerUniqueName("{}");
        atomikosProperties0.consoleFileName = "hi!";
        boolean boolean9 = atomikosProperties0.threadedTwoPhaseCommit;
        atomikosProperties0.setConsoleFileLimit(5);
        atomikosProperties0.logBaseDir = "{100=100}";
        atomikosProperties0.setConsoleFileLimit(100);
        atomikosProperties0.threadedTwoPhaseCommit = false;
        long long18 = atomikosProperties0.maxTimeout;
        atomikosProperties0.consoleFileName = "{{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}=, ={-1.0=100}, -1.0=100}";
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 300000L + "'", long18 == 300000L);
    }

    @Test
    public void test08420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08420");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        atomikosProperties2.service = "{-1.0=100}";
        long long6 = atomikosProperties2.getDefaultJtaTimeout();
        atomikosProperties2.consoleFileLimit = '#';
        java.lang.Object obj9 = properties1.get((java.lang.Object) atomikosProperties2);
        boolean boolean10 = atomikosProperties2.forceShutdownOnVmExit;
        atomikosProperties2.setOutputDir("");
        long long13 = atomikosProperties2.defaultJtaTimeout;
        java.lang.String str14 = atomikosProperties2.getLogBaseName();
        atomikosProperties2.setEnableLogging(false);
        int int17 = atomikosProperties2.consoleFileCount;
        atomikosProperties2.outputDir = "tmlog";
        long long20 = atomikosProperties2.getDefaultJtaTimeout();
        atomikosProperties2.defaultJtaTimeout = 2L;
        long long23 = atomikosProperties2.getCheckpointInterval();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10000L + "'", long13 == 10000L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "tmlog" + "'", str14, "tmlog");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10000L + "'", long20 == 10000L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 500L + "'", long23 == 500L);
    }

    @Test
    public void test08421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08421");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getLogBaseName();
        java.lang.String str5 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.consoleFileName = "";
        atomikosProperties0.forceShutdownOnVmExit = false;
        boolean boolean10 = atomikosProperties0.isAllowSubTransactions();
        atomikosProperties0.setLogBaseName("{-1.0=100}");
        atomikosProperties0.transactionManagerUniqueName = "{100=100}";
        atomikosProperties0.setTransactionManagerUniqueName("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        atomikosProperties0.forceShutdownOnVmExit = true;
        int int19 = atomikosProperties0.consoleFileLimit;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel20 = atomikosProperties0.getConsoleLogLevel();
        java.lang.String str21 = atomikosProperties0.getLogBaseDir();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tmlog" + "'", str4, "tmlog");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel20 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel20.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test08422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08422");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileName = "hi!";
        atomikosProperties0.forceShutdownOnVmExit = true;
        java.lang.String str9 = atomikosProperties0.consoleFileName;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
    }

    @Test
    public void test08423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08423");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setAllowSubTransactions(true);
        atomikosProperties0.maxActives = (short) -1;
        atomikosProperties0.setService("tm.out");
        int int7 = atomikosProperties0.maxActives;
        atomikosProperties0.logBaseDir = "tmlog";
        atomikosProperties0.setSerialJtaTransactions(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery12 = atomikosProperties0.getRecovery();
        atomikosProperties0.setConsoleFileName("tmlog");
        atomikosProperties0.defaultJtaTimeout = 100;
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(recovery12);
    }

    @Test
    public void test08424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08424");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj7 = properties0.clone();
        java.util.Set<java.lang.String> strSet8 = properties0.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery9 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery9.retryInterval = (short) 100;
        recovery9.delay = (-1L);
        long long14 = recovery9.delay;
        recovery9.delay = (short) 1;
        long long17 = recovery9.getRetryInterval();
        int int18 = recovery9.maxRetries;
        int int19 = recovery9.maxRetries;
        long long20 = recovery9.forgetOrphanedLogEntriesDelay;
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.Object obj23 = properties21.remove((java.lang.Object) (-1.0d));
        boolean boolean24 = properties21.isEmpty();
        int int25 = properties21.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery26 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery26.retryInterval = (short) 100;
        recovery26.forgetOrphanedLogEntriesDelay = 'a';
        java.util.Properties properties31 = new java.util.Properties();
        java.lang.Object obj33 = properties31.remove((java.lang.Object) (-1.0d));
        boolean boolean34 = properties31.isEmpty();
        int int35 = properties31.size();
        java.lang.String str37 = properties31.getProperty("{}");
        boolean boolean38 = properties21.remove((java.lang.Object) recovery26, (java.lang.Object) properties31);
        java.lang.Object obj39 = properties0.putIfAbsent((java.lang.Object) long20, (java.lang.Object) properties21);
        java.util.Enumeration<java.lang.Object> objEnumeration40 = properties0.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties41.setEnableLogging(true);
        atomikosProperties41.consoleFileCount = 0;
        long long46 = atomikosProperties41.checkpointInterval;
        atomikosProperties41.consoleFileName = "{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}";
        boolean boolean49 = properties0.containsKey((java.lang.Object) "{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}");
        java.io.Writer writer50 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.store(writer50, "{{={-1.0=100}, -1.0=100}=}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{1.0=-1}");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 100L + "'", long17 == 100L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5 + "'", int18 == 5);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 5 + "'", int19 == 5);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 86400000L + "'", long20 == 86400000L);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNotNull(objEnumeration40);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 500L + "'", long46 == 500L);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test08425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08425");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long1 = recovery0.getRetryInterval();
        recovery0.setRetryInterval(0L);
        recovery0.forgetOrphanedLogEntriesDelay = 2;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 10000L + "'", long1 == 10000L);
    }

    @Test
    public void test08426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08426");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.retryInterval = (short) 100;
        recovery0.delay = (-1L);
        long long5 = recovery0.delay;
        recovery0.delay = (short) 1;
        long long8 = recovery0.getRetryInterval();
        int int9 = recovery0.maxRetries;
        long long10 = recovery0.getForgetOrphanedLogEntriesDelay();
        long long11 = recovery0.delay;
        int int12 = recovery0.getMaxRetries();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5 + "'", int9 == 5);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 86400000L + "'", long10 == 86400000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 5 + "'", int12 == 5);
    }

    @Test
    public void test08427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08427");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        atomikosProperties0.setConsoleFileCount((int) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel8 = null;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel8;
        int int10 = atomikosProperties0.consoleFileLimit;
        atomikosProperties0.transactionManagerUniqueName = "{-1.0=100}";
        atomikosProperties0.logBaseName = "";
        atomikosProperties0.consoleFileCount = (byte) -1;
        atomikosProperties0.forceShutdownOnVmExit = true;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test08428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08428");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.retryInterval = (short) 100;
        recovery0.forgetOrphanedLogEntriesDelay = 'a';
        int int5 = recovery0.getMaxRetries();
        long long6 = recovery0.retryInterval;
        long long7 = recovery0.getForgetOrphanedLogEntriesDelay();
        long long8 = recovery0.forgetOrphanedLogEntriesDelay;
        long long9 = recovery0.getForgetOrphanedLogEntriesDelay();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5 + "'", int5 == 5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 100L + "'", long6 == 100L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 97L + "'", long7 == 97L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 97L + "'", long8 == 97L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 97L + "'", long9 == 97L);
    }

    @Test
    public void test08429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08429");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.util.Properties properties3 = new java.util.Properties();
        java.lang.String str4 = properties3.toString();
        java.lang.Object obj6 = properties3.remove((java.lang.Object) (short) 100);
        java.lang.Object obj9 = properties3.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean11 = properties3.containsKey((java.lang.Object) 0L);
        java.lang.Object obj14 = properties3.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj17 = properties3.setProperty("", "{-1.0=100}");
        java.util.Enumeration<java.lang.Object> objEnumeration18 = properties3.keys();
        java.util.Properties properties19 = new java.util.Properties();
        java.lang.String str20 = properties19.toString();
        boolean boolean21 = properties19.isEmpty();
        java.lang.Object obj24 = properties19.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration25 = properties19.elements();
        java.lang.Object obj26 = properties2.replace((java.lang.Object) objEnumeration18, (java.lang.Object) properties19);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties2.keys();
        java.lang.String str28 = properties2.toString();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet29 = properties2.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties31 = atomikosProperties30.asProperties();
        atomikosProperties30.service = "{-1.0=100}";
        long long34 = atomikosProperties30.getDefaultJtaTimeout();
        atomikosProperties30.setTransactionManagerUniqueName("{}");
        atomikosProperties30.consoleFileName = "hi!";
        int int39 = atomikosProperties30.getConsoleFileCount();
        boolean boolean40 = atomikosProperties30.isThreadedTwoPhaseCommit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel41 = atomikosProperties30.consoleLogLevel;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties43 = atomikosProperties42.asProperties();
        atomikosProperties42.service = "{-1.0=100}";
        long long46 = atomikosProperties42.getDefaultJtaTimeout();
        atomikosProperties42.enableLogging = false;
        atomikosProperties42.setMaxActives((int) ' ');
        java.util.Properties properties51 = atomikosProperties42.asProperties();
        java.lang.String str52 = atomikosProperties42.logBaseDir;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery53 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery53.retryInterval = (short) 100;
        recovery53.delay = (-1L);
        long long58 = recovery53.delay;
        recovery53.delay = (short) 1;
        boolean boolean61 = properties2.replace((java.lang.Object) atomikosProperties30, (java.lang.Object) atomikosProperties42, (java.lang.Object) recovery53);
        boolean boolean62 = atomikosProperties42.enableLogging;
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{}" + "'", str4, "{}");
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(objEnumeration18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{}" + "'", str20, "{}");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(objEnumeration25);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "{}" + "'", str28, "{}");
        org.junit.Assert.assertNotNull(objEntrySet29);
        org.junit.Assert.assertNotNull(properties31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 10000L + "'", long34 == 10000L);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel41 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel41.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(properties43);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 10000L + "'", long46 == 10000L);
        org.junit.Assert.assertNotNull(properties51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-1L) + "'", long58 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test08430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08430");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        atomikosProperties0.setConsoleFileCount((int) (byte) 100);
        atomikosProperties0.setAllowSubTransactions(true);
        atomikosProperties0.setService("tm.out");
        boolean boolean12 = atomikosProperties0.isForceShutdownOnVmExit();
        boolean boolean13 = atomikosProperties0.isAllowSubTransactions();
        atomikosProperties0.setLogBaseName("");
        boolean boolean16 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.setTransactionManagerUniqueName("{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}");
        java.util.Properties properties19 = new java.util.Properties();
        java.lang.String str20 = properties19.toString();
        java.lang.Object obj22 = properties19.remove((java.lang.Object) (short) 100);
        java.lang.Object obj25 = properties19.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean27 = properties19.containsKey((java.lang.Object) 0L);
        java.lang.Object obj30 = properties19.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj33 = properties19.setProperty("", "{-1.0=100}");
        java.lang.String str34 = properties19.toString();
        java.util.Set<java.lang.String> strSet35 = properties19.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties37 = atomikosProperties36.asProperties();
        atomikosProperties36.service = "{-1.0=100}";
        long long40 = atomikosProperties36.getDefaultJtaTimeout();
        atomikosProperties36.enableLogging = false;
        atomikosProperties36.setMaxTimeout((long) (byte) 0);
        atomikosProperties36.setAllowSubTransactions(true);
        java.util.Properties properties47 = new java.util.Properties();
        java.lang.Object obj49 = properties47.remove((java.lang.Object) (-1.0d));
        boolean boolean50 = properties47.isEmpty();
        java.util.Collection<java.lang.Object> objCollection51 = properties47.values();
        java.lang.Object obj52 = properties19.put((java.lang.Object) true, (java.lang.Object) properties47);
        java.util.Properties properties53 = new java.util.Properties(properties47);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties55 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean56 = atomikosProperties55.isSerialJtaTransactions();
        atomikosProperties55.logBaseName = "{-1.0=100}";
        int int59 = atomikosProperties55.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery60 = atomikosProperties55.getRecovery();
        atomikosProperties55.setConsoleFileCount((int) (byte) 100);
        java.lang.String str63 = atomikosProperties55.logBaseName;
        atomikosProperties55.setCheckpointInterval((long) 18);
        atomikosProperties0.set(properties47, "hi!", (java.lang.Object) atomikosProperties55);
        atomikosProperties55.logBaseName = "{100=100}";
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel69 = atomikosProperties55.getConsoleLogLevel();
        atomikosProperties55.setConsoleFileName("{com.atomikos.icatch.={}, 100=100}");
        atomikosProperties55.transactionManagerUniqueName = "{={={-1.0=100}, -1.0=100}}";
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{}" + "'", str20, "{}");
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNull(obj33);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "{={-1.0=100}, -1.0=100}" + "'", str34, "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertNotNull(properties37);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 10000L + "'", long40 == 10000L);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(objCollection51);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 50 + "'", int59 == 50);
        org.junit.Assert.assertNotNull(recovery60);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "{-1.0=100}" + "'", str63, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel69 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel69.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
    }

    @Test
    public void test08431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08431");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        long long7 = atomikosProperties0.maxTimeout;
        atomikosProperties0.setLogBaseDir("{-1.0=100}");
        int int10 = atomikosProperties0.getMaxActives();
        atomikosProperties0.forceShutdownOnVmExit = false;
        java.lang.String str13 = atomikosProperties0.logBaseName;
        java.lang.String str14 = atomikosProperties0.consoleFileName;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties15.setAllowSubTransactions(true);
        atomikosProperties15.maxActives = (short) -1;
        atomikosProperties15.setService("tm.out");
        int int22 = atomikosProperties15.maxActives;
        atomikosProperties15.logBaseDir = "tmlog";
        boolean boolean25 = atomikosProperties15.allowSubTransactions;
        java.lang.String str26 = atomikosProperties15.getLogBaseDir();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel27 = atomikosProperties15.consoleLogLevel;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel27);
        java.lang.String str29 = atomikosProperties0.transactionManagerUniqueName;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 50 + "'", int10 == 50);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "tm.out" + "'", str14, "tm.out");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "tmlog" + "'", str26, "tmlog");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel27 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel27.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(str29);
    }

    @Test
    public void test08432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08432");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.retryInterval = (short) 100;
        recovery0.delay = (-1L);
        long long5 = recovery0.delay;
        int int6 = recovery0.getMaxRetries();
        long long7 = recovery0.getForgetOrphanedLogEntriesDelay();
        long long8 = recovery0.getForgetOrphanedLogEntriesDelay();
        recovery0.setRetryInterval(300000L);
        long long11 = recovery0.getRetryInterval();
        recovery0.retryInterval = (byte) 10;
        recovery0.setMaxRetries((int) (byte) 10);
        recovery0.setMaxRetries(10);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 86400000L + "'", long7 == 86400000L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 86400000L + "'", long8 == 86400000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 300000L + "'", long11 == 300000L);
    }

    @Test
    public void test08433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08433");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getLogBaseName();
        long long5 = atomikosProperties0.defaultJtaTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel6 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel6);
        java.lang.String str8 = atomikosProperties0.consoleFileName;
        java.lang.String str9 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.setConsoleFileName("tmlog");
        boolean boolean12 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.setOutputDir("");
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tmlog" + "'", str4, "tmlog");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 10000L + "'", long5 == 10000L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "tm.out" + "'", str8, "tm.out");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test08434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08434");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.remove((java.lang.Object) (-1.0d));
        boolean boolean3 = properties0.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean5 = atomikosProperties4.isSerialJtaTransactions();
        atomikosProperties4.logBaseName = "{-1.0=100}";
        int int8 = atomikosProperties4.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery9 = atomikosProperties4.getRecovery();
        atomikosProperties4.setConsoleFileCount((int) (byte) 100);
        java.lang.String str12 = atomikosProperties4.logBaseName;
        atomikosProperties4.setCheckpointInterval((long) 18);
        long long15 = atomikosProperties4.defaultJtaTimeout;
        java.util.Properties properties16 = atomikosProperties4.asProperties();
        boolean boolean17 = properties0.contains((java.lang.Object) atomikosProperties4);
        atomikosProperties4.setCheckpointInterval((long) 100);
        long long20 = atomikosProperties4.getDefaultJtaTimeout();
        java.lang.String str21 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setService("{1.0=-1, 10000=0}");
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 50 + "'", int8 == 50);
        org.junit.Assert.assertNotNull(recovery9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "{-1.0=100}" + "'", str12, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10000L + "'", long15 == 10000L);
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10000L + "'", long20 == 10000L);
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test08435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08435");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.retryInterval = (short) 100;
        recovery0.forgetOrphanedLogEntriesDelay = 'a';
        long long5 = recovery0.retryInterval;
        recovery0.forgetOrphanedLogEntriesDelay = 0L;
        long long8 = recovery0.getForgetOrphanedLogEntriesDelay();
        long long9 = recovery0.getForgetOrphanedLogEntriesDelay();
        long long10 = recovery0.retryInterval;
        long long11 = recovery0.getDelay();
        long long12 = recovery0.getDelay();
        recovery0.maxRetries = (short) 10;
        long long15 = recovery0.getRetryInterval();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 100L + "'", long5 == 100L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 100L + "'", long10 == 100L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10000L + "'", long11 == 10000L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10000L + "'", long12 == 10000L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 100L + "'", long15 == 100L);
    }

    @Test
    public void test08436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08436");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Enumeration<?> wildcardEnumeration1 = properties0.propertyNames();
        java.lang.Object obj4 = properties0.setProperty("{={-1.0=100}, -1.0=100}", "{={-1.0=100}, -1.0=100}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long6 = recovery5.getRetryInterval();
        long long7 = recovery5.getDelay();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties9 = atomikosProperties8.asProperties();
        atomikosProperties8.service = "{-1.0=100}";
        java.lang.String str12 = atomikosProperties8.getTransactionManagerUniqueName();
        atomikosProperties8.consoleFileName = "hi!";
        atomikosProperties8.serialJtaTransactions = true;
        atomikosProperties8.outputDir = "tm.out";
        boolean boolean19 = atomikosProperties8.isAllowSubTransactions();
        atomikosProperties8.consoleFileName = "";
        atomikosProperties8.transactionManagerUniqueName = "";
        java.lang.Object obj24 = properties0.replace((java.lang.Object) long7, (java.lang.Object) atomikosProperties8);
        java.util.Properties properties25 = new java.util.Properties();
        java.lang.String str26 = properties25.toString();
        java.lang.Object obj28 = properties25.remove((java.lang.Object) (short) 100);
        java.lang.Object obj31 = properties25.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        java.util.Properties properties33 = new java.util.Properties();
        java.lang.String str34 = properties33.toString();
        java.lang.Object obj36 = properties33.remove((java.lang.Object) (short) 100);
        java.lang.Object obj39 = properties33.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj40 = properties33.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration41 = properties33.elements();
        java.lang.Object obj42 = properties25.putIfAbsent((java.lang.Object) 10.0f, (java.lang.Object) objEnumeration41);
        java.util.Properties properties43 = new java.util.Properties();
        java.util.Enumeration<?> wildcardEnumeration44 = properties43.propertyNames();
        java.lang.Object obj45 = properties43.clone();
        java.util.Properties properties46 = new java.util.Properties();
        java.lang.String str47 = properties46.toString();
        boolean boolean48 = properties46.isEmpty();
        java.lang.Object obj51 = properties46.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration52 = properties46.elements();
        java.lang.Object obj53 = properties25.put(obj45, (java.lang.Object) objEnumeration52);
        properties25.clear();
        java.lang.String str55 = properties25.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties56 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties57 = atomikosProperties56.asProperties();
        atomikosProperties56.service = "{-1.0=100}";
        long long60 = atomikosProperties56.getDefaultJtaTimeout();
        atomikosProperties56.serialJtaTransactions = true;
        atomikosProperties56.maxActives = ' ';
        int int65 = atomikosProperties56.getConsoleFileCount();
        boolean boolean66 = properties25.equals((java.lang.Object) atomikosProperties56);
        boolean boolean67 = properties0.containsKey((java.lang.Object) properties25);
        boolean boolean68 = properties0.isEmpty();
        java.lang.String str70 = properties0.getProperty("{1.0=-1}");
        java.io.PrintWriter printWriter71 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.list(printWriter71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardEnumeration1);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "{}" + "'", str26, "{}");
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "{}" + "'", str34, "{}");
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertEquals(obj40.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration41);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertNotNull(wildcardEnumeration44);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertEquals(obj45.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "{}");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "{}" + "'", str47, "{}");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNotNull(objEnumeration52);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "{}" + "'", str55, "{}");
        org.junit.Assert.assertNotNull(properties57);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 10000L + "'", long60 == 10000L);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(str70);
    }

    @Test
    public void test08437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08437");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        atomikosProperties2.service = "{-1.0=100}";
        long long6 = atomikosProperties2.getDefaultJtaTimeout();
        atomikosProperties2.consoleFileLimit = '#';
        java.lang.Object obj9 = properties1.get((java.lang.Object) atomikosProperties2);
        boolean boolean10 = atomikosProperties2.forceShutdownOnVmExit;
        atomikosProperties2.setOutputDir("");
        long long13 = atomikosProperties2.defaultJtaTimeout;
        int int14 = atomikosProperties2.maxActives;
        java.lang.String str15 = atomikosProperties2.getService();
        boolean boolean16 = atomikosProperties2.isForceShutdownOnVmExit();
        atomikosProperties2.setDefaultJtaTimeout(2L);
        boolean boolean19 = atomikosProperties2.forceShutdownOnVmExit;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10000L + "'", long13 == 10000L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 50 + "'", int14 == 50);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{-1.0=100}" + "'", str15, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test08438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08438");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        boolean boolean7 = atomikosProperties0.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery8 = atomikosProperties0.recovery;
        atomikosProperties0.setLogBaseDir("");
        long long11 = atomikosProperties0.maxTimeout;
        atomikosProperties0.setService("{={-1.0=100}, -1.0=100}");
        atomikosProperties0.setCheckpointInterval((long) (short) 10);
        int int16 = atomikosProperties0.getConsoleFileLimit();
        boolean boolean17 = atomikosProperties0.threadedTwoPhaseCommit;
        java.lang.String str18 = atomikosProperties0.getLogBaseName();
        atomikosProperties0.forceShutdownOnVmExit = true;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(recovery8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 300000L + "'", long11 == 300000L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "tmlog" + "'", str18, "tmlog");
    }

    @Test
    public void test08439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08439");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        boolean boolean7 = atomikosProperties0.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery8 = atomikosProperties0.recovery;
        boolean boolean9 = atomikosProperties0.threadedTwoPhaseCommit;
        int int10 = atomikosProperties0.consoleFileCount;
        java.util.Properties properties11 = new java.util.Properties();
        java.lang.String str12 = properties11.toString();
        java.lang.Object obj14 = properties11.remove((java.lang.Object) (short) 100);
        java.lang.Object obj17 = properties11.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj18 = properties11.clone();
        java.util.Set<java.lang.String> strSet19 = properties11.stringPropertyNames();
        java.util.Properties properties20 = new java.util.Properties(properties11);
        boolean boolean21 = properties20.isEmpty();
        java.util.Properties properties22 = new java.util.Properties(properties20);
        java.util.Properties properties24 = new java.util.Properties();
        java.lang.String str25 = properties24.toString();
        java.lang.Object obj27 = properties24.remove((java.lang.Object) (short) 100);
        java.lang.Object obj30 = properties24.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean32 = properties24.containsKey((java.lang.Object) 0L);
        java.lang.Object obj35 = properties24.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties36 = new java.util.Properties();
        java.lang.String str37 = properties36.toString();
        java.lang.Object obj39 = properties36.remove((java.lang.Object) (short) 100);
        java.lang.Object obj42 = properties36.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj43 = properties36.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration44 = properties36.elements();
        properties24.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties36);
        java.lang.Object obj48 = properties36.setProperty("{={-1.0=100}, -1.0=100}", "hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery49 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery49.retryInterval = (short) 100;
        recovery49.forgetOrphanedLogEntriesDelay = 'a';
        long long54 = recovery49.getDelay();
        int int55 = recovery49.maxRetries;
        recovery49.delay = 1L;
        boolean boolean58 = properties36.contains((java.lang.Object) recovery49);
        properties36.clear();
        atomikosProperties0.set(properties20, "{com.atomikos.icatch.={}, 100=100}", (java.lang.Object) properties36);
        atomikosProperties0.setOutputDir("{{1.0=-1}=hi!}");
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(recovery8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "{}" + "'", str12, "{}");
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "{1.0=-1}");
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "{}" + "'", str25, "{}");
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "{}" + "'", str37, "{}");
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration44);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 10000L + "'", long54 == 10000L);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 5 + "'", int55 == 5);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test08440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08440");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getLogBaseName();
        long long5 = atomikosProperties0.defaultJtaTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel6 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel6);
        atomikosProperties0.setLogBaseDir("");
        atomikosProperties0.forceShutdownOnVmExit = true;
        java.lang.String str12 = atomikosProperties0.getService();
        atomikosProperties0.enableLogging = true;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tmlog" + "'", str4, "tmlog");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 10000L + "'", long5 == 10000L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "{-1.0=100}" + "'", str12, "{-1.0=100}");
    }

    @Test
    public void test08441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08441");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getLogBaseName();
        java.lang.String str5 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.consoleFileName = "";
        long long8 = atomikosProperties0.checkpointInterval;
        long long9 = atomikosProperties0.defaultJtaTimeout;
        atomikosProperties0.setDefaultJtaTimeout((long) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties13 = atomikosProperties12.asProperties();
        atomikosProperties12.service = "{-1.0=100}";
        long long16 = atomikosProperties12.getDefaultJtaTimeout();
        atomikosProperties12.serialJtaTransactions = true;
        atomikosProperties12.maxActives = ' ';
        int int21 = atomikosProperties12.getConsoleFileCount();
        long long22 = atomikosProperties12.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties24 = atomikosProperties23.asProperties();
        atomikosProperties23.service = "{-1.0=100}";
        java.lang.String str27 = atomikosProperties23.getTransactionManagerUniqueName();
        boolean boolean28 = atomikosProperties23.isSerialJtaTransactions();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel29 = atomikosProperties23.getConsoleLogLevel();
        atomikosProperties12.setConsoleLogLevel(atomikosLoggingLevel29);
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel29;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tmlog" + "'", str4, "tmlog");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10000L + "'", long9 == 10000L);
        org.junit.Assert.assertNotNull(properties13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10000L + "'", long16 == 10000L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 10000L + "'", long22 == 10000L);
        org.junit.Assert.assertNotNull(properties24);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel29 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel29.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
    }

    @Test
    public void test08442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08442");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties();
        java.lang.String str2 = properties1.toString();
        boolean boolean3 = properties1.isEmpty();
        java.util.Properties properties4 = new java.util.Properties();
        java.lang.String str5 = properties4.toString();
        java.lang.Object obj7 = properties4.remove((java.lang.Object) (short) 100);
        java.lang.Object obj10 = properties4.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean12 = properties4.containsKey((java.lang.Object) 0L);
        boolean boolean13 = properties1.containsValue((java.lang.Object) 0L);
        boolean boolean16 = properties0.replace((java.lang.Object) 0L, (java.lang.Object) 0.0f, (java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration17 = properties0.elements();
        java.util.Set<java.lang.String> strSet18 = properties0.stringPropertyNames();
        java.util.Properties properties19 = new java.util.Properties();
        java.lang.String str20 = properties19.toString();
        java.lang.Object obj22 = properties19.remove((java.lang.Object) (short) 100);
        java.lang.Object obj25 = properties19.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.util.Properties properties26 = new java.util.Properties();
        java.lang.String str27 = properties26.toString();
        java.lang.Object obj29 = properties26.remove((java.lang.Object) (short) 100);
        java.lang.Object obj32 = properties26.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        int int33 = properties26.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery34 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery34.retryInterval = (short) 100;
        recovery34.forgetOrphanedLogEntriesDelay = 'a';
        long long39 = recovery34.retryInterval;
        recovery34.setForgetOrphanedLogEntriesDelay((long) 0);
        java.lang.Object obj42 = properties19.replace((java.lang.Object) int33, (java.lang.Object) recovery34);
        boolean boolean43 = properties0.containsValue((java.lang.Object) properties19);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties45 = atomikosProperties44.asProperties();
        atomikosProperties44.service = "{-1.0=100}";
        long long48 = atomikosProperties44.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel49 = null;
        atomikosProperties44.setConsoleLogLevel(atomikosLoggingLevel49);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel51 = null;
        atomikosProperties44.setConsoleLogLevel(atomikosLoggingLevel51);
        atomikosProperties44.setLogBaseName("{={-1.0=100}, -1.0=100}");
        atomikosProperties44.setConsoleFileLimit(0);
        boolean boolean57 = atomikosProperties44.isThreadedTwoPhaseCommit();
        boolean boolean58 = atomikosProperties44.forceShutdownOnVmExit;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties59 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties60 = atomikosProperties59.asProperties();
        atomikosProperties59.service = "{-1.0=100}";
        long long63 = atomikosProperties59.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel64 = null;
        atomikosProperties59.setConsoleLogLevel(atomikosLoggingLevel64);
        int int66 = atomikosProperties59.maxActives;
        atomikosProperties59.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery69 = atomikosProperties59.getRecovery();
        atomikosProperties59.outputDir = "hi!";
        atomikosProperties59.setDefaultJtaTimeout((long) 10);
        atomikosProperties59.setCheckpointInterval((long) (short) -1);
        boolean boolean76 = properties0.remove((java.lang.Object) atomikosProperties44, (java.lang.Object) atomikosProperties59);
        java.util.Enumeration<?> wildcardEnumeration77 = properties0.propertyNames();
        java.io.InputStream inputStream78 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.loadFromXML(inputStream78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{}" + "'", str2, "{}");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{}" + "'", str5, "{}");
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objEnumeration17);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{}" + "'", str20, "{}");
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "{}" + "'", str27, "{}");
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 100L + "'", long39 == 100L);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(properties45);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 10000L + "'", long48 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(properties60);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 10000L + "'", long63 == 10000L);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 50 + "'", int66 == 50);
        org.junit.Assert.assertNotNull(recovery69);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(wildcardEnumeration77);
    }

    @Test
    public void test08443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08443");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.enableLogging = false;
        atomikosProperties0.setMaxActives((int) ' ');
        atomikosProperties0.maxActives = (short) -1;
        atomikosProperties0.setService("hi!");
        atomikosProperties0.consoleFileLimit = (byte) 0;
        int int15 = atomikosProperties0.maxActives;
        boolean boolean16 = atomikosProperties0.isForceShutdownOnVmExit();
        long long17 = atomikosProperties0.maxTimeout;
        java.lang.String str18 = atomikosProperties0.consoleFileName;
        atomikosProperties0.defaultJtaTimeout = 50;
        atomikosProperties0.logBaseName = "{-1.0=100}";
        atomikosProperties0.setMaxActives((int) (short) 0);
        atomikosProperties0.setEnableLogging(true);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 300000L + "'", long17 == 300000L);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "tm.out" + "'", str18, "tm.out");
    }

    @Test
    public void test08444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08444");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        atomikosProperties0.setConsoleFileCount((int) (byte) 100);
        java.lang.String str8 = atomikosProperties0.logBaseName;
        atomikosProperties0.setCheckpointInterval((long) 18);
        long long11 = atomikosProperties0.defaultJtaTimeout;
        atomikosProperties0.allowSubTransactions = false;
        atomikosProperties0.serialJtaTransactions = true;
        boolean boolean16 = atomikosProperties0.enableLogging;
        atomikosProperties0.consoleFileCount = (short) 0;
        atomikosProperties0.setConsoleFileLimit((int) (byte) 10);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{-1.0=100}" + "'", str8, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10000L + "'", long11 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test08445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08445");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        atomikosProperties0.setConsoleFileCount((int) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel8 = null;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel8;
        java.lang.String str10 = atomikosProperties0.logBaseDir;
        atomikosProperties0.checkpointInterval = (byte) 0;
        java.lang.String str13 = atomikosProperties0.getTransactionManagerUniqueName();
        java.lang.String str14 = atomikosProperties0.getLogBaseName();
        long long15 = atomikosProperties0.getCheckpointInterval();
        boolean boolean16 = atomikosProperties0.serialJtaTransactions;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "{-1.0=100}" + "'", str14, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test08446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08446");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.String str9 = properties0.toString();
        int int10 = properties0.size();
        java.util.Properties properties11 = new java.util.Properties();
        java.lang.Object obj13 = properties11.remove((java.lang.Object) (-1.0d));
        boolean boolean14 = properties11.isEmpty();
        int int15 = properties11.size();
        java.lang.String str17 = properties11.getProperty("{}");
        java.util.Set<java.lang.Object> objSet18 = properties11.keySet();
        java.util.Enumeration<java.lang.Object> objEnumeration19 = properties11.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties20.setEnableLogging(true);
        atomikosProperties20.consoleFileCount = 0;
        int int25 = atomikosProperties20.getMaxActives();
        java.lang.String str26 = atomikosProperties20.getLogBaseDir();
        java.lang.String str27 = atomikosProperties20.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery28 = atomikosProperties20.getRecovery();
        boolean boolean29 = atomikosProperties20.serialJtaTransactions;
        atomikosProperties20.setCheckpointInterval(10000L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties33 = atomikosProperties32.asProperties();
        atomikosProperties32.service = "{-1.0=100}";
        long long36 = atomikosProperties32.getDefaultJtaTimeout();
        atomikosProperties32.serialJtaTransactions = true;
        atomikosProperties32.maxActives = ' ';
        atomikosProperties32.maxActives = (byte) 10;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery43 = atomikosProperties32.recovery;
        java.lang.String str44 = atomikosProperties32.transactionManagerUniqueName;
        long long45 = atomikosProperties32.getCheckpointInterval();
        boolean boolean46 = properties0.replace((java.lang.Object) properties11, (java.lang.Object) 10000L, (java.lang.Object) atomikosProperties32);
        java.util.Collection<java.lang.Object> objCollection47 = properties11.values();
        int int48 = properties11.size();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{-1.0=100}" + "'", str9, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(objSet18);
        org.junit.Assert.assertNotNull(objEnumeration19);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 50 + "'", int25 == 50);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(recovery28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(properties33);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 10000L + "'", long36 == 10000L);
        org.junit.Assert.assertNotNull(recovery43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 500L + "'", long45 == 500L);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(objCollection47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
    }

    @Test
    public void test08447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08447");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj14 = properties0.setProperty("", "{-1.0=100}");
        java.lang.Object obj15 = properties0.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery16 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery16.retryInterval = (short) 100;
        recovery16.forgetOrphanedLogEntriesDelay = 'a';
        boolean boolean21 = properties0.equals((java.lang.Object) 'a');
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties23 = atomikosProperties22.asProperties();
        atomikosProperties22.service = "{-1.0=100}";
        java.lang.String str26 = atomikosProperties22.getTransactionManagerUniqueName();
        atomikosProperties22.consoleFileName = "hi!";
        atomikosProperties22.setCheckpointInterval((long) 5);
        atomikosProperties22.setConsoleFileCount(0);
        atomikosProperties22.setService("{-1.0=100}");
        atomikosProperties22.setDefaultJtaTimeout((long) 100);
        atomikosProperties22.defaultJtaTimeout = 32;
        atomikosProperties22.setService("{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}");
        long long41 = atomikosProperties22.defaultJtaTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel42 = atomikosProperties22.getConsoleLogLevel();
        boolean boolean43 = properties0.contains((java.lang.Object) atomikosProperties22);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel44 = atomikosProperties22.consoleLogLevel;
        long long45 = atomikosProperties22.getMaxTimeout();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(obj15);
// flaky:         org.junit.Assert.assertEquals(obj15.toString(), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(properties23);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 32L + "'", long41 == 32L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel42 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel42.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel44 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel44.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 300000L + "'", long45 == 300000L);
    }

    @Test
    public void test08448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08448");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties0.setService("tm.out");
        int int5 = atomikosProperties0.consoleFileLimit;
        atomikosProperties0.logBaseDir = "{1.0=-1, -1.0=100}";
        int int8 = atomikosProperties0.getMaxActives();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        long long11 = atomikosProperties0.defaultJtaTimeout;
        atomikosProperties0.setLogBaseName("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir={={-1.0=100}, -1.0=100}, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.output_dir={1.0=-1, -1.0=100}, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={-1.0=100}, com.atomikos.icatch.force_shutdown_on_vm_exit=true, com.atomikos.icatch.default_jta_timeout=10000}");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 50 + "'", int8 == 50);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10000L + "'", long11 == 10000L);
    }

    @Test
    public void test08449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08449");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj14 = properties0.setProperty("", "{-1.0=100}");
        java.lang.String str15 = properties0.toString();
        java.util.Set<java.lang.String> strSet16 = properties0.stringPropertyNames();
        java.util.Properties properties18 = new java.util.Properties();
        java.util.Properties properties19 = new java.util.Properties();
        java.lang.String str20 = properties19.toString();
        boolean boolean21 = properties19.isEmpty();
        java.util.Properties properties22 = new java.util.Properties();
        java.lang.String str23 = properties22.toString();
        java.lang.Object obj25 = properties22.remove((java.lang.Object) (short) 100);
        java.lang.Object obj28 = properties22.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean30 = properties22.containsKey((java.lang.Object) 0L);
        boolean boolean31 = properties19.containsValue((java.lang.Object) 0L);
        boolean boolean34 = properties18.replace((java.lang.Object) 0L, (java.lang.Object) 0.0f, (java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration35 = properties18.elements();
        java.lang.Class<?> wildcardClass36 = objEnumeration35.getClass();
        java.lang.Object obj37 = properties0.replace((java.lang.Object) 500L, (java.lang.Object) objEnumeration35);
        java.util.Properties properties38 = new java.util.Properties();
        java.lang.String str39 = properties38.toString();
        java.lang.Object obj41 = properties38.remove((java.lang.Object) (short) 100);
        java.lang.Object obj44 = properties38.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean46 = properties38.containsKey((java.lang.Object) 0L);
        java.lang.Object obj49 = properties38.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj52 = properties38.setProperty("", "{-1.0=100}");
        java.lang.String str53 = properties38.toString();
        boolean boolean54 = properties0.contains((java.lang.Object) properties38);
        java.util.Set<java.lang.String> strSet55 = properties0.stringPropertyNames();
        java.io.Reader reader56 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.load(reader56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{={-1.0=100}, -1.0=100}" + "'", str15, "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{}" + "'", str20, "{}");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "{}" + "'", str23, "{}");
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(objEnumeration35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "{}" + "'", str39, "{}");
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertNull(obj52);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "{={-1.0=100}, -1.0=100}" + "'", str53, "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(strSet55);
    }

    @Test
    public void test08450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08450");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        atomikosProperties0.setConsoleFileCount((int) (byte) 100);
        atomikosProperties0.setAllowSubTransactions(true);
        atomikosProperties0.setService("tm.out");
        int int12 = atomikosProperties0.consoleFileLimit;
        atomikosProperties0.setLogBaseName("");
        atomikosProperties0.setOutputDir("{1.0=-1}");
        java.lang.String str17 = atomikosProperties0.getOutputDir();
        atomikosProperties0.setAllowSubTransactions(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "{1.0=-1}" + "'", str17, "{1.0=-1}");
    }

    @Test
    public void test08451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08451");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        long long7 = atomikosProperties0.maxTimeout;
        boolean boolean8 = atomikosProperties0.isThreadedTwoPhaseCommit();
        atomikosProperties0.setCheckpointInterval(1L);
        atomikosProperties0.consoleFileName = "{1.0=-1, -1.0=100}";
        atomikosProperties0.enableLogging = true;
        atomikosProperties0.setLogBaseName("");
        atomikosProperties0.setConsoleFileName("{1.0=-1, ={1.0=-1}, -1.0=100}");
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test08452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08452");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.util.Properties properties4 = new java.util.Properties();
        java.lang.String str5 = properties4.toString();
        boolean boolean6 = properties4.isEmpty();
        java.lang.Object obj9 = properties4.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration10 = properties4.elements();
        boolean boolean11 = properties0.containsKey((java.lang.Object) properties4);
        java.util.Enumeration<?> wildcardEnumeration12 = properties0.propertyNames();
        java.util.Properties properties13 = new java.util.Properties();
        java.lang.Object obj15 = properties13.remove((java.lang.Object) (-1.0d));
        boolean boolean16 = properties13.isEmpty();
        java.lang.Object obj19 = properties13.setProperty("hi!", "{}");
        java.util.Set<java.lang.String> strSet20 = properties13.stringPropertyNames();
        java.lang.Object obj21 = properties0.get((java.lang.Object) properties13);
        java.lang.Object obj22 = properties0.clone();
        java.lang.Object obj25 = properties0.setProperty("{{}={}}", "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        java.lang.Class<?> wildcardClass26 = properties0.getClass();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{}" + "'", str5, "{}");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNotNull(objEnumeration10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(wildcardEnumeration12);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "{}");
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test08453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08453");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        atomikosProperties0.setDefaultJtaTimeout((long) (short) 0);
        java.lang.String str9 = atomikosProperties0.getLogBaseName();
        long long10 = atomikosProperties0.getDefaultJtaTimeout();
        java.util.Properties properties11 = atomikosProperties0.asProperties();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tmlog" + "'", str9, "tmlog");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(properties11);
    }

    @Test
    public void test08454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08454");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        java.util.Properties properties7 = new java.util.Properties();
        java.lang.String str8 = properties7.toString();
        properties7.clear();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet10 = properties7.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties12 = atomikosProperties11.asProperties();
        atomikosProperties11.service = "{-1.0=100}";
        long long15 = atomikosProperties11.getDefaultJtaTimeout();
        atomikosProperties11.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties11.setMaxActives(100);
        java.lang.String str20 = atomikosProperties11.logBaseDir;
        atomikosProperties11.consoleFileCount = (short) 0;
        atomikosProperties11.defaultJtaTimeout = 10000L;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel25 = atomikosProperties11.consoleLogLevel;
        java.lang.Object obj26 = properties0.putIfAbsent((java.lang.Object) properties7, (java.lang.Object) atomikosLoggingLevel25);
        boolean boolean28 = properties7.contains((java.lang.Object) 100L);
        properties7.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties31 = atomikosProperties30.asProperties();
        atomikosProperties30.service = "{-1.0=100}";
        java.lang.String str34 = atomikosProperties30.getTransactionManagerUniqueName();
        atomikosProperties30.consoleFileName = "hi!";
        atomikosProperties30.setCheckpointInterval((long) 5);
        atomikosProperties30.setConsoleFileCount(0);
        boolean boolean41 = atomikosProperties30.isThreadedTwoPhaseCommit();
        atomikosProperties30.consoleFileLimit = 5;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties45 = atomikosProperties44.asProperties();
        atomikosProperties44.service = "{-1.0=100}";
        long long48 = atomikosProperties44.getDefaultJtaTimeout();
        atomikosProperties44.enableLogging = false;
        atomikosProperties44.setMaxTimeout((long) (byte) 0);
        atomikosProperties44.setAllowSubTransactions(true);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties55 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties56 = atomikosProperties55.asProperties();
        atomikosProperties55.service = "{-1.0=100}";
        java.lang.String str59 = atomikosProperties55.getTransactionManagerUniqueName();
        boolean boolean60 = atomikosProperties55.isSerialJtaTransactions();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel61 = atomikosProperties55.getConsoleLogLevel();
        atomikosProperties44.consoleLogLevel = atomikosLoggingLevel61;
        atomikosProperties30.consoleLogLevel = atomikosLoggingLevel61;
        boolean boolean64 = atomikosProperties30.serialJtaTransactions;
        long long65 = atomikosProperties30.getCheckpointInterval();
        boolean boolean66 = properties7.containsKey((java.lang.Object) long65);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{}" + "'", str8, "{}");
        org.junit.Assert.assertNotNull(objEntrySet10);
        org.junit.Assert.assertNotNull(properties12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10000L + "'", long15 == 10000L);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel25 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel25.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(properties31);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(properties45);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 10000L + "'", long48 == 10000L);
        org.junit.Assert.assertNotNull(properties56);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel61 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel61.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 5L + "'", long65 == 5L);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test08455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08455");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        int int7 = atomikosProperties0.maxActives;
        atomikosProperties0.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.getRecovery();
        atomikosProperties0.consoleFileName = "{-1.0=100}";
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel13 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel13);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel15 = atomikosProperties0.getConsoleLogLevel();
        int int16 = atomikosProperties0.consoleFileLimit;
        atomikosProperties0.outputDir = "{={-1.0=100}, -1.0=100}";
        int int19 = atomikosProperties0.maxActives;
        atomikosProperties0.service = "{{}={}}";
        atomikosProperties0.service = "{1.0=-1}";
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertNull(atomikosLoggingLevel15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 50 + "'", int19 == 50);
    }

    @Test
    public void test08456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08456");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        long long5 = atomikosProperties0.getMaxTimeout();
        int int6 = atomikosProperties0.consoleFileCount;
        long long7 = atomikosProperties0.getCheckpointInterval();
        atomikosProperties0.serialJtaTransactions = true;
        java.lang.String str10 = atomikosProperties0.logBaseName;
        long long11 = atomikosProperties0.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery12 = atomikosProperties0.recovery;
        atomikosProperties0.setMaxTimeout(500L);
        java.lang.String str15 = atomikosProperties0.getOutputDir();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        atomikosProperties0.setLogBaseName("{hi!={}}");
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "tmlog" + "'", str10, "tmlog");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 500L + "'", long11 == 500L);
        org.junit.Assert.assertNotNull(recovery12);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test08457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08457");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        java.util.Properties properties2 = new java.util.Properties();
        java.lang.Object obj4 = properties2.remove((java.lang.Object) (-1.0d));
        boolean boolean5 = properties2.isEmpty();
        int int6 = properties2.size();
        java.lang.String str8 = properties2.getProperty("{}");
        java.lang.Object obj9 = properties1.remove((java.lang.Object) properties2);
        java.util.Properties properties10 = new java.util.Properties();
        java.util.Properties properties11 = new java.util.Properties();
        java.lang.String str12 = properties11.toString();
        boolean boolean13 = properties11.isEmpty();
        java.util.Properties properties14 = new java.util.Properties();
        java.lang.String str15 = properties14.toString();
        java.lang.Object obj17 = properties14.remove((java.lang.Object) (short) 100);
        java.lang.Object obj20 = properties14.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean22 = properties14.containsKey((java.lang.Object) 0L);
        boolean boolean23 = properties11.containsValue((java.lang.Object) 0L);
        boolean boolean26 = properties10.replace((java.lang.Object) 0L, (java.lang.Object) 0.0f, (java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties10.elements();
        java.lang.String str28 = properties10.toString();
        java.util.Enumeration<java.lang.Object> objEnumeration29 = properties10.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties31 = atomikosProperties30.asProperties();
        boolean boolean32 = properties1.remove((java.lang.Object) properties10, (java.lang.Object) properties31);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties34 = atomikosProperties33.asProperties();
        atomikosProperties33.service = "{-1.0=100}";
        long long37 = atomikosProperties33.getDefaultJtaTimeout();
        long long38 = atomikosProperties33.getMaxTimeout();
        java.lang.String str39 = atomikosProperties33.outputDir;
        atomikosProperties33.consoleFileName = "tm.out";
        long long42 = atomikosProperties33.checkpointInterval;
        atomikosProperties33.setService("{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery45 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery45.retryInterval = (short) 100;
        recovery45.forgetOrphanedLogEntriesDelay = 'a';
        long long50 = recovery45.retryInterval;
        recovery45.forgetOrphanedLogEntriesDelay = 0L;
        long long53 = recovery45.getForgetOrphanedLogEntriesDelay();
        long long54 = recovery45.getForgetOrphanedLogEntriesDelay();
        recovery45.retryInterval = 0L;
        long long57 = recovery45.retryInterval;
        int int58 = recovery45.getMaxRetries();
        long long59 = recovery45.delay;
        boolean boolean60 = properties10.remove((java.lang.Object) "{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}", (java.lang.Object) recovery45);
        java.lang.Object obj61 = properties10.clone();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "{}" + "'", str12, "{}");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{}" + "'", str15, "{}");
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "{}" + "'", str28, "{}");
        org.junit.Assert.assertNotNull(objEnumeration29);
        org.junit.Assert.assertNotNull(properties31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(properties34);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 10000L + "'", long37 == 10000L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 300000L + "'", long38 == 300000L);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 500L + "'", long42 == 500L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 100L + "'", long50 == 100L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 5 + "'", int58 == 5);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 10000L + "'", long59 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(obj61);
        org.junit.Assert.assertEquals(obj61.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj61), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj61), "{}");
    }

    @Test
    public void test08458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08458");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel7 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel7);
        atomikosProperties0.setLogBaseName("{={-1.0=100}, -1.0=100}");
        atomikosProperties0.setConsoleFileLimit(0);
        java.lang.String str13 = atomikosProperties0.getService();
        java.lang.String str14 = atomikosProperties0.getLogBaseName();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel15 = atomikosProperties0.getConsoleLogLevel();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{-1.0=100}" + "'", str13, "{-1.0=100}");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "{={-1.0=100}, -1.0=100}" + "'", str14, "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNull(atomikosLoggingLevel15);
    }

    @Test
    public void test08459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08459");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileName = "hi!";
        atomikosProperties0.serialJtaTransactions = true;
        long long9 = atomikosProperties0.maxTimeout;
        boolean boolean10 = atomikosProperties0.enableLogging;
        java.lang.String str11 = atomikosProperties0.getTransactionManagerUniqueName();
        boolean boolean12 = atomikosProperties0.forceShutdownOnVmExit;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 300000L + "'", long9 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test08460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08460");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        long long7 = atomikosProperties0.maxTimeout;
        atomikosProperties0.setLogBaseDir("{-1.0=100}");
        atomikosProperties0.setEnableLogging(true);
        boolean boolean12 = atomikosProperties0.forceShutdownOnVmExit;
        java.lang.String str13 = atomikosProperties0.service;
        java.lang.String str14 = atomikosProperties0.getService();
        atomikosProperties0.service = "{{-1.0=100}=}";
        java.util.Properties properties17 = new java.util.Properties();
        java.lang.String str18 = properties17.toString();
        java.lang.Object obj20 = properties17.remove((java.lang.Object) (short) 100);
        java.lang.Object obj23 = properties17.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties24.setEnableLogging(true);
        atomikosProperties24.consoleFileCount = 0;
        atomikosProperties24.setSerialJtaTransactions(false);
        java.lang.String str31 = atomikosProperties24.getOutputDir();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties33 = atomikosProperties32.asProperties();
        atomikosProperties32.service = "{-1.0=100}";
        long long36 = atomikosProperties32.getDefaultJtaTimeout();
        atomikosProperties32.serialJtaTransactions = true;
        long long39 = atomikosProperties32.getDefaultJtaTimeout();
        long long40 = atomikosProperties32.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery41 = atomikosProperties32.getRecovery();
        recovery41.setRetryInterval((long) (byte) 0);
        java.lang.Object obj44 = properties17.replace((java.lang.Object) atomikosProperties24, (java.lang.Object) (byte) 0);
        int int45 = properties17.size();
        java.util.Set<java.lang.String> strSet46 = properties17.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties48 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean49 = atomikosProperties48.isSerialJtaTransactions();
        atomikosProperties48.logBaseName = "{-1.0=100}";
        int int52 = atomikosProperties48.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery53 = atomikosProperties48.getRecovery();
        java.lang.String str54 = atomikosProperties48.getOutputDir();
        int int55 = atomikosProperties48.getMaxActives();
        boolean boolean56 = atomikosProperties48.allowSubTransactions;
        int int57 = atomikosProperties48.consoleFileLimit;
        int int58 = atomikosProperties48.consoleFileLimit;
        atomikosProperties48.setCheckpointInterval((long) (byte) 0);
        java.lang.Class<?> wildcardClass61 = atomikosProperties48.getClass();
        atomikosProperties0.set(properties17, "{com.atomikos.icatch.tm.out=hi!}", (java.lang.Object) wildcardClass61);
        java.util.Properties properties63 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties64 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean65 = atomikosProperties64.isSerialJtaTransactions();
        atomikosProperties64.logBaseName = "{-1.0=100}";
        int int68 = atomikosProperties64.maxActives;
        int int69 = atomikosProperties64.consoleFileCount;
        atomikosProperties64.transactionManagerUniqueName = "tm.out";
        atomikosProperties64.consoleFileName = "tm.out";
        atomikosProperties64.allowSubTransactions = false;
        boolean boolean76 = atomikosProperties64.allowSubTransactions;
        java.lang.String str77 = atomikosProperties64.logBaseName;
        atomikosProperties64.maxActives = (byte) 100;
        long long80 = atomikosProperties64.getCheckpointInterval();
        int int81 = atomikosProperties64.consoleFileCount;
        atomikosProperties64.setMaxTimeout(0L);
        boolean boolean84 = properties63.equals((java.lang.Object) atomikosProperties64);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{-1.0=100}" + "'", str13, "{-1.0=100}");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "{-1.0=100}" + "'", str14, "{-1.0=100}");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "{}" + "'", str18, "{}");
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(properties33);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 10000L + "'", long36 == 10000L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 10000L + "'", long39 == 10000L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 500L + "'", long40 == 500L);
        org.junit.Assert.assertNotNull(recovery41);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 50 + "'", int52 == 50);
        org.junit.Assert.assertNotNull(recovery53);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 50 + "'", int55 == 50);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertNotNull(properties63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 50 + "'", int68 == 50);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "{-1.0=100}" + "'", str77, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 500L + "'", long80 == 500L);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test08461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08461");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        int int7 = atomikosProperties0.maxActives;
        atomikosProperties0.setLogBaseDir("{}");
        java.lang.String str10 = atomikosProperties0.logBaseDir;
        atomikosProperties0.logBaseDir = "hi!";
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties14 = atomikosProperties13.asProperties();
        atomikosProperties13.service = "{-1.0=100}";
        long long17 = atomikosProperties13.getDefaultJtaTimeout();
        atomikosProperties13.enableLogging = false;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties20.setEnableLogging(true);
        atomikosProperties20.consoleFileCount = 0;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties26 = atomikosProperties25.asProperties();
        atomikosProperties25.service = "{-1.0=100}";
        long long29 = atomikosProperties25.getDefaultJtaTimeout();
        boolean boolean30 = atomikosProperties25.enableLogging;
        boolean boolean31 = atomikosProperties25.isForceShutdownOnVmExit();
        atomikosProperties25.consoleFileLimit = (byte) -1;
        java.lang.String str34 = atomikosProperties25.getService();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel35 = atomikosProperties25.consoleLogLevel;
        atomikosProperties20.consoleLogLevel = atomikosLoggingLevel35;
        atomikosProperties13.setConsoleLogLevel(atomikosLoggingLevel35);
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel35;
        int int39 = atomikosProperties0.getConsoleFileCount();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "{}" + "'", str10, "{}");
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10000L + "'", long17 == 10000L);
        org.junit.Assert.assertNotNull(properties26);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 10000L + "'", long29 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "{-1.0=100}" + "'", str34, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel35 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel35.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
    }

    @Test
    public void test08462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08462");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj14 = properties0.setProperty("", "{-1.0=100}");
        java.lang.Object obj15 = properties0.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery16 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery16.retryInterval = (short) 100;
        recovery16.forgetOrphanedLogEntriesDelay = 'a';
        boolean boolean21 = properties0.equals((java.lang.Object) 'a');
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties23 = atomikosProperties22.asProperties();
        atomikosProperties22.service = "{-1.0=100}";
        java.lang.String str26 = atomikosProperties22.getTransactionManagerUniqueName();
        atomikosProperties22.consoleFileName = "hi!";
        atomikosProperties22.setCheckpointInterval((long) 5);
        atomikosProperties22.setConsoleFileCount(0);
        atomikosProperties22.setService("{-1.0=100}");
        atomikosProperties22.setDefaultJtaTimeout((long) 100);
        atomikosProperties22.defaultJtaTimeout = 32;
        atomikosProperties22.setService("{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}");
        long long41 = atomikosProperties22.defaultJtaTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel42 = atomikosProperties22.getConsoleLogLevel();
        boolean boolean43 = properties0.contains((java.lang.Object) atomikosProperties22);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel44 = atomikosProperties22.consoleLogLevel;
        atomikosProperties22.setSerialJtaTransactions(true);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(obj15);
// flaky:         org.junit.Assert.assertEquals(obj15.toString(), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(properties23);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 32L + "'", long41 == 32L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel42 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel42.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel44 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel44.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
    }

    @Test
    public void test08463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08463");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setAllowSubTransactions(true);
        java.lang.String str3 = atomikosProperties0.transactionManagerUniqueName;
        int int4 = atomikosProperties0.getConsoleFileLimit();
        java.lang.String str5 = atomikosProperties0.logBaseDir;
        long long6 = atomikosProperties0.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel7 = atomikosProperties0.consoleLogLevel;
        java.lang.String str8 = atomikosProperties0.getConsoleFileName();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel9 = atomikosProperties0.getConsoleLogLevel();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel7 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel7.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "tm.out" + "'", str8, "tm.out");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel9 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel9.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
    }

    @Test
    public void test08464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08464");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.retryInterval = (short) 100;
        recovery0.forgetOrphanedLogEntriesDelay = 'a';
        long long5 = recovery0.retryInterval;
        recovery0.forgetOrphanedLogEntriesDelay = 0L;
        long long8 = recovery0.getForgetOrphanedLogEntriesDelay();
        long long9 = recovery0.getForgetOrphanedLogEntriesDelay();
        recovery0.retryInterval = 0L;
        long long12 = recovery0.retryInterval;
        int int13 = recovery0.maxRetries;
        recovery0.maxRetries = (short) 100;
        long long16 = recovery0.getDelay();
        int int17 = recovery0.getMaxRetries();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 100L + "'", long5 == 100L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10000L + "'", long16 == 10000L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
    }

    @Test
    public void test08465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08465");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setEnableLogging(true);
        atomikosProperties0.consoleFileCount = 0;
        int int5 = atomikosProperties0.getMaxActives();
        java.lang.String str6 = atomikosProperties0.getLogBaseDir();
        java.lang.String str7 = atomikosProperties0.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery8 = atomikosProperties0.getRecovery();
        boolean boolean9 = atomikosProperties0.serialJtaTransactions;
        atomikosProperties0.setCheckpointInterval(10000L);
        boolean boolean12 = atomikosProperties0.threadedTwoPhaseCommit;
        atomikosProperties0.setConsoleFileName("{0={100=100}, {}={}}");
        java.lang.String str15 = atomikosProperties0.logBaseName;
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 50 + "'", int5 == 50);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(recovery8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "tmlog" + "'", str15, "tmlog");
    }

    @Test
    public void test08466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08466");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.remove((java.lang.Object) (-1.0d));
        boolean boolean3 = properties0.isEmpty();
        int int4 = properties0.size();
        properties0.clear();
        java.io.OutputStream outputStream6 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.storeToXML(outputStream6, "tmlog", "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test08467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08467");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        int int7 = atomikosProperties0.maxActives;
        atomikosProperties0.setConsoleFileName("tmlog");
        java.lang.String str10 = atomikosProperties0.logBaseName;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery11 = atomikosProperties0.getRecovery();
        atomikosProperties0.setConsoleFileCount((int) (byte) 100);
        atomikosProperties0.setConsoleFileName("{100=100}");
        boolean boolean16 = atomikosProperties0.threadedTwoPhaseCommit;
        java.lang.String str17 = atomikosProperties0.getService();
        atomikosProperties0.defaultJtaTimeout = 300000L;
        atomikosProperties0.enableLogging = false;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "tmlog" + "'", str10, "tmlog");
        org.junit.Assert.assertNotNull(recovery11);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "{-1.0=100}" + "'", str17, "{-1.0=100}");
    }

    @Test
    public void test08468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08468");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery4 = atomikosProperties0.recovery;
        atomikosProperties0.enableLogging = true;
        int int7 = atomikosProperties0.getConsoleFileCount();
        atomikosProperties0.outputDir = "hi!";
        atomikosProperties0.enableLogging = true;
        atomikosProperties0.logBaseName = "{1.0=-1}";
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNotNull(recovery4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
    }

    @Test
    public void test08469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08469");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties();
        java.lang.String str2 = properties1.toString();
        java.lang.Object obj4 = properties1.remove((java.lang.Object) (short) 100);
        java.lang.Object obj7 = properties1.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        int int8 = properties1.size();
        java.util.Properties properties9 = new java.util.Properties();
        java.lang.Object obj11 = properties9.remove((java.lang.Object) (-1.0d));
        boolean boolean12 = properties9.isEmpty();
        java.lang.Object obj15 = properties9.setProperty("hi!", "{}");
        boolean boolean16 = properties0.remove((java.lang.Object) int8, (java.lang.Object) properties9);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties17.outputDir = "{={-1.0=100}, -1.0=100}";
        boolean boolean20 = properties0.contains((java.lang.Object) atomikosProperties17);
        java.util.Set<java.lang.String> strSet21 = properties0.stringPropertyNames();
        boolean boolean23 = properties0.contains((java.lang.Object) ' ');
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{}" + "'", str2, "{}");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test08470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08470");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.retryInterval = (short) 100;
        recovery0.forgetOrphanedLogEntriesDelay = 'a';
        long long5 = recovery0.retryInterval;
        recovery0.forgetOrphanedLogEntriesDelay = 0L;
        long long8 = recovery0.getForgetOrphanedLogEntriesDelay();
        long long9 = recovery0.getForgetOrphanedLogEntriesDelay();
        recovery0.retryInterval = 0L;
        long long12 = recovery0.retryInterval;
        long long13 = recovery0.getForgetOrphanedLogEntriesDelay();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 100L + "'", long5 == 100L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
    }

    @Test
    public void test08471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08471");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getLogBaseName();
        long long5 = atomikosProperties0.defaultJtaTimeout;
        long long6 = atomikosProperties0.getMaxTimeout();
        boolean boolean7 = atomikosProperties0.forceShutdownOnVmExit;
        java.util.Properties properties8 = atomikosProperties0.asProperties();
        int int9 = atomikosProperties0.maxActives;
        atomikosProperties0.setConsoleFileLimit(19);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tmlog" + "'", str4, "tmlog");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 10000L + "'", long5 == 10000L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 300000L + "'", long6 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
    }

    @Test
    public void test08472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08472");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileName = "hi!";
        atomikosProperties0.setCheckpointInterval((long) 5);
        atomikosProperties0.setService("");
        java.lang.String str11 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.setOutputDir("");
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test08473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08473");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties0.setMaxActives(100);
        java.lang.String str9 = atomikosProperties0.logBaseDir;
        java.lang.String str10 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.checkpointInterval = 100L;
        int int13 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery14 = atomikosProperties0.recovery;
        boolean boolean15 = atomikosProperties0.isThreadedTwoPhaseCommit();
        atomikosProperties0.setAllowSubTransactions(false);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "tm.out" + "'", str10, "tm.out");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertNotNull(recovery14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test08474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08474");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        int int7 = atomikosProperties0.maxActives;
        atomikosProperties0.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.getRecovery();
        atomikosProperties0.consoleFileName = "{-1.0=100}";
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel13 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel13);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel15 = atomikosProperties0.getConsoleLogLevel();
        int int16 = atomikosProperties0.consoleFileLimit;
        atomikosProperties0.setDefaultJtaTimeout((long) 'a');
        java.lang.String str19 = atomikosProperties0.logBaseDir;
        atomikosProperties0.maxActives = 5;
        boolean boolean22 = atomikosProperties0.isAllowSubTransactions();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertNull(atomikosLoggingLevel15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "{}" + "'", str19, "{}");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test08475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08475");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.util.Properties properties4 = new java.util.Properties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        java.util.Enumeration<java.lang.Object> objEnumeration6 = properties5.elements();
        boolean boolean7 = properties0.containsValue((java.lang.Object) objEnumeration6);
        int int8 = properties0.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties9.setAllowSubTransactions(true);
        atomikosProperties9.maxActives = (short) -1;
        atomikosProperties9.setService("tm.out");
        int int16 = atomikosProperties9.maxActives;
        atomikosProperties9.logBaseDir = "tmlog";
        atomikosProperties9.setSerialJtaTransactions(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery21 = atomikosProperties9.getRecovery();
        atomikosProperties9.checkpointInterval = 0L;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties25 = atomikosProperties24.asProperties();
        atomikosProperties24.service = "{-1.0=100}";
        long long28 = atomikosProperties24.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel29 = null;
        atomikosProperties24.setConsoleLogLevel(atomikosLoggingLevel29);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel31 = null;
        atomikosProperties24.setConsoleLogLevel(atomikosLoggingLevel31);
        boolean boolean33 = atomikosProperties24.enableLogging;
        int int34 = atomikosProperties24.getConsoleFileLimit();
        int int35 = atomikosProperties24.consoleFileLimit;
        long long36 = atomikosProperties24.defaultJtaTimeout;
        int int37 = atomikosProperties24.consoleFileCount;
        boolean boolean38 = atomikosProperties24.isSerialJtaTransactions();
        atomikosProperties24.setCheckpointInterval((long) (byte) 100);
        java.util.Properties properties41 = new java.util.Properties();
        java.lang.Object obj44 = properties41.setProperty("{}", "{}");
        java.util.Properties properties45 = new java.util.Properties();
        java.lang.String str46 = properties45.toString();
        java.lang.Object obj48 = properties45.remove((java.lang.Object) (short) 100);
        java.lang.Object obj51 = properties45.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean53 = properties45.containsKey((java.lang.Object) 0L);
        java.lang.Object obj56 = properties45.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties57 = new java.util.Properties();
        java.lang.String str58 = properties57.toString();
        java.lang.Object obj60 = properties57.remove((java.lang.Object) (short) 100);
        java.lang.Object obj63 = properties57.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj64 = properties57.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration65 = properties57.elements();
        properties45.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties57);
        java.lang.Object obj67 = properties41.get((java.lang.Object) properties45);
        boolean boolean68 = properties0.replace((java.lang.Object) 0L, (java.lang.Object) (byte) 100, (java.lang.Object) properties41);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNotNull(objEnumeration6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(recovery21);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 10000L + "'", long28 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 10000L + "'", long36 == 10000L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "{}" + "'", str46, "{}");
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "{}" + "'", str58, "{}");
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertNotNull(obj64);
        org.junit.Assert.assertEquals(obj64.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj64), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj64), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration65);
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test08476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08476");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties12 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration13 = properties12.elements();
        java.util.Properties properties14 = new java.util.Properties();
        java.lang.Object obj17 = properties14.setProperty("{}", "{}");
        java.util.Enumeration<java.lang.Object> objEnumeration18 = properties14.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration19 = properties14.elements();
        java.util.Properties properties20 = new java.util.Properties(properties14);
        java.util.Properties properties21 = new java.util.Properties(properties20);
        java.util.Properties properties22 = new java.util.Properties(properties20);
        java.util.Collection<java.lang.Object> objCollection23 = properties20.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties25 = atomikosProperties24.asProperties();
        atomikosProperties24.service = "{-1.0=100}";
        long long28 = atomikosProperties24.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel29 = null;
        atomikosProperties24.setConsoleLogLevel(atomikosLoggingLevel29);
        atomikosProperties24.setTransactionManagerUniqueName("{-1.0=100}");
        int int33 = atomikosProperties24.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties34 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties34.setAllowSubTransactions(true);
        atomikosProperties34.maxActives = (short) -1;
        atomikosProperties34.setService("tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties41.setAllowSubTransactions(true);
        boolean boolean44 = atomikosProperties41.enableLogging;
        boolean boolean45 = atomikosProperties41.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel46 = atomikosProperties41.consoleLogLevel;
        atomikosProperties34.setConsoleLogLevel(atomikosLoggingLevel46);
        atomikosProperties24.setConsoleLogLevel(atomikosLoggingLevel46);
        java.lang.Object obj49 = properties12.put((java.lang.Object) properties20, (java.lang.Object) atomikosProperties24);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties51 = atomikosProperties50.asProperties();
        atomikosProperties50.service = "{-1.0=100}";
        long long54 = atomikosProperties50.getDefaultJtaTimeout();
        atomikosProperties50.consoleFileLimit = '#';
        int int57 = atomikosProperties50.getConsoleFileCount();
        atomikosProperties50.consoleFileLimit = 5;
        boolean boolean60 = properties12.containsValue((java.lang.Object) atomikosProperties50);
        java.util.Properties properties61 = new java.util.Properties();
        java.lang.Object obj63 = properties61.remove((java.lang.Object) (-1.0d));
        boolean boolean65 = properties61.contains((java.lang.Object) "{-1.0=100}");
        java.lang.Object obj68 = properties61.setProperty("{={-1.0=100}, -1.0=100}", "");
        java.lang.String str69 = properties61.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties70 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties70.setEnableLogging(true);
        atomikosProperties70.consoleFileCount = 0;
        int int75 = atomikosProperties70.getMaxActives();
        java.lang.String str76 = atomikosProperties70.getLogBaseDir();
        java.lang.String str77 = atomikosProperties70.service;
        atomikosProperties70.transactionManagerUniqueName = "tmlog";
        int int80 = atomikosProperties70.maxActives;
        atomikosProperties70.logBaseName = "{1.0=-1}";
        atomikosProperties70.allowSubTransactions = true;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties85 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties86 = atomikosProperties85.asProperties();
        atomikosProperties85.service = "{-1.0=100}";
        long long89 = atomikosProperties85.getDefaultJtaTimeout();
        atomikosProperties85.setTransactionManagerUniqueName("{}");
        atomikosProperties85.consoleFileName = "hi!";
        int int94 = atomikosProperties85.getConsoleFileLimit();
        java.lang.Object obj95 = properties61.put((java.lang.Object) true, (java.lang.Object) int94);
        properties12.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties61);
        java.lang.String str99 = properties12.getProperty("{com.atomikos.icatch.console_file_name=hi!, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.output_dir=tm.out, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={-1.0=100}, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}", "{{}={}}");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNotNull(objEnumeration13);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(objEnumeration18);
        org.junit.Assert.assertNotNull(objEnumeration19);
        org.junit.Assert.assertNotNull(objCollection23);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 10000L + "'", long28 == 10000L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 50 + "'", int33 == 50);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel46 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel46.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertNotNull(properties51);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 10000L + "'", long54 == 10000L);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(obj68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "{{={-1.0=100}, -1.0=100}=}" + "'", str69, "{{={-1.0=100}, -1.0=100}=}");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 50 + "'", int75 == 50);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 50 + "'", int80 == 50);
        org.junit.Assert.assertNotNull(properties86);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 10000L + "'", long89 == 10000L);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-1) + "'", int94 == (-1));
        org.junit.Assert.assertNull(obj95);
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "{{}={}}" + "'", str99, "{{}={}}");
    }

    @Test
    public void test08477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08477");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setAllowSubTransactions(true);
        boolean boolean3 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.setLogBaseDir("hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties7 = atomikosProperties6.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties9 = atomikosProperties8.asProperties();
        atomikosProperties8.service = "{-1.0=100}";
        long long12 = atomikosProperties8.getDefaultJtaTimeout();
        atomikosProperties8.consoleFileLimit = '#';
        java.lang.Object obj15 = properties7.get((java.lang.Object) atomikosProperties8);
        boolean boolean16 = atomikosProperties8.isForceShutdownOnVmExit();
        atomikosProperties8.consoleFileName = "";
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel19 = atomikosProperties8.getConsoleLogLevel();
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel19;
        boolean boolean21 = atomikosProperties0.serialJtaTransactions;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10000L + "'", long12 == 10000L);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel19 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel19.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test08478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08478");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.retryInterval = (short) 100;
        recovery0.forgetOrphanedLogEntriesDelay = 'a';
        long long5 = recovery0.retryInterval;
        recovery0.forgetOrphanedLogEntriesDelay = 0L;
        long long8 = recovery0.getForgetOrphanedLogEntriesDelay();
        long long9 = recovery0.getForgetOrphanedLogEntriesDelay();
        long long10 = recovery0.retryInterval;
        recovery0.retryInterval = 0;
        int int13 = recovery0.maxRetries;
        recovery0.setMaxRetries(35);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 100L + "'", long5 == 100L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 100L + "'", long10 == 100L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
    }

    @Test
    public void test08479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08479");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj14 = properties0.setProperty("", "{-1.0=100}");
        java.lang.Object obj15 = properties0.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery16 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery16.retryInterval = (short) 100;
        recovery16.forgetOrphanedLogEntriesDelay = 'a';
        boolean boolean21 = properties0.equals((java.lang.Object) 'a');
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery22 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long23 = recovery22.getRetryInterval();
        long long24 = recovery22.getDelay();
        long long25 = recovery22.getDelay();
        recovery22.retryInterval = 100L;
        boolean boolean28 = properties0.contains((java.lang.Object) recovery22);
        java.lang.String str29 = properties0.toString();
        java.util.Set<java.lang.String> strSet30 = properties0.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties32 = atomikosProperties31.asProperties();
        atomikosProperties31.service = "{-1.0=100}";
        long long35 = atomikosProperties31.getDefaultJtaTimeout();
        atomikosProperties31.setMaxActives(0);
        boolean boolean38 = atomikosProperties31.threadedTwoPhaseCommit;
        boolean boolean39 = atomikosProperties31.allowSubTransactions;
        atomikosProperties31.logBaseDir = "{}";
        atomikosProperties31.service = "{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}";
        java.lang.String str44 = atomikosProperties31.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties45 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties46 = atomikosProperties45.asProperties();
        atomikosProperties45.service = "{-1.0=100}";
        long long49 = atomikosProperties45.getDefaultJtaTimeout();
        atomikosProperties45.serialJtaTransactions = true;
        long long52 = atomikosProperties45.getDefaultJtaTimeout();
        long long53 = atomikosProperties45.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery54 = atomikosProperties45.getRecovery();
        long long55 = atomikosProperties45.getCheckpointInterval();
        atomikosProperties45.setOutputDir("{1.0=-1, -1.0=100}");
        boolean boolean58 = atomikosProperties45.enableLogging;
        boolean boolean59 = properties0.remove((java.lang.Object) str44, (java.lang.Object) atomikosProperties45);
        java.util.Set<java.lang.String> strSet60 = properties0.stringPropertyNames();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(obj15);
// flaky:         org.junit.Assert.assertEquals(obj15.toString(), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 10000L + "'", long23 == 10000L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 10000L + "'", long24 == 10000L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 10000L + "'", long25 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "{={-1.0=100}, -1.0=100}" + "'", str29, "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertNotNull(properties32);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 10000L + "'", long35 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}" + "'", str44, "{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}");
        org.junit.Assert.assertNotNull(properties46);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 10000L + "'", long49 == 10000L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 10000L + "'", long52 == 10000L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 500L + "'", long53 == 500L);
        org.junit.Assert.assertNotNull(recovery54);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 500L + "'", long55 == 500L);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(strSet60);
    }

    @Test
    public void test08480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08480");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        int int7 = atomikosProperties0.maxActives;
        atomikosProperties0.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.getRecovery();
        atomikosProperties0.forceShutdownOnVmExit = false;
        long long13 = atomikosProperties0.checkpointInterval;
        int int14 = atomikosProperties0.getConsoleFileLimit();
        atomikosProperties0.setAllowSubTransactions(true);
        atomikosProperties0.forceShutdownOnVmExit = true;
        atomikosProperties0.forceShutdownOnVmExit = false;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 500L + "'", long13 == 500L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
    }

    @Test
    public void test08481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08481");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj7 = properties0.clone();
        java.util.Set<java.lang.String> strSet8 = properties0.stringPropertyNames();
        java.util.Properties properties9 = new java.util.Properties();
        java.lang.String str10 = properties9.toString();
        java.lang.Object obj12 = properties9.remove((java.lang.Object) (short) 100);
        java.lang.Object obj15 = properties9.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean17 = properties9.containsKey((java.lang.Object) 0L);
        java.lang.Object obj20 = properties9.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.String str22 = properties21.toString();
        java.lang.Object obj24 = properties21.remove((java.lang.Object) (short) 100);
        java.lang.Object obj27 = properties21.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj28 = properties21.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration29 = properties21.elements();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties21);
        java.util.Properties properties31 = new java.util.Properties();
        java.lang.String str32 = properties31.toString();
        java.lang.Object obj34 = properties31.remove((java.lang.Object) (short) 100);
        java.lang.Object obj37 = properties31.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean39 = properties31.containsKey((java.lang.Object) 0L);
        java.lang.Object obj42 = properties31.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties43 = new java.util.Properties();
        java.lang.String str44 = properties43.toString();
        java.lang.Object obj46 = properties43.remove((java.lang.Object) (short) 100);
        java.lang.Object obj49 = properties43.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj50 = properties43.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration51 = properties43.elements();
        properties31.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties43);
        java.lang.Object obj53 = properties0.putIfAbsent((java.lang.Object) properties9, (java.lang.Object) properties43);
        java.util.Properties properties54 = new java.util.Properties();
        java.lang.String str55 = properties54.toString();
        java.lang.Object obj57 = properties54.remove((java.lang.Object) (short) 100);
        java.lang.Object obj60 = properties54.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean62 = properties54.containsKey((java.lang.Object) 0L);
        java.lang.Object obj65 = properties54.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj68 = properties54.setProperty("", "{-1.0=100}");
        java.util.Enumeration<java.lang.Object> objEnumeration69 = properties54.keys();
        boolean boolean70 = properties43.contains((java.lang.Object) properties54);
        java.util.Set<java.lang.String> strSet71 = properties54.stringPropertyNames();
        properties54.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery73 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery73.retryInterval = (short) 100;
        recovery73.forgetOrphanedLogEntriesDelay = 'a';
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties78 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties78.setAllowSubTransactions(true);
        atomikosProperties78.maxActives = (short) -1;
        atomikosProperties78.setService("tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties85 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties85.setAllowSubTransactions(true);
        boolean boolean88 = atomikosProperties85.enableLogging;
        boolean boolean89 = atomikosProperties85.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel90 = atomikosProperties85.consoleLogLevel;
        atomikosProperties78.setConsoleLogLevel(atomikosLoggingLevel90);
        atomikosProperties78.setThreadedTwoPhaseCommit(true);
        java.lang.Object obj94 = properties54.put((java.lang.Object) recovery73, (java.lang.Object) atomikosProperties78);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel95 = atomikosProperties78.getConsoleLogLevel();
        boolean boolean96 = atomikosProperties78.forceShutdownOnVmExit;
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{1.0=-1}");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "{}" + "'", str10, "{}");
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{}" + "'", str22, "{}");
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "{}" + "'", str32, "{}");
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "{}" + "'", str44, "{}");
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertEquals(obj50.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj50), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj50), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration51);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "{}" + "'", str55, "{}");
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertNull(obj68);
        org.junit.Assert.assertNotNull(objEnumeration69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(strSet71);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel90 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel90.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj94);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel95 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel95.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test08482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08482");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Enumeration<?> wildcardEnumeration1 = properties0.propertyNames();
        java.util.Set<java.lang.String> strSet2 = properties0.stringPropertyNames();
        java.lang.String str4 = properties0.getProperty("{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}");
        org.junit.Assert.assertNotNull(wildcardEnumeration1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test08483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08483");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setEnableLogging(true);
        atomikosProperties0.consoleFileCount = 0;
        int int5 = atomikosProperties0.getMaxActives();
        java.lang.String str6 = atomikosProperties0.getLogBaseDir();
        java.lang.String str7 = atomikosProperties0.service;
        atomikosProperties0.transactionManagerUniqueName = "tmlog";
        int int10 = atomikosProperties0.maxActives;
        atomikosProperties0.logBaseName = "{1.0=-1}";
        atomikosProperties0.setThreadedTwoPhaseCommit(false);
        java.lang.String str15 = atomikosProperties0.outputDir;
        atomikosProperties0.setAllowSubTransactions(true);
        atomikosProperties0.logBaseName = "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir={={-1.0=100}, -1.0=100}, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.output_dir={1.0=-1, -1.0=100}, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={-1.0=100}, com.atomikos.icatch.force_shutdown_on_vm_exit=true, com.atomikos.icatch.default_jta_timeout=10000}";
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 50 + "'", int5 == 50);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 50 + "'", int10 == 50);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test08484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08484");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        properties0.clear();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet3 = properties0.entrySet();
        java.util.Properties properties4 = new java.util.Properties();
        java.lang.String str5 = properties4.toString();
        java.lang.Object obj7 = properties4.remove((java.lang.Object) (short) 100);
        java.lang.Object obj10 = properties4.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery11 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery11.retryInterval = (short) 100;
        recovery11.delay = (-1L);
        long long16 = recovery11.delay;
        boolean boolean17 = properties4.equals((java.lang.Object) long16);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery18 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery18.retryInterval = (short) 100;
        recovery18.forgetOrphanedLogEntriesDelay = 'a';
        long long23 = recovery18.retryInterval;
        recovery18.forgetOrphanedLogEntriesDelay = 0L;
        long long26 = recovery18.getForgetOrphanedLogEntriesDelay();
        recovery18.setRetryInterval((long) 0);
        boolean boolean29 = properties4.contains((java.lang.Object) recovery18);
        recovery18.retryInterval = 0L;
        boolean boolean32 = properties0.containsKey((java.lang.Object) recovery18);
        recovery18.setMaxRetries(0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNotNull(objEntrySet3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{}" + "'", str5, "{}");
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 100L + "'", long23 == 100L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test08485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08485");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        properties0.clear();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet3 = properties0.entrySet();
        java.lang.Object obj6 = properties0.setProperty("{1.0=-1, -1.0=100}", "{1.0=-1, -1.0=100}");
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet7 = properties0.entrySet();
        properties0.clear();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNotNull(objEntrySet3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(objEntrySet7);
    }

    @Test
    public void test08486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08486");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        atomikosProperties0.setConsoleFileCount((int) (byte) 100);
        java.lang.String str8 = atomikosProperties0.logBaseName;
        atomikosProperties0.setCheckpointInterval((long) 18);
        atomikosProperties0.checkpointInterval = 100;
        atomikosProperties0.enableLogging = false;
        java.lang.String str15 = atomikosProperties0.service;
        atomikosProperties0.forceShutdownOnVmExit = true;
        atomikosProperties0.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery20 = atomikosProperties0.getRecovery();
        atomikosProperties0.enableLogging = true;
        atomikosProperties0.defaultJtaTimeout = (-1L);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{-1.0=100}" + "'", str8, "{-1.0=100}");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(recovery20);
    }

    @Test
    public void test08487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08487");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.util.Properties properties4 = new java.util.Properties();
        java.lang.String str5 = properties4.toString();
        boolean boolean6 = properties4.isEmpty();
        java.lang.Object obj9 = properties4.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration10 = properties4.elements();
        boolean boolean11 = properties0.containsKey((java.lang.Object) properties4);
        java.util.Set<java.lang.String> strSet12 = properties0.stringPropertyNames();
        java.lang.Object obj15 = properties0.setProperty("{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}", "hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties17 = atomikosProperties16.asProperties();
        atomikosProperties16.service = "{-1.0=100}";
        long long20 = atomikosProperties16.getDefaultJtaTimeout();
        atomikosProperties16.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties16.setMaxActives(100);
        java.lang.String str25 = atomikosProperties16.logBaseDir;
        java.lang.String str26 = atomikosProperties16.getConsoleFileName();
        atomikosProperties16.checkpointInterval = 100L;
        int int29 = atomikosProperties16.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery30 = atomikosProperties16.recovery;
        boolean boolean31 = properties0.contains((java.lang.Object) atomikosProperties16);
        java.util.Enumeration<java.lang.Object> objEnumeration32 = properties0.keys();
        java.io.InputStream inputStream33 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.loadFromXML(inputStream33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{}" + "'", str5, "{}");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNotNull(objEnumeration10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNotNull(properties17);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10000L + "'", long20 == 10000L);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "tm.out" + "'", str26, "tm.out");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 100 + "'", int29 == 100);
        org.junit.Assert.assertNotNull(recovery30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(objEnumeration32);
    }

    @Test
    public void test08488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08488");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setTransactionManagerUniqueName("{}");
        java.util.Properties properties7 = new java.util.Properties();
        java.lang.String str8 = properties7.toString();
        java.lang.Object obj10 = properties7.remove((java.lang.Object) (short) 100);
        java.util.Properties properties11 = new java.util.Properties();
        java.lang.String str12 = properties11.toString();
        boolean boolean13 = properties11.isEmpty();
        java.lang.Object obj16 = properties11.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration17 = properties11.elements();
        boolean boolean18 = properties7.containsKey((java.lang.Object) properties11);
        java.util.Set<java.lang.String> strSet19 = properties7.stringPropertyNames();
        java.lang.Object obj20 = properties7.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties23 = atomikosProperties22.asProperties();
        atomikosProperties22.service = "{-1.0=100}";
        long long26 = atomikosProperties22.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel27 = null;
        atomikosProperties22.setConsoleLogLevel(atomikosLoggingLevel27);
        int int29 = atomikosProperties22.maxActives;
        atomikosProperties22.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery32 = atomikosProperties22.getRecovery();
        atomikosProperties22.consoleFileName = "{-1.0=100}";
        atomikosProperties22.setSerialJtaTransactions(false);
        atomikosProperties22.consoleFileName = "{={-1.0=100}, -1.0=100}";
        boolean boolean39 = atomikosProperties22.isEnableLogging();
        atomikosProperties0.set(properties7, "{{={-1.0=100}, -1.0=100}=}", (java.lang.Object) boolean39);
        java.util.Enumeration<?> wildcardEnumeration41 = properties7.propertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery42 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery42.retryInterval = (short) 100;
        recovery42.forgetOrphanedLogEntriesDelay = 'a';
        long long47 = recovery42.retryInterval;
        recovery42.forgetOrphanedLogEntriesDelay = 0L;
        long long50 = recovery42.getForgetOrphanedLogEntriesDelay();
        recovery42.setRetryInterval((long) 0);
        long long53 = recovery42.getForgetOrphanedLogEntriesDelay();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties54 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean55 = atomikosProperties54.isSerialJtaTransactions();
        atomikosProperties54.logBaseName = "{-1.0=100}";
        int int58 = atomikosProperties54.maxActives;
        atomikosProperties54.consoleFileLimit = 32;
        java.lang.String str61 = atomikosProperties54.getConsoleFileName();
        java.lang.Object obj62 = properties7.putIfAbsent((java.lang.Object) recovery42, (java.lang.Object) atomikosProperties54);
        recovery42.delay = (byte) 0;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{}" + "'", str8, "{}");
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "{}" + "'", str12, "{}");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(objEnumeration17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{}");
        org.junit.Assert.assertNotNull(properties23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 10000L + "'", long26 == 10000L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 50 + "'", int29 == 50);
        org.junit.Assert.assertNotNull(recovery32);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(wildcardEnumeration41);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 100L + "'", long47 == 100L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 50 + "'", int58 == 50);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "tm.out" + "'", str61, "tm.out");
        org.junit.Assert.assertNull(obj62);
    }

    @Test
    public void test08489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08489");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setEnableLogging(true);
        atomikosProperties0.consoleFileCount = 0;
        atomikosProperties0.setSerialJtaTransactions(false);
        atomikosProperties0.consoleFileCount = (short) 1;
        java.lang.String str9 = atomikosProperties0.outputDir;
        boolean boolean10 = atomikosProperties0.serialJtaTransactions;
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test08490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08490");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel7 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel7);
        boolean boolean9 = atomikosProperties0.enableLogging;
        int int10 = atomikosProperties0.getConsoleFileLimit();
        atomikosProperties0.serialJtaTransactions = false;
        atomikosProperties0.setLogBaseName("");
        atomikosProperties0.checkpointInterval = (byte) -1;
        long long17 = atomikosProperties0.defaultJtaTimeout;
        atomikosProperties0.setService("{1.0=-1}");
        atomikosProperties0.setConsoleFileLimit(50);
        atomikosProperties0.checkpointInterval = 5;
        java.lang.String str24 = atomikosProperties0.getLogBaseName();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10000L + "'", long17 == 10000L);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
    }

    @Test
    public void test08491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08491");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getLogBaseName();
        long long5 = atomikosProperties0.defaultJtaTimeout;
        long long6 = atomikosProperties0.getMaxTimeout();
        boolean boolean7 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.setService("{-1.0=100}");
        atomikosProperties0.setOutputDir("{}");
        atomikosProperties0.allowSubTransactions = true;
        java.util.Properties properties14 = atomikosProperties0.asProperties();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tmlog" + "'", str4, "tmlog");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 10000L + "'", long5 == 10000L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 300000L + "'", long6 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(properties14);
    }

    @Test
    public void test08492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08492");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        boolean boolean7 = atomikosProperties0.isAllowSubTransactions();
        boolean boolean8 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.allowSubTransactions = false;
        atomikosProperties0.threadedTwoPhaseCommit = true;
        atomikosProperties0.setLogBaseName("tm.out");
        long long15 = atomikosProperties0.defaultJtaTimeout;
        int int16 = atomikosProperties0.consoleFileLimit;
        java.lang.String str17 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.service = "{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}";
        int int20 = atomikosProperties0.getConsoleFileCount();
        boolean boolean21 = atomikosProperties0.isForceShutdownOnVmExit();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10000L + "'", long15 == 10000L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test08493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08493");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.util.Properties properties7 = new java.util.Properties();
        java.lang.String str8 = properties7.toString();
        java.lang.Object obj10 = properties7.remove((java.lang.Object) (short) 100);
        java.lang.Object obj13 = properties7.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        int int14 = properties7.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery15 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery15.retryInterval = (short) 100;
        recovery15.forgetOrphanedLogEntriesDelay = 'a';
        long long20 = recovery15.retryInterval;
        recovery15.setForgetOrphanedLogEntriesDelay((long) 0);
        java.lang.Object obj23 = properties0.replace((java.lang.Object) int14, (java.lang.Object) recovery15);
        recovery15.forgetOrphanedLogEntriesDelay = 300000L;
        recovery15.setMaxRetries((int) (short) 0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{}" + "'", str8, "{}");
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 100L + "'", long20 == 100L);
        org.junit.Assert.assertNull(obj23);
    }

    @Test
    public void test08494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08494");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.retryInterval = (short) 100;
        recovery0.forgetOrphanedLogEntriesDelay = 'a';
        long long5 = recovery0.retryInterval;
        recovery0.forgetOrphanedLogEntriesDelay = 0L;
        long long8 = recovery0.getForgetOrphanedLogEntriesDelay();
        long long9 = recovery0.getForgetOrphanedLogEntriesDelay();
        recovery0.retryInterval = 0L;
        long long12 = recovery0.retryInterval;
        int int13 = recovery0.maxRetries;
        recovery0.maxRetries = (short) 100;
        recovery0.retryInterval = 1L;
        long long18 = recovery0.getForgetOrphanedLogEntriesDelay();
        recovery0.setDelay(5L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 100L + "'", long5 == 100L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
    }

    @Test
    public void test08495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08495");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj7 = properties0.clone();
        java.util.Properties properties8 = new java.util.Properties();
        java.lang.Object obj10 = properties8.remove((java.lang.Object) (-1.0d));
        boolean boolean11 = properties8.isEmpty();
        int int12 = properties8.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery13 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery13.retryInterval = (short) 100;
        recovery13.forgetOrphanedLogEntriesDelay = 'a';
        java.util.Properties properties18 = new java.util.Properties();
        java.lang.Object obj20 = properties18.remove((java.lang.Object) (-1.0d));
        boolean boolean21 = properties18.isEmpty();
        int int22 = properties18.size();
        java.lang.String str24 = properties18.getProperty("{}");
        boolean boolean25 = properties8.remove((java.lang.Object) recovery13, (java.lang.Object) properties18);
        boolean boolean26 = properties0.containsValue((java.lang.Object) properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties27.setAllowSubTransactions(true);
        boolean boolean30 = atomikosProperties27.enableLogging;
        atomikosProperties27.consoleFileLimit = (byte) 100;
        java.util.Properties properties33 = new java.util.Properties();
        java.lang.String str34 = properties33.toString();
        java.util.Properties properties35 = new java.util.Properties(properties33);
        java.util.Properties properties37 = new java.util.Properties();
        java.lang.String str38 = properties37.toString();
        java.lang.Object obj40 = properties37.remove((java.lang.Object) (short) 100);
        java.lang.Object obj43 = properties37.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean45 = properties37.containsKey((java.lang.Object) 0L);
        java.lang.Object obj48 = properties37.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties49 = new java.util.Properties(properties37);
        java.util.Enumeration<java.lang.Object> objEnumeration50 = properties49.elements();
        atomikosProperties27.set(properties35, "{={-1.0=100}, -1.0=100}", (java.lang.Object) properties49);
        atomikosProperties27.setOutputDir("hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery54 = atomikosProperties27.getRecovery();
        atomikosProperties27.setOutputDir("{={-1.0=100}, -1.0=100}");
        boolean boolean57 = atomikosProperties27.isForceShutdownOnVmExit();
        atomikosProperties27.setOutputDir("hi!");
        java.lang.String str60 = atomikosProperties27.logBaseDir;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery61 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery61.retryInterval = (short) 100;
        recovery61.delay = (-1L);
        long long66 = recovery61.delay;
        recovery61.delay = (short) 1;
        long long69 = recovery61.getRetryInterval();
        long long70 = recovery61.getForgetOrphanedLogEntriesDelay();
        recovery61.setMaxRetries(10);
        int int73 = recovery61.maxRetries;
        recovery61.setForgetOrphanedLogEntriesDelay((long) 32);
        long long76 = recovery61.delay;
        int int77 = recovery61.getMaxRetries();
        java.lang.Object obj78 = properties0.put((java.lang.Object) atomikosProperties27, (java.lang.Object) recovery61);
        java.util.Properties properties79 = new java.util.Properties(properties0);
        java.util.Set<java.lang.String> strSet80 = properties0.stringPropertyNames();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{1.0=-1}");
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "{}" + "'", str34, "{}");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "{}" + "'", str38, "{}");
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertNotNull(objEnumeration50);
        org.junit.Assert.assertNotNull(recovery54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + (-1L) + "'", long66 == (-1L));
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 100L + "'", long69 == 100L);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 86400000L + "'", long70 == 86400000L);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 10 + "'", int73 == 10);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 1L + "'", long76 == 1L);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 10 + "'", int77 == 10);
        org.junit.Assert.assertNull(obj78);
        org.junit.Assert.assertNotNull(strSet80);
    }

    @Test
    public void test08496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08496");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.util.Properties properties3 = new java.util.Properties();
        java.lang.String str4 = properties3.toString();
        java.lang.Object obj6 = properties3.remove((java.lang.Object) (short) 100);
        java.lang.Object obj9 = properties3.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean11 = properties3.containsKey((java.lang.Object) 0L);
        java.lang.Object obj14 = properties3.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj17 = properties3.setProperty("", "{-1.0=100}");
        java.util.Enumeration<java.lang.Object> objEnumeration18 = properties3.keys();
        java.util.Properties properties19 = new java.util.Properties();
        java.lang.String str20 = properties19.toString();
        boolean boolean21 = properties19.isEmpty();
        java.lang.Object obj24 = properties19.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration25 = properties19.elements();
        java.lang.Object obj26 = properties2.replace((java.lang.Object) objEnumeration18, (java.lang.Object) properties19);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties2.keys();
        java.lang.String str28 = properties2.toString();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet29 = properties2.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties31 = atomikosProperties30.asProperties();
        atomikosProperties30.service = "{-1.0=100}";
        long long34 = atomikosProperties30.getDefaultJtaTimeout();
        atomikosProperties30.setTransactionManagerUniqueName("{}");
        atomikosProperties30.consoleFileName = "hi!";
        int int39 = atomikosProperties30.getConsoleFileCount();
        boolean boolean40 = atomikosProperties30.isThreadedTwoPhaseCommit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel41 = atomikosProperties30.consoleLogLevel;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties43 = atomikosProperties42.asProperties();
        atomikosProperties42.service = "{-1.0=100}";
        long long46 = atomikosProperties42.getDefaultJtaTimeout();
        atomikosProperties42.enableLogging = false;
        atomikosProperties42.setMaxActives((int) ' ');
        java.util.Properties properties51 = atomikosProperties42.asProperties();
        java.lang.String str52 = atomikosProperties42.logBaseDir;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery53 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery53.retryInterval = (short) 100;
        recovery53.delay = (-1L);
        long long58 = recovery53.delay;
        recovery53.delay = (short) 1;
        boolean boolean61 = properties2.replace((java.lang.Object) atomikosProperties30, (java.lang.Object) atomikosProperties42, (java.lang.Object) recovery53);
        atomikosProperties30.setDefaultJtaTimeout((long) (byte) 1);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{}" + "'", str4, "{}");
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(objEnumeration18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{}" + "'", str20, "{}");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(objEnumeration25);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "{}" + "'", str28, "{}");
        org.junit.Assert.assertNotNull(objEntrySet29);
        org.junit.Assert.assertNotNull(properties31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 10000L + "'", long34 == 10000L);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel41 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel41.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(properties43);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 10000L + "'", long46 == 10000L);
        org.junit.Assert.assertNotNull(properties51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-1L) + "'", long58 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test08497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08497");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileName = "hi!";
        atomikosProperties0.setCheckpointInterval((long) 5);
        atomikosProperties0.setService("");
        java.lang.String str11 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.enableLogging = true;
        atomikosProperties0.logBaseName = "{1.0=-1, ={1.0=-1}, -1.0=100}";
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test08498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08498");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setAllowSubTransactions(true);
        atomikosProperties0.maxActives = (short) -1;
        atomikosProperties0.setService("tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties7.setAllowSubTransactions(true);
        boolean boolean10 = atomikosProperties7.enableLogging;
        boolean boolean11 = atomikosProperties7.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel12 = atomikosProperties7.consoleLogLevel;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel12);
        atomikosProperties0.maxActives = 0;
        java.util.Properties properties16 = new java.util.Properties();
        java.lang.String str17 = properties16.toString();
        java.lang.Object obj19 = properties16.remove((java.lang.Object) (short) 100);
        java.lang.Object obj22 = properties16.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj23 = properties16.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration24 = properties16.elements();
        java.util.Properties properties25 = new java.util.Properties();
        java.lang.String str26 = properties25.toString();
        java.lang.Object obj28 = properties25.remove((java.lang.Object) (short) 100);
        java.lang.Object obj31 = properties25.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj32 = properties25.clone();
        java.util.Set<java.lang.String> strSet33 = properties25.stringPropertyNames();
        java.util.Properties properties34 = new java.util.Properties(properties25);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties36 = atomikosProperties35.asProperties();
        atomikosProperties35.service = "{-1.0=100}";
        java.lang.String str39 = atomikosProperties35.getTransactionManagerUniqueName();
        boolean boolean40 = atomikosProperties35.isSerialJtaTransactions();
        int int41 = atomikosProperties35.getConsoleFileLimit();
        java.util.Properties properties42 = new java.util.Properties();
        java.lang.String str43 = properties42.toString();
        java.lang.Object obj45 = properties42.remove((java.lang.Object) (short) 100);
        java.lang.Object obj48 = properties42.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean50 = properties42.containsKey((java.lang.Object) 0L);
        java.lang.Object obj53 = properties42.replace((java.lang.Object) false, (java.lang.Object) ' ');
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties54 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties54.setEnableLogging(true);
        atomikosProperties54.setConsoleFileLimit((int) (short) 0);
        boolean boolean59 = properties42.contains((java.lang.Object) atomikosProperties54);
        java.lang.Object obj60 = properties34.putIfAbsent((java.lang.Object) int41, (java.lang.Object) atomikosProperties54);
        java.util.Properties properties61 = new java.util.Properties(properties34);
        properties16.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties34);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties64 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties65 = atomikosProperties64.asProperties();
        atomikosProperties64.service = "{-1.0=100}";
        long long68 = atomikosProperties64.getDefaultJtaTimeout();
        atomikosProperties64.setThreadedTwoPhaseCommit(true);
        boolean boolean71 = atomikosProperties64.isAllowSubTransactions();
        boolean boolean72 = atomikosProperties64.isEnableLogging();
        atomikosProperties64.allowSubTransactions = false;
        atomikosProperties64.threadedTwoPhaseCommit = true;
        atomikosProperties64.setLogBaseName("tm.out");
        java.lang.String str79 = atomikosProperties64.getLogBaseDir();
        atomikosProperties0.set(properties34, "{1.0=-1}", (java.lang.Object) atomikosProperties64);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery81 = atomikosProperties0.getRecovery();
        int int82 = recovery81.getMaxRetries();
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel12 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel12.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "{}" + "'", str17, "{}");
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "{}" + "'", str26, "{}");
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "{1.0=-1}");
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertNotNull(properties36);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "{}" + "'", str43, "{}");
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertNotNull(properties65);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 10000L + "'", long68 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertNotNull(recovery81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 5 + "'", int82 == 5);
    }

    @Test
    public void test08499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08499");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties8 = atomikosProperties7.asProperties();
        java.lang.Object obj9 = properties0.remove((java.lang.Object) properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties10.setService("tm.out");
        long long15 = atomikosProperties10.getCheckpointInterval();
        long long16 = atomikosProperties10.getCheckpointInterval();
        atomikosProperties10.setAllowSubTransactions(true);
        boolean boolean19 = atomikosProperties10.allowSubTransactions;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties21 = atomikosProperties20.asProperties();
        atomikosProperties20.service = "{-1.0=100}";
        java.lang.String str24 = atomikosProperties20.getLogBaseName();
        atomikosProperties20.setForceShutdownOnVmExit(false);
        int int27 = atomikosProperties20.getConsoleFileCount();
        atomikosProperties20.setEnableLogging(true);
        boolean boolean30 = atomikosProperties20.isSerialJtaTransactions();
        atomikosProperties20.maxActives = 2;
        java.lang.Object obj33 = properties8.put((java.lang.Object) boolean19, (java.lang.Object) atomikosProperties20);
        java.lang.String str34 = atomikosProperties20.service;
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 500L + "'", long15 == 500L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 500L + "'", long16 == 500L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(properties21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "tmlog" + "'", str24, "tmlog");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "{-1.0=100}" + "'", str34, "{-1.0=100}");
    }

    @Test
    public void test08500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08500");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        java.util.Properties properties8 = new java.util.Properties();
        java.lang.String str9 = properties8.toString();
        java.lang.Object obj11 = properties8.remove((java.lang.Object) (short) 100);
        java.lang.Object obj14 = properties8.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj15 = properties8.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration16 = properties8.elements();
        java.lang.Object obj17 = properties0.putIfAbsent((java.lang.Object) 10.0f, (java.lang.Object) objEnumeration16);
        java.util.Properties properties18 = new java.util.Properties();
        java.util.Enumeration<?> wildcardEnumeration19 = properties18.propertyNames();
        java.lang.Object obj20 = properties18.clone();
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.String str22 = properties21.toString();
        boolean boolean23 = properties21.isEmpty();
        java.lang.Object obj26 = properties21.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties21.elements();
        java.lang.Object obj28 = properties0.put(obj20, (java.lang.Object) objEnumeration27);
        properties0.clear();
        java.util.Collection<java.lang.Object> objCollection30 = properties0.values();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{}" + "'", str9, "{}");
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration16);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(wildcardEnumeration19);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{}");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{}" + "'", str22, "{}");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNotNull(objCollection30);
    }
}
