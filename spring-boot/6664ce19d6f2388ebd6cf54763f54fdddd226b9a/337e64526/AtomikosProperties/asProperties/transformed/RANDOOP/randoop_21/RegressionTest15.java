import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest15 {

    public static boolean debug = false;

    @Test
    public void test07501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07501");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel7 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel7);
        atomikosProperties0.setLogBaseName("{={-1.0=100}, -1.0=100}");
        atomikosProperties0.setConsoleFileLimit(0);
        boolean boolean13 = atomikosProperties0.isThreadedTwoPhaseCommit();
        boolean boolean14 = atomikosProperties0.forceShutdownOnVmExit;
        java.lang.String str15 = atomikosProperties0.service;
        java.lang.String str16 = atomikosProperties0.getService();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{-1.0=100}" + "'", str15, "{-1.0=100}");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{-1.0=100}" + "'", str16, "{-1.0=100}");
    }

    @Test
    public void test07502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07502");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileLimit = (byte) 10;
        long long7 = atomikosProperties0.getMaxTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel8 = null;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel8;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.getRecovery();
        boolean boolean11 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.setForceShutdownOnVmExit(false);
        long long14 = atomikosProperties0.getMaxTimeout();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery15 = atomikosProperties0.recovery;
        recovery15.setForgetOrphanedLogEntriesDelay((long) 52);
        recovery15.setRetryInterval((long) 97);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 300000L + "'", long14 == 300000L);
        org.junit.Assert.assertNotNull(recovery15);
    }

    @Test
    public void test07503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07503");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        atomikosProperties0.setTransactionManagerUniqueName("{-1.0=100}");
        boolean boolean9 = atomikosProperties0.enableLogging;
        java.lang.String str10 = atomikosProperties0.getOutputDir();
        atomikosProperties0.setConsoleFileName("{100=100}");
        atomikosProperties0.setThreadedTwoPhaseCommit(false);
        atomikosProperties0.consoleFileLimit = 100;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test07504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07504");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.remove((java.lang.Object) (-1.0d));
        boolean boolean3 = properties0.isEmpty();
        java.util.Collection<java.lang.Object> objCollection4 = properties0.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet5 = properties0.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties7 = atomikosProperties6.asProperties();
        atomikosProperties6.service = "{-1.0=100}";
        long long10 = atomikosProperties6.getDefaultJtaTimeout();
        long long11 = atomikosProperties6.getMaxTimeout();
        int int12 = atomikosProperties6.consoleFileCount;
        long long13 = atomikosProperties6.getCheckpointInterval();
        java.lang.String str14 = atomikosProperties6.outputDir;
        long long15 = atomikosProperties6.getCheckpointInterval();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel16 = atomikosProperties6.getConsoleLogLevel();
        java.lang.Object obj17 = properties0.remove((java.lang.Object) atomikosProperties6);
        long long18 = atomikosProperties6.getDefaultJtaTimeout();
        java.lang.String str19 = atomikosProperties6.logBaseDir;
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(objCollection4);
        org.junit.Assert.assertNotNull(objEntrySet5);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 300000L + "'", long11 == 300000L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 500L + "'", long13 == 500L);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 500L + "'", long15 == 500L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel16 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel16.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10000L + "'", long18 == 10000L);
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test07505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07505");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setAllowSubTransactions(true);
        boolean boolean3 = atomikosProperties0.enableLogging;
        atomikosProperties0.consoleFileLimit = (byte) 100;
        java.lang.String str6 = atomikosProperties0.getService();
        boolean boolean7 = atomikosProperties0.isEnableLogging();
        boolean boolean8 = atomikosProperties0.isAllowSubTransactions();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test07506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07506");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties0.logBaseName = "hi!";
        boolean boolean9 = atomikosProperties0.isAllowSubTransactions();
        java.lang.String str10 = atomikosProperties0.getConsoleFileName();
        int int11 = atomikosProperties0.maxActives;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "tm.out" + "'", str10, "tm.out");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 50 + "'", int11 == 50);
    }

    @Test
    public void test07507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07507");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        long long5 = atomikosProperties0.getMaxTimeout();
        java.lang.String str6 = atomikosProperties0.outputDir;
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        boolean boolean9 = atomikosProperties0.allowSubTransactions;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test07508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07508");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        long long7 = atomikosProperties0.getDefaultJtaTimeout();
        long long8 = atomikosProperties0.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery9 = atomikosProperties0.getRecovery();
        long long10 = recovery9.delay;
        int int11 = recovery9.maxRetries;
        recovery9.setMaxRetries((int) '#');
        long long14 = recovery9.getForgetOrphanedLogEntriesDelay();
        recovery9.maxRetries = 3;
        recovery9.setForgetOrphanedLogEntriesDelay((long) 0);
        recovery9.forgetOrphanedLogEntriesDelay = 0L;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(recovery9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 86400000L + "'", long14 == 86400000L);
    }

    @Test
    public void test07509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07509");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.remove((java.lang.Object) (-1.0d));
        boolean boolean3 = properties0.isEmpty();
        java.util.Collection<java.lang.Object> objCollection4 = properties0.values();
        java.util.Properties properties5 = new java.util.Properties(properties0);
        java.util.Properties properties6 = new java.util.Properties();
        java.lang.String str7 = properties6.toString();
        java.lang.Object obj9 = properties6.remove((java.lang.Object) (short) 100);
        java.lang.Object obj12 = properties6.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean14 = properties6.containsKey((java.lang.Object) 0L);
        java.lang.Object obj17 = properties6.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj20 = properties6.setProperty("", "{-1.0=100}");
        java.lang.Object obj21 = properties6.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery22 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery22.retryInterval = (short) 100;
        recovery22.forgetOrphanedLogEntriesDelay = 'a';
        boolean boolean27 = properties6.equals((java.lang.Object) 'a');
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery28 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long29 = recovery28.getRetryInterval();
        long long30 = recovery28.getDelay();
        long long31 = recovery28.getDelay();
        recovery28.retryInterval = 100L;
        boolean boolean34 = properties6.contains((java.lang.Object) recovery28);
        recovery28.setMaxRetries((int) (byte) 10);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties38 = atomikosProperties37.asProperties();
        atomikosProperties37.service = "{-1.0=100}";
        long long41 = atomikosProperties37.getDefaultJtaTimeout();
        atomikosProperties37.serialJtaTransactions = true;
        atomikosProperties37.maxActives = ' ';
        atomikosProperties37.maxActives = (byte) 10;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery48 = atomikosProperties37.recovery;
        java.lang.Object obj49 = properties0.replace((java.lang.Object) recovery28, (java.lang.Object) atomikosProperties37);
        atomikosProperties37.setLogBaseName("{100=100}");
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(objCollection4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "{}" + "'", str7, "{}");
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNotNull(obj21);
// flaky:         org.junit.Assert.assertEquals(obj21.toString(), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 10000L + "'", long29 == 10000L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 10000L + "'", long30 == 10000L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 10000L + "'", long31 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(properties38);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 10000L + "'", long41 == 10000L);
        org.junit.Assert.assertNotNull(recovery48);
        org.junit.Assert.assertNull(obj49);
    }

    @Test
    public void test07510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07510");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        boolean boolean7 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.defaultJtaTimeout = (byte) 10;
        java.lang.String str10 = atomikosProperties0.transactionManagerUniqueName;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery11 = atomikosProperties0.getRecovery();
        recovery11.forgetOrphanedLogEntriesDelay = 10000L;
        long long14 = recovery11.getForgetOrphanedLogEntriesDelay();
        int int15 = recovery11.getMaxRetries();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(recovery11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10000L + "'", long14 == 10000L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5 + "'", int15 == 5);
    }

    @Test
    public void test07511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07511");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileLimit = (byte) 10;
        long long7 = atomikosProperties0.getMaxTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel8 = null;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel8;
        atomikosProperties0.setService("");
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel12 = atomikosProperties0.consoleLogLevel;
        java.lang.String str13 = atomikosProperties0.outputDir;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertNull(atomikosLoggingLevel12);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test07512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07512");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        atomikosProperties2.service = "{-1.0=100}";
        long long6 = atomikosProperties2.getDefaultJtaTimeout();
        atomikosProperties2.consoleFileLimit = '#';
        java.lang.Object obj9 = properties1.get((java.lang.Object) atomikosProperties2);
        boolean boolean10 = atomikosProperties2.forceShutdownOnVmExit;
        atomikosProperties2.setOutputDir("");
        long long13 = atomikosProperties2.defaultJtaTimeout;
        java.lang.String str14 = atomikosProperties2.getLogBaseName();
        atomikosProperties2.setEnableLogging(false);
        int int17 = atomikosProperties2.consoleFileCount;
        atomikosProperties2.outputDir = "tmlog";
        long long20 = atomikosProperties2.getMaxTimeout();
        int int21 = atomikosProperties2.consoleFileLimit;
        java.lang.String str22 = atomikosProperties2.getConsoleFileName();
        boolean boolean23 = atomikosProperties2.isAllowSubTransactions();
        atomikosProperties2.allowSubTransactions = false;
        java.lang.String str26 = atomikosProperties2.outputDir;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10000L + "'", long13 == 10000L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "tmlog" + "'", str14, "tmlog");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 300000L + "'", long20 == 300000L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "tm.out" + "'", str22, "tm.out");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "tmlog" + "'", str26, "tmlog");
    }

    @Test
    public void test07513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07513");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileName = "hi!";
        atomikosProperties0.setCheckpointInterval((long) 5);
        atomikosProperties0.setConsoleFileCount(0);
        atomikosProperties0.setService("{-1.0=100}");
        atomikosProperties0.setLogBaseDir("{-1.0=100}");
        boolean boolean15 = atomikosProperties0.isAllowSubTransactions();
        atomikosProperties0.maxActives = 0;
        atomikosProperties0.maxTimeout = 'a';
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test07514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07514");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        atomikosProperties0.setConsoleFileCount((int) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel8 = null;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel8;
        java.lang.String str10 = atomikosProperties0.logBaseDir;
        java.lang.String str11 = atomikosProperties0.consoleFileName;
        int int12 = atomikosProperties0.getConsoleFileCount();
        atomikosProperties0.defaultJtaTimeout = 3;
        atomikosProperties0.setDefaultJtaTimeout(52L);
        atomikosProperties0.enableLogging = true;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "tm.out" + "'", str11, "tm.out");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
    }

    @Test
    public void test07515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07515");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        atomikosProperties2.service = "{-1.0=100}";
        long long6 = atomikosProperties2.getDefaultJtaTimeout();
        atomikosProperties2.consoleFileLimit = '#';
        java.lang.Object obj9 = properties1.get((java.lang.Object) atomikosProperties2);
        boolean boolean10 = atomikosProperties2.forceShutdownOnVmExit;
        java.util.Properties properties11 = new java.util.Properties();
        java.lang.String str12 = properties11.toString();
        java.lang.Object obj14 = properties11.remove((java.lang.Object) (short) 100);
        java.lang.Object obj17 = properties11.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj18 = properties11.clone();
        java.lang.String str20 = properties11.getProperty("{}");
        java.lang.Object obj23 = properties11.put((java.lang.Object) 86400000L, (java.lang.Object) "{-1.0=100}");
        atomikosProperties2.set(properties11, "tmlog", (java.lang.Object) 5L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties28 = atomikosProperties27.asProperties();
        atomikosProperties27.service = "{-1.0=100}";
        long long31 = atomikosProperties27.getDefaultJtaTimeout();
        atomikosProperties27.setThreadedTwoPhaseCommit(true);
        java.lang.String str34 = atomikosProperties27.getLogBaseName();
        java.lang.String str35 = atomikosProperties27.consoleFileName;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean37 = atomikosProperties36.isSerialJtaTransactions();
        atomikosProperties36.logBaseName = "{-1.0=100}";
        int int40 = atomikosProperties36.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery41 = atomikosProperties36.getRecovery();
        atomikosProperties36.setConsoleFileCount((int) (byte) 100);
        atomikosProperties36.setAllowSubTransactions(true);
        atomikosProperties36.setService("tm.out");
        int int48 = atomikosProperties36.consoleFileLimit;
        atomikosProperties36.setLogBaseName("");
        java.util.Properties properties51 = new java.util.Properties();
        java.util.Enumeration<?> wildcardEnumeration52 = properties51.propertyNames();
        java.lang.Object obj53 = properties51.clone();
        java.util.Collection<java.lang.Object> objCollection54 = properties51.values();
        boolean boolean55 = properties11.replace((java.lang.Object) str35, (java.lang.Object) atomikosProperties36, (java.lang.Object) objCollection54);
        java.util.Properties properties56 = new java.util.Properties();
        java.lang.String str57 = properties56.toString();
        boolean boolean58 = properties56.isEmpty();
        java.lang.Object obj61 = properties56.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Set<java.lang.Object> objSet62 = properties56.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties64 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties65 = atomikosProperties64.asProperties();
        atomikosProperties64.service = "{-1.0=100}";
        java.lang.String str68 = atomikosProperties64.getTransactionManagerUniqueName();
        atomikosProperties64.consoleFileName = "hi!";
        atomikosProperties64.setCheckpointInterval((long) 5);
        atomikosProperties64.setConsoleFileCount(0);
        boolean boolean75 = atomikosProperties64.isThreadedTwoPhaseCommit();
        atomikosProperties64.consoleFileLimit = 5;
        atomikosProperties64.maxActives = 18;
        atomikosProperties36.set(properties56, "{{={-1.0=100}, -1.0=100}=}", (java.lang.Object) atomikosProperties64);
        atomikosProperties36.setService("{0={100=100}, {}={}}");
        atomikosProperties36.setService("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=32, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={-1.0=100}, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        atomikosProperties36.setMaxTimeout(10000L);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "{}" + "'", str12, "{}");
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "{1.0=-1}");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNotNull(properties28);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 10000L + "'", long31 == 10000L);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "tmlog" + "'", str34, "tmlog");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "tm.out" + "'", str35, "tm.out");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 50 + "'", int40 == 50);
        org.junit.Assert.assertNotNull(recovery41);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(wildcardEnumeration52);
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertEquals(obj53.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj53), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj53), "{}");
        org.junit.Assert.assertNotNull(objCollection54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "{}" + "'", str57, "{}");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNull(obj61);
        org.junit.Assert.assertNotNull(objSet62);
        org.junit.Assert.assertNotNull(properties65);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test07516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07516");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        boolean boolean2 = properties0.isEmpty();
        java.lang.Object obj5 = properties0.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration6 = properties0.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties8 = atomikosProperties7.asProperties();
        atomikosProperties7.service = "{-1.0=100}";
        java.lang.String str11 = atomikosProperties7.getTransactionManagerUniqueName();
        atomikosProperties7.consoleFileName = "hi!";
        atomikosProperties7.setCheckpointInterval((long) 5);
        atomikosProperties7.setLogBaseDir("{-1.0=100}");
        java.lang.String str18 = atomikosProperties7.transactionManagerUniqueName;
        java.util.Properties properties19 = new java.util.Properties();
        java.lang.String str20 = properties19.toString();
        java.lang.Object obj22 = properties19.remove((java.lang.Object) (short) 100);
        java.lang.Object obj25 = properties19.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean27 = properties19.containsKey((java.lang.Object) 0L);
        java.lang.Object obj30 = properties19.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj33 = properties19.setProperty("", "{-1.0=100}");
        java.lang.Object obj34 = properties19.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery35 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery35.retryInterval = (short) 100;
        recovery35.forgetOrphanedLogEntriesDelay = 'a';
        boolean boolean40 = properties19.equals((java.lang.Object) 'a');
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery41 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery41.retryInterval = (short) 100;
        recovery41.forgetOrphanedLogEntriesDelay = 'a';
        long long46 = recovery41.getDelay();
        int int47 = recovery41.maxRetries;
        int int48 = recovery41.maxRetries;
        long long49 = recovery41.getRetryInterval();
        java.util.Properties properties50 = new java.util.Properties();
        java.util.Enumeration<?> wildcardEnumeration51 = properties50.propertyNames();
        java.lang.Object obj52 = properties19.put((java.lang.Object) long49, (java.lang.Object) wildcardEnumeration51);
        java.util.Properties properties53 = new java.util.Properties(properties19);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery54 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long55 = recovery54.getRetryInterval();
        long long56 = recovery54.getDelay();
        int int57 = recovery54.getMaxRetries();
        long long58 = recovery54.getDelay();
        boolean boolean59 = properties0.replace((java.lang.Object) atomikosProperties7, (java.lang.Object) properties19, (java.lang.Object) recovery54);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties60 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties61 = atomikosProperties60.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties62 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties63 = atomikosProperties62.asProperties();
        atomikosProperties62.service = "{-1.0=100}";
        long long66 = atomikosProperties62.getDefaultJtaTimeout();
        atomikosProperties62.consoleFileLimit = '#';
        java.lang.Object obj69 = properties61.get((java.lang.Object) atomikosProperties62);
        boolean boolean70 = atomikosProperties62.isForceShutdownOnVmExit();
        atomikosProperties62.consoleFileName = "";
        atomikosProperties62.checkpointInterval = (byte) 100;
        java.lang.Object obj75 = properties0.get((java.lang.Object) atomikosProperties62);
        java.util.Properties properties76 = atomikosProperties62.asProperties();
        java.io.OutputStream outputStream77 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties76.store(outputStream77, "{com.atomikos.icatch.tm.out=hi!}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(objEnumeration6);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{}" + "'", str20, "{}");
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNotNull(obj34);
// flaky:         org.junit.Assert.assertEquals(obj34.toString(), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 10000L + "'", long46 == 10000L);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 5 + "'", int47 == 5);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 5 + "'", int48 == 5);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 100L + "'", long49 == 100L);
        org.junit.Assert.assertNotNull(wildcardEnumeration51);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 10000L + "'", long55 == 10000L);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 10000L + "'", long56 == 10000L);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 5 + "'", int57 == 5);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 10000L + "'", long58 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(properties61);
        org.junit.Assert.assertNotNull(properties63);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 10000L + "'", long66 == 10000L);
        org.junit.Assert.assertNull(obj69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(obj75);
        org.junit.Assert.assertNotNull(properties76);
    }

    @Test
    public void test07517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07517");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj3 = properties0.setProperty("{}", "{}");
        java.util.Enumeration<java.lang.Object> objEnumeration4 = properties0.keys();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet5 = properties0.entrySet();
        java.util.Properties properties6 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery7 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery7.retryInterval = (short) 100;
        recovery7.forgetOrphanedLogEntriesDelay = 'a';
        long long12 = recovery7.retryInterval;
        recovery7.forgetOrphanedLogEntriesDelay = 0L;
        long long15 = recovery7.getForgetOrphanedLogEntriesDelay();
        long long16 = recovery7.getForgetOrphanedLogEntriesDelay();
        recovery7.retryInterval = 0L;
        long long19 = recovery7.retryInterval;
        int int20 = recovery7.maxRetries;
        long long21 = recovery7.getDelay();
        recovery7.setRetryInterval((long) 1);
        recovery7.setMaxRetries(1);
        int int26 = recovery7.getMaxRetries();
        java.lang.Object obj27 = properties6.get((java.lang.Object) int26);
        java.io.OutputStream outputStream28 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties6.storeToXML(outputStream28, "{com.atomikos.icatch.tm.out={}}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNotNull(objEnumeration4);
        org.junit.Assert.assertNotNull(objEntrySet5);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 100L + "'", long12 == 100L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5 + "'", int20 == 5);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10000L + "'", long21 == 10000L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNull(obj27);
    }

    @Test
    public void test07518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07518");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        int int7 = atomikosProperties0.maxActives;
        atomikosProperties0.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.getRecovery();
        atomikosProperties0.consoleFileName = "{-1.0=100}";
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel13 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel13);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel15 = null;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel15;
        atomikosProperties0.setDefaultJtaTimeout(500L);
        boolean boolean19 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.setConsoleFileCount(10);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test07519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07519");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getLogBaseName();
        long long5 = atomikosProperties0.defaultJtaTimeout;
        long long6 = atomikosProperties0.getMaxTimeout();
        boolean boolean7 = atomikosProperties0.forceShutdownOnVmExit;
        java.lang.String str8 = atomikosProperties0.getLogBaseName();
        boolean boolean9 = atomikosProperties0.isEnableLogging();
        java.lang.String str10 = atomikosProperties0.getTransactionManagerUniqueName();
        java.lang.String str11 = atomikosProperties0.getOutputDir();
        atomikosProperties0.defaultJtaTimeout = 97;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel14 = atomikosProperties0.getConsoleLogLevel();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tmlog" + "'", str4, "tmlog");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 10000L + "'", long5 == 10000L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 300000L + "'", long6 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "tmlog" + "'", str8, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel14 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel14.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
    }

    @Test
    public void test07520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07520");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.remove((java.lang.Object) (-1.0d));
        boolean boolean4 = properties0.contains((java.lang.Object) "{-1.0=100}");
        java.lang.Object obj7 = properties0.setProperty("{={-1.0=100}, -1.0=100}", "");
        java.lang.Object obj10 = properties0.setProperty("tm.out", "");
        int int11 = properties0.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties13 = atomikosProperties12.asProperties();
        atomikosProperties12.service = "{-1.0=100}";
        java.lang.String str16 = atomikosProperties12.getTransactionManagerUniqueName();
        atomikosProperties12.consoleFileName = "hi!";
        atomikosProperties12.forceShutdownOnVmExit = true;
        boolean boolean21 = atomikosProperties12.serialJtaTransactions;
        atomikosProperties12.defaultJtaTimeout = 0L;
        boolean boolean24 = properties0.containsKey((java.lang.Object) 0L);
        java.io.OutputStream outputStream25 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.storeToXML(outputStream25, "{1.0=-1, -1.0=100}", "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(properties13);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test07521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07521");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setEnableLogging(true);
        atomikosProperties0.setConsoleFileLimit((int) (short) 0);
        atomikosProperties0.outputDir = "tmlog";
        java.lang.String str7 = atomikosProperties0.getOutputDir();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties8.setEnableLogging(true);
        atomikosProperties8.consoleFileCount = 0;
        java.util.Properties properties13 = atomikosProperties8.asProperties();
        boolean boolean14 = atomikosProperties8.isEnableLogging();
        int int15 = atomikosProperties8.getMaxActives();
        java.util.Properties properties16 = new java.util.Properties();
        java.lang.Object obj18 = properties16.remove((java.lang.Object) (-1.0d));
        int int19 = properties16.size();
        java.util.Enumeration<java.lang.Object> objEnumeration20 = properties16.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties22.setAllowSubTransactions(true);
        boolean boolean25 = atomikosProperties22.isSerialJtaTransactions();
        atomikosProperties22.setConsoleFileCount(5);
        atomikosProperties8.set(properties16, "{}", (java.lang.Object) 5);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties30 = atomikosProperties29.asProperties();
        atomikosProperties29.service = "{-1.0=100}";
        long long33 = atomikosProperties29.getDefaultJtaTimeout();
        atomikosProperties29.outputDir = "{={-1.0=100}, -1.0=100}";
        long long36 = atomikosProperties29.getCheckpointInterval();
        boolean boolean37 = atomikosProperties29.isThreadedTwoPhaseCommit();
        java.lang.String str38 = atomikosProperties29.service;
        int int39 = atomikosProperties29.consoleFileCount;
        atomikosProperties29.logBaseName = "tm.out";
        java.lang.String str42 = atomikosProperties29.getService();
        atomikosProperties29.setCheckpointInterval(300000L);
        java.lang.Object obj45 = properties16.get((java.lang.Object) atomikosProperties29);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties47 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties48 = atomikosProperties47.asProperties();
        atomikosProperties47.service = "{-1.0=100}";
        java.lang.String str51 = atomikosProperties47.getTransactionManagerUniqueName();
        atomikosProperties47.consoleFileName = "hi!";
        atomikosProperties47.service = "tm.out";
        atomikosProperties47.logBaseName = "tm.out";
        atomikosProperties47.setThreadedTwoPhaseCommit(true);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel60 = atomikosProperties47.consoleLogLevel;
        atomikosProperties47.logBaseDir = "";
        atomikosProperties0.set(properties16, "{}", (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery64 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long65 = recovery64.getRetryInterval();
        long long66 = recovery64.getDelay();
        long long67 = recovery64.getDelay();
        recovery64.setForgetOrphanedLogEntriesDelay(10000L);
        recovery64.retryInterval = '4';
        long long72 = recovery64.forgetOrphanedLogEntriesDelay;
        long long73 = recovery64.retryInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties74 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties75 = atomikosProperties74.asProperties();
        atomikosProperties74.service = "{-1.0=100}";
        java.lang.String str78 = atomikosProperties74.getTransactionManagerUniqueName();
        atomikosProperties74.consoleFileLimit = (byte) 10;
        long long81 = atomikosProperties74.getMaxTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel82 = null;
        atomikosProperties74.consoleLogLevel = atomikosLoggingLevel82;
        atomikosProperties74.setCheckpointInterval((long) (short) -1);
        atomikosProperties74.consoleFileName = "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=32, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={-1.0=100}, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}";
        atomikosProperties74.transactionManagerUniqueName = "{100=100}";
        atomikosProperties74.setConsoleFileLimit((int) '#');
        java.lang.Object obj92 = properties16.replace((java.lang.Object) recovery64, (java.lang.Object) atomikosProperties74);
        recovery64.setDelay(5L);
        recovery64.forgetOrphanedLogEntriesDelay = 52L;
        java.lang.Class<?> wildcardClass97 = recovery64.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "tmlog" + "'", str7, "tmlog");
        org.junit.Assert.assertNotNull(properties13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 50 + "'", int15 == 50);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(objEnumeration20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(properties30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 10000L + "'", long33 == 10000L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 500L + "'", long36 == 500L);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "{-1.0=100}" + "'", str38, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "{-1.0=100}" + "'", str42, "{-1.0=100}");
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertNotNull(properties48);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel60 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel60.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 10000L + "'", long65 == 10000L);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 10000L + "'", long66 == 10000L);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 10000L + "'", long67 == 10000L);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 10000L + "'", long72 == 10000L);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 52L + "'", long73 == 52L);
        org.junit.Assert.assertNotNull(properties75);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 300000L + "'", long81 == 300000L);
        org.junit.Assert.assertNull(obj92);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test07522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07522");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        boolean boolean7 = atomikosProperties0.isAllowSubTransactions();
        boolean boolean8 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.allowSubTransactions = false;
        atomikosProperties0.threadedTwoPhaseCommit = true;
        java.lang.String str13 = atomikosProperties0.getLogBaseDir();
        long long14 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.logBaseName = "";
        atomikosProperties0.maxTimeout = 100;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10000L + "'", long14 == 10000L);
    }

    @Test
    public void test07523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07523");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.remove((java.lang.Object) (-1.0d));
        boolean boolean3 = properties0.isEmpty();
        java.util.Properties properties4 = new java.util.Properties();
        java.lang.String str5 = properties4.toString();
        java.lang.Object obj7 = properties4.remove((java.lang.Object) (short) 100);
        java.lang.Object obj10 = properties4.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean12 = properties4.containsKey((java.lang.Object) 0L);
        java.lang.Object obj15 = properties4.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj18 = properties4.setProperty("", "{-1.0=100}");
        java.lang.Object obj19 = properties4.clone();
        java.lang.Object obj20 = properties0.get((java.lang.Object) properties4);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties21.setEnableLogging(true);
        atomikosProperties21.consoleFileCount = 0;
        int int26 = atomikosProperties21.getMaxActives();
        java.lang.String str27 = atomikosProperties21.getLogBaseDir();
        java.lang.String str28 = atomikosProperties21.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery29 = atomikosProperties21.getRecovery();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties31 = atomikosProperties30.asProperties();
        atomikosProperties30.service = "{-1.0=100}";
        long long34 = atomikosProperties30.getDefaultJtaTimeout();
        atomikosProperties30.setThreadedTwoPhaseCommit(true);
        boolean boolean37 = atomikosProperties30.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery38 = atomikosProperties30.recovery;
        atomikosProperties30.setLogBaseDir("");
        java.lang.Object obj41 = properties4.replace((java.lang.Object) recovery29, (java.lang.Object) "");
        java.util.Collection<java.lang.Object> objCollection42 = properties4.values();
        java.io.PrintStream printStream43 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties4.list(printStream43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{}" + "'", str5, "{}");
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(obj19);
// flaky:         org.junit.Assert.assertEquals(obj19.toString(), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 50 + "'", int26 == 50);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(recovery29);
        org.junit.Assert.assertNotNull(properties31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 10000L + "'", long34 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(recovery38);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertNotNull(objCollection42);
    }

    @Test
    public void test07524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07524");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.remove((java.lang.Object) (-1.0d));
        boolean boolean3 = properties0.isEmpty();
        int int4 = properties0.size();
        java.lang.String str6 = properties0.getProperty("{}");
        java.util.Set<java.lang.Object> objSet7 = properties0.keySet();
        java.util.Enumeration<java.lang.Object> objEnumeration8 = properties0.keys();
        java.util.Properties properties9 = new java.util.Properties();
        java.lang.Object obj12 = properties9.setProperty("{}", "{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery13 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery13.retryInterval = (short) 100;
        recovery13.setForgetOrphanedLogEntriesDelay((long) 5);
        recovery13.setForgetOrphanedLogEntriesDelay((long) (short) 0);
        java.util.Properties properties20 = new java.util.Properties();
        java.lang.String str21 = properties20.toString();
        java.lang.Object obj23 = properties20.remove((java.lang.Object) (short) 100);
        java.util.Properties properties24 = new java.util.Properties();
        java.lang.String str25 = properties24.toString();
        boolean boolean26 = properties24.isEmpty();
        java.lang.Object obj29 = properties24.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration30 = properties24.elements();
        boolean boolean31 = properties20.containsKey((java.lang.Object) properties24);
        java.lang.Object obj32 = properties9.putIfAbsent((java.lang.Object) (short) 0, (java.lang.Object) properties24);
        java.lang.Object obj35 = properties9.setProperty("{={-1.0=100}, -1.0=100}", "tmlog");
        boolean boolean36 = properties9.isEmpty();
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties9);
        properties9.clear();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(objSet7);
        org.junit.Assert.assertNotNull(objEnumeration8);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "{}" + "'", str21, "{}");
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "{}" + "'", str25, "{}");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNotNull(objEnumeration30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test07525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07525");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.util.Properties properties3 = new java.util.Properties();
        java.lang.String str4 = properties3.toString();
        java.lang.Object obj6 = properties3.remove((java.lang.Object) (short) 100);
        java.lang.Object obj9 = properties3.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean11 = properties3.containsKey((java.lang.Object) 0L);
        java.lang.Object obj14 = properties3.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj17 = properties3.setProperty("", "{-1.0=100}");
        java.util.Enumeration<java.lang.Object> objEnumeration18 = properties3.keys();
        java.util.Properties properties19 = new java.util.Properties();
        java.lang.String str20 = properties19.toString();
        boolean boolean21 = properties19.isEmpty();
        java.lang.Object obj24 = properties19.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration25 = properties19.elements();
        java.lang.Object obj26 = properties2.replace((java.lang.Object) objEnumeration18, (java.lang.Object) properties19);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties2.keys();
        java.util.Properties properties28 = new java.util.Properties();
        java.lang.Object obj31 = properties28.setProperty("{}", "{}");
        java.util.Enumeration<java.lang.Object> objEnumeration32 = properties28.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration33 = properties28.elements();
        java.util.Properties properties34 = new java.util.Properties(properties28);
        java.lang.String str36 = properties28.getProperty("");
        java.util.Set<java.lang.String> strSet37 = properties28.stringPropertyNames();
        java.util.Properties properties38 = new java.util.Properties();
        java.lang.String str39 = properties38.toString();
        java.lang.Object obj41 = properties38.remove((java.lang.Object) (short) 100);
        java.lang.Object obj44 = properties38.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean46 = properties38.containsKey((java.lang.Object) 0L);
        java.lang.String str47 = properties38.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties48 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties49 = atomikosProperties48.asProperties();
        atomikosProperties48.service = "{-1.0=100}";
        long long52 = atomikosProperties48.getDefaultJtaTimeout();
        atomikosProperties48.setMaxActives(0);
        atomikosProperties48.maxActives = 'a';
        boolean boolean57 = atomikosProperties48.isThreadedTwoPhaseCommit();
        boolean boolean58 = atomikosProperties48.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel59 = atomikosProperties48.consoleLogLevel;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties60 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties61 = atomikosProperties60.asProperties();
        atomikosProperties60.service = "{-1.0=100}";
        long long64 = atomikosProperties60.getDefaultJtaTimeout();
        atomikosProperties60.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties60.setMaxActives(100);
        java.lang.String str69 = atomikosProperties60.logBaseDir;
        java.lang.String str70 = atomikosProperties60.outputDir;
        java.lang.Object obj71 = properties38.replace((java.lang.Object) atomikosLoggingLevel59, (java.lang.Object) atomikosProperties60);
        java.lang.Object obj72 = properties2.replace((java.lang.Object) properties28, (java.lang.Object) atomikosProperties60);
        boolean boolean73 = properties2.isEmpty();
        java.lang.Object obj74 = properties2.clone();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{}" + "'", str4, "{}");
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(objEnumeration18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{}" + "'", str20, "{}");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(objEnumeration25);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNotNull(objEnumeration32);
        org.junit.Assert.assertNotNull(objEnumeration33);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "{}" + "'", str39, "{}");
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "{-1.0=100}" + "'", str47, "{-1.0=100}");
        org.junit.Assert.assertNotNull(properties49);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 10000L + "'", long52 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel59 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel59.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(properties61);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 10000L + "'", long64 == 10000L);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "{={-1.0=100}, -1.0=100}" + "'", str70, "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNull(obj71);
        org.junit.Assert.assertNull(obj72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(obj74);
        org.junit.Assert.assertEquals(obj74.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj74), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj74), "{}");
    }

    @Test
    public void test07526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07526");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        atomikosProperties2.service = "{-1.0=100}";
        long long6 = atomikosProperties2.getDefaultJtaTimeout();
        atomikosProperties2.consoleFileLimit = '#';
        java.lang.Object obj9 = properties1.get((java.lang.Object) atomikosProperties2);
        boolean boolean10 = atomikosProperties2.forceShutdownOnVmExit;
        atomikosProperties2.setOutputDir("");
        boolean boolean13 = atomikosProperties2.forceShutdownOnVmExit;
        atomikosProperties2.setEnableLogging(false);
        atomikosProperties2.logBaseName = "tmlog";
        atomikosProperties2.setSerialJtaTransactions(true);
        atomikosProperties2.setLogBaseDir("{{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}=, ={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test07527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07527");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        long long5 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.threadedTwoPhaseCommit = true;
        long long8 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.logBaseDir = "{={-1.0=100}, -1.0=100}";
        boolean boolean11 = atomikosProperties0.forceShutdownOnVmExit;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel12 = atomikosProperties0.getConsoleLogLevel();
        atomikosProperties0.transactionManagerUniqueName = "{{-1.0=100}=}";
        atomikosProperties0.logBaseDir = "{{1.0=-1}=hi!}";
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel12 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel12.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
    }

    @Test
    public void test07528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07528");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj7 = properties0.clone();
        java.lang.String str9 = properties0.getProperty("{}");
        java.lang.Object obj12 = properties0.put((java.lang.Object) 86400000L, (java.lang.Object) "{-1.0=100}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties14 = atomikosProperties13.asProperties();
        atomikosProperties13.service = "{-1.0=100}";
        java.lang.String str17 = atomikosProperties13.getTransactionManagerUniqueName();
        boolean boolean18 = atomikosProperties13.isSerialJtaTransactions();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel19 = atomikosProperties13.getConsoleLogLevel();
        java.lang.Object obj20 = properties0.remove((java.lang.Object) atomikosProperties13);
        boolean boolean21 = atomikosProperties13.isAllowSubTransactions();
        atomikosProperties13.setMaxActives((int) 'a');
        atomikosProperties13.setAllowSubTransactions(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties27 = atomikosProperties26.asProperties();
        atomikosProperties26.service = "{-1.0=100}";
        java.lang.String str30 = atomikosProperties26.getTransactionManagerUniqueName();
        atomikosProperties26.consoleFileName = "hi!";
        atomikosProperties26.service = "tm.out";
        atomikosProperties26.logBaseName = "tm.out";
        atomikosProperties26.setThreadedTwoPhaseCommit(true);
        atomikosProperties26.setThreadedTwoPhaseCommit(false);
        boolean boolean41 = atomikosProperties26.isSerialJtaTransactions();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel42 = atomikosProperties26.getConsoleLogLevel();
        atomikosProperties26.setMaxActives(32);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties45 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties46 = atomikosProperties45.asProperties();
        atomikosProperties45.service = "{-1.0=100}";
        long long49 = atomikosProperties45.getDefaultJtaTimeout();
        atomikosProperties45.setThreadedTwoPhaseCommit(true);
        boolean boolean52 = atomikosProperties45.isAllowSubTransactions();
        int int53 = atomikosProperties45.getConsoleFileLimit();
        atomikosProperties45.setForceShutdownOnVmExit(false);
        long long56 = atomikosProperties45.defaultJtaTimeout;
        atomikosProperties45.logBaseDir = "tmlog";
        atomikosProperties45.setMaxTimeout(0L);
        java.util.Properties properties61 = new java.util.Properties();
        java.lang.String str62 = properties61.toString();
        java.util.Properties properties63 = new java.util.Properties(properties61);
        java.lang.Object obj66 = properties61.setProperty("", "{={-1.0=100}, -1.0=100}");
        java.util.Enumeration<?> wildcardEnumeration67 = properties61.propertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties68 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties69 = atomikosProperties68.asProperties();
        atomikosProperties68.service = "{-1.0=100}";
        long long72 = atomikosProperties68.getDefaultJtaTimeout();
        atomikosProperties68.setThreadedTwoPhaseCommit(true);
        boolean boolean75 = atomikosProperties68.isAllowSubTransactions();
        boolean boolean76 = atomikosProperties68.isEnableLogging();
        atomikosProperties68.allowSubTransactions = false;
        boolean boolean79 = properties61.containsKey((java.lang.Object) atomikosProperties68);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties80 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties80.setAllowSubTransactions(true);
        atomikosProperties80.maxActives = (short) -1;
        atomikosProperties80.setService("tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties87 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties87.setAllowSubTransactions(true);
        boolean boolean90 = atomikosProperties87.enableLogging;
        boolean boolean91 = atomikosProperties87.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel92 = atomikosProperties87.consoleLogLevel;
        atomikosProperties80.setConsoleLogLevel(atomikosLoggingLevel92);
        atomikosProperties68.setConsoleLogLevel(atomikosLoggingLevel92);
        atomikosProperties45.consoleLogLevel = atomikosLoggingLevel92;
        atomikosProperties26.consoleLogLevel = atomikosLoggingLevel92;
        atomikosProperties13.setConsoleLogLevel(atomikosLoggingLevel92);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{1.0=-1}");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel19 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel19.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(properties27);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel42 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel42.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(properties46);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 10000L + "'", long49 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 10000L + "'", long56 == 10000L);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "{}" + "'", str62, "{}");
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertNotNull(wildcardEnumeration67);
        org.junit.Assert.assertNotNull(properties69);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 10000L + "'", long72 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel92 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel92.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
    }

    @Test
    public void test07529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07529");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.retryInterval = (short) 100;
        recovery0.forgetOrphanedLogEntriesDelay = 'a';
        long long5 = recovery0.getDelay();
        int int6 = recovery0.maxRetries;
        recovery0.delay = 1L;
        recovery0.forgetOrphanedLogEntriesDelay = (short) 0;
        long long11 = recovery0.forgetOrphanedLogEntriesDelay;
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 10000L + "'", long5 == 10000L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
    }

    @Test
    public void test07530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07530");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.remove((java.lang.Object) (-1.0d));
        boolean boolean3 = properties0.isEmpty();
        int int4 = properties0.size();
        java.lang.String str6 = properties0.getProperty("{}");
        java.util.Set<java.lang.Object> objSet7 = properties0.keySet();
        java.util.Properties properties8 = new java.util.Properties();
        java.lang.Object obj10 = properties8.remove((java.lang.Object) (-1.0d));
        boolean boolean11 = properties8.isEmpty();
        java.util.Collection<java.lang.Object> objCollection12 = properties8.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet13 = properties8.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties15 = atomikosProperties14.asProperties();
        atomikosProperties14.service = "{-1.0=100}";
        long long18 = atomikosProperties14.getDefaultJtaTimeout();
        long long19 = atomikosProperties14.getMaxTimeout();
        int int20 = atomikosProperties14.consoleFileCount;
        long long21 = atomikosProperties14.getCheckpointInterval();
        java.lang.String str22 = atomikosProperties14.outputDir;
        long long23 = atomikosProperties14.getCheckpointInterval();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel24 = atomikosProperties14.getConsoleLogLevel();
        java.lang.Object obj25 = properties8.remove((java.lang.Object) atomikosProperties14);
        boolean boolean26 = properties0.contains((java.lang.Object) atomikosProperties14);
        atomikosProperties14.setMaxActives((-1));
        int int29 = atomikosProperties14.maxActives;
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(objSet7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(objCollection12);
        org.junit.Assert.assertNotNull(objEntrySet13);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10000L + "'", long18 == 10000L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 300000L + "'", long19 == 300000L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 500L + "'", long21 == 500L);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 500L + "'", long23 == 500L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel24 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel24.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
    }

    @Test
    public void test07531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07531");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        int int7 = atomikosProperties0.maxActives;
        java.lang.String str8 = atomikosProperties0.logBaseDir;
        boolean boolean9 = atomikosProperties0.forceShutdownOnVmExit;
        boolean boolean10 = atomikosProperties0.isThreadedTwoPhaseCommit();
        java.util.Properties properties11 = atomikosProperties0.asProperties();
        atomikosProperties0.setConsoleFileLimit((int) (byte) 0);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(properties11);
    }

    @Test
    public void test07532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07532");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        int int7 = atomikosProperties0.maxActives;
        atomikosProperties0.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.getRecovery();
        atomikosProperties0.consoleFileName = "{-1.0=100}";
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel13 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel13);
        atomikosProperties0.setForceShutdownOnVmExit(true);
        atomikosProperties0.maxTimeout = 0L;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertNotNull(recovery10);
    }

    @Test
    public void test07533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07533");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.retryInterval = (short) 100;
        recovery0.delay = (-1L);
        long long5 = recovery0.delay;
        recovery0.delay = (short) 1;
        long long8 = recovery0.getRetryInterval();
        int int9 = recovery0.maxRetries;
        long long10 = recovery0.getForgetOrphanedLogEntriesDelay();
        recovery0.setRetryInterval((long) 10);
        recovery0.delay = '4';
        long long15 = recovery0.retryInterval;
        long long16 = recovery0.forgetOrphanedLogEntriesDelay;
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5 + "'", int9 == 5);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 86400000L + "'", long10 == 86400000L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10L + "'", long15 == 10L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 86400000L + "'", long16 == 86400000L);
    }

    @Test
    public void test07534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07534");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        boolean boolean7 = atomikosProperties0.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery8 = atomikosProperties0.recovery;
        atomikosProperties0.setLogBaseDir("");
        long long11 = atomikosProperties0.maxTimeout;
        java.lang.String str12 = atomikosProperties0.logBaseDir;
        java.lang.String str13 = atomikosProperties0.logBaseDir;
        long long14 = atomikosProperties0.getCheckpointInterval();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(recovery8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 300000L + "'", long11 == 300000L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 500L + "'", long14 == 500L);
    }

    @Test
    public void test07535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07535");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj14 = properties0.setProperty("", "{-1.0=100}");
        java.lang.String str15 = properties0.toString();
        java.util.Set<java.lang.String> strSet16 = properties0.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties18 = atomikosProperties17.asProperties();
        atomikosProperties17.service = "{-1.0=100}";
        long long21 = atomikosProperties17.getDefaultJtaTimeout();
        atomikosProperties17.enableLogging = false;
        atomikosProperties17.setMaxTimeout((long) (byte) 0);
        atomikosProperties17.setAllowSubTransactions(true);
        java.util.Properties properties28 = new java.util.Properties();
        java.lang.Object obj30 = properties28.remove((java.lang.Object) (-1.0d));
        boolean boolean31 = properties28.isEmpty();
        java.util.Collection<java.lang.Object> objCollection32 = properties28.values();
        java.lang.Object obj33 = properties0.put((java.lang.Object) true, (java.lang.Object) properties28);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties34 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties34.setAllowSubTransactions(true);
        atomikosProperties34.maxActives = (short) -1;
        atomikosProperties34.setService("tm.out");
        atomikosProperties34.transactionManagerUniqueName = "{={-1.0=100}, -1.0=100}";
        boolean boolean43 = atomikosProperties34.isEnableLogging();
        boolean boolean44 = properties28.containsValue((java.lang.Object) boolean43);
        java.io.OutputStream outputStream45 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties28.store(outputStream45, "{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{={-1.0=100}, -1.0=100}" + "'", str15, "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10000L + "'", long21 == 10000L);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objCollection32);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test07536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07536");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getLogBaseName();
        long long5 = atomikosProperties0.defaultJtaTimeout;
        long long6 = atomikosProperties0.getMaxTimeout();
        boolean boolean7 = atomikosProperties0.forceShutdownOnVmExit;
        java.util.Properties properties8 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties10 = atomikosProperties9.asProperties();
        atomikosProperties9.service = "{-1.0=100}";
        java.lang.String str13 = atomikosProperties9.getTransactionManagerUniqueName();
        atomikosProperties9.consoleFileName = "hi!";
        atomikosProperties9.setCheckpointInterval((long) 5);
        atomikosProperties9.setConsoleFileCount(0);
        atomikosProperties9.setService("{-1.0=100}");
        atomikosProperties9.setDefaultJtaTimeout((long) 100);
        atomikosProperties9.defaultJtaTimeout = 32;
        atomikosProperties9.maxTimeout = 0;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel28 = null;
        atomikosProperties9.consoleLogLevel = atomikosLoggingLevel28;
        java.util.Properties properties30 = new java.util.Properties();
        java.lang.String str31 = properties30.toString();
        java.lang.Object obj33 = properties30.remove((java.lang.Object) (short) 100);
        java.lang.Object obj36 = properties30.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.util.Properties properties37 = new java.util.Properties();
        java.lang.String str38 = properties37.toString();
        java.lang.Object obj40 = properties37.remove((java.lang.Object) (short) 100);
        java.lang.Object obj43 = properties37.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        int int44 = properties37.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery45 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery45.retryInterval = (short) 100;
        recovery45.forgetOrphanedLogEntriesDelay = 'a';
        long long50 = recovery45.retryInterval;
        recovery45.setForgetOrphanedLogEntriesDelay((long) 0);
        java.lang.Object obj53 = properties30.replace((java.lang.Object) int44, (java.lang.Object) recovery45);
        recovery45.forgetOrphanedLogEntriesDelay = (byte) 0;
        recovery45.retryInterval = ' ';
        java.lang.Object obj58 = properties8.put((java.lang.Object) atomikosProperties9, (java.lang.Object) ' ');
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel59 = atomikosProperties9.getConsoleLogLevel();
        atomikosProperties9.setLogBaseName("{1.0=-1, -1.0=100}");
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tmlog" + "'", str4, "tmlog");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 10000L + "'", long5 == 10000L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 300000L + "'", long6 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "{}" + "'", str31, "{}");
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "{}" + "'", str38, "{}");
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 100L + "'", long50 == 100L);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertNull(atomikosLoggingLevel59);
    }

    @Test
    public void test07537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07537");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.retryInterval = (short) 100;
        recovery0.forgetOrphanedLogEntriesDelay = 'a';
        long long5 = recovery0.retryInterval;
        recovery0.setForgetOrphanedLogEntriesDelay((long) 0);
        long long8 = recovery0.getForgetOrphanedLogEntriesDelay();
        long long9 = recovery0.getDelay();
        recovery0.setDelay((long) 18);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 100L + "'", long5 == 100L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10000L + "'", long9 == 10000L);
    }

    @Test
    public void test07538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07538");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj7 = properties0.clone();
        java.util.Properties properties8 = new java.util.Properties();
        java.lang.Object obj10 = properties8.remove((java.lang.Object) (-1.0d));
        boolean boolean11 = properties8.isEmpty();
        int int12 = properties8.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery13 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery13.retryInterval = (short) 100;
        recovery13.forgetOrphanedLogEntriesDelay = 'a';
        java.util.Properties properties18 = new java.util.Properties();
        java.lang.Object obj20 = properties18.remove((java.lang.Object) (-1.0d));
        boolean boolean21 = properties18.isEmpty();
        int int22 = properties18.size();
        java.lang.String str24 = properties18.getProperty("{}");
        boolean boolean25 = properties8.remove((java.lang.Object) recovery13, (java.lang.Object) properties18);
        boolean boolean26 = properties0.containsValue((java.lang.Object) properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties28 = atomikosProperties27.asProperties();
        atomikosProperties27.service = "{-1.0=100}";
        long long31 = atomikosProperties27.getDefaultJtaTimeout();
        atomikosProperties27.setTransactionManagerUniqueName("{}");
        java.lang.String str34 = atomikosProperties27.getService();
        java.util.Properties properties35 = atomikosProperties27.asProperties();
        java.util.Properties properties36 = new java.util.Properties();
        java.lang.String str37 = properties36.toString();
        java.lang.Object obj39 = properties36.remove((java.lang.Object) (short) 100);
        java.lang.Object obj42 = properties36.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj43 = properties36.clone();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet44 = properties36.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties45 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties46 = atomikosProperties45.asProperties();
        atomikosProperties45.service = "{-1.0=100}";
        java.lang.String str49 = atomikosProperties45.getTransactionManagerUniqueName();
        atomikosProperties45.consoleFileLimit = (byte) 10;
        long long52 = atomikosProperties45.maxTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel53 = atomikosProperties45.consoleLogLevel;
        atomikosProperties45.enableLogging = false;
        java.util.Properties properties56 = new java.util.Properties();
        java.lang.String str57 = properties56.toString();
        java.lang.Object obj59 = properties56.remove((java.lang.Object) (short) 100);
        java.lang.Object obj62 = properties56.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean64 = properties56.containsKey((java.lang.Object) 0L);
        java.lang.Object obj67 = properties56.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj70 = properties56.setProperty("", "{-1.0=100}");
        java.lang.Object obj71 = properties56.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery72 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery72.retryInterval = (short) 100;
        recovery72.forgetOrphanedLogEntriesDelay = 'a';
        boolean boolean77 = properties56.equals((java.lang.Object) 'a');
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery78 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long79 = recovery78.getRetryInterval();
        long long80 = recovery78.getDelay();
        long long81 = recovery78.getDelay();
        recovery78.retryInterval = 100L;
        boolean boolean84 = properties56.contains((java.lang.Object) recovery78);
        java.lang.String str85 = properties56.toString();
        java.util.Set<java.lang.String> strSet86 = properties56.stringPropertyNames();
        boolean boolean87 = properties36.remove((java.lang.Object) atomikosProperties45, (java.lang.Object) properties56);
        boolean boolean88 = properties8.remove((java.lang.Object) atomikosProperties27, (java.lang.Object) boolean87);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{1.0=-1}");
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(properties28);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 10000L + "'", long31 == 10000L);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "{-1.0=100}" + "'", str34, "{-1.0=100}");
        org.junit.Assert.assertNotNull(properties35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "{}" + "'", str37, "{}");
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEntrySet44);
        org.junit.Assert.assertNotNull(properties46);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 300000L + "'", long52 == 300000L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel53 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel53.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "{}" + "'", str57, "{}");
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertNull(obj70);
        org.junit.Assert.assertNotNull(obj71);
// flaky:         org.junit.Assert.assertEquals(obj71.toString(), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj71), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj71), "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 10000L + "'", long79 == 10000L);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 10000L + "'", long80 == 10000L);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 10000L + "'", long81 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str85 + "' != '" + "{={-1.0=100}, -1.0=100}" + "'", str85, "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNotNull(strSet86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test07539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07539");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        long long5 = atomikosProperties0.getMaxTimeout();
        int int6 = atomikosProperties0.consoleFileCount;
        long long7 = atomikosProperties0.getCheckpointInterval();
        atomikosProperties0.serialJtaTransactions = true;
        java.lang.String str10 = atomikosProperties0.logBaseName;
        long long11 = atomikosProperties0.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery12 = atomikosProperties0.recovery;
        boolean boolean13 = atomikosProperties0.serialJtaTransactions;
        boolean boolean14 = atomikosProperties0.isForceShutdownOnVmExit();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "tmlog" + "'", str10, "tmlog");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 500L + "'", long11 == 500L);
        org.junit.Assert.assertNotNull(recovery12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test07540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07540");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.remove((java.lang.Object) (-1.0d));
        boolean boolean4 = properties0.contains((java.lang.Object) "{-1.0=100}");
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties0.keys();
        java.util.Properties properties6 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties8 = atomikosProperties7.asProperties();
        atomikosProperties7.service = "{-1.0=100}";
        long long11 = atomikosProperties7.getDefaultJtaTimeout();
        atomikosProperties7.serialJtaTransactions = true;
        atomikosProperties7.maxActives = ' ';
        int int16 = atomikosProperties7.getConsoleFileCount();
        int int17 = atomikosProperties7.consoleFileLimit;
        java.util.Properties properties18 = atomikosProperties7.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean20 = atomikosProperties19.isSerialJtaTransactions();
        atomikosProperties19.logBaseName = "{-1.0=100}";
        int int23 = atomikosProperties19.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery24 = atomikosProperties19.getRecovery();
        atomikosProperties19.setConsoleFileCount((int) (byte) 100);
        atomikosProperties19.setAllowSubTransactions(true);
        atomikosProperties19.setService("tm.out");
        boolean boolean31 = atomikosProperties19.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel32 = atomikosProperties19.getConsoleLogLevel();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties33.setAllowSubTransactions(true);
        boolean boolean36 = atomikosProperties33.enableLogging;
        atomikosProperties33.consoleFileLimit = (byte) 100;
        java.util.Properties properties39 = new java.util.Properties();
        java.lang.String str40 = properties39.toString();
        java.util.Properties properties41 = new java.util.Properties(properties39);
        java.util.Properties properties43 = new java.util.Properties();
        java.lang.String str44 = properties43.toString();
        java.lang.Object obj46 = properties43.remove((java.lang.Object) (short) 100);
        java.lang.Object obj49 = properties43.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean51 = properties43.containsKey((java.lang.Object) 0L);
        java.lang.Object obj54 = properties43.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties55 = new java.util.Properties(properties43);
        java.util.Enumeration<java.lang.Object> objEnumeration56 = properties55.elements();
        atomikosProperties33.set(properties41, "{={-1.0=100}, -1.0=100}", (java.lang.Object) properties55);
        atomikosProperties33.allowSubTransactions = false;
        java.lang.Object obj60 = properties18.put((java.lang.Object) atomikosProperties19, (java.lang.Object) false);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel61 = atomikosProperties19.consoleLogLevel;
        java.lang.Object obj62 = properties0.get((java.lang.Object) atomikosLoggingLevel61);
        java.lang.Object obj63 = properties0.clone();
        java.lang.Object obj66 = properties0.setProperty("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir={={-1.0=100}, -1.0=100}, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.output_dir={1.0=-1, -1.0=100}, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={-1.0=100}, com.atomikos.icatch.force_shutdown_on_vm_exit=true, com.atomikos.icatch.default_jta_timeout=10000}", "{100=100}");
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10000L + "'", long11 == 10000L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 50 + "'", int23 == 50);
        org.junit.Assert.assertNotNull(recovery24);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel32 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel32.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "{}" + "'", str40, "{}");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "{}" + "'", str44, "{}");
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertNotNull(objEnumeration56);
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel61 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel61.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertNotNull(obj63);
        org.junit.Assert.assertEquals(obj63.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj63), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj63), "{}");
        org.junit.Assert.assertNull(obj66);
    }

    @Test
    public void test07541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07541");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        long long7 = atomikosProperties0.getDefaultJtaTimeout();
        long long8 = atomikosProperties0.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery9 = atomikosProperties0.getRecovery();
        java.lang.String str10 = atomikosProperties0.outputDir;
        atomikosProperties0.consoleFileCount = 32;
        atomikosProperties0.consoleFileLimit = (short) -1;
        boolean boolean15 = atomikosProperties0.serialJtaTransactions;
        atomikosProperties0.setOutputDir("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        atomikosProperties0.setMaxTimeout((long) 18);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(recovery9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test07542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07542");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        java.util.Properties properties7 = new java.util.Properties();
        java.lang.String str8 = properties7.toString();
        properties7.clear();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet10 = properties7.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties12 = atomikosProperties11.asProperties();
        atomikosProperties11.service = "{-1.0=100}";
        long long15 = atomikosProperties11.getDefaultJtaTimeout();
        atomikosProperties11.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties11.setMaxActives(100);
        java.lang.String str20 = atomikosProperties11.logBaseDir;
        atomikosProperties11.consoleFileCount = (short) 0;
        atomikosProperties11.defaultJtaTimeout = 10000L;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel25 = atomikosProperties11.consoleLogLevel;
        java.lang.Object obj26 = properties0.putIfAbsent((java.lang.Object) properties7, (java.lang.Object) atomikosLoggingLevel25);
        java.util.Properties properties27 = new java.util.Properties();
        java.lang.String str28 = properties27.toString();
        java.lang.Object obj30 = properties27.remove((java.lang.Object) (short) 100);
        java.lang.Object obj33 = properties27.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean35 = properties27.containsKey((java.lang.Object) 0L);
        java.lang.Object obj38 = properties27.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties39 = new java.util.Properties();
        java.lang.String str40 = properties39.toString();
        java.lang.Object obj42 = properties39.remove((java.lang.Object) (short) 100);
        java.lang.Object obj45 = properties39.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj46 = properties39.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration47 = properties39.elements();
        properties27.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties39);
        java.lang.Object obj49 = properties39.clone();
        java.util.Set<java.lang.String> strSet50 = properties39.stringPropertyNames();
        boolean boolean51 = properties7.containsKey((java.lang.Object) strSet50);
        java.lang.String str52 = properties7.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties53 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties54 = atomikosProperties53.asProperties();
        atomikosProperties53.service = "{-1.0=100}";
        long long57 = atomikosProperties53.getDefaultJtaTimeout();
        atomikosProperties53.serialJtaTransactions = true;
        atomikosProperties53.maxActives = ' ';
        int int62 = atomikosProperties53.getConsoleFileCount();
        int int63 = atomikosProperties53.consoleFileLimit;
        java.util.Properties properties64 = atomikosProperties53.asProperties();
        long long65 = atomikosProperties53.defaultJtaTimeout;
        java.lang.String str66 = atomikosProperties53.getLogBaseDir();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean67 = properties7.containsKey((java.lang.Object) str66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{}" + "'", str8, "{}");
        org.junit.Assert.assertNotNull(objEntrySet10);
        org.junit.Assert.assertNotNull(properties12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10000L + "'", long15 == 10000L);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel25 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel25.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "{}" + "'", str28, "{}");
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "{}" + "'", str40, "{}");
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertEquals(obj46.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj46), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj46), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration47);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "{1.0=-1}");
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "{}" + "'", str52, "{}");
        org.junit.Assert.assertNotNull(properties54);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 10000L + "'", long57 == 10000L);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(properties64);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 10000L + "'", long65 == 10000L);
        org.junit.Assert.assertNull(str66);
    }

    @Test
    public void test07543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07543");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileName = "hi!";
        atomikosProperties0.setCheckpointInterval((long) 5);
        atomikosProperties0.setService("");
        java.lang.String str11 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.forceShutdownOnVmExit = false;
        int int14 = atomikosProperties0.consoleFileCount;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
    }

    @Test
    public void test07544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07544");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileLimit = (byte) 10;
        long long7 = atomikosProperties0.getMaxTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel8 = null;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel8;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.recovery;
        atomikosProperties0.consoleFileCount = (short) -1;
        boolean boolean13 = atomikosProperties0.isAllowSubTransactions();
        atomikosProperties0.checkpointInterval = (short) 1;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery16 = atomikosProperties0.getRecovery();
        long long17 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(false);
        atomikosProperties0.maxActives = 50;
        java.lang.String str22 = atomikosProperties0.getConsoleFileName();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(recovery16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 300000L + "'", long17 == 300000L);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "tm.out" + "'", str22, "tm.out");
    }

    @Test
    public void test07545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07545");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery4 = atomikosProperties0.recovery;
        atomikosProperties0.enableLogging = true;
        int int7 = atomikosProperties0.getConsoleFileCount();
        atomikosProperties0.setMaxTimeout((long) (byte) -1);
        atomikosProperties0.setSerialJtaTransactions(true);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel12 = atomikosProperties0.getConsoleLogLevel();
        java.util.Properties properties13 = atomikosProperties0.asProperties();
        java.io.PrintWriter printWriter14 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties13.list(printWriter14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNotNull(recovery4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel12 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel12.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(properties13);
    }

    @Test
    public void test07546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07546");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        java.util.Properties properties2 = new java.util.Properties();
        java.lang.Object obj4 = properties2.remove((java.lang.Object) (-1.0d));
        boolean boolean5 = properties2.isEmpty();
        int int6 = properties2.size();
        java.lang.String str8 = properties2.getProperty("{}");
        java.lang.Object obj9 = properties1.remove((java.lang.Object) properties2);
        java.lang.String str11 = properties2.getProperty("tmlog");
        int int12 = properties2.size();
        java.util.Properties properties13 = new java.util.Properties();
        java.lang.String str14 = properties13.toString();
        java.util.Properties properties15 = new java.util.Properties(properties13);
        java.util.Properties properties16 = new java.util.Properties();
        java.lang.String str17 = properties16.toString();
        java.lang.Object obj19 = properties16.remove((java.lang.Object) (short) 100);
        java.lang.Object obj22 = properties16.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean24 = properties16.containsKey((java.lang.Object) 0L);
        java.lang.Object obj27 = properties16.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj30 = properties16.setProperty("", "{-1.0=100}");
        java.util.Enumeration<java.lang.Object> objEnumeration31 = properties16.keys();
        java.util.Properties properties32 = new java.util.Properties();
        java.lang.String str33 = properties32.toString();
        boolean boolean34 = properties32.isEmpty();
        java.lang.Object obj37 = properties32.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration38 = properties32.elements();
        java.lang.Object obj39 = properties15.replace((java.lang.Object) objEnumeration31, (java.lang.Object) properties32);
        java.util.Enumeration<java.lang.Object> objEnumeration40 = properties32.elements();
        java.util.Properties properties41 = new java.util.Properties(properties32);
        boolean boolean42 = properties2.containsKey((java.lang.Object) properties32);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties43 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean44 = atomikosProperties43.isSerialJtaTransactions();
        atomikosProperties43.logBaseName = "{-1.0=100}";
        int int47 = atomikosProperties43.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery48 = atomikosProperties43.getRecovery();
        atomikosProperties43.setConsoleFileCount((int) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel51 = null;
        atomikosProperties43.consoleLogLevel = atomikosLoggingLevel51;
        java.lang.String str53 = atomikosProperties43.logBaseDir;
        atomikosProperties43.checkpointInterval = (byte) 0;
        java.lang.String str56 = atomikosProperties43.getTransactionManagerUniqueName();
        java.lang.String str57 = atomikosProperties43.getOutputDir();
        java.lang.String str58 = atomikosProperties43.transactionManagerUniqueName;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery59 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery59.retryInterval = (short) 100;
        recovery59.forgetOrphanedLogEntriesDelay = 'a';
        long long64 = recovery59.getDelay();
        int int65 = recovery59.maxRetries;
        int int66 = recovery59.maxRetries;
        recovery59.setDelay((long) (-1));
        long long69 = recovery59.forgetOrphanedLogEntriesDelay;
        int int70 = recovery59.getMaxRetries();
        java.lang.Object obj71 = properties2.replace((java.lang.Object) atomikosProperties43, (java.lang.Object) recovery59);
        recovery59.setDelay(52L);
        int int74 = recovery59.maxRetries;
        long long75 = recovery59.getForgetOrphanedLogEntriesDelay();
        recovery59.setMaxRetries((int) (short) 0);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "{}" + "'", str14, "{}");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "{}" + "'", str17, "{}");
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNotNull(objEnumeration31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "{}" + "'", str33, "{}");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNotNull(objEnumeration38);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNotNull(objEnumeration40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 50 + "'", int47 == 50);
        org.junit.Assert.assertNotNull(recovery48);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 10000L + "'", long64 == 10000L);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 5 + "'", int65 == 5);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 5 + "'", int66 == 5);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 97L + "'", long69 == 97L);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 5 + "'", int70 == 5);
        org.junit.Assert.assertNull(obj71);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 5 + "'", int74 == 5);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 97L + "'", long75 == 97L);
    }

    @Test
    public void test07547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07547");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.remove((java.lang.Object) (-1.0d));
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties3 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties4 = atomikosProperties3.asProperties();
        atomikosProperties3.service = "{-1.0=100}";
        long long7 = atomikosProperties3.getDefaultJtaTimeout();
        atomikosProperties3.setThreadedTwoPhaseCommit(true);
        boolean boolean10 = atomikosProperties3.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery11 = atomikosProperties3.recovery;
        atomikosProperties3.setLogBaseDir("");
        long long14 = atomikosProperties3.maxTimeout;
        atomikosProperties3.setService("{={-1.0=100}, -1.0=100}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean18 = atomikosProperties17.isSerialJtaTransactions();
        atomikosProperties17.logBaseName = "{-1.0=100}";
        int int21 = atomikosProperties17.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery22 = atomikosProperties17.getRecovery();
        java.lang.String str23 = atomikosProperties17.getOutputDir();
        boolean boolean24 = atomikosProperties17.isForceShutdownOnVmExit();
        boolean boolean25 = atomikosProperties17.enableLogging;
        java.lang.Class<?> wildcardClass26 = atomikosProperties17.getClass();
        java.lang.Object obj27 = properties0.replace((java.lang.Object) atomikosProperties3, (java.lang.Object) wildcardClass26);
        atomikosProperties3.setLogBaseName("{{={-1.0=100}, -1.0=100}=}");
        java.lang.String str30 = atomikosProperties3.consoleFileName;
        atomikosProperties3.logBaseName = "";
        java.lang.String str33 = atomikosProperties3.getConsoleFileName();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNotNull(properties4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(recovery11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 300000L + "'", long14 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 50 + "'", int21 == 50);
        org.junit.Assert.assertNotNull(recovery22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "tm.out" + "'", str30, "tm.out");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "tm.out" + "'", str33, "tm.out");
    }

    @Test
    public void test07548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07548");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileLimit = (byte) 10;
        long long7 = atomikosProperties0.getMaxTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel8 = null;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel8;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.recovery;
        atomikosProperties0.setThreadedTwoPhaseCommit(false);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertNotNull(recovery10);
    }

    @Test
    public void test07549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07549");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties0.setService("tm.out");
        int int5 = atomikosProperties0.consoleFileLimit;
        java.util.Properties properties6 = atomikosProperties0.asProperties();
        java.io.OutputStream outputStream7 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties6.store(outputStream7, "{100=100}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(properties6);
    }

    @Test
    public void test07550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07550");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.remove((java.lang.Object) (-1.0d));
        boolean boolean3 = properties0.isEmpty();
        int int4 = properties0.size();
        java.lang.String str6 = properties0.getProperty("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean8 = atomikosProperties7.isSerialJtaTransactions();
        atomikosProperties7.logBaseName = "{-1.0=100}";
        int int11 = atomikosProperties7.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery12 = atomikosProperties7.getRecovery();
        atomikosProperties7.setConsoleFileCount((int) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel15 = null;
        atomikosProperties7.consoleLogLevel = atomikosLoggingLevel15;
        java.lang.String str17 = atomikosProperties7.logBaseDir;
        atomikosProperties7.checkpointInterval = (byte) 0;
        java.lang.String str20 = atomikosProperties7.getTransactionManagerUniqueName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties22 = atomikosProperties21.asProperties();
        java.util.Properties properties23 = new java.util.Properties();
        java.lang.Object obj25 = properties23.remove((java.lang.Object) (-1.0d));
        boolean boolean26 = properties23.isEmpty();
        int int27 = properties23.size();
        java.lang.String str29 = properties23.getProperty("{}");
        java.lang.Object obj30 = properties22.remove((java.lang.Object) properties23);
        java.util.Properties properties31 = new java.util.Properties();
        java.lang.String str32 = properties31.toString();
        java.util.Properties properties33 = new java.util.Properties(properties31);
        properties22.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties31);
        java.lang.Object obj35 = properties0.getOrDefault((java.lang.Object) atomikosProperties7, (java.lang.Object) properties31);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties38 = atomikosProperties37.asProperties();
        atomikosProperties37.service = "{-1.0=100}";
        long long41 = atomikosProperties37.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel42 = null;
        atomikosProperties37.setConsoleLogLevel(atomikosLoggingLevel42);
        int int44 = atomikosProperties37.maxActives;
        atomikosProperties37.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery47 = atomikosProperties37.getRecovery();
        atomikosProperties37.consoleFileName = "{-1.0=100}";
        atomikosProperties37.setSerialJtaTransactions(false);
        atomikosProperties37.consoleFileName = "{={-1.0=100}, -1.0=100}";
        boolean boolean54 = atomikosProperties37.isEnableLogging();
        atomikosProperties37.service = "tm.out";
        atomikosProperties37.setEnableLogging(true);
        boolean boolean59 = properties0.remove((java.lang.Object) 10000L, (java.lang.Object) true);
        java.lang.Object obj62 = properties0.setProperty("{-1.0=100}", "");
        int int63 = properties0.size();
        int int64 = properties0.size();
        java.util.Collection<java.lang.Object> objCollection65 = properties0.values();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 50 + "'", int11 == 50);
        org.junit.Assert.assertNotNull(recovery12);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(properties22);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "{}" + "'", str32, "{}");
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertEquals(obj35.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj35), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj35), "{}");
        org.junit.Assert.assertNotNull(properties38);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 10000L + "'", long41 == 10000L);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 50 + "'", int44 == 50);
        org.junit.Assert.assertNotNull(recovery47);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(objCollection65);
    }

    @Test
    public void test07551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07551");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setAllowSubTransactions(true);
        atomikosProperties0.maxActives = (short) -1;
        atomikosProperties0.setService("tm.out");
        java.lang.String str7 = atomikosProperties0.getService();
        atomikosProperties0.defaultJtaTimeout = 50;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean11 = atomikosProperties10.isThreadedTwoPhaseCommit();
        java.lang.String str12 = atomikosProperties10.logBaseDir;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery13 = atomikosProperties10.recovery;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel14 = atomikosProperties10.getConsoleLogLevel();
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel14);
        java.lang.String str16 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.outputDir = "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, false={100=100}, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}";
        atomikosProperties0.consoleFileCount = '4';
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "tm.out" + "'", str7, "tm.out");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(recovery13);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel14 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel14.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tm.out" + "'", str16, "tm.out");
    }

    @Test
    public void test07552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07552");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        atomikosProperties0.setConsoleFileCount((int) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel8 = null;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel8;
        int int10 = atomikosProperties0.consoleFileLimit;
        atomikosProperties0.transactionManagerUniqueName = "{-1.0=100}";
        atomikosProperties0.setDefaultJtaTimeout((long) '#');
        boolean boolean15 = atomikosProperties0.isAllowSubTransactions();
        java.util.Properties properties16 = atomikosProperties0.asProperties();
        java.util.Properties properties17 = new java.util.Properties();
        java.lang.Object obj19 = properties17.remove((java.lang.Object) (-1.0d));
        boolean boolean20 = properties17.isEmpty();
        int int21 = properties17.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties23 = atomikosProperties22.asProperties();
        atomikosProperties22.service = "{-1.0=100}";
        long long26 = atomikosProperties22.getDefaultJtaTimeout();
        atomikosProperties22.enableLogging = false;
        atomikosProperties22.setMaxActives((int) ' ');
        java.util.Properties properties31 = atomikosProperties22.asProperties();
        java.util.Enumeration<java.lang.Object> objEnumeration32 = properties31.elements();
        java.lang.Object obj33 = properties31.clone();
        properties17.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties31);
        java.util.Enumeration<java.lang.Object> objEnumeration35 = properties17.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties37 = atomikosProperties36.asProperties();
        atomikosProperties36.service = "{-1.0=100}";
        java.lang.String str40 = atomikosProperties36.getTransactionManagerUniqueName();
        atomikosProperties36.consoleFileLimit = (byte) 10;
        long long43 = atomikosProperties36.getMaxTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel44 = null;
        atomikosProperties36.consoleLogLevel = atomikosLoggingLevel44;
        atomikosProperties36.setService("");
        atomikosProperties36.setMaxTimeout((long) (short) -1);
        boolean boolean50 = atomikosProperties36.isSerialJtaTransactions();
        long long51 = atomikosProperties36.checkpointInterval;
        atomikosProperties36.setConsoleFileLimit(100);
        java.lang.Object obj54 = properties16.replace((java.lang.Object) objEnumeration35, (java.lang.Object) atomikosProperties36);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(properties23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 10000L + "'", long26 == 10000L);
        org.junit.Assert.assertNotNull(properties31);
        org.junit.Assert.assertNotNull(objEnumeration32);
        org.junit.Assert.assertNotNull(obj33);
// flaky:         org.junit.Assert.assertEquals(obj33.toString(), "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=32, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={-1.0=100}, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=32, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={-1.0=100}, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=32, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={-1.0=100}, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        org.junit.Assert.assertNotNull(objEnumeration35);
        org.junit.Assert.assertNotNull(properties37);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 300000L + "'", long43 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 500L + "'", long51 == 500L);
        org.junit.Assert.assertNull(obj54);
    }

    @Test
    public void test07553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07553");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.remove((java.lang.Object) (-1.0d));
        boolean boolean3 = properties0.isEmpty();
        java.lang.Object obj6 = properties0.setProperty("hi!", "{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery7 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery7.retryInterval = (short) 100;
        recovery7.setForgetOrphanedLogEntriesDelay((long) 5);
        recovery7.setRetryInterval((long) (-1));
        recovery7.retryInterval = (byte) 100;
        long long16 = recovery7.getDelay();
        long long17 = recovery7.forgetOrphanedLogEntriesDelay;
        recovery7.setForgetOrphanedLogEntriesDelay((long) (short) -1);
        long long20 = recovery7.getRetryInterval();
        long long21 = recovery7.retryInterval;
        boolean boolean22 = properties0.contains((java.lang.Object) long21);
        java.util.Enumeration<java.lang.Object> objEnumeration23 = properties0.keys();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10000L + "'", long16 == 10000L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 5L + "'", long17 == 5L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 100L + "'", long20 == 100L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 100L + "'", long21 == 100L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objEnumeration23);
    }

    @Test
    public void test07554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07554");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        atomikosProperties0.setConsoleFileCount((int) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel8 = null;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel8;
        java.lang.String str10 = atomikosProperties0.logBaseDir;
        java.lang.String str11 = atomikosProperties0.consoleFileName;
        int int12 = atomikosProperties0.getConsoleFileCount();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties13.setAllowSubTransactions(true);
        boolean boolean16 = atomikosProperties13.enableLogging;
        boolean boolean17 = atomikosProperties13.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel18 = atomikosProperties13.consoleLogLevel;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel18);
        java.lang.String str20 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setMaxActives((int) (short) 10);
        atomikosProperties0.setTransactionManagerUniqueName("{com.atomikos.icatch.={}, 100=100}");
        atomikosProperties0.maxTimeout = 2L;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "tm.out" + "'", str11, "tm.out");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel18 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel18.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test07555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07555");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        long long7 = atomikosProperties0.maxTimeout;
        atomikosProperties0.setLogBaseDir("{-1.0=100}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.setAllowSubTransactions(true);
        atomikosProperties10.maxActives = (short) -1;
        atomikosProperties10.setService("tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties17.setAllowSubTransactions(true);
        boolean boolean20 = atomikosProperties17.enableLogging;
        boolean boolean21 = atomikosProperties17.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel22 = atomikosProperties17.consoleLogLevel;
        atomikosProperties10.setConsoleLogLevel(atomikosLoggingLevel22);
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel22;
        atomikosProperties0.setConsoleFileCount((int) (byte) 0);
        java.util.Properties properties27 = atomikosProperties0.asProperties();
        atomikosProperties0.setLogBaseDir("{{}={}}");
        java.lang.String str30 = atomikosProperties0.getOutputDir();
        atomikosProperties0.setService("{com.atomikos.icatch.console_file_name=hi!, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.output_dir=tm.out, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={-1.0=100}, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery33 = atomikosProperties0.recovery;
        long long34 = recovery33.getRetryInterval();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel22 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel22.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(properties27);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(recovery33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 10000L + "'", long34 == 10000L);
    }

    @Test
    public void test07556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07556");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        long long7 = atomikosProperties0.getDefaultJtaTimeout();
        long long8 = atomikosProperties0.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery9 = atomikosProperties0.getRecovery();
        java.lang.String str10 = atomikosProperties0.outputDir;
        int int11 = atomikosProperties0.consoleFileCount;
        atomikosProperties0.setMaxTimeout((long) 3);
        java.lang.String str14 = atomikosProperties0.getConsoleFileName();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(recovery9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "tm.out" + "'", str14, "tm.out");
    }

    @Test
    public void test07557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07557");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        java.util.Properties properties8 = new java.util.Properties();
        java.lang.String str9 = properties8.toString();
        java.lang.Object obj11 = properties8.remove((java.lang.Object) (short) 100);
        java.lang.Object obj14 = properties8.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj15 = properties8.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration16 = properties8.elements();
        java.lang.Object obj17 = properties0.putIfAbsent((java.lang.Object) 10.0f, (java.lang.Object) objEnumeration16);
        java.util.Properties properties18 = new java.util.Properties();
        java.util.Enumeration<?> wildcardEnumeration19 = properties18.propertyNames();
        java.lang.Object obj20 = properties18.clone();
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.String str22 = properties21.toString();
        boolean boolean23 = properties21.isEmpty();
        java.lang.Object obj26 = properties21.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties21.elements();
        java.lang.Object obj28 = properties0.put(obj20, (java.lang.Object) objEnumeration27);
        properties0.clear();
        java.util.Properties properties30 = new java.util.Properties();
        java.util.Properties properties31 = new java.util.Properties();
        java.lang.Object obj33 = properties31.remove((java.lang.Object) (-1.0d));
        int int34 = properties31.size();
        java.util.Enumeration<java.lang.Object> objEnumeration35 = properties31.elements();
        java.util.Properties properties36 = new java.util.Properties();
        properties36.clear();
        java.lang.String str38 = properties36.toString();
        boolean boolean39 = properties0.replace((java.lang.Object) properties30, (java.lang.Object) properties31, (java.lang.Object) str38);
        java.util.Enumeration<java.lang.Object> objEnumeration40 = properties31.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean42 = atomikosProperties41.isSerialJtaTransactions();
        atomikosProperties41.logBaseName = "{-1.0=100}";
        int int45 = atomikosProperties41.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery46 = atomikosProperties41.getRecovery();
        atomikosProperties41.setConsoleFileCount((int) (byte) 100);
        atomikosProperties41.setAllowSubTransactions(true);
        atomikosProperties41.setService("tm.out");
        atomikosProperties41.serialJtaTransactions = true;
        atomikosProperties41.service = "{com.atomikos.icatch.{}=5}";
        atomikosProperties41.setTransactionManagerUniqueName("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties59 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties59.outputDir = "{={-1.0=100}, -1.0=100}";
        java.lang.Object obj62 = properties31.put((java.lang.Object) atomikosProperties41, (java.lang.Object) "{={-1.0=100}, -1.0=100}");
        java.lang.String str65 = properties31.getProperty("tm.out", "{{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}=, ={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{}" + "'", str9, "{}");
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration16);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(wildcardEnumeration19);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{}");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{}" + "'", str22, "{}");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(objEnumeration35);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "{}" + "'", str38, "{}");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(objEnumeration40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 50 + "'", int45 == 50);
        org.junit.Assert.assertNotNull(recovery46);
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "{{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}=, ={-1.0=100}, -1.0=100}" + "'", str65, "{{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}=, ={-1.0=100}, -1.0=100}");
    }

    @Test
    public void test07558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07558");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        atomikosProperties0.maxActives = ' ';
        int int9 = atomikosProperties0.getConsoleFileCount();
        long long10 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties12 = atomikosProperties11.asProperties();
        atomikosProperties11.service = "{-1.0=100}";
        java.lang.String str15 = atomikosProperties11.getTransactionManagerUniqueName();
        boolean boolean16 = atomikosProperties11.isSerialJtaTransactions();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel17 = atomikosProperties11.getConsoleLogLevel();
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel17);
        java.lang.String str19 = atomikosProperties0.getLogBaseDir();
        long long20 = atomikosProperties0.maxTimeout;
        java.lang.String str21 = atomikosProperties0.logBaseDir;
        java.lang.String str22 = atomikosProperties0.service;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
        org.junit.Assert.assertNotNull(properties12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel17 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel17.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 300000L + "'", long20 == 300000L);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{-1.0=100}" + "'", str22, "{-1.0=100}");
    }

    @Test
    public void test07559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07559");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        long long7 = atomikosProperties0.getDefaultJtaTimeout();
        long long8 = atomikosProperties0.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery9 = atomikosProperties0.getRecovery();
        java.lang.String str10 = atomikosProperties0.outputDir;
        long long11 = atomikosProperties0.maxTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel12 = atomikosProperties0.getConsoleLogLevel();
        java.lang.String str13 = atomikosProperties0.consoleFileName;
        boolean boolean14 = atomikosProperties0.threadedTwoPhaseCommit;
        atomikosProperties0.setOutputDir("");
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(recovery9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 300000L + "'", long11 == 300000L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel12 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel12.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tm.out" + "'", str13, "tm.out");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test07560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07560");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        atomikosProperties0.maxActives = ' ';
        int int9 = atomikosProperties0.getConsoleFileCount();
        int int10 = atomikosProperties0.consoleFileLimit;
        java.util.Properties properties11 = atomikosProperties0.asProperties();
        long long12 = atomikosProperties0.defaultJtaTimeout;
        java.lang.String str13 = atomikosProperties0.getLogBaseDir();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel14 = atomikosProperties0.getConsoleLogLevel();
        atomikosProperties0.consoleFileCount = 2;
        atomikosProperties0.logBaseName = "{={-1.0=100}, -1.0=100}";
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10000L + "'", long12 == 10000L);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel14 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel14.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
    }

    @Test
    public void test07561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07561");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.remove((java.lang.Object) (-1.0d));
        boolean boolean3 = properties0.isEmpty();
        java.util.Properties properties4 = new java.util.Properties();
        java.lang.String str5 = properties4.toString();
        java.lang.Object obj7 = properties4.remove((java.lang.Object) (short) 100);
        java.lang.Object obj10 = properties4.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean12 = properties4.containsKey((java.lang.Object) 0L);
        java.lang.Object obj15 = properties4.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj18 = properties4.setProperty("", "{-1.0=100}");
        java.lang.Object obj19 = properties4.clone();
        java.lang.Object obj20 = properties0.get((java.lang.Object) properties4);
        java.lang.Object obj21 = properties4.clone();
        int int22 = properties4.size();
        java.lang.String str23 = properties4.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties25 = atomikosProperties24.asProperties();
        atomikosProperties24.service = "{-1.0=100}";
        long long28 = atomikosProperties24.getDefaultJtaTimeout();
        atomikosProperties24.outputDir = "{={-1.0=100}, -1.0=100}";
        long long31 = atomikosProperties24.getCheckpointInterval();
        boolean boolean32 = atomikosProperties24.isThreadedTwoPhaseCommit();
        java.lang.String str33 = atomikosProperties24.service;
        int int34 = atomikosProperties24.consoleFileCount;
        atomikosProperties24.logBaseName = "tm.out";
        java.lang.String str37 = atomikosProperties24.getService();
        java.lang.String str38 = atomikosProperties24.logBaseName;
        java.lang.String str39 = atomikosProperties24.getTransactionManagerUniqueName();
        java.util.Properties properties40 = new java.util.Properties();
        java.lang.Object obj42 = properties40.remove((java.lang.Object) (-1.0d));
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties43 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties44 = atomikosProperties43.asProperties();
        atomikosProperties43.service = "{-1.0=100}";
        long long47 = atomikosProperties43.getDefaultJtaTimeout();
        atomikosProperties43.setThreadedTwoPhaseCommit(true);
        boolean boolean50 = atomikosProperties43.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery51 = atomikosProperties43.recovery;
        atomikosProperties43.setLogBaseDir("");
        long long54 = atomikosProperties43.maxTimeout;
        atomikosProperties43.setService("{={-1.0=100}, -1.0=100}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties57 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean58 = atomikosProperties57.isSerialJtaTransactions();
        atomikosProperties57.logBaseName = "{-1.0=100}";
        int int61 = atomikosProperties57.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery62 = atomikosProperties57.getRecovery();
        java.lang.String str63 = atomikosProperties57.getOutputDir();
        boolean boolean64 = atomikosProperties57.isForceShutdownOnVmExit();
        boolean boolean65 = atomikosProperties57.enableLogging;
        java.lang.Class<?> wildcardClass66 = atomikosProperties57.getClass();
        java.lang.Object obj67 = properties40.replace((java.lang.Object) atomikosProperties43, (java.lang.Object) wildcardClass66);
        java.util.Set<java.lang.String> strSet68 = properties40.stringPropertyNames();
        boolean boolean69 = properties4.remove((java.lang.Object) atomikosProperties24, (java.lang.Object) properties40);
        boolean boolean70 = properties4.isEmpty();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{}" + "'", str5, "{}");
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(obj19);
// flaky:         org.junit.Assert.assertEquals(obj19.toString(), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNotNull(obj21);
// flaky:         org.junit.Assert.assertEquals(obj21.toString(), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "{={-1.0=100}, -1.0=100}" + "'", str23, "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 10000L + "'", long28 == 10000L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 500L + "'", long31 == 500L);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "{-1.0=100}" + "'", str33, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "{-1.0=100}" + "'", str37, "{-1.0=100}");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tm.out" + "'", str38, "tm.out");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertNotNull(properties44);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 10000L + "'", long47 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(recovery51);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 300000L + "'", long54 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 50 + "'", int61 == 50);
        org.junit.Assert.assertNotNull(recovery62);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertNotNull(strSet68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test07562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07562");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setTransactionManagerUniqueName("{}");
        atomikosProperties0.consoleFileName = "hi!";
        int int9 = atomikosProperties0.getConsoleFileCount();
        long long10 = atomikosProperties0.getMaxTimeout();
        long long11 = atomikosProperties0.defaultJtaTimeout;
        boolean boolean12 = atomikosProperties0.isSerialJtaTransactions();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 300000L + "'", long10 == 300000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10000L + "'", long11 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test07563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07563");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.enableLogging = false;
        atomikosProperties0.setMaxActives((int) ' ');
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties9.setAllowSubTransactions(true);
        boolean boolean12 = atomikosProperties9.enableLogging;
        boolean boolean13 = atomikosProperties9.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel14 = atomikosProperties9.consoleLogLevel;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel14);
        java.util.Properties properties16 = atomikosProperties0.asProperties();
        atomikosProperties0.logBaseName = "{{}={}}";
        java.lang.String str19 = atomikosProperties0.getService();
        atomikosProperties0.service = "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=32, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={-1.0=100}, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}";
        atomikosProperties0.threadedTwoPhaseCommit = false;
        java.lang.String str24 = atomikosProperties0.getConsoleFileName();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel14 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel14.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "{-1.0=100}" + "'", str19, "{-1.0=100}");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "tm.out" + "'", str24, "tm.out");
    }

    @Test
    public void test07564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07564");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.remove((java.lang.Object) (-1.0d));
        boolean boolean3 = properties0.isEmpty();
        java.util.Properties properties4 = new java.util.Properties();
        java.lang.String str5 = properties4.toString();
        java.lang.Object obj7 = properties4.remove((java.lang.Object) (short) 100);
        java.lang.Object obj10 = properties4.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean12 = properties4.containsKey((java.lang.Object) 0L);
        java.lang.Object obj15 = properties4.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj18 = properties4.setProperty("", "{-1.0=100}");
        java.lang.Object obj19 = properties4.clone();
        java.lang.Object obj20 = properties0.get((java.lang.Object) properties4);
        java.lang.Object obj21 = properties4.clone();
        int int22 = properties4.size();
        java.lang.Object obj23 = properties4.clone();
        java.util.Properties properties24 = new java.util.Properties();
        java.lang.Object obj26 = properties24.remove((java.lang.Object) (-1.0d));
        boolean boolean28 = properties24.contains((java.lang.Object) "{-1.0=100}");
        java.util.Enumeration<?> wildcardEnumeration29 = properties24.propertyNames();
        java.lang.Object obj30 = properties24.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties32 = atomikosProperties31.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties34 = atomikosProperties33.asProperties();
        atomikosProperties33.service = "{-1.0=100}";
        long long37 = atomikosProperties33.getDefaultJtaTimeout();
        atomikosProperties33.consoleFileLimit = '#';
        java.lang.Object obj40 = properties32.get((java.lang.Object) atomikosProperties33);
        boolean boolean41 = atomikosProperties33.forceShutdownOnVmExit;
        atomikosProperties33.setOutputDir("");
        atomikosProperties33.setThreadedTwoPhaseCommit(false);
        boolean boolean46 = atomikosProperties33.isThreadedTwoPhaseCommit();
        java.lang.Object obj47 = properties4.putIfAbsent(obj30, (java.lang.Object) atomikosProperties33);
        atomikosProperties33.service = "{1.0=-1, -1.0=100}";
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties51 = atomikosProperties50.asProperties();
        atomikosProperties50.service = "{-1.0=100}";
        long long54 = atomikosProperties50.getDefaultJtaTimeout();
        atomikosProperties50.serialJtaTransactions = true;
        atomikosProperties50.maxActives = ' ';
        boolean boolean59 = atomikosProperties50.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery60 = atomikosProperties50.getRecovery();
        atomikosProperties50.logBaseDir = "{1.0=-1, -1.0=100}";
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel63 = atomikosProperties50.getConsoleLogLevel();
        atomikosProperties33.setConsoleLogLevel(atomikosLoggingLevel63);
        boolean boolean65 = atomikosProperties33.allowSubTransactions;
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{}" + "'", str5, "{}");
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(obj19);
// flaky:         org.junit.Assert.assertEquals(obj19.toString(), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNotNull(obj21);
// flaky:         org.junit.Assert.assertEquals(obj21.toString(), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(obj23);
// flaky:         org.junit.Assert.assertEquals(obj23.toString(), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardEnumeration29);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "{}");
        org.junit.Assert.assertNotNull(properties32);
        org.junit.Assert.assertNotNull(properties34);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 10000L + "'", long37 == 10000L);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNotNull(properties51);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 10000L + "'", long54 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(recovery60);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel63 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel63.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
    }

    @Test
    public void test07565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07565");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        boolean boolean7 = atomikosProperties0.isAllowSubTransactions();
        int int8 = atomikosProperties0.getConsoleFileLimit();
        atomikosProperties0.setForceShutdownOnVmExit(false);
        long long11 = atomikosProperties0.defaultJtaTimeout;
        java.util.Properties properties12 = new java.util.Properties();
        java.lang.String str13 = properties12.toString();
        java.lang.Object obj15 = properties12.remove((java.lang.Object) (short) 100);
        java.lang.Object obj18 = properties12.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj19 = properties12.clone();
        java.util.Set<java.lang.String> strSet20 = properties12.stringPropertyNames();
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.String str22 = properties21.toString();
        java.lang.Object obj24 = properties21.remove((java.lang.Object) (short) 100);
        java.lang.Object obj27 = properties21.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean29 = properties21.containsKey((java.lang.Object) 0L);
        java.lang.Object obj32 = properties21.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties33 = new java.util.Properties();
        java.lang.String str34 = properties33.toString();
        java.lang.Object obj36 = properties33.remove((java.lang.Object) (short) 100);
        java.lang.Object obj39 = properties33.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj40 = properties33.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration41 = properties33.elements();
        properties21.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties33);
        java.util.Properties properties43 = new java.util.Properties();
        java.lang.String str44 = properties43.toString();
        java.lang.Object obj46 = properties43.remove((java.lang.Object) (short) 100);
        java.lang.Object obj49 = properties43.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean51 = properties43.containsKey((java.lang.Object) 0L);
        java.lang.Object obj54 = properties43.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties55 = new java.util.Properties();
        java.lang.String str56 = properties55.toString();
        java.lang.Object obj58 = properties55.remove((java.lang.Object) (short) 100);
        java.lang.Object obj61 = properties55.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj62 = properties55.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration63 = properties55.elements();
        properties43.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties55);
        java.lang.Object obj65 = properties12.putIfAbsent((java.lang.Object) properties21, (java.lang.Object) properties55);
        java.util.Enumeration<java.lang.Object> objEnumeration66 = properties12.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties68 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean69 = atomikosProperties68.isSerialJtaTransactions();
        atomikosProperties68.logBaseName = "{-1.0=100}";
        int int72 = atomikosProperties68.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery73 = atomikosProperties68.getRecovery();
        java.lang.String str74 = atomikosProperties68.getLogBaseName();
        atomikosProperties68.setCheckpointInterval((long) 32);
        atomikosProperties0.set(properties12, "{-1.0=100}", (java.lang.Object) atomikosProperties68);
        atomikosProperties68.setCheckpointInterval((long) '#');
        java.lang.String str80 = atomikosProperties68.getLogBaseDir();
        int int81 = atomikosProperties68.maxActives;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10000L + "'", long11 == 10000L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{}" + "'", str13, "{}");
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "{1.0=-1}");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{}" + "'", str22, "{}");
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "{}" + "'", str34, "{}");
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertEquals(obj40.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration41);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "{}" + "'", str44, "{}");
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "{}" + "'", str56, "{}");
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertNull(obj61);
        org.junit.Assert.assertNotNull(obj62);
        org.junit.Assert.assertEquals(obj62.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj62), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj62), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration63);
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertNotNull(objEnumeration66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 50 + "'", int72 == 50);
        org.junit.Assert.assertNotNull(recovery73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "{-1.0=100}" + "'", str74, "{-1.0=100}");
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 50 + "'", int81 == 50);
    }

    @Test
    public void test07566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07566");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        atomikosProperties0.setConsoleFileCount((int) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel8 = null;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel8;
        java.lang.String str10 = atomikosProperties0.logBaseDir;
        atomikosProperties0.checkpointInterval = (byte) 0;
        java.lang.String str13 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.serialJtaTransactions = true;
        java.lang.String str16 = atomikosProperties0.getLogBaseDir();
        boolean boolean17 = atomikosProperties0.isSerialJtaTransactions();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test07567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07567");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.remove((java.lang.Object) (-1.0d));
        boolean boolean3 = properties0.isEmpty();
        java.util.Collection<java.lang.Object> objCollection4 = properties0.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties6 = atomikosProperties5.asProperties();
        atomikosProperties5.service = "{-1.0=100}";
        long long9 = atomikosProperties5.getDefaultJtaTimeout();
        atomikosProperties5.serialJtaTransactions = true;
        long long12 = atomikosProperties5.getDefaultJtaTimeout();
        long long13 = atomikosProperties5.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery14 = atomikosProperties5.getRecovery();
        long long15 = recovery14.delay;
        int int16 = recovery14.maxRetries;
        java.lang.Object obj17 = properties0.get((java.lang.Object) int16);
        java.util.Properties properties18 = new java.util.Properties();
        java.lang.String str19 = properties18.toString();
        java.lang.Object obj21 = properties18.remove((java.lang.Object) (short) 100);
        java.util.Properties properties22 = new java.util.Properties();
        java.lang.String str23 = properties22.toString();
        boolean boolean24 = properties22.isEmpty();
        java.lang.Object obj27 = properties22.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration28 = properties22.elements();
        boolean boolean29 = properties18.containsKey((java.lang.Object) properties22);
        java.util.Enumeration<?> wildcardEnumeration30 = properties18.propertyNames();
        java.util.Properties properties31 = new java.util.Properties();
        java.lang.Object obj33 = properties31.remove((java.lang.Object) (-1.0d));
        boolean boolean34 = properties31.isEmpty();
        java.lang.Object obj37 = properties31.setProperty("hi!", "{}");
        java.util.Set<java.lang.String> strSet38 = properties31.stringPropertyNames();
        java.lang.Object obj39 = properties18.get((java.lang.Object) properties31);
        java.lang.Object obj40 = properties18.clone();
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties18);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties43 = atomikosProperties42.asProperties();
        atomikosProperties42.service = "{-1.0=100}";
        long long46 = atomikosProperties42.getDefaultJtaTimeout();
        atomikosProperties42.serialJtaTransactions = true;
        long long49 = atomikosProperties42.getDefaultJtaTimeout();
        long long50 = atomikosProperties42.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery51 = atomikosProperties42.getRecovery();
        java.lang.String str52 = atomikosProperties42.outputDir;
        atomikosProperties42.setTransactionManagerUniqueName("");
        atomikosProperties42.setTransactionManagerUniqueName("");
        atomikosProperties42.setLogBaseDir("{{}={}}");
        java.lang.String str59 = atomikosProperties42.getConsoleFileName();
        atomikosProperties42.maxTimeout = (short) 1;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties62 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties63 = atomikosProperties62.asProperties();
        atomikosProperties62.service = "{-1.0=100}";
        long long66 = atomikosProperties62.getDefaultJtaTimeout();
        atomikosProperties62.serialJtaTransactions = true;
        long long69 = atomikosProperties62.getDefaultJtaTimeout();
        long long70 = atomikosProperties62.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery71 = atomikosProperties62.getRecovery();
        long long72 = recovery71.delay;
        recovery71.maxRetries = (-1);
        recovery71.maxRetries = 10;
        boolean boolean77 = properties0.remove((java.lang.Object) atomikosProperties42, (java.lang.Object) recovery71);
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(objCollection4);
        org.junit.Assert.assertNotNull(properties6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10000L + "'", long9 == 10000L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10000L + "'", long12 == 10000L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 500L + "'", long13 == 500L);
        org.junit.Assert.assertNotNull(recovery14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10000L + "'", long15 == 10000L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "{}" + "'", str19, "{}");
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "{}" + "'", str23, "{}");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNotNull(objEnumeration28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(wildcardEnumeration30);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertEquals(obj40.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "{}");
        org.junit.Assert.assertNotNull(properties43);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 10000L + "'", long46 == 10000L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 10000L + "'", long49 == 10000L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 500L + "'", long50 == 500L);
        org.junit.Assert.assertNotNull(recovery51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "tm.out" + "'", str59, "tm.out");
        org.junit.Assert.assertNotNull(properties63);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 10000L + "'", long66 == 10000L);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 10000L + "'", long69 == 10000L);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 500L + "'", long70 == 500L);
        org.junit.Assert.assertNotNull(recovery71);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 10000L + "'", long72 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test07568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07568");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        boolean boolean2 = properties0.isEmpty();
        java.lang.Object obj5 = properties0.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration6 = properties0.elements();
        java.util.Properties properties7 = new java.util.Properties();
        java.util.Properties properties8 = new java.util.Properties(properties7);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery9 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery9.retryInterval = (short) 100;
        recovery9.forgetOrphanedLogEntriesDelay = 'a';
        long long14 = recovery9.retryInterval;
        recovery9.forgetOrphanedLogEntriesDelay = 0L;
        long long17 = recovery9.getForgetOrphanedLogEntriesDelay();
        recovery9.setRetryInterval((long) 0);
        boolean boolean20 = properties0.remove((java.lang.Object) properties8, (java.lang.Object) 0);
        java.lang.String str22 = properties8.getProperty("hi!");
        java.util.Set<java.lang.Object> objSet23 = properties8.keySet();
        java.util.Collection<java.lang.Object> objCollection24 = properties8.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties26 = atomikosProperties25.asProperties();
        atomikosProperties25.service = "{-1.0=100}";
        long long29 = atomikosProperties25.getDefaultJtaTimeout();
        atomikosProperties25.outputDir = "{={-1.0=100}, -1.0=100}";
        long long32 = atomikosProperties25.getCheckpointInterval();
        boolean boolean33 = atomikosProperties25.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel34 = atomikosProperties25.getConsoleLogLevel();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean36 = atomikosProperties35.isSerialJtaTransactions();
        atomikosProperties35.logBaseName = "{-1.0=100}";
        int int39 = atomikosProperties35.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery40 = atomikosProperties35.getRecovery();
        int int41 = atomikosProperties35.getConsoleFileCount();
        java.lang.String str42 = atomikosProperties35.logBaseName;
        java.lang.String str43 = atomikosProperties35.getOutputDir();
        java.lang.Object obj44 = properties8.getOrDefault((java.lang.Object) atomikosLoggingLevel34, (java.lang.Object) str43);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties45 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties46 = atomikosProperties45.asProperties();
        atomikosProperties45.service = "{-1.0=100}";
        long long49 = atomikosProperties45.getDefaultJtaTimeout();
        atomikosProperties45.setThreadedTwoPhaseCommit(true);
        boolean boolean52 = atomikosProperties45.isAllowSubTransactions();
        int int53 = atomikosProperties45.getConsoleFileLimit();
        boolean boolean54 = atomikosProperties45.forceShutdownOnVmExit;
        atomikosProperties45.setMaxTimeout(300000L);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery57 = atomikosProperties45.getRecovery();
        boolean boolean58 = properties8.contains((java.lang.Object) atomikosProperties45);
        java.util.Properties properties59 = new java.util.Properties(properties8);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(objEnumeration6);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 100L + "'", long14 == 100L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(objSet23);
        org.junit.Assert.assertNotNull(objCollection24);
        org.junit.Assert.assertNotNull(properties26);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 10000L + "'", long29 == 10000L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 500L + "'", long32 == 500L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel34 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel34.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 50 + "'", int39 == 50);
        org.junit.Assert.assertNotNull(recovery40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "{-1.0=100}" + "'", str42, "{-1.0=100}");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNotNull(properties46);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 10000L + "'", long49 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(recovery57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test07569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07569");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        atomikosProperties0.setConsoleFileCount((int) (byte) 100);
        atomikosProperties0.setAllowSubTransactions(true);
        atomikosProperties0.setService("tm.out");
        boolean boolean12 = atomikosProperties0.isForceShutdownOnVmExit();
        boolean boolean13 = atomikosProperties0.isAllowSubTransactions();
        atomikosProperties0.setLogBaseName("");
        boolean boolean16 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.setTransactionManagerUniqueName("{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}");
        java.util.Properties properties19 = new java.util.Properties();
        java.lang.String str20 = properties19.toString();
        java.lang.Object obj22 = properties19.remove((java.lang.Object) (short) 100);
        java.lang.Object obj25 = properties19.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean27 = properties19.containsKey((java.lang.Object) 0L);
        java.lang.Object obj30 = properties19.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj33 = properties19.setProperty("", "{-1.0=100}");
        java.lang.String str34 = properties19.toString();
        java.util.Set<java.lang.String> strSet35 = properties19.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties37 = atomikosProperties36.asProperties();
        atomikosProperties36.service = "{-1.0=100}";
        long long40 = atomikosProperties36.getDefaultJtaTimeout();
        atomikosProperties36.enableLogging = false;
        atomikosProperties36.setMaxTimeout((long) (byte) 0);
        atomikosProperties36.setAllowSubTransactions(true);
        java.util.Properties properties47 = new java.util.Properties();
        java.lang.Object obj49 = properties47.remove((java.lang.Object) (-1.0d));
        boolean boolean50 = properties47.isEmpty();
        java.util.Collection<java.lang.Object> objCollection51 = properties47.values();
        java.lang.Object obj52 = properties19.put((java.lang.Object) true, (java.lang.Object) properties47);
        java.util.Properties properties53 = new java.util.Properties(properties47);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties55 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean56 = atomikosProperties55.isSerialJtaTransactions();
        atomikosProperties55.logBaseName = "{-1.0=100}";
        int int59 = atomikosProperties55.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery60 = atomikosProperties55.getRecovery();
        atomikosProperties55.setConsoleFileCount((int) (byte) 100);
        java.lang.String str63 = atomikosProperties55.logBaseName;
        atomikosProperties55.setCheckpointInterval((long) 18);
        atomikosProperties0.set(properties47, "hi!", (java.lang.Object) atomikosProperties55);
        atomikosProperties55.setCheckpointInterval((long) (short) 0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{}" + "'", str20, "{}");
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNull(obj33);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "{={-1.0=100}, -1.0=100}" + "'", str34, "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertNotNull(properties37);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 10000L + "'", long40 == 10000L);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(objCollection51);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 50 + "'", int59 == 50);
        org.junit.Assert.assertNotNull(recovery60);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "{-1.0=100}" + "'", str63, "{-1.0=100}");
    }

    @Test
    public void test07570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07570");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long1 = recovery0.getRetryInterval();
        long long2 = recovery0.getDelay();
        int int3 = recovery0.getMaxRetries();
        long long4 = recovery0.getRetryInterval();
        recovery0.setRetryInterval(0L);
        recovery0.setRetryInterval((long) 10);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 10000L + "'", long1 == 10000L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10000L + "'", long2 == 10000L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 5 + "'", int3 == 5);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
    }

    @Test
    public void test07571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07571");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        boolean boolean7 = atomikosProperties0.isAllowSubTransactions();
        boolean boolean8 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.allowSubTransactions = false;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel11 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel11);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery13 = atomikosProperties0.recovery;
        boolean boolean14 = atomikosProperties0.serialJtaTransactions;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(recovery13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test07572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07572");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        long long7 = atomikosProperties0.getDefaultJtaTimeout();
        long long8 = atomikosProperties0.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery9 = atomikosProperties0.getRecovery();
        recovery9.setRetryInterval((long) (byte) 0);
        recovery9.setRetryInterval((long) (byte) 10);
        int int14 = recovery9.maxRetries;
        long long15 = recovery9.getDelay();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(recovery9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10000L + "'", long15 == 10000L);
    }

    @Test
    public void test07573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07573");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj7 = properties0.clone();
        java.util.Set<java.lang.String> strSet8 = properties0.stringPropertyNames();
        java.util.Properties properties9 = new java.util.Properties(properties0);
        java.lang.String str11 = properties9.getProperty("hi!");
        java.lang.String str13 = properties9.getProperty("{1.0=-1}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties15 = atomikosProperties14.asProperties();
        atomikosProperties14.service = "{-1.0=100}";
        long long18 = atomikosProperties14.getDefaultJtaTimeout();
        atomikosProperties14.serialJtaTransactions = true;
        long long21 = atomikosProperties14.maxTimeout;
        atomikosProperties14.setLogBaseDir("{-1.0=100}");
        int int24 = atomikosProperties14.getConsoleFileCount();
        atomikosProperties14.maxTimeout = (short) 100;
        boolean boolean27 = properties9.equals((java.lang.Object) atomikosProperties14);
        java.io.PrintWriter printWriter28 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties9.list(printWriter28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{1.0=-1}");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10000L + "'", long18 == 10000L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 300000L + "'", long21 == 300000L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test07574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07574");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.outputDir = "{={-1.0=100}, -1.0=100}";
        int int7 = atomikosProperties0.getConsoleFileLimit();
        boolean boolean8 = atomikosProperties0.isSerialJtaTransactions();
        int int9 = atomikosProperties0.getConsoleFileLimit();
        long long10 = atomikosProperties0.getCheckpointInterval();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 500L + "'", long10 == 500L);
    }

    @Test
    public void test07575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07575");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Enumeration<?> wildcardEnumeration1 = properties0.propertyNames();
        java.util.Set<java.lang.String> strSet2 = properties0.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties3 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties4 = atomikosProperties3.asProperties();
        atomikosProperties3.service = "{-1.0=100}";
        long long7 = atomikosProperties3.getDefaultJtaTimeout();
        long long8 = atomikosProperties3.getMaxTimeout();
        boolean boolean9 = atomikosProperties3.serialJtaTransactions;
        atomikosProperties3.forceShutdownOnVmExit = true;
        long long12 = atomikosProperties3.defaultJtaTimeout;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties14 = atomikosProperties13.asProperties();
        atomikosProperties13.service = "{-1.0=100}";
        long long17 = atomikosProperties13.getDefaultJtaTimeout();
        atomikosProperties13.serialJtaTransactions = true;
        long long20 = atomikosProperties13.maxTimeout;
        boolean boolean21 = atomikosProperties13.isThreadedTwoPhaseCommit();
        atomikosProperties13.setCheckpointInterval(1L);
        atomikosProperties13.setOutputDir("{}");
        atomikosProperties13.consoleFileLimit = (-1);
        java.lang.Object obj28 = properties0.put((java.lang.Object) long12, (java.lang.Object) atomikosProperties13);
        atomikosProperties13.consoleFileLimit = '4';
        org.junit.Assert.assertNotNull(wildcardEnumeration1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(properties4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 300000L + "'", long8 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10000L + "'", long12 == 10000L);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10000L + "'", long17 == 10000L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 300000L + "'", long20 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(obj28);
    }

    @Test
    public void test07576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07576");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        long long7 = atomikosProperties0.getDefaultJtaTimeout();
        long long8 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.setForceShutdownOnVmExit(true);
        java.lang.String str11 = atomikosProperties0.consoleFileName;
        long long12 = atomikosProperties0.defaultJtaTimeout;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery13 = atomikosProperties0.recovery;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "tm.out" + "'", str11, "tm.out");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10000L + "'", long12 == 10000L);
        org.junit.Assert.assertNotNull(recovery13);
    }

    @Test
    public void test07577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07577");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.retryInterval = (short) 100;
        recovery0.forgetOrphanedLogEntriesDelay = 'a';
        long long5 = recovery0.getDelay();
        recovery0.retryInterval = 97;
        recovery0.setRetryInterval((long) 18);
        long long10 = recovery0.getRetryInterval();
        long long11 = recovery0.retryInterval;
        recovery0.forgetOrphanedLogEntriesDelay = 21;
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 10000L + "'", long5 == 10000L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 18L + "'", long10 == 18L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 18L + "'", long11 == 18L);
    }

    @Test
    public void test07578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07578");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setTransactionManagerUniqueName("{}");
        atomikosProperties0.consoleFileName = "hi!";
        atomikosProperties0.consoleFileName = "tmlog";
        atomikosProperties0.transactionManagerUniqueName = "{{1.0=-1}=hi!}";
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
    }

    @Test
    public void test07579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07579");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setEnableLogging(true);
        atomikosProperties0.consoleFileCount = 0;
        atomikosProperties0.setLogBaseName("{com.atomikos.icatch.console_file_name=hi!, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.output_dir=tm.out, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={-1.0=100}, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
    }

    @Test
    public void test07580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07580");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        long long7 = atomikosProperties0.maxTimeout;
        atomikosProperties0.setLogBaseDir("{-1.0=100}");
        int int10 = atomikosProperties0.getConsoleFileCount();
        atomikosProperties0.maxTimeout = (short) 100;
        atomikosProperties0.setConsoleFileCount((int) '#');
        long long15 = atomikosProperties0.defaultJtaTimeout;
        atomikosProperties0.setDefaultJtaTimeout((-1L));
        atomikosProperties0.consoleFileCount = 0;
        java.lang.String str20 = atomikosProperties0.getConsoleFileName();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10000L + "'", long15 == 10000L);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "tm.out" + "'", str20, "tm.out");
    }

    @Test
    public void test07581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07581");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        long long5 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.threadedTwoPhaseCommit = true;
        atomikosProperties0.setSerialJtaTransactions(true);
        atomikosProperties0.maxActives = '#';
        atomikosProperties0.consoleFileLimit = 20;
        int int14 = atomikosProperties0.consoleFileLimit;
        int int15 = atomikosProperties0.getConsoleFileCount();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20 + "'", int14 == 20);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
    }

    @Test
    public void test07582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07582");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        boolean boolean2 = properties0.isEmpty();
        java.util.Properties properties3 = new java.util.Properties();
        java.lang.String str4 = properties3.toString();
        java.lang.Object obj6 = properties3.remove((java.lang.Object) (short) 100);
        java.lang.Object obj9 = properties3.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean11 = properties3.containsKey((java.lang.Object) 0L);
        boolean boolean12 = properties0.containsValue((java.lang.Object) 0L);
        java.util.Set<java.lang.String> strSet13 = properties0.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties15 = atomikosProperties14.asProperties();
        atomikosProperties14.service = "{-1.0=100}";
        long long18 = atomikosProperties14.getDefaultJtaTimeout();
        atomikosProperties14.setThreadedTwoPhaseCommit(true);
        boolean boolean21 = atomikosProperties14.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery22 = atomikosProperties14.recovery;
        java.util.Properties properties23 = new java.util.Properties();
        java.lang.String str24 = properties23.toString();
        boolean boolean25 = properties23.isEmpty();
        java.lang.Object obj28 = properties23.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        boolean boolean29 = properties0.remove((java.lang.Object) atomikosProperties14, (java.lang.Object) (short) 100);
        java.lang.String str30 = atomikosProperties14.logBaseName;
        long long31 = atomikosProperties14.getMaxTimeout();
        java.lang.String str32 = atomikosProperties14.getOutputDir();
        atomikosProperties14.serialJtaTransactions = false;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel35 = atomikosProperties14.consoleLogLevel;
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{}" + "'", str4, "{}");
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10000L + "'", long18 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(recovery22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "{}" + "'", str24, "{}");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "tmlog" + "'", str30, "tmlog");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 300000L + "'", long31 == 300000L);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel35 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel35.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
    }

    @Test
    public void test07583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07583");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        boolean boolean7 = atomikosProperties0.isAllowSubTransactions();
        boolean boolean8 = atomikosProperties0.isEnableLogging();
        java.lang.String str9 = atomikosProperties0.logBaseDir;
        java.lang.String str10 = atomikosProperties0.getLogBaseDir();
        java.lang.String str11 = atomikosProperties0.getLogBaseName();
        java.util.Properties properties12 = new java.util.Properties();
        java.lang.String str13 = properties12.toString();
        boolean boolean15 = properties12.containsValue((java.lang.Object) (-1L));
        java.lang.Object obj17 = properties12.get((java.lang.Object) 97L);
        properties12.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery19 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery19.retryInterval = (short) 100;
        recovery19.delay = (-1L);
        long long24 = recovery19.delay;
        recovery19.delay = (short) 1;
        long long27 = recovery19.getRetryInterval();
        int int28 = recovery19.maxRetries;
        long long29 = recovery19.getForgetOrphanedLogEntriesDelay();
        recovery19.setMaxRetries(0);
        recovery19.setMaxRetries(0);
        java.util.Properties properties34 = new java.util.Properties();
        java.util.Properties properties35 = new java.util.Properties(properties34);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet36 = properties35.entrySet();
        java.util.Properties properties37 = new java.util.Properties();
        java.lang.Object obj40 = properties37.setProperty("{}", "{}");
        java.util.Enumeration<java.lang.Object> objEnumeration41 = properties37.keys();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet42 = properties37.entrySet();
        properties35.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties37);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery44 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery44.retryInterval = (short) 100;
        recovery44.delay = (-1L);
        long long49 = recovery44.delay;
        recovery44.delay = (short) 1;
        long long52 = recovery44.getRetryInterval();
        java.util.Properties properties53 = new java.util.Properties();
        java.lang.String str54 = properties53.toString();
        properties53.clear();
        java.lang.Object obj56 = properties35.getOrDefault((java.lang.Object) recovery44, (java.lang.Object) properties53);
        java.lang.Object obj57 = properties12.getOrDefault((java.lang.Object) 0, (java.lang.Object) properties35);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties59 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties60 = atomikosProperties59.asProperties();
        atomikosProperties59.service = "{-1.0=100}";
        long long63 = atomikosProperties59.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel64 = null;
        atomikosProperties59.setConsoleLogLevel(atomikosLoggingLevel64);
        int int66 = atomikosProperties59.maxActives;
        atomikosProperties59.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery69 = atomikosProperties59.getRecovery();
        atomikosProperties59.consoleFileName = "{-1.0=100}";
        atomikosProperties59.setSerialJtaTransactions(false);
        atomikosProperties59.consoleFileName = "{={-1.0=100}, -1.0=100}";
        atomikosProperties59.defaultJtaTimeout = 50;
        long long78 = atomikosProperties59.getCheckpointInterval();
        long long79 = atomikosProperties59.defaultJtaTimeout;
        atomikosProperties0.set(properties12, "{}", (java.lang.Object) atomikosProperties59);
        boolean boolean81 = atomikosProperties0.enableLogging;
        java.lang.String str82 = atomikosProperties0.getConsoleFileName();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "tmlog" + "'", str11, "tmlog");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{}" + "'", str13, "{}");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 100L + "'", long27 == 100L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5 + "'", int28 == 5);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 86400000L + "'", long29 == 86400000L);
        org.junit.Assert.assertNotNull(objEntrySet36);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNotNull(objEnumeration41);
        org.junit.Assert.assertNotNull(objEntrySet42);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-1L) + "'", long49 == (-1L));
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 100L + "'", long52 == 100L);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "{}" + "'", str54, "{}");
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertEquals(obj56.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj56), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj56), "{}");
        org.junit.Assert.assertNotNull(obj57);
        org.junit.Assert.assertEquals(obj57.toString(), "{{}={}}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj57), "{{}={}}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj57), "{{}={}}");
        org.junit.Assert.assertNotNull(properties60);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 10000L + "'", long63 == 10000L);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 50 + "'", int66 == 50);
        org.junit.Assert.assertNotNull(recovery69);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 500L + "'", long78 == 500L);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 50L + "'", long79 == 50L);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "tm.out" + "'", str82, "tm.out");
    }

    @Test
    public void test07584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07584");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj3 = properties0.setProperty("{}", "{}");
        java.util.Enumeration<java.lang.Object> objEnumeration4 = properties0.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties0.elements();
        java.util.Properties properties6 = new java.util.Properties(properties0);
        java.util.Set<java.lang.String> strSet7 = properties6.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties8.setEnableLogging(true);
        atomikosProperties8.consoleFileCount = 0;
        int int13 = atomikosProperties8.getMaxActives();
        java.lang.String str14 = atomikosProperties8.getLogBaseDir();
        java.lang.String str15 = atomikosProperties8.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery16 = atomikosProperties8.getRecovery();
        boolean boolean17 = atomikosProperties8.serialJtaTransactions;
        atomikosProperties8.defaultJtaTimeout = 1;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties21 = atomikosProperties20.asProperties();
        atomikosProperties20.service = "{-1.0=100}";
        long long24 = atomikosProperties20.getDefaultJtaTimeout();
        atomikosProperties20.setThreadedTwoPhaseCommit(true);
        boolean boolean27 = atomikosProperties20.isEnableLogging();
        atomikosProperties20.defaultJtaTimeout = (byte) 10;
        java.lang.Object obj30 = properties6.getOrDefault((java.lang.Object) 1, (java.lang.Object) atomikosProperties20);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties32 = atomikosProperties31.asProperties();
        atomikosProperties31.service = "{-1.0=100}";
        java.lang.String str35 = atomikosProperties31.getLogBaseName();
        java.lang.String str36 = atomikosProperties31.transactionManagerUniqueName;
        atomikosProperties31.consoleFileName = "";
        atomikosProperties31.forceShutdownOnVmExit = false;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties42 = atomikosProperties41.asProperties();
        atomikosProperties41.service = "{-1.0=100}";
        long long45 = atomikosProperties41.getDefaultJtaTimeout();
        atomikosProperties41.setTransactionManagerUniqueName("{}");
        atomikosProperties41.consoleFileName = "hi!";
        int int50 = atomikosProperties41.getConsoleFileCount();
        boolean boolean51 = atomikosProperties41.isThreadedTwoPhaseCommit();
        atomikosProperties41.maxTimeout = 0;
        atomikosProperties41.setLogBaseName("hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties56 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties56.setAllowSubTransactions(true);
        boolean boolean59 = atomikosProperties56.enableLogging;
        boolean boolean60 = atomikosProperties56.isForceShutdownOnVmExit();
        java.lang.String str61 = atomikosProperties56.getService();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties62 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties62.setAllowSubTransactions(true);
        boolean boolean65 = atomikosProperties62.enableLogging;
        boolean boolean66 = atomikosProperties62.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel67 = atomikosProperties62.consoleLogLevel;
        atomikosProperties56.consoleLogLevel = atomikosLoggingLevel67;
        atomikosProperties41.setConsoleLogLevel(atomikosLoggingLevel67);
        atomikosProperties31.consoleLogLevel = atomikosLoggingLevel67;
        atomikosProperties31.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties73 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties74 = atomikosProperties73.asProperties();
        atomikosProperties73.service = "{-1.0=100}";
        long long77 = atomikosProperties73.getDefaultJtaTimeout();
        atomikosProperties73.serialJtaTransactions = true;
        long long80 = atomikosProperties73.getDefaultJtaTimeout();
        long long81 = atomikosProperties73.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery82 = atomikosProperties73.getRecovery();
        long long83 = recovery82.delay;
        recovery82.maxRetries = (-1);
        long long86 = recovery82.getRetryInterval();
        long long87 = recovery82.getDelay();
        boolean boolean88 = properties6.remove((java.lang.Object) "{}", (java.lang.Object) recovery82);
        java.util.Properties properties89 = new java.util.Properties(properties6);
        java.util.Enumeration<java.lang.Object> objEnumeration90 = properties89.keys();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNotNull(objEnumeration4);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 50 + "'", int13 == 50);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(recovery16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(properties21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 10000L + "'", long24 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertNotNull(properties32);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "tmlog" + "'", str35, "tmlog");
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(properties42);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 10000L + "'", long45 == 10000L);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel67 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel67.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(properties74);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 10000L + "'", long77 == 10000L);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 10000L + "'", long80 == 10000L);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 500L + "'", long81 == 500L);
        org.junit.Assert.assertNotNull(recovery82);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 10000L + "'", long83 == 10000L);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 10000L + "'", long86 == 10000L);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 10000L + "'", long87 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(objEnumeration90);
    }

    @Test
    public void test07585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07585");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setEnableLogging(true);
        atomikosProperties0.consoleFileCount = 0;
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        atomikosProperties0.setMaxTimeout(10L);
        long long8 = atomikosProperties0.maxTimeout;
        int int9 = atomikosProperties0.getConsoleFileLimit();
        int int10 = atomikosProperties0.getConsoleFileLimit();
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 10L + "'", long8 == 10L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test07586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07586");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        boolean boolean7 = atomikosProperties0.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery8 = atomikosProperties0.recovery;
        boolean boolean9 = atomikosProperties0.forceShutdownOnVmExit;
        java.lang.String str10 = atomikosProperties0.getLogBaseDir();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(recovery8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test07587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07587");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        atomikosProperties0.setConsoleFileCount((int) (byte) 100);
        atomikosProperties0.setAllowSubTransactions(true);
        int int10 = atomikosProperties0.getMaxActives();
        boolean boolean11 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.setOutputDir("");
        java.lang.String str14 = atomikosProperties0.getTransactionManagerUniqueName();
        java.lang.String str15 = atomikosProperties0.getLogBaseDir();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel16 = atomikosProperties0.consoleLogLevel;
        java.util.Properties properties17 = atomikosProperties0.asProperties();
        java.lang.String str18 = atomikosProperties0.service;
        boolean boolean19 = atomikosProperties0.isEnableLogging();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 50 + "'", int10 == 50);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel16 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel16.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(properties17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test07588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07588");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setEnableLogging(true);
        atomikosProperties0.consoleFileCount = 0;
        int int5 = atomikosProperties0.getMaxActives();
        java.lang.String str6 = atomikosProperties0.getLogBaseDir();
        java.lang.String str7 = atomikosProperties0.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery8 = atomikosProperties0.getRecovery();
        java.lang.String str9 = atomikosProperties0.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        atomikosProperties10.service = "{-1.0=100}";
        long long14 = atomikosProperties10.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel15 = null;
        atomikosProperties10.setConsoleLogLevel(atomikosLoggingLevel15);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel17 = null;
        atomikosProperties10.setConsoleLogLevel(atomikosLoggingLevel17);
        boolean boolean19 = atomikosProperties10.enableLogging;
        int int20 = atomikosProperties10.getConsoleFileLimit();
        atomikosProperties10.serialJtaTransactions = false;
        atomikosProperties10.setLogBaseName("");
        atomikosProperties10.checkpointInterval = (byte) -1;
        long long27 = atomikosProperties10.defaultJtaTimeout;
        atomikosProperties10.setService("{1.0=-1}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties31 = atomikosProperties30.asProperties();
        atomikosProperties30.service = "{-1.0=100}";
        long long34 = atomikosProperties30.getDefaultJtaTimeout();
        atomikosProperties30.setMaxActives(0);
        boolean boolean37 = atomikosProperties30.threadedTwoPhaseCommit;
        boolean boolean38 = atomikosProperties30.allowSubTransactions;
        atomikosProperties30.logBaseDir = "{}";
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel41 = atomikosProperties30.getConsoleLogLevel();
        atomikosProperties10.setConsoleLogLevel(atomikosLoggingLevel41);
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel41);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 50 + "'", int5 == 50);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(recovery8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10000L + "'", long14 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10000L + "'", long27 == 10000L);
        org.junit.Assert.assertNotNull(properties31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 10000L + "'", long34 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel41 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel41.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
    }

    @Test
    public void test07589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07589");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        java.lang.String str7 = atomikosProperties0.getLogBaseName();
        atomikosProperties0.setLogBaseName("");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.recovery;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "tmlog" + "'", str7, "tmlog");
        org.junit.Assert.assertNotNull(recovery10);
    }

    @Test
    public void test07590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07590");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        int int7 = atomikosProperties0.maxActives;
        atomikosProperties0.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.getRecovery();
        atomikosProperties0.consoleFileName = "{-1.0=100}";
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel13 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel13);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel15 = atomikosProperties0.getConsoleLogLevel();
        int int16 = atomikosProperties0.consoleFileLimit;
        atomikosProperties0.outputDir = "{={-1.0=100}, -1.0=100}";
        java.lang.String str19 = atomikosProperties0.getService();
        atomikosProperties0.outputDir = "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=true, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=35, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=10, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={-1.0=100}, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}";
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertNull(atomikosLoggingLevel15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "{-1.0=100}" + "'", str19, "{-1.0=100}");
    }

    @Test
    public void test07591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07591");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        boolean boolean5 = atomikosProperties0.threadedTwoPhaseCommit;
        atomikosProperties0.serialJtaTransactions = false;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test07592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07592");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        java.util.Properties properties2 = new java.util.Properties();
        java.lang.Object obj4 = properties2.remove((java.lang.Object) (-1.0d));
        boolean boolean5 = properties2.isEmpty();
        int int6 = properties2.size();
        java.lang.String str8 = properties2.getProperty("{}");
        java.lang.Object obj9 = properties1.remove((java.lang.Object) properties2);
        java.util.Properties properties10 = new java.util.Properties();
        java.util.Properties properties11 = new java.util.Properties();
        java.lang.String str12 = properties11.toString();
        boolean boolean13 = properties11.isEmpty();
        java.util.Properties properties14 = new java.util.Properties();
        java.lang.String str15 = properties14.toString();
        java.lang.Object obj17 = properties14.remove((java.lang.Object) (short) 100);
        java.lang.Object obj20 = properties14.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean22 = properties14.containsKey((java.lang.Object) 0L);
        boolean boolean23 = properties11.containsValue((java.lang.Object) 0L);
        boolean boolean26 = properties10.replace((java.lang.Object) 0L, (java.lang.Object) 0.0f, (java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties10.elements();
        java.lang.String str28 = properties10.toString();
        java.util.Enumeration<java.lang.Object> objEnumeration29 = properties10.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties31 = atomikosProperties30.asProperties();
        boolean boolean32 = properties1.remove((java.lang.Object) properties10, (java.lang.Object) properties31);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties34 = atomikosProperties33.asProperties();
        atomikosProperties33.service = "{-1.0=100}";
        long long37 = atomikosProperties33.getDefaultJtaTimeout();
        long long38 = atomikosProperties33.getMaxTimeout();
        java.lang.String str39 = atomikosProperties33.outputDir;
        atomikosProperties33.consoleFileName = "tm.out";
        long long42 = atomikosProperties33.checkpointInterval;
        atomikosProperties33.setService("{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery45 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery45.retryInterval = (short) 100;
        recovery45.forgetOrphanedLogEntriesDelay = 'a';
        long long50 = recovery45.retryInterval;
        recovery45.forgetOrphanedLogEntriesDelay = 0L;
        long long53 = recovery45.getForgetOrphanedLogEntriesDelay();
        long long54 = recovery45.getForgetOrphanedLogEntriesDelay();
        recovery45.retryInterval = 0L;
        long long57 = recovery45.retryInterval;
        int int58 = recovery45.getMaxRetries();
        long long59 = recovery45.delay;
        boolean boolean60 = properties10.remove((java.lang.Object) "{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}", (java.lang.Object) recovery45);
        int int61 = recovery45.maxRetries;
        long long62 = recovery45.retryInterval;
        long long63 = recovery45.getRetryInterval();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "{}" + "'", str12, "{}");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{}" + "'", str15, "{}");
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "{}" + "'", str28, "{}");
        org.junit.Assert.assertNotNull(objEnumeration29);
        org.junit.Assert.assertNotNull(properties31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(properties34);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 10000L + "'", long37 == 10000L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 300000L + "'", long38 == 300000L);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 500L + "'", long42 == 500L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 100L + "'", long50 == 100L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 5 + "'", int58 == 5);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 10000L + "'", long59 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 5 + "'", int61 == 5);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
    }

    @Test
    public void test07593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07593");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        long long7 = atomikosProperties0.getDefaultJtaTimeout();
        long long8 = atomikosProperties0.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery9 = atomikosProperties0.getRecovery();
        long long10 = recovery9.delay;
        recovery9.maxRetries = (-1);
        long long13 = recovery9.delay;
        long long14 = recovery9.delay;
        int int15 = recovery9.maxRetries;
        long long16 = recovery9.delay;
        recovery9.setForgetOrphanedLogEntriesDelay((long) 0);
        long long19 = recovery9.getRetryInterval();
        recovery9.setDelay(10L);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(recovery9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10000L + "'", long13 == 10000L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10000L + "'", long14 == 10000L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10000L + "'", long16 == 10000L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10000L + "'", long19 == 10000L);
    }

    @Test
    public void test07594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07594");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties();
        java.lang.String str2 = properties1.toString();
        boolean boolean3 = properties1.isEmpty();
        java.util.Properties properties4 = new java.util.Properties();
        java.lang.String str5 = properties4.toString();
        java.lang.Object obj7 = properties4.remove((java.lang.Object) (short) 100);
        java.lang.Object obj10 = properties4.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean12 = properties4.containsKey((java.lang.Object) 0L);
        boolean boolean13 = properties1.containsValue((java.lang.Object) 0L);
        boolean boolean16 = properties0.replace((java.lang.Object) 0L, (java.lang.Object) 0.0f, (java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration17 = properties0.elements();
        java.util.Set<java.lang.String> strSet18 = properties0.stringPropertyNames();
        java.util.Properties properties19 = new java.util.Properties();
        java.lang.String str20 = properties19.toString();
        java.lang.Object obj22 = properties19.remove((java.lang.Object) (short) 100);
        java.lang.Object obj25 = properties19.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.util.Properties properties26 = new java.util.Properties();
        java.lang.String str27 = properties26.toString();
        java.lang.Object obj29 = properties26.remove((java.lang.Object) (short) 100);
        java.lang.Object obj32 = properties26.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        int int33 = properties26.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery34 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery34.retryInterval = (short) 100;
        recovery34.forgetOrphanedLogEntriesDelay = 'a';
        long long39 = recovery34.retryInterval;
        recovery34.setForgetOrphanedLogEntriesDelay((long) 0);
        java.lang.Object obj42 = properties19.replace((java.lang.Object) int33, (java.lang.Object) recovery34);
        boolean boolean43 = properties0.containsValue((java.lang.Object) properties19);
        java.util.Properties properties44 = new java.util.Properties();
        java.lang.String str45 = properties44.toString();
        java.lang.Object obj47 = properties44.remove((java.lang.Object) (short) 100);
        java.lang.Object obj50 = properties44.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean52 = properties44.containsKey((java.lang.Object) 0L);
        java.lang.Object obj55 = properties44.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj58 = properties44.setProperty("", "{-1.0=100}");
        java.lang.Object obj59 = properties44.clone();
        java.util.Collection<java.lang.Object> objCollection60 = properties44.values();
        properties19.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties44);
        java.io.OutputStream outputStream62 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties19.store(outputStream62, "{100=100}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{}" + "'", str2, "{}");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{}" + "'", str5, "{}");
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objEnumeration17);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{}" + "'", str20, "{}");
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "{}" + "'", str27, "{}");
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 100L + "'", long39 == 100L);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "{}" + "'", str45, "{}");
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertNotNull(obj59);
// flaky:         org.junit.Assert.assertEquals(obj59.toString(), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj59), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj59), "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNotNull(objCollection60);
    }

    @Test
    public void test07595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07595");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setEnableLogging(true);
        atomikosProperties0.consoleFileCount = 0;
        int int5 = atomikosProperties0.getMaxActives();
        java.lang.String str6 = atomikosProperties0.getLogBaseDir();
        java.lang.String str7 = atomikosProperties0.service;
        atomikosProperties0.setConsoleFileCount((int) (byte) 1);
        atomikosProperties0.setMaxActives((-1));
        atomikosProperties0.outputDir = "{1.0=-1}";
        int int14 = atomikosProperties0.maxActives;
        int int15 = atomikosProperties0.consoleFileCount;
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 50 + "'", int5 == 50);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
    }

    @Test
    public void test07596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07596");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        java.lang.String str6 = atomikosProperties0.getOutputDir();
        boolean boolean7 = atomikosProperties0.isForceShutdownOnVmExit();
        boolean boolean8 = atomikosProperties0.enableLogging;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean10 = atomikosProperties9.isSerialJtaTransactions();
        atomikosProperties9.logBaseName = "{-1.0=100}";
        int int13 = atomikosProperties9.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery14 = atomikosProperties9.getRecovery();
        atomikosProperties9.setConsoleFileCount((int) (byte) 100);
        atomikosProperties9.setAllowSubTransactions(true);
        atomikosProperties9.setService("tm.out");
        boolean boolean21 = atomikosProperties9.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel22 = atomikosProperties9.getConsoleLogLevel();
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel22);
        java.lang.String str24 = atomikosProperties0.logBaseDir;
        atomikosProperties0.logBaseDir = "{-1.0=100}";
        atomikosProperties0.consoleFileCount = '#';
        atomikosProperties0.setMaxActives(35);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 50 + "'", int13 == 50);
        org.junit.Assert.assertNotNull(recovery14);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel22 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel22.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(str24);
    }

    @Test
    public void test07597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07597");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj3 = properties0.setProperty("{}", "{}");
        java.util.Enumeration<java.lang.Object> objEnumeration4 = properties0.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties0.elements();
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Enumeration<?> wildcardEnumeration7 = properties6.propertyNames();
        java.lang.Object obj8 = properties0.remove((java.lang.Object) wildcardEnumeration7);
        java.util.Properties properties9 = new java.util.Properties(properties0);
        properties9.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties11.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties11.consoleFileCount = 0;
        atomikosProperties11.setService("{={-1.0=100}, -1.0=100}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties19 = atomikosProperties18.asProperties();
        atomikosProperties18.service = "{-1.0=100}";
        long long22 = atomikosProperties18.getDefaultJtaTimeout();
        atomikosProperties18.serialJtaTransactions = true;
        atomikosProperties18.maxActives = ' ';
        atomikosProperties18.maxActives = (byte) 10;
        atomikosProperties18.serialJtaTransactions = false;
        atomikosProperties18.setCheckpointInterval((long) 5);
        atomikosProperties18.setConsoleFileName("{{}={}}");
        java.lang.Object obj35 = properties9.getOrDefault((java.lang.Object) "{={-1.0=100}, -1.0=100}", (java.lang.Object) "{{}={}}");
        java.util.Set<java.lang.String> strSet36 = properties9.stringPropertyNames();
        java.io.OutputStream outputStream37 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties9.save(outputStream37, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, false={100=100}, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNotNull(objEnumeration4);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNotNull(wildcardEnumeration7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(properties19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 10000L + "'", long22 == 10000L);
        org.junit.Assert.assertEquals("'" + obj35 + "' != '" + "{{}={}}" + "'", obj35, "{{}={}}");
        org.junit.Assert.assertNotNull(strSet36);
    }

    @Test
    public void test07598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07598");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        boolean boolean2 = properties0.isEmpty();
        java.lang.Object obj5 = properties0.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration6 = properties0.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties8 = atomikosProperties7.asProperties();
        atomikosProperties7.service = "{-1.0=100}";
        java.lang.String str11 = atomikosProperties7.getTransactionManagerUniqueName();
        atomikosProperties7.consoleFileName = "hi!";
        atomikosProperties7.setCheckpointInterval((long) 5);
        atomikosProperties7.setLogBaseDir("{-1.0=100}");
        java.lang.String str18 = atomikosProperties7.transactionManagerUniqueName;
        java.util.Properties properties19 = new java.util.Properties();
        java.lang.String str20 = properties19.toString();
        java.lang.Object obj22 = properties19.remove((java.lang.Object) (short) 100);
        java.lang.Object obj25 = properties19.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean27 = properties19.containsKey((java.lang.Object) 0L);
        java.lang.Object obj30 = properties19.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj33 = properties19.setProperty("", "{-1.0=100}");
        java.lang.Object obj34 = properties19.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery35 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery35.retryInterval = (short) 100;
        recovery35.forgetOrphanedLogEntriesDelay = 'a';
        boolean boolean40 = properties19.equals((java.lang.Object) 'a');
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery41 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery41.retryInterval = (short) 100;
        recovery41.forgetOrphanedLogEntriesDelay = 'a';
        long long46 = recovery41.getDelay();
        int int47 = recovery41.maxRetries;
        int int48 = recovery41.maxRetries;
        long long49 = recovery41.getRetryInterval();
        java.util.Properties properties50 = new java.util.Properties();
        java.util.Enumeration<?> wildcardEnumeration51 = properties50.propertyNames();
        java.lang.Object obj52 = properties19.put((java.lang.Object) long49, (java.lang.Object) wildcardEnumeration51);
        java.util.Properties properties53 = new java.util.Properties(properties19);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery54 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long55 = recovery54.getRetryInterval();
        long long56 = recovery54.getDelay();
        int int57 = recovery54.getMaxRetries();
        long long58 = recovery54.getDelay();
        boolean boolean59 = properties0.replace((java.lang.Object) atomikosProperties7, (java.lang.Object) properties19, (java.lang.Object) recovery54);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties60 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties61 = atomikosProperties60.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties62 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties63 = atomikosProperties62.asProperties();
        atomikosProperties62.service = "{-1.0=100}";
        long long66 = atomikosProperties62.getDefaultJtaTimeout();
        atomikosProperties62.consoleFileLimit = '#';
        java.lang.Object obj69 = properties61.get((java.lang.Object) atomikosProperties62);
        boolean boolean70 = atomikosProperties62.isForceShutdownOnVmExit();
        atomikosProperties62.consoleFileName = "";
        atomikosProperties62.checkpointInterval = (byte) 100;
        java.lang.Object obj75 = properties0.get((java.lang.Object) atomikosProperties62);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties76 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties77 = atomikosProperties76.asProperties();
        atomikosProperties76.service = "{-1.0=100}";
        long long80 = atomikosProperties76.getDefaultJtaTimeout();
        atomikosProperties76.serialJtaTransactions = true;
        long long83 = atomikosProperties76.getDefaultJtaTimeout();
        long long84 = atomikosProperties76.checkpointInterval;
        atomikosProperties76.setForceShutdownOnVmExit(true);
        java.util.Properties properties87 = atomikosProperties76.asProperties();
        java.lang.String str89 = properties87.getProperty("{}");
        boolean boolean90 = properties0.equals((java.lang.Object) str89);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(objEnumeration6);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{}" + "'", str20, "{}");
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNotNull(obj34);
// flaky:         org.junit.Assert.assertEquals(obj34.toString(), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 10000L + "'", long46 == 10000L);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 5 + "'", int47 == 5);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 5 + "'", int48 == 5);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 100L + "'", long49 == 100L);
        org.junit.Assert.assertNotNull(wildcardEnumeration51);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 10000L + "'", long55 == 10000L);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 10000L + "'", long56 == 10000L);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 5 + "'", int57 == 5);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 10000L + "'", long58 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(properties61);
        org.junit.Assert.assertNotNull(properties63);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 10000L + "'", long66 == 10000L);
        org.junit.Assert.assertNull(obj69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(obj75);
        org.junit.Assert.assertNotNull(properties77);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 10000L + "'", long80 == 10000L);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 10000L + "'", long83 == 10000L);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 500L + "'", long84 == 500L);
        org.junit.Assert.assertNotNull(properties87);
        org.junit.Assert.assertNull(str89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test07599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07599");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj7 = properties0.clone();
        java.util.Set<java.lang.String> strSet8 = properties0.stringPropertyNames();
        java.util.Properties properties9 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        atomikosProperties10.service = "{-1.0=100}";
        long long14 = atomikosProperties10.getDefaultJtaTimeout();
        atomikosProperties10.setThreadedTwoPhaseCommit(true);
        boolean boolean17 = atomikosProperties10.isAllowSubTransactions();
        int int18 = atomikosProperties10.getConsoleFileLimit();
        atomikosProperties10.setForceShutdownOnVmExit(false);
        long long21 = atomikosProperties10.defaultJtaTimeout;
        java.util.Properties properties22 = new java.util.Properties();
        java.lang.String str23 = properties22.toString();
        java.lang.Object obj25 = properties22.remove((java.lang.Object) (short) 100);
        java.lang.Object obj28 = properties22.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj29 = properties22.clone();
        java.util.Set<java.lang.String> strSet30 = properties22.stringPropertyNames();
        java.util.Properties properties31 = new java.util.Properties();
        java.lang.String str32 = properties31.toString();
        java.lang.Object obj34 = properties31.remove((java.lang.Object) (short) 100);
        java.lang.Object obj37 = properties31.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean39 = properties31.containsKey((java.lang.Object) 0L);
        java.lang.Object obj42 = properties31.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties43 = new java.util.Properties();
        java.lang.String str44 = properties43.toString();
        java.lang.Object obj46 = properties43.remove((java.lang.Object) (short) 100);
        java.lang.Object obj49 = properties43.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj50 = properties43.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration51 = properties43.elements();
        properties31.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties43);
        java.util.Properties properties53 = new java.util.Properties();
        java.lang.String str54 = properties53.toString();
        java.lang.Object obj56 = properties53.remove((java.lang.Object) (short) 100);
        java.lang.Object obj59 = properties53.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean61 = properties53.containsKey((java.lang.Object) 0L);
        java.lang.Object obj64 = properties53.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties65 = new java.util.Properties();
        java.lang.String str66 = properties65.toString();
        java.lang.Object obj68 = properties65.remove((java.lang.Object) (short) 100);
        java.lang.Object obj71 = properties65.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj72 = properties65.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration73 = properties65.elements();
        properties53.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties65);
        java.lang.Object obj75 = properties22.putIfAbsent((java.lang.Object) properties31, (java.lang.Object) properties65);
        java.util.Enumeration<java.lang.Object> objEnumeration76 = properties22.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties78 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean79 = atomikosProperties78.isSerialJtaTransactions();
        atomikosProperties78.logBaseName = "{-1.0=100}";
        int int82 = atomikosProperties78.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery83 = atomikosProperties78.getRecovery();
        java.lang.String str84 = atomikosProperties78.getLogBaseName();
        atomikosProperties78.setCheckpointInterval((long) 32);
        atomikosProperties10.set(properties22, "{-1.0=100}", (java.lang.Object) atomikosProperties78);
        atomikosProperties78.logBaseName = "{100=100}";
        boolean boolean90 = properties9.equals((java.lang.Object) atomikosProperties78);
        atomikosProperties78.setCheckpointInterval(0L);
        long long93 = atomikosProperties78.getMaxTimeout();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{1.0=-1}");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10000L + "'", long14 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10000L + "'", long21 == 10000L);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "{}" + "'", str23, "{}");
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "{1.0=-1}");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "{}" + "'", str32, "{}");
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "{}" + "'", str44, "{}");
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertEquals(obj50.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj50), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj50), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration51);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "{}" + "'", str54, "{}");
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(obj64);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "{}" + "'", str66, "{}");
        org.junit.Assert.assertNull(obj68);
        org.junit.Assert.assertNull(obj71);
        org.junit.Assert.assertNotNull(obj72);
        org.junit.Assert.assertEquals(obj72.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj72), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj72), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration73);
        org.junit.Assert.assertNull(obj75);
        org.junit.Assert.assertNotNull(objEnumeration76);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 50 + "'", int82 == 50);
        org.junit.Assert.assertNotNull(recovery83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "{-1.0=100}" + "'", str84, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 300000L + "'", long93 == 300000L);
    }

    @Test
    public void test07600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07600");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        atomikosProperties0.setConsoleFileCount((int) (byte) 100);
        java.lang.String str8 = atomikosProperties0.logBaseName;
        atomikosProperties0.setCheckpointInterval((long) 18);
        atomikosProperties0.checkpointInterval = 100;
        boolean boolean13 = atomikosProperties0.isAllowSubTransactions();
        atomikosProperties0.setDefaultJtaTimeout((long) 97);
        boolean boolean16 = atomikosProperties0.isEnableLogging();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{-1.0=100}" + "'", str8, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test07601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07601");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties0.setMaxActives(100);
        boolean boolean9 = atomikosProperties0.enableLogging;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.recovery;
        atomikosProperties0.setConsoleFileLimit(100);
        boolean boolean13 = atomikosProperties0.enableLogging;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery14 = atomikosProperties0.getRecovery();
        int int15 = recovery14.getMaxRetries();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(recovery14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5 + "'", int15 == 5);
    }

    @Test
    public void test07602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07602");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        long long7 = atomikosProperties0.getDefaultJtaTimeout();
        long long8 = atomikosProperties0.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery9 = atomikosProperties0.getRecovery();
        long long10 = recovery9.delay;
        int int11 = recovery9.maxRetries;
        recovery9.forgetOrphanedLogEntriesDelay = 52L;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(recovery9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
    }

    @Test
    public void test07603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07603");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        int int7 = atomikosProperties0.maxActives;
        atomikosProperties0.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.getRecovery();
        atomikosProperties0.outputDir = "hi!";
        atomikosProperties0.setDefaultJtaTimeout((long) 10);
        atomikosProperties0.setCheckpointInterval((long) (short) -1);
        atomikosProperties0.service = "{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}";
        java.lang.String str19 = atomikosProperties0.consoleFileName;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "tm.out" + "'", str19, "tm.out");
    }

    @Test
    public void test07604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07604");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        java.util.Properties properties2 = new java.util.Properties();
        java.lang.Object obj4 = properties2.remove((java.lang.Object) (-1.0d));
        boolean boolean5 = properties2.isEmpty();
        int int6 = properties2.size();
        java.lang.String str8 = properties2.getProperty("{}");
        java.lang.Object obj9 = properties1.remove((java.lang.Object) properties2);
        java.lang.String str11 = properties2.getProperty("tmlog");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setEnableLogging(true);
        atomikosProperties12.consoleFileCount = 0;
        int int17 = atomikosProperties12.getMaxActives();
        java.lang.String str18 = atomikosProperties12.getLogBaseDir();
        java.lang.String str19 = atomikosProperties12.service;
        atomikosProperties12.setConsoleFileCount((int) (byte) 1);
        java.lang.Object obj22 = properties2.get((java.lang.Object) atomikosProperties12);
        atomikosProperties12.allowSubTransactions = false;
        long long25 = atomikosProperties12.getDefaultJtaTimeout();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 50 + "'", int17 == 50);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 10000L + "'", long25 == 10000L);
    }

    @Test
    public void test07605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07605");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setEnableLogging(true);
        atomikosProperties0.consoleFileCount = 0;
        int int5 = atomikosProperties0.getMaxActives();
        java.lang.String str6 = atomikosProperties0.getLogBaseDir();
        java.lang.String str7 = atomikosProperties0.service;
        atomikosProperties0.transactionManagerUniqueName = "tmlog";
        atomikosProperties0.setTransactionManagerUniqueName("tm.out");
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel12 = atomikosProperties0.getConsoleLogLevel();
        java.util.Properties properties13 = new java.util.Properties();
        java.lang.Object obj15 = properties13.remove((java.lang.Object) (-1.0d));
        boolean boolean16 = properties13.isEmpty();
        int int17 = properties13.size();
        java.lang.String str19 = properties13.getProperty("{}");
        java.util.Set<java.lang.Object> objSet20 = properties13.keySet();
        java.lang.String str22 = properties13.getProperty("hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties25 = atomikosProperties24.asProperties();
        atomikosProperties24.service = "{-1.0=100}";
        long long28 = atomikosProperties24.getDefaultJtaTimeout();
        long long29 = atomikosProperties24.getMaxTimeout();
        int int30 = atomikosProperties24.consoleFileCount;
        long long31 = atomikosProperties24.getCheckpointInterval();
        atomikosProperties24.serialJtaTransactions = true;
        java.lang.String str34 = atomikosProperties24.logBaseName;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery35 = atomikosProperties24.recovery;
        int int36 = recovery35.maxRetries;
        atomikosProperties0.set(properties13, "", (java.lang.Object) recovery35);
        boolean boolean38 = atomikosProperties0.forceShutdownOnVmExit;
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 50 + "'", int5 == 50);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel12 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel12.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(objSet20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 10000L + "'", long28 == 10000L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 300000L + "'", long29 == 300000L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 500L + "'", long31 == 500L);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "tmlog" + "'", str34, "tmlog");
        org.junit.Assert.assertNotNull(recovery35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 5 + "'", int36 == 5);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test07606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07606");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        atomikosProperties2.service = "{-1.0=100}";
        long long6 = atomikosProperties2.getDefaultJtaTimeout();
        atomikosProperties2.consoleFileLimit = '#';
        java.lang.Object obj9 = properties1.get((java.lang.Object) atomikosProperties2);
        boolean boolean10 = atomikosProperties2.forceShutdownOnVmExit;
        atomikosProperties2.setOutputDir("");
        long long13 = atomikosProperties2.defaultJtaTimeout;
        java.lang.String str14 = atomikosProperties2.getLogBaseName();
        atomikosProperties2.setEnableLogging(false);
        int int17 = atomikosProperties2.consoleFileCount;
        atomikosProperties2.outputDir = "tmlog";
        java.util.Properties properties20 = new java.util.Properties();
        java.lang.String str21 = properties20.toString();
        java.lang.Object obj23 = properties20.remove((java.lang.Object) (short) 100);
        java.lang.Object obj26 = properties20.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj27 = properties20.clone();
        java.util.Set<java.lang.String> strSet28 = properties20.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties31 = atomikosProperties30.asProperties();
        atomikosProperties30.service = "{-1.0=100}";
        long long34 = atomikosProperties30.getDefaultJtaTimeout();
        long long35 = atomikosProperties30.getMaxTimeout();
        java.lang.String str36 = atomikosProperties30.outputDir;
        atomikosProperties30.consoleFileName = "tm.out";
        long long39 = atomikosProperties30.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel40 = atomikosProperties30.consoleLogLevel;
        atomikosProperties2.set(properties20, "{1.0=-1, -1.0=100}", (java.lang.Object) atomikosProperties30);
        java.util.Properties properties42 = atomikosProperties2.asProperties();
        java.lang.String str43 = atomikosProperties2.getTransactionManagerUniqueName();
        atomikosProperties2.checkpointInterval = (short) 1;
        int int46 = atomikosProperties2.getConsoleFileCount();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10000L + "'", long13 == 10000L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "tmlog" + "'", str14, "tmlog");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "{}" + "'", str21, "{}");
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "{1.0=-1}");
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNotNull(properties31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 10000L + "'", long34 == 10000L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 300000L + "'", long35 == 300000L);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 500L + "'", long39 == 500L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel40 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel40.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(properties42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
    }

    @Test
    public void test07607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07607");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        java.util.Properties properties7 = new java.util.Properties();
        java.lang.String str8 = properties7.toString();
        properties7.clear();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet10 = properties7.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties12 = atomikosProperties11.asProperties();
        atomikosProperties11.service = "{-1.0=100}";
        long long15 = atomikosProperties11.getDefaultJtaTimeout();
        atomikosProperties11.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties11.setMaxActives(100);
        java.lang.String str20 = atomikosProperties11.logBaseDir;
        atomikosProperties11.consoleFileCount = (short) 0;
        atomikosProperties11.defaultJtaTimeout = 10000L;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel25 = atomikosProperties11.consoleLogLevel;
        java.lang.Object obj26 = properties0.putIfAbsent((java.lang.Object) properties7, (java.lang.Object) atomikosLoggingLevel25);
        java.lang.String str27 = properties7.toString();
        int int28 = properties7.size();
        java.lang.String str30 = properties7.getProperty("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties31.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties31.setService("tm.out");
        int int36 = atomikosProperties31.consoleFileLimit;
        long long37 = atomikosProperties31.getCheckpointInterval();
        atomikosProperties31.setEnableLogging(false);
        int int40 = atomikosProperties31.getConsoleFileCount();
        boolean boolean41 = properties7.contains((java.lang.Object) atomikosProperties31);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{}" + "'", str8, "{}");
        org.junit.Assert.assertNotNull(objEntrySet10);
        org.junit.Assert.assertNotNull(properties12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10000L + "'", long15 == 10000L);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel25 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel25.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "{}" + "'", str27, "{}");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 500L + "'", long37 == 500L);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test07608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07608");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.enableLogging = false;
        atomikosProperties0.setMaxTimeout((long) (byte) 0);
        atomikosProperties0.setAllowSubTransactions(true);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties12 = atomikosProperties11.asProperties();
        atomikosProperties11.service = "{-1.0=100}";
        java.lang.String str15 = atomikosProperties11.getTransactionManagerUniqueName();
        boolean boolean16 = atomikosProperties11.isSerialJtaTransactions();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel17 = atomikosProperties11.getConsoleLogLevel();
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel17;
        long long19 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.service = "tm.out";
        int int22 = atomikosProperties0.getConsoleFileLimit();
        boolean boolean23 = atomikosProperties0.threadedTwoPhaseCommit;
        boolean boolean24 = atomikosProperties0.threadedTwoPhaseCommit;
        int int25 = atomikosProperties0.getMaxActives();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertNotNull(properties12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel17 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel17.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 500L + "'", long19 == 500L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 50 + "'", int25 == 50);
    }

    @Test
    public void test07609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07609");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.enableLogging = false;
        atomikosProperties0.setMaxActives((int) ' ');
        java.util.Properties properties9 = atomikosProperties0.asProperties();
        java.util.Set<java.lang.Object> objSet10 = properties9.keySet();
        java.lang.String str11 = properties9.toString();
        java.util.Enumeration<java.lang.Object> objEnumeration12 = properties9.keys();
        java.util.Enumeration<?> wildcardEnumeration13 = properties9.propertyNames();
        java.util.Properties properties14 = new java.util.Properties();
        java.lang.String str15 = properties14.toString();
        java.lang.Object obj17 = properties14.remove((java.lang.Object) (short) 100);
        java.lang.Object obj20 = properties14.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean22 = properties14.containsKey((java.lang.Object) 0L);
        java.lang.Object obj25 = properties14.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties26 = new java.util.Properties(properties14);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties26.elements();
        java.util.Properties properties28 = new java.util.Properties();
        java.lang.Object obj31 = properties28.setProperty("{}", "{}");
        java.util.Enumeration<java.lang.Object> objEnumeration32 = properties28.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration33 = properties28.elements();
        java.util.Properties properties34 = new java.util.Properties(properties28);
        java.util.Properties properties35 = new java.util.Properties(properties34);
        java.util.Properties properties36 = new java.util.Properties(properties34);
        java.util.Collection<java.lang.Object> objCollection37 = properties34.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties39 = atomikosProperties38.asProperties();
        atomikosProperties38.service = "{-1.0=100}";
        long long42 = atomikosProperties38.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel43 = null;
        atomikosProperties38.setConsoleLogLevel(atomikosLoggingLevel43);
        atomikosProperties38.setTransactionManagerUniqueName("{-1.0=100}");
        int int47 = atomikosProperties38.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties48 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties48.setAllowSubTransactions(true);
        atomikosProperties48.maxActives = (short) -1;
        atomikosProperties48.setService("tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties55 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties55.setAllowSubTransactions(true);
        boolean boolean58 = atomikosProperties55.enableLogging;
        boolean boolean59 = atomikosProperties55.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel60 = atomikosProperties55.consoleLogLevel;
        atomikosProperties48.setConsoleLogLevel(atomikosLoggingLevel60);
        atomikosProperties38.setConsoleLogLevel(atomikosLoggingLevel60);
        java.lang.Object obj63 = properties26.put((java.lang.Object) properties34, (java.lang.Object) atomikosProperties38);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties64 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties65 = atomikosProperties64.asProperties();
        atomikosProperties64.service = "{-1.0=100}";
        long long68 = atomikosProperties64.getDefaultJtaTimeout();
        atomikosProperties64.consoleFileLimit = '#';
        int int71 = atomikosProperties64.getConsoleFileCount();
        atomikosProperties64.consoleFileLimit = 5;
        boolean boolean74 = properties26.containsValue((java.lang.Object) atomikosProperties64);
        java.util.Properties properties75 = new java.util.Properties();
        java.lang.Object obj78 = properties75.setProperty("{}", "{}");
        java.util.Enumeration<java.lang.Object> objEnumeration79 = properties75.keys();
        java.util.Enumeration<?> wildcardEnumeration80 = properties75.propertyNames();
        properties26.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties75);
        boolean boolean82 = properties9.containsValue((java.lang.Object) properties75);
        java.lang.String str83 = properties75.toString();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertNotNull(objSet10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=32, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={-1.0=100}, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}" + "'", str11, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=32, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={-1.0=100}, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        org.junit.Assert.assertNotNull(objEnumeration12);
        org.junit.Assert.assertNotNull(wildcardEnumeration13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{}" + "'", str15, "{}");
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNotNull(objEnumeration32);
        org.junit.Assert.assertNotNull(objEnumeration33);
        org.junit.Assert.assertNotNull(objCollection37);
        org.junit.Assert.assertNotNull(properties39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 10000L + "'", long42 == 10000L);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 50 + "'", int47 == 50);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel60 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel60.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertNotNull(properties65);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 10000L + "'", long68 == 10000L);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(obj78);
        org.junit.Assert.assertNotNull(objEnumeration79);
        org.junit.Assert.assertNotNull(wildcardEnumeration80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "{{}={}}" + "'", str83, "{{}={}}");
    }

    @Test
    public void test07610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07610");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isThreadedTwoPhaseCommit();
        java.lang.String str2 = atomikosProperties0.logBaseDir;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery3 = atomikosProperties0.recovery;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel4 = atomikosProperties0.getConsoleLogLevel();
        long long5 = atomikosProperties0.maxTimeout;
        java.lang.String str6 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.maxActives = '#';
        atomikosProperties0.checkpointInterval = 21;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(recovery3);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel4 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel4.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test07611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07611");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        long long7 = atomikosProperties0.getDefaultJtaTimeout();
        long long8 = atomikosProperties0.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery9 = atomikosProperties0.getRecovery();
        java.lang.String str10 = atomikosProperties0.outputDir;
        atomikosProperties0.consoleFileCount = 32;
        atomikosProperties0.consoleFileLimit = (short) -1;
        boolean boolean15 = atomikosProperties0.serialJtaTransactions;
        java.lang.String str16 = atomikosProperties0.consoleFileName;
        java.lang.String str17 = atomikosProperties0.consoleFileName;
        boolean boolean18 = atomikosProperties0.forceShutdownOnVmExit;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(recovery9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tm.out" + "'", str16, "tm.out");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tm.out" + "'", str17, "tm.out");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test07612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07612");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.retryInterval = (short) 100;
        recovery0.delay = (-1L);
        long long5 = recovery0.delay;
        recovery0.delay = (short) 1;
        long long8 = recovery0.getRetryInterval();
        int int9 = recovery0.maxRetries;
        int int10 = recovery0.maxRetries;
        long long11 = recovery0.forgetOrphanedLogEntriesDelay;
        recovery0.delay = 100;
        long long14 = recovery0.getDelay();
        int int15 = recovery0.maxRetries;
        recovery0.maxRetries = 0;
        recovery0.delay = 97L;
        int int20 = recovery0.getMaxRetries();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5 + "'", int9 == 5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5 + "'", int10 == 5);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 86400000L + "'", long11 == 86400000L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 100L + "'", long14 == 100L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5 + "'", int15 == 5);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test07613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07613");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        atomikosProperties0.setTransactionManagerUniqueName("{-1.0=100}");
        atomikosProperties0.consoleFileCount = 0;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery11 = atomikosProperties0.getRecovery();
        atomikosProperties0.setForceShutdownOnVmExit(false);
        java.lang.String str14 = atomikosProperties0.outputDir;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery15 = atomikosProperties0.getRecovery();
        int int16 = recovery15.getMaxRetries();
        recovery15.setDelay((long) (-1));
        long long19 = recovery15.getDelay();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertNotNull(recovery11);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(recovery15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
    }

    @Test
    public void test07614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07614");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setTransactionManagerUniqueName("{}");
        atomikosProperties0.consoleFileName = "hi!";
        int int9 = atomikosProperties0.getConsoleFileCount();
        java.util.Properties properties10 = new java.util.Properties();
        java.lang.String str11 = properties10.toString();
        java.lang.Object obj13 = properties10.remove((java.lang.Object) (short) 100);
        java.lang.Object obj16 = properties10.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj17 = properties10.clone();
        java.util.Set<java.lang.String> strSet18 = properties10.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery19 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery19.retryInterval = (short) 100;
        recovery19.delay = (-1L);
        long long24 = recovery19.delay;
        recovery19.delay = (short) 1;
        long long27 = recovery19.getRetryInterval();
        int int28 = recovery19.maxRetries;
        int int29 = recovery19.maxRetries;
        long long30 = recovery19.forgetOrphanedLogEntriesDelay;
        java.util.Properties properties31 = new java.util.Properties();
        java.lang.Object obj33 = properties31.remove((java.lang.Object) (-1.0d));
        boolean boolean34 = properties31.isEmpty();
        int int35 = properties31.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery36 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery36.retryInterval = (short) 100;
        recovery36.forgetOrphanedLogEntriesDelay = 'a';
        java.util.Properties properties41 = new java.util.Properties();
        java.lang.Object obj43 = properties41.remove((java.lang.Object) (-1.0d));
        boolean boolean44 = properties41.isEmpty();
        int int45 = properties41.size();
        java.lang.String str47 = properties41.getProperty("{}");
        boolean boolean48 = properties31.remove((java.lang.Object) recovery36, (java.lang.Object) properties41);
        java.lang.Object obj49 = properties10.putIfAbsent((java.lang.Object) long30, (java.lang.Object) properties31);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties51 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties52 = atomikosProperties51.asProperties();
        atomikosProperties51.service = "{-1.0=100}";
        long long55 = atomikosProperties51.getDefaultJtaTimeout();
        long long56 = atomikosProperties51.getMaxTimeout();
        int int57 = atomikosProperties51.consoleFileCount;
        int int58 = atomikosProperties51.getMaxActives();
        java.lang.Class<?> wildcardClass59 = atomikosProperties51.getClass();
        atomikosProperties0.set(properties10, "{-1.0=100}", (java.lang.Object) wildcardClass59);
        java.util.Set<java.lang.String> strSet61 = properties10.stringPropertyNames();
        java.lang.Object obj62 = properties10.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties63 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties63.setAllowSubTransactions(true);
        boolean boolean66 = atomikosProperties63.enableLogging;
        atomikosProperties63.consoleFileLimit = (byte) 100;
        java.util.Properties properties69 = new java.util.Properties();
        java.lang.String str70 = properties69.toString();
        java.util.Properties properties71 = new java.util.Properties(properties69);
        java.util.Properties properties73 = new java.util.Properties();
        java.lang.String str74 = properties73.toString();
        java.lang.Object obj76 = properties73.remove((java.lang.Object) (short) 100);
        java.lang.Object obj79 = properties73.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean81 = properties73.containsKey((java.lang.Object) 0L);
        java.lang.Object obj84 = properties73.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties85 = new java.util.Properties(properties73);
        java.util.Enumeration<java.lang.Object> objEnumeration86 = properties85.elements();
        atomikosProperties63.set(properties71, "{={-1.0=100}, -1.0=100}", (java.lang.Object) properties85);
        int int88 = properties71.size();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet89 = properties71.entrySet();
        boolean boolean90 = properties71.isEmpty();
        properties10.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties71);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties92 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties92.setAllowSubTransactions(true);
        boolean boolean95 = atomikosProperties92.isSerialJtaTransactions();
        atomikosProperties92.setLogBaseDir("hi!");
        java.lang.String str98 = atomikosProperties92.getTransactionManagerUniqueName();
        boolean boolean99 = properties10.containsKey((java.lang.Object) atomikosProperties92);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "{}" + "'", str11, "{}");
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "{1.0=-1}");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 100L + "'", long27 == 100L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5 + "'", int28 == 5);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5 + "'", int29 == 5);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 86400000L + "'", long30 == 86400000L);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertNotNull(properties52);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 10000L + "'", long55 == 10000L);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 300000L + "'", long56 == 300000L);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 50 + "'", int58 == 50);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertNotNull(obj62);
// flaky:         org.junit.Assert.assertEquals(obj62.toString(), "{86400000={}, 1.0=-1, com.atomikos.icatch.{-1.0=100}=class org.springframework.boot.jta.atomikos.AtomikosProperties}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj62), "{86400000={}, 1.0=-1, com.atomikos.icatch.{-1.0=100}=class org.springframework.boot.jta.atomikos.AtomikosProperties}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj62), "{86400000={}, 1.0=-1, com.atomikos.icatch.{-1.0=100}=class org.springframework.boot.jta.atomikos.AtomikosProperties}");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "{}" + "'", str70, "{}");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "{}" + "'", str74, "{}");
        org.junit.Assert.assertNull(obj76);
        org.junit.Assert.assertNull(obj79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(obj84);
        org.junit.Assert.assertNotNull(objEnumeration86);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertNotNull(objEntrySet89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertNull(str98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test07615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07615");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj7 = properties0.clone();
        java.util.Set<java.lang.String> strSet8 = properties0.stringPropertyNames();
        java.util.Properties properties9 = new java.util.Properties();
        java.lang.String str10 = properties9.toString();
        java.lang.Object obj12 = properties9.remove((java.lang.Object) (short) 100);
        java.lang.Object obj15 = properties9.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean17 = properties9.containsKey((java.lang.Object) 0L);
        java.lang.Object obj20 = properties9.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.String str22 = properties21.toString();
        java.lang.Object obj24 = properties21.remove((java.lang.Object) (short) 100);
        java.lang.Object obj27 = properties21.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj28 = properties21.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration29 = properties21.elements();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties21);
        java.util.Properties properties31 = new java.util.Properties();
        java.lang.String str32 = properties31.toString();
        java.lang.Object obj34 = properties31.remove((java.lang.Object) (short) 100);
        java.lang.Object obj37 = properties31.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean39 = properties31.containsKey((java.lang.Object) 0L);
        java.lang.Object obj42 = properties31.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties43 = new java.util.Properties();
        java.lang.String str44 = properties43.toString();
        java.lang.Object obj46 = properties43.remove((java.lang.Object) (short) 100);
        java.lang.Object obj49 = properties43.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj50 = properties43.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration51 = properties43.elements();
        properties31.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties43);
        java.lang.Object obj53 = properties0.putIfAbsent((java.lang.Object) properties9, (java.lang.Object) properties43);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery54 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery54.retryInterval = (short) 100;
        recovery54.setForgetOrphanedLogEntriesDelay((long) 5);
        recovery54.setForgetOrphanedLogEntriesDelay((long) (short) 0);
        java.lang.Object obj61 = properties43.remove((java.lang.Object) recovery54);
        recovery54.retryInterval = 32;
        long long64 = recovery54.getRetryInterval();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{1.0=-1}");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "{}" + "'", str10, "{}");
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{}" + "'", str22, "{}");
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "{}" + "'", str32, "{}");
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "{}" + "'", str44, "{}");
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertEquals(obj50.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj50), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj50), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration51);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertNull(obj61);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 32L + "'", long64 == 32L);
    }

    @Test
    public void test07616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07616");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        java.lang.Object obj7 = properties0.clone();
        java.lang.Object obj10 = properties0.setProperty("", "{1.0=-1, -1.0=100}");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{-1.0=100}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{-1.0=100}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{-1.0=100}");
        org.junit.Assert.assertNull(obj10);
    }

    @Test
    public void test07617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07617");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.retryInterval = (short) 100;
        recovery0.delay = (-1L);
        long long5 = recovery0.delay;
        recovery0.delay = (short) 1;
        long long8 = recovery0.getRetryInterval();
        int int9 = recovery0.maxRetries;
        int int10 = recovery0.maxRetries;
        long long11 = recovery0.forgetOrphanedLogEntriesDelay;
        recovery0.delay = 100;
        long long14 = recovery0.getDelay();
        recovery0.maxRetries = 0;
        long long17 = recovery0.getDelay();
        long long18 = recovery0.retryInterval;
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5 + "'", int9 == 5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5 + "'", int10 == 5);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 86400000L + "'", long11 == 86400000L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 100L + "'", long14 == 100L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 100L + "'", long17 == 100L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 100L + "'", long18 == 100L);
    }

    @Test
    public void test07618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07618");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        boolean boolean5 = atomikosProperties0.isSerialJtaTransactions();
        int int6 = atomikosProperties0.getConsoleFileLimit();
        boolean boolean7 = atomikosProperties0.allowSubTransactions;
        atomikosProperties0.setCheckpointInterval(2L);
        atomikosProperties0.forceShutdownOnVmExit = true;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test07619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07619");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties7.setEnableLogging(true);
        atomikosProperties7.consoleFileCount = 0;
        atomikosProperties7.setSerialJtaTransactions(false);
        java.lang.String str14 = atomikosProperties7.getOutputDir();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties16 = atomikosProperties15.asProperties();
        atomikosProperties15.service = "{-1.0=100}";
        long long19 = atomikosProperties15.getDefaultJtaTimeout();
        atomikosProperties15.serialJtaTransactions = true;
        long long22 = atomikosProperties15.getDefaultJtaTimeout();
        long long23 = atomikosProperties15.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery24 = atomikosProperties15.getRecovery();
        recovery24.setRetryInterval((long) (byte) 0);
        java.lang.Object obj27 = properties0.replace((java.lang.Object) atomikosProperties7, (java.lang.Object) (byte) 0);
        int int28 = atomikosProperties7.getConsoleFileLimit();
        java.lang.String str29 = atomikosProperties7.getLogBaseName();
        atomikosProperties7.setMaxTimeout((long) 10);
        atomikosProperties7.threadedTwoPhaseCommit = true;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery34 = atomikosProperties7.recovery;
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10000L + "'", long19 == 10000L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 10000L + "'", long22 == 10000L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 500L + "'", long23 == 500L);
        org.junit.Assert.assertNotNull(recovery24);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "tmlog" + "'", str29, "tmlog");
        org.junit.Assert.assertNotNull(recovery34);
    }

    @Test
    public void test07620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07620");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        atomikosProperties2.service = "{-1.0=100}";
        long long6 = atomikosProperties2.getDefaultJtaTimeout();
        atomikosProperties2.consoleFileLimit = '#';
        java.lang.Object obj9 = properties1.get((java.lang.Object) atomikosProperties2);
        boolean boolean10 = atomikosProperties2.forceShutdownOnVmExit;
        atomikosProperties2.setOutputDir("");
        long long13 = atomikosProperties2.defaultJtaTimeout;
        java.lang.String str14 = atomikosProperties2.getLogBaseName();
        java.lang.String str15 = atomikosProperties2.logBaseName;
        atomikosProperties2.setLogBaseDir("{{}={}}");
        java.lang.String str18 = atomikosProperties2.getLogBaseName();
        atomikosProperties2.setThreadedTwoPhaseCommit(false);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10000L + "'", long13 == 10000L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "tmlog" + "'", str14, "tmlog");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "tmlog" + "'", str15, "tmlog");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "tmlog" + "'", str18, "tmlog");
    }

    @Test
    public void test07621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07621");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        java.lang.String str7 = atomikosProperties0.getLogBaseName();
        java.util.Properties properties8 = atomikosProperties0.asProperties();
        int int9 = atomikosProperties0.getConsoleFileCount();
        long long10 = atomikosProperties0.getDefaultJtaTimeout();
        boolean boolean11 = atomikosProperties0.serialJtaTransactions;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "tmlog" + "'", str7, "tmlog");
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test07622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07622");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        atomikosProperties2.service = "{-1.0=100}";
        long long6 = atomikosProperties2.getDefaultJtaTimeout();
        atomikosProperties2.consoleFileLimit = '#';
        java.lang.Object obj9 = properties1.get((java.lang.Object) atomikosProperties2);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet10 = properties1.entrySet();
        java.util.Set<java.lang.Object> objSet11 = properties1.keySet();
        java.util.Enumeration<java.lang.Object> objEnumeration12 = properties1.keys();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNotNull(objEntrySet10);
        org.junit.Assert.assertNotNull(objSet11);
        org.junit.Assert.assertNotNull(objEnumeration12);
    }

    @Test
    public void test07623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07623");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setMaxActives(0);
        boolean boolean7 = atomikosProperties0.threadedTwoPhaseCommit;
        boolean boolean8 = atomikosProperties0.allowSubTransactions;
        atomikosProperties0.logBaseDir = "{}";
        atomikosProperties0.logBaseName = "{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}";
        atomikosProperties0.setDefaultJtaTimeout(0L);
        atomikosProperties0.outputDir = "hi!";
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test07624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07624");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        properties0.clear();
        java.lang.Object obj4 = properties0.get((java.lang.Object) "{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long6 = recovery5.getRetryInterval();
        long long7 = recovery5.getDelay();
        long long8 = recovery5.getDelay();
        recovery5.setForgetOrphanedLogEntriesDelay(10000L);
        recovery5.retryInterval = '4';
        recovery5.setRetryInterval((long) (short) 0);
        recovery5.setMaxRetries(0);
        java.lang.Object obj17 = properties0.get((java.lang.Object) 0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties19 = atomikosProperties18.asProperties();
        atomikosProperties18.service = "{-1.0=100}";
        long long22 = atomikosProperties18.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel23 = null;
        atomikosProperties18.setConsoleLogLevel(atomikosLoggingLevel23);
        int int25 = atomikosProperties18.maxActives;
        atomikosProperties18.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery28 = atomikosProperties18.getRecovery();
        atomikosProperties18.outputDir = "hi!";
        java.lang.String str31 = atomikosProperties18.getService();
        boolean boolean32 = properties0.equals((java.lang.Object) atomikosProperties18);
        java.io.OutputStream outputStream33 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.storeToXML(outputStream33, "{{1.0=-1}=hi!}", "{-1.0=100}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 10000L + "'", long8 == 10000L);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(properties19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 10000L + "'", long22 == 10000L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 50 + "'", int25 == 50);
        org.junit.Assert.assertNotNull(recovery28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "{-1.0=100}" + "'", str31, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test07625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07625");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        long long7 = atomikosProperties0.getDefaultJtaTimeout();
        long long8 = atomikosProperties0.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery9 = atomikosProperties0.getRecovery();
        long long10 = recovery9.delay;
        int int11 = recovery9.maxRetries;
        int int12 = recovery9.maxRetries;
        recovery9.retryInterval = 86400000L;
        recovery9.delay = 100L;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(recovery9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 5 + "'", int12 == 5);
    }

    @Test
    public void test07626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07626");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties();
        java.lang.String str2 = properties1.toString();
        java.lang.Object obj4 = properties1.remove((java.lang.Object) (short) 100);
        java.lang.Object obj7 = properties1.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        int int8 = properties1.size();
        java.util.Properties properties9 = new java.util.Properties();
        java.lang.Object obj11 = properties9.remove((java.lang.Object) (-1.0d));
        boolean boolean12 = properties9.isEmpty();
        java.lang.Object obj15 = properties9.setProperty("hi!", "{}");
        boolean boolean16 = properties0.remove((java.lang.Object) int8, (java.lang.Object) properties9);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties17.outputDir = "{={-1.0=100}, -1.0=100}";
        boolean boolean20 = properties0.contains((java.lang.Object) atomikosProperties17);
        boolean boolean21 = atomikosProperties17.forceShutdownOnVmExit;
        int int22 = atomikosProperties17.consoleFileCount;
        atomikosProperties17.forceShutdownOnVmExit = false;
        atomikosProperties17.allowSubTransactions = true;
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{}" + "'", str2, "{}");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
    }

    @Test
    public void test07627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07627");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj7 = properties0.clone();
        java.lang.String str9 = properties0.getProperty("{}");
        java.util.Properties properties10 = new java.util.Properties();
        java.lang.Object obj12 = properties10.remove((java.lang.Object) (-1.0d));
        boolean boolean13 = properties10.isEmpty();
        java.util.Collection<java.lang.Object> objCollection14 = properties10.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties16 = atomikosProperties15.asProperties();
        atomikosProperties15.service = "{-1.0=100}";
        long long19 = atomikosProperties15.getDefaultJtaTimeout();
        atomikosProperties15.serialJtaTransactions = true;
        long long22 = atomikosProperties15.getDefaultJtaTimeout();
        long long23 = atomikosProperties15.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery24 = atomikosProperties15.getRecovery();
        long long25 = recovery24.delay;
        int int26 = recovery24.maxRetries;
        java.lang.Object obj27 = properties10.get((java.lang.Object) int26);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties29.setAllowSubTransactions(true);
        boolean boolean32 = atomikosProperties29.enableLogging;
        atomikosProperties29.consoleFileLimit = (byte) 100;
        java.util.Properties properties35 = new java.util.Properties();
        java.lang.String str36 = properties35.toString();
        java.util.Properties properties37 = new java.util.Properties(properties35);
        java.util.Properties properties39 = new java.util.Properties();
        java.lang.String str40 = properties39.toString();
        java.lang.Object obj42 = properties39.remove((java.lang.Object) (short) 100);
        java.lang.Object obj45 = properties39.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean47 = properties39.containsKey((java.lang.Object) 0L);
        java.lang.Object obj50 = properties39.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties51 = new java.util.Properties(properties39);
        java.util.Enumeration<java.lang.Object> objEnumeration52 = properties51.elements();
        atomikosProperties29.set(properties37, "{={-1.0=100}, -1.0=100}", (java.lang.Object) properties51);
        int int54 = properties37.size();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet55 = properties37.entrySet();
        java.util.Collection<java.lang.Object> objCollection56 = properties37.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties57 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties58 = atomikosProperties57.asProperties();
        atomikosProperties57.service = "{-1.0=100}";
        java.lang.String str61 = atomikosProperties57.getTransactionManagerUniqueName();
        atomikosProperties57.consoleFileLimit = (byte) 10;
        atomikosProperties57.consoleFileName = "hi!";
        java.lang.Object obj66 = properties10.replace((java.lang.Object) objCollection56, (java.lang.Object) atomikosProperties57);
        java.util.Collection<java.lang.Object> objCollection67 = properties10.values();
        java.util.Properties properties68 = new java.util.Properties(properties10);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet69 = properties10.entrySet();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{1.0=-1}");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objCollection14);
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10000L + "'", long19 == 10000L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 10000L + "'", long22 == 10000L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 500L + "'", long23 == 500L);
        org.junit.Assert.assertNotNull(recovery24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 10000L + "'", long25 == 10000L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 5 + "'", int26 == 5);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "{}" + "'", str36, "{}");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "{}" + "'", str40, "{}");
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertNotNull(objEnumeration52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(objEntrySet55);
        org.junit.Assert.assertNotNull(objCollection56);
        org.junit.Assert.assertNotNull(properties58);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertNotNull(objCollection67);
        org.junit.Assert.assertNotNull(objEntrySet69);
    }

    @Test
    public void test07628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07628");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj3 = properties0.setProperty("{}", "{}");
        java.util.Enumeration<java.lang.Object> objEnumeration4 = properties0.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties0.elements();
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Enumeration<?> wildcardEnumeration7 = properties6.propertyNames();
        java.lang.Object obj8 = properties0.remove((java.lang.Object) wildcardEnumeration7);
        java.util.Properties properties9 = new java.util.Properties(properties0);
        java.lang.Object obj10 = properties9.clone();
        java.util.Properties properties11 = new java.util.Properties(properties9);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties13 = atomikosProperties12.asProperties();
        atomikosProperties12.service = "{-1.0=100}";
        long long16 = atomikosProperties12.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel17 = null;
        atomikosProperties12.setConsoleLogLevel(atomikosLoggingLevel17);
        int int19 = atomikosProperties12.maxActives;
        atomikosProperties12.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery22 = atomikosProperties12.getRecovery();
        atomikosProperties12.forceShutdownOnVmExit = false;
        java.lang.String str25 = atomikosProperties12.service;
        atomikosProperties12.allowSubTransactions = false;
        atomikosProperties12.enableLogging = false;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel30 = atomikosProperties12.consoleLogLevel;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean31 = properties11.containsValue((java.lang.Object) atomikosLoggingLevel30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNotNull(objEnumeration4);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNotNull(wildcardEnumeration7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{}");
        org.junit.Assert.assertNotNull(properties13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10000L + "'", long16 == 10000L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 50 + "'", int19 == 50);
        org.junit.Assert.assertNotNull(recovery22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "{-1.0=100}" + "'", str25, "{-1.0=100}");
        org.junit.Assert.assertNull(atomikosLoggingLevel30);
    }

    @Test
    public void test07629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07629");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel7 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel7);
        boolean boolean9 = atomikosProperties0.enableLogging;
        int int10 = atomikosProperties0.getConsoleFileLimit();
        atomikosProperties0.serialJtaTransactions = false;
        atomikosProperties0.setLogBaseName("");
        int int15 = atomikosProperties0.getConsoleFileLimit();
        atomikosProperties0.setDefaultJtaTimeout(1L);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
    }

    @Test
    public void test07630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07630");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        long long7 = atomikosProperties0.getDefaultJtaTimeout();
        long long8 = atomikosProperties0.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery9 = atomikosProperties0.getRecovery();
        java.lang.String str10 = atomikosProperties0.outputDir;
        atomikosProperties0.setSerialJtaTransactions(true);
        atomikosProperties0.serialJtaTransactions = true;
        java.lang.String str15 = atomikosProperties0.consoleFileName;
        atomikosProperties0.setLogBaseDir("{={-1.0=100}, -1.0=100}");
        java.lang.String str18 = atomikosProperties0.getTransactionManagerUniqueName();
        boolean boolean19 = atomikosProperties0.isThreadedTwoPhaseCommit();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(recovery9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "tm.out" + "'", str15, "tm.out");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test07631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07631");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        long long7 = atomikosProperties0.getDefaultJtaTimeout();
        long long8 = atomikosProperties0.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery9 = atomikosProperties0.getRecovery();
        java.lang.String str10 = atomikosProperties0.outputDir;
        atomikosProperties0.consoleFileCount = 32;
        atomikosProperties0.consoleFileLimit = (short) -1;
        boolean boolean15 = atomikosProperties0.serialJtaTransactions;
        java.lang.String str16 = atomikosProperties0.consoleFileName;
        atomikosProperties0.checkpointInterval = 32;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(recovery9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tm.out" + "'", str16, "tm.out");
    }

    @Test
    public void test07632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07632");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties12 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration13 = properties12.elements();
        java.util.Properties properties14 = new java.util.Properties();
        java.lang.Object obj17 = properties14.setProperty("{}", "{}");
        java.util.Enumeration<java.lang.Object> objEnumeration18 = properties14.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration19 = properties14.elements();
        java.util.Properties properties20 = new java.util.Properties(properties14);
        java.util.Properties properties21 = new java.util.Properties(properties20);
        java.util.Properties properties22 = new java.util.Properties(properties20);
        java.util.Collection<java.lang.Object> objCollection23 = properties20.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties25 = atomikosProperties24.asProperties();
        atomikosProperties24.service = "{-1.0=100}";
        long long28 = atomikosProperties24.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel29 = null;
        atomikosProperties24.setConsoleLogLevel(atomikosLoggingLevel29);
        atomikosProperties24.setTransactionManagerUniqueName("{-1.0=100}");
        int int33 = atomikosProperties24.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties34 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties34.setAllowSubTransactions(true);
        atomikosProperties34.maxActives = (short) -1;
        atomikosProperties34.setService("tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties41.setAllowSubTransactions(true);
        boolean boolean44 = atomikosProperties41.enableLogging;
        boolean boolean45 = atomikosProperties41.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel46 = atomikosProperties41.consoleLogLevel;
        atomikosProperties34.setConsoleLogLevel(atomikosLoggingLevel46);
        atomikosProperties24.setConsoleLogLevel(atomikosLoggingLevel46);
        java.lang.Object obj49 = properties12.put((java.lang.Object) properties20, (java.lang.Object) atomikosProperties24);
        java.util.Enumeration<java.lang.Object> objEnumeration50 = properties20.elements();
        java.lang.String str51 = properties20.toString();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNotNull(objEnumeration13);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(objEnumeration18);
        org.junit.Assert.assertNotNull(objEnumeration19);
        org.junit.Assert.assertNotNull(objCollection23);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 10000L + "'", long28 == 10000L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 50 + "'", int33 == 50);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel46 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel46.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertNotNull(objEnumeration50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "{}" + "'", str51, "{}");
    }

    @Test
    public void test07633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07633");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        boolean boolean7 = atomikosProperties0.isAllowSubTransactions();
        boolean boolean8 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.allowSubTransactions = false;
        atomikosProperties0.threadedTwoPhaseCommit = true;
        atomikosProperties0.setLogBaseName("tm.out");
        java.lang.String str15 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.outputDir = "{{}={}}";
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery18 = atomikosProperties0.getRecovery();
        atomikosProperties0.setMaxActives(0);
        atomikosProperties0.setOutputDir("{{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}=, ={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(recovery18);
    }

    @Test
    public void test07634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07634");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getLogBaseName();
        long long5 = atomikosProperties0.defaultJtaTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel6 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel6);
        atomikosProperties0.setLogBaseDir("");
        java.util.Properties properties10 = atomikosProperties0.asProperties();
        atomikosProperties0.consoleFileName = "{100=100}";
        boolean boolean13 = atomikosProperties0.isEnableLogging();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tmlog" + "'", str4, "tmlog");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 10000L + "'", long5 == 10000L);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test07635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07635");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj4 = properties0.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties6 = atomikosProperties5.asProperties();
        atomikosProperties5.service = "{-1.0=100}";
        long long9 = atomikosProperties5.getDefaultJtaTimeout();
        atomikosProperties5.setThreadedTwoPhaseCommit(true);
        boolean boolean12 = atomikosProperties5.isAllowSubTransactions();
        boolean boolean13 = atomikosProperties5.isEnableLogging();
        atomikosProperties5.allowSubTransactions = false;
        java.lang.Object obj16 = properties0.remove((java.lang.Object) false);
        java.util.Properties properties17 = new java.util.Properties();
        java.lang.String str18 = properties17.toString();
        java.lang.Object obj20 = properties17.remove((java.lang.Object) (short) 100);
        java.lang.Object obj21 = properties17.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties23 = atomikosProperties22.asProperties();
        atomikosProperties22.service = "{-1.0=100}";
        long long26 = atomikosProperties22.getDefaultJtaTimeout();
        atomikosProperties22.setThreadedTwoPhaseCommit(true);
        boolean boolean29 = atomikosProperties22.isAllowSubTransactions();
        boolean boolean30 = atomikosProperties22.isEnableLogging();
        atomikosProperties22.allowSubTransactions = false;
        java.lang.Object obj33 = properties17.remove((java.lang.Object) false);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties17);
        boolean boolean35 = properties17.isEmpty();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "{}");
        org.junit.Assert.assertNotNull(properties6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10000L + "'", long9 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "{}" + "'", str18, "{}");
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "{}");
        org.junit.Assert.assertNotNull(properties23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 10000L + "'", long26 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test07636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07636");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.remove((java.lang.Object) (-1.0d));
        boolean boolean3 = properties0.isEmpty();
        java.lang.Object obj6 = properties0.setProperty("hi!", "{}");
        java.util.Collection<java.lang.Object> objCollection7 = properties0.values();
        java.util.Set<java.lang.Object> objSet8 = properties0.keySet();
        java.io.InputStream inputStream9 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.load(inputStream9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(objCollection7);
        org.junit.Assert.assertNotNull(objSet8);
    }

    @Test
    public void test07637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07637");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setTransactionManagerUniqueName("{}");
        atomikosProperties0.consoleFileName = "hi!";
        atomikosProperties0.setAllowSubTransactions(false);
        long long11 = atomikosProperties0.checkpointInterval;
        java.lang.String str12 = atomikosProperties0.getLogBaseName();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 500L + "'", long11 == 500L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "tmlog" + "'", str12, "tmlog");
    }

    @Test
    public void test07638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07638");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.retryInterval = (short) 100;
        recovery0.forgetOrphanedLogEntriesDelay = 'a';
        long long5 = recovery0.retryInterval;
        recovery0.retryInterval = (-1);
        long long8 = recovery0.delay;
        long long9 = recovery0.retryInterval;
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 100L + "'", long5 == 100L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 10000L + "'", long8 == 10000L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
    }

    @Test
    public void test07639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07639");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        int int5 = atomikosProperties0.consoleFileCount;
        atomikosProperties0.transactionManagerUniqueName = "tm.out";
        atomikosProperties0.consoleFileName = "tm.out";
        atomikosProperties0.allowSubTransactions = false;
        boolean boolean12 = atomikosProperties0.allowSubTransactions;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel13 = atomikosProperties0.getConsoleLogLevel();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel13 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel13.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
    }

    @Test
    public void test07640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07640");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.enableLogging = false;
        atomikosProperties0.setMaxTimeout((long) (byte) 0);
        atomikosProperties0.serialJtaTransactions = false;
        boolean boolean11 = atomikosProperties0.enableLogging;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test07641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07641");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        long long7 = atomikosProperties0.getDefaultJtaTimeout();
        long long8 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.setService("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name={}, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={-1.0=100}, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
    }

    @Test
    public void test07642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07642");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.enableLogging = false;
        atomikosProperties0.setMaxActives((int) ' ');
        java.util.Properties properties9 = atomikosProperties0.asProperties();
        java.util.Enumeration<java.lang.Object> objEnumeration10 = properties9.keys();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertNotNull(objEnumeration10);
    }

    @Test
    public void test07643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07643");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        int int7 = atomikosProperties0.maxActives;
        atomikosProperties0.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.getRecovery();
        atomikosProperties0.outputDir = "hi!";
        java.lang.String str13 = atomikosProperties0.getLogBaseName();
        atomikosProperties0.setService("{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}");
        atomikosProperties0.maxTimeout = 0L;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery18 = atomikosProperties0.getRecovery();
        long long19 = recovery18.delay;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNotNull(recovery18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10000L + "'", long19 == 10000L);
    }

    @Test
    public void test07644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07644");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setEnableLogging(true);
        atomikosProperties0.consoleFileCount = 0;
        atomikosProperties0.setSerialJtaTransactions(false);
        atomikosProperties0.consoleFileCount = (short) 1;
        java.lang.String str9 = atomikosProperties0.outputDir;
        java.lang.String str10 = atomikosProperties0.getConsoleFileName();
        java.lang.String str11 = atomikosProperties0.consoleFileName;
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "tm.out" + "'", str10, "tm.out");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "tm.out" + "'", str11, "tm.out");
    }

    @Test
    public void test07645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07645");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        long long5 = atomikosProperties0.getMaxTimeout();
        int int6 = atomikosProperties0.consoleFileCount;
        int int7 = atomikosProperties0.getMaxActives();
        atomikosProperties0.setAllowSubTransactions(true);
        boolean boolean10 = atomikosProperties0.serialJtaTransactions;
        java.util.Properties properties11 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties13 = atomikosProperties12.asProperties();
        atomikosProperties12.service = "{-1.0=100}";
        long long16 = atomikosProperties12.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel17 = null;
        atomikosProperties12.setConsoleLogLevel(atomikosLoggingLevel17);
        atomikosProperties12.setTransactionManagerUniqueName("{-1.0=100}");
        boolean boolean21 = atomikosProperties12.enableLogging;
        java.lang.String str22 = atomikosProperties12.getOutputDir();
        atomikosProperties12.setConsoleFileName("{100=100}");
        atomikosProperties12.forceShutdownOnVmExit = true;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery27 = atomikosProperties12.recovery;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties29 = atomikosProperties28.asProperties();
        atomikosProperties28.service = "{-1.0=100}";
        java.lang.String str32 = atomikosProperties28.getTransactionManagerUniqueName();
        atomikosProperties28.consoleFileLimit = (byte) 10;
        long long35 = atomikosProperties28.getMaxTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel36 = null;
        atomikosProperties28.consoleLogLevel = atomikosLoggingLevel36;
        atomikosProperties28.setService("");
        atomikosProperties28.setMaxTimeout((long) (short) -1);
        boolean boolean42 = atomikosProperties28.isSerialJtaTransactions();
        int int43 = atomikosProperties28.consoleFileCount;
        boolean boolean44 = properties11.remove((java.lang.Object) recovery27, (java.lang.Object) atomikosProperties28);
        long long45 = recovery27.forgetOrphanedLogEntriesDelay;
        long long46 = recovery27.forgetOrphanedLogEntriesDelay;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNotNull(properties13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10000L + "'", long16 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(recovery27);
        org.junit.Assert.assertNotNull(properties29);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 300000L + "'", long35 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 86400000L + "'", long45 == 86400000L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 86400000L + "'", long46 == 86400000L);
    }

    @Test
    public void test07646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07646");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getLogBaseName();
        long long5 = atomikosProperties0.defaultJtaTimeout;
        long long6 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.allowSubTransactions = true;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel9 = atomikosProperties0.consoleLogLevel;
        atomikosProperties0.setSerialJtaTransactions(true);
        java.lang.String str12 = atomikosProperties0.getLogBaseDir();
        java.util.Properties properties13 = atomikosProperties0.asProperties();
        java.io.InputStream inputStream14 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties13.loadFromXML(inputStream14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tmlog" + "'", str4, "tmlog");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 10000L + "'", long5 == 10000L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 300000L + "'", long6 == 300000L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel9 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel9.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(properties13);
    }

    @Test
    public void test07647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07647");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setEnableLogging(true);
        atomikosProperties0.consoleFileCount = 0;
        atomikosProperties0.consoleFileCount = 100;
        atomikosProperties0.setMaxTimeout((long) (byte) -1);
        java.util.Properties properties9 = atomikosProperties0.asProperties();
        java.lang.String str10 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.maxActives = 50;
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "tm.out" + "'", str10, "tm.out");
    }

    @Test
    public void test07648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07648");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        atomikosProperties0.setTransactionManagerUniqueName("{-1.0=100}");
        atomikosProperties0.consoleFileCount = 0;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery11 = atomikosProperties0.getRecovery();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery12 = atomikosProperties0.recovery;
        recovery12.setMaxRetries(5);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertNotNull(recovery11);
        org.junit.Assert.assertNotNull(recovery12);
    }

    @Test
    public void test07649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07649");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setEnableLogging(true);
        atomikosProperties0.consoleFileCount = 0;
        int int5 = atomikosProperties0.getMaxActives();
        java.lang.String str6 = atomikosProperties0.getLogBaseDir();
        java.lang.String str7 = atomikosProperties0.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery8 = atomikosProperties0.getRecovery();
        boolean boolean9 = atomikosProperties0.threadedTwoPhaseCommit;
        atomikosProperties0.enableLogging = false;
        atomikosProperties0.checkpointInterval = (byte) 10;
        int int14 = atomikosProperties0.getConsoleFileLimit();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 50 + "'", int5 == 50);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(recovery8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
    }

    @Test
    public void test07650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07650");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        atomikosProperties0.setConsoleFileCount((int) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel8 = null;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel8;
        java.lang.String str10 = atomikosProperties0.logBaseDir;
        atomikosProperties0.checkpointInterval = (byte) 0;
        java.lang.String str13 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.serialJtaTransactions = true;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel16 = atomikosProperties0.getConsoleLogLevel();
        java.lang.String str17 = atomikosProperties0.consoleFileName;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel18 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel18);
        java.lang.String str20 = atomikosProperties0.getLogBaseName();
        atomikosProperties0.enableLogging = true;
        boolean boolean23 = atomikosProperties0.isThreadedTwoPhaseCommit();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(atomikosLoggingLevel16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tm.out" + "'", str17, "tm.out");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{-1.0=100}" + "'", str20, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test07651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07651");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.retryInterval = (short) 100;
        recovery0.delay = (-1L);
        long long5 = recovery0.delay;
        recovery0.delay = (short) 1;
        long long8 = recovery0.getRetryInterval();
        int int9 = recovery0.maxRetries;
        long long10 = recovery0.getForgetOrphanedLogEntriesDelay();
        recovery0.setRetryInterval((long) 10);
        long long13 = recovery0.retryInterval;
        recovery0.setDelay(10000L);
        recovery0.maxRetries = 100;
        int int18 = recovery0.maxRetries;
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5 + "'", int9 == 5);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 86400000L + "'", long10 == 86400000L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10L + "'", long13 == 10L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
    }

    @Test
    public void test07652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07652");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        atomikosProperties0.setConsoleFileCount((int) (byte) 100);
        atomikosProperties0.setAllowSubTransactions(true);
        int int10 = atomikosProperties0.getMaxActives();
        boolean boolean11 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.setOutputDir("");
        java.lang.String str14 = atomikosProperties0.getTransactionManagerUniqueName();
        java.lang.String str15 = atomikosProperties0.getLogBaseDir();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel16 = atomikosProperties0.consoleLogLevel;
        java.util.Properties properties17 = atomikosProperties0.asProperties();
        java.lang.String str18 = atomikosProperties0.getLogBaseName();
        boolean boolean19 = atomikosProperties0.isAllowSubTransactions();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 50 + "'", int10 == 50);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel16 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel16.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(properties17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "{-1.0=100}" + "'", str18, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test07653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07653");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj7 = properties0.clone();
        java.util.Properties properties8 = new java.util.Properties();
        java.lang.Object obj10 = properties8.remove((java.lang.Object) (-1.0d));
        boolean boolean11 = properties8.isEmpty();
        int int12 = properties8.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery13 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery13.retryInterval = (short) 100;
        recovery13.forgetOrphanedLogEntriesDelay = 'a';
        java.util.Properties properties18 = new java.util.Properties();
        java.lang.Object obj20 = properties18.remove((java.lang.Object) (-1.0d));
        boolean boolean21 = properties18.isEmpty();
        int int22 = properties18.size();
        java.lang.String str24 = properties18.getProperty("{}");
        boolean boolean25 = properties8.remove((java.lang.Object) recovery13, (java.lang.Object) properties18);
        boolean boolean26 = properties0.containsValue((java.lang.Object) properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties27.setAllowSubTransactions(true);
        boolean boolean30 = atomikosProperties27.enableLogging;
        atomikosProperties27.consoleFileLimit = (byte) 100;
        java.util.Properties properties33 = new java.util.Properties();
        java.lang.String str34 = properties33.toString();
        java.util.Properties properties35 = new java.util.Properties(properties33);
        java.util.Properties properties37 = new java.util.Properties();
        java.lang.String str38 = properties37.toString();
        java.lang.Object obj40 = properties37.remove((java.lang.Object) (short) 100);
        java.lang.Object obj43 = properties37.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean45 = properties37.containsKey((java.lang.Object) 0L);
        java.lang.Object obj48 = properties37.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties49 = new java.util.Properties(properties37);
        java.util.Enumeration<java.lang.Object> objEnumeration50 = properties49.elements();
        atomikosProperties27.set(properties35, "{={-1.0=100}, -1.0=100}", (java.lang.Object) properties49);
        atomikosProperties27.setOutputDir("hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery54 = atomikosProperties27.getRecovery();
        atomikosProperties27.setOutputDir("{={-1.0=100}, -1.0=100}");
        boolean boolean57 = atomikosProperties27.isForceShutdownOnVmExit();
        atomikosProperties27.setOutputDir("hi!");
        java.lang.String str60 = atomikosProperties27.logBaseDir;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery61 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery61.retryInterval = (short) 100;
        recovery61.delay = (-1L);
        long long66 = recovery61.delay;
        recovery61.delay = (short) 1;
        long long69 = recovery61.getRetryInterval();
        long long70 = recovery61.getForgetOrphanedLogEntriesDelay();
        recovery61.setMaxRetries(10);
        int int73 = recovery61.maxRetries;
        recovery61.setForgetOrphanedLogEntriesDelay((long) 32);
        long long76 = recovery61.delay;
        int int77 = recovery61.getMaxRetries();
        java.lang.Object obj78 = properties0.put((java.lang.Object) atomikosProperties27, (java.lang.Object) recovery61);
        java.io.PrintStream printStream79 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.list(printStream79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{1.0=-1}");
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "{}" + "'", str34, "{}");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "{}" + "'", str38, "{}");
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertNotNull(objEnumeration50);
        org.junit.Assert.assertNotNull(recovery54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + (-1L) + "'", long66 == (-1L));
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 100L + "'", long69 == 100L);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 86400000L + "'", long70 == 86400000L);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 10 + "'", int73 == 10);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 1L + "'", long76 == 1L);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 10 + "'", int77 == 10);
        org.junit.Assert.assertNull(obj78);
    }

    @Test
    public void test07654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07654");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.util.Properties properties3 = new java.util.Properties();
        java.lang.String str4 = properties3.toString();
        java.lang.Object obj6 = properties3.remove((java.lang.Object) (short) 100);
        java.lang.Object obj9 = properties3.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean11 = properties3.containsKey((java.lang.Object) 0L);
        java.lang.Object obj14 = properties3.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj17 = properties3.setProperty("", "{-1.0=100}");
        java.util.Enumeration<java.lang.Object> objEnumeration18 = properties3.keys();
        java.util.Properties properties19 = new java.util.Properties();
        java.lang.String str20 = properties19.toString();
        boolean boolean21 = properties19.isEmpty();
        java.lang.Object obj24 = properties19.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration25 = properties19.elements();
        java.lang.Object obj26 = properties2.replace((java.lang.Object) objEnumeration18, (java.lang.Object) properties19);
        java.util.Collection<java.lang.Object> objCollection27 = properties2.values();
        java.util.Properties properties28 = new java.util.Properties();
        java.lang.String str29 = properties28.toString();
        java.lang.Object obj31 = properties28.remove((java.lang.Object) (short) 100);
        boolean boolean33 = properties28.containsKey((java.lang.Object) 0L);
        java.util.Properties properties34 = new java.util.Properties();
        java.lang.String str35 = properties34.toString();
        java.util.Properties properties36 = new java.util.Properties(properties34);
        java.util.Properties properties37 = new java.util.Properties();
        java.lang.String str38 = properties37.toString();
        java.lang.Object obj40 = properties37.remove((java.lang.Object) (short) 100);
        java.lang.Object obj43 = properties37.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean45 = properties37.containsKey((java.lang.Object) 0L);
        java.lang.Object obj48 = properties37.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj51 = properties37.setProperty("", "{-1.0=100}");
        java.util.Enumeration<java.lang.Object> objEnumeration52 = properties37.keys();
        java.util.Properties properties53 = new java.util.Properties();
        java.lang.String str54 = properties53.toString();
        boolean boolean55 = properties53.isEmpty();
        java.lang.Object obj58 = properties53.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration59 = properties53.elements();
        java.lang.Object obj60 = properties36.replace((java.lang.Object) objEnumeration52, (java.lang.Object) properties53);
        java.util.Enumeration<java.lang.Object> objEnumeration61 = properties53.elements();
        java.util.Properties properties62 = new java.util.Properties();
        java.lang.String str63 = properties62.toString();
        boolean boolean64 = properties62.isEmpty();
        java.lang.Object obj67 = properties62.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Properties properties68 = new java.util.Properties();
        java.lang.String str69 = properties68.toString();
        java.lang.Object obj71 = properties68.remove((java.lang.Object) (short) 100);
        java.lang.Object obj74 = properties68.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean76 = properties68.containsKey((java.lang.Object) 0L);
        java.lang.Object obj79 = properties68.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties80 = new java.util.Properties(properties68);
        boolean boolean81 = properties62.containsValue((java.lang.Object) properties68);
        java.util.Properties properties82 = new java.util.Properties();
        java.lang.String str83 = properties82.toString();
        java.lang.Object obj85 = properties82.remove((java.lang.Object) (short) 100);
        java.lang.Object obj88 = properties82.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean90 = properties82.containsKey((java.lang.Object) 0L);
        java.lang.Object obj93 = properties82.replace((java.lang.Object) false, (java.lang.Object) ' ');
        boolean boolean94 = properties82.isEmpty();
        boolean boolean95 = properties28.replace((java.lang.Object) properties53, (java.lang.Object) properties62, (java.lang.Object) properties82);
        java.util.Properties properties96 = new java.util.Properties(properties28);
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties28);
        java.lang.String str98 = properties28.toString();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{}" + "'", str4, "{}");
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(objEnumeration18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{}" + "'", str20, "{}");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(objEnumeration25);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(objCollection27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "{}" + "'", str29, "{}");
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "{}" + "'", str35, "{}");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "{}" + "'", str38, "{}");
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNotNull(objEnumeration52);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "{}" + "'", str54, "{}");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertNotNull(objEnumeration59);
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertNotNull(objEnumeration61);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "{}" + "'", str63, "{}");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "{}" + "'", str69, "{}");
        org.junit.Assert.assertNull(obj71);
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(obj79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "{}" + "'", str83, "{}");
        org.junit.Assert.assertNull(obj85);
        org.junit.Assert.assertNull(obj88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNull(obj93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "{}" + "'", str98, "{}");
    }

    @Test
    public void test07655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07655");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery4 = atomikosProperties0.recovery;
        recovery4.setDelay((long) (short) 0);
        int int7 = recovery4.maxRetries;
        long long8 = recovery4.getDelay();
        int int9 = recovery4.maxRetries;
        recovery4.setDelay(86400000L);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNotNull(recovery4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 5 + "'", int7 == 5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5 + "'", int9 == 5);
    }

    @Test
    public void test07656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07656");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.lang.Object obj5 = properties0.setProperty("", "{={-1.0=100}, -1.0=100}");
        java.util.Set<java.lang.String> strSet6 = properties0.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties8 = atomikosProperties7.asProperties();
        atomikosProperties7.service = "{-1.0=100}";
        java.lang.String str11 = atomikosProperties7.getLogBaseName();
        java.lang.String str12 = atomikosProperties7.transactionManagerUniqueName;
        atomikosProperties7.consoleFileName = "";
        atomikosProperties7.forceShutdownOnVmExit = false;
        boolean boolean17 = atomikosProperties7.isAllowSubTransactions();
        atomikosProperties7.setService("hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties21 = atomikosProperties20.asProperties();
        atomikosProperties20.service = "{-1.0=100}";
        long long24 = atomikosProperties20.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel25 = null;
        atomikosProperties20.setConsoleLogLevel(atomikosLoggingLevel25);
        int int27 = atomikosProperties20.maxActives;
        atomikosProperties20.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery30 = atomikosProperties20.getRecovery();
        atomikosProperties20.forceShutdownOnVmExit = false;
        java.lang.String str33 = atomikosProperties20.service;
        atomikosProperties20.allowSubTransactions = false;
        atomikosProperties20.forceShutdownOnVmExit = false;
        atomikosProperties20.logBaseName = "";
        boolean boolean40 = properties0.remove((java.lang.Object) "hi!", (java.lang.Object) "");
        java.io.OutputStream outputStream41 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.storeToXML(outputStream41, "{{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}=hi!}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "tmlog" + "'", str11, "tmlog");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(properties21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 10000L + "'", long24 == 10000L);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 50 + "'", int27 == 50);
        org.junit.Assert.assertNotNull(recovery30);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "{-1.0=100}" + "'", str33, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test07657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07657");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileLimit = (byte) 10;
        long long7 = atomikosProperties0.getMaxTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel8 = null;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel8;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.getRecovery();
        boolean boolean11 = atomikosProperties0.isForceShutdownOnVmExit();
        java.lang.String str12 = atomikosProperties0.getConsoleFileName();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "tm.out" + "'", str12, "tm.out");
    }

    @Test
    public void test07658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07658");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        int int7 = atomikosProperties0.maxActives;
        atomikosProperties0.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.getRecovery();
        atomikosProperties0.consoleFileName = "{-1.0=100}";
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel13 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel13);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel15 = null;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel15;
        java.lang.String str17 = atomikosProperties0.getOutputDir();
        atomikosProperties0.setConsoleFileName("tmlog");
        java.lang.String str20 = atomikosProperties0.getLogBaseDir();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{}" + "'", str20, "{}");
    }

    @Test
    public void test07659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07659");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        java.util.Properties properties7 = new java.util.Properties();
        java.lang.String str8 = properties7.toString();
        java.lang.Object obj10 = properties7.remove((java.lang.Object) (short) 100);
        java.lang.Object obj13 = properties7.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj14 = properties7.clone();
        java.lang.String str16 = properties7.getProperty("{}");
        java.lang.Object obj19 = properties7.put((java.lang.Object) 86400000L, (java.lang.Object) "{-1.0=100}");
        boolean boolean20 = properties0.containsKey((java.lang.Object) properties7);
        java.util.Properties properties21 = new java.util.Properties(properties7);
        java.util.Properties properties22 = new java.util.Properties(properties7);
        java.io.Reader reader23 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties7.load(reader23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{}" + "'", str8, "{}");
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "{1.0=-1}");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test07660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07660");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setEnableLogging(true);
        atomikosProperties0.setConsoleFileName("tmlog");
        atomikosProperties0.setAllowSubTransactions(false);
        atomikosProperties0.consoleFileCount = (short) 100;
    }

    @Test
    public void test07661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07661");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setAllowSubTransactions(true);
        atomikosProperties0.maxActives = (short) -1;
        atomikosProperties0.setService("tm.out");
        java.lang.String str7 = atomikosProperties0.getService();
        atomikosProperties0.defaultJtaTimeout = 50;
        atomikosProperties0.threadedTwoPhaseCommit = false;
        boolean boolean12 = atomikosProperties0.isForceShutdownOnVmExit();
        java.util.Properties properties13 = atomikosProperties0.asProperties();
        atomikosProperties0.setThreadedTwoPhaseCommit(false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "tm.out" + "'", str7, "tm.out");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(properties13);
    }

    @Test
    public void test07662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07662");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        atomikosProperties0.setConsoleFileCount((int) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel8 = null;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel8;
        atomikosProperties0.logBaseName = "tmlog";
        boolean boolean12 = atomikosProperties0.serialJtaTransactions;
        atomikosProperties0.setForceShutdownOnVmExit(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test07663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07663");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        int int7 = atomikosProperties0.maxActives;
        atomikosProperties0.setConsoleFileName("tmlog");
        java.lang.String str10 = atomikosProperties0.logBaseName;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery11 = atomikosProperties0.getRecovery();
        atomikosProperties0.setConsoleFileCount(5);
        java.lang.String str14 = atomikosProperties0.logBaseDir;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "tmlog" + "'", str10, "tmlog");
        org.junit.Assert.assertNotNull(recovery11);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test07664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07664");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileName = "hi!";
        atomikosProperties0.setCheckpointInterval((long) 5);
        atomikosProperties0.setConsoleFileCount(0);
        boolean boolean11 = atomikosProperties0.isThreadedTwoPhaseCommit();
        atomikosProperties0.consoleFileLimit = 5;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties15 = atomikosProperties14.asProperties();
        atomikosProperties14.service = "{-1.0=100}";
        long long18 = atomikosProperties14.getDefaultJtaTimeout();
        atomikosProperties14.enableLogging = false;
        atomikosProperties14.setMaxTimeout((long) (byte) 0);
        atomikosProperties14.setAllowSubTransactions(true);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties26 = atomikosProperties25.asProperties();
        atomikosProperties25.service = "{-1.0=100}";
        java.lang.String str29 = atomikosProperties25.getTransactionManagerUniqueName();
        boolean boolean30 = atomikosProperties25.isSerialJtaTransactions();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel31 = atomikosProperties25.getConsoleLogLevel();
        atomikosProperties14.consoleLogLevel = atomikosLoggingLevel31;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel31;
        atomikosProperties0.threadedTwoPhaseCommit = true;
        java.lang.String str36 = atomikosProperties0.consoleFileName;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10000L + "'", long18 == 10000L);
        org.junit.Assert.assertNotNull(properties26);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel31 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel31.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
    }

    @Test
    public void test07665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07665");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj7 = properties0.clone();
        java.util.Set<java.lang.String> strSet8 = properties0.stringPropertyNames();
        java.util.Properties properties9 = new java.util.Properties();
        java.lang.String str10 = properties9.toString();
        java.lang.Object obj12 = properties9.remove((java.lang.Object) (short) 100);
        java.lang.Object obj15 = properties9.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean17 = properties9.containsKey((java.lang.Object) 0L);
        java.lang.Object obj20 = properties9.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.String str22 = properties21.toString();
        java.lang.Object obj24 = properties21.remove((java.lang.Object) (short) 100);
        java.lang.Object obj27 = properties21.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj28 = properties21.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration29 = properties21.elements();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties21);
        java.util.Properties properties31 = new java.util.Properties();
        java.lang.String str32 = properties31.toString();
        java.lang.Object obj34 = properties31.remove((java.lang.Object) (short) 100);
        java.lang.Object obj37 = properties31.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean39 = properties31.containsKey((java.lang.Object) 0L);
        java.lang.Object obj42 = properties31.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties43 = new java.util.Properties();
        java.lang.String str44 = properties43.toString();
        java.lang.Object obj46 = properties43.remove((java.lang.Object) (short) 100);
        java.lang.Object obj49 = properties43.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj50 = properties43.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration51 = properties43.elements();
        properties31.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties43);
        java.lang.Object obj53 = properties0.putIfAbsent((java.lang.Object) properties9, (java.lang.Object) properties43);
        java.util.Set<java.lang.String> strSet54 = properties0.stringPropertyNames();
        java.io.PrintStream printStream55 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.list(printStream55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{1.0=-1}");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "{}" + "'", str10, "{}");
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{}" + "'", str22, "{}");
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "{}" + "'", str32, "{}");
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "{}" + "'", str44, "{}");
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertEquals(obj50.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj50), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj50), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration51);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertNotNull(strSet54);
    }

    @Test
    public void test07666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07666");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj3 = properties0.setProperty("{}", "{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery4 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery4.retryInterval = (short) 100;
        recovery4.setForgetOrphanedLogEntriesDelay((long) 5);
        recovery4.setForgetOrphanedLogEntriesDelay((long) (short) 0);
        java.util.Properties properties11 = new java.util.Properties();
        java.lang.String str12 = properties11.toString();
        java.lang.Object obj14 = properties11.remove((java.lang.Object) (short) 100);
        java.util.Properties properties15 = new java.util.Properties();
        java.lang.String str16 = properties15.toString();
        boolean boolean17 = properties15.isEmpty();
        java.lang.Object obj20 = properties15.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration21 = properties15.elements();
        boolean boolean22 = properties11.containsKey((java.lang.Object) properties15);
        java.lang.Object obj23 = properties0.putIfAbsent((java.lang.Object) (short) 0, (java.lang.Object) properties15);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties25 = atomikosProperties24.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties27 = atomikosProperties26.asProperties();
        atomikosProperties26.service = "{-1.0=100}";
        long long30 = atomikosProperties26.getDefaultJtaTimeout();
        atomikosProperties26.consoleFileLimit = '#';
        java.lang.Object obj33 = properties25.get((java.lang.Object) atomikosProperties26);
        boolean boolean34 = atomikosProperties26.forceShutdownOnVmExit;
        atomikosProperties26.setOutputDir("");
        boolean boolean37 = atomikosProperties26.forceShutdownOnVmExit;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel38 = atomikosProperties26.consoleLogLevel;
        java.util.Properties properties39 = new java.util.Properties();
        java.lang.String str40 = properties39.toString();
        java.util.Properties properties41 = new java.util.Properties(properties39);
        java.util.Properties properties42 = new java.util.Properties();
        java.lang.String str43 = properties42.toString();
        java.lang.Object obj45 = properties42.remove((java.lang.Object) (short) 100);
        java.lang.Object obj48 = properties42.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean50 = properties42.containsKey((java.lang.Object) 0L);
        java.lang.Object obj53 = properties42.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj56 = properties42.setProperty("", "{-1.0=100}");
        java.util.Enumeration<java.lang.Object> objEnumeration57 = properties42.keys();
        java.util.Properties properties58 = new java.util.Properties();
        java.lang.String str59 = properties58.toString();
        boolean boolean60 = properties58.isEmpty();
        java.lang.Object obj63 = properties58.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration64 = properties58.elements();
        java.lang.Object obj65 = properties41.replace((java.lang.Object) objEnumeration57, (java.lang.Object) properties58);
        java.util.Enumeration<java.lang.Object> objEnumeration66 = properties41.keys();
        java.lang.Object obj67 = properties0.put((java.lang.Object) atomikosLoggingLevel38, (java.lang.Object) properties41);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties68 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean69 = atomikosProperties68.isSerialJtaTransactions();
        atomikosProperties68.logBaseName = "{-1.0=100}";
        int int72 = atomikosProperties68.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery73 = atomikosProperties68.getRecovery();
        atomikosProperties68.setConsoleFileCount((int) (byte) 100);
        atomikosProperties68.setAllowSubTransactions(true);
        atomikosProperties68.setService("tm.out");
        int int80 = atomikosProperties68.consoleFileLimit;
        atomikosProperties68.setDefaultJtaTimeout((long) ' ');
        atomikosProperties68.logBaseName = "{{-1.0=100}=}";
        boolean boolean85 = properties0.contains((java.lang.Object) atomikosProperties68);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "{}" + "'", str12, "{}");
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{}" + "'", str16, "{}");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNotNull(objEnumeration21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertNotNull(properties27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 10000L + "'", long30 == 10000L);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel38 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel38.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "{}" + "'", str40, "{}");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "{}" + "'", str43, "{}");
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertNotNull(objEnumeration57);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "{}" + "'", str59, "{}");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertNotNull(objEnumeration64);
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertNotNull(objEnumeration66);
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 50 + "'", int72 == 50);
        org.junit.Assert.assertNotNull(recovery73);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test07667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07667");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.remove((java.lang.Object) (-1.0d));
        boolean boolean3 = properties0.isEmpty();
        java.util.Collection<java.lang.Object> objCollection4 = properties0.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties6 = atomikosProperties5.asProperties();
        atomikosProperties5.service = "{-1.0=100}";
        long long9 = atomikosProperties5.getDefaultJtaTimeout();
        atomikosProperties5.serialJtaTransactions = true;
        long long12 = atomikosProperties5.getDefaultJtaTimeout();
        long long13 = atomikosProperties5.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery14 = atomikosProperties5.getRecovery();
        long long15 = recovery14.delay;
        int int16 = recovery14.maxRetries;
        java.lang.Object obj17 = properties0.get((java.lang.Object) int16);
        java.util.Set<java.lang.Object> objSet18 = properties0.keySet();
        java.util.Enumeration<java.lang.Object> objEnumeration19 = properties0.keys();
        java.lang.Object obj20 = properties0.clone();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(objCollection4);
        org.junit.Assert.assertNotNull(properties6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10000L + "'", long9 == 10000L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10000L + "'", long12 == 10000L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 500L + "'", long13 == 500L);
        org.junit.Assert.assertNotNull(recovery14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10000L + "'", long15 == 10000L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(objSet18);
        org.junit.Assert.assertNotNull(objEnumeration19);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{}");
    }

    @Test
    public void test07668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07668");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        java.util.Properties properties2 = new java.util.Properties();
        java.lang.Object obj4 = properties2.remove((java.lang.Object) (-1.0d));
        boolean boolean5 = properties2.isEmpty();
        int int6 = properties2.size();
        java.lang.String str8 = properties2.getProperty("{}");
        java.lang.Object obj9 = properties1.remove((java.lang.Object) properties2);
        java.util.Properties properties10 = new java.util.Properties();
        java.util.Properties properties11 = new java.util.Properties();
        java.lang.String str12 = properties11.toString();
        boolean boolean13 = properties11.isEmpty();
        java.util.Properties properties14 = new java.util.Properties();
        java.lang.String str15 = properties14.toString();
        java.lang.Object obj17 = properties14.remove((java.lang.Object) (short) 100);
        java.lang.Object obj20 = properties14.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean22 = properties14.containsKey((java.lang.Object) 0L);
        boolean boolean23 = properties11.containsValue((java.lang.Object) 0L);
        boolean boolean26 = properties10.replace((java.lang.Object) 0L, (java.lang.Object) 0.0f, (java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties10.elements();
        java.lang.String str28 = properties10.toString();
        java.util.Enumeration<java.lang.Object> objEnumeration29 = properties10.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties31 = atomikosProperties30.asProperties();
        boolean boolean32 = properties1.remove((java.lang.Object) properties10, (java.lang.Object) properties31);
        java.util.Properties properties33 = new java.util.Properties();
        java.lang.Object obj35 = properties33.remove((java.lang.Object) (-1.0d));
        boolean boolean37 = properties33.contains((java.lang.Object) "{-1.0=100}");
        java.util.Enumeration<java.lang.Object> objEnumeration38 = properties33.keys();
        java.util.Properties properties39 = new java.util.Properties(properties33);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties41 = atomikosProperties40.asProperties();
        atomikosProperties40.service = "{-1.0=100}";
        java.lang.String str44 = atomikosProperties40.getTransactionManagerUniqueName();
        atomikosProperties40.consoleFileName = "hi!";
        atomikosProperties40.serialJtaTransactions = true;
        atomikosProperties40.outputDir = "tm.out";
        boolean boolean51 = atomikosProperties40.isAllowSubTransactions();
        atomikosProperties40.consoleFileName = "";
        java.lang.Object obj54 = properties31.replace((java.lang.Object) properties39, (java.lang.Object) "");
        java.util.Properties properties55 = new java.util.Properties();
        java.lang.String str56 = properties55.toString();
        java.lang.Object obj58 = properties55.remove((java.lang.Object) (short) 100);
        java.lang.Object obj61 = properties55.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean63 = properties55.containsKey((java.lang.Object) 0L);
        java.lang.Object obj66 = properties55.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj69 = properties55.setProperty("", "{-1.0=100}");
        java.lang.Object obj70 = properties55.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery71 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery71.retryInterval = (short) 100;
        recovery71.forgetOrphanedLogEntriesDelay = 'a';
        boolean boolean76 = properties55.equals((java.lang.Object) 'a');
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery77 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long78 = recovery77.getRetryInterval();
        long long79 = recovery77.getDelay();
        long long80 = recovery77.getDelay();
        recovery77.retryInterval = 100L;
        boolean boolean83 = properties55.contains((java.lang.Object) recovery77);
        boolean boolean84 = properties39.equals((java.lang.Object) properties55);
        java.util.Set<java.lang.String> strSet85 = properties39.stringPropertyNames();
        java.io.OutputStream outputStream86 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties39.store(outputStream86, "{={-1.0=100}, -1.0=100}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "{}" + "'", str12, "{}");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{}" + "'", str15, "{}");
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "{}" + "'", str28, "{}");
        org.junit.Assert.assertNotNull(objEnumeration29);
        org.junit.Assert.assertNotNull(properties31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(objEnumeration38);
        org.junit.Assert.assertNotNull(properties41);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "{}" + "'", str56, "{}");
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertNull(obj61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertNull(obj69);
        org.junit.Assert.assertNotNull(obj70);
// flaky:         org.junit.Assert.assertEquals(obj70.toString(), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj70), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj70), "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 10000L + "'", long78 == 10000L);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 10000L + "'", long79 == 10000L);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 10000L + "'", long80 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(strSet85);
    }

    @Test
    public void test07669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07669");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        java.lang.String str6 = atomikosProperties0.getOutputDir();
        atomikosProperties0.setLogBaseDir("{-1.0=100}");
        atomikosProperties0.enableLogging = false;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test07670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07670");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.retryInterval = (short) 100;
        recovery0.delay = (-1L);
        long long5 = recovery0.delay;
        recovery0.delay = (short) 1;
        long long8 = recovery0.getRetryInterval();
        int int9 = recovery0.maxRetries;
        int int10 = recovery0.maxRetries;
        recovery0.setMaxRetries(0);
        long long13 = recovery0.getForgetOrphanedLogEntriesDelay();
        recovery0.setDelay(0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5 + "'", int9 == 5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5 + "'", int10 == 5);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 86400000L + "'", long13 == 86400000L);
    }

    @Test
    public void test07671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07671");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        boolean boolean7 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.defaultJtaTimeout = (byte) 10;
        java.lang.String str10 = atomikosProperties0.transactionManagerUniqueName;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery11 = atomikosProperties0.getRecovery();
        java.lang.String str12 = atomikosProperties0.outputDir;
        atomikosProperties0.enableLogging = false;
        int int15 = atomikosProperties0.getConsoleFileLimit();
        atomikosProperties0.enableLogging = true;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(recovery11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
    }

    @Test
    public void test07672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07672");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setEnableLogging(true);
        atomikosProperties0.consoleFileCount = 0;
        int int5 = atomikosProperties0.getMaxActives();
        java.lang.String str6 = atomikosProperties0.getLogBaseDir();
        java.lang.String str7 = atomikosProperties0.service;
        atomikosProperties0.setConsoleFileCount((int) (byte) 1);
        atomikosProperties0.setMaxActives((-1));
        atomikosProperties0.setMaxTimeout((long) (byte) 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 50 + "'", int5 == 50);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test07673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07673");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.remove((java.lang.Object) (-1.0d));
        boolean boolean3 = properties0.isEmpty();
        java.util.Collection<java.lang.Object> objCollection4 = properties0.values();
        java.util.Properties properties5 = new java.util.Properties(properties0);
        java.util.Properties properties6 = new java.util.Properties();
        java.lang.String str7 = properties6.toString();
        java.lang.Object obj9 = properties6.remove((java.lang.Object) (short) 100);
        java.lang.Object obj12 = properties6.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean14 = properties6.containsKey((java.lang.Object) 0L);
        java.lang.Object obj17 = properties6.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj20 = properties6.setProperty("", "{-1.0=100}");
        java.lang.Object obj21 = properties6.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery22 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery22.retryInterval = (short) 100;
        recovery22.forgetOrphanedLogEntriesDelay = 'a';
        boolean boolean27 = properties6.equals((java.lang.Object) 'a');
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery28 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long29 = recovery28.getRetryInterval();
        long long30 = recovery28.getDelay();
        long long31 = recovery28.getDelay();
        recovery28.retryInterval = 100L;
        boolean boolean34 = properties6.contains((java.lang.Object) recovery28);
        recovery28.setMaxRetries((int) (byte) 10);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties38 = atomikosProperties37.asProperties();
        atomikosProperties37.service = "{-1.0=100}";
        long long41 = atomikosProperties37.getDefaultJtaTimeout();
        atomikosProperties37.serialJtaTransactions = true;
        atomikosProperties37.maxActives = ' ';
        atomikosProperties37.maxActives = (byte) 10;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery48 = atomikosProperties37.recovery;
        java.lang.Object obj49 = properties0.replace((java.lang.Object) recovery28, (java.lang.Object) atomikosProperties37);
        java.util.Collection<java.lang.Object> objCollection50 = properties0.values();
        java.io.InputStream inputStream51 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.load(inputStream51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(objCollection4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "{}" + "'", str7, "{}");
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNotNull(obj21);
// flaky:         org.junit.Assert.assertEquals(obj21.toString(), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 10000L + "'", long29 == 10000L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 10000L + "'", long30 == 10000L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 10000L + "'", long31 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(properties38);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 10000L + "'", long41 == 10000L);
        org.junit.Assert.assertNotNull(recovery48);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertNotNull(objCollection50);
    }

    @Test
    public void test07674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07674");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.remove((java.lang.Object) (-1.0d));
        boolean boolean3 = properties0.isEmpty();
        int int4 = properties0.size();
        java.lang.String str6 = properties0.getProperty("{}");
        java.util.Set<java.lang.Object> objSet7 = properties0.keySet();
        boolean boolean9 = properties0.containsKey((java.lang.Object) (short) 1);
        int int10 = properties0.size();
        java.util.Properties properties11 = new java.util.Properties();
        java.lang.String str12 = properties11.toString();
        java.lang.Object obj14 = properties11.remove((java.lang.Object) (short) 100);
        java.lang.Object obj17 = properties11.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        java.util.Properties properties19 = new java.util.Properties();
        java.lang.String str20 = properties19.toString();
        java.lang.Object obj22 = properties19.remove((java.lang.Object) (short) 100);
        java.lang.Object obj25 = properties19.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj26 = properties19.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties19.elements();
        java.lang.Object obj28 = properties11.putIfAbsent((java.lang.Object) 10.0f, (java.lang.Object) objEnumeration27);
        java.util.Properties properties29 = new java.util.Properties();
        java.util.Enumeration<?> wildcardEnumeration30 = properties29.propertyNames();
        java.lang.Object obj31 = properties29.clone();
        java.util.Properties properties32 = new java.util.Properties();
        java.lang.String str33 = properties32.toString();
        boolean boolean34 = properties32.isEmpty();
        java.lang.Object obj37 = properties32.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration38 = properties32.elements();
        java.lang.Object obj39 = properties11.put(obj31, (java.lang.Object) objEnumeration38);
        properties11.clear();
        java.util.Properties properties41 = new java.util.Properties();
        java.lang.Object obj43 = properties41.remove((java.lang.Object) (-1.0d));
        boolean boolean44 = properties41.isEmpty();
        int int45 = properties41.size();
        java.lang.String str47 = properties41.getProperty("{}");
        java.util.Properties properties48 = new java.util.Properties();
        java.lang.String str49 = properties48.toString();
        java.lang.Object obj51 = properties48.remove((java.lang.Object) (short) 100);
        java.lang.Object obj54 = properties48.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean56 = properties48.containsKey((java.lang.Object) 0L);
        java.lang.Object obj59 = properties48.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties60 = new java.util.Properties(properties48);
        java.util.Enumeration<java.lang.Object> objEnumeration61 = properties48.keys();
        java.lang.Object obj62 = properties11.replace((java.lang.Object) properties41, (java.lang.Object) properties48);
        java.util.Properties properties63 = new java.util.Properties();
        java.util.Properties properties64 = new java.util.Properties();
        java.lang.String str65 = properties64.toString();
        java.lang.Object obj67 = properties64.remove((java.lang.Object) (short) 100);
        java.lang.Object obj70 = properties64.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        int int71 = properties64.size();
        java.util.Properties properties72 = new java.util.Properties();
        java.lang.Object obj74 = properties72.remove((java.lang.Object) (-1.0d));
        boolean boolean75 = properties72.isEmpty();
        java.lang.Object obj78 = properties72.setProperty("hi!", "{}");
        boolean boolean79 = properties63.remove((java.lang.Object) int71, (java.lang.Object) properties72);
        java.lang.Object obj80 = properties11.get((java.lang.Object) boolean79);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        java.lang.String str82 = properties11.toString();
        java.io.OutputStream outputStream83 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties11.storeToXML(outputStream83, "{1.0=-1, ={1.0=-1}, -1.0=100}", "tmlog");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(objSet7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "{}" + "'", str12, "{}");
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{}" + "'", str20, "{}");
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNotNull(wildcardEnumeration30);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertEquals(obj31.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "{}");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "{}" + "'", str33, "{}");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNotNull(objEnumeration38);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "{}" + "'", str49, "{}");
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertNotNull(objEnumeration61);
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "{}" + "'", str65, "{}");
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertNull(obj70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNull(obj78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(obj80);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "{}" + "'", str82, "{}");
    }

    @Test
    public void test07675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07675");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.remove((java.lang.Object) (-1.0d));
        boolean boolean3 = properties0.isEmpty();
        java.util.Collection<java.lang.Object> objCollection4 = properties0.values();
        java.util.Properties properties5 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration6 = properties0.keys();
        java.io.PrintWriter printWriter7 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.list(printWriter7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(objCollection4);
        org.junit.Assert.assertNotNull(objEnumeration6);
    }

    @Test
    public void test07676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07676");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel7 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel7);
        boolean boolean9 = atomikosProperties0.enableLogging;
        atomikosProperties0.setEnableLogging(true);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test07677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07677");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        long long5 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.threadedTwoPhaseCommit = true;
        atomikosProperties0.setSerialJtaTransactions(true);
        atomikosProperties0.setDefaultJtaTimeout((-1L));
        atomikosProperties0.allowSubTransactions = false;
        boolean boolean14 = atomikosProperties0.isForceShutdownOnVmExit();
        int int15 = atomikosProperties0.getConsoleFileCount();
        atomikosProperties0.setConsoleFileName("{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}");
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
    }

    @Test
    public void test07678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07678");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.retryInterval = (short) 100;
        recovery0.forgetOrphanedLogEntriesDelay = 'a';
        long long5 = recovery0.getDelay();
        long long6 = recovery0.getRetryInterval();
        recovery0.setRetryInterval((long) 'a');
        recovery0.setForgetOrphanedLogEntriesDelay(10000L);
        recovery0.delay = 50L;
        long long13 = recovery0.getDelay();
        long long14 = recovery0.getForgetOrphanedLogEntriesDelay();
        long long15 = recovery0.delay;
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 10000L + "'", long5 == 10000L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 100L + "'", long6 == 100L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 50L + "'", long13 == 50L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10000L + "'", long14 == 10000L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 50L + "'", long15 == 50L);
    }

    @Test
    public void test07679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07679");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        boolean boolean2 = properties0.isEmpty();
        java.util.Properties properties3 = new java.util.Properties();
        java.lang.String str4 = properties3.toString();
        java.lang.Object obj6 = properties3.remove((java.lang.Object) (short) 100);
        java.lang.Object obj9 = properties3.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean11 = properties3.containsKey((java.lang.Object) 0L);
        boolean boolean12 = properties0.containsValue((java.lang.Object) 0L);
        java.util.Set<java.lang.String> strSet13 = properties0.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties15 = atomikosProperties14.asProperties();
        atomikosProperties14.service = "{-1.0=100}";
        long long18 = atomikosProperties14.getDefaultJtaTimeout();
        atomikosProperties14.setThreadedTwoPhaseCommit(true);
        boolean boolean21 = atomikosProperties14.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery22 = atomikosProperties14.recovery;
        java.util.Properties properties23 = new java.util.Properties();
        java.lang.String str24 = properties23.toString();
        boolean boolean25 = properties23.isEmpty();
        java.lang.Object obj28 = properties23.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        boolean boolean29 = properties0.remove((java.lang.Object) atomikosProperties14, (java.lang.Object) (short) 100);
        java.lang.String str30 = atomikosProperties14.logBaseName;
        int int31 = atomikosProperties14.consoleFileLimit;
        java.lang.String str32 = atomikosProperties14.getService();
        atomikosProperties14.setMaxTimeout((long) 0);
        atomikosProperties14.forceShutdownOnVmExit = true;
        boolean boolean37 = atomikosProperties14.enableLogging;
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{}" + "'", str4, "{}");
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10000L + "'", long18 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(recovery22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "{}" + "'", str24, "{}");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "tmlog" + "'", str30, "tmlog");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "{-1.0=100}" + "'", str32, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test07680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07680");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        long long7 = atomikosProperties0.maxTimeout;
        atomikosProperties0.setLogBaseDir("{-1.0=100}");
        int int10 = atomikosProperties0.getConsoleFileCount();
        atomikosProperties0.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties14 = atomikosProperties13.asProperties();
        atomikosProperties13.service = "{-1.0=100}";
        long long17 = atomikosProperties13.getDefaultJtaTimeout();
        atomikosProperties13.setTransactionManagerUniqueName("{}");
        atomikosProperties13.consoleFileName = "hi!";
        int int22 = atomikosProperties13.getConsoleFileCount();
        boolean boolean23 = atomikosProperties13.isThreadedTwoPhaseCommit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel24 = atomikosProperties13.consoleLogLevel;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel24;
        atomikosProperties0.setMaxTimeout(500L);
        atomikosProperties0.consoleFileLimit = 18;
        atomikosProperties0.setTransactionManagerUniqueName("hi!");
        atomikosProperties0.logBaseName = "tm.out";
        atomikosProperties0.serialJtaTransactions = true;
        atomikosProperties0.setDefaultJtaTimeout(5L);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10000L + "'", long17 == 10000L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel24 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel24.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
    }

    @Test
    public void test07681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07681");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        atomikosProperties0.setTransactionManagerUniqueName("{-1.0=100}");
        atomikosProperties0.consoleFileCount = 0;
        atomikosProperties0.logBaseName = "";
        atomikosProperties0.setLogBaseName("{={-1.0=100}, -1.0=100}");
        atomikosProperties0.setLogBaseDir("{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
    }

    @Test
    public void test07682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07682");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setEnableLogging(true);
        atomikosProperties0.consoleFileCount = 0;
        atomikosProperties0.setSerialJtaTransactions(false);
        boolean boolean7 = atomikosProperties0.isThreadedTwoPhaseCommit();
        atomikosProperties0.setDefaultJtaTimeout((long) (byte) 100);
        atomikosProperties0.setDefaultJtaTimeout((long) (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test07683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07683");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        boolean boolean7 = atomikosProperties0.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery8 = atomikosProperties0.recovery;
        atomikosProperties0.transactionManagerUniqueName = "{1.0=-1, ={1.0=-1}, -1.0=100}";
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(recovery8);
    }

    @Test
    public void test07684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07684");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        long long5 = atomikosProperties0.getMaxTimeout();
        int int6 = atomikosProperties0.consoleFileCount;
        long long7 = atomikosProperties0.getCheckpointInterval();
        java.lang.String str8 = atomikosProperties0.outputDir;
        atomikosProperties0.setEnableLogging(false);
        boolean boolean11 = atomikosProperties0.forceShutdownOnVmExit;
        int int12 = atomikosProperties0.getMaxActives();
        long long13 = atomikosProperties0.getDefaultJtaTimeout();
        long long14 = atomikosProperties0.maxTimeout;
        atomikosProperties0.threadedTwoPhaseCommit = false;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 50 + "'", int12 == 50);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10000L + "'", long13 == 10000L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 300000L + "'", long14 == 300000L);
    }

    @Test
    public void test07685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07685");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.retryInterval = (short) 100;
        recovery0.delay = (-1L);
        long long5 = recovery0.delay;
        recovery0.delay = (short) 1;
        long long8 = recovery0.getRetryInterval();
        long long9 = recovery0.getForgetOrphanedLogEntriesDelay();
        recovery0.setMaxRetries(10);
        int int12 = recovery0.maxRetries;
        recovery0.setForgetOrphanedLogEntriesDelay((long) 32);
        long long15 = recovery0.delay;
        recovery0.setForgetOrphanedLogEntriesDelay((long) (byte) 10);
        int int18 = recovery0.maxRetries;
        long long19 = recovery0.getRetryInterval();
        recovery0.maxRetries = 2;
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 86400000L + "'", long9 == 86400000L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 100L + "'", long19 == 100L);
    }

    @Test
    public void test07686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07686");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        boolean boolean5 = atomikosProperties0.enableLogging;
        boolean boolean6 = atomikosProperties0.isForceShutdownOnVmExit();
        boolean boolean7 = atomikosProperties0.allowSubTransactions;
        long long8 = atomikosProperties0.defaultJtaTimeout;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery9 = atomikosProperties0.recovery;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 10000L + "'", long8 == 10000L);
        org.junit.Assert.assertNotNull(recovery9);
    }

    @Test
    public void test07687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07687");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties12 = new java.util.Properties();
        java.lang.String str13 = properties12.toString();
        java.lang.Object obj15 = properties12.remove((java.lang.Object) (short) 100);
        java.lang.Object obj18 = properties12.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj19 = properties12.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration20 = properties12.elements();
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties12);
        boolean boolean23 = properties0.equals((java.lang.Object) 1.0f);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties25 = atomikosProperties24.asProperties();
        atomikosProperties24.service = "{-1.0=100}";
        long long28 = atomikosProperties24.getDefaultJtaTimeout();
        long long29 = atomikosProperties24.getMaxTimeout();
        int int30 = atomikosProperties24.consoleFileCount;
        int int31 = atomikosProperties24.getMaxActives();
        boolean boolean32 = atomikosProperties24.forceShutdownOnVmExit;
        java.lang.String str33 = atomikosProperties24.getTransactionManagerUniqueName();
        boolean boolean34 = properties0.containsValue((java.lang.Object) atomikosProperties24);
        java.util.Collection<java.lang.Object> objCollection35 = properties0.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties37 = atomikosProperties36.asProperties();
        atomikosProperties36.service = "{-1.0=100}";
        long long40 = atomikosProperties36.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel41 = null;
        atomikosProperties36.setConsoleLogLevel(atomikosLoggingLevel41);
        int int43 = atomikosProperties36.maxActives;
        atomikosProperties36.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery46 = atomikosProperties36.getRecovery();
        atomikosProperties36.outputDir = "hi!";
        java.lang.String str49 = atomikosProperties36.getLogBaseName();
        atomikosProperties36.setService("{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}");
        boolean boolean52 = properties0.equals((java.lang.Object) atomikosProperties36);
        atomikosProperties36.setSerialJtaTransactions(true);
        long long55 = atomikosProperties36.maxTimeout;
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{}" + "'", str13, "{}");
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 10000L + "'", long28 == 10000L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 300000L + "'", long29 == 300000L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 50 + "'", int31 == 50);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(objCollection35);
        org.junit.Assert.assertNotNull(properties37);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 10000L + "'", long40 == 10000L);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 50 + "'", int43 == 50);
        org.junit.Assert.assertNotNull(recovery46);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "tmlog" + "'", str49, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 300000L + "'", long55 == 300000L);
    }

    @Test
    public void test07688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07688");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setEnableLogging(true);
        atomikosProperties0.consoleFileCount = 0;
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        properties5.clear();
        java.util.Properties properties7 = new java.util.Properties();
        java.lang.String str8 = properties7.toString();
        java.util.Properties properties9 = new java.util.Properties(properties7);
        java.util.Properties properties10 = new java.util.Properties();
        java.lang.String str11 = properties10.toString();
        java.lang.Object obj13 = properties10.remove((java.lang.Object) (short) 100);
        java.lang.Object obj16 = properties10.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean18 = properties10.containsKey((java.lang.Object) 0L);
        java.lang.Object obj21 = properties10.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj24 = properties10.setProperty("", "{-1.0=100}");
        java.util.Enumeration<java.lang.Object> objEnumeration25 = properties10.keys();
        java.util.Properties properties26 = new java.util.Properties();
        java.lang.String str27 = properties26.toString();
        boolean boolean28 = properties26.isEmpty();
        java.lang.Object obj31 = properties26.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration32 = properties26.elements();
        java.lang.Object obj33 = properties9.replace((java.lang.Object) objEnumeration25, (java.lang.Object) properties26);
        java.util.Enumeration<java.lang.Object> objEnumeration34 = properties26.elements();
        java.util.Properties properties35 = new java.util.Properties(properties26);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties37 = atomikosProperties36.asProperties();
        atomikosProperties36.service = "{-1.0=100}";
        long long40 = atomikosProperties36.getDefaultJtaTimeout();
        atomikosProperties36.serialJtaTransactions = true;
        long long43 = atomikosProperties36.maxTimeout;
        atomikosProperties36.setLogBaseDir("{-1.0=100}");
        int int46 = atomikosProperties36.getConsoleFileCount();
        atomikosProperties36.maxTimeout = (short) 100;
        java.lang.String str49 = atomikosProperties36.consoleFileName;
        java.lang.Object obj50 = properties5.getOrDefault((java.lang.Object) properties35, (java.lang.Object) str49);
        int int51 = properties5.size();
        java.io.Reader reader52 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties5.load(reader52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{}" + "'", str8, "{}");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "{}" + "'", str11, "{}");
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(objEnumeration25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "{}" + "'", str27, "{}");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNotNull(objEnumeration32);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNotNull(objEnumeration34);
        org.junit.Assert.assertNotNull(properties37);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 10000L + "'", long40 == 10000L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 300000L + "'", long43 == 300000L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "tm.out" + "'", str49, "tm.out");
        org.junit.Assert.assertEquals("'" + obj50 + "' != '" + "tm.out" + "'", obj50, "tm.out");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
    }

    @Test
    public void test07689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07689");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getLogBaseName();
        long long5 = atomikosProperties0.defaultJtaTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel6 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel6);
        atomikosProperties0.threadedTwoPhaseCommit = false;
        atomikosProperties0.allowSubTransactions = false;
        java.lang.String str12 = atomikosProperties0.getConsoleFileName();
        java.util.Properties properties13 = atomikosProperties0.asProperties();
        java.util.Set<java.lang.String> strSet14 = properties13.stringPropertyNames();
        boolean boolean15 = properties13.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean17 = atomikosProperties16.isSerialJtaTransactions();
        atomikosProperties16.logBaseName = "{-1.0=100}";
        int int20 = atomikosProperties16.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery21 = atomikosProperties16.getRecovery();
        java.lang.String str22 = atomikosProperties16.getOutputDir();
        int int23 = atomikosProperties16.getMaxActives();
        boolean boolean24 = atomikosProperties16.allowSubTransactions;
        int int25 = atomikosProperties16.consoleFileLimit;
        atomikosProperties16.setMaxActives((int) (byte) 0);
        boolean boolean28 = properties13.containsKey((java.lang.Object) atomikosProperties16);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery29 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long30 = recovery29.getRetryInterval();
        long long31 = recovery29.retryInterval;
        long long32 = recovery29.forgetOrphanedLogEntriesDelay;
        long long33 = recovery29.delay;
        long long34 = recovery29.forgetOrphanedLogEntriesDelay;
        boolean boolean35 = properties13.contains((java.lang.Object) long34);
        java.util.Enumeration<java.lang.Object> objEnumeration36 = properties13.elements();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tmlog" + "'", str4, "tmlog");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 10000L + "'", long5 == 10000L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "tm.out" + "'", str12, "tm.out");
        org.junit.Assert.assertNotNull(properties13);
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 50 + "'", int20 == 50);
        org.junit.Assert.assertNotNull(recovery21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 50 + "'", int23 == 50);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 10000L + "'", long30 == 10000L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 10000L + "'", long31 == 10000L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 86400000L + "'", long32 == 86400000L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 10000L + "'", long33 == 10000L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 86400000L + "'", long34 == 86400000L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objEnumeration36);
    }

    @Test
    public void test07690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07690");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getLogBaseName();
        long long5 = atomikosProperties0.defaultJtaTimeout;
        long long6 = atomikosProperties0.getMaxTimeout();
        boolean boolean7 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.setService("{-1.0=100}");
        atomikosProperties0.setOutputDir("{}");
        atomikosProperties0.setSerialJtaTransactions(true);
        boolean boolean14 = atomikosProperties0.enableLogging;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tmlog" + "'", str4, "tmlog");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 10000L + "'", long5 == 10000L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 300000L + "'", long6 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test07691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07691");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        atomikosProperties0.setConsoleFileCount((int) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel8 = null;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel8;
        java.lang.String str10 = atomikosProperties0.logBaseDir;
        java.lang.String str11 = atomikosProperties0.consoleFileName;
        int int12 = atomikosProperties0.getConsoleFileCount();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties13.setAllowSubTransactions(true);
        boolean boolean16 = atomikosProperties13.enableLogging;
        boolean boolean17 = atomikosProperties13.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel18 = atomikosProperties13.consoleLogLevel;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel18);
        java.lang.String str20 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setMaxActives((int) (short) 10);
        atomikosProperties0.setTransactionManagerUniqueName("{com.atomikos.icatch.={}, 100=100}");
        java.lang.String str25 = atomikosProperties0.getTransactionManagerUniqueName();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "tm.out" + "'", str11, "tm.out");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel18 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel18.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "{com.atomikos.icatch.={}, 100=100}" + "'", str25, "{com.atomikos.icatch.={}, 100=100}");
    }

    @Test
    public void test07692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07692");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.remove((java.lang.Object) (-1.0d));
        boolean boolean3 = properties0.isEmpty();
        int int4 = properties0.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties6 = atomikosProperties5.asProperties();
        atomikosProperties5.service = "{-1.0=100}";
        long long9 = atomikosProperties5.getDefaultJtaTimeout();
        atomikosProperties5.enableLogging = false;
        atomikosProperties5.setMaxActives((int) ' ');
        java.util.Properties properties14 = atomikosProperties5.asProperties();
        java.util.Enumeration<java.lang.Object> objEnumeration15 = properties14.elements();
        java.lang.Object obj16 = properties14.clone();
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties14);
        java.util.Enumeration<java.lang.Object> objEnumeration18 = properties0.elements();
        java.lang.String str19 = properties0.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean21 = atomikosProperties20.isSerialJtaTransactions();
        atomikosProperties20.logBaseName = "{-1.0=100}";
        int int24 = atomikosProperties20.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery25 = atomikosProperties20.getRecovery();
        atomikosProperties20.setConsoleFileCount((int) (byte) 100);
        atomikosProperties20.maxTimeout = 50;
        java.lang.String str30 = atomikosProperties20.getConsoleFileName();
        atomikosProperties20.setDefaultJtaTimeout((long) 'a');
        int int33 = atomikosProperties20.maxActives;
        boolean boolean34 = atomikosProperties20.isEnableLogging();
        boolean boolean35 = properties0.containsKey((java.lang.Object) atomikosProperties20);
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(properties6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10000L + "'", long9 == 10000L);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertNotNull(objEnumeration15);
        org.junit.Assert.assertNotNull(obj16);
// flaky:         org.junit.Assert.assertEquals(obj16.toString(), "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=32, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={-1.0=100}, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=32, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={-1.0=100}, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=32, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={-1.0=100}, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        org.junit.Assert.assertNotNull(objEnumeration18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=32, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={-1.0=100}, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}" + "'", str19, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=32, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={-1.0=100}, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 50 + "'", int24 == 50);
        org.junit.Assert.assertNotNull(recovery25);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "tm.out" + "'", str30, "tm.out");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 50 + "'", int33 == 50);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test07693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07693");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties0.setMaxActives(100);
        boolean boolean9 = atomikosProperties0.enableLogging;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.recovery;
        atomikosProperties0.setConsoleFileLimit(100);
        boolean boolean13 = atomikosProperties0.enableLogging;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery14 = atomikosProperties0.getRecovery();
        recovery14.delay = 0L;
        recovery14.retryInterval = 52L;
        long long19 = recovery14.delay;
        recovery14.retryInterval = 86400000L;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(recovery14);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
    }

    @Test
    public void test07694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07694");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileLimit = (byte) 10;
        long long7 = atomikosProperties0.getMaxTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel8 = null;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel8;
        atomikosProperties0.setCheckpointInterval((long) (short) -1);
        atomikosProperties0.setOutputDir("{1.0=-1, 10000=0}");
        boolean boolean14 = atomikosProperties0.forceShutdownOnVmExit;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test07695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07695");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileLimit = (byte) 10;
        long long7 = atomikosProperties0.maxTimeout;
        atomikosProperties0.setTransactionManagerUniqueName("{{}={}}");
        atomikosProperties0.allowSubTransactions = false;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
    }

    @Test
    public void test07696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07696");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties7.setEnableLogging(true);
        atomikosProperties7.consoleFileCount = 0;
        atomikosProperties7.setSerialJtaTransactions(false);
        java.lang.String str14 = atomikosProperties7.getOutputDir();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties16 = atomikosProperties15.asProperties();
        atomikosProperties15.service = "{-1.0=100}";
        long long19 = atomikosProperties15.getDefaultJtaTimeout();
        atomikosProperties15.serialJtaTransactions = true;
        long long22 = atomikosProperties15.getDefaultJtaTimeout();
        long long23 = atomikosProperties15.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery24 = atomikosProperties15.getRecovery();
        recovery24.setRetryInterval((long) (byte) 0);
        java.lang.Object obj27 = properties0.replace((java.lang.Object) atomikosProperties7, (java.lang.Object) (byte) 0);
        int int28 = atomikosProperties7.getConsoleFileLimit();
        java.lang.String str29 = atomikosProperties7.getLogBaseName();
        atomikosProperties7.setAllowSubTransactions(true);
        long long32 = atomikosProperties7.defaultJtaTimeout;
        boolean boolean33 = atomikosProperties7.isSerialJtaTransactions();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10000L + "'", long19 == 10000L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 10000L + "'", long22 == 10000L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 500L + "'", long23 == 500L);
        org.junit.Assert.assertNotNull(recovery24);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "tmlog" + "'", str29, "tmlog");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 10000L + "'", long32 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test07697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07697");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        int int7 = atomikosProperties0.maxActives;
        atomikosProperties0.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.getRecovery();
        atomikosProperties0.outputDir = "hi!";
        atomikosProperties0.setDefaultJtaTimeout((long) 10);
        java.lang.String str15 = atomikosProperties0.getTransactionManagerUniqueName();
        boolean boolean16 = atomikosProperties0.forceShutdownOnVmExit;
        java.lang.String str17 = atomikosProperties0.logBaseName;
        atomikosProperties0.setConsoleFileLimit((int) (short) -1);
        int int20 = atomikosProperties0.consoleFileLimit;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
    }

    @Test
    public void test07698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07698");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.retryInterval = (short) 100;
        recovery0.delay = (-1L);
        long long5 = recovery0.delay;
        recovery0.delay = (short) 1;
        long long8 = recovery0.getRetryInterval();
        long long9 = recovery0.getForgetOrphanedLogEntriesDelay();
        recovery0.setMaxRetries(10);
        int int12 = recovery0.maxRetries;
        recovery0.setForgetOrphanedLogEntriesDelay((long) 32);
        long long15 = recovery0.delay;
        recovery0.setForgetOrphanedLogEntriesDelay((long) (byte) 10);
        recovery0.maxRetries = 18;
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 86400000L + "'", long9 == 86400000L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
    }

    @Test
    public void test07699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07699");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.retryInterval = (short) 100;
        recovery0.setForgetOrphanedLogEntriesDelay((long) 5);
        recovery0.setForgetOrphanedLogEntriesDelay((long) (short) 0);
        recovery0.setForgetOrphanedLogEntriesDelay((long) (short) -1);
        long long9 = recovery0.getForgetOrphanedLogEntriesDelay();
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
    }

    @Test
    public void test07700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07700");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        java.lang.String str6 = atomikosProperties0.getOutputDir();
        boolean boolean7 = atomikosProperties0.isForceShutdownOnVmExit();
        boolean boolean8 = atomikosProperties0.enableLogging;
        java.lang.String str9 = atomikosProperties0.getTransactionManagerUniqueName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        atomikosProperties10.service = "{-1.0=100}";
        long long14 = atomikosProperties10.getDefaultJtaTimeout();
        atomikosProperties10.enableLogging = false;
        atomikosProperties10.setMaxTimeout((long) (byte) 0);
        atomikosProperties10.setAllowSubTransactions(true);
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.Object obj23 = properties21.remove((java.lang.Object) (-1.0d));
        boolean boolean24 = properties21.isEmpty();
        java.util.Properties properties25 = new java.util.Properties();
        java.lang.String str26 = properties25.toString();
        java.lang.Object obj28 = properties25.remove((java.lang.Object) (short) 100);
        java.lang.Object obj31 = properties25.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean33 = properties25.containsKey((java.lang.Object) 0L);
        java.lang.Object obj36 = properties25.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj39 = properties25.setProperty("", "{-1.0=100}");
        java.lang.Object obj40 = properties25.clone();
        java.lang.Object obj41 = properties21.get((java.lang.Object) properties25);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery43 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery43.retryInterval = (short) 100;
        recovery43.forgetOrphanedLogEntriesDelay = 'a';
        long long48 = recovery43.getDelay();
        long long49 = recovery43.getRetryInterval();
        recovery43.forgetOrphanedLogEntriesDelay = 10000L;
        atomikosProperties10.set(properties25, "tmlog", (java.lang.Object) recovery43);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel53 = atomikosProperties10.consoleLogLevel;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel53);
        atomikosProperties0.setForceShutdownOnVmExit(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10000L + "'", long14 == 10000L);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "{}" + "'", str26, "{}");
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNotNull(obj40);
// flaky:         org.junit.Assert.assertEquals(obj40.toString(), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 10000L + "'", long48 == 10000L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 100L + "'", long49 == 100L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel53 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel53.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
    }

    @Test
    public void test07701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07701");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getLogBaseName();
        long long5 = atomikosProperties0.defaultJtaTimeout;
        long long6 = atomikosProperties0.getMaxTimeout();
        boolean boolean7 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.setService("{-1.0=100}");
        atomikosProperties0.setOutputDir("{}");
        atomikosProperties0.setConsoleFileLimit((int) (byte) 1);
        atomikosProperties0.threadedTwoPhaseCommit = true;
        int int16 = atomikosProperties0.consoleFileLimit;
        java.lang.String str17 = atomikosProperties0.getService();
        atomikosProperties0.threadedTwoPhaseCommit = false;
        int int20 = atomikosProperties0.getMaxActives();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tmlog" + "'", str4, "tmlog");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 10000L + "'", long5 == 10000L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 300000L + "'", long6 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "{-1.0=100}" + "'", str17, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 50 + "'", int20 == 50);
    }

    @Test
    public void test07702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07702");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        boolean boolean7 = atomikosProperties0.isAllowSubTransactions();
        boolean boolean8 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.allowSubTransactions = false;
        atomikosProperties0.threadedTwoPhaseCommit = true;
        boolean boolean13 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.setService("{1.0=-1, -1.0=100}");
        java.lang.String str16 = atomikosProperties0.logBaseName;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tmlog" + "'", str16, "tmlog");
    }

    @Test
    public void test07703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07703");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.util.Properties properties7 = new java.util.Properties();
        java.lang.String str8 = properties7.toString();
        java.lang.Object obj10 = properties7.remove((java.lang.Object) (short) 100);
        java.lang.Object obj13 = properties7.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        int int14 = properties7.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery15 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery15.retryInterval = (short) 100;
        recovery15.forgetOrphanedLogEntriesDelay = 'a';
        long long20 = recovery15.retryInterval;
        recovery15.setForgetOrphanedLogEntriesDelay((long) 0);
        java.lang.Object obj23 = properties0.replace((java.lang.Object) int14, (java.lang.Object) recovery15);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet24 = properties0.entrySet();
        java.io.OutputStream outputStream25 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.storeToXML(outputStream25, "{{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}=hi!}", "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=true, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=35, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=10, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={-1.0=100}, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{}" + "'", str8, "{}");
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 100L + "'", long20 == 100L);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNotNull(objEntrySet24);
    }

    @Test
    public void test07704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07704");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        long long7 = atomikosProperties0.getDefaultJtaTimeout();
        long long8 = atomikosProperties0.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery9 = atomikosProperties0.getRecovery();
        java.lang.String str10 = atomikosProperties0.outputDir;
        atomikosProperties0.consoleFileCount = 32;
        atomikosProperties0.consoleFileLimit = (short) -1;
        boolean boolean15 = atomikosProperties0.serialJtaTransactions;
        atomikosProperties0.setOutputDir("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        int int18 = atomikosProperties0.consoleFileCount;
        atomikosProperties0.checkpointInterval = (short) -1;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(recovery9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 32 + "'", int18 == 32);
    }

    @Test
    public void test07705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07705");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        int int7 = atomikosProperties0.maxActives;
        atomikosProperties0.setConsoleFileName("tmlog");
        java.lang.String str10 = atomikosProperties0.logBaseName;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery11 = atomikosProperties0.getRecovery();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery12 = atomikosProperties0.recovery;
        recovery12.setDelay((long) (short) 0);
        recovery12.forgetOrphanedLogEntriesDelay = '#';
        recovery12.maxRetries = 50;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "tmlog" + "'", str10, "tmlog");
        org.junit.Assert.assertNotNull(recovery11);
        org.junit.Assert.assertNotNull(recovery12);
    }

    @Test
    public void test07706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07706");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Enumeration<?> wildcardEnumeration1 = properties0.propertyNames();
        java.lang.Object obj2 = properties0.clone();
        java.util.Collection<java.lang.Object> objCollection3 = properties0.values();
        java.util.Enumeration<java.lang.Object> objEnumeration4 = properties0.keys();
        java.util.Properties properties5 = new java.util.Properties();
        java.lang.String str6 = properties5.toString();
        java.lang.Object obj8 = properties5.remove((java.lang.Object) (short) 100);
        java.lang.Object obj11 = properties5.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean13 = properties5.containsKey((java.lang.Object) 0L);
        java.lang.Object obj16 = properties5.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj19 = properties5.setProperty("", "{-1.0=100}");
        java.lang.Object obj20 = properties5.clone();
        java.util.Collection<java.lang.Object> objCollection21 = properties5.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet22 = properties5.entrySet();
        java.lang.String str24 = properties5.getProperty("{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}");
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet25 = properties5.entrySet();
        boolean boolean26 = properties0.equals((java.lang.Object) properties5);
        java.util.Properties properties27 = new java.util.Properties();
        java.lang.String str28 = properties27.toString();
        java.lang.Object obj30 = properties27.remove((java.lang.Object) (short) 100);
        java.lang.Object obj33 = properties27.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean35 = properties27.containsKey((java.lang.Object) 0L);
        java.lang.Object obj38 = properties27.replace((java.lang.Object) false, (java.lang.Object) ' ');
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties39 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties39.setEnableLogging(true);
        atomikosProperties39.setConsoleFileLimit((int) (short) 0);
        boolean boolean44 = properties27.contains((java.lang.Object) atomikosProperties39);
        properties27.clear();
        boolean boolean46 = properties5.containsKey((java.lang.Object) properties27);
        java.util.Properties properties47 = new java.util.Properties(properties27);
        java.util.Set<java.lang.String> strSet48 = properties47.stringPropertyNames();
        boolean boolean49 = properties47.isEmpty();
        org.junit.Assert.assertNotNull(wildcardEnumeration1);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "{}");
        org.junit.Assert.assertNotNull(objCollection3);
        org.junit.Assert.assertNotNull(objEnumeration4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "{}" + "'", str6, "{}");
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNotNull(obj20);
// flaky:         org.junit.Assert.assertEquals(obj20.toString(), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNotNull(objCollection21);
        org.junit.Assert.assertNotNull(objEntrySet22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(objEntrySet25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "{}" + "'", str28, "{}");
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
    }

    @Test
    public void test07707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07707");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        long long5 = atomikosProperties0.getMaxTimeout();
        int int6 = atomikosProperties0.consoleFileCount;
        long long7 = atomikosProperties0.getCheckpointInterval();
        java.lang.String str8 = atomikosProperties0.outputDir;
        atomikosProperties0.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery11 = atomikosProperties0.recovery;
        recovery11.setRetryInterval((long) 18);
        recovery11.setMaxRetries(21);
        recovery11.setDelay((long) '#');
        long long18 = recovery11.getRetryInterval();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(recovery11);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 18L + "'", long18 == 18L);
    }

    @Test
    public void test07708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07708");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery4 = atomikosProperties0.recovery;
        atomikosProperties0.forceShutdownOnVmExit = false;
        java.util.Properties properties7 = new java.util.Properties();
        java.lang.String str8 = properties7.toString();
        java.lang.Object obj10 = properties7.remove((java.lang.Object) (short) 100);
        java.lang.Object obj13 = properties7.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean15 = properties7.containsKey((java.lang.Object) 0L);
        java.lang.String str16 = properties7.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties18 = atomikosProperties17.asProperties();
        atomikosProperties17.service = "{-1.0=100}";
        long long21 = atomikosProperties17.getDefaultJtaTimeout();
        atomikosProperties17.setMaxActives(0);
        atomikosProperties17.maxActives = 'a';
        boolean boolean26 = atomikosProperties17.isThreadedTwoPhaseCommit();
        boolean boolean27 = atomikosProperties17.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel28 = atomikosProperties17.consoleLogLevel;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties30 = atomikosProperties29.asProperties();
        atomikosProperties29.service = "{-1.0=100}";
        long long33 = atomikosProperties29.getDefaultJtaTimeout();
        atomikosProperties29.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties29.setMaxActives(100);
        java.lang.String str38 = atomikosProperties29.logBaseDir;
        java.lang.String str39 = atomikosProperties29.outputDir;
        java.lang.Object obj40 = properties7.replace((java.lang.Object) atomikosLoggingLevel28, (java.lang.Object) atomikosProperties29);
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel28;
        java.lang.String str42 = atomikosProperties0.getLogBaseName();
        atomikosProperties0.setLogBaseName("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        boolean boolean45 = atomikosProperties0.serialJtaTransactions;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNotNull(recovery4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{}" + "'", str8, "{}");
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{-1.0=100}" + "'", str16, "{-1.0=100}");
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10000L + "'", long21 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel28 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel28.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(properties30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 10000L + "'", long33 == 10000L);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "{={-1.0=100}, -1.0=100}" + "'", str39, "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "tmlog" + "'", str42, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    }

    @Test
    public void test07709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07709");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        java.lang.String str7 = atomikosProperties0.getLogBaseName();
        java.util.Properties properties8 = atomikosProperties0.asProperties();
        int int9 = atomikosProperties0.getConsoleFileCount();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        atomikosProperties10.service = "{-1.0=100}";
        long long14 = atomikosProperties10.getDefaultJtaTimeout();
        atomikosProperties10.setMaxActives(0);
        atomikosProperties10.maxActives = 'a';
        boolean boolean19 = atomikosProperties10.isThreadedTwoPhaseCommit();
        boolean boolean20 = atomikosProperties10.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel21 = atomikosProperties10.consoleLogLevel;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel21);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "tmlog" + "'", str7, "tmlog");
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10000L + "'", long14 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel21 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel21.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
    }

    @Test
    public void test07710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07710");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        boolean boolean2 = properties0.isEmpty();
        java.lang.Object obj5 = properties0.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration6 = properties0.elements();
        java.util.Properties properties7 = new java.util.Properties();
        java.util.Properties properties8 = new java.util.Properties(properties7);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery9 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery9.retryInterval = (short) 100;
        recovery9.forgetOrphanedLogEntriesDelay = 'a';
        long long14 = recovery9.retryInterval;
        recovery9.forgetOrphanedLogEntriesDelay = 0L;
        long long17 = recovery9.getForgetOrphanedLogEntriesDelay();
        recovery9.setRetryInterval((long) 0);
        boolean boolean20 = properties0.remove((java.lang.Object) properties8, (java.lang.Object) 0);
        java.lang.String str22 = properties8.getProperty("hi!");
        java.util.Set<java.lang.Object> objSet23 = properties8.keySet();
        java.util.Collection<java.lang.Object> objCollection24 = properties8.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean26 = atomikosProperties25.isSerialJtaTransactions();
        atomikosProperties25.logBaseName = "{-1.0=100}";
        int int29 = atomikosProperties25.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery30 = atomikosProperties25.getRecovery();
        atomikosProperties25.setConsoleFileCount((int) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel33 = null;
        atomikosProperties25.consoleLogLevel = atomikosLoggingLevel33;
        java.lang.String str35 = atomikosProperties25.logBaseDir;
        long long36 = atomikosProperties25.getCheckpointInterval();
        java.lang.String str37 = atomikosProperties25.getOutputDir();
        boolean boolean38 = properties8.containsKey((java.lang.Object) atomikosProperties25);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(objEnumeration6);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 100L + "'", long14 == 100L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(objSet23);
        org.junit.Assert.assertNotNull(objCollection24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 50 + "'", int29 == 50);
        org.junit.Assert.assertNotNull(recovery30);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 500L + "'", long36 == 500L);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test07711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07711");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setEnableLogging(true);
        atomikosProperties0.consoleFileCount = 0;
        atomikosProperties0.consoleFileCount = 100;
        boolean boolean7 = atomikosProperties0.isSerialJtaTransactions();
        boolean boolean8 = atomikosProperties0.isEnableLogging();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test07712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07712");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        boolean boolean2 = properties0.isEmpty();
        java.util.Properties properties3 = new java.util.Properties();
        java.lang.String str4 = properties3.toString();
        java.lang.Object obj6 = properties3.remove((java.lang.Object) (short) 100);
        java.lang.Object obj9 = properties3.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean11 = properties3.containsKey((java.lang.Object) 0L);
        java.lang.Object obj14 = properties3.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties15 = new java.util.Properties();
        java.lang.String str16 = properties15.toString();
        java.lang.Object obj18 = properties15.remove((java.lang.Object) (short) 100);
        java.lang.Object obj21 = properties15.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj22 = properties15.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration23 = properties15.elements();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties15);
        java.lang.Object obj25 = properties15.clone();
        properties15.clear();
        int int27 = properties15.size();
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties15);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties30 = atomikosProperties29.asProperties();
        atomikosProperties29.service = "{-1.0=100}";
        long long33 = atomikosProperties29.getDefaultJtaTimeout();
        atomikosProperties29.serialJtaTransactions = true;
        atomikosProperties29.maxActives = ' ';
        int int38 = atomikosProperties29.getConsoleFileCount();
        long long39 = atomikosProperties29.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties41 = atomikosProperties40.asProperties();
        atomikosProperties40.service = "{-1.0=100}";
        java.lang.String str44 = atomikosProperties40.getTransactionManagerUniqueName();
        boolean boolean45 = atomikosProperties40.isSerialJtaTransactions();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel46 = atomikosProperties40.getConsoleLogLevel();
        atomikosProperties29.setConsoleLogLevel(atomikosLoggingLevel46);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties48 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties48.setAllowSubTransactions(true);
        boolean boolean51 = atomikosProperties48.enableLogging;
        atomikosProperties48.consoleFileLimit = (byte) 100;
        java.util.Properties properties54 = new java.util.Properties();
        java.lang.String str55 = properties54.toString();
        java.util.Properties properties56 = new java.util.Properties(properties54);
        java.util.Properties properties58 = new java.util.Properties();
        java.lang.String str59 = properties58.toString();
        java.lang.Object obj61 = properties58.remove((java.lang.Object) (short) 100);
        java.lang.Object obj64 = properties58.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean66 = properties58.containsKey((java.lang.Object) 0L);
        java.lang.Object obj69 = properties58.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties70 = new java.util.Properties(properties58);
        java.util.Enumeration<java.lang.Object> objEnumeration71 = properties70.elements();
        atomikosProperties48.set(properties56, "{={-1.0=100}, -1.0=100}", (java.lang.Object) properties70);
        atomikosProperties48.setOutputDir("hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery75 = atomikosProperties48.getRecovery();
        long long76 = recovery75.getRetryInterval();
        java.lang.Object obj77 = properties0.replace((java.lang.Object) atomikosProperties29, (java.lang.Object) recovery75);
        recovery75.setDelay((long) (byte) 10);
        int int80 = recovery75.maxRetries;
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{}" + "'", str4, "{}");
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{}" + "'", str16, "{}");
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration23);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "{1.0=-1}");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(properties30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 10000L + "'", long33 == 10000L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 10000L + "'", long39 == 10000L);
        org.junit.Assert.assertNotNull(properties41);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel46 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel46.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "{}" + "'", str55, "{}");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "{}" + "'", str59, "{}");
        org.junit.Assert.assertNull(obj61);
        org.junit.Assert.assertNull(obj64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(obj69);
        org.junit.Assert.assertNotNull(objEnumeration71);
        org.junit.Assert.assertNotNull(recovery75);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 10000L + "'", long76 == 10000L);
        org.junit.Assert.assertNull(obj77);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 5 + "'", int80 == 5);
    }

    @Test
    public void test07713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07713");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        int int7 = atomikosProperties0.maxActives;
        atomikosProperties0.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.getRecovery();
        atomikosProperties0.setLogBaseName("");
        java.lang.String str13 = atomikosProperties0.logBaseName;
        atomikosProperties0.service = "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}";
        java.lang.String str16 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setForceShutdownOnVmExit(true);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{}" + "'", str16, "{}");
    }

    @Test
    public void test07714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07714");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        atomikosProperties0.setTransactionManagerUniqueName("{-1.0=100}");
        atomikosProperties0.consoleFileCount = 0;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery11 = atomikosProperties0.getRecovery();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery12 = atomikosProperties0.recovery;
        atomikosProperties0.maxActives = (byte) 100;
        atomikosProperties0.setConsoleFileLimit((int) (byte) 100);
        long long17 = atomikosProperties0.defaultJtaTimeout;
        atomikosProperties0.setEnableLogging(false);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertNotNull(recovery11);
        org.junit.Assert.assertNotNull(recovery12);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10000L + "'", long17 == 10000L);
    }

    @Test
    public void test07715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07715");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        long long2 = atomikosProperties0.maxTimeout;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 300000L + "'", long2 == 300000L);
    }

    @Test
    public void test07716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07716");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj3 = properties0.setProperty("{}", "{}");
        java.util.Enumeration<java.lang.Object> objEnumeration4 = properties0.keys();
        java.util.Enumeration<?> wildcardEnumeration5 = properties0.propertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties7 = atomikosProperties6.asProperties();
        atomikosProperties6.service = "{-1.0=100}";
        long long10 = atomikosProperties6.getDefaultJtaTimeout();
        long long11 = atomikosProperties6.getMaxTimeout();
        atomikosProperties6.threadedTwoPhaseCommit = true;
        long long14 = atomikosProperties6.checkpointInterval;
        boolean boolean15 = atomikosProperties6.allowSubTransactions;
        boolean boolean16 = properties0.equals((java.lang.Object) boolean15);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties18 = atomikosProperties17.asProperties();
        atomikosProperties17.service = "{-1.0=100}";
        java.lang.String str21 = atomikosProperties17.getTransactionManagerUniqueName();
        atomikosProperties17.consoleFileName = "hi!";
        atomikosProperties17.service = "tm.out";
        atomikosProperties17.logBaseName = "tm.out";
        atomikosProperties17.setThreadedTwoPhaseCommit(true);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel30 = atomikosProperties17.consoleLogLevel;
        atomikosProperties17.service = "tm.out";
        boolean boolean33 = atomikosProperties17.enableLogging;
        boolean boolean34 = properties0.contains((java.lang.Object) atomikosProperties17);
        int int35 = properties0.size();
        java.util.Properties properties36 = new java.util.Properties();
        java.lang.String str37 = properties36.toString();
        boolean boolean38 = properties36.isEmpty();
        java.lang.Object obj41 = properties36.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration42 = properties36.elements();
        java.util.Properties properties43 = new java.util.Properties();
        java.util.Properties properties44 = new java.util.Properties(properties43);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery45 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery45.retryInterval = (short) 100;
        recovery45.forgetOrphanedLogEntriesDelay = 'a';
        long long50 = recovery45.retryInterval;
        recovery45.forgetOrphanedLogEntriesDelay = 0L;
        long long53 = recovery45.getForgetOrphanedLogEntriesDelay();
        recovery45.setRetryInterval((long) 0);
        boolean boolean56 = properties36.remove((java.lang.Object) properties44, (java.lang.Object) 0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties57 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties58 = atomikosProperties57.asProperties();
        atomikosProperties57.service = "{-1.0=100}";
        long long61 = atomikosProperties57.getDefaultJtaTimeout();
        atomikosProperties57.enableLogging = false;
        atomikosProperties57.setMaxTimeout((long) (byte) 0);
        java.lang.Object obj66 = properties36.get((java.lang.Object) (byte) 0);
        java.util.Set<java.lang.String> strSet67 = properties36.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties68 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties69 = atomikosProperties68.asProperties();
        atomikosProperties68.service = "{-1.0=100}";
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery72 = atomikosProperties68.recovery;
        java.lang.String str73 = atomikosProperties68.getLogBaseDir();
        atomikosProperties68.setMaxActives(35);
        boolean boolean76 = atomikosProperties68.isThreadedTwoPhaseCommit();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties77 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties78 = atomikosProperties77.asProperties();
        atomikosProperties77.service = "{-1.0=100}";
        java.lang.String str81 = atomikosProperties77.getLogBaseName();
        long long82 = atomikosProperties77.defaultJtaTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel83 = null;
        atomikosProperties77.setConsoleLogLevel(atomikosLoggingLevel83);
        atomikosProperties77.service = "";
        atomikosProperties77.serialJtaTransactions = true;
        atomikosProperties77.forceShutdownOnVmExit = false;
        int int91 = atomikosProperties77.maxActives;
        boolean boolean92 = properties0.replace((java.lang.Object) strSet67, (java.lang.Object) atomikosProperties68, (java.lang.Object) atomikosProperties77);
        properties0.clear();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNotNull(objEnumeration4);
        org.junit.Assert.assertNotNull(wildcardEnumeration5);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 300000L + "'", long11 == 300000L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 500L + "'", long14 == 500L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel30 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel30.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "{}" + "'", str37, "{}");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertNotNull(objEnumeration42);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 100L + "'", long50 == 100L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(properties58);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 10000L + "'", long61 == 10000L);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertNotNull(strSet67);
        org.junit.Assert.assertNotNull(properties69);
        org.junit.Assert.assertNotNull(recovery72);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(properties78);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "tmlog" + "'", str81, "tmlog");
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 10000L + "'", long82 == 10000L);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 50 + "'", int91 == 50);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test07717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07717");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        int int5 = atomikosProperties0.getConsoleFileLimit();
        atomikosProperties0.forceShutdownOnVmExit = false;
        java.util.Properties properties8 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{1.0=-1}";
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(properties8);
    }

    @Test
    public void test07718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07718");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj3 = properties0.setProperty("{}", "{}");
        java.util.Properties properties4 = new java.util.Properties();
        java.lang.String str5 = properties4.toString();
        java.lang.Object obj7 = properties4.remove((java.lang.Object) (short) 100);
        java.lang.Object obj10 = properties4.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean12 = properties4.containsKey((java.lang.Object) 0L);
        java.lang.Object obj15 = properties4.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties16 = new java.util.Properties();
        java.lang.String str17 = properties16.toString();
        java.lang.Object obj19 = properties16.remove((java.lang.Object) (short) 100);
        java.lang.Object obj22 = properties16.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj23 = properties16.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration24 = properties16.elements();
        properties4.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties16);
        java.lang.Object obj26 = properties0.get((java.lang.Object) properties4);
        java.util.Set<java.lang.Object> objSet27 = properties4.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties29 = atomikosProperties28.asProperties();
        atomikosProperties28.service = "{-1.0=100}";
        long long32 = atomikosProperties28.getDefaultJtaTimeout();
        atomikosProperties28.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties28.setMaxActives(100);
        boolean boolean37 = atomikosProperties28.enableLogging;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery38 = atomikosProperties28.recovery;
        atomikosProperties28.checkpointInterval = 300000L;
        int int41 = atomikosProperties28.consoleFileCount;
        atomikosProperties28.consoleFileLimit = (short) -1;
        java.lang.Object obj44 = properties4.remove((java.lang.Object) atomikosProperties28);
        java.util.Properties properties45 = new java.util.Properties();
        java.lang.String str46 = properties45.toString();
        java.lang.Object obj48 = properties45.remove((java.lang.Object) (short) 100);
        java.lang.Object obj51 = properties45.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean53 = properties45.containsKey((java.lang.Object) 0L);
        java.lang.Object obj56 = properties45.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties57 = new java.util.Properties();
        java.lang.String str58 = properties57.toString();
        java.lang.Object obj60 = properties57.remove((java.lang.Object) (short) 100);
        java.lang.Object obj63 = properties57.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj64 = properties57.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration65 = properties57.elements();
        properties45.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties57);
        java.lang.Object obj69 = properties57.setProperty("{={-1.0=100}, -1.0=100}", "hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery70 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery70.retryInterval = (short) 100;
        recovery70.forgetOrphanedLogEntriesDelay = 'a';
        long long75 = recovery70.getDelay();
        int int76 = recovery70.maxRetries;
        recovery70.delay = 1L;
        boolean boolean79 = properties57.contains((java.lang.Object) recovery70);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties80 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties81 = atomikosProperties80.asProperties();
        atomikosProperties80.service = "{-1.0=100}";
        long long84 = atomikosProperties80.getDefaultJtaTimeout();
        long long85 = atomikosProperties80.getMaxTimeout();
        atomikosProperties80.threadedTwoPhaseCommit = true;
        atomikosProperties80.setSerialJtaTransactions(true);
        atomikosProperties80.outputDir = "{={-1.0=100}, -1.0=100}";
        java.lang.Object obj92 = properties57.remove((java.lang.Object) atomikosProperties80);
        java.util.Collection<java.lang.Object> objCollection93 = properties57.values();
        boolean boolean94 = properties4.equals((java.lang.Object) objCollection93);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{}" + "'", str5, "{}");
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "{}" + "'", str17, "{}");
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration24);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(objSet27);
        org.junit.Assert.assertNotNull(properties29);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 10000L + "'", long32 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(recovery38);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "{}" + "'", str46, "{}");
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "{}" + "'", str58, "{}");
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertNotNull(obj64);
        org.junit.Assert.assertEquals(obj64.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj64), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj64), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration65);
        org.junit.Assert.assertNull(obj69);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 10000L + "'", long75 == 10000L);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 5 + "'", int76 == 5);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(properties81);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 10000L + "'", long84 == 10000L);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 300000L + "'", long85 == 300000L);
        org.junit.Assert.assertNull(obj92);
        org.junit.Assert.assertNotNull(objCollection93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test07719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07719");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        atomikosProperties0.setConsoleFileCount((int) (byte) 100);
        atomikosProperties0.setAllowSubTransactions(true);
        atomikosProperties0.setService("tm.out");
        atomikosProperties0.setSerialJtaTransactions(true);
        java.util.Properties properties14 = atomikosProperties0.asProperties();
        atomikosProperties0.outputDir = "tm.out";
        java.lang.String str17 = atomikosProperties0.getConsoleFileName();
        long long18 = atomikosProperties0.getMaxTimeout();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tm.out" + "'", str17, "tm.out");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 300000L + "'", long18 == 300000L);
    }

    @Test
    public void test07720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07720");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setAllowSubTransactions(true);
        boolean boolean3 = atomikosProperties0.enableLogging;
        atomikosProperties0.consoleFileLimit = (byte) 100;
        java.util.Properties properties6 = new java.util.Properties();
        java.lang.String str7 = properties6.toString();
        java.util.Properties properties8 = new java.util.Properties(properties6);
        java.util.Properties properties10 = new java.util.Properties();
        java.lang.String str11 = properties10.toString();
        java.lang.Object obj13 = properties10.remove((java.lang.Object) (short) 100);
        java.lang.Object obj16 = properties10.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean18 = properties10.containsKey((java.lang.Object) 0L);
        java.lang.Object obj21 = properties10.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties22 = new java.util.Properties(properties10);
        java.util.Enumeration<java.lang.Object> objEnumeration23 = properties22.elements();
        atomikosProperties0.set(properties8, "{={-1.0=100}, -1.0=100}", (java.lang.Object) properties22);
        atomikosProperties0.allowSubTransactions = false;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel27 = atomikosProperties0.getConsoleLogLevel();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties29 = atomikosProperties28.asProperties();
        atomikosProperties28.service = "{-1.0=100}";
        long long32 = atomikosProperties28.getDefaultJtaTimeout();
        atomikosProperties28.serialJtaTransactions = true;
        long long35 = atomikosProperties28.maxTimeout;
        atomikosProperties28.setLogBaseDir("{-1.0=100}");
        int int38 = atomikosProperties28.getConsoleFileCount();
        atomikosProperties28.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties42 = atomikosProperties41.asProperties();
        atomikosProperties41.service = "{-1.0=100}";
        long long45 = atomikosProperties41.getDefaultJtaTimeout();
        atomikosProperties41.setTransactionManagerUniqueName("{}");
        atomikosProperties41.consoleFileName = "hi!";
        int int50 = atomikosProperties41.getConsoleFileCount();
        boolean boolean51 = atomikosProperties41.isThreadedTwoPhaseCommit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel52 = atomikosProperties41.consoleLogLevel;
        atomikosProperties28.consoleLogLevel = atomikosLoggingLevel52;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel52;
        atomikosProperties0.outputDir = "{1.0=-1}";
        long long57 = atomikosProperties0.defaultJtaTimeout;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "{}" + "'", str7, "{}");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "{}" + "'", str11, "{}");
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNotNull(objEnumeration23);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel27 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel27.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(properties29);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 10000L + "'", long32 == 10000L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 300000L + "'", long35 == 300000L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(properties42);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 10000L + "'", long45 == 10000L);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel52 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel52.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 10000L + "'", long57 == 10000L);
    }

    @Test
    public void test07721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07721");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel7 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel7);
        atomikosProperties0.setLogBaseName("{={-1.0=100}, -1.0=100}");
        boolean boolean11 = atomikosProperties0.enableLogging;
        atomikosProperties0.setTransactionManagerUniqueName("{-1.0=100}");
        java.lang.String str14 = atomikosProperties0.outputDir;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test07722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07722");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        atomikosProperties0.maxActives = ' ';
        int int9 = atomikosProperties0.getConsoleFileCount();
        atomikosProperties0.setService("{={-1.0=100}, -1.0=100}");
        java.lang.String str12 = atomikosProperties0.getConsoleFileName();
        long long13 = atomikosProperties0.maxTimeout;
        java.lang.String str14 = atomikosProperties0.consoleFileName;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "tm.out" + "'", str12, "tm.out");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 300000L + "'", long13 == 300000L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "tm.out" + "'", str14, "tm.out");
    }

    @Test
    public void test07723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07723");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        boolean boolean2 = properties0.isEmpty();
        java.lang.Object obj5 = properties0.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Properties properties6 = new java.util.Properties();
        java.lang.String str7 = properties6.toString();
        java.lang.Object obj9 = properties6.remove((java.lang.Object) (short) 100);
        java.lang.Object obj12 = properties6.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean14 = properties6.containsKey((java.lang.Object) 0L);
        java.lang.Object obj17 = properties6.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties18 = new java.util.Properties(properties6);
        boolean boolean19 = properties0.containsValue((java.lang.Object) properties6);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet20 = properties0.entrySet();
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.String str22 = properties21.toString();
        java.lang.Object obj24 = properties21.remove((java.lang.Object) (short) 100);
        java.lang.Object obj27 = properties21.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        int int28 = properties21.size();
        int int29 = properties21.size();
        java.util.Properties properties30 = new java.util.Properties();
        java.lang.String str31 = properties30.toString();
        java.lang.Object obj33 = properties30.remove((java.lang.Object) (short) 100);
        java.lang.Object obj36 = properties30.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean38 = properties30.containsKey((java.lang.Object) 0L);
        java.lang.Object obj41 = properties30.replace((java.lang.Object) false, (java.lang.Object) ' ');
        boolean boolean42 = properties30.isEmpty();
        boolean boolean43 = properties30.isEmpty();
        java.lang.Object obj44 = properties21.remove((java.lang.Object) properties30);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties45 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties46 = atomikosProperties45.asProperties();
        atomikosProperties45.service = "{-1.0=100}";
        long long49 = atomikosProperties45.getDefaultJtaTimeout();
        atomikosProperties45.enableLogging = false;
        atomikosProperties45.setMaxTimeout((long) (byte) 0);
        atomikosProperties45.setService("tm.out");
        atomikosProperties45.enableLogging = true;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties58 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties59 = atomikosProperties58.asProperties();
        atomikosProperties58.service = "{-1.0=100}";
        long long62 = atomikosProperties58.getDefaultJtaTimeout();
        atomikosProperties58.setThreadedTwoPhaseCommit(true);
        boolean boolean65 = atomikosProperties58.isAllowSubTransactions();
        boolean boolean66 = atomikosProperties58.isEnableLogging();
        atomikosProperties58.allowSubTransactions = false;
        atomikosProperties58.threadedTwoPhaseCommit = true;
        atomikosProperties58.setLogBaseName("tm.out");
        java.lang.String str73 = atomikosProperties58.getLogBaseDir();
        java.lang.String str74 = atomikosProperties58.outputDir;
        java.lang.Object obj75 = properties21.putIfAbsent((java.lang.Object) atomikosProperties45, (java.lang.Object) atomikosProperties58);
        java.util.Enumeration<java.lang.Object> objEnumeration76 = properties21.keys();
        java.util.Set<java.lang.Object> objSet77 = properties21.keySet();
        boolean boolean78 = properties0.equals((java.lang.Object) objSet77);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "{}" + "'", str7, "{}");
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objEntrySet20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{}" + "'", str22, "{}");
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "{}" + "'", str31, "{}");
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNotNull(properties46);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 10000L + "'", long49 == 10000L);
        org.junit.Assert.assertNotNull(properties59);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 10000L + "'", long62 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNull(obj75);
        org.junit.Assert.assertNotNull(objEnumeration76);
        org.junit.Assert.assertNotNull(objSet77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test07724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07724");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setAllowSubTransactions(true);
        java.lang.String str3 = atomikosProperties0.transactionManagerUniqueName;
        int int4 = atomikosProperties0.getConsoleFileLimit();
        java.lang.String str5 = atomikosProperties0.logBaseDir;
        int int6 = atomikosProperties0.getConsoleFileLimit();
        boolean boolean7 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.logBaseName = "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=32, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={-1.0=100}, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}";
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test07725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07725");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        atomikosProperties0.maxActives = ' ';
        atomikosProperties0.maxActives = (byte) 10;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery11 = atomikosProperties0.recovery;
        recovery11.setForgetOrphanedLogEntriesDelay((long) (short) -1);
        recovery11.retryInterval = (short) 0;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertNotNull(recovery11);
    }

    @Test
    public void test07726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07726");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        boolean boolean7 = atomikosProperties0.isAllowSubTransactions();
        int int8 = atomikosProperties0.getConsoleFileLimit();
        atomikosProperties0.setForceShutdownOnVmExit(false);
        long long11 = atomikosProperties0.defaultJtaTimeout;
        java.util.Properties properties12 = new java.util.Properties();
        java.lang.String str13 = properties12.toString();
        java.lang.Object obj15 = properties12.remove((java.lang.Object) (short) 100);
        java.lang.Object obj18 = properties12.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj19 = properties12.clone();
        java.util.Set<java.lang.String> strSet20 = properties12.stringPropertyNames();
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.String str22 = properties21.toString();
        java.lang.Object obj24 = properties21.remove((java.lang.Object) (short) 100);
        java.lang.Object obj27 = properties21.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean29 = properties21.containsKey((java.lang.Object) 0L);
        java.lang.Object obj32 = properties21.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties33 = new java.util.Properties();
        java.lang.String str34 = properties33.toString();
        java.lang.Object obj36 = properties33.remove((java.lang.Object) (short) 100);
        java.lang.Object obj39 = properties33.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj40 = properties33.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration41 = properties33.elements();
        properties21.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties33);
        java.util.Properties properties43 = new java.util.Properties();
        java.lang.String str44 = properties43.toString();
        java.lang.Object obj46 = properties43.remove((java.lang.Object) (short) 100);
        java.lang.Object obj49 = properties43.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean51 = properties43.containsKey((java.lang.Object) 0L);
        java.lang.Object obj54 = properties43.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties55 = new java.util.Properties();
        java.lang.String str56 = properties55.toString();
        java.lang.Object obj58 = properties55.remove((java.lang.Object) (short) 100);
        java.lang.Object obj61 = properties55.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj62 = properties55.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration63 = properties55.elements();
        properties43.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties55);
        java.lang.Object obj65 = properties12.putIfAbsent((java.lang.Object) properties21, (java.lang.Object) properties55);
        java.util.Enumeration<java.lang.Object> objEnumeration66 = properties12.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties68 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean69 = atomikosProperties68.isSerialJtaTransactions();
        atomikosProperties68.logBaseName = "{-1.0=100}";
        int int72 = atomikosProperties68.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery73 = atomikosProperties68.getRecovery();
        java.lang.String str74 = atomikosProperties68.getLogBaseName();
        atomikosProperties68.setCheckpointInterval((long) 32);
        atomikosProperties0.set(properties12, "{-1.0=100}", (java.lang.Object) atomikosProperties68);
        java.lang.String str78 = atomikosProperties0.getService();
        atomikosProperties0.defaultJtaTimeout = (byte) 1;
        int int81 = atomikosProperties0.maxActives;
        atomikosProperties0.forceShutdownOnVmExit = false;
        atomikosProperties0.setAllowSubTransactions(true);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10000L + "'", long11 == 10000L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{}" + "'", str13, "{}");
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "{1.0=-1}");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{}" + "'", str22, "{}");
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "{}" + "'", str34, "{}");
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertEquals(obj40.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration41);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "{}" + "'", str44, "{}");
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "{}" + "'", str56, "{}");
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertNull(obj61);
        org.junit.Assert.assertNotNull(obj62);
        org.junit.Assert.assertEquals(obj62.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj62), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj62), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration63);
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertNotNull(objEnumeration66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 50 + "'", int72 == 50);
        org.junit.Assert.assertNotNull(recovery73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "{-1.0=100}" + "'", str74, "{-1.0=100}");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "{-1.0=100}" + "'", str78, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 50 + "'", int81 == 50);
    }

    @Test
    public void test07727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07727");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.checkpointInterval = 86400000L;
        long long4 = atomikosProperties0.checkpointInterval;
        java.lang.String str5 = atomikosProperties0.getLogBaseName();
        java.lang.String str6 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.setOutputDir("{1.0=-1, ={1.0=-1}, -1.0=100}");
        atomikosProperties0.setOutputDir("{{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}=hi!}");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 86400000L + "'", long4 == 86400000L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tmlog" + "'", str5, "tmlog");
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test07728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07728");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.outputDir = "{={-1.0=100}, -1.0=100}";
        long long7 = atomikosProperties0.getCheckpointInterval();
        boolean boolean8 = atomikosProperties0.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel9 = atomikosProperties0.getConsoleLogLevel();
        atomikosProperties0.forceShutdownOnVmExit = true;
        atomikosProperties0.setSerialJtaTransactions(false);
        atomikosProperties0.setSerialJtaTransactions(false);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel9 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel9.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
    }

    @Test
    public void test07729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07729");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        atomikosProperties0.setConsoleFileCount((int) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel8 = null;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel8;
        java.lang.String str10 = atomikosProperties0.logBaseDir;
        atomikosProperties0.checkpointInterval = (byte) 0;
        java.lang.String str13 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.serialJtaTransactions = true;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel16 = atomikosProperties0.getConsoleLogLevel();
        java.lang.String str17 = atomikosProperties0.consoleFileName;
        atomikosProperties0.setForceShutdownOnVmExit(true);
        atomikosProperties0.setCheckpointInterval((long) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery22 = atomikosProperties0.recovery;
        boolean boolean23 = atomikosProperties0.enableLogging;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(atomikosLoggingLevel16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tm.out" + "'", str17, "tm.out");
        org.junit.Assert.assertNotNull(recovery22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test07730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07730");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        long long7 = atomikosProperties0.getDefaultJtaTimeout();
        long long8 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.consoleFileName = "";
        boolean boolean11 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.setConsoleFileName("{1.0=-1, ={1.0=-1}, -1.0=100}");
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test07731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07731");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery4 = atomikosProperties0.recovery;
        atomikosProperties0.enableLogging = true;
        int int7 = atomikosProperties0.getConsoleFileCount();
        atomikosProperties0.maxTimeout = 1L;
        atomikosProperties0.setMaxActives((int) (short) 10);
        boolean boolean12 = atomikosProperties0.isSerialJtaTransactions();
        java.lang.String str13 = atomikosProperties0.getLogBaseName();
        int int14 = atomikosProperties0.getConsoleFileCount();
        boolean boolean15 = atomikosProperties0.isThreadedTwoPhaseCommit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel16 = atomikosProperties0.getConsoleLogLevel();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNotNull(recovery4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel16 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel16.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
    }

    @Test
    public void test07732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07732");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj3 = properties0.setProperty("{}", "{}");
        java.util.Enumeration<java.lang.Object> objEnumeration4 = properties0.keys();
        java.util.Enumeration<?> wildcardEnumeration5 = properties0.propertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties7 = atomikosProperties6.asProperties();
        atomikosProperties6.service = "{-1.0=100}";
        long long10 = atomikosProperties6.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel11 = null;
        atomikosProperties6.setConsoleLogLevel(atomikosLoggingLevel11);
        int int13 = atomikosProperties6.maxActives;
        atomikosProperties6.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery16 = atomikosProperties6.getRecovery();
        atomikosProperties6.forceShutdownOnVmExit = false;
        java.util.Properties properties19 = atomikosProperties6.asProperties();
        java.lang.String str20 = atomikosProperties6.getService();
        long long21 = atomikosProperties6.getCheckpointInterval();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties22.setAllowSubTransactions(true);
        java.lang.String str25 = atomikosProperties22.transactionManagerUniqueName;
        int int26 = atomikosProperties22.getConsoleFileLimit();
        java.lang.String str27 = atomikosProperties22.logBaseDir;
        long long28 = atomikosProperties22.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel29 = atomikosProperties22.consoleLogLevel;
        atomikosProperties6.setConsoleLogLevel(atomikosLoggingLevel29);
        java.lang.Object obj31 = properties0.get((java.lang.Object) atomikosProperties6);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery32 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery32.retryInterval = (short) 100;
        recovery32.setForgetOrphanedLogEntriesDelay((long) 5);
        recovery32.setRetryInterval((long) (-1));
        recovery32.retryInterval = (byte) 100;
        recovery32.setMaxRetries(18);
        int int43 = recovery32.getMaxRetries();
        java.util.Properties properties44 = new java.util.Properties();
        java.lang.Object obj46 = properties44.remove((java.lang.Object) (-1.0d));
        boolean boolean47 = properties44.isEmpty();
        java.util.Collection<java.lang.Object> objCollection48 = properties44.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties50 = atomikosProperties49.asProperties();
        atomikosProperties49.service = "{-1.0=100}";
        long long53 = atomikosProperties49.getDefaultJtaTimeout();
        atomikosProperties49.serialJtaTransactions = true;
        long long56 = atomikosProperties49.getDefaultJtaTimeout();
        long long57 = atomikosProperties49.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery58 = atomikosProperties49.getRecovery();
        long long59 = recovery58.delay;
        int int60 = recovery58.maxRetries;
        java.lang.Object obj61 = properties44.get((java.lang.Object) int60);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery62 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery62.retryInterval = (short) 100;
        recovery62.forgetOrphanedLogEntriesDelay = 'a';
        long long67 = recovery62.getDelay();
        int int68 = recovery62.maxRetries;
        int int69 = recovery62.maxRetries;
        recovery62.setDelay((long) (-1));
        long long72 = recovery62.forgetOrphanedLogEntriesDelay;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties73 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str74 = atomikosProperties73.getOutputDir();
        atomikosProperties73.threadedTwoPhaseCommit = false;
        java.lang.Object obj77 = properties44.getOrDefault((java.lang.Object) recovery62, (java.lang.Object) atomikosProperties73);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties78 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties79 = atomikosProperties78.asProperties();
        atomikosProperties78.service = "{-1.0=100}";
        long long82 = atomikosProperties78.getDefaultJtaTimeout();
        atomikosProperties78.setThreadedTwoPhaseCommit(true);
        boolean boolean85 = atomikosProperties78.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery86 = atomikosProperties78.recovery;
        boolean boolean87 = atomikosProperties78.threadedTwoPhaseCommit;
        atomikosProperties78.service = "{-1.0=100}";
        atomikosProperties78.setThreadedTwoPhaseCommit(false);
        atomikosProperties78.logBaseName = "hi!";
        atomikosProperties78.threadedTwoPhaseCommit = false;
        java.lang.String str96 = atomikosProperties78.transactionManagerUniqueName;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean97 = properties0.replace((java.lang.Object) int43, obj77, (java.lang.Object) str96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNotNull(objEnumeration4);
        org.junit.Assert.assertNotNull(wildcardEnumeration5);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 50 + "'", int13 == 50);
        org.junit.Assert.assertNotNull(recovery16);
        org.junit.Assert.assertNotNull(properties19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{-1.0=100}" + "'", str20, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 500L + "'", long21 == 500L);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 500L + "'", long28 == 500L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel29 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel29.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 18 + "'", int43 == 18);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(objCollection48);
        org.junit.Assert.assertNotNull(properties50);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 10000L + "'", long53 == 10000L);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 10000L + "'", long56 == 10000L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 500L + "'", long57 == 500L);
        org.junit.Assert.assertNotNull(recovery58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 10000L + "'", long59 == 10000L);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 5 + "'", int60 == 5);
        org.junit.Assert.assertNull(obj61);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 10000L + "'", long67 == 10000L);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 5 + "'", int68 == 5);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 5 + "'", int69 == 5);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 97L + "'", long72 == 97L);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNotNull(obj77);
        org.junit.Assert.assertNotNull(properties79);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 10000L + "'", long82 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(recovery86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNull(str96);
    }

    @Test
    public void test07733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07733");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        int int7 = atomikosProperties0.maxActives;
        atomikosProperties0.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.getRecovery();
        atomikosProperties0.forceShutdownOnVmExit = false;
        java.lang.String str13 = atomikosProperties0.service;
        atomikosProperties0.allowSubTransactions = false;
        atomikosProperties0.enableLogging = false;
        long long18 = atomikosProperties0.getCheckpointInterval();
        atomikosProperties0.setLogBaseDir("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{-1.0=100}" + "'", str13, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 500L + "'", long18 == 500L);
    }

    @Test
    public void test07734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07734");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setEnableLogging(true);
        atomikosProperties0.consoleFileCount = 0;
        int int5 = atomikosProperties0.getMaxActives();
        java.lang.String str6 = atomikosProperties0.getLogBaseDir();
        java.lang.String str7 = atomikosProperties0.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery8 = atomikosProperties0.getRecovery();
        boolean boolean9 = atomikosProperties0.threadedTwoPhaseCommit;
        atomikosProperties0.enableLogging = false;
        atomikosProperties0.checkpointInterval = (byte) 10;
        java.lang.String str14 = atomikosProperties0.getOutputDir();
        atomikosProperties0.setThreadedTwoPhaseCommit(false);
        boolean boolean17 = atomikosProperties0.allowSubTransactions;
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 50 + "'", int5 == 50);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(recovery8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test07735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07735");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        boolean boolean7 = atomikosProperties0.isAllowSubTransactions();
        boolean boolean8 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.allowSubTransactions = false;
        atomikosProperties0.threadedTwoPhaseCommit = true;
        atomikosProperties0.setLogBaseName("tm.out");
        java.lang.String str15 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.outputDir = "{{}={}}";
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery18 = atomikosProperties0.getRecovery();
        recovery18.delay = (byte) 1;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(recovery18);
    }

    @Test
    public void test07736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07736");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.enableLogging = false;
        atomikosProperties0.setMaxTimeout((long) (byte) 0);
        atomikosProperties0.setAllowSubTransactions(true);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties12 = atomikosProperties11.asProperties();
        atomikosProperties11.service = "{-1.0=100}";
        java.lang.String str15 = atomikosProperties11.getTransactionManagerUniqueName();
        boolean boolean16 = atomikosProperties11.isSerialJtaTransactions();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel17 = atomikosProperties11.getConsoleLogLevel();
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel17;
        atomikosProperties0.threadedTwoPhaseCommit = true;
        atomikosProperties0.serialJtaTransactions = false;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel23 = atomikosProperties0.consoleLogLevel;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertNotNull(properties12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel17 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel17.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel23 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel23.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
    }

    @Test
    public void test07737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07737");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = new java.util.Properties();
        java.lang.String str4 = properties3.toString();
        java.lang.Object obj6 = properties3.remove((java.lang.Object) (short) 100);
        java.lang.Object obj9 = properties3.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean11 = properties3.containsKey((java.lang.Object) 0L);
        java.lang.Object obj14 = properties3.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj17 = properties3.setProperty("", "{-1.0=100}");
        boolean boolean18 = properties3.isEmpty();
        java.util.Properties properties19 = new java.util.Properties();
        java.lang.String str20 = properties19.toString();
        java.util.Properties properties21 = new java.util.Properties(properties19);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet22 = properties21.entrySet();
        java.util.Properties properties24 = new java.util.Properties();
        java.lang.Object obj26 = properties24.remove((java.lang.Object) (-1.0d));
        int int27 = properties24.size();
        boolean boolean28 = properties3.replace((java.lang.Object) properties21, (java.lang.Object) 100L, (java.lang.Object) properties24);
        boolean boolean29 = properties3.isEmpty();
        java.util.Set<java.lang.Object> objSet30 = properties3.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties32 = atomikosProperties31.asProperties();
        atomikosProperties31.service = "{-1.0=100}";
        long long35 = atomikosProperties31.getDefaultJtaTimeout();
        long long36 = atomikosProperties31.getMaxTimeout();
        int int37 = atomikosProperties31.consoleFileCount;
        java.lang.String str38 = atomikosProperties31.getOutputDir();
        boolean boolean39 = properties1.remove((java.lang.Object) properties3, (java.lang.Object) atomikosProperties31);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties41 = atomikosProperties40.asProperties();
        atomikosProperties40.service = "{-1.0=100}";
        long long44 = atomikosProperties40.getDefaultJtaTimeout();
        long long45 = atomikosProperties40.getMaxTimeout();
        int int46 = atomikosProperties40.consoleFileCount;
        atomikosProperties40.setConsoleFileCount(0);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel49 = atomikosProperties40.getConsoleLogLevel();
        boolean boolean50 = properties3.equals((java.lang.Object) atomikosLoggingLevel49);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties51 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties52 = atomikosProperties51.asProperties();
        java.util.Properties properties53 = new java.util.Properties();
        java.lang.Object obj55 = properties53.remove((java.lang.Object) (-1.0d));
        boolean boolean56 = properties53.isEmpty();
        int int57 = properties53.size();
        java.lang.String str59 = properties53.getProperty("{}");
        java.lang.Object obj60 = properties52.remove((java.lang.Object) properties53);
        java.lang.String str62 = properties53.getProperty("tmlog");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties63 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties63.setEnableLogging(true);
        atomikosProperties63.consoleFileCount = 0;
        int int68 = atomikosProperties63.getMaxActives();
        java.lang.String str69 = atomikosProperties63.getLogBaseDir();
        java.lang.String str70 = atomikosProperties63.service;
        atomikosProperties63.setConsoleFileCount((int) (byte) 1);
        java.lang.Object obj73 = properties53.get((java.lang.Object) atomikosProperties63);
        java.util.Properties properties74 = new java.util.Properties();
        java.lang.Object obj76 = properties74.remove((java.lang.Object) (-1.0d));
        java.util.Enumeration<?> wildcardEnumeration77 = properties74.propertyNames();
        java.lang.Object obj78 = properties3.getOrDefault((java.lang.Object) atomikosProperties63, (java.lang.Object) wildcardEnumeration77);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties79 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean80 = atomikosProperties79.isThreadedTwoPhaseCommit();
        long long81 = atomikosProperties79.getCheckpointInterval();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties82 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties83 = atomikosProperties82.asProperties();
        atomikosProperties82.service = "{-1.0=100}";
        long long86 = atomikosProperties82.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel87 = null;
        atomikosProperties82.setConsoleLogLevel(atomikosLoggingLevel87);
        int int89 = atomikosProperties82.maxActives;
        atomikosProperties82.setConsoleFileName("tmlog");
        java.lang.String str92 = atomikosProperties82.logBaseName;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery93 = atomikosProperties82.getRecovery();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery94 = atomikosProperties82.recovery;
        recovery94.setDelay((long) (short) 0);
        int int97 = recovery94.maxRetries;
        java.lang.Object obj98 = properties3.put((java.lang.Object) atomikosProperties79, (java.lang.Object) recovery94);
        long long99 = atomikosProperties79.getCheckpointInterval();
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{}" + "'", str4, "{}");
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{}" + "'", str20, "{}");
        org.junit.Assert.assertNotNull(objEntrySet22);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(objSet30);
        org.junit.Assert.assertNotNull(properties32);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 10000L + "'", long35 == 10000L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 300000L + "'", long36 == 300000L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(properties41);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 10000L + "'", long44 == 10000L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 300000L + "'", long45 == 300000L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel49 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel49.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(properties52);
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 50 + "'", int68 == 50);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNull(obj73);
        org.junit.Assert.assertNull(obj76);
        org.junit.Assert.assertNotNull(wildcardEnumeration77);
        org.junit.Assert.assertNotNull(obj78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 500L + "'", long81 == 500L);
        org.junit.Assert.assertNotNull(properties83);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 10000L + "'", long86 == 10000L);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 50 + "'", int89 == 50);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "tmlog" + "'", str92, "tmlog");
        org.junit.Assert.assertNotNull(recovery93);
        org.junit.Assert.assertNotNull(recovery94);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 5 + "'", int97 == 5);
        org.junit.Assert.assertNull(obj98);
        org.junit.Assert.assertTrue("'" + long99 + "' != '" + 500L + "'", long99 == 500L);
    }

    @Test
    public void test07738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07738");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        boolean boolean2 = properties0.isEmpty();
        java.lang.Object obj5 = properties0.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Properties properties6 = new java.util.Properties();
        java.lang.String str7 = properties6.toString();
        java.lang.Object obj9 = properties6.remove((java.lang.Object) (short) 100);
        java.lang.Object obj12 = properties6.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean14 = properties6.containsKey((java.lang.Object) 0L);
        java.lang.Object obj17 = properties6.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties18 = new java.util.Properties(properties6);
        boolean boolean19 = properties0.containsValue((java.lang.Object) properties6);
        java.lang.String str21 = properties0.getProperty("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties23 = atomikosProperties22.asProperties();
        atomikosProperties22.service = "{-1.0=100}";
        long long26 = atomikosProperties22.getDefaultJtaTimeout();
        atomikosProperties22.enableLogging = false;
        atomikosProperties22.setMaxTimeout((long) (byte) 0);
        atomikosProperties22.setAllowSubTransactions(true);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties34 = atomikosProperties33.asProperties();
        atomikosProperties33.service = "{-1.0=100}";
        java.lang.String str37 = atomikosProperties33.getTransactionManagerUniqueName();
        boolean boolean38 = atomikosProperties33.isSerialJtaTransactions();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel39 = atomikosProperties33.getConsoleLogLevel();
        atomikosProperties22.consoleLogLevel = atomikosLoggingLevel39;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties41.setAllowSubTransactions(true);
        boolean boolean44 = atomikosProperties41.enableLogging;
        boolean boolean45 = atomikosProperties41.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel46 = atomikosProperties41.consoleLogLevel;
        atomikosProperties22.consoleLogLevel = atomikosLoggingLevel46;
        atomikosProperties22.setConsoleFileName("{1.0=-1, -1.0=100}");
        java.util.Properties properties50 = new java.util.Properties();
        java.lang.String str51 = properties50.toString();
        java.util.Properties properties52 = new java.util.Properties(properties50);
        boolean boolean53 = properties52.isEmpty();
        java.lang.Object obj56 = properties52.setProperty("tmlog", "{}");
        java.lang.Object obj57 = properties52.clone();
        java.lang.Object obj58 = properties0.putIfAbsent((java.lang.Object) atomikosProperties22, obj57);
        boolean boolean59 = properties0.isEmpty();
        java.io.OutputStream outputStream60 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.storeToXML(outputStream60, "tmlog", "{={={-1.0=100}, -1.0=100}}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "{}" + "'", str7, "{}");
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(properties23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 10000L + "'", long26 == 10000L);
        org.junit.Assert.assertNotNull(properties34);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel39 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel39.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel46 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel46.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "{}" + "'", str51, "{}");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertNotNull(obj57);
        org.junit.Assert.assertEquals(obj57.toString(), "{tmlog={}}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj57), "{tmlog={}}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj57), "{tmlog={}}");
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test07739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07739");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel7 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel7);
        boolean boolean9 = atomikosProperties0.enableLogging;
        int int10 = atomikosProperties0.getConsoleFileLimit();
        atomikosProperties0.serialJtaTransactions = false;
        atomikosProperties0.setLogBaseName("");
        atomikosProperties0.checkpointInterval = (byte) -1;
        long long17 = atomikosProperties0.defaultJtaTimeout;
        atomikosProperties0.setService("{1.0=-1}");
        atomikosProperties0.maxActives = (short) 0;
        atomikosProperties0.outputDir = "{{}={}}";
        atomikosProperties0.setSerialJtaTransactions(true);
        long long26 = atomikosProperties0.getCheckpointInterval();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10000L + "'", long17 == 10000L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
    }

    @Test
    public void test07740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07740");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.retryInterval = (short) 100;
        recovery0.forgetOrphanedLogEntriesDelay = 'a';
        long long5 = recovery0.retryInterval;
        recovery0.forgetOrphanedLogEntriesDelay = 0L;
        long long8 = recovery0.getForgetOrphanedLogEntriesDelay();
        long long9 = recovery0.getForgetOrphanedLogEntriesDelay();
        recovery0.retryInterval = 0L;
        long long12 = recovery0.retryInterval;
        int int13 = recovery0.maxRetries;
        recovery0.maxRetries = (short) 100;
        recovery0.forgetOrphanedLogEntriesDelay = '4';
        recovery0.delay = (-1L);
        recovery0.setMaxRetries((int) (byte) 10);
        long long22 = recovery0.getForgetOrphanedLogEntriesDelay();
        long long23 = recovery0.forgetOrphanedLogEntriesDelay;
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 100L + "'", long5 == 100L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 52L + "'", long22 == 52L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 52L + "'", long23 == 52L);
    }

    @Test
    public void test07741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07741");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileLimit = (byte) 10;
        long long7 = atomikosProperties0.getMaxTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel8 = null;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel8;
        boolean boolean10 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.setConsoleFileCount((-1));
        java.lang.String str13 = atomikosProperties0.transactionManagerUniqueName;
        boolean boolean14 = atomikosProperties0.forceShutdownOnVmExit;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test07742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07742");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj3 = properties0.setProperty("{}", "{}");
        java.util.Enumeration<java.lang.Object> objEnumeration4 = properties0.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties0.elements();
        java.util.Properties properties6 = new java.util.Properties(properties0);
        java.util.Properties properties7 = new java.util.Properties(properties6);
        java.util.Properties properties8 = new java.util.Properties();
        java.lang.String str9 = properties8.toString();
        java.lang.Object obj11 = properties8.remove((java.lang.Object) (short) 100);
        java.lang.Object obj14 = properties8.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.util.Properties properties15 = new java.util.Properties();
        java.lang.String str16 = properties15.toString();
        java.lang.Object obj18 = properties15.remove((java.lang.Object) (short) 100);
        java.lang.Object obj21 = properties15.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        int int22 = properties15.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery23 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery23.retryInterval = (short) 100;
        recovery23.forgetOrphanedLogEntriesDelay = 'a';
        long long28 = recovery23.retryInterval;
        recovery23.setForgetOrphanedLogEntriesDelay((long) 0);
        java.lang.Object obj31 = properties8.replace((java.lang.Object) int22, (java.lang.Object) recovery23);
        recovery23.forgetOrphanedLogEntriesDelay = (byte) 0;
        long long34 = recovery23.retryInterval;
        long long35 = recovery23.delay;
        long long36 = recovery23.getDelay();
        long long37 = recovery23.getForgetOrphanedLogEntriesDelay();
        java.lang.Object obj38 = properties7.get((java.lang.Object) long37);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties39 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties40 = atomikosProperties39.asProperties();
        atomikosProperties39.service = "{-1.0=100}";
        long long43 = atomikosProperties39.getDefaultJtaTimeout();
        atomikosProperties39.setThreadedTwoPhaseCommit(true);
        boolean boolean46 = atomikosProperties39.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery47 = atomikosProperties39.recovery;
        atomikosProperties39.setLogBaseDir("");
        long long50 = atomikosProperties39.maxTimeout;
        boolean boolean51 = atomikosProperties39.forceShutdownOnVmExit;
        atomikosProperties39.enableLogging = false;
        boolean boolean54 = properties7.equals((java.lang.Object) atomikosProperties39);
        atomikosProperties39.setEnableLogging(false);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNotNull(objEnumeration4);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{}" + "'", str9, "{}");
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{}" + "'", str16, "{}");
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 100L + "'", long28 == 100L);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 100L + "'", long34 == 100L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 10000L + "'", long35 == 10000L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 10000L + "'", long36 == 10000L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertNotNull(properties40);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 10000L + "'", long43 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(recovery47);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 300000L + "'", long50 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test07743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07743");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties12 = new java.util.Properties();
        java.lang.String str13 = properties12.toString();
        java.lang.Object obj15 = properties12.remove((java.lang.Object) (short) 100);
        java.lang.Object obj18 = properties12.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj19 = properties12.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration20 = properties12.elements();
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties12);
        boolean boolean23 = properties0.equals((java.lang.Object) 1.0f);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties25 = atomikosProperties24.asProperties();
        atomikosProperties24.service = "{-1.0=100}";
        long long28 = atomikosProperties24.getDefaultJtaTimeout();
        long long29 = atomikosProperties24.getMaxTimeout();
        int int30 = atomikosProperties24.consoleFileCount;
        int int31 = atomikosProperties24.getMaxActives();
        boolean boolean32 = atomikosProperties24.forceShutdownOnVmExit;
        java.lang.String str33 = atomikosProperties24.getTransactionManagerUniqueName();
        boolean boolean34 = properties0.containsValue((java.lang.Object) atomikosProperties24);
        java.util.Collection<java.lang.Object> objCollection35 = properties0.values();
        java.lang.String str36 = properties0.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties38 = atomikosProperties37.asProperties();
        atomikosProperties37.service = "{-1.0=100}";
        java.lang.String str41 = atomikosProperties37.getLogBaseName();
        long long42 = atomikosProperties37.defaultJtaTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel43 = null;
        atomikosProperties37.setConsoleLogLevel(atomikosLoggingLevel43);
        atomikosProperties37.threadedTwoPhaseCommit = false;
        atomikosProperties37.allowSubTransactions = false;
        java.lang.String str49 = atomikosProperties37.getConsoleFileName();
        java.util.Properties properties50 = atomikosProperties37.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties51 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties52 = atomikosProperties51.asProperties();
        atomikosProperties51.service = "{-1.0=100}";
        java.lang.String str55 = atomikosProperties51.getTransactionManagerUniqueName();
        atomikosProperties51.consoleFileLimit = (byte) 10;
        java.lang.String str58 = atomikosProperties51.getTransactionManagerUniqueName();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel59 = atomikosProperties51.consoleLogLevel;
        java.lang.Object obj60 = properties0.put((java.lang.Object) properties50, (java.lang.Object) atomikosProperties51);
        java.lang.String str61 = atomikosProperties51.getLogBaseDir();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{}" + "'", str13, "{}");
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 10000L + "'", long28 == 10000L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 300000L + "'", long29 == 300000L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 50 + "'", int31 == 50);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(objCollection35);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "{1.0=-1, -1.0=100}" + "'", str36, "{1.0=-1, -1.0=100}");
        org.junit.Assert.assertNotNull(properties38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "tmlog" + "'", str41, "tmlog");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 10000L + "'", long42 == 10000L);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "tm.out" + "'", str49, "tm.out");
        org.junit.Assert.assertNotNull(properties50);
        org.junit.Assert.assertNotNull(properties52);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel59 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel59.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertNull(str61);
    }

    @Test
    public void test07744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07744");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.remove((java.lang.Object) (-1.0d));
        boolean boolean3 = properties0.isEmpty();
        java.util.Collection<java.lang.Object> objCollection4 = properties0.values();
        java.util.Properties properties5 = new java.util.Properties(properties0);
        java.util.Properties properties6 = new java.util.Properties();
        java.lang.String str7 = properties6.toString();
        java.lang.Object obj9 = properties6.remove((java.lang.Object) (short) 100);
        java.lang.Object obj12 = properties6.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean14 = properties6.containsKey((java.lang.Object) 0L);
        java.lang.Object obj17 = properties6.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj20 = properties6.setProperty("", "{-1.0=100}");
        java.lang.Object obj21 = properties6.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery22 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery22.retryInterval = (short) 100;
        recovery22.forgetOrphanedLogEntriesDelay = 'a';
        boolean boolean27 = properties6.equals((java.lang.Object) 'a');
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery28 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long29 = recovery28.getRetryInterval();
        long long30 = recovery28.getDelay();
        long long31 = recovery28.getDelay();
        recovery28.retryInterval = 100L;
        boolean boolean34 = properties6.contains((java.lang.Object) recovery28);
        recovery28.setMaxRetries((int) (byte) 10);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties38 = atomikosProperties37.asProperties();
        atomikosProperties37.service = "{-1.0=100}";
        long long41 = atomikosProperties37.getDefaultJtaTimeout();
        atomikosProperties37.serialJtaTransactions = true;
        atomikosProperties37.maxActives = ' ';
        atomikosProperties37.maxActives = (byte) 10;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery48 = atomikosProperties37.recovery;
        java.lang.Object obj49 = properties0.replace((java.lang.Object) recovery28, (java.lang.Object) atomikosProperties37);
        boolean boolean50 = atomikosProperties37.isThreadedTwoPhaseCommit();
        atomikosProperties37.maxTimeout = 20;
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(objCollection4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "{}" + "'", str7, "{}");
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNotNull(obj21);
// flaky:         org.junit.Assert.assertEquals(obj21.toString(), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 10000L + "'", long29 == 10000L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 10000L + "'", long30 == 10000L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 10000L + "'", long31 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(properties38);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 10000L + "'", long41 == 10000L);
        org.junit.Assert.assertNotNull(recovery48);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test07745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07745");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        atomikosProperties0.setConsoleFileCount((int) (byte) 100);
        atomikosProperties0.setAllowSubTransactions(true);
        atomikosProperties0.setService("tm.out");
        boolean boolean12 = atomikosProperties0.isForceShutdownOnVmExit();
        boolean boolean13 = atomikosProperties0.isAllowSubTransactions();
        atomikosProperties0.setLogBaseName("");
        boolean boolean16 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.setTransactionManagerUniqueName("{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}");
        java.util.Properties properties19 = new java.util.Properties();
        java.lang.String str20 = properties19.toString();
        java.lang.Object obj22 = properties19.remove((java.lang.Object) (short) 100);
        java.lang.Object obj25 = properties19.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean27 = properties19.containsKey((java.lang.Object) 0L);
        java.lang.Object obj30 = properties19.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj33 = properties19.setProperty("", "{-1.0=100}");
        java.lang.String str34 = properties19.toString();
        java.util.Set<java.lang.String> strSet35 = properties19.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties37 = atomikosProperties36.asProperties();
        atomikosProperties36.service = "{-1.0=100}";
        long long40 = atomikosProperties36.getDefaultJtaTimeout();
        atomikosProperties36.enableLogging = false;
        atomikosProperties36.setMaxTimeout((long) (byte) 0);
        atomikosProperties36.setAllowSubTransactions(true);
        java.util.Properties properties47 = new java.util.Properties();
        java.lang.Object obj49 = properties47.remove((java.lang.Object) (-1.0d));
        boolean boolean50 = properties47.isEmpty();
        java.util.Collection<java.lang.Object> objCollection51 = properties47.values();
        java.lang.Object obj52 = properties19.put((java.lang.Object) true, (java.lang.Object) properties47);
        java.util.Properties properties53 = new java.util.Properties(properties47);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties55 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean56 = atomikosProperties55.isSerialJtaTransactions();
        atomikosProperties55.logBaseName = "{-1.0=100}";
        int int59 = atomikosProperties55.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery60 = atomikosProperties55.getRecovery();
        atomikosProperties55.setConsoleFileCount((int) (byte) 100);
        java.lang.String str63 = atomikosProperties55.logBaseName;
        atomikosProperties55.setCheckpointInterval((long) 18);
        atomikosProperties0.set(properties47, "hi!", (java.lang.Object) atomikosProperties55);
        atomikosProperties55.logBaseName = "{100=100}";
        atomikosProperties55.setLogBaseName("{{1.0=-1}=hi!}");
        atomikosProperties55.logBaseName = "{hi!={}}";
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{}" + "'", str20, "{}");
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNull(obj33);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "{={-1.0=100}, -1.0=100}" + "'", str34, "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertNotNull(properties37);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 10000L + "'", long40 == 10000L);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(objCollection51);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 50 + "'", int59 == 50);
        org.junit.Assert.assertNotNull(recovery60);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "{-1.0=100}" + "'", str63, "{-1.0=100}");
    }

    @Test
    public void test07746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07746");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj3 = properties0.setProperty("{}", "{}");
        java.util.Enumeration<java.lang.Object> objEnumeration4 = properties0.keys();
        java.util.Enumeration<?> wildcardEnumeration5 = properties0.propertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties7 = atomikosProperties6.asProperties();
        atomikosProperties6.service = "{-1.0=100}";
        long long10 = atomikosProperties6.getDefaultJtaTimeout();
        long long11 = atomikosProperties6.getMaxTimeout();
        atomikosProperties6.threadedTwoPhaseCommit = true;
        long long14 = atomikosProperties6.checkpointInterval;
        boolean boolean15 = atomikosProperties6.allowSubTransactions;
        boolean boolean16 = properties0.equals((java.lang.Object) boolean15);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties18 = atomikosProperties17.asProperties();
        atomikosProperties17.service = "{-1.0=100}";
        java.lang.String str21 = atomikosProperties17.getTransactionManagerUniqueName();
        atomikosProperties17.consoleFileName = "hi!";
        atomikosProperties17.service = "tm.out";
        atomikosProperties17.logBaseName = "tm.out";
        atomikosProperties17.setThreadedTwoPhaseCommit(true);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel30 = atomikosProperties17.consoleLogLevel;
        atomikosProperties17.service = "tm.out";
        boolean boolean33 = atomikosProperties17.enableLogging;
        boolean boolean34 = properties0.contains((java.lang.Object) atomikosProperties17);
        int int35 = properties0.size();
        java.lang.Object obj36 = properties0.clone();
        java.util.Properties properties37 = new java.util.Properties(properties0);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNotNull(objEnumeration4);
        org.junit.Assert.assertNotNull(wildcardEnumeration5);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 300000L + "'", long11 == 300000L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 500L + "'", long14 == 500L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel30 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel30.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "{{}={}}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "{{}={}}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "{{}={}}");
    }

    @Test
    public void test07747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07747");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setEnableLogging(true);
        atomikosProperties0.consoleFileCount = 0;
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        java.util.Collection<java.lang.Object> objCollection6 = properties5.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet7 = properties5.entrySet();
        java.lang.Object obj10 = properties5.setProperty("{100=100}", "{tmlog=hi!, com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}");
        java.lang.String str13 = properties5.getProperty("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=true, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=35, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=10, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={-1.0=100}, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}", "{{1.0=-1, -1.0=100}={1.0=-1}, 1.0=-1}");
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertNotNull(objCollection6);
        org.junit.Assert.assertNotNull(objEntrySet7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{{1.0=-1, -1.0=100}={1.0=-1}, 1.0=-1}" + "'", str13, "{{1.0=-1, -1.0=100}={1.0=-1}, 1.0=-1}");
    }

    @Test
    public void test07748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07748");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isThreadedTwoPhaseCommit();
        java.lang.String str2 = atomikosProperties0.logBaseDir;
        boolean boolean3 = atomikosProperties0.isAllowSubTransactions();
        boolean boolean4 = atomikosProperties0.isAllowSubTransactions();
        java.lang.String str5 = atomikosProperties0.getOutputDir();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test07749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07749");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        long long7 = atomikosProperties0.getDefaultJtaTimeout();
        long long8 = atomikosProperties0.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery9 = atomikosProperties0.getRecovery();
        long long10 = recovery9.delay;
        recovery9.maxRetries = (-1);
        recovery9.delay = (short) 1;
        recovery9.forgetOrphanedLogEntriesDelay = (byte) -1;
        long long17 = recovery9.getRetryInterval();
        long long18 = recovery9.getRetryInterval();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(recovery9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10000L + "'", long17 == 10000L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10000L + "'", long18 == 10000L);
    }

    @Test
    public void test07750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07750");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.consoleFileLimit = '#';
        atomikosProperties0.setMaxTimeout((long) 100);
        boolean boolean9 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.setMaxActives(0);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test07751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07751");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        boolean boolean2 = properties0.isEmpty();
        boolean boolean3 = properties0.isEmpty();
        java.lang.String str5 = properties0.getProperty("{-1.0=100}");
        java.util.Set<java.lang.String> strSet6 = properties0.stringPropertyNames();
        java.util.Properties properties7 = new java.util.Properties();
        java.lang.String str8 = properties7.toString();
        java.lang.Object obj10 = properties7.remove((java.lang.Object) (short) 100);
        java.lang.Object obj13 = properties7.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean15 = properties7.containsKey((java.lang.Object) 0L);
        java.lang.Object obj18 = properties7.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj21 = properties7.setProperty("", "{-1.0=100}");
        java.lang.Object obj22 = properties7.clone();
        java.util.Collection<java.lang.Object> objCollection23 = properties7.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet24 = properties7.entrySet();
        java.lang.String str26 = properties7.getProperty("{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}");
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet27 = properties7.entrySet();
        java.lang.String str29 = properties7.getProperty("{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean31 = atomikosProperties30.isSerialJtaTransactions();
        atomikosProperties30.logBaseName = "{-1.0=100}";
        int int34 = atomikosProperties30.maxActives;
        int int35 = atomikosProperties30.getConsoleFileCount();
        atomikosProperties30.setDefaultJtaTimeout((long) ' ');
        int int38 = atomikosProperties30.getMaxActives();
        boolean boolean39 = properties7.containsValue((java.lang.Object) atomikosProperties30);
        boolean boolean40 = properties0.contains((java.lang.Object) properties7);
        java.io.OutputStream outputStream41 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties7.storeToXML(outputStream41, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=10, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={1.0=-1}, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}", "{0={100=100}, {}={}}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{}" + "'", str8, "{}");
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNotNull(obj22);
// flaky:         org.junit.Assert.assertEquals(obj22.toString(), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNotNull(objCollection23);
        org.junit.Assert.assertNotNull(objEntrySet24);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(objEntrySet27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 50 + "'", int34 == 50);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 50 + "'", int38 == 50);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test07752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07752");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        boolean boolean7 = atomikosProperties0.isAllowSubTransactions();
        boolean boolean8 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.allowSubTransactions = false;
        atomikosProperties0.threadedTwoPhaseCommit = true;
        atomikosProperties0.setLogBaseName("tm.out");
        atomikosProperties0.setConsoleFileLimit((int) ' ');
        boolean boolean17 = atomikosProperties0.isAllowSubTransactions();
        atomikosProperties0.logBaseDir = "{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}";
        java.lang.String str20 = atomikosProperties0.getLogBaseName();
        java.lang.String str21 = atomikosProperties0.logBaseDir;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "tm.out" + "'", str20, "tm.out");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}" + "'", str21, "{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}");
    }

    @Test
    public void test07753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07753");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        boolean boolean7 = atomikosProperties0.isAllowSubTransactions();
        boolean boolean8 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.allowSubTransactions = false;
        atomikosProperties0.threadedTwoPhaseCommit = true;
        atomikosProperties0.setLogBaseName("tm.out");
        long long15 = atomikosProperties0.defaultJtaTimeout;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties17 = atomikosProperties16.asProperties();
        atomikosProperties16.service = "{-1.0=100}";
        long long20 = atomikosProperties16.getDefaultJtaTimeout();
        atomikosProperties16.setThreadedTwoPhaseCommit(true);
        boolean boolean23 = atomikosProperties16.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery24 = atomikosProperties16.recovery;
        atomikosProperties16.setLogBaseDir("");
        long long27 = atomikosProperties16.maxTimeout;
        atomikosProperties16.setConsoleFileLimit(0);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel30 = atomikosProperties16.getConsoleLogLevel();
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel30);
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        atomikosProperties0.setDefaultJtaTimeout(50L);
        atomikosProperties0.maxTimeout = 0L;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10000L + "'", long15 == 10000L);
        org.junit.Assert.assertNotNull(properties17);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10000L + "'", long20 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(recovery24);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 300000L + "'", long27 == 300000L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel30 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel30.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
    }

    @Test
    public void test07754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07754");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj14 = properties0.setProperty("", "{-1.0=100}");
        boolean boolean15 = properties0.isEmpty();
        java.util.Properties properties16 = new java.util.Properties();
        java.lang.String str17 = properties16.toString();
        java.util.Properties properties18 = new java.util.Properties(properties16);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet19 = properties18.entrySet();
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.Object obj23 = properties21.remove((java.lang.Object) (-1.0d));
        int int24 = properties21.size();
        boolean boolean25 = properties0.replace((java.lang.Object) properties18, (java.lang.Object) 100L, (java.lang.Object) properties21);
        boolean boolean26 = properties0.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery27 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery27.retryInterval = (short) 100;
        recovery27.setForgetOrphanedLogEntriesDelay(50L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties32.setAllowSubTransactions(true);
        atomikosProperties32.maxActives = (short) -1;
        atomikosProperties32.setService("tm.out");
        java.lang.Object obj39 = properties0.replace((java.lang.Object) 50L, (java.lang.Object) "tm.out");
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet40 = properties0.entrySet();
        java.io.OutputStream outputStream41 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.save(outputStream41, "{}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "{}" + "'", str17, "{}");
        org.junit.Assert.assertNotNull(objEntrySet19);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNotNull(objEntrySet40);
    }

    @Test
    public void test07755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07755");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setAllowSubTransactions(true);
        atomikosProperties0.maxActives = (short) -1;
        atomikosProperties0.setCheckpointInterval(100L);
        atomikosProperties0.setMaxTimeout(52L);
        atomikosProperties0.setSerialJtaTransactions(false);
    }

    @Test
    public void test07756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07756");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        boolean boolean2 = properties0.isEmpty();
        java.util.Properties properties3 = new java.util.Properties();
        java.lang.String str4 = properties3.toString();
        java.lang.Object obj6 = properties3.remove((java.lang.Object) (short) 100);
        java.lang.Object obj9 = properties3.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean11 = properties3.containsKey((java.lang.Object) 0L);
        java.lang.Object obj14 = properties3.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties15 = new java.util.Properties();
        java.lang.String str16 = properties15.toString();
        java.lang.Object obj18 = properties15.remove((java.lang.Object) (short) 100);
        java.lang.Object obj21 = properties15.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj22 = properties15.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration23 = properties15.elements();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties15);
        java.lang.Object obj25 = properties15.clone();
        properties15.clear();
        int int27 = properties15.size();
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties15);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties30 = atomikosProperties29.asProperties();
        atomikosProperties29.service = "{-1.0=100}";
        long long33 = atomikosProperties29.getDefaultJtaTimeout();
        atomikosProperties29.serialJtaTransactions = true;
        atomikosProperties29.maxActives = ' ';
        int int38 = atomikosProperties29.getConsoleFileCount();
        long long39 = atomikosProperties29.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties41 = atomikosProperties40.asProperties();
        atomikosProperties40.service = "{-1.0=100}";
        java.lang.String str44 = atomikosProperties40.getTransactionManagerUniqueName();
        boolean boolean45 = atomikosProperties40.isSerialJtaTransactions();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel46 = atomikosProperties40.getConsoleLogLevel();
        atomikosProperties29.setConsoleLogLevel(atomikosLoggingLevel46);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties48 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties48.setAllowSubTransactions(true);
        boolean boolean51 = atomikosProperties48.enableLogging;
        atomikosProperties48.consoleFileLimit = (byte) 100;
        java.util.Properties properties54 = new java.util.Properties();
        java.lang.String str55 = properties54.toString();
        java.util.Properties properties56 = new java.util.Properties(properties54);
        java.util.Properties properties58 = new java.util.Properties();
        java.lang.String str59 = properties58.toString();
        java.lang.Object obj61 = properties58.remove((java.lang.Object) (short) 100);
        java.lang.Object obj64 = properties58.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean66 = properties58.containsKey((java.lang.Object) 0L);
        java.lang.Object obj69 = properties58.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties70 = new java.util.Properties(properties58);
        java.util.Enumeration<java.lang.Object> objEnumeration71 = properties70.elements();
        atomikosProperties48.set(properties56, "{={-1.0=100}, -1.0=100}", (java.lang.Object) properties70);
        atomikosProperties48.setOutputDir("hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery75 = atomikosProperties48.getRecovery();
        long long76 = recovery75.getRetryInterval();
        java.lang.Object obj77 = properties0.replace((java.lang.Object) atomikosProperties29, (java.lang.Object) recovery75);
        java.util.Properties properties78 = new java.util.Properties();
        java.lang.String str79 = properties78.toString();
        boolean boolean80 = properties78.isEmpty();
        java.util.Properties properties81 = new java.util.Properties();
        java.lang.String str82 = properties81.toString();
        java.lang.Object obj84 = properties81.remove((java.lang.Object) (short) 100);
        java.lang.Object obj87 = properties81.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean89 = properties81.containsKey((java.lang.Object) 0L);
        boolean boolean90 = properties78.containsValue((java.lang.Object) 0L);
        java.util.Set<java.lang.String> strSet91 = properties78.stringPropertyNames();
        java.util.Set<java.lang.Object> objSet92 = properties78.keySet();
        boolean boolean93 = properties0.contains((java.lang.Object) properties78);
        java.util.Set<java.lang.String> strSet94 = properties78.stringPropertyNames();
        java.io.PrintWriter printWriter95 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties78.list(printWriter95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{}" + "'", str4, "{}");
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{}" + "'", str16, "{}");
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration23);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "{1.0=-1}");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(properties30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 10000L + "'", long33 == 10000L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 10000L + "'", long39 == 10000L);
        org.junit.Assert.assertNotNull(properties41);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel46 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel46.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "{}" + "'", str55, "{}");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "{}" + "'", str59, "{}");
        org.junit.Assert.assertNull(obj61);
        org.junit.Assert.assertNull(obj64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(obj69);
        org.junit.Assert.assertNotNull(objEnumeration71);
        org.junit.Assert.assertNotNull(recovery75);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 10000L + "'", long76 == 10000L);
        org.junit.Assert.assertNull(obj77);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "{}" + "'", str79, "{}");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "{}" + "'", str82, "{}");
        org.junit.Assert.assertNull(obj84);
        org.junit.Assert.assertNull(obj87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(strSet91);
        org.junit.Assert.assertNotNull(objSet92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(strSet94);
    }

    @Test
    public void test07757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07757");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.remove((java.lang.Object) (-1.0d));
        boolean boolean3 = properties0.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean5 = atomikosProperties4.isSerialJtaTransactions();
        atomikosProperties4.logBaseName = "{-1.0=100}";
        int int8 = atomikosProperties4.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery9 = atomikosProperties4.getRecovery();
        atomikosProperties4.setConsoleFileCount((int) (byte) 100);
        java.lang.String str12 = atomikosProperties4.logBaseName;
        atomikosProperties4.setCheckpointInterval((long) 18);
        long long15 = atomikosProperties4.defaultJtaTimeout;
        java.util.Properties properties16 = atomikosProperties4.asProperties();
        boolean boolean17 = properties0.contains((java.lang.Object) atomikosProperties4);
        atomikosProperties4.setCheckpointInterval((long) 100);
        java.lang.String str20 = atomikosProperties4.outputDir;
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 50 + "'", int8 == 50);
        org.junit.Assert.assertNotNull(recovery9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "{-1.0=100}" + "'", str12, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10000L + "'", long15 == 10000L);
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test07758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07758");
        java.util.Properties properties0 = new java.util.Properties();
        properties0.clear();
        java.lang.String str2 = properties0.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties3 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties4 = atomikosProperties3.asProperties();
        atomikosProperties3.service = "{-1.0=100}";
        long long7 = atomikosProperties3.getDefaultJtaTimeout();
        atomikosProperties3.setThreadedTwoPhaseCommit(true);
        boolean boolean10 = atomikosProperties3.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery11 = atomikosProperties3.recovery;
        long long12 = recovery11.getForgetOrphanedLogEntriesDelay();
        boolean boolean13 = properties0.containsValue((java.lang.Object) long12);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean15 = atomikosProperties14.isSerialJtaTransactions();
        atomikosProperties14.logBaseName = "{-1.0=100}";
        int int18 = atomikosProperties14.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery19 = atomikosProperties14.getRecovery();
        atomikosProperties14.setConsoleFileCount((int) (byte) 100);
        atomikosProperties14.setAllowSubTransactions(true);
        int int24 = atomikosProperties14.getMaxActives();
        atomikosProperties14.setForceShutdownOnVmExit(true);
        java.util.Properties properties27 = new java.util.Properties();
        java.lang.String str28 = properties27.toString();
        java.lang.Object obj30 = properties27.remove((java.lang.Object) (short) 100);
        java.lang.Object obj33 = properties27.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        java.util.Properties properties35 = new java.util.Properties();
        java.lang.String str36 = properties35.toString();
        java.lang.Object obj38 = properties35.remove((java.lang.Object) (short) 100);
        java.lang.Object obj41 = properties35.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj42 = properties35.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration43 = properties35.elements();
        java.lang.Object obj44 = properties27.putIfAbsent((java.lang.Object) 10.0f, (java.lang.Object) objEnumeration43);
        java.util.Properties properties45 = new java.util.Properties();
        java.util.Enumeration<?> wildcardEnumeration46 = properties45.propertyNames();
        java.lang.Object obj47 = properties45.clone();
        java.util.Properties properties48 = new java.util.Properties();
        java.lang.String str49 = properties48.toString();
        boolean boolean50 = properties48.isEmpty();
        java.lang.Object obj53 = properties48.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration54 = properties48.elements();
        java.lang.Object obj55 = properties27.put(obj47, (java.lang.Object) objEnumeration54);
        properties27.clear();
        java.util.Properties properties57 = new java.util.Properties();
        java.util.Properties properties58 = new java.util.Properties();
        java.lang.Object obj60 = properties58.remove((java.lang.Object) (-1.0d));
        int int61 = properties58.size();
        java.util.Enumeration<java.lang.Object> objEnumeration62 = properties58.elements();
        java.util.Properties properties63 = new java.util.Properties();
        properties63.clear();
        java.lang.String str65 = properties63.toString();
        boolean boolean66 = properties27.replace((java.lang.Object) properties57, (java.lang.Object) properties58, (java.lang.Object) str65);
        java.util.Enumeration<?> wildcardEnumeration67 = properties58.propertyNames();
        boolean boolean68 = properties0.remove((java.lang.Object) atomikosProperties14, (java.lang.Object) properties58);
        java.lang.String str70 = properties0.getProperty("{{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}=, ={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{}" + "'", str2, "{}");
        org.junit.Assert.assertNotNull(properties4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(recovery11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 86400000L + "'", long12 == 86400000L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 50 + "'", int18 == 50);
        org.junit.Assert.assertNotNull(recovery19);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 50 + "'", int24 == 50);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "{}" + "'", str28, "{}");
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "{}" + "'", str36, "{}");
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration43);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNotNull(wildcardEnumeration46);
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertEquals(obj47.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj47), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj47), "{}");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "{}" + "'", str49, "{}");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertNotNull(objEnumeration54);
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(objEnumeration62);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "{}" + "'", str65, "{}");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(wildcardEnumeration67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(str70);
    }

    @Test
    public void test07759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07759");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        boolean boolean7 = atomikosProperties0.isAllowSubTransactions();
        boolean boolean8 = atomikosProperties0.isEnableLogging();
        java.lang.String str9 = atomikosProperties0.logBaseDir;
        boolean boolean10 = atomikosProperties0.isAllowSubTransactions();
        boolean boolean11 = atomikosProperties0.forceShutdownOnVmExit;
        int int12 = atomikosProperties0.maxActives;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 50 + "'", int12 == 50);
    }

    @Test
    public void test07760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07760");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj7 = properties0.clone();
        java.util.Set<java.lang.String> strSet8 = properties0.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties10 = atomikosProperties9.asProperties();
        atomikosProperties9.service = "{-1.0=100}";
        java.lang.String str13 = atomikosProperties9.getTransactionManagerUniqueName();
        atomikosProperties9.consoleFileName = "hi!";
        atomikosProperties9.service = "tm.out";
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties18.setAllowSubTransactions(true);
        java.lang.String str21 = atomikosProperties18.transactionManagerUniqueName;
        int int22 = atomikosProperties18.getConsoleFileLimit();
        boolean boolean23 = properties0.remove((java.lang.Object) "tm.out", (java.lang.Object) atomikosProperties18);
        boolean boolean24 = properties0.isEmpty();
        java.util.Properties properties25 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties27 = atomikosProperties26.asProperties();
        atomikosProperties26.service = "{-1.0=100}";
        long long30 = atomikosProperties26.getDefaultJtaTimeout();
        long long31 = atomikosProperties26.getMaxTimeout();
        atomikosProperties26.threadedTwoPhaseCommit = true;
        atomikosProperties26.setSerialJtaTransactions(true);
        atomikosProperties26.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties26.logBaseDir = "{1.0=-1, -1.0=100}";
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery40 = atomikosProperties26.getRecovery();
        java.lang.Object obj41 = properties0.replace((java.lang.Object) properties25, (java.lang.Object) atomikosProperties26);
        java.util.Properties properties42 = new java.util.Properties(properties25);
        java.util.Enumeration<java.lang.Object> objEnumeration43 = properties25.elements();
        boolean boolean44 = properties25.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties45 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean46 = atomikosProperties45.isSerialJtaTransactions();
        atomikosProperties45.logBaseName = "{-1.0=100}";
        int int49 = atomikosProperties45.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery50 = atomikosProperties45.getRecovery();
        recovery50.setMaxRetries((int) (byte) 100);
        long long53 = recovery50.forgetOrphanedLogEntriesDelay;
        recovery50.setForgetOrphanedLogEntriesDelay(5L);
        long long56 = recovery50.forgetOrphanedLogEntriesDelay;
        int int57 = recovery50.getMaxRetries();
        recovery50.maxRetries = (byte) 10;
        recovery50.retryInterval = 50;
        boolean boolean62 = properties25.contains((java.lang.Object) recovery50);
        java.io.OutputStream outputStream63 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties25.save(outputStream63, "{}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{1.0=-1}");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(properties27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 10000L + "'", long30 == 10000L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 300000L + "'", long31 == 300000L);
        org.junit.Assert.assertNotNull(recovery40);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertNotNull(objEnumeration43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 50 + "'", int49 == 50);
        org.junit.Assert.assertNotNull(recovery50);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 86400000L + "'", long53 == 86400000L);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 5L + "'", long56 == 5L);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 100 + "'", int57 == 100);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test07761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07761");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setMaxActives(0);
        atomikosProperties0.maxActives = 'a';
        boolean boolean9 = atomikosProperties0.isThreadedTwoPhaseCommit();
        boolean boolean10 = atomikosProperties0.isForceShutdownOnVmExit();
        boolean boolean11 = atomikosProperties0.allowSubTransactions;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test07762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07762");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        atomikosProperties2.service = "{-1.0=100}";
        java.lang.String str6 = atomikosProperties2.getTransactionManagerUniqueName();
        atomikosProperties2.consoleFileLimit = (byte) 10;
        long long9 = atomikosProperties2.getMaxTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel10 = null;
        atomikosProperties2.consoleLogLevel = atomikosLoggingLevel10;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery12 = atomikosProperties2.recovery;
        atomikosProperties2.consoleFileCount = (short) -1;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean16 = atomikosProperties15.isSerialJtaTransactions();
        atomikosProperties15.logBaseName = "{-1.0=100}";
        int int19 = atomikosProperties15.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery20 = atomikosProperties15.getRecovery();
        atomikosProperties15.setConsoleFileCount((int) (byte) 100);
        java.lang.String str23 = atomikosProperties15.logBaseName;
        atomikosProperties15.setCheckpointInterval((long) 18);
        long long26 = atomikosProperties15.defaultJtaTimeout;
        boolean boolean27 = atomikosProperties15.forceShutdownOnVmExit;
        java.lang.Object obj28 = properties1.put((java.lang.Object) atomikosProperties2, (java.lang.Object) boolean27);
        java.util.Properties properties29 = new java.util.Properties();
        java.lang.Object obj32 = properties29.setProperty("{}", "{}");
        java.util.Enumeration<java.lang.Object> objEnumeration33 = properties29.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration34 = properties29.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties36 = atomikosProperties35.asProperties();
        atomikosProperties35.service = "{-1.0=100}";
        long long39 = atomikosProperties35.getDefaultJtaTimeout();
        long long40 = atomikosProperties35.getMaxTimeout();
        java.lang.String str41 = atomikosProperties35.outputDir;
        atomikosProperties35.consoleFileName = "tm.out";
        int int44 = atomikosProperties35.consoleFileCount;
        java.lang.Object obj45 = properties29.get((java.lang.Object) int44);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties46 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties47 = atomikosProperties46.asProperties();
        atomikosProperties46.service = "{-1.0=100}";
        long long50 = atomikosProperties46.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel51 = null;
        atomikosProperties46.setConsoleLogLevel(atomikosLoggingLevel51);
        atomikosProperties46.setTransactionManagerUniqueName("{-1.0=100}");
        atomikosProperties46.consoleFileCount = 0;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery57 = atomikosProperties46.getRecovery();
        long long58 = recovery57.retryInterval;
        boolean boolean59 = properties1.remove((java.lang.Object) properties29, (java.lang.Object) long58);
        boolean boolean60 = properties29.isEmpty();
        java.io.OutputStream outputStream61 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties29.store(outputStream61, "{{1.0=-1}=hi!}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 300000L + "'", long9 == 300000L);
        org.junit.Assert.assertNotNull(recovery12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 50 + "'", int19 == 50);
        org.junit.Assert.assertNotNull(recovery20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "{-1.0=100}" + "'", str23, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 10000L + "'", long26 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNotNull(objEnumeration33);
        org.junit.Assert.assertNotNull(objEnumeration34);
        org.junit.Assert.assertNotNull(properties36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 10000L + "'", long39 == 10000L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 300000L + "'", long40 == 300000L);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertNotNull(properties47);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 10000L + "'", long50 == 10000L);
        org.junit.Assert.assertNotNull(recovery57);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 10000L + "'", long58 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test07763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07763");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setAllowSubTransactions(true);
        atomikosProperties0.maxActives = (short) -1;
        atomikosProperties0.setService("tm.out");
        int int7 = atomikosProperties0.maxActives;
        long long8 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.transactionManagerUniqueName = "{{-1.0=100}=}";
        long long11 = atomikosProperties0.getDefaultJtaTimeout();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 300000L + "'", long8 == 300000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10000L + "'", long11 == 10000L);
    }

    @Test
    public void test07764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07764");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setTransactionManagerUniqueName("{}");
        atomikosProperties0.consoleFileName = "hi!";
        java.lang.String str9 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setAllowSubTransactions(false);
        atomikosProperties0.setLogBaseDir("{{-1.0=100}=}");
        boolean boolean14 = atomikosProperties0.isAllowSubTransactions();
        java.lang.String str15 = atomikosProperties0.outputDir;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test07765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07765");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        java.lang.String str6 = atomikosProperties0.getOutputDir();
        boolean boolean7 = atomikosProperties0.isForceShutdownOnVmExit();
        boolean boolean8 = atomikosProperties0.enableLogging;
        atomikosProperties0.setLogBaseName("{-1.0=100}");
        boolean boolean11 = atomikosProperties0.isThreadedTwoPhaseCommit();
        atomikosProperties0.maxTimeout = 5L;
        boolean boolean14 = atomikosProperties0.allowSubTransactions;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test07766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07766");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties();
        java.lang.String str2 = properties1.toString();
        java.lang.Object obj4 = properties1.remove((java.lang.Object) (short) 100);
        java.lang.Object obj7 = properties1.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        int int8 = properties1.size();
        java.util.Properties properties9 = new java.util.Properties();
        java.lang.Object obj11 = properties9.remove((java.lang.Object) (-1.0d));
        boolean boolean12 = properties9.isEmpty();
        java.lang.Object obj15 = properties9.setProperty("hi!", "{}");
        boolean boolean16 = properties0.remove((java.lang.Object) int8, (java.lang.Object) properties9);
        java.util.Properties properties17 = new java.util.Properties();
        java.lang.String str18 = properties17.toString();
        java.lang.Object obj20 = properties17.remove((java.lang.Object) (short) 100);
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.String str22 = properties21.toString();
        boolean boolean23 = properties21.isEmpty();
        java.lang.Object obj26 = properties21.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties21.elements();
        boolean boolean28 = properties17.containsKey((java.lang.Object) properties21);
        boolean boolean29 = properties9.contains((java.lang.Object) boolean28);
        java.util.Set<java.lang.String> strSet30 = properties9.stringPropertyNames();
        java.util.Properties properties31 = new java.util.Properties(properties9);
        java.util.Properties properties32 = new java.util.Properties();
        java.lang.String str33 = properties32.toString();
        java.util.Properties properties34 = new java.util.Properties(properties32);
        java.lang.Object obj37 = properties32.setProperty("", "{={-1.0=100}, -1.0=100}");
        java.util.Enumeration<?> wildcardEnumeration38 = properties32.propertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties39 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties40 = atomikosProperties39.asProperties();
        atomikosProperties39.service = "{-1.0=100}";
        long long43 = atomikosProperties39.getDefaultJtaTimeout();
        atomikosProperties39.setThreadedTwoPhaseCommit(true);
        boolean boolean46 = atomikosProperties39.isAllowSubTransactions();
        boolean boolean47 = atomikosProperties39.isEnableLogging();
        atomikosProperties39.allowSubTransactions = false;
        boolean boolean50 = properties32.containsKey((java.lang.Object) atomikosProperties39);
        atomikosProperties39.setConsoleFileCount(10);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties53 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties54 = atomikosProperties53.asProperties();
        atomikosProperties53.service = "{-1.0=100}";
        long long57 = atomikosProperties53.getDefaultJtaTimeout();
        atomikosProperties53.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties53.logBaseName = "hi!";
        boolean boolean62 = atomikosProperties53.isAllowSubTransactions();
        java.lang.String str63 = atomikosProperties53.getConsoleFileName();
        java.lang.Object obj64 = properties9.replace((java.lang.Object) 10, (java.lang.Object) atomikosProperties53);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{}" + "'", str2, "{}");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "{}" + "'", str18, "{}");
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{}" + "'", str22, "{}");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "{}" + "'", str33, "{}");
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNotNull(wildcardEnumeration38);
        org.junit.Assert.assertNotNull(properties40);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 10000L + "'", long43 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(properties54);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 10000L + "'", long57 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "tm.out" + "'", str63, "tm.out");
        org.junit.Assert.assertNull(obj64);
    }

    @Test
    public void test07767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07767");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long1 = recovery0.getRetryInterval();
        long long2 = recovery0.retryInterval;
        int int3 = recovery0.maxRetries;
        recovery0.setRetryInterval((-1L));
        int int6 = recovery0.maxRetries;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 10000L + "'", long1 == 10000L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10000L + "'", long2 == 10000L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 5 + "'", int3 == 5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
    }

    @Test
    public void test07768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07768");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setEnableLogging(true);
        atomikosProperties0.consoleFileCount = 0;
        atomikosProperties0.consoleFileCount = (byte) 0;
        atomikosProperties0.setAllowSubTransactions(true);
        java.lang.String str9 = atomikosProperties0.outputDir;
        long long10 = atomikosProperties0.defaultJtaTimeout;
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
    }

    @Test
    public void test07769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07769");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        atomikosProperties0.setConsoleFileCount((int) (byte) 100);
        atomikosProperties0.setAllowSubTransactions(true);
        atomikosProperties0.setService("tm.out");
        boolean boolean12 = atomikosProperties0.isForceShutdownOnVmExit();
        boolean boolean13 = atomikosProperties0.isAllowSubTransactions();
        atomikosProperties0.setLogBaseName("");
        boolean boolean16 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.setTransactionManagerUniqueName("{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}");
        java.util.Properties properties19 = new java.util.Properties();
        java.lang.String str20 = properties19.toString();
        java.lang.Object obj22 = properties19.remove((java.lang.Object) (short) 100);
        java.lang.Object obj25 = properties19.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean27 = properties19.containsKey((java.lang.Object) 0L);
        java.lang.Object obj30 = properties19.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj33 = properties19.setProperty("", "{-1.0=100}");
        java.lang.String str34 = properties19.toString();
        java.util.Set<java.lang.String> strSet35 = properties19.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties37 = atomikosProperties36.asProperties();
        atomikosProperties36.service = "{-1.0=100}";
        long long40 = atomikosProperties36.getDefaultJtaTimeout();
        atomikosProperties36.enableLogging = false;
        atomikosProperties36.setMaxTimeout((long) (byte) 0);
        atomikosProperties36.setAllowSubTransactions(true);
        java.util.Properties properties47 = new java.util.Properties();
        java.lang.Object obj49 = properties47.remove((java.lang.Object) (-1.0d));
        boolean boolean50 = properties47.isEmpty();
        java.util.Collection<java.lang.Object> objCollection51 = properties47.values();
        java.lang.Object obj52 = properties19.put((java.lang.Object) true, (java.lang.Object) properties47);
        java.util.Properties properties53 = new java.util.Properties(properties47);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties55 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean56 = atomikosProperties55.isSerialJtaTransactions();
        atomikosProperties55.logBaseName = "{-1.0=100}";
        int int59 = atomikosProperties55.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery60 = atomikosProperties55.getRecovery();
        atomikosProperties55.setConsoleFileCount((int) (byte) 100);
        java.lang.String str63 = atomikosProperties55.logBaseName;
        atomikosProperties55.setCheckpointInterval((long) 18);
        atomikosProperties0.set(properties47, "hi!", (java.lang.Object) atomikosProperties55);
        java.util.Enumeration<?> wildcardEnumeration67 = properties47.propertyNames();
        java.lang.String str69 = properties47.getProperty("");
        java.util.Enumeration<?> wildcardEnumeration70 = properties47.propertyNames();
        java.io.Reader reader71 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties47.load(reader71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{}" + "'", str20, "{}");
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNull(obj33);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "{={-1.0=100}, -1.0=100}" + "'", str34, "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertNotNull(properties37);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 10000L + "'", long40 == 10000L);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(objCollection51);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 50 + "'", int59 == 50);
        org.junit.Assert.assertNotNull(recovery60);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "{-1.0=100}" + "'", str63, "{-1.0=100}");
        org.junit.Assert.assertNotNull(wildcardEnumeration67);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(wildcardEnumeration70);
    }

    @Test
    public void test07770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07770");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj7 = properties0.clone();
        java.util.Set<java.lang.String> strSet8 = properties0.stringPropertyNames();
        java.util.Properties properties9 = new java.util.Properties();
        java.lang.String str10 = properties9.toString();
        java.lang.Object obj12 = properties9.remove((java.lang.Object) (short) 100);
        java.lang.Object obj15 = properties9.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean17 = properties9.containsKey((java.lang.Object) 0L);
        java.lang.Object obj20 = properties9.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.String str22 = properties21.toString();
        java.lang.Object obj24 = properties21.remove((java.lang.Object) (short) 100);
        java.lang.Object obj27 = properties21.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj28 = properties21.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration29 = properties21.elements();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties21);
        java.util.Properties properties31 = new java.util.Properties();
        java.lang.String str32 = properties31.toString();
        java.lang.Object obj34 = properties31.remove((java.lang.Object) (short) 100);
        java.lang.Object obj37 = properties31.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean39 = properties31.containsKey((java.lang.Object) 0L);
        java.lang.Object obj42 = properties31.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties43 = new java.util.Properties();
        java.lang.String str44 = properties43.toString();
        java.lang.Object obj46 = properties43.remove((java.lang.Object) (short) 100);
        java.lang.Object obj49 = properties43.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj50 = properties43.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration51 = properties43.elements();
        properties31.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties43);
        java.lang.Object obj53 = properties0.putIfAbsent((java.lang.Object) properties9, (java.lang.Object) properties43);
        java.util.Properties properties54 = new java.util.Properties();
        java.lang.String str55 = properties54.toString();
        java.lang.Object obj57 = properties54.remove((java.lang.Object) (short) 100);
        java.lang.Object obj60 = properties54.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean62 = properties54.containsKey((java.lang.Object) 0L);
        java.lang.Object obj65 = properties54.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj68 = properties54.setProperty("", "{-1.0=100}");
        java.util.Enumeration<java.lang.Object> objEnumeration69 = properties54.keys();
        boolean boolean70 = properties43.contains((java.lang.Object) properties54);
        java.util.Set<java.lang.String> strSet71 = properties54.stringPropertyNames();
        properties54.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery73 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery73.retryInterval = (short) 100;
        recovery73.forgetOrphanedLogEntriesDelay = 'a';
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties78 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties78.setAllowSubTransactions(true);
        atomikosProperties78.maxActives = (short) -1;
        atomikosProperties78.setService("tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties85 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties85.setAllowSubTransactions(true);
        boolean boolean88 = atomikosProperties85.enableLogging;
        boolean boolean89 = atomikosProperties85.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel90 = atomikosProperties85.consoleLogLevel;
        atomikosProperties78.setConsoleLogLevel(atomikosLoggingLevel90);
        atomikosProperties78.setThreadedTwoPhaseCommit(true);
        java.lang.Object obj94 = properties54.put((java.lang.Object) recovery73, (java.lang.Object) atomikosProperties78);
        java.lang.String str95 = atomikosProperties78.outputDir;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel96 = atomikosProperties78.consoleLogLevel;
        long long97 = atomikosProperties78.maxTimeout;
        boolean boolean98 = atomikosProperties78.isForceShutdownOnVmExit();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{1.0=-1}");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "{}" + "'", str10, "{}");
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{}" + "'", str22, "{}");
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "{}" + "'", str32, "{}");
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "{}" + "'", str44, "{}");
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertEquals(obj50.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj50), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj50), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration51);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "{}" + "'", str55, "{}");
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertNull(obj68);
        org.junit.Assert.assertNotNull(objEnumeration69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(strSet71);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel90 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel90.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj94);
        org.junit.Assert.assertNull(str95);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel96 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel96.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + long97 + "' != '" + 300000L + "'", long97 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test07771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07771");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        long long7 = atomikosProperties0.maxTimeout;
        atomikosProperties0.setLogBaseDir("{-1.0=100}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.setAllowSubTransactions(true);
        atomikosProperties10.maxActives = (short) -1;
        atomikosProperties10.setService("tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties17.setAllowSubTransactions(true);
        boolean boolean20 = atomikosProperties17.enableLogging;
        boolean boolean21 = atomikosProperties17.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel22 = atomikosProperties17.consoleLogLevel;
        atomikosProperties10.setConsoleLogLevel(atomikosLoggingLevel22);
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel22;
        atomikosProperties0.setConsoleFileCount((int) (byte) 0);
        atomikosProperties0.setConsoleFileLimit((int) ' ');
        atomikosProperties0.setLogBaseDir("{{1.0=-1}=hi!}");
        atomikosProperties0.setOutputDir("hi!");
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel22 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel22.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
    }

    @Test
    public void test07772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07772");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj14 = properties0.setProperty("", "{-1.0=100}");
        boolean boolean15 = properties0.isEmpty();
        java.util.Properties properties16 = new java.util.Properties();
        java.lang.String str17 = properties16.toString();
        java.util.Properties properties18 = new java.util.Properties(properties16);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet19 = properties18.entrySet();
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.Object obj23 = properties21.remove((java.lang.Object) (-1.0d));
        int int24 = properties21.size();
        boolean boolean25 = properties0.replace((java.lang.Object) properties18, (java.lang.Object) 100L, (java.lang.Object) properties21);
        java.util.Collection<java.lang.Object> objCollection26 = properties0.values();
        java.lang.Object obj27 = properties0.clone();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "{}" + "'", str17, "{}");
        org.junit.Assert.assertNotNull(objEntrySet19);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(objCollection26);
        org.junit.Assert.assertNotNull(obj27);
// flaky:         org.junit.Assert.assertEquals(obj27.toString(), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "{={-1.0=100}, -1.0=100}");
    }

    @Test
    public void test07773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07773");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        long long7 = atomikosProperties0.getDefaultJtaTimeout();
        long long8 = atomikosProperties0.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery9 = atomikosProperties0.getRecovery();
        java.lang.String str10 = atomikosProperties0.outputDir;
        atomikosProperties0.setSerialJtaTransactions(true);
        atomikosProperties0.setOutputDir("{100=100}");
        int int15 = atomikosProperties0.getConsoleFileCount();
        boolean boolean16 = atomikosProperties0.serialJtaTransactions;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(recovery9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test07774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07774");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setEnableLogging(true);
        atomikosProperties0.consoleFileCount = 0;
        int int5 = atomikosProperties0.getMaxActives();
        int int6 = atomikosProperties0.getConsoleFileCount();
        java.lang.String str7 = atomikosProperties0.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties9 = atomikosProperties8.asProperties();
        atomikosProperties8.service = "{-1.0=100}";
        long long12 = atomikosProperties8.getDefaultJtaTimeout();
        atomikosProperties8.setMaxActives(0);
        boolean boolean15 = atomikosProperties8.threadedTwoPhaseCommit;
        boolean boolean16 = atomikosProperties8.allowSubTransactions;
        atomikosProperties8.logBaseDir = "{}";
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean20 = atomikosProperties19.isSerialJtaTransactions();
        atomikosProperties19.logBaseName = "{-1.0=100}";
        int int23 = atomikosProperties19.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery24 = atomikosProperties19.getRecovery();
        atomikosProperties19.setConsoleFileCount((int) (byte) 100);
        atomikosProperties19.setAllowSubTransactions(true);
        atomikosProperties19.setService("tm.out");
        boolean boolean31 = atomikosProperties19.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel32 = atomikosProperties19.getConsoleLogLevel();
        atomikosProperties8.setConsoleLogLevel(atomikosLoggingLevel32);
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel32);
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        java.lang.String str37 = atomikosProperties0.getService();
        atomikosProperties0.setConsoleFileCount(5);
        atomikosProperties0.setOutputDir("{{}={}}");
        java.lang.String str42 = atomikosProperties0.service;
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 50 + "'", int5 == 50);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10000L + "'", long12 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 50 + "'", int23 == 50);
        org.junit.Assert.assertNotNull(recovery24);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel32 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel32.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(str42);
    }

    @Test
    public void test07775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07775");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long1 = recovery0.getRetryInterval();
        long long2 = recovery0.retryInterval;
        long long3 = recovery0.forgetOrphanedLogEntriesDelay;
        long long4 = recovery0.delay;
        long long5 = recovery0.forgetOrphanedLogEntriesDelay;
        long long6 = recovery0.getRetryInterval();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 10000L + "'", long1 == 10000L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10000L + "'", long2 == 10000L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 86400000L + "'", long3 == 86400000L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 86400000L + "'", long5 == 86400000L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
    }

    @Test
    public void test07776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07776");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isThreadedTwoPhaseCommit();
        java.lang.String str2 = atomikosProperties0.logBaseDir;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery3 = atomikosProperties0.recovery;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel4 = atomikosProperties0.getConsoleLogLevel();
        atomikosProperties0.allowSubTransactions = true;
        atomikosProperties0.consoleFileLimit = 100;
        boolean boolean9 = atomikosProperties0.threadedTwoPhaseCommit;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(recovery3);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel4 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel4.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test07777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07777");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setEnableLogging(true);
        atomikosProperties0.consoleFileCount = 0;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties6 = atomikosProperties5.asProperties();
        atomikosProperties5.service = "{-1.0=100}";
        long long9 = atomikosProperties5.getDefaultJtaTimeout();
        boolean boolean10 = atomikosProperties5.enableLogging;
        boolean boolean11 = atomikosProperties5.isForceShutdownOnVmExit();
        atomikosProperties5.consoleFileLimit = (byte) -1;
        java.lang.String str14 = atomikosProperties5.getService();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel15 = atomikosProperties5.consoleLogLevel;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel15;
        int int17 = atomikosProperties0.consoleFileCount;
        org.junit.Assert.assertNotNull(properties6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10000L + "'", long9 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "{-1.0=100}" + "'", str14, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel15 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel15.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test07778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07778");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        boolean boolean7 = atomikosProperties0.isAllowSubTransactions();
        int int8 = atomikosProperties0.getConsoleFileLimit();
        boolean boolean9 = atomikosProperties0.serialJtaTransactions;
        atomikosProperties0.setEnableLogging(false);
        atomikosProperties0.enableLogging = true;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery14 = atomikosProperties0.getRecovery();
        recovery14.setMaxRetries((int) '#');
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(recovery14);
    }

    @Test
    public void test07779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07779");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getLogBaseName();
        long long5 = atomikosProperties0.defaultJtaTimeout;
        long long6 = atomikosProperties0.getMaxTimeout();
        boolean boolean7 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.setService("{-1.0=100}");
        atomikosProperties0.setOutputDir("{}");
        atomikosProperties0.setConsoleFileLimit((int) (byte) 1);
        atomikosProperties0.threadedTwoPhaseCommit = true;
        int int16 = atomikosProperties0.consoleFileLimit;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties18 = atomikosProperties17.asProperties();
        atomikosProperties17.service = "{-1.0=100}";
        long long21 = atomikosProperties17.getDefaultJtaTimeout();
        atomikosProperties17.outputDir = "{={-1.0=100}, -1.0=100}";
        long long24 = atomikosProperties17.getCheckpointInterval();
        boolean boolean25 = atomikosProperties17.isThreadedTwoPhaseCommit();
        java.lang.String str26 = atomikosProperties17.transactionManagerUniqueName;
        boolean boolean27 = atomikosProperties17.isThreadedTwoPhaseCommit();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties29 = atomikosProperties28.asProperties();
        atomikosProperties28.service = "{-1.0=100}";
        long long32 = atomikosProperties28.getDefaultJtaTimeout();
        atomikosProperties28.serialJtaTransactions = true;
        atomikosProperties28.maxActives = ' ';
        int int37 = atomikosProperties28.getConsoleFileCount();
        int int38 = atomikosProperties28.consoleFileLimit;
        java.util.Properties properties39 = atomikosProperties28.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean41 = atomikosProperties40.isSerialJtaTransactions();
        atomikosProperties40.logBaseName = "{-1.0=100}";
        int int44 = atomikosProperties40.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery45 = atomikosProperties40.getRecovery();
        atomikosProperties40.setConsoleFileCount((int) (byte) 100);
        atomikosProperties40.setAllowSubTransactions(true);
        atomikosProperties40.setService("tm.out");
        boolean boolean52 = atomikosProperties40.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel53 = atomikosProperties40.getConsoleLogLevel();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties54 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties54.setAllowSubTransactions(true);
        boolean boolean57 = atomikosProperties54.enableLogging;
        atomikosProperties54.consoleFileLimit = (byte) 100;
        java.util.Properties properties60 = new java.util.Properties();
        java.lang.String str61 = properties60.toString();
        java.util.Properties properties62 = new java.util.Properties(properties60);
        java.util.Properties properties64 = new java.util.Properties();
        java.lang.String str65 = properties64.toString();
        java.lang.Object obj67 = properties64.remove((java.lang.Object) (short) 100);
        java.lang.Object obj70 = properties64.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean72 = properties64.containsKey((java.lang.Object) 0L);
        java.lang.Object obj75 = properties64.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties76 = new java.util.Properties(properties64);
        java.util.Enumeration<java.lang.Object> objEnumeration77 = properties76.elements();
        atomikosProperties54.set(properties62, "{={-1.0=100}, -1.0=100}", (java.lang.Object) properties76);
        atomikosProperties54.allowSubTransactions = false;
        java.lang.Object obj81 = properties39.put((java.lang.Object) atomikosProperties40, (java.lang.Object) false);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel82 = atomikosProperties40.consoleLogLevel;
        atomikosProperties17.consoleLogLevel = atomikosLoggingLevel82;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel82;
        java.lang.String str85 = atomikosProperties0.getService();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tmlog" + "'", str4, "tmlog");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 10000L + "'", long5 == 10000L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 300000L + "'", long6 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10000L + "'", long21 == 10000L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 500L + "'", long24 == 500L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(properties29);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 10000L + "'", long32 == 10000L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(properties39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 50 + "'", int44 == 50);
        org.junit.Assert.assertNotNull(recovery45);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel53 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel53.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "{}" + "'", str61, "{}");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "{}" + "'", str65, "{}");
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertNull(obj70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(obj75);
        org.junit.Assert.assertNotNull(objEnumeration77);
        org.junit.Assert.assertNull(obj81);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel82 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel82.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "{-1.0=100}" + "'", str85, "{-1.0=100}");
    }

    @Test
    public void test07780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07780");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.retryInterval = (short) 100;
        recovery0.delay = (-1L);
        long long5 = recovery0.delay;
        recovery0.delay = (short) 1;
        recovery0.maxRetries = 32;
        long long10 = recovery0.forgetOrphanedLogEntriesDelay;
        recovery0.setRetryInterval((long) (short) 100);
        recovery0.setDelay(0L);
        recovery0.retryInterval = 1;
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 86400000L + "'", long10 == 86400000L);
    }

    @Test
    public void test07781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07781");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.enableLogging = false;
        java.lang.String str7 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileLimit = 5;
        boolean boolean10 = atomikosProperties0.enableLogging;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test07782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07782");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties3 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties4 = atomikosProperties3.asProperties();
        atomikosProperties3.service = "{-1.0=100}";
        java.lang.String str7 = atomikosProperties3.getLogBaseName();
        long long8 = atomikosProperties3.defaultJtaTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel9 = null;
        atomikosProperties3.setConsoleLogLevel(atomikosLoggingLevel9);
        atomikosProperties3.threadedTwoPhaseCommit = false;
        atomikosProperties3.allowSubTransactions = false;
        java.lang.String str15 = atomikosProperties3.getConsoleFileName();
        java.util.Properties properties16 = atomikosProperties3.asProperties();
        atomikosProperties3.setCheckpointInterval(2L);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery19 = atomikosProperties3.recovery;
        java.lang.Object obj20 = properties0.putIfAbsent((java.lang.Object) "{{={-1.0=100}, -1.0=100}=}", (java.lang.Object) recovery19);
        boolean boolean21 = properties0.isEmpty();
        java.io.PrintStream printStream22 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.list(printStream22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "tmlog" + "'", str7, "tmlog");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 10000L + "'", long8 == 10000L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "tm.out" + "'", str15, "tm.out");
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertNotNull(recovery19);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test07783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07783");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileName = "hi!";
        atomikosProperties0.setCheckpointInterval((long) 5);
        atomikosProperties0.setService("");
        java.lang.String str11 = atomikosProperties0.outputDir;
        atomikosProperties0.setForceShutdownOnVmExit(true);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test07784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07784");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getLogBaseName();
        long long5 = atomikosProperties0.defaultJtaTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel6 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel6);
        atomikosProperties0.service = "";
        atomikosProperties0.forceShutdownOnVmExit = true;
        atomikosProperties0.setConsoleFileCount((int) '#');
        atomikosProperties0.checkpointInterval = (short) 1;
        atomikosProperties0.consoleFileCount = 0;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tmlog" + "'", str4, "tmlog");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 10000L + "'", long5 == 10000L);
    }

    @Test
    public void test07785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07785");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        long long7 = atomikosProperties0.getDefaultJtaTimeout();
        long long8 = atomikosProperties0.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery9 = atomikosProperties0.getRecovery();
        java.lang.String str10 = atomikosProperties0.outputDir;
        atomikosProperties0.consoleFileCount = 32;
        atomikosProperties0.consoleFileLimit = (short) -1;
        boolean boolean15 = atomikosProperties0.threadedTwoPhaseCommit;
        java.lang.String str16 = atomikosProperties0.getLogBaseName();
        atomikosProperties0.outputDir = "";
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel19 = atomikosProperties0.consoleLogLevel;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(recovery9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tmlog" + "'", str16, "tmlog");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel19 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel19.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
    }

    @Test
    public void test07786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07786");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.enableLogging;
        long long2 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.enableLogging = false;
        int int5 = atomikosProperties0.getConsoleFileCount();
        java.lang.String str6 = atomikosProperties0.getLogBaseName();
        java.lang.String str7 = atomikosProperties0.getLogBaseDir();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10000L + "'", long2 == 10000L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test07787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07787");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.outputDir = "{={-1.0=100}, -1.0=100}";
        int int7 = atomikosProperties0.getConsoleFileLimit();
        boolean boolean8 = atomikosProperties0.isSerialJtaTransactions();
        long long9 = atomikosProperties0.getDefaultJtaTimeout();
        boolean boolean10 = atomikosProperties0.isSerialJtaTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties12 = atomikosProperties11.asProperties();
        atomikosProperties11.service = "{-1.0=100}";
        long long15 = atomikosProperties11.getDefaultJtaTimeout();
        atomikosProperties11.serialJtaTransactions = true;
        atomikosProperties11.maxActives = ' ';
        int int20 = atomikosProperties11.getConsoleFileCount();
        long long21 = atomikosProperties11.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties23 = atomikosProperties22.asProperties();
        atomikosProperties22.service = "{-1.0=100}";
        java.lang.String str26 = atomikosProperties22.getTransactionManagerUniqueName();
        boolean boolean27 = atomikosProperties22.isSerialJtaTransactions();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel28 = atomikosProperties22.getConsoleLogLevel();
        atomikosProperties11.setConsoleLogLevel(atomikosLoggingLevel28);
        atomikosProperties11.forceShutdownOnVmExit = true;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel32 = atomikosProperties11.getConsoleLogLevel();
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel32);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10000L + "'", long9 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(properties12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10000L + "'", long15 == 10000L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10000L + "'", long21 == 10000L);
        org.junit.Assert.assertNotNull(properties23);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel28 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel28.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel32 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel32.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
    }

    @Test
    public void test07788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07788");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        int int7 = atomikosProperties0.maxActives;
        atomikosProperties0.setConsoleFileName("tmlog");
        java.lang.String str10 = atomikosProperties0.logBaseName;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery11 = atomikosProperties0.getRecovery();
        long long12 = recovery11.getRetryInterval();
        int int13 = recovery11.maxRetries;
        recovery11.setDelay((long) '#');
        int int16 = recovery11.getMaxRetries();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "tmlog" + "'", str10, "tmlog");
        org.junit.Assert.assertNotNull(recovery11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10000L + "'", long12 == 10000L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
    }

    @Test
    public void test07789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07789");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        long long5 = atomikosProperties0.getMaxTimeout();
        int int6 = atomikosProperties0.consoleFileCount;
        long long7 = atomikosProperties0.getCheckpointInterval();
        atomikosProperties0.serialJtaTransactions = true;
        java.lang.String str10 = atomikosProperties0.logBaseName;
        long long11 = atomikosProperties0.checkpointInterval;
        int int12 = atomikosProperties0.getMaxActives();
        atomikosProperties0.serialJtaTransactions = false;
        java.lang.String str15 = atomikosProperties0.outputDir;
        java.lang.String str16 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setEnableLogging(false);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "tmlog" + "'", str10, "tmlog");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 500L + "'", long11 == 500L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 50 + "'", int12 == 50);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test07790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07790");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        int int7 = atomikosProperties0.maxActives;
        atomikosProperties0.setConsoleFileName("tmlog");
        java.lang.String str10 = atomikosProperties0.logBaseName;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery11 = atomikosProperties0.getRecovery();
        atomikosProperties0.setConsoleFileCount((int) (byte) 100);
        atomikosProperties0.setConsoleFileName("{100=100}");
        boolean boolean16 = atomikosProperties0.threadedTwoPhaseCommit;
        java.lang.String str17 = atomikosProperties0.getService();
        atomikosProperties0.logBaseDir = "{100=100}";
        boolean boolean20 = atomikosProperties0.isSerialJtaTransactions();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "tmlog" + "'", str10, "tmlog");
        org.junit.Assert.assertNotNull(recovery11);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "{-1.0=100}" + "'", str17, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test07791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07791");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.remove((java.lang.Object) (-1.0d));
        boolean boolean4 = properties0.contains((java.lang.Object) "{-1.0=100}");
        java.lang.Object obj7 = properties0.setProperty("{={-1.0=100}, -1.0=100}", "");
        int int8 = properties0.size();
        java.lang.String str10 = properties0.getProperty("");
        java.util.Enumeration<?> wildcardEnumeration11 = properties0.propertyNames();
        java.io.InputStream inputStream12 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.loadFromXML(inputStream12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(wildcardEnumeration11);
    }

    @Test
    public void test07792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07792");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        int int7 = atomikosProperties0.maxActives;
        atomikosProperties0.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.getRecovery();
        atomikosProperties0.forceShutdownOnVmExit = false;
        java.lang.String str13 = atomikosProperties0.service;
        atomikosProperties0.allowSubTransactions = false;
        atomikosProperties0.forceShutdownOnVmExit = false;
        boolean boolean18 = atomikosProperties0.serialJtaTransactions;
        atomikosProperties0.maxActives = (short) 1;
        java.lang.String str21 = atomikosProperties0.getOutputDir();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{-1.0=100}" + "'", str13, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test07793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07793");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileName = "hi!";
        atomikosProperties0.setCheckpointInterval((long) 5);
        atomikosProperties0.setConsoleFileCount(0);
        boolean boolean11 = atomikosProperties0.isThreadedTwoPhaseCommit();
        atomikosProperties0.consoleFileLimit = 5;
        atomikosProperties0.maxActives = 18;
        java.lang.String str16 = atomikosProperties0.getOutputDir();
        java.lang.String str17 = atomikosProperties0.getOutputDir();
        int int18 = atomikosProperties0.getMaxActives();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 18 + "'", int18 == 18);
    }

    @Test
    public void test07794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07794");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel7 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel7);
        atomikosProperties0.setLogBaseName("{={-1.0=100}, -1.0=100}");
        atomikosProperties0.setDefaultJtaTimeout(100L);
        boolean boolean13 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.consoleFileLimit = ' ';
        boolean boolean16 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.setService("{com.atomikos.icatch.={}, 100=100}");
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test07795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07795");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj7 = properties0.clone();
        java.util.Set<java.lang.String> strSet8 = properties0.stringPropertyNames();
        java.util.Properties properties9 = new java.util.Properties();
        java.lang.String str10 = properties9.toString();
        java.lang.Object obj12 = properties9.remove((java.lang.Object) (short) 100);
        java.lang.Object obj15 = properties9.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean17 = properties9.containsKey((java.lang.Object) 0L);
        java.lang.Object obj20 = properties9.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.String str22 = properties21.toString();
        java.lang.Object obj24 = properties21.remove((java.lang.Object) (short) 100);
        java.lang.Object obj27 = properties21.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj28 = properties21.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration29 = properties21.elements();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties21);
        java.util.Properties properties31 = new java.util.Properties();
        java.lang.String str32 = properties31.toString();
        java.lang.Object obj34 = properties31.remove((java.lang.Object) (short) 100);
        java.lang.Object obj37 = properties31.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean39 = properties31.containsKey((java.lang.Object) 0L);
        java.lang.Object obj42 = properties31.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties43 = new java.util.Properties();
        java.lang.String str44 = properties43.toString();
        java.lang.Object obj46 = properties43.remove((java.lang.Object) (short) 100);
        java.lang.Object obj49 = properties43.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj50 = properties43.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration51 = properties43.elements();
        properties31.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties43);
        java.lang.Object obj53 = properties0.putIfAbsent((java.lang.Object) properties9, (java.lang.Object) properties43);
        java.util.Properties properties54 = new java.util.Properties();
        java.lang.String str55 = properties54.toString();
        java.lang.Object obj57 = properties54.remove((java.lang.Object) (short) 100);
        java.lang.Object obj60 = properties54.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean62 = properties54.containsKey((java.lang.Object) 0L);
        java.lang.Object obj65 = properties54.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj68 = properties54.setProperty("", "{-1.0=100}");
        java.util.Enumeration<java.lang.Object> objEnumeration69 = properties54.keys();
        boolean boolean70 = properties43.contains((java.lang.Object) properties54);
        java.lang.Object obj73 = properties43.setProperty("{1.0=-1, -1.0=100}", "{com.atomikos.icatch.console_file_name=hi!, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.output_dir=tm.out, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={-1.0=100}, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{1.0=-1}");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "{}" + "'", str10, "{}");
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{}" + "'", str22, "{}");
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "{}" + "'", str32, "{}");
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "{}" + "'", str44, "{}");
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertEquals(obj50.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj50), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj50), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration51);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "{}" + "'", str55, "{}");
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertNull(obj68);
        org.junit.Assert.assertNotNull(objEnumeration69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(obj73);
    }

    @Test
    public void test07796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07796");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileLimit = (byte) 10;
        long long7 = atomikosProperties0.getMaxTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel8 = null;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel8;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.recovery;
        recovery10.setDelay((long) (byte) 10);
        long long13 = recovery10.delay;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10L + "'", long13 == 10L);
    }

    @Test
    public void test07797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07797");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel7 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel7);
        boolean boolean9 = atomikosProperties0.enableLogging;
        int int10 = atomikosProperties0.getConsoleFileLimit();
        atomikosProperties0.serialJtaTransactions = false;
        atomikosProperties0.setLogBaseName("");
        atomikosProperties0.maxActives = '4';
        atomikosProperties0.setLogBaseDir("{100=100}");
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test07798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07798");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        boolean boolean2 = properties0.isEmpty();
        java.lang.Object obj5 = properties0.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Properties properties6 = new java.util.Properties();
        java.lang.Object obj8 = properties6.remove((java.lang.Object) (-1.0d));
        boolean boolean9 = properties6.isEmpty();
        java.lang.Object obj12 = properties6.setProperty("hi!", "{}");
        java.lang.Object obj14 = properties0.getOrDefault((java.lang.Object) "hi!", (java.lang.Object) 100.0d);
        properties0.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean17 = atomikosProperties16.isSerialJtaTransactions();
        atomikosProperties16.logBaseName = "{-1.0=100}";
        int int20 = atomikosProperties16.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery21 = atomikosProperties16.getRecovery();
        atomikosProperties16.setConsoleFileCount((int) (byte) 100);
        atomikosProperties16.setAllowSubTransactions(true);
        int int26 = atomikosProperties16.getMaxActives();
        atomikosProperties16.transactionManagerUniqueName = "{-1.0=100}";
        long long29 = atomikosProperties16.getMaxTimeout();
        java.util.Properties properties30 = atomikosProperties16.asProperties();
        boolean boolean31 = properties0.contains((java.lang.Object) properties30);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + 100.0d + "'", obj14, 100.0d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 50 + "'", int20 == 50);
        org.junit.Assert.assertNotNull(recovery21);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 50 + "'", int26 == 50);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 300000L + "'", long29 == 300000L);
        org.junit.Assert.assertNotNull(properties30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test07799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07799");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.util.Properties properties3 = new java.util.Properties();
        java.lang.String str4 = properties3.toString();
        java.lang.Object obj6 = properties3.remove((java.lang.Object) (short) 100);
        java.lang.Object obj9 = properties3.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean11 = properties3.containsKey((java.lang.Object) 0L);
        java.lang.Object obj14 = properties3.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj17 = properties3.setProperty("", "{-1.0=100}");
        java.util.Enumeration<java.lang.Object> objEnumeration18 = properties3.keys();
        java.util.Properties properties19 = new java.util.Properties();
        java.lang.String str20 = properties19.toString();
        boolean boolean21 = properties19.isEmpty();
        java.lang.Object obj24 = properties19.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration25 = properties19.elements();
        java.lang.Object obj26 = properties2.replace((java.lang.Object) objEnumeration18, (java.lang.Object) properties19);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties2.keys();
        java.util.Properties properties28 = new java.util.Properties();
        java.lang.Object obj31 = properties28.setProperty("{}", "{}");
        java.util.Enumeration<java.lang.Object> objEnumeration32 = properties28.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration33 = properties28.elements();
        java.util.Properties properties34 = new java.util.Properties(properties28);
        java.lang.String str36 = properties28.getProperty("");
        java.util.Set<java.lang.String> strSet37 = properties28.stringPropertyNames();
        java.util.Properties properties38 = new java.util.Properties();
        java.lang.String str39 = properties38.toString();
        java.lang.Object obj41 = properties38.remove((java.lang.Object) (short) 100);
        java.lang.Object obj44 = properties38.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean46 = properties38.containsKey((java.lang.Object) 0L);
        java.lang.String str47 = properties38.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties48 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties49 = atomikosProperties48.asProperties();
        atomikosProperties48.service = "{-1.0=100}";
        long long52 = atomikosProperties48.getDefaultJtaTimeout();
        atomikosProperties48.setMaxActives(0);
        atomikosProperties48.maxActives = 'a';
        boolean boolean57 = atomikosProperties48.isThreadedTwoPhaseCommit();
        boolean boolean58 = atomikosProperties48.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel59 = atomikosProperties48.consoleLogLevel;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties60 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties61 = atomikosProperties60.asProperties();
        atomikosProperties60.service = "{-1.0=100}";
        long long64 = atomikosProperties60.getDefaultJtaTimeout();
        atomikosProperties60.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties60.setMaxActives(100);
        java.lang.String str69 = atomikosProperties60.logBaseDir;
        java.lang.String str70 = atomikosProperties60.outputDir;
        java.lang.Object obj71 = properties38.replace((java.lang.Object) atomikosLoggingLevel59, (java.lang.Object) atomikosProperties60);
        java.lang.Object obj72 = properties2.replace((java.lang.Object) properties28, (java.lang.Object) atomikosProperties60);
        int int73 = properties2.size();
        java.lang.String str75 = properties2.getProperty("{0={100=100}, {}={}}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties76 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties77 = atomikosProperties76.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties78 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties79 = atomikosProperties78.asProperties();
        atomikosProperties78.service = "{-1.0=100}";
        long long82 = atomikosProperties78.getDefaultJtaTimeout();
        atomikosProperties78.consoleFileLimit = '#';
        java.lang.Object obj85 = properties77.get((java.lang.Object) atomikosProperties78);
        boolean boolean86 = atomikosProperties78.isForceShutdownOnVmExit();
        atomikosProperties78.consoleFileName = "";
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel89 = atomikosProperties78.getConsoleLogLevel();
        long long90 = atomikosProperties78.getDefaultJtaTimeout();
        java.lang.Object obj91 = properties2.remove((java.lang.Object) atomikosProperties78);
        int int92 = properties2.size();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{}" + "'", str4, "{}");
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(objEnumeration18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{}" + "'", str20, "{}");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(objEnumeration25);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNotNull(objEnumeration32);
        org.junit.Assert.assertNotNull(objEnumeration33);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "{}" + "'", str39, "{}");
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "{-1.0=100}" + "'", str47, "{-1.0=100}");
        org.junit.Assert.assertNotNull(properties49);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 10000L + "'", long52 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel59 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel59.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(properties61);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 10000L + "'", long64 == 10000L);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "{={-1.0=100}, -1.0=100}" + "'", str70, "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNull(obj71);
        org.junit.Assert.assertNull(obj72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNotNull(properties77);
        org.junit.Assert.assertNotNull(properties79);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 10000L + "'", long82 == 10000L);
        org.junit.Assert.assertNull(obj85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel89 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel89.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 10000L + "'", long90 == 10000L);
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
    }

    @Test
    public void test07800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07800");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.retryInterval = (short) 100;
        recovery0.forgetOrphanedLogEntriesDelay = 'a';
        long long5 = recovery0.retryInterval;
        recovery0.setForgetOrphanedLogEntriesDelay((long) 0);
        int int8 = recovery0.getMaxRetries();
        recovery0.forgetOrphanedLogEntriesDelay = (byte) 100;
        long long11 = recovery0.getForgetOrphanedLogEntriesDelay();
        recovery0.delay = 'a';
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 100L + "'", long5 == 100L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 5 + "'", int8 == 5);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
    }

    @Test
    public void test07801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07801");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setAllowSubTransactions(true);
        java.lang.String str3 = atomikosProperties0.transactionManagerUniqueName;
        int int4 = atomikosProperties0.getConsoleFileLimit();
        java.lang.String str5 = atomikosProperties0.logBaseDir;
        atomikosProperties0.logBaseName = "{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}";
        java.lang.String str8 = atomikosProperties0.logBaseName;
        atomikosProperties0.defaultJtaTimeout = 52;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}" + "'", str8, "{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}");
    }

    @Test
    public void test07802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07802");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties0.setMaxActives(100);
        boolean boolean9 = atomikosProperties0.enableLogging;
        atomikosProperties0.logBaseName = "hi!";
        int int12 = atomikosProperties0.getConsoleFileLimit();
        java.lang.String str13 = atomikosProperties0.getLogBaseName();
        boolean boolean14 = atomikosProperties0.isThreadedTwoPhaseCommit();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test07803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07803");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setEnableLogging(true);
        atomikosProperties0.consoleFileCount = 0;
        int int5 = atomikosProperties0.getMaxActives();
        java.lang.String str6 = atomikosProperties0.getLogBaseDir();
        java.lang.String str7 = atomikosProperties0.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery8 = atomikosProperties0.getRecovery();
        long long9 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.allowSubTransactions = false;
        java.util.Properties properties12 = atomikosProperties0.asProperties();
        boolean boolean13 = atomikosProperties0.forceShutdownOnVmExit;
        java.lang.String str14 = atomikosProperties0.getService();
        java.lang.String str15 = atomikosProperties0.logBaseName;
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 50 + "'", int5 == 50);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(recovery8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10000L + "'", long9 == 10000L);
        org.junit.Assert.assertNotNull(properties12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "tmlog" + "'", str15, "tmlog");
    }

    @Test
    public void test07804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07804");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        atomikosProperties2.service = "{-1.0=100}";
        long long6 = atomikosProperties2.getDefaultJtaTimeout();
        atomikosProperties2.consoleFileLimit = '#';
        java.lang.Object obj9 = properties1.get((java.lang.Object) atomikosProperties2);
        int int10 = atomikosProperties2.consoleFileCount;
        atomikosProperties2.logBaseDir = "{}";
        atomikosProperties2.outputDir = "{={-1.0=100}, -1.0=100}";
        java.lang.String str15 = atomikosProperties2.logBaseName;
        java.lang.String str16 = atomikosProperties2.getConsoleFileName();
        long long17 = atomikosProperties2.maxTimeout;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "tmlog" + "'", str15, "tmlog");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tm.out" + "'", str16, "tm.out");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 300000L + "'", long17 == 300000L);
    }

    @Test
    public void test07805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07805");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj14 = properties0.setProperty("", "{-1.0=100}");
        java.lang.Object obj15 = properties0.clone();
        java.util.Properties properties16 = new java.util.Properties();
        java.lang.Object obj19 = properties16.setProperty("{}", "{}");
        java.util.Enumeration<java.lang.Object> objEnumeration20 = properties16.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration21 = properties16.elements();
        java.util.Properties properties22 = new java.util.Properties(properties16);
        java.util.Properties properties23 = new java.util.Properties(properties22);
        java.util.Properties properties24 = new java.util.Properties(properties22);
        java.util.Properties properties25 = new java.util.Properties();
        java.lang.String str26 = properties25.toString();
        java.lang.Object obj28 = properties25.remove((java.lang.Object) (short) 100);
        java.lang.Object obj31 = properties25.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean33 = properties25.containsKey((java.lang.Object) 0L);
        java.lang.Object obj36 = properties25.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj39 = properties25.setProperty("", "{-1.0=100}");
        boolean boolean40 = properties25.isEmpty();
        java.util.Properties properties41 = new java.util.Properties();
        java.lang.String str42 = properties41.toString();
        java.util.Properties properties43 = new java.util.Properties(properties41);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet44 = properties43.entrySet();
        java.util.Properties properties46 = new java.util.Properties();
        java.lang.Object obj48 = properties46.remove((java.lang.Object) (-1.0d));
        int int49 = properties46.size();
        boolean boolean50 = properties25.replace((java.lang.Object) properties43, (java.lang.Object) 100L, (java.lang.Object) properties46);
        java.util.Collection<java.lang.Object> objCollection51 = properties25.values();
        boolean boolean52 = properties22.containsKey((java.lang.Object) properties25);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties25);
        java.util.Properties properties54 = new java.util.Properties(properties25);
        boolean boolean55 = properties25.isEmpty();
        java.lang.String str57 = properties25.getProperty("{com.atomikos.icatch.={}, 100=100}");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(obj15);
// flaky:         org.junit.Assert.assertEquals(obj15.toString(), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNotNull(objEnumeration20);
        org.junit.Assert.assertNotNull(objEnumeration21);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "{}" + "'", str26, "{}");
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "{}" + "'", str42, "{}");
        org.junit.Assert.assertNotNull(objEntrySet44);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(objCollection51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(str57);
    }

    @Test
    public void test07806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07806");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel7 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel7);
        boolean boolean9 = atomikosProperties0.enableLogging;
        int int10 = atomikosProperties0.getConsoleFileLimit();
        int int11 = atomikosProperties0.consoleFileLimit;
        int int12 = atomikosProperties0.getConsoleFileCount();
        boolean boolean13 = atomikosProperties0.isForceShutdownOnVmExit();
        int int14 = atomikosProperties0.consoleFileLimit;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
    }

    @Test
    public void test07807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07807");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        long long5 = atomikosProperties0.getMaxTimeout();
        java.lang.String str6 = atomikosProperties0.outputDir;
        atomikosProperties0.consoleFileName = "tm.out";
        int int9 = atomikosProperties0.consoleFileCount;
        long long10 = atomikosProperties0.maxTimeout;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 300000L + "'", long10 == 300000L);
    }

    @Test
    public void test07808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07808");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj7 = properties0.clone();
        java.lang.String str9 = properties0.getProperty("{}");
        java.lang.Object obj12 = properties0.put((java.lang.Object) 86400000L, (java.lang.Object) "{-1.0=100}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties14 = atomikosProperties13.asProperties();
        atomikosProperties13.service = "{-1.0=100}";
        java.lang.String str17 = atomikosProperties13.getTransactionManagerUniqueName();
        atomikosProperties13.consoleFileLimit = (byte) 10;
        long long20 = atomikosProperties13.getMaxTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel21 = null;
        atomikosProperties13.consoleLogLevel = atomikosLoggingLevel21;
        atomikosProperties13.setService("");
        boolean boolean25 = properties0.contains((java.lang.Object) atomikosProperties13);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties26.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties26.setService("tm.out");
        int int31 = atomikosProperties26.consoleFileLimit;
        long long32 = atomikosProperties26.getCheckpointInterval();
        boolean boolean33 = properties0.contains((java.lang.Object) atomikosProperties26);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{1.0=-1}");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 300000L + "'", long20 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 500L + "'", long32 == 500L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test07809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07809");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.outputDir = "{={-1.0=100}, -1.0=100}";
        long long7 = atomikosProperties0.getCheckpointInterval();
        atomikosProperties0.setConsoleFileCount((int) (byte) 1);
        boolean boolean10 = atomikosProperties0.threadedTwoPhaseCommit;
        atomikosProperties0.consoleFileName = "hi!";
        boolean boolean13 = atomikosProperties0.serialJtaTransactions;
        atomikosProperties0.consoleFileName = "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, false={100=100}, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}";
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test07810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07810");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties12 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration13 = properties0.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties15 = atomikosProperties14.asProperties();
        atomikosProperties14.service = "{-1.0=100}";
        long long18 = atomikosProperties14.getDefaultJtaTimeout();
        atomikosProperties14.setThreadedTwoPhaseCommit(true);
        boolean boolean21 = atomikosProperties14.isAllowSubTransactions();
        int int22 = atomikosProperties14.getConsoleFileLimit();
        boolean boolean23 = atomikosProperties14.forceShutdownOnVmExit;
        long long24 = atomikosProperties14.getDefaultJtaTimeout();
        java.util.Properties properties25 = new java.util.Properties();
        java.lang.Object obj27 = properties25.remove((java.lang.Object) (-1.0d));
        boolean boolean28 = properties25.isEmpty();
        int int29 = properties25.size();
        properties25.clear();
        java.lang.Object obj31 = properties0.replace((java.lang.Object) long24, (java.lang.Object) properties25);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNotNull(objEnumeration13);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10000L + "'", long18 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 10000L + "'", long24 == 10000L);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNull(obj31);
    }

    @Test
    public void test07811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07811");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setEnableLogging(true);
        atomikosProperties0.consoleFileCount = 0;
        atomikosProperties0.setSerialJtaTransactions(false);
        atomikosProperties0.consoleFileCount = (short) 1;
        java.lang.String str9 = atomikosProperties0.outputDir;
        atomikosProperties0.setAllowSubTransactions(false);
        atomikosProperties0.setThreadedTwoPhaseCommit(false);
        atomikosProperties0.setMaxActives((int) (byte) 1);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test07812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07812");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNotNull(objEnumeration2);
    }

    @Test
    public void test07813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07813");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        int int7 = atomikosProperties0.maxActives;
        atomikosProperties0.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.getRecovery();
        atomikosProperties0.forceShutdownOnVmExit = false;
        java.util.Properties properties13 = atomikosProperties0.asProperties();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet14 = properties13.entrySet();
        java.lang.String str16 = properties13.getProperty("");
        java.util.Properties properties17 = new java.util.Properties();
        java.lang.Object obj19 = properties17.remove((java.lang.Object) (-1.0d));
        boolean boolean20 = properties17.isEmpty();
        int int21 = properties17.size();
        java.lang.String str23 = properties17.getProperty("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties24.setAllowSubTransactions(true);
        boolean boolean27 = atomikosProperties24.enableLogging;
        boolean boolean28 = atomikosProperties24.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel29 = atomikosProperties24.consoleLogLevel;
        boolean boolean30 = properties17.contains((java.lang.Object) atomikosProperties24);
        boolean boolean31 = atomikosProperties24.serialJtaTransactions;
        boolean boolean32 = properties13.containsValue((java.lang.Object) boolean31);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertNotNull(properties13);
        org.junit.Assert.assertNotNull(objEntrySet14);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel29 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel29.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test07814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07814");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties();
        java.lang.String str2 = properties1.toString();
        java.lang.Object obj4 = properties1.remove((java.lang.Object) (short) 100);
        java.lang.Object obj7 = properties1.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        int int8 = properties1.size();
        java.util.Properties properties9 = new java.util.Properties();
        java.lang.Object obj11 = properties9.remove((java.lang.Object) (-1.0d));
        boolean boolean12 = properties9.isEmpty();
        java.lang.Object obj15 = properties9.setProperty("hi!", "{}");
        boolean boolean16 = properties0.remove((java.lang.Object) int8, (java.lang.Object) properties9);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties17.setAllowSubTransactions(true);
        atomikosProperties17.maxActives = (short) -1;
        atomikosProperties17.setService("tm.out");
        boolean boolean24 = properties9.containsValue((java.lang.Object) atomikosProperties17);
        java.util.Set<java.lang.Object> objSet25 = properties9.keySet();
        java.util.Properties properties26 = new java.util.Properties();
        java.lang.String str27 = properties26.toString();
        java.lang.Object obj29 = properties26.remove((java.lang.Object) (short) 100);
        java.lang.Object obj32 = properties26.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean34 = properties26.containsKey((java.lang.Object) 0L);
        java.lang.Object obj37 = properties26.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties38 = new java.util.Properties(properties26);
        java.util.Enumeration<java.lang.Object> objEnumeration39 = properties38.elements();
        java.util.Properties properties40 = new java.util.Properties();
        java.lang.Object obj43 = properties40.setProperty("{}", "{}");
        java.util.Enumeration<java.lang.Object> objEnumeration44 = properties40.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration45 = properties40.elements();
        java.util.Properties properties46 = new java.util.Properties(properties40);
        java.util.Properties properties47 = new java.util.Properties(properties46);
        java.util.Properties properties48 = new java.util.Properties(properties46);
        java.util.Collection<java.lang.Object> objCollection49 = properties46.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties51 = atomikosProperties50.asProperties();
        atomikosProperties50.service = "{-1.0=100}";
        long long54 = atomikosProperties50.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel55 = null;
        atomikosProperties50.setConsoleLogLevel(atomikosLoggingLevel55);
        atomikosProperties50.setTransactionManagerUniqueName("{-1.0=100}");
        int int59 = atomikosProperties50.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties60 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties60.setAllowSubTransactions(true);
        atomikosProperties60.maxActives = (short) -1;
        atomikosProperties60.setService("tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties67 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties67.setAllowSubTransactions(true);
        boolean boolean70 = atomikosProperties67.enableLogging;
        boolean boolean71 = atomikosProperties67.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel72 = atomikosProperties67.consoleLogLevel;
        atomikosProperties60.setConsoleLogLevel(atomikosLoggingLevel72);
        atomikosProperties50.setConsoleLogLevel(atomikosLoggingLevel72);
        java.lang.Object obj75 = properties38.put((java.lang.Object) properties46, (java.lang.Object) atomikosProperties50);
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties46);
        java.lang.String str78 = properties9.getProperty("hi!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{}" + "'", str2, "{}");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(objSet25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "{}" + "'", str27, "{}");
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNotNull(objEnumeration39);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNotNull(objEnumeration44);
        org.junit.Assert.assertNotNull(objEnumeration45);
        org.junit.Assert.assertNotNull(objCollection49);
        org.junit.Assert.assertNotNull(properties51);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 10000L + "'", long54 == 10000L);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 50 + "'", int59 == 50);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel72 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel72.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj75);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "{}" + "'", str78, "{}");
    }

    @Test
    public void test07815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07815");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        java.util.Properties properties7 = new java.util.Properties();
        java.lang.String str8 = properties7.toString();
        java.lang.Object obj10 = properties7.remove((java.lang.Object) (short) 100);
        java.lang.Object obj13 = properties7.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj14 = properties7.clone();
        java.lang.String str16 = properties7.getProperty("{}");
        java.lang.Object obj19 = properties7.put((java.lang.Object) 86400000L, (java.lang.Object) "{-1.0=100}");
        boolean boolean20 = properties0.containsKey((java.lang.Object) properties7);
        java.util.Properties properties21 = new java.util.Properties(properties7);
        java.lang.String str22 = properties21.toString();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{}" + "'", str8, "{}");
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "{1.0=-1}");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{}" + "'", str22, "{}");
    }

    @Test
    public void test07816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07816");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getLogBaseName();
        long long5 = atomikosProperties0.defaultJtaTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel6 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel6);
        atomikosProperties0.setLogBaseDir("");
        atomikosProperties0.setLogBaseDir("{={-1.0=100}, -1.0=100}");
        java.lang.String str12 = atomikosProperties0.getLogBaseName();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tmlog" + "'", str4, "tmlog");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 10000L + "'", long5 == 10000L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "tmlog" + "'", str12, "tmlog");
    }

    @Test
    public void test07817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07817");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        boolean boolean5 = atomikosProperties0.isSerialJtaTransactions();
        int int6 = atomikosProperties0.getConsoleFileLimit();
        boolean boolean7 = atomikosProperties0.allowSubTransactions;
        atomikosProperties0.setConsoleFileLimit(100);
        java.lang.String str10 = atomikosProperties0.getLogBaseName();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "tmlog" + "'", str10, "tmlog");
    }

    @Test
    public void test07818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07818");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileName = "hi!";
        atomikosProperties0.setCheckpointInterval((long) 5);
        atomikosProperties0.setConsoleFileCount(0);
        atomikosProperties0.setService("{-1.0=100}");
        atomikosProperties0.setLogBaseDir("{-1.0=100}");
        long long15 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.maxTimeout = 10;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery18 = atomikosProperties0.recovery;
        recovery18.forgetOrphanedLogEntriesDelay = 97L;
        int int21 = recovery18.getMaxRetries();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10000L + "'", long15 == 10000L);
        org.junit.Assert.assertNotNull(recovery18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 5 + "'", int21 == 5);
    }

    @Test
    public void test07819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07819");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.retryInterval = (short) 100;
        recovery0.forgetOrphanedLogEntriesDelay = 'a';
        long long5 = recovery0.retryInterval;
        recovery0.forgetOrphanedLogEntriesDelay = 0L;
        long long8 = recovery0.getForgetOrphanedLogEntriesDelay();
        long long9 = recovery0.getForgetOrphanedLogEntriesDelay();
        recovery0.retryInterval = 0L;
        long long12 = recovery0.retryInterval;
        int int13 = recovery0.maxRetries;
        recovery0.setMaxRetries((int) 'a');
        long long16 = recovery0.getForgetOrphanedLogEntriesDelay();
        long long17 = recovery0.getRetryInterval();
        long long18 = recovery0.forgetOrphanedLogEntriesDelay;
        recovery0.setMaxRetries((int) (byte) 100);
        long long21 = recovery0.getDelay();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 100L + "'", long5 == 100L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10000L + "'", long21 == 10000L);
    }

    @Test
    public void test07820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07820");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        java.lang.String str6 = atomikosProperties0.getOutputDir();
        boolean boolean7 = atomikosProperties0.isForceShutdownOnVmExit();
        boolean boolean8 = atomikosProperties0.enableLogging;
        atomikosProperties0.setLogBaseName("{-1.0=100}");
        boolean boolean11 = atomikosProperties0.isThreadedTwoPhaseCommit();
        atomikosProperties0.maxTimeout = 5L;
        atomikosProperties0.setMaxTimeout((long) '4');
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test07821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07821");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setAllowSubTransactions(true);
        atomikosProperties0.logBaseName = "{={-1.0=100}, -1.0=100}";
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean6 = atomikosProperties5.isSerialJtaTransactions();
        atomikosProperties5.logBaseName = "{-1.0=100}";
        int int9 = atomikosProperties5.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties5.getRecovery();
        atomikosProperties5.setConsoleFileCount((int) (byte) 100);
        atomikosProperties5.setAllowSubTransactions(true);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean16 = atomikosProperties15.isThreadedTwoPhaseCommit();
        long long17 = atomikosProperties15.getCheckpointInterval();
        atomikosProperties15.setCheckpointInterval((long) 5);
        java.util.Properties properties20 = new java.util.Properties();
        java.lang.String str21 = properties20.toString();
        java.lang.Object obj23 = properties20.remove((java.lang.Object) (short) 100);
        java.lang.Object obj26 = properties20.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean28 = properties20.containsKey((java.lang.Object) 0L);
        java.lang.String str29 = properties20.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties31 = atomikosProperties30.asProperties();
        atomikosProperties30.service = "{-1.0=100}";
        long long34 = atomikosProperties30.getDefaultJtaTimeout();
        atomikosProperties30.setMaxActives(0);
        atomikosProperties30.maxActives = 'a';
        boolean boolean39 = atomikosProperties30.isThreadedTwoPhaseCommit();
        boolean boolean40 = atomikosProperties30.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel41 = atomikosProperties30.consoleLogLevel;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties43 = atomikosProperties42.asProperties();
        atomikosProperties42.service = "{-1.0=100}";
        long long46 = atomikosProperties42.getDefaultJtaTimeout();
        atomikosProperties42.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties42.setMaxActives(100);
        java.lang.String str51 = atomikosProperties42.logBaseDir;
        java.lang.String str52 = atomikosProperties42.outputDir;
        java.lang.Object obj53 = properties20.replace((java.lang.Object) atomikosLoggingLevel41, (java.lang.Object) atomikosProperties42);
        atomikosProperties15.consoleLogLevel = atomikosLoggingLevel41;
        atomikosProperties5.setConsoleLogLevel(atomikosLoggingLevel41);
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel41;
        atomikosProperties0.enableLogging = false;
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 500L + "'", long17 == 500L);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "{}" + "'", str21, "{}");
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "{-1.0=100}" + "'", str29, "{-1.0=100}");
        org.junit.Assert.assertNotNull(properties31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 10000L + "'", long34 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel41 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel41.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(properties43);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 10000L + "'", long46 == 10000L);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "{={-1.0=100}, -1.0=100}" + "'", str52, "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNull(obj53);
    }

    @Test
    public void test07822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07822");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setEnableLogging(true);
        atomikosProperties0.consoleFileCount = 0;
        atomikosProperties0.consoleFileCount = (byte) 0;
        atomikosProperties0.setAllowSubTransactions(true);
        java.lang.String str9 = atomikosProperties0.transactionManagerUniqueName;
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test07823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07823");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        int int7 = atomikosProperties0.maxActives;
        atomikosProperties0.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.getRecovery();
        atomikosProperties0.consoleFileName = "{-1.0=100}";
        atomikosProperties0.setSerialJtaTransactions(false);
        atomikosProperties0.consoleFileName = "{={-1.0=100}, -1.0=100}";
        atomikosProperties0.defaultJtaTimeout = 50;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel19 = atomikosProperties0.getConsoleLogLevel();
        atomikosProperties0.enableLogging = true;
        atomikosProperties0.checkpointInterval = (-1L);
        atomikosProperties0.setMaxActives((int) (byte) -1);
        atomikosProperties0.setConsoleFileCount(3);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertNull(atomikosLoggingLevel19);
    }

    @Test
    public void test07824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07824");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        atomikosProperties0.setConsoleFileCount((int) (byte) 100);
        atomikosProperties0.setAllowSubTransactions(true);
        atomikosProperties0.setService("tm.out");
        int int12 = atomikosProperties0.consoleFileLimit;
        atomikosProperties0.setDefaultJtaTimeout((long) 'a');
        boolean boolean15 = atomikosProperties0.enableLogging;
        atomikosProperties0.outputDir = "{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}";
        atomikosProperties0.setAllowSubTransactions(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test07825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07825");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel7 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel7);
        int int9 = atomikosProperties0.getConsoleFileLimit();
        atomikosProperties0.setMaxTimeout((long) 97);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
    }

    @Test
    public void test07826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07826");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        long long7 = atomikosProperties0.maxTimeout;
        atomikosProperties0.setLogBaseDir("{-1.0=100}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.setAllowSubTransactions(true);
        atomikosProperties10.maxActives = (short) -1;
        atomikosProperties10.setService("tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties17.setAllowSubTransactions(true);
        boolean boolean20 = atomikosProperties17.enableLogging;
        boolean boolean21 = atomikosProperties17.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel22 = atomikosProperties17.consoleLogLevel;
        atomikosProperties10.setConsoleLogLevel(atomikosLoggingLevel22);
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel22;
        atomikosProperties0.setConsoleFileCount((int) (byte) 0);
        java.util.Properties properties27 = atomikosProperties0.asProperties();
        atomikosProperties0.setLogBaseDir("{{}={}}");
        java.lang.String str30 = atomikosProperties0.getOutputDir();
        int int31 = atomikosProperties0.getConsoleFileLimit();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel22 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel22.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(properties27);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
    }

    @Test
    public void test07827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07827");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        java.lang.String str6 = atomikosProperties0.getOutputDir();
        atomikosProperties0.consoleFileCount = (byte) 100;
        java.lang.String str9 = atomikosProperties0.logBaseDir;
        boolean boolean10 = atomikosProperties0.isSerialJtaTransactions();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test07828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07828");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery4 = atomikosProperties0.recovery;
        atomikosProperties0.enableLogging = true;
        java.lang.String str7 = atomikosProperties0.logBaseName;
        atomikosProperties0.setTransactionManagerUniqueName("tmlog");
        atomikosProperties0.setLogBaseDir("{{1.0=-1}=hi!}");
        java.lang.String str12 = atomikosProperties0.logBaseDir;
        int int13 = atomikosProperties0.getMaxActives();
        boolean boolean14 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.setDefaultJtaTimeout(2L);
        boolean boolean17 = atomikosProperties0.forceShutdownOnVmExit;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNotNull(recovery4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "tmlog" + "'", str7, "tmlog");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "{{1.0=-1}=hi!}" + "'", str12, "{{1.0=-1}=hi!}");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 50 + "'", int13 == 50);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test07829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07829");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        boolean boolean2 = properties0.isEmpty();
        java.util.Properties properties3 = new java.util.Properties();
        java.lang.String str4 = properties3.toString();
        java.lang.Object obj6 = properties3.remove((java.lang.Object) (short) 100);
        java.lang.Object obj9 = properties3.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean11 = properties3.containsKey((java.lang.Object) 0L);
        java.lang.Object obj14 = properties3.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties15 = new java.util.Properties();
        java.lang.String str16 = properties15.toString();
        java.lang.Object obj18 = properties15.remove((java.lang.Object) (short) 100);
        java.lang.Object obj21 = properties15.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj22 = properties15.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration23 = properties15.elements();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties15);
        java.lang.Object obj25 = properties15.clone();
        properties15.clear();
        int int27 = properties15.size();
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties15);
        java.util.Enumeration<?> wildcardEnumeration29 = properties0.propertyNames();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet30 = properties0.entrySet();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet31 = properties0.entrySet();
        java.util.Enumeration<java.lang.Object> objEnumeration32 = properties0.elements();
        java.util.Enumeration<?> wildcardEnumeration33 = properties0.propertyNames();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{}" + "'", str4, "{}");
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{}" + "'", str16, "{}");
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration23);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "{1.0=-1}");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(wildcardEnumeration29);
        org.junit.Assert.assertNotNull(objEntrySet30);
        org.junit.Assert.assertNotNull(objEntrySet31);
        org.junit.Assert.assertNotNull(objEnumeration32);
        org.junit.Assert.assertNotNull(wildcardEnumeration33);
    }

    @Test
    public void test07830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07830");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        boolean boolean2 = properties0.isEmpty();
        java.util.Properties properties3 = new java.util.Properties();
        java.lang.String str4 = properties3.toString();
        java.lang.Object obj6 = properties3.remove((java.lang.Object) (short) 100);
        java.lang.Object obj9 = properties3.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean11 = properties3.containsKey((java.lang.Object) 0L);
        boolean boolean12 = properties0.containsValue((java.lang.Object) 0L);
        java.util.Set<java.lang.String> strSet13 = properties0.stringPropertyNames();
        java.util.Set<java.lang.Object> objSet14 = properties0.keySet();
        java.lang.Object obj15 = properties0.clone();
        java.io.OutputStream outputStream16 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.storeToXML(outputStream16, "{100=100}", "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{}" + "'", str4, "{}");
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(objSet14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "{}");
    }

    @Test
    public void test07831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07831");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        atomikosProperties0.setTransactionManagerUniqueName("{-1.0=100}");
        boolean boolean9 = atomikosProperties0.enableLogging;
        java.lang.String str10 = atomikosProperties0.logBaseDir;
        long long11 = atomikosProperties0.maxTimeout;
        java.lang.String str12 = atomikosProperties0.outputDir;
        java.lang.String str13 = atomikosProperties0.getService();
        atomikosProperties0.threadedTwoPhaseCommit = false;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 300000L + "'", long11 == 300000L);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{-1.0=100}" + "'", str13, "{-1.0=100}");
    }

    @Test
    public void test07832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07832");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        boolean boolean7 = atomikosProperties0.isAllowSubTransactions();
        boolean boolean8 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.service = "tm.out";
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        java.lang.String str13 = atomikosProperties0.getService();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tm.out" + "'", str13, "tm.out");
    }

    @Test
    public void test07833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07833");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setAllowSubTransactions(true);
        atomikosProperties0.maxActives = (short) -1;
        atomikosProperties0.setService("tm.out");
        java.lang.String str7 = atomikosProperties0.getService();
        atomikosProperties0.defaultJtaTimeout = 50;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean11 = atomikosProperties10.isThreadedTwoPhaseCommit();
        java.lang.String str12 = atomikosProperties10.logBaseDir;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery13 = atomikosProperties10.recovery;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel14 = atomikosProperties10.getConsoleLogLevel();
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel14);
        java.lang.String str16 = atomikosProperties0.getConsoleFileName();
        boolean boolean17 = atomikosProperties0.isEnableLogging();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "tm.out" + "'", str7, "tm.out");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(recovery13);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel14 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel14.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tm.out" + "'", str16, "tm.out");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test07834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07834");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj7 = properties0.clone();
        java.util.Set<java.lang.String> strSet8 = properties0.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties10 = atomikosProperties9.asProperties();
        atomikosProperties9.service = "{-1.0=100}";
        java.lang.String str13 = atomikosProperties9.getTransactionManagerUniqueName();
        atomikosProperties9.consoleFileName = "hi!";
        atomikosProperties9.service = "tm.out";
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties18.setAllowSubTransactions(true);
        java.lang.String str21 = atomikosProperties18.transactionManagerUniqueName;
        int int22 = atomikosProperties18.getConsoleFileLimit();
        boolean boolean23 = properties0.remove((java.lang.Object) "tm.out", (java.lang.Object) atomikosProperties18);
        boolean boolean24 = properties0.isEmpty();
        java.util.Properties properties25 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties27 = atomikosProperties26.asProperties();
        atomikosProperties26.service = "{-1.0=100}";
        long long30 = atomikosProperties26.getDefaultJtaTimeout();
        long long31 = atomikosProperties26.getMaxTimeout();
        atomikosProperties26.threadedTwoPhaseCommit = true;
        atomikosProperties26.setSerialJtaTransactions(true);
        atomikosProperties26.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties26.logBaseDir = "{1.0=-1, -1.0=100}";
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery40 = atomikosProperties26.getRecovery();
        java.lang.Object obj41 = properties0.replace((java.lang.Object) properties25, (java.lang.Object) atomikosProperties26);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties43 = atomikosProperties42.asProperties();
        atomikosProperties42.service = "{-1.0=100}";
        long long46 = atomikosProperties42.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel47 = null;
        atomikosProperties42.setConsoleLogLevel(atomikosLoggingLevel47);
        int int49 = atomikosProperties42.maxActives;
        atomikosProperties42.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery52 = atomikosProperties42.getRecovery();
        atomikosProperties42.outputDir = "hi!";
        atomikosProperties42.setDefaultJtaTimeout((long) 10);
        boolean boolean57 = atomikosProperties42.isAllowSubTransactions();
        java.util.Properties properties58 = new java.util.Properties();
        java.lang.String str59 = properties58.toString();
        java.lang.Object obj61 = properties58.remove((java.lang.Object) (short) 100);
        java.lang.Object obj64 = properties58.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties65 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties66 = atomikosProperties65.asProperties();
        java.lang.Object obj67 = properties58.remove((java.lang.Object) properties66);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties68 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties69 = atomikosProperties68.asProperties();
        atomikosProperties68.service = "{-1.0=100}";
        long long72 = atomikosProperties68.getDefaultJtaTimeout();
        atomikosProperties68.setThreadedTwoPhaseCommit(true);
        boolean boolean75 = atomikosProperties68.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery76 = atomikosProperties68.recovery;
        atomikosProperties68.setLogBaseDir("");
        long long79 = atomikosProperties68.maxTimeout;
        boolean boolean80 = atomikosProperties68.forceShutdownOnVmExit;
        boolean boolean81 = properties66.containsValue((java.lang.Object) atomikosProperties68);
        java.lang.String str82 = atomikosProperties68.getService();
        atomikosProperties68.allowSubTransactions = true;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery85 = atomikosProperties68.getRecovery();
        java.lang.String str86 = atomikosProperties68.consoleFileName;
        java.lang.Object obj87 = properties0.getOrDefault((java.lang.Object) boolean57, (java.lang.Object) str86);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{1.0=-1}");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(properties27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 10000L + "'", long30 == 10000L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 300000L + "'", long31 == 300000L);
        org.junit.Assert.assertNotNull(recovery40);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertNotNull(properties43);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 10000L + "'", long46 == 10000L);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 50 + "'", int49 == 50);
        org.junit.Assert.assertNotNull(recovery52);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "{}" + "'", str59, "{}");
        org.junit.Assert.assertNull(obj61);
        org.junit.Assert.assertNull(obj64);
        org.junit.Assert.assertNotNull(properties66);
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertNotNull(properties69);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 10000L + "'", long72 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(recovery76);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 300000L + "'", long79 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "{-1.0=100}" + "'", str82, "{-1.0=100}");
        org.junit.Assert.assertNotNull(recovery85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "tm.out" + "'", str86, "tm.out");
        org.junit.Assert.assertEquals("'" + obj87 + "' != '" + "tm.out" + "'", obj87, "tm.out");
    }

    @Test
    public void test07835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07835");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        long long5 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.threadedTwoPhaseCommit = true;
        atomikosProperties0.setConsoleFileName("{}");
        java.util.Properties properties10 = atomikosProperties0.asProperties();
        java.lang.String str11 = atomikosProperties0.consoleFileName;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "{}" + "'", str11, "{}");
    }

    @Test
    public void test07836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07836");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileLimit = (byte) 10;
        java.lang.String str7 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.allowSubTransactions = true;
        atomikosProperties0.forceShutdownOnVmExit = false;
        long long12 = atomikosProperties0.defaultJtaTimeout;
        atomikosProperties0.consoleFileCount = (short) 1;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10000L + "'", long12 == 10000L);
    }

    @Test
    public void test07837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07837");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getLogBaseName();
        long long5 = atomikosProperties0.defaultJtaTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel6 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel6);
        java.lang.String str8 = atomikosProperties0.consoleFileName;
        java.lang.String str9 = atomikosProperties0.getLogBaseName();
        java.lang.String str10 = atomikosProperties0.getOutputDir();
        boolean boolean11 = atomikosProperties0.serialJtaTransactions;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tmlog" + "'", str4, "tmlog");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 10000L + "'", long5 == 10000L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "tm.out" + "'", str8, "tm.out");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tmlog" + "'", str9, "tmlog");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test07838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07838");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.outputDir = "{={-1.0=100}, -1.0=100}";
        long long7 = atomikosProperties0.getCheckpointInterval();
        boolean boolean8 = atomikosProperties0.isThreadedTwoPhaseCommit();
        boolean boolean9 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.enableLogging = true;
        atomikosProperties0.allowSubTransactions = true;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test07839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07839");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setAllowSubTransactions(true);
        boolean boolean3 = atomikosProperties0.enableLogging;
        atomikosProperties0.consoleFileLimit = (byte) 100;
        java.util.Properties properties6 = new java.util.Properties();
        java.lang.String str7 = properties6.toString();
        java.util.Properties properties8 = new java.util.Properties(properties6);
        java.util.Properties properties10 = new java.util.Properties();
        java.lang.String str11 = properties10.toString();
        java.lang.Object obj13 = properties10.remove((java.lang.Object) (short) 100);
        java.lang.Object obj16 = properties10.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean18 = properties10.containsKey((java.lang.Object) 0L);
        java.lang.Object obj21 = properties10.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties22 = new java.util.Properties(properties10);
        java.util.Enumeration<java.lang.Object> objEnumeration23 = properties22.elements();
        atomikosProperties0.set(properties8, "{={-1.0=100}, -1.0=100}", (java.lang.Object) properties22);
        int int25 = properties8.size();
        java.lang.Object obj28 = properties8.setProperty("tmlog", "hi!");
        int int29 = properties8.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean31 = atomikosProperties30.isSerialJtaTransactions();
        atomikosProperties30.logBaseName = "{-1.0=100}";
        int int34 = atomikosProperties30.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery35 = atomikosProperties30.getRecovery();
        atomikosProperties30.setConsoleFileCount((int) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel38 = null;
        atomikosProperties30.consoleLogLevel = atomikosLoggingLevel38;
        atomikosProperties30.logBaseName = "tmlog";
        long long42 = atomikosProperties30.getCheckpointInterval();
        java.lang.Object obj43 = properties8.remove((java.lang.Object) atomikosProperties30);
        java.util.Properties properties44 = new java.util.Properties(properties8);
        java.io.PrintWriter printWriter45 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties8.list(printWriter45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "{}" + "'", str7, "{}");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "{}" + "'", str11, "{}");
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNotNull(objEnumeration23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 50 + "'", int34 == 50);
        org.junit.Assert.assertNotNull(recovery35);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 500L + "'", long42 == 500L);
        org.junit.Assert.assertNull(obj43);
    }

    @Test
    public void test07840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07840");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        atomikosProperties0.setConsoleFileCount((int) (byte) 100);
        atomikosProperties0.setAllowSubTransactions(true);
        atomikosProperties0.setService("tm.out");
        int int12 = atomikosProperties0.consoleFileLimit;
        atomikosProperties0.setDefaultJtaTimeout((long) ' ');
        java.lang.String str15 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setMaxTimeout((long) (byte) -1);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "tm.out" + "'", str15, "tm.out");
    }

    @Test
    public void test07841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07841");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        long long7 = atomikosProperties0.getDefaultJtaTimeout();
        long long8 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties9 = new java.util.Properties();
        java.lang.Object obj11 = properties9.remove((java.lang.Object) (-1.0d));
        boolean boolean12 = properties9.isEmpty();
        java.lang.Object obj15 = properties9.setProperty("hi!", "{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties18 = atomikosProperties17.asProperties();
        atomikosProperties17.service = "{-1.0=100}";
        long long21 = atomikosProperties17.getDefaultJtaTimeout();
        atomikosProperties17.serialJtaTransactions = true;
        atomikosProperties17.maxActives = ' ';
        atomikosProperties0.set(properties9, "", (java.lang.Object) ' ');
        java.util.Properties properties27 = new java.util.Properties(properties9);
        java.util.Properties properties28 = new java.util.Properties();
        java.lang.String str29 = properties28.toString();
        java.lang.Object obj31 = properties28.remove((java.lang.Object) (short) 100);
        java.lang.Object obj34 = properties28.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj35 = properties28.clone();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet36 = properties28.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery37 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery37.retryInterval = (byte) 0;
        int int40 = recovery37.maxRetries;
        recovery37.setForgetOrphanedLogEntriesDelay(86400000L);
        int int43 = recovery37.getMaxRetries();
        long long44 = recovery37.delay;
        java.lang.Object obj45 = properties9.getOrDefault((java.lang.Object) objEntrySet36, (java.lang.Object) recovery37);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10000L + "'", long21 == 10000L);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "{}" + "'", str29, "{}");
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertEquals(obj35.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj35), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj35), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEntrySet36);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 5 + "'", int40 == 5);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 5 + "'", int43 == 5);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 10000L + "'", long44 == 10000L);
        org.junit.Assert.assertNotNull(obj45);
    }

    @Test
    public void test07842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07842");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getLogBaseName();
        atomikosProperties0.setForceShutdownOnVmExit(false);
        int int7 = atomikosProperties0.getConsoleFileCount();
        java.util.Properties properties8 = new java.util.Properties();
        java.lang.String str9 = properties8.toString();
        java.lang.Object obj11 = properties8.remove((java.lang.Object) (short) 100);
        java.lang.Object obj14 = properties8.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties16 = atomikosProperties15.asProperties();
        java.lang.Object obj17 = properties8.remove((java.lang.Object) properties16);
        java.util.Properties properties18 = new java.util.Properties(properties16);
        java.util.Enumeration<?> wildcardEnumeration19 = properties18.propertyNames();
        java.util.Properties properties21 = new java.util.Properties();
        java.util.Properties properties22 = new java.util.Properties();
        java.lang.String str23 = properties22.toString();
        boolean boolean24 = properties22.isEmpty();
        java.util.Properties properties25 = new java.util.Properties();
        java.lang.String str26 = properties25.toString();
        java.lang.Object obj28 = properties25.remove((java.lang.Object) (short) 100);
        java.lang.Object obj31 = properties25.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean33 = properties25.containsKey((java.lang.Object) 0L);
        boolean boolean34 = properties22.containsValue((java.lang.Object) 0L);
        boolean boolean37 = properties21.replace((java.lang.Object) 0L, (java.lang.Object) 0.0f, (java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration38 = properties21.elements();
        java.lang.String str39 = properties21.toString();
        atomikosProperties0.set(properties18, "{100=100}", (java.lang.Object) properties21);
        java.io.OutputStream outputStream41 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties18.save(outputStream41, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=true, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=35, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=10, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={-1.0=100}, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tmlog" + "'", str4, "tmlog");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{}" + "'", str9, "{}");
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(wildcardEnumeration19);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "{}" + "'", str23, "{}");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "{}" + "'", str26, "{}");
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(objEnumeration38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "{}" + "'", str39, "{}");
    }

    @Test
    public void test07843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07843");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties();
        java.lang.String str2 = properties1.toString();
        boolean boolean3 = properties1.isEmpty();
        java.util.Properties properties4 = new java.util.Properties();
        java.lang.String str5 = properties4.toString();
        java.lang.Object obj7 = properties4.remove((java.lang.Object) (short) 100);
        java.lang.Object obj10 = properties4.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean12 = properties4.containsKey((java.lang.Object) 0L);
        boolean boolean13 = properties1.containsValue((java.lang.Object) 0L);
        boolean boolean16 = properties0.replace((java.lang.Object) 0L, (java.lang.Object) 0.0f, (java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration17 = properties0.elements();
        java.util.Set<java.lang.String> strSet18 = properties0.stringPropertyNames();
        java.util.Properties properties19 = new java.util.Properties();
        java.lang.String str20 = properties19.toString();
        java.lang.Object obj22 = properties19.remove((java.lang.Object) (short) 100);
        java.lang.Object obj25 = properties19.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.util.Properties properties26 = new java.util.Properties();
        java.lang.String str27 = properties26.toString();
        java.lang.Object obj29 = properties26.remove((java.lang.Object) (short) 100);
        java.lang.Object obj32 = properties26.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        int int33 = properties26.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery34 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery34.retryInterval = (short) 100;
        recovery34.forgetOrphanedLogEntriesDelay = 'a';
        long long39 = recovery34.retryInterval;
        recovery34.setForgetOrphanedLogEntriesDelay((long) 0);
        java.lang.Object obj42 = properties19.replace((java.lang.Object) int33, (java.lang.Object) recovery34);
        boolean boolean43 = properties0.containsValue((java.lang.Object) properties19);
        java.util.Properties properties44 = new java.util.Properties();
        java.lang.String str45 = properties44.toString();
        java.lang.Object obj47 = properties44.remove((java.lang.Object) (short) 100);
        java.lang.Object obj50 = properties44.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties51 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties51.setEnableLogging(true);
        atomikosProperties51.consoleFileCount = 0;
        atomikosProperties51.setSerialJtaTransactions(false);
        java.lang.String str58 = atomikosProperties51.getOutputDir();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties59 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties60 = atomikosProperties59.asProperties();
        atomikosProperties59.service = "{-1.0=100}";
        long long63 = atomikosProperties59.getDefaultJtaTimeout();
        atomikosProperties59.serialJtaTransactions = true;
        long long66 = atomikosProperties59.getDefaultJtaTimeout();
        long long67 = atomikosProperties59.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery68 = atomikosProperties59.getRecovery();
        recovery68.setRetryInterval((long) (byte) 0);
        java.lang.Object obj71 = properties44.replace((java.lang.Object) atomikosProperties51, (java.lang.Object) (byte) 0);
        int int72 = properties44.size();
        boolean boolean73 = properties19.equals((java.lang.Object) properties44);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties74 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties75 = atomikosProperties74.asProperties();
        java.util.Properties properties76 = new java.util.Properties();
        java.lang.Object obj78 = properties76.remove((java.lang.Object) (-1.0d));
        boolean boolean79 = properties76.isEmpty();
        int int80 = properties76.size();
        java.lang.String str82 = properties76.getProperty("{}");
        java.lang.Object obj83 = properties75.remove((java.lang.Object) properties76);
        java.util.Properties properties84 = new java.util.Properties();
        java.lang.String str85 = properties84.toString();
        java.util.Properties properties86 = new java.util.Properties(properties84);
        properties75.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties84);
        java.lang.Object obj90 = properties84.setProperty("tmlog", "tmlog");
        properties19.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties84);
        java.lang.Object obj94 = properties84.setProperty("{{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}=, ={-1.0=100}, -1.0=100}", "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{}" + "'", str2, "{}");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{}" + "'", str5, "{}");
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objEnumeration17);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{}" + "'", str20, "{}");
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "{}" + "'", str27, "{}");
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 100L + "'", long39 == 100L);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "{}" + "'", str45, "{}");
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(properties60);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 10000L + "'", long63 == 10000L);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 10000L + "'", long66 == 10000L);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 500L + "'", long67 == 500L);
        org.junit.Assert.assertNotNull(recovery68);
        org.junit.Assert.assertNull(obj71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(properties75);
        org.junit.Assert.assertNull(obj78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNull(obj83);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "{}" + "'", str85, "{}");
        org.junit.Assert.assertNull(obj90);
        org.junit.Assert.assertNull(obj94);
    }

    @Test
    public void test07844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07844");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isThreadedTwoPhaseCommit();
        java.lang.String str2 = atomikosProperties0.logBaseDir;
        boolean boolean3 = atomikosProperties0.isAllowSubTransactions();
        java.lang.String str4 = atomikosProperties0.getOutputDir();
        java.util.Properties properties5 = new java.util.Properties();
        java.lang.String str6 = properties5.toString();
        java.lang.Object obj8 = properties5.remove((java.lang.Object) (short) 100);
        java.lang.Object obj11 = properties5.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean13 = properties5.containsKey((java.lang.Object) 0L);
        java.lang.Object obj16 = properties5.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties17 = new java.util.Properties(properties5);
        java.util.Enumeration<java.lang.Object> objEnumeration18 = properties17.elements();
        java.util.Properties properties19 = new java.util.Properties();
        java.lang.Object obj22 = properties19.setProperty("{}", "{}");
        java.util.Enumeration<java.lang.Object> objEnumeration23 = properties19.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration24 = properties19.elements();
        java.util.Properties properties25 = new java.util.Properties(properties19);
        java.util.Properties properties26 = new java.util.Properties(properties25);
        java.util.Properties properties27 = new java.util.Properties(properties25);
        java.util.Collection<java.lang.Object> objCollection28 = properties25.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties30 = atomikosProperties29.asProperties();
        atomikosProperties29.service = "{-1.0=100}";
        long long33 = atomikosProperties29.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel34 = null;
        atomikosProperties29.setConsoleLogLevel(atomikosLoggingLevel34);
        atomikosProperties29.setTransactionManagerUniqueName("{-1.0=100}");
        int int38 = atomikosProperties29.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties39 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties39.setAllowSubTransactions(true);
        atomikosProperties39.maxActives = (short) -1;
        atomikosProperties39.setService("tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties46 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties46.setAllowSubTransactions(true);
        boolean boolean49 = atomikosProperties46.enableLogging;
        boolean boolean50 = atomikosProperties46.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel51 = atomikosProperties46.consoleLogLevel;
        atomikosProperties39.setConsoleLogLevel(atomikosLoggingLevel51);
        atomikosProperties29.setConsoleLogLevel(atomikosLoggingLevel51);
        java.lang.Object obj54 = properties17.put((java.lang.Object) properties25, (java.lang.Object) atomikosProperties29);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties55 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties56 = atomikosProperties55.asProperties();
        atomikosProperties55.service = "{-1.0=100}";
        long long59 = atomikosProperties55.getDefaultJtaTimeout();
        atomikosProperties55.consoleFileLimit = '#';
        int int62 = atomikosProperties55.getConsoleFileCount();
        atomikosProperties55.consoleFileLimit = 5;
        boolean boolean65 = properties17.containsValue((java.lang.Object) atomikosProperties55);
        java.util.Properties properties66 = new java.util.Properties();
        java.lang.Object obj69 = properties66.setProperty("{}", "{}");
        java.util.Enumeration<java.lang.Object> objEnumeration70 = properties66.keys();
        java.util.Enumeration<?> wildcardEnumeration71 = properties66.propertyNames();
        properties17.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties66);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties74 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean75 = atomikosProperties74.isSerialJtaTransactions();
        atomikosProperties74.logBaseName = "{-1.0=100}";
        int int78 = atomikosProperties74.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery79 = atomikosProperties74.getRecovery();
        atomikosProperties74.setConsoleFileCount((int) (byte) 100);
        atomikosProperties74.setAllowSubTransactions(true);
        atomikosProperties74.setService("tm.out");
        java.lang.String str86 = atomikosProperties74.outputDir;
        int int87 = atomikosProperties74.maxActives;
        atomikosProperties0.set(properties66, "{-1.0=100}", (java.lang.Object) int87);
        java.lang.String str89 = atomikosProperties0.getLogBaseDir();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "{}" + "'", str6, "{}");
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(objEnumeration18);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNotNull(objEnumeration23);
        org.junit.Assert.assertNotNull(objEnumeration24);
        org.junit.Assert.assertNotNull(objCollection28);
        org.junit.Assert.assertNotNull(properties30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 10000L + "'", long33 == 10000L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 50 + "'", int38 == 50);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel51 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel51.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertNotNull(properties56);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 10000L + "'", long59 == 10000L);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(obj69);
        org.junit.Assert.assertNotNull(objEnumeration70);
        org.junit.Assert.assertNotNull(wildcardEnumeration71);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 50 + "'", int78 == 50);
        org.junit.Assert.assertNotNull(recovery79);
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 50 + "'", int87 == 50);
        org.junit.Assert.assertNull(str89);
    }

    @Test
    public void test07845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07845");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj7 = properties0.clone();
        java.util.Set<java.lang.String> strSet8 = properties0.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties10 = atomikosProperties9.asProperties();
        atomikosProperties9.service = "{-1.0=100}";
        java.lang.String str13 = atomikosProperties9.getTransactionManagerUniqueName();
        atomikosProperties9.consoleFileName = "hi!";
        atomikosProperties9.service = "tm.out";
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties18.setAllowSubTransactions(true);
        java.lang.String str21 = atomikosProperties18.transactionManagerUniqueName;
        int int22 = atomikosProperties18.getConsoleFileLimit();
        boolean boolean23 = properties0.remove((java.lang.Object) "tm.out", (java.lang.Object) atomikosProperties18);
        atomikosProperties18.setMaxActives((int) (short) 1);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{1.0=-1}");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test07846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07846");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        boolean boolean7 = atomikosProperties0.isAllowSubTransactions();
        boolean boolean8 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.allowSubTransactions = false;
        atomikosProperties0.threadedTwoPhaseCommit = true;
        java.lang.String str13 = atomikosProperties0.getLogBaseDir();
        long long14 = atomikosProperties0.getDefaultJtaTimeout();
        java.lang.String str15 = atomikosProperties0.getTransactionManagerUniqueName();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery16 = atomikosProperties0.recovery;
        long long17 = atomikosProperties0.maxTimeout;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10000L + "'", long14 == 10000L);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(recovery16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 300000L + "'", long17 == 300000L);
    }

    @Test
    public void test07847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07847");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties();
        java.lang.String str2 = properties1.toString();
        boolean boolean3 = properties1.isEmpty();
        java.util.Properties properties4 = new java.util.Properties();
        java.lang.String str5 = properties4.toString();
        java.lang.Object obj7 = properties4.remove((java.lang.Object) (short) 100);
        java.lang.Object obj10 = properties4.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean12 = properties4.containsKey((java.lang.Object) 0L);
        boolean boolean13 = properties1.containsValue((java.lang.Object) 0L);
        boolean boolean16 = properties0.replace((java.lang.Object) 0L, (java.lang.Object) 0.0f, (java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration17 = properties0.elements();
        java.util.Collection<java.lang.Object> objCollection18 = properties0.values();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{}" + "'", str2, "{}");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{}" + "'", str5, "{}");
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objEnumeration17);
        org.junit.Assert.assertNotNull(objCollection18);
    }

    @Test
    public void test07848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07848");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        int int7 = atomikosProperties0.maxActives;
        atomikosProperties0.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.getRecovery();
        atomikosProperties0.consoleFileName = "{-1.0=100}";
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel13 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel13);
        atomikosProperties0.setThreadedTwoPhaseCommit(false);
        java.lang.String str17 = atomikosProperties0.logBaseName;
        boolean boolean18 = atomikosProperties0.allowSubTransactions;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test07849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07849");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        boolean boolean7 = atomikosProperties0.isAllowSubTransactions();
        boolean boolean8 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.allowSubTransactions = false;
        atomikosProperties0.threadedTwoPhaseCommit = true;
        atomikosProperties0.setLogBaseName("tm.out");
        boolean boolean15 = atomikosProperties0.isForceShutdownOnVmExit();
        int int16 = atomikosProperties0.consoleFileCount;
        atomikosProperties0.allowSubTransactions = false;
        boolean boolean19 = atomikosProperties0.isThreadedTwoPhaseCommit();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test07850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07850");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        atomikosProperties0.maxActives = ' ';
        int int9 = atomikosProperties0.getConsoleFileCount();
        int int10 = atomikosProperties0.consoleFileLimit;
        java.util.Properties properties11 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean13 = atomikosProperties12.isSerialJtaTransactions();
        atomikosProperties12.logBaseName = "{-1.0=100}";
        int int16 = atomikosProperties12.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery17 = atomikosProperties12.getRecovery();
        atomikosProperties12.setConsoleFileCount((int) (byte) 100);
        atomikosProperties12.setAllowSubTransactions(true);
        atomikosProperties12.setService("tm.out");
        boolean boolean24 = atomikosProperties12.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel25 = atomikosProperties12.getConsoleLogLevel();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties26.setAllowSubTransactions(true);
        boolean boolean29 = atomikosProperties26.enableLogging;
        atomikosProperties26.consoleFileLimit = (byte) 100;
        java.util.Properties properties32 = new java.util.Properties();
        java.lang.String str33 = properties32.toString();
        java.util.Properties properties34 = new java.util.Properties(properties32);
        java.util.Properties properties36 = new java.util.Properties();
        java.lang.String str37 = properties36.toString();
        java.lang.Object obj39 = properties36.remove((java.lang.Object) (short) 100);
        java.lang.Object obj42 = properties36.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean44 = properties36.containsKey((java.lang.Object) 0L);
        java.lang.Object obj47 = properties36.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties48 = new java.util.Properties(properties36);
        java.util.Enumeration<java.lang.Object> objEnumeration49 = properties48.elements();
        atomikosProperties26.set(properties34, "{={-1.0=100}, -1.0=100}", (java.lang.Object) properties48);
        atomikosProperties26.allowSubTransactions = false;
        java.lang.Object obj53 = properties11.put((java.lang.Object) atomikosProperties12, (java.lang.Object) false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties54 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties55 = atomikosProperties54.asProperties();
        atomikosProperties54.service = "{-1.0=100}";
        long long58 = atomikosProperties54.getDefaultJtaTimeout();
        long long59 = atomikosProperties54.getMaxTimeout();
        int int60 = atomikosProperties54.consoleFileCount;
        atomikosProperties54.setConsoleFileCount(0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties63 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties64 = atomikosProperties63.asProperties();
        atomikosProperties63.service = "{-1.0=100}";
        long long67 = atomikosProperties63.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel68 = null;
        atomikosProperties63.setConsoleLogLevel(atomikosLoggingLevel68);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel70 = null;
        atomikosProperties63.setConsoleLogLevel(atomikosLoggingLevel70);
        atomikosProperties63.setLogBaseName("{={-1.0=100}, -1.0=100}");
        boolean boolean74 = atomikosProperties63.enableLogging;
        java.lang.Object obj75 = properties11.replace((java.lang.Object) atomikosProperties54, (java.lang.Object) atomikosProperties63);
        atomikosProperties63.setTransactionManagerUniqueName("{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}");
        boolean boolean78 = atomikosProperties63.enableLogging;
        boolean boolean79 = atomikosProperties63.threadedTwoPhaseCommit;
        atomikosProperties63.logBaseDir = "{{={-1.0=100}, -1.0=100}=}";
        java.util.Properties properties82 = atomikosProperties63.asProperties();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 50 + "'", int16 == 50);
        org.junit.Assert.assertNotNull(recovery17);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel25 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel25.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "{}" + "'", str33, "{}");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "{}" + "'", str37, "{}");
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNotNull(objEnumeration49);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertNotNull(properties55);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 10000L + "'", long58 == 10000L);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 300000L + "'", long59 == 300000L);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(properties64);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 10000L + "'", long67 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNull(obj75);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(properties82);
    }

    @Test
    public void test07851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07851");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties0.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties3 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties4 = atomikosProperties3.asProperties();
        atomikosProperties3.service = "{-1.0=100}";
        long long7 = atomikosProperties3.getDefaultJtaTimeout();
        long long8 = atomikosProperties3.getMaxTimeout();
        atomikosProperties3.threadedTwoPhaseCommit = true;
        long long11 = atomikosProperties3.checkpointInterval;
        atomikosProperties3.logBaseDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties3.setLogBaseName("{1.0=-1, -1.0=100}");
        atomikosProperties3.allowSubTransactions = true;
        boolean boolean18 = atomikosProperties3.isForceShutdownOnVmExit();
        boolean boolean19 = properties0.contains((java.lang.Object) boolean18);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet20 = properties0.entrySet();
        java.lang.String str21 = properties0.toString();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertNotNull(properties4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 300000L + "'", long8 == 300000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 500L + "'", long11 == 500L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objEntrySet20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "{}" + "'", str21, "{}");
    }

    @Test
    public void test07852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07852");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.enableLogging;
        long long2 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.enableLogging = false;
        int int5 = atomikosProperties0.getConsoleFileCount();
        int int6 = atomikosProperties0.getMaxActives();
        java.lang.String str7 = atomikosProperties0.getLogBaseDir();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10000L + "'", long2 == 10000L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 50 + "'", int6 == 50);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test07853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07853");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.remove((java.lang.Object) (-1.0d));
        boolean boolean3 = properties0.isEmpty();
        int int4 = properties0.size();
        java.lang.String str6 = properties0.getProperty("{}");
        java.util.Set<java.lang.Object> objSet7 = properties0.keySet();
        java.lang.String str9 = properties0.getProperty("hi!");
        java.lang.String str10 = properties0.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties12 = atomikosProperties11.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties14 = atomikosProperties13.asProperties();
        atomikosProperties13.service = "{-1.0=100}";
        long long17 = atomikosProperties13.getDefaultJtaTimeout();
        atomikosProperties13.consoleFileLimit = '#';
        java.lang.Object obj20 = properties12.get((java.lang.Object) atomikosProperties13);
        boolean boolean21 = atomikosProperties13.forceShutdownOnVmExit;
        boolean boolean22 = properties0.equals((java.lang.Object) atomikosProperties13);
        boolean boolean23 = atomikosProperties13.enableLogging;
        java.lang.String str24 = atomikosProperties13.outputDir;
        atomikosProperties13.service = "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name={}, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={-1.0=100}, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}";
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(objSet7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "{}" + "'", str10, "{}");
        org.junit.Assert.assertNotNull(properties12);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10000L + "'", long17 == 10000L);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(str24);
    }

    @Test
    public void test07854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07854");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        boolean boolean7 = atomikosProperties0.isAllowSubTransactions();
        int int8 = atomikosProperties0.getConsoleFileLimit();
        boolean boolean9 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.setMaxTimeout(300000L);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery12 = atomikosProperties0.getRecovery();
        atomikosProperties0.consoleFileCount = 18;
        atomikosProperties0.setMaxTimeout(32L);
        int int17 = atomikosProperties0.maxActives;
        java.lang.Class<?> wildcardClass18 = atomikosProperties0.getClass();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(recovery12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 50 + "'", int17 == 50);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test07855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07855");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        boolean boolean7 = atomikosProperties0.isAllowSubTransactions();
        boolean boolean8 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.allowSubTransactions = false;
        atomikosProperties0.threadedTwoPhaseCommit = true;
        atomikosProperties0.setLogBaseName("tm.out");
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel15 = atomikosProperties0.getConsoleLogLevel();
        atomikosProperties0.setService("{1.0=-1}");
        boolean boolean18 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.threadedTwoPhaseCommit = true;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel15 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel15.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test07856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07856");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.enableLogging = false;
        atomikosProperties0.setMaxTimeout((long) (byte) 0);
        atomikosProperties0.setService("tm.out");
        atomikosProperties0.setMaxActives((-1));
        atomikosProperties0.outputDir = "tmlog";
        atomikosProperties0.enableLogging = true;
        boolean boolean17 = atomikosProperties0.allowSubTransactions;
        java.lang.String str18 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.logBaseName = "{{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}=hi!}";
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test07857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07857");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties8 = atomikosProperties7.asProperties();
        java.lang.Object obj9 = properties0.remove((java.lang.Object) properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        atomikosProperties10.service = "{-1.0=100}";
        long long14 = atomikosProperties10.getDefaultJtaTimeout();
        atomikosProperties10.setThreadedTwoPhaseCommit(true);
        boolean boolean17 = atomikosProperties10.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery18 = atomikosProperties10.recovery;
        atomikosProperties10.setLogBaseDir("");
        long long21 = atomikosProperties10.maxTimeout;
        boolean boolean22 = atomikosProperties10.forceShutdownOnVmExit;
        boolean boolean23 = properties8.containsValue((java.lang.Object) atomikosProperties10);
        int int24 = atomikosProperties10.getMaxActives();
        atomikosProperties10.threadedTwoPhaseCommit = false;
        boolean boolean27 = atomikosProperties10.serialJtaTransactions;
        boolean boolean28 = atomikosProperties10.isSerialJtaTransactions();
        java.lang.String str29 = atomikosProperties10.getTransactionManagerUniqueName();
        long long30 = atomikosProperties10.getCheckpointInterval();
        atomikosProperties10.setConsoleFileName("{}");
        long long33 = atomikosProperties10.checkpointInterval;
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10000L + "'", long14 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(recovery18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 300000L + "'", long21 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 50 + "'", int24 == 50);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 500L + "'", long30 == 500L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 500L + "'", long33 == 500L);
    }

    @Test
    public void test07858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07858");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.enableLogging = false;
        atomikosProperties0.setMaxTimeout((long) (byte) 0);
        atomikosProperties0.setAllowSubTransactions(true);
        java.util.Properties properties11 = new java.util.Properties();
        java.lang.Object obj13 = properties11.remove((java.lang.Object) (-1.0d));
        boolean boolean14 = properties11.isEmpty();
        java.util.Properties properties15 = new java.util.Properties();
        java.lang.String str16 = properties15.toString();
        java.lang.Object obj18 = properties15.remove((java.lang.Object) (short) 100);
        java.lang.Object obj21 = properties15.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean23 = properties15.containsKey((java.lang.Object) 0L);
        java.lang.Object obj26 = properties15.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj29 = properties15.setProperty("", "{-1.0=100}");
        java.lang.Object obj30 = properties15.clone();
        java.lang.Object obj31 = properties11.get((java.lang.Object) properties15);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery33 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery33.retryInterval = (short) 100;
        recovery33.forgetOrphanedLogEntriesDelay = 'a';
        long long38 = recovery33.getDelay();
        long long39 = recovery33.getRetryInterval();
        recovery33.forgetOrphanedLogEntriesDelay = 10000L;
        atomikosProperties0.set(properties15, "tmlog", (java.lang.Object) recovery33);
        java.util.Properties properties43 = new java.util.Properties();
        java.lang.String str44 = properties43.toString();
        java.lang.Object obj46 = properties43.remove((java.lang.Object) (short) 100);
        java.lang.Object obj49 = properties43.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        java.util.Properties properties51 = new java.util.Properties();
        java.lang.String str52 = properties51.toString();
        java.lang.Object obj54 = properties51.remove((java.lang.Object) (short) 100);
        java.lang.Object obj57 = properties51.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj58 = properties51.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration59 = properties51.elements();
        java.lang.Object obj60 = properties43.putIfAbsent((java.lang.Object) 10.0f, (java.lang.Object) objEnumeration59);
        boolean boolean61 = properties15.contains((java.lang.Object) 10.0f);
        java.lang.String str62 = properties15.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties63 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties64 = atomikosProperties63.asProperties();
        atomikosProperties63.service = "{-1.0=100}";
        long long67 = atomikosProperties63.getDefaultJtaTimeout();
        atomikosProperties63.serialJtaTransactions = true;
        long long70 = atomikosProperties63.getDefaultJtaTimeout();
        long long71 = atomikosProperties63.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery72 = atomikosProperties63.getRecovery();
        long long73 = recovery72.delay;
        int int74 = recovery72.maxRetries;
        recovery72.setMaxRetries((int) '#');
        long long77 = recovery72.forgetOrphanedLogEntriesDelay;
        java.lang.Object obj78 = properties15.remove((java.lang.Object) recovery72);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{}" + "'", str16, "{}");
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNotNull(obj30);
// flaky:         org.junit.Assert.assertEquals(obj30.toString(), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 10000L + "'", long38 == 10000L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 100L + "'", long39 == 100L);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "{}" + "'", str44, "{}");
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "{}" + "'", str52, "{}");
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertEquals(obj58.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj58), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj58), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration59);
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(properties64);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 10000L + "'", long67 == 10000L);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 10000L + "'", long70 == 10000L);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 500L + "'", long71 == 500L);
        org.junit.Assert.assertNotNull(recovery72);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 10000L + "'", long73 == 10000L);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 5 + "'", int74 == 5);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 86400000L + "'", long77 == 86400000L);
        org.junit.Assert.assertNull(obj78);
    }

    @Test
    public void test07859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07859");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        int int7 = atomikosProperties0.maxActives;
        atomikosProperties0.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.getRecovery();
        atomikosProperties0.consoleFileName = "{-1.0=100}";
        atomikosProperties0.setSerialJtaTransactions(false);
        atomikosProperties0.consoleFileName = "{={-1.0=100}, -1.0=100}";
        atomikosProperties0.defaultJtaTimeout = 50;
        boolean boolean19 = atomikosProperties0.allowSubTransactions;
        boolean boolean20 = atomikosProperties0.isAllowSubTransactions();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test07860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07860");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileLimit = (byte) 10;
        long long7 = atomikosProperties0.getMaxTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel8 = null;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel8;
        atomikosProperties0.setService("");
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel12 = atomikosProperties0.consoleLogLevel;
        atomikosProperties0.service = "{1.0=-1}";
        java.util.Properties properties15 = atomikosProperties0.asProperties();
        java.util.Enumeration<java.lang.Object> objEnumeration16 = properties15.keys();
        java.io.OutputStream outputStream17 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties15.storeToXML(outputStream17, "{}", "{1.0=-1, ={1.0=-1}, -1.0=100}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertNull(atomikosLoggingLevel12);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertNotNull(objEnumeration16);
    }

    @Test
    public void test07861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07861");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setEnableLogging(true);
        atomikosProperties0.consoleFileCount = 0;
        int int5 = atomikosProperties0.getMaxActives();
        int int6 = atomikosProperties0.getConsoleFileCount();
        java.lang.String str7 = atomikosProperties0.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties9 = atomikosProperties8.asProperties();
        atomikosProperties8.service = "{-1.0=100}";
        long long12 = atomikosProperties8.getDefaultJtaTimeout();
        atomikosProperties8.setMaxActives(0);
        boolean boolean15 = atomikosProperties8.threadedTwoPhaseCommit;
        boolean boolean16 = atomikosProperties8.allowSubTransactions;
        atomikosProperties8.logBaseDir = "{}";
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean20 = atomikosProperties19.isSerialJtaTransactions();
        atomikosProperties19.logBaseName = "{-1.0=100}";
        int int23 = atomikosProperties19.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery24 = atomikosProperties19.getRecovery();
        atomikosProperties19.setConsoleFileCount((int) (byte) 100);
        atomikosProperties19.setAllowSubTransactions(true);
        atomikosProperties19.setService("tm.out");
        boolean boolean31 = atomikosProperties19.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel32 = atomikosProperties19.getConsoleLogLevel();
        atomikosProperties8.setConsoleLogLevel(atomikosLoggingLevel32);
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel32);
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        java.lang.String str37 = atomikosProperties0.getService();
        atomikosProperties0.setConsoleFileCount(5);
        java.lang.String str40 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.serialJtaTransactions = true;
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 50 + "'", int5 == 50);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10000L + "'", long12 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 50 + "'", int23 == 50);
        org.junit.Assert.assertNotNull(recovery24);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel32 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel32.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(str40);
    }

    @Test
    public void test07862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07862");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        atomikosProperties0.maxActives = ' ';
        int int9 = atomikosProperties0.getConsoleFileCount();
        int int10 = atomikosProperties0.consoleFileLimit;
        java.util.Properties properties11 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean13 = atomikosProperties12.isSerialJtaTransactions();
        atomikosProperties12.logBaseName = "{-1.0=100}";
        int int16 = atomikosProperties12.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery17 = atomikosProperties12.getRecovery();
        atomikosProperties12.setConsoleFileCount((int) (byte) 100);
        atomikosProperties12.setAllowSubTransactions(true);
        atomikosProperties12.setService("tm.out");
        boolean boolean24 = atomikosProperties12.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel25 = atomikosProperties12.getConsoleLogLevel();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties26.setAllowSubTransactions(true);
        boolean boolean29 = atomikosProperties26.enableLogging;
        atomikosProperties26.consoleFileLimit = (byte) 100;
        java.util.Properties properties32 = new java.util.Properties();
        java.lang.String str33 = properties32.toString();
        java.util.Properties properties34 = new java.util.Properties(properties32);
        java.util.Properties properties36 = new java.util.Properties();
        java.lang.String str37 = properties36.toString();
        java.lang.Object obj39 = properties36.remove((java.lang.Object) (short) 100);
        java.lang.Object obj42 = properties36.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean44 = properties36.containsKey((java.lang.Object) 0L);
        java.lang.Object obj47 = properties36.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties48 = new java.util.Properties(properties36);
        java.util.Enumeration<java.lang.Object> objEnumeration49 = properties48.elements();
        atomikosProperties26.set(properties34, "{={-1.0=100}, -1.0=100}", (java.lang.Object) properties48);
        atomikosProperties26.allowSubTransactions = false;
        java.lang.Object obj53 = properties11.put((java.lang.Object) atomikosProperties12, (java.lang.Object) false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties54 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties55 = atomikosProperties54.asProperties();
        atomikosProperties54.service = "{-1.0=100}";
        long long58 = atomikosProperties54.getDefaultJtaTimeout();
        long long59 = atomikosProperties54.getMaxTimeout();
        int int60 = atomikosProperties54.consoleFileCount;
        atomikosProperties54.setConsoleFileCount(0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties63 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties64 = atomikosProperties63.asProperties();
        atomikosProperties63.service = "{-1.0=100}";
        long long67 = atomikosProperties63.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel68 = null;
        atomikosProperties63.setConsoleLogLevel(atomikosLoggingLevel68);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel70 = null;
        atomikosProperties63.setConsoleLogLevel(atomikosLoggingLevel70);
        atomikosProperties63.setLogBaseName("{={-1.0=100}, -1.0=100}");
        boolean boolean74 = atomikosProperties63.enableLogging;
        java.lang.Object obj75 = properties11.replace((java.lang.Object) atomikosProperties54, (java.lang.Object) atomikosProperties63);
        atomikosProperties54.setLogBaseName("");
        long long78 = atomikosProperties54.checkpointInterval;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 50 + "'", int16 == 50);
        org.junit.Assert.assertNotNull(recovery17);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel25 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel25.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "{}" + "'", str33, "{}");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "{}" + "'", str37, "{}");
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNotNull(objEnumeration49);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertNotNull(properties55);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 10000L + "'", long58 == 10000L);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 300000L + "'", long59 == 300000L);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(properties64);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 10000L + "'", long67 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNull(obj75);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 500L + "'", long78 == 500L);
    }

    @Test
    public void test07863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07863");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        atomikosProperties0.setConsoleFileCount((int) (byte) 100);
        atomikosProperties0.setAllowSubTransactions(true);
        atomikosProperties0.setService("tm.out");
        int int12 = atomikosProperties0.consoleFileLimit;
        atomikosProperties0.setDefaultJtaTimeout((long) 'a');
        boolean boolean15 = atomikosProperties0.enableLogging;
        java.lang.String str16 = atomikosProperties0.consoleFileName;
        java.lang.String str17 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.enableLogging = false;
        java.lang.String str20 = atomikosProperties0.getOutputDir();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tm.out" + "'", str16, "tm.out");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test07864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07864");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setEnableLogging(true);
        atomikosProperties0.consoleFileCount = 0;
        int int5 = atomikosProperties0.getMaxActives();
        java.lang.String str6 = atomikosProperties0.logBaseName;
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 50 + "'", int5 == 50);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
    }

    @Test
    public void test07865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07865");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        boolean boolean2 = properties0.isEmpty();
        java.lang.Object obj5 = properties0.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Properties properties6 = new java.util.Properties();
        java.lang.Object obj8 = properties6.remove((java.lang.Object) (-1.0d));
        boolean boolean9 = properties6.isEmpty();
        java.lang.Object obj12 = properties6.setProperty("hi!", "{}");
        java.lang.Object obj14 = properties0.getOrDefault((java.lang.Object) "hi!", (java.lang.Object) 100.0d);
        properties0.clear();
        java.util.Properties properties16 = new java.util.Properties();
        java.lang.String str17 = properties16.toString();
        java.util.Properties properties18 = new java.util.Properties(properties16);
        boolean boolean19 = properties18.isEmpty();
        java.lang.Object obj22 = properties18.setProperty("tmlog", "{}");
        boolean boolean23 = properties0.containsValue((java.lang.Object) properties18);
        java.util.Properties properties24 = new java.util.Properties();
        java.lang.Object obj27 = properties24.setProperty("{}", "{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery28 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery28.retryInterval = (short) 100;
        recovery28.setForgetOrphanedLogEntriesDelay((long) 5);
        recovery28.setForgetOrphanedLogEntriesDelay((long) (short) 0);
        java.util.Properties properties35 = new java.util.Properties();
        java.lang.String str36 = properties35.toString();
        java.lang.Object obj38 = properties35.remove((java.lang.Object) (short) 100);
        java.util.Properties properties39 = new java.util.Properties();
        java.lang.String str40 = properties39.toString();
        boolean boolean41 = properties39.isEmpty();
        java.lang.Object obj44 = properties39.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration45 = properties39.elements();
        boolean boolean46 = properties35.containsKey((java.lang.Object) properties39);
        java.lang.Object obj47 = properties24.putIfAbsent((java.lang.Object) (short) 0, (java.lang.Object) properties39);
        int int48 = properties24.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties50 = atomikosProperties49.asProperties();
        atomikosProperties49.service = "{-1.0=100}";
        long long53 = atomikosProperties49.getDefaultJtaTimeout();
        atomikosProperties49.outputDir = "{={-1.0=100}, -1.0=100}";
        long long56 = atomikosProperties49.getCheckpointInterval();
        atomikosProperties49.setConsoleFileCount((int) (byte) 1);
        boolean boolean59 = atomikosProperties49.threadedTwoPhaseCommit;
        int int60 = atomikosProperties49.getMaxActives();
        boolean boolean61 = atomikosProperties49.isAllowSubTransactions();
        java.util.Properties properties62 = new java.util.Properties();
        java.lang.Object obj64 = properties62.remove((java.lang.Object) (-1.0d));
        java.util.Enumeration<?> wildcardEnumeration65 = properties62.propertyNames();
        boolean boolean66 = properties0.replace((java.lang.Object) int48, (java.lang.Object) atomikosProperties49, (java.lang.Object) properties62);
        java.util.Collection<java.lang.Object> objCollection67 = properties0.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties68 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties69 = atomikosProperties68.asProperties();
        atomikosProperties68.service = "{-1.0=100}";
        long long72 = atomikosProperties68.getDefaultJtaTimeout();
        atomikosProperties68.serialJtaTransactions = true;
        long long75 = atomikosProperties68.maxTimeout;
        atomikosProperties68.setLogBaseDir("{-1.0=100}");
        int int78 = atomikosProperties68.getConsoleFileCount();
        atomikosProperties68.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties81 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties82 = atomikosProperties81.asProperties();
        atomikosProperties81.service = "{-1.0=100}";
        long long85 = atomikosProperties81.getDefaultJtaTimeout();
        atomikosProperties81.setTransactionManagerUniqueName("{}");
        atomikosProperties81.consoleFileName = "hi!";
        int int90 = atomikosProperties81.getConsoleFileCount();
        boolean boolean91 = atomikosProperties81.isThreadedTwoPhaseCommit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel92 = atomikosProperties81.consoleLogLevel;
        atomikosProperties68.consoleLogLevel = atomikosLoggingLevel92;
        atomikosProperties68.setMaxTimeout(500L);
        boolean boolean96 = properties0.containsKey((java.lang.Object) atomikosProperties68);
        atomikosProperties68.setForceShutdownOnVmExit(false);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + 100.0d + "'", obj14, 100.0d);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "{}" + "'", str17, "{}");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "{}" + "'", str36, "{}");
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "{}" + "'", str40, "{}");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNotNull(objEnumeration45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(properties50);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 10000L + "'", long53 == 10000L);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 500L + "'", long56 == 500L);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 50 + "'", int60 == 50);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNull(obj64);
        org.junit.Assert.assertNotNull(wildcardEnumeration65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(objCollection67);
        org.junit.Assert.assertNotNull(properties69);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 10000L + "'", long72 == 10000L);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 300000L + "'", long75 == 300000L);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(properties82);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 10000L + "'", long85 == 10000L);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel92 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel92.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test07866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07866");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        boolean boolean3 = properties0.containsValue((java.lang.Object) (-1L));
        java.util.Properties properties4 = new java.util.Properties();
        java.lang.String str5 = properties4.toString();
        boolean boolean6 = properties4.isEmpty();
        java.util.Properties properties7 = new java.util.Properties();
        java.lang.String str8 = properties7.toString();
        java.lang.Object obj10 = properties7.remove((java.lang.Object) (short) 100);
        java.lang.Object obj13 = properties7.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean15 = properties7.containsKey((java.lang.Object) 0L);
        boolean boolean16 = properties4.containsValue((java.lang.Object) 0L);
        java.util.Set<java.lang.String> strSet17 = properties4.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties19 = atomikosProperties18.asProperties();
        atomikosProperties18.service = "{-1.0=100}";
        long long22 = atomikosProperties18.getDefaultJtaTimeout();
        atomikosProperties18.setThreadedTwoPhaseCommit(true);
        boolean boolean25 = atomikosProperties18.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery26 = atomikosProperties18.recovery;
        java.util.Properties properties27 = new java.util.Properties();
        java.lang.String str28 = properties27.toString();
        boolean boolean29 = properties27.isEmpty();
        java.lang.Object obj32 = properties27.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        boolean boolean33 = properties4.remove((java.lang.Object) atomikosProperties18, (java.lang.Object) (short) 100);
        java.lang.String str34 = atomikosProperties18.logBaseName;
        int int35 = atomikosProperties18.consoleFileLimit;
        java.lang.String str36 = atomikosProperties18.getService();
        atomikosProperties18.setMaxTimeout((long) 0);
        java.util.Properties properties39 = new java.util.Properties();
        java.lang.Object obj41 = properties39.remove((java.lang.Object) (-1.0d));
        boolean boolean42 = properties39.isEmpty();
        java.util.Collection<java.lang.Object> objCollection43 = properties39.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties45 = atomikosProperties44.asProperties();
        atomikosProperties44.service = "{-1.0=100}";
        long long48 = atomikosProperties44.getDefaultJtaTimeout();
        atomikosProperties44.serialJtaTransactions = true;
        long long51 = atomikosProperties44.getDefaultJtaTimeout();
        long long52 = atomikosProperties44.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery53 = atomikosProperties44.getRecovery();
        long long54 = recovery53.delay;
        int int55 = recovery53.maxRetries;
        java.lang.Object obj56 = properties39.get((java.lang.Object) int55);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery57 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery57.retryInterval = (short) 100;
        recovery57.forgetOrphanedLogEntriesDelay = 'a';
        long long62 = recovery57.getDelay();
        int int63 = recovery57.maxRetries;
        int int64 = recovery57.maxRetries;
        recovery57.setDelay((long) (-1));
        long long67 = recovery57.forgetOrphanedLogEntriesDelay;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties68 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str69 = atomikosProperties68.getOutputDir();
        atomikosProperties68.threadedTwoPhaseCommit = false;
        java.lang.Object obj72 = properties39.getOrDefault((java.lang.Object) recovery57, (java.lang.Object) atomikosProperties68);
        boolean boolean73 = properties0.remove((java.lang.Object) 0, (java.lang.Object) atomikosProperties68);
        boolean boolean74 = atomikosProperties68.serialJtaTransactions;
        atomikosProperties68.serialJtaTransactions = false;
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{}" + "'", str5, "{}");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{}" + "'", str8, "{}");
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(properties19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 10000L + "'", long22 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(recovery26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "{}" + "'", str28, "{}");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "tmlog" + "'", str34, "tmlog");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "{-1.0=100}" + "'", str36, "{-1.0=100}");
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(objCollection43);
        org.junit.Assert.assertNotNull(properties45);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 10000L + "'", long48 == 10000L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 10000L + "'", long51 == 10000L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 500L + "'", long52 == 500L);
        org.junit.Assert.assertNotNull(recovery53);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 10000L + "'", long54 == 10000L);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 5 + "'", int55 == 5);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 10000L + "'", long62 == 10000L);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 5 + "'", int63 == 5);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 5 + "'", int64 == 5);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 97L + "'", long67 == 97L);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(obj72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
    }

    @Test
    public void test07867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07867");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.outputDir = "{={-1.0=100}, -1.0=100}";
        long long7 = atomikosProperties0.getCheckpointInterval();
        atomikosProperties0.setConsoleFileCount((int) (byte) 1);
        boolean boolean10 = atomikosProperties0.threadedTwoPhaseCommit;
        atomikosProperties0.setAllowSubTransactions(false);
        atomikosProperties0.setCheckpointInterval(97L);
        boolean boolean15 = atomikosProperties0.isForceShutdownOnVmExit();
        java.lang.String str16 = atomikosProperties0.getOutputDir();
        boolean boolean17 = atomikosProperties0.isEnableLogging();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{={-1.0=100}, -1.0=100}" + "'", str16, "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test07868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07868");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setTransactionManagerUniqueName("{}");
        atomikosProperties0.consoleFileName = "hi!";
        atomikosProperties0.logBaseDir = "tm.out";
        atomikosProperties0.consoleFileLimit = 97;
        java.lang.String str13 = atomikosProperties0.getService();
        atomikosProperties0.setConsoleFileName("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=true, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=35, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=10, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={-1.0=100}, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{-1.0=100}" + "'", str13, "{-1.0=100}");
    }

    @Test
    public void test07869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07869");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setMaxActives(0);
        atomikosProperties0.maxActives = 'a';
        atomikosProperties0.setOutputDir("{1.0=-1, -1.0=100}");
        atomikosProperties0.setOutputDir("{={-1.0=100}, -1.0=100}");
        java.lang.String str13 = atomikosProperties0.getLogBaseDir();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test07870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07870");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        long long5 = atomikosProperties0.getMaxTimeout();
        int int6 = atomikosProperties0.consoleFileCount;
        long long7 = atomikosProperties0.maxTimeout;
        atomikosProperties0.setOutputDir("{100=100}");
        atomikosProperties0.logBaseName = "{{}={}}";
        int int12 = atomikosProperties0.consoleFileLimit;
        int int13 = atomikosProperties0.consoleFileCount;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test07871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07871");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        int int2 = properties1.size();
        java.lang.String str3 = properties1.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties5 = atomikosProperties4.asProperties();
        atomikosProperties4.service = "{-1.0=100}";
        long long8 = atomikosProperties4.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel9 = null;
        atomikosProperties4.setConsoleLogLevel(atomikosLoggingLevel9);
        int int11 = atomikosProperties4.maxActives;
        atomikosProperties4.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery14 = atomikosProperties4.getRecovery();
        atomikosProperties4.outputDir = "hi!";
        atomikosProperties4.setDefaultJtaTimeout((long) 10);
        java.lang.String str19 = atomikosProperties4.getTransactionManagerUniqueName();
        java.lang.String str20 = atomikosProperties4.getTransactionManagerUniqueName();
        boolean boolean21 = atomikosProperties4.threadedTwoPhaseCommit;
        boolean boolean22 = properties1.equals((java.lang.Object) atomikosProperties4);
        atomikosProperties4.consoleFileCount = 10;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery25 = atomikosProperties4.recovery;
        boolean boolean26 = atomikosProperties4.isThreadedTwoPhaseCommit();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 18 + "'", int2 == 18);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}" + "'", str3, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 10000L + "'", long8 == 10000L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 50 + "'", int11 == 50);
        org.junit.Assert.assertNotNull(recovery14);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(recovery25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test07872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07872");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long1 = recovery0.getRetryInterval();
        long long2 = recovery0.delay;
        recovery0.setForgetOrphanedLogEntriesDelay((long) 35);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 10000L + "'", long1 == 10000L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10000L + "'", long2 == 10000L);
    }

    @Test
    public void test07873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07873");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        int int7 = atomikosProperties0.maxActives;
        atomikosProperties0.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.getRecovery();
        atomikosProperties0.consoleFileName = "{-1.0=100}";
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel13 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel13);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel15 = atomikosProperties0.getConsoleLogLevel();
        int int16 = atomikosProperties0.consoleFileLimit;
        atomikosProperties0.outputDir = "{={-1.0=100}, -1.0=100}";
        int int19 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery20 = atomikosProperties0.recovery;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertNull(atomikosLoggingLevel15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 50 + "'", int19 == 50);
        org.junit.Assert.assertNotNull(recovery20);
    }

    @Test
    public void test07874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07874");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        boolean boolean7 = atomikosProperties0.isAllowSubTransactions();
        int int8 = atomikosProperties0.getConsoleFileLimit();
        boolean boolean9 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.setMaxTimeout(300000L);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery12 = atomikosProperties0.getRecovery();
        java.lang.String str13 = atomikosProperties0.consoleFileName;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery14 = atomikosProperties0.getRecovery();
        atomikosProperties0.setLogBaseDir("{}");
        atomikosProperties0.consoleFileName = "{1.0=-1, -1.0=100}";
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel19 = atomikosProperties0.consoleLogLevel;
        atomikosProperties0.consoleFileCount = 32;
        java.lang.String str22 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.setMaxTimeout(5L);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(recovery12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tm.out" + "'", str13, "tm.out");
        org.junit.Assert.assertNotNull(recovery14);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel19 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel19.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test07875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07875");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.retryInterval = (short) 100;
        recovery0.delay = (-1L);
        long long5 = recovery0.getRetryInterval();
        long long6 = recovery0.forgetOrphanedLogEntriesDelay;
        recovery0.setForgetOrphanedLogEntriesDelay((long) (short) 1);
        long long9 = recovery0.getForgetOrphanedLogEntriesDelay();
        long long10 = recovery0.getForgetOrphanedLogEntriesDelay();
        recovery0.retryInterval = 32L;
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 100L + "'", long5 == 100L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 86400000L + "'", long6 == 86400000L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
    }

    @Test
    public void test07876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07876");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        java.util.Properties properties2 = new java.util.Properties();
        java.lang.Object obj4 = properties2.remove((java.lang.Object) (-1.0d));
        boolean boolean5 = properties2.isEmpty();
        int int6 = properties2.size();
        java.lang.String str8 = properties2.getProperty("{}");
        java.lang.Object obj9 = properties1.remove((java.lang.Object) properties2);
        java.util.Properties properties10 = new java.util.Properties();
        java.lang.String str11 = properties10.toString();
        java.util.Properties properties12 = new java.util.Properties(properties10);
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        boolean boolean14 = properties1.isEmpty();
        java.util.Collection<java.lang.Object> objCollection15 = properties1.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties16.setAllowSubTransactions(true);
        atomikosProperties16.maxActives = (short) -1;
        atomikosProperties16.setService("tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties23.setAllowSubTransactions(true);
        boolean boolean26 = atomikosProperties23.enableLogging;
        boolean boolean27 = atomikosProperties23.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel28 = atomikosProperties23.consoleLogLevel;
        atomikosProperties16.setConsoleLogLevel(atomikosLoggingLevel28);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery30 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery30.retryInterval = (short) 100;
        recovery30.forgetOrphanedLogEntriesDelay = 'a';
        long long35 = recovery30.retryInterval;
        recovery30.forgetOrphanedLogEntriesDelay = 0L;
        long long38 = recovery30.getForgetOrphanedLogEntriesDelay();
        long long39 = recovery30.getForgetOrphanedLogEntriesDelay();
        recovery30.retryInterval = 0L;
        long long42 = recovery30.retryInterval;
        int int43 = recovery30.maxRetries;
        recovery30.setMaxRetries((int) 'a');
        long long46 = recovery30.getForgetOrphanedLogEntriesDelay();
        long long47 = recovery30.getRetryInterval();
        long long48 = recovery30.getForgetOrphanedLogEntriesDelay();
        java.lang.Object obj49 = properties1.putIfAbsent((java.lang.Object) atomikosProperties16, (java.lang.Object) long48);
        java.lang.String str50 = atomikosProperties16.consoleFileName;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "{}" + "'", str11, "{}");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(objCollection15);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel28 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel28.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 100L + "'", long35 == 100L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 5 + "'", int43 == 5);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "tm.out" + "'", str50, "tm.out");
    }

    @Test
    public void test07877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07877");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        boolean boolean7 = atomikosProperties0.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery8 = atomikosProperties0.recovery;
        atomikosProperties0.setLogBaseDir("");
        long long11 = atomikosProperties0.maxTimeout;
        java.lang.String str12 = atomikosProperties0.logBaseDir;
        java.lang.String str13 = atomikosProperties0.logBaseDir;
        boolean boolean14 = atomikosProperties0.threadedTwoPhaseCommit;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(recovery8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 300000L + "'", long11 == 300000L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test07878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07878");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel7 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel7);
        boolean boolean9 = atomikosProperties0.enableLogging;
        int int10 = atomikosProperties0.getConsoleFileLimit();
        atomikosProperties0.serialJtaTransactions = false;
        atomikosProperties0.setLogBaseName("");
        atomikosProperties0.transactionManagerUniqueName = "tmlog";
        long long17 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties19 = atomikosProperties18.asProperties();
        atomikosProperties18.service = "{-1.0=100}";
        long long22 = atomikosProperties18.getDefaultJtaTimeout();
        atomikosProperties18.serialJtaTransactions = true;
        long long25 = atomikosProperties18.maxTimeout;
        boolean boolean26 = atomikosProperties18.isThreadedTwoPhaseCommit();
        atomikosProperties18.setCheckpointInterval(1L);
        atomikosProperties18.setOutputDir("{}");
        atomikosProperties18.consoleFileLimit = (-1);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean34 = atomikosProperties33.isThreadedTwoPhaseCommit();
        long long35 = atomikosProperties33.getCheckpointInterval();
        atomikosProperties33.setCheckpointInterval((long) 5);
        java.util.Properties properties38 = new java.util.Properties();
        java.lang.String str39 = properties38.toString();
        java.lang.Object obj41 = properties38.remove((java.lang.Object) (short) 100);
        java.lang.Object obj44 = properties38.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean46 = properties38.containsKey((java.lang.Object) 0L);
        java.lang.String str47 = properties38.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties48 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties49 = atomikosProperties48.asProperties();
        atomikosProperties48.service = "{-1.0=100}";
        long long52 = atomikosProperties48.getDefaultJtaTimeout();
        atomikosProperties48.setMaxActives(0);
        atomikosProperties48.maxActives = 'a';
        boolean boolean57 = atomikosProperties48.isThreadedTwoPhaseCommit();
        boolean boolean58 = atomikosProperties48.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel59 = atomikosProperties48.consoleLogLevel;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties60 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties61 = atomikosProperties60.asProperties();
        atomikosProperties60.service = "{-1.0=100}";
        long long64 = atomikosProperties60.getDefaultJtaTimeout();
        atomikosProperties60.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties60.setMaxActives(100);
        java.lang.String str69 = atomikosProperties60.logBaseDir;
        java.lang.String str70 = atomikosProperties60.outputDir;
        java.lang.Object obj71 = properties38.replace((java.lang.Object) atomikosLoggingLevel59, (java.lang.Object) atomikosProperties60);
        atomikosProperties33.consoleLogLevel = atomikosLoggingLevel59;
        atomikosProperties18.setConsoleLogLevel(atomikosLoggingLevel59);
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel59;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10000L + "'", long17 == 10000L);
        org.junit.Assert.assertNotNull(properties19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 10000L + "'", long22 == 10000L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 300000L + "'", long25 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 500L + "'", long35 == 500L);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "{}" + "'", str39, "{}");
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "{-1.0=100}" + "'", str47, "{-1.0=100}");
        org.junit.Assert.assertNotNull(properties49);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 10000L + "'", long52 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel59 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel59.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(properties61);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 10000L + "'", long64 == 10000L);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "{={-1.0=100}, -1.0=100}" + "'", str70, "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNull(obj71);
    }

    @Test
    public void test07879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07879");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.retryInterval = (short) 100;
        recovery0.delay = (-1L);
        long long5 = recovery0.delay;
        recovery0.maxRetries = 0;
        long long8 = recovery0.forgetOrphanedLogEntriesDelay;
        long long9 = recovery0.getDelay();
        recovery0.setForgetOrphanedLogEntriesDelay((long) '4');
        long long12 = recovery0.forgetOrphanedLogEntriesDelay;
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 86400000L + "'", long8 == 86400000L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 52L + "'", long12 == 52L);
    }

    @Test
    public void test07880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07880");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        atomikosProperties0.setConsoleFileCount((int) (byte) 100);
        atomikosProperties0.setAllowSubTransactions(true);
        atomikosProperties0.setService("tm.out");
        boolean boolean12 = atomikosProperties0.isForceShutdownOnVmExit();
        boolean boolean13 = atomikosProperties0.isAllowSubTransactions();
        atomikosProperties0.setLogBaseName("");
        boolean boolean16 = atomikosProperties0.forceShutdownOnVmExit;
        long long17 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setSerialJtaTransactions(false);
        atomikosProperties0.setForceShutdownOnVmExit(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10000L + "'", long17 == 10000L);
    }

    @Test
    public void test07881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07881");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.retryInterval = (short) 100;
        recovery0.forgetOrphanedLogEntriesDelay = 'a';
        long long5 = recovery0.retryInterval;
        recovery0.forgetOrphanedLogEntriesDelay = 0L;
        long long8 = recovery0.getForgetOrphanedLogEntriesDelay();
        long long9 = recovery0.getForgetOrphanedLogEntriesDelay();
        recovery0.retryInterval = 0L;
        long long12 = recovery0.retryInterval;
        int int13 = recovery0.maxRetries;
        recovery0.maxRetries = (short) 100;
        recovery0.maxRetries = 18;
        long long18 = recovery0.retryInterval;
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 100L + "'", long5 == 100L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
    }

    @Test
    public void test07882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07882");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<?> wildcardEnumeration2 = properties0.propertyNames();
        int int3 = properties0.size();
        java.io.PrintStream printStream4 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.list(printStream4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardEnumeration2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test07883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07883");
        java.util.Properties properties0 = new java.util.Properties();
        properties0.clear();
        java.lang.String str2 = properties0.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery3 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery3.retryInterval = (short) 100;
        recovery3.setForgetOrphanedLogEntriesDelay((long) 5);
        recovery3.setRetryInterval((long) (-1));
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery10.retryInterval = (short) 100;
        recovery10.forgetOrphanedLogEntriesDelay = 'a';
        long long15 = recovery10.retryInterval;
        recovery10.forgetOrphanedLogEntriesDelay = 0L;
        java.lang.Object obj18 = properties0.put((java.lang.Object) (-1), (java.lang.Object) recovery10);
        int int19 = recovery10.getMaxRetries();
        long long20 = recovery10.delay;
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{}" + "'", str2, "{}");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 100L + "'", long15 == 100L);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 5 + "'", int19 == 5);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10000L + "'", long20 == 10000L);
    }

    @Test
    public void test07884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07884");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj14 = properties0.setProperty("", "{-1.0=100}");
        boolean boolean15 = properties0.isEmpty();
        java.util.Properties properties16 = new java.util.Properties();
        java.lang.String str17 = properties16.toString();
        java.util.Properties properties18 = new java.util.Properties(properties16);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet19 = properties18.entrySet();
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.Object obj23 = properties21.remove((java.lang.Object) (-1.0d));
        int int24 = properties21.size();
        boolean boolean25 = properties0.replace((java.lang.Object) properties18, (java.lang.Object) 100L, (java.lang.Object) properties21);
        java.util.Enumeration<java.lang.Object> objEnumeration26 = properties18.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean28 = atomikosProperties27.isSerialJtaTransactions();
        atomikosProperties27.logBaseName = "{-1.0=100}";
        int int31 = atomikosProperties27.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery32 = atomikosProperties27.getRecovery();
        atomikosProperties27.setConsoleFileCount((int) (byte) 100);
        atomikosProperties27.maxTimeout = 50;
        java.lang.String str37 = atomikosProperties27.getConsoleFileName();
        boolean boolean38 = properties18.containsValue((java.lang.Object) atomikosProperties27);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery39 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long40 = recovery39.getRetryInterval();
        long long41 = recovery39.retryInterval;
        long long42 = recovery39.forgetOrphanedLogEntriesDelay;
        boolean boolean43 = properties18.contains((java.lang.Object) long42);
        java.lang.Class<?> wildcardClass44 = properties18.getClass();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "{}" + "'", str17, "{}");
        org.junit.Assert.assertNotNull(objEntrySet19);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(objEnumeration26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 50 + "'", int31 == 50);
        org.junit.Assert.assertNotNull(recovery32);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "tm.out" + "'", str37, "tm.out");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 10000L + "'", long40 == 10000L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 10000L + "'", long41 == 10000L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 86400000L + "'", long42 == 86400000L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test07885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07885");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        boolean boolean2 = properties0.isEmpty();
        java.lang.Object obj5 = properties0.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Properties properties6 = new java.util.Properties();
        java.lang.String str7 = properties6.toString();
        java.lang.Object obj9 = properties6.remove((java.lang.Object) (short) 100);
        java.lang.Object obj12 = properties6.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean14 = properties6.containsKey((java.lang.Object) 0L);
        java.lang.Object obj17 = properties6.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties18 = new java.util.Properties(properties6);
        boolean boolean19 = properties0.containsValue((java.lang.Object) properties6);
        java.lang.String str21 = properties0.getProperty("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties23 = atomikosProperties22.asProperties();
        atomikosProperties22.service = "{-1.0=100}";
        java.lang.String str26 = atomikosProperties22.getTransactionManagerUniqueName();
        atomikosProperties22.consoleFileName = "hi!";
        atomikosProperties22.setCheckpointInterval((long) 5);
        atomikosProperties22.setConsoleFileCount(0);
        boolean boolean33 = atomikosProperties22.isThreadedTwoPhaseCommit();
        long long34 = atomikosProperties22.checkpointInterval;
        java.lang.Object obj35 = properties0.remove((java.lang.Object) atomikosProperties22);
        atomikosProperties22.consoleFileLimit = 10;
        atomikosProperties22.defaultJtaTimeout = ' ';
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "{}" + "'", str7, "{}");
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(properties23);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 5L + "'", long34 == 5L);
        org.junit.Assert.assertNull(obj35);
    }

    @Test
    public void test07886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07886");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        java.lang.String str7 = atomikosProperties0.getLogBaseName();
        atomikosProperties0.setLogBaseName("");
        atomikosProperties0.enableLogging = false;
        atomikosProperties0.maxTimeout = 0L;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties15 = atomikosProperties14.asProperties();
        atomikosProperties14.service = "{-1.0=100}";
        java.lang.String str18 = atomikosProperties14.getLogBaseName();
        atomikosProperties14.logBaseDir = "{={-1.0=100}, -1.0=100}";
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel21 = atomikosProperties14.consoleLogLevel;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel21);
        atomikosProperties0.setThreadedTwoPhaseCommit(false);
        atomikosProperties0.service = "{{1.0=-1}=hi!}";
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "tmlog" + "'", str7, "tmlog");
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "tmlog" + "'", str18, "tmlog");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel21 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel21.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
    }

    @Test
    public void test07887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07887");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileName = "hi!";
        atomikosProperties0.setCheckpointInterval((long) 5);
        atomikosProperties0.setConsoleFileCount(0);
        atomikosProperties0.setService("{-1.0=100}");
        atomikosProperties0.setDefaultJtaTimeout((long) 100);
        atomikosProperties0.setConsoleFileCount(18);
        atomikosProperties0.logBaseDir = "";
        long long19 = atomikosProperties0.maxTimeout;
        atomikosProperties0.serialJtaTransactions = true;
        atomikosProperties0.consoleFileCount = 100;
        long long24 = atomikosProperties0.defaultJtaTimeout;
        atomikosProperties0.setService("{com.atomikos.icatch.tm.out=hi!}");
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 300000L + "'", long19 == 300000L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 100L + "'", long24 == 100L);
    }

    @Test
    public void test07888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07888");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.lang.Object obj5 = properties0.setProperty("", "{={-1.0=100}, -1.0=100}");
        java.util.Properties properties6 = new java.util.Properties(properties0);
        java.util.Set<java.lang.Object> objSet7 = properties0.keySet();
        java.io.OutputStream outputStream8 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.store(outputStream8, "{com.atomikos.icatch.tm.out={}}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(objSet7);
    }

    @Test
    public void test07889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07889");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.retryInterval = (short) 100;
        recovery0.forgetOrphanedLogEntriesDelay = 'a';
        long long5 = recovery0.getDelay();
        int int6 = recovery0.maxRetries;
        int int7 = recovery0.maxRetries;
        long long8 = recovery0.getRetryInterval();
        recovery0.retryInterval = (byte) -1;
        int int11 = recovery0.maxRetries;
        recovery0.setRetryInterval((long) (short) 100);
        recovery0.setForgetOrphanedLogEntriesDelay((long) '4');
        long long16 = recovery0.getForgetOrphanedLogEntriesDelay();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 10000L + "'", long5 == 10000L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 5 + "'", int7 == 5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 52L + "'", long16 == 52L);
    }

    @Test
    public void test07890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07890");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setEnableLogging(true);
        atomikosProperties0.consoleFileCount = 0;
        atomikosProperties0.setSerialJtaTransactions(false);
        atomikosProperties0.consoleFileCount = (short) 1;
        atomikosProperties0.setDefaultJtaTimeout(1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties11.setAllowSubTransactions(true);
        atomikosProperties11.maxActives = (short) -1;
        atomikosProperties11.setService("tm.out");
        int int18 = atomikosProperties11.maxActives;
        atomikosProperties11.logBaseDir = "tmlog";
        boolean boolean21 = atomikosProperties11.allowSubTransactions;
        java.lang.String str22 = atomikosProperties11.getLogBaseDir();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel23 = atomikosProperties11.consoleLogLevel;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties25 = atomikosProperties24.asProperties();
        atomikosProperties24.service = "{-1.0=100}";
        long long28 = atomikosProperties24.getDefaultJtaTimeout();
        long long29 = atomikosProperties24.getMaxTimeout();
        atomikosProperties24.threadedTwoPhaseCommit = true;
        long long32 = atomikosProperties24.checkpointInterval;
        atomikosProperties24.enableLogging = false;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel35 = atomikosProperties24.getConsoleLogLevel();
        atomikosProperties11.consoleLogLevel = atomikosLoggingLevel35;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel35;
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "tmlog" + "'", str22, "tmlog");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel23 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel23.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 10000L + "'", long28 == 10000L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 300000L + "'", long29 == 300000L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 500L + "'", long32 == 500L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel35 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel35.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
    }

    @Test
    public void test07891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07891");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        long long7 = atomikosProperties0.maxTimeout;
        atomikosProperties0.setLogBaseDir("{-1.0=100}");
        int int10 = atomikosProperties0.getMaxActives();
        atomikosProperties0.forceShutdownOnVmExit = false;
        java.lang.String str13 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.defaultJtaTimeout = 18L;
        atomikosProperties0.serialJtaTransactions = true;
        atomikosProperties0.setForceShutdownOnVmExit(false);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 50 + "'", int10 == 50);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{-1.0=100}" + "'", str13, "{-1.0=100}");
    }

    @Test
    public void test07892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07892");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.retryInterval = (short) 100;
        recovery0.delay = (-1L);
        long long5 = recovery0.delay;
        recovery0.delay = (short) 1;
        long long8 = recovery0.getRetryInterval();
        long long9 = recovery0.getForgetOrphanedLogEntriesDelay();
        recovery0.setMaxRetries(10);
        int int12 = recovery0.maxRetries;
        long long13 = recovery0.getDelay();
        recovery0.forgetOrphanedLogEntriesDelay = 500L;
        long long16 = recovery0.getForgetOrphanedLogEntriesDelay();
        long long17 = recovery0.retryInterval;
        recovery0.setMaxRetries(2);
        long long20 = recovery0.delay;
        long long21 = recovery0.forgetOrphanedLogEntriesDelay;
        int int22 = recovery0.getMaxRetries();
        recovery0.setRetryInterval((long) (byte) 100);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 86400000L + "'", long9 == 86400000L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 500L + "'", long16 == 500L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 100L + "'", long17 == 100L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 500L + "'", long21 == 500L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
    }

    @Test
    public void test07893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07893");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj14 = properties0.setProperty("", "{-1.0=100}");
        java.lang.Object obj15 = properties0.clone();
        java.util.Collection<java.lang.Object> objCollection16 = properties0.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet17 = properties0.entrySet();
        java.lang.String str19 = properties0.getProperty("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=32, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={-1.0=100}, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties21 = atomikosProperties20.asProperties();
        atomikosProperties20.service = "{-1.0=100}";
        long long24 = atomikosProperties20.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel25 = null;
        atomikosProperties20.setConsoleLogLevel(atomikosLoggingLevel25);
        int int27 = atomikosProperties20.maxActives;
        atomikosProperties20.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery30 = atomikosProperties20.getRecovery();
        atomikosProperties20.forceShutdownOnVmExit = false;
        java.util.Properties properties33 = atomikosProperties20.asProperties();
        java.lang.String str34 = atomikosProperties20.getService();
        long long35 = atomikosProperties20.getCheckpointInterval();
        java.util.Properties properties36 = atomikosProperties20.asProperties();
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties36);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(obj15);
// flaky:         org.junit.Assert.assertEquals(obj15.toString(), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNotNull(objCollection16);
        org.junit.Assert.assertNotNull(objEntrySet17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(properties21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 10000L + "'", long24 == 10000L);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 50 + "'", int27 == 50);
        org.junit.Assert.assertNotNull(recovery30);
        org.junit.Assert.assertNotNull(properties33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "{-1.0=100}" + "'", str34, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 500L + "'", long35 == 500L);
        org.junit.Assert.assertNotNull(properties36);
    }

    @Test
    public void test07894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07894");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.outputDir = "{={-1.0=100}, -1.0=100}";
        boolean boolean3 = atomikosProperties0.isThreadedTwoPhaseCommit();
        atomikosProperties0.consoleFileLimit = 2;
        java.util.Properties properties6 = atomikosProperties0.asProperties();
        java.util.Properties properties7 = new java.util.Properties();
        java.lang.String str8 = properties7.toString();
        boolean boolean9 = properties7.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        atomikosProperties10.service = "{-1.0=100}";
        long long14 = atomikosProperties10.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel15 = null;
        atomikosProperties10.setConsoleLogLevel(atomikosLoggingLevel15);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel17 = null;
        atomikosProperties10.setConsoleLogLevel(atomikosLoggingLevel17);
        atomikosProperties10.setLogBaseName("{={-1.0=100}, -1.0=100}");
        atomikosProperties10.setDefaultJtaTimeout(100L);
        boolean boolean23 = atomikosProperties10.isEnableLogging();
        boolean boolean24 = properties7.equals((java.lang.Object) boolean23);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties26 = atomikosProperties25.asProperties();
        atomikosProperties25.service = "{-1.0=100}";
        java.lang.String str29 = atomikosProperties25.getTransactionManagerUniqueName();
        atomikosProperties25.consoleFileLimit = (byte) 10;
        long long32 = atomikosProperties25.checkpointInterval;
        atomikosProperties25.setLogBaseName("{-1.0=100}");
        long long35 = atomikosProperties25.getDefaultJtaTimeout();
        java.lang.String str36 = atomikosProperties25.getConsoleFileName();
        int int37 = atomikosProperties25.maxActives;
        atomikosProperties25.setAllowSubTransactions(true);
        java.util.Properties properties40 = atomikosProperties25.asProperties();
        java.util.Collection<java.lang.Object> objCollection41 = properties40.values();
        java.lang.Object obj42 = properties6.putIfAbsent((java.lang.Object) boolean24, (java.lang.Object) objCollection41);
        java.io.OutputStream outputStream43 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties6.store(outputStream43, "{{-1.0=100}=}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(properties6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{}" + "'", str8, "{}");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10000L + "'", long14 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(properties26);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 500L + "'", long32 == 500L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 10000L + "'", long35 == 10000L);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "tm.out" + "'", str36, "tm.out");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 50 + "'", int37 == 50);
        org.junit.Assert.assertNotNull(properties40);
        org.junit.Assert.assertNotNull(objCollection41);
        org.junit.Assert.assertNull(obj42);
    }

    @Test
    public void test07895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07895");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        int int7 = atomikosProperties0.maxActives;
        atomikosProperties0.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.getRecovery();
        atomikosProperties0.forceShutdownOnVmExit = false;
        java.util.Properties properties13 = atomikosProperties0.asProperties();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet14 = properties13.entrySet();
        java.util.Properties properties15 = new java.util.Properties();
        java.lang.String str16 = properties15.toString();
        java.lang.Object obj18 = properties15.remove((java.lang.Object) (short) 100);
        java.lang.Object obj19 = properties15.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean21 = atomikosProperties20.enableLogging;
        long long22 = atomikosProperties20.getDefaultJtaTimeout();
        java.lang.Object obj23 = properties13.put(obj19, (java.lang.Object) atomikosProperties20);
        java.lang.Object obj26 = properties13.setProperty("{1.0=-1, -1.0=100}", "{{-1.0=100}=}");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Enumeration<?> wildcardEnumeration27 = properties13.propertyNames();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.util.Properties cannot be cast to java.lang.String");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertNotNull(properties13);
        org.junit.Assert.assertNotNull(objEntrySet14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{}" + "'", str16, "{}");
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "{}");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 10000L + "'", long22 == 10000L);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNull(obj26);
    }

    @Test
    public void test07896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07896");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        long long7 = atomikosProperties0.maxTimeout;
        atomikosProperties0.setLogBaseDir("{-1.0=100}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.setAllowSubTransactions(true);
        atomikosProperties10.maxActives = (short) -1;
        atomikosProperties10.setService("tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties17.setAllowSubTransactions(true);
        boolean boolean20 = atomikosProperties17.enableLogging;
        boolean boolean21 = atomikosProperties17.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel22 = atomikosProperties17.consoleLogLevel;
        atomikosProperties10.setConsoleLogLevel(atomikosLoggingLevel22);
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel22;
        atomikosProperties0.setConsoleFileCount((int) (byte) 0);
        atomikosProperties0.setForceShutdownOnVmExit(true);
        atomikosProperties0.transactionManagerUniqueName = "{com.atomikos.icatch.{}=5}";
        java.lang.String str31 = atomikosProperties0.getService();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel22 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel22.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "{-1.0=100}" + "'", str31, "{-1.0=100}");
    }

    @Test
    public void test07897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07897");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setAllowSubTransactions(true);
        atomikosProperties0.maxActives = (short) -1;
        atomikosProperties0.setService("tm.out");
        java.lang.String str7 = atomikosProperties0.getService();
        atomikosProperties0.defaultJtaTimeout = 50;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean11 = atomikosProperties10.isThreadedTwoPhaseCommit();
        java.lang.String str12 = atomikosProperties10.logBaseDir;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery13 = atomikosProperties10.recovery;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel14 = atomikosProperties10.getConsoleLogLevel();
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel14);
        java.lang.String str16 = atomikosProperties0.getConsoleFileName();
        java.lang.String str17 = atomikosProperties0.consoleFileName;
        boolean boolean18 = atomikosProperties0.allowSubTransactions;
        java.lang.String str19 = atomikosProperties0.consoleFileName;
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "tm.out" + "'", str7, "tm.out");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(recovery13);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel14 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel14.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tm.out" + "'", str16, "tm.out");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tm.out" + "'", str17, "tm.out");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "tm.out" + "'", str19, "tm.out");
    }

    @Test
    public void test07898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07898");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        int int7 = atomikosProperties0.maxActives;
        atomikosProperties0.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.getRecovery();
        atomikosProperties0.forceShutdownOnVmExit = false;
        java.lang.String str13 = atomikosProperties0.service;
        atomikosProperties0.allowSubTransactions = false;
        atomikosProperties0.forceShutdownOnVmExit = false;
        atomikosProperties0.logBaseName = "";
        atomikosProperties0.setAllowSubTransactions(true);
        atomikosProperties0.consoleFileName = "";
        long long24 = atomikosProperties0.getCheckpointInterval();
        atomikosProperties0.enableLogging = false;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{-1.0=100}" + "'", str13, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 500L + "'", long24 == 500L);
    }

    @Test
    public void test07899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07899");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties0.setMaxActives(100);
        java.lang.String str9 = atomikosProperties0.logBaseDir;
        java.lang.String str10 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.checkpointInterval = 100L;
        atomikosProperties0.forceShutdownOnVmExit = false;
        boolean boolean15 = atomikosProperties0.threadedTwoPhaseCommit;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "tm.out" + "'", str10, "tm.out");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test07900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07900");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileName = "hi!";
        atomikosProperties0.service = "{-1.0=100}";
        atomikosProperties0.setOutputDir("{com.atomikos.icatch.console_file_name=hi!, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.output_dir=tm.out, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={-1.0=100}, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test07901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07901");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.retryInterval = (short) 100;
        recovery0.delay = (-1L);
        long long5 = recovery0.delay;
        recovery0.delay = (short) 1;
        long long8 = recovery0.getRetryInterval();
        long long9 = recovery0.getForgetOrphanedLogEntriesDelay();
        recovery0.setMaxRetries(10);
        int int12 = recovery0.maxRetries;
        int int13 = recovery0.getMaxRetries();
        long long14 = recovery0.getRetryInterval();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 86400000L + "'", long9 == 86400000L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 100L + "'", long14 == 100L);
    }

    @Test
    public void test07902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07902");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.retryInterval = (short) 100;
        recovery0.delay = (-1L);
        long long5 = recovery0.delay;
        recovery0.delay = (short) 1;
        long long8 = recovery0.getRetryInterval();
        int int9 = recovery0.maxRetries;
        long long10 = recovery0.getForgetOrphanedLogEntriesDelay();
        recovery0.setRetryInterval((long) 10);
        recovery0.delay = '4';
        long long15 = recovery0.retryInterval;
        int int16 = recovery0.getMaxRetries();
        recovery0.retryInterval = (byte) -1;
        recovery0.delay = 0L;
        recovery0.setRetryInterval((long) 1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5 + "'", int9 == 5);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 86400000L + "'", long10 == 86400000L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10L + "'", long15 == 10L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
    }

    @Test
    public void test07903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07903");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setAllowSubTransactions(true);
        boolean boolean3 = atomikosProperties0.enableLogging;
        atomikosProperties0.consoleFileLimit = (byte) 100;
        java.util.Properties properties6 = new java.util.Properties();
        java.lang.String str7 = properties6.toString();
        java.util.Properties properties8 = new java.util.Properties(properties6);
        java.util.Properties properties10 = new java.util.Properties();
        java.lang.String str11 = properties10.toString();
        java.lang.Object obj13 = properties10.remove((java.lang.Object) (short) 100);
        java.lang.Object obj16 = properties10.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean18 = properties10.containsKey((java.lang.Object) 0L);
        java.lang.Object obj21 = properties10.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties22 = new java.util.Properties(properties10);
        java.util.Enumeration<java.lang.Object> objEnumeration23 = properties22.elements();
        atomikosProperties0.set(properties8, "{={-1.0=100}, -1.0=100}", (java.lang.Object) properties22);
        int int25 = properties8.size();
        java.lang.Object obj28 = properties8.setProperty("tmlog", "hi!");
        int int29 = properties8.size();
        java.util.Properties properties30 = new java.util.Properties();
        java.lang.String str31 = properties30.toString();
        java.util.Properties properties32 = new java.util.Properties(properties30);
        java.util.Properties properties33 = new java.util.Properties();
        java.lang.String str34 = properties33.toString();
        java.lang.Object obj36 = properties33.remove((java.lang.Object) (short) 100);
        java.lang.Object obj39 = properties33.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean41 = properties33.containsKey((java.lang.Object) 0L);
        java.lang.Object obj44 = properties33.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj47 = properties33.setProperty("", "{-1.0=100}");
        java.util.Enumeration<java.lang.Object> objEnumeration48 = properties33.keys();
        java.util.Properties properties49 = new java.util.Properties();
        java.lang.String str50 = properties49.toString();
        boolean boolean51 = properties49.isEmpty();
        java.lang.Object obj54 = properties49.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration55 = properties49.elements();
        java.lang.Object obj56 = properties32.replace((java.lang.Object) objEnumeration48, (java.lang.Object) properties49);
        java.util.Enumeration<java.lang.Object> objEnumeration57 = properties49.elements();
        java.util.Enumeration<java.lang.Object> objEnumeration58 = properties49.keys();
        java.util.Properties properties59 = new java.util.Properties(properties49);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery60 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery60.retryInterval = (short) 100;
        recovery60.delay = (-1L);
        long long65 = recovery60.delay;
        recovery60.delay = (short) 1;
        long long68 = recovery60.getRetryInterval();
        long long69 = recovery60.getForgetOrphanedLogEntriesDelay();
        recovery60.setMaxRetries(10);
        int int72 = recovery60.maxRetries;
        long long73 = recovery60.getDelay();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties74 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties74.setEnableLogging(true);
        atomikosProperties74.transactionManagerUniqueName = "hi!";
        atomikosProperties74.logBaseName = "hi!";
        boolean boolean81 = properties8.replace((java.lang.Object) properties49, (java.lang.Object) long73, (java.lang.Object) "hi!");
        java.lang.Class<?> wildcardClass82 = properties8.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "{}" + "'", str7, "{}");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "{}" + "'", str11, "{}");
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNotNull(objEnumeration23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "{}" + "'", str31, "{}");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "{}" + "'", str34, "{}");
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNotNull(objEnumeration48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "{}" + "'", str50, "{}");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertNotNull(objEnumeration55);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertNotNull(objEnumeration57);
        org.junit.Assert.assertNotNull(objEnumeration58);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + (-1L) + "'", long65 == (-1L));
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 100L + "'", long68 == 100L);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 86400000L + "'", long69 == 86400000L);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 10 + "'", int72 == 10);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 1L + "'", long73 == 1L);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test07904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07904");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        long long7 = atomikosProperties0.getDefaultJtaTimeout();
        long long8 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties9 = new java.util.Properties();
        java.lang.Object obj11 = properties9.remove((java.lang.Object) (-1.0d));
        boolean boolean12 = properties9.isEmpty();
        java.lang.Object obj15 = properties9.setProperty("hi!", "{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties18 = atomikosProperties17.asProperties();
        atomikosProperties17.service = "{-1.0=100}";
        long long21 = atomikosProperties17.getDefaultJtaTimeout();
        atomikosProperties17.serialJtaTransactions = true;
        atomikosProperties17.maxActives = ' ';
        atomikosProperties0.set(properties9, "", (java.lang.Object) ' ');
        long long27 = atomikosProperties0.maxTimeout;
        atomikosProperties0.defaultJtaTimeout = 500L;
        atomikosProperties0.setService("{com.atomikos.icatch.={}, 100=100}");
        atomikosProperties0.consoleFileName = "";
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10000L + "'", long21 == 10000L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 300000L + "'", long27 == 300000L);
    }

    @Test
    public void test07905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07905");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj3 = properties0.setProperty("{}", "{}");
        java.util.Enumeration<java.lang.Object> objEnumeration4 = properties0.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties0.elements();
        java.util.Properties properties6 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties7.setEnableLogging(true);
        atomikosProperties7.setConsoleFileLimit((int) (short) 0);
        atomikosProperties7.outputDir = "tmlog";
        java.lang.String str14 = atomikosProperties7.getOutputDir();
        boolean boolean15 = properties0.contains((java.lang.Object) str14);
        java.util.Enumeration<?> wildcardEnumeration16 = properties0.propertyNames();
        java.lang.Object obj19 = properties0.setProperty("{1.0=-1, 10000=0}", "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties20.setEnableLogging(true);
        atomikosProperties20.consoleFileCount = 0;
        int int25 = atomikosProperties20.getMaxActives();
        java.lang.String str26 = atomikosProperties20.getLogBaseDir();
        java.lang.String str27 = atomikosProperties20.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery28 = atomikosProperties20.getRecovery();
        long long29 = atomikosProperties20.getDefaultJtaTimeout();
        atomikosProperties20.allowSubTransactions = false;
        java.util.Properties properties32 = atomikosProperties20.asProperties();
        atomikosProperties20.setForceShutdownOnVmExit(false);
        java.lang.Object obj35 = properties0.remove((java.lang.Object) atomikosProperties20);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNotNull(objEnumeration4);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "tmlog" + "'", str14, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(wildcardEnumeration16);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 50 + "'", int25 == 50);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(recovery28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 10000L + "'", long29 == 10000L);
        org.junit.Assert.assertNotNull(properties32);
        org.junit.Assert.assertNull(obj35);
    }

    @Test
    public void test07906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07906");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        boolean boolean5 = properties0.containsKey((java.lang.Object) 0L);
        java.util.Set<java.lang.Object> objSet6 = properties0.keySet();
        java.util.Enumeration<?> wildcardEnumeration7 = properties0.propertyNames();
        java.io.OutputStream outputStream8 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.save(outputStream8, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, false={100=100}, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objSet6);
        org.junit.Assert.assertNotNull(wildcardEnumeration7);
    }

    @Test
    public void test07907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07907");
        java.util.Properties properties0 = new java.util.Properties();
        properties0.clear();
        java.lang.String str2 = properties0.toString();
        int int3 = properties0.size();
        java.util.Properties properties4 = new java.util.Properties();
        java.lang.String str5 = properties4.toString();
        java.lang.Object obj7 = properties4.remove((java.lang.Object) (short) 100);
        java.lang.Object obj10 = properties4.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        java.util.Properties properties12 = new java.util.Properties();
        java.lang.String str13 = properties12.toString();
        java.lang.Object obj15 = properties12.remove((java.lang.Object) (short) 100);
        java.lang.Object obj18 = properties12.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj19 = properties12.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration20 = properties12.elements();
        java.lang.Object obj21 = properties4.putIfAbsent((java.lang.Object) 10.0f, (java.lang.Object) objEnumeration20);
        java.util.Properties properties22 = new java.util.Properties();
        java.util.Enumeration<?> wildcardEnumeration23 = properties22.propertyNames();
        java.lang.Object obj24 = properties22.clone();
        java.util.Properties properties25 = new java.util.Properties();
        java.lang.String str26 = properties25.toString();
        boolean boolean27 = properties25.isEmpty();
        java.lang.Object obj30 = properties25.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration31 = properties25.elements();
        java.lang.Object obj32 = properties4.put(obj24, (java.lang.Object) objEnumeration31);
        properties4.clear();
        java.util.Properties properties34 = new java.util.Properties();
        java.util.Properties properties35 = new java.util.Properties();
        java.lang.Object obj37 = properties35.remove((java.lang.Object) (-1.0d));
        int int38 = properties35.size();
        java.util.Enumeration<java.lang.Object> objEnumeration39 = properties35.elements();
        java.util.Properties properties40 = new java.util.Properties();
        properties40.clear();
        java.lang.String str42 = properties40.toString();
        boolean boolean43 = properties4.replace((java.lang.Object) properties34, (java.lang.Object) properties35, (java.lang.Object) str42);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean45 = atomikosProperties44.isSerialJtaTransactions();
        atomikosProperties44.logBaseName = "{-1.0=100}";
        int int48 = atomikosProperties44.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery49 = atomikosProperties44.getRecovery();
        atomikosProperties44.setConsoleFileCount((int) (byte) 100);
        atomikosProperties44.setAllowSubTransactions(true);
        atomikosProperties44.setService("tm.out");
        boolean boolean56 = atomikosProperties44.isForceShutdownOnVmExit();
        java.util.Properties properties57 = new java.util.Properties();
        java.lang.String str58 = properties57.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties59 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties60 = atomikosProperties59.asProperties();
        atomikosProperties59.service = "{-1.0=100}";
        long long63 = atomikosProperties59.getDefaultJtaTimeout();
        atomikosProperties59.setThreadedTwoPhaseCommit(true);
        boolean boolean66 = atomikosProperties59.isEnableLogging();
        atomikosProperties59.defaultJtaTimeout = (byte) 10;
        boolean boolean69 = properties35.replace((java.lang.Object) boolean56, (java.lang.Object) properties57, (java.lang.Object) (byte) 10);
        java.lang.Object obj70 = properties35.clone();
        java.lang.Object obj71 = properties0.get((java.lang.Object) properties35);
        java.lang.Object obj72 = properties0.clone();
        java.lang.String str73 = properties0.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{}" + "'", str2, "{}");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{}" + "'", str5, "{}");
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{}" + "'", str13, "{}");
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration20);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNotNull(wildcardEnumeration23);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "{}");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "{}" + "'", str26, "{}");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNotNull(objEnumeration31);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(objEnumeration39);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "{}" + "'", str42, "{}");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 50 + "'", int48 == 50);
        org.junit.Assert.assertNotNull(recovery49);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "{}" + "'", str58, "{}");
        org.junit.Assert.assertNotNull(properties60);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 10000L + "'", long63 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(obj70);
        org.junit.Assert.assertEquals(obj70.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj70), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj70), "{}");
        org.junit.Assert.assertNull(obj71);
        org.junit.Assert.assertNotNull(obj72);
        org.junit.Assert.assertEquals(obj72.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj72), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj72), "{}");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "{}" + "'", str73, "{}");
    }

    @Test
    public void test07908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07908");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.retryInterval = (short) 100;
        recovery0.delay = (-1L);
        recovery0.setForgetOrphanedLogEntriesDelay(32L);
        long long7 = recovery0.getRetryInterval();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L + "'", long7 == 100L);
    }

    @Test
    public void test07909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07909");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        int int7 = atomikosProperties0.maxActives;
        atomikosProperties0.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.getRecovery();
        atomikosProperties0.consoleFileName = "{-1.0=100}";
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel13 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel13);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel15 = atomikosProperties0.getConsoleLogLevel();
        int int16 = atomikosProperties0.consoleFileLimit;
        atomikosProperties0.setDefaultJtaTimeout((long) 'a');
        java.lang.String str19 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.enableLogging = true;
        atomikosProperties0.setMaxTimeout((long) (byte) 1);
        int int24 = atomikosProperties0.maxActives;
        atomikosProperties0.service = "hi!";
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertNull(atomikosLoggingLevel15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "{-1.0=100}" + "'", str19, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 50 + "'", int24 == 50);
    }

    @Test
    public void test07910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07910");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Enumeration<?> wildcardEnumeration1 = properties0.propertyNames();
        java.lang.Object obj2 = properties0.clone();
        java.util.Collection<java.lang.Object> objCollection3 = properties0.values();
        java.util.Enumeration<java.lang.Object> objEnumeration4 = properties0.keys();
        java.util.Properties properties5 = new java.util.Properties();
        java.lang.String str6 = properties5.toString();
        java.lang.Object obj8 = properties5.remove((java.lang.Object) (short) 100);
        java.lang.Object obj11 = properties5.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean13 = properties5.containsKey((java.lang.Object) 0L);
        java.lang.Object obj16 = properties5.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj19 = properties5.setProperty("", "{-1.0=100}");
        java.lang.Object obj20 = properties5.clone();
        java.util.Collection<java.lang.Object> objCollection21 = properties5.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet22 = properties5.entrySet();
        java.lang.String str24 = properties5.getProperty("{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}");
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet25 = properties5.entrySet();
        boolean boolean26 = properties0.equals((java.lang.Object) properties5);
        java.util.Properties properties27 = new java.util.Properties();
        java.lang.String str28 = properties27.toString();
        java.lang.Object obj30 = properties27.remove((java.lang.Object) (short) 100);
        java.lang.Object obj33 = properties27.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean35 = properties27.containsKey((java.lang.Object) 0L);
        java.lang.Object obj38 = properties27.replace((java.lang.Object) false, (java.lang.Object) ' ');
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties39 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties39.setEnableLogging(true);
        atomikosProperties39.setConsoleFileLimit((int) (short) 0);
        boolean boolean44 = properties27.contains((java.lang.Object) atomikosProperties39);
        properties27.clear();
        boolean boolean46 = properties5.containsKey((java.lang.Object) properties27);
        java.io.OutputStream outputStream47 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties27.store(outputStream47, "{{1.0=-1, -1.0=100}={1.0=-1}, 1.0=-1}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardEnumeration1);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "{}");
        org.junit.Assert.assertNotNull(objCollection3);
        org.junit.Assert.assertNotNull(objEnumeration4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "{}" + "'", str6, "{}");
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNotNull(obj20);
// flaky:         org.junit.Assert.assertEquals(obj20.toString(), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNotNull(objCollection21);
        org.junit.Assert.assertNotNull(objEntrySet22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(objEntrySet25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "{}" + "'", str28, "{}");
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test07911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07911");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getLogBaseName();
        long long5 = atomikosProperties0.defaultJtaTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel6 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel6);
        atomikosProperties0.threadedTwoPhaseCommit = false;
        atomikosProperties0.allowSubTransactions = false;
        boolean boolean12 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.setForceShutdownOnVmExit(false);
        int int15 = atomikosProperties0.getConsoleFileLimit();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tmlog" + "'", str4, "tmlog");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 10000L + "'", long5 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
    }

    @Test
    public void test07912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07912");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        atomikosProperties2.service = "{-1.0=100}";
        long long6 = atomikosProperties2.getDefaultJtaTimeout();
        atomikosProperties2.consoleFileLimit = '#';
        java.lang.Object obj9 = properties1.get((java.lang.Object) atomikosProperties2);
        boolean boolean10 = atomikosProperties2.forceShutdownOnVmExit;
        atomikosProperties2.setOutputDir("");
        long long13 = atomikosProperties2.defaultJtaTimeout;
        java.lang.String str14 = atomikosProperties2.getLogBaseName();
        atomikosProperties2.serialJtaTransactions = true;
        java.lang.String str17 = atomikosProperties2.transactionManagerUniqueName;
        atomikosProperties2.setMaxActives(10);
        atomikosProperties2.service = "{-1.0=100}";
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery22 = atomikosProperties2.recovery;
        recovery22.retryInterval = 'a';
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10000L + "'", long13 == 10000L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "tmlog" + "'", str14, "tmlog");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(recovery22);
    }

    @Test
    public void test07913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07913");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj14 = properties0.setProperty("", "{-1.0=100}");
        java.lang.Object obj15 = properties0.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery16 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery16.retryInterval = (short) 100;
        recovery16.forgetOrphanedLogEntriesDelay = 'a';
        boolean boolean21 = properties0.equals((java.lang.Object) 'a');
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery22 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery22.retryInterval = (short) 100;
        recovery22.forgetOrphanedLogEntriesDelay = 'a';
        long long27 = recovery22.getDelay();
        int int28 = recovery22.maxRetries;
        int int29 = recovery22.maxRetries;
        long long30 = recovery22.getRetryInterval();
        java.util.Properties properties31 = new java.util.Properties();
        java.util.Enumeration<?> wildcardEnumeration32 = properties31.propertyNames();
        java.lang.Object obj33 = properties0.put((java.lang.Object) long30, (java.lang.Object) wildcardEnumeration32);
        java.util.Properties properties34 = new java.util.Properties(properties0);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet35 = properties0.entrySet();
        java.lang.Object obj36 = properties0.clone();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(obj15);
// flaky:         org.junit.Assert.assertEquals(obj15.toString(), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10000L + "'", long27 == 10000L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5 + "'", int28 == 5);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5 + "'", int29 == 5);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 100L + "'", long30 == 100L);
        org.junit.Assert.assertNotNull(wildcardEnumeration32);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNotNull(objEntrySet35);
        org.junit.Assert.assertNotNull(obj36);
    }

    @Test
    public void test07914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07914");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj14 = properties0.setProperty("", "{-1.0=100}");
        java.lang.String str15 = properties0.toString();
        java.util.Set<java.lang.String> strSet16 = properties0.stringPropertyNames();
        java.util.Properties properties18 = new java.util.Properties();
        java.util.Properties properties19 = new java.util.Properties();
        java.lang.String str20 = properties19.toString();
        boolean boolean21 = properties19.isEmpty();
        java.util.Properties properties22 = new java.util.Properties();
        java.lang.String str23 = properties22.toString();
        java.lang.Object obj25 = properties22.remove((java.lang.Object) (short) 100);
        java.lang.Object obj28 = properties22.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean30 = properties22.containsKey((java.lang.Object) 0L);
        boolean boolean31 = properties19.containsValue((java.lang.Object) 0L);
        boolean boolean34 = properties18.replace((java.lang.Object) 0L, (java.lang.Object) 0.0f, (java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration35 = properties18.elements();
        java.lang.Class<?> wildcardClass36 = objEnumeration35.getClass();
        java.lang.Object obj37 = properties0.replace((java.lang.Object) 500L, (java.lang.Object) objEnumeration35);
        java.util.Properties properties38 = new java.util.Properties();
        java.lang.String str39 = properties38.toString();
        java.lang.Object obj41 = properties38.remove((java.lang.Object) (short) 100);
        java.lang.Object obj44 = properties38.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean46 = properties38.containsKey((java.lang.Object) 0L);
        java.lang.Object obj49 = properties38.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj52 = properties38.setProperty("", "{-1.0=100}");
        java.lang.String str53 = properties38.toString();
        boolean boolean54 = properties0.contains((java.lang.Object) properties38);
        java.lang.String str55 = properties38.toString();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{={-1.0=100}, -1.0=100}" + "'", str15, "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{}" + "'", str20, "{}");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "{}" + "'", str23, "{}");
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(objEnumeration35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "{}" + "'", str39, "{}");
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertNull(obj52);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "{={-1.0=100}, -1.0=100}" + "'", str53, "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "{={-1.0=100}, -1.0=100}" + "'", str55, "{={-1.0=100}, -1.0=100}");
    }

    @Test
    public void test07915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07915");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj4 = properties0.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties6 = atomikosProperties5.asProperties();
        atomikosProperties5.service = "{-1.0=100}";
        long long9 = atomikosProperties5.getDefaultJtaTimeout();
        atomikosProperties5.setThreadedTwoPhaseCommit(true);
        boolean boolean12 = atomikosProperties5.isAllowSubTransactions();
        boolean boolean13 = atomikosProperties5.isEnableLogging();
        atomikosProperties5.allowSubTransactions = false;
        java.lang.Object obj16 = properties0.remove((java.lang.Object) false);
        java.util.Properties properties17 = new java.util.Properties();
        java.lang.String str18 = properties17.toString();
        java.lang.Object obj20 = properties17.remove((java.lang.Object) (short) 100);
        java.lang.Object obj21 = properties17.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties23 = atomikosProperties22.asProperties();
        atomikosProperties22.service = "{-1.0=100}";
        long long26 = atomikosProperties22.getDefaultJtaTimeout();
        atomikosProperties22.setThreadedTwoPhaseCommit(true);
        boolean boolean29 = atomikosProperties22.isAllowSubTransactions();
        boolean boolean30 = atomikosProperties22.isEnableLogging();
        atomikosProperties22.allowSubTransactions = false;
        java.lang.Object obj33 = properties17.remove((java.lang.Object) false);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties17);
        java.util.Properties properties35 = new java.util.Properties();
        java.lang.String str36 = properties35.toString();
        java.lang.Object obj38 = properties35.remove((java.lang.Object) (short) 100);
        java.lang.Object obj41 = properties35.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj42 = properties35.clone();
        java.lang.String str44 = properties35.getProperty("{}");
        java.lang.Object obj47 = properties35.put((java.lang.Object) 86400000L, (java.lang.Object) "{-1.0=100}");
        java.util.Properties properties48 = new java.util.Properties();
        java.util.Properties properties49 = new java.util.Properties();
        java.lang.String str50 = properties49.toString();
        java.lang.Object obj52 = properties49.remove((java.lang.Object) (short) 100);
        java.lang.Object obj55 = properties49.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        int int56 = properties49.size();
        java.util.Properties properties57 = new java.util.Properties();
        java.lang.Object obj59 = properties57.remove((java.lang.Object) (-1.0d));
        boolean boolean60 = properties57.isEmpty();
        java.lang.Object obj63 = properties57.setProperty("hi!", "{}");
        boolean boolean64 = properties48.remove((java.lang.Object) int56, (java.lang.Object) properties57);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties65 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties65.setAllowSubTransactions(true);
        atomikosProperties65.maxActives = (short) -1;
        atomikosProperties65.setService("tm.out");
        boolean boolean72 = properties57.containsValue((java.lang.Object) atomikosProperties65);
        atomikosProperties65.setThreadedTwoPhaseCommit(true);
        java.lang.String str75 = atomikosProperties65.service;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj76 = properties17.put(obj47, (java.lang.Object) atomikosProperties65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "{}");
        org.junit.Assert.assertNotNull(properties6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10000L + "'", long9 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "{}" + "'", str18, "{}");
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "{}");
        org.junit.Assert.assertNotNull(properties23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 10000L + "'", long26 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "{}" + "'", str36, "{}");
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "{1.0=-1}");
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "{}" + "'", str50, "{}");
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "tm.out" + "'", str75, "tm.out");
    }

    @Test
    public void test07916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07916");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        long long5 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.threadedTwoPhaseCommit = true;
        atomikosProperties0.setSerialJtaTransactions(true);
        atomikosProperties0.maxActives = '#';
        int int12 = atomikosProperties0.getConsoleFileLimit();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test07917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07917");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        boolean boolean7 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.defaultJtaTimeout = (byte) 10;
        java.lang.String str10 = atomikosProperties0.transactionManagerUniqueName;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery11 = atomikosProperties0.getRecovery();
        atomikosProperties0.setConsoleFileCount((int) (short) 0);
        boolean boolean14 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.setForceShutdownOnVmExit(true);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(recovery11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test07918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07918");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj3 = properties0.setProperty("{}", "{}");
        java.util.Enumeration<java.lang.Object> objEnumeration4 = properties0.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties0.elements();
        java.util.Properties properties6 = new java.util.Properties(properties0);
        java.util.Set<java.lang.String> strSet7 = properties6.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties8.setEnableLogging(true);
        atomikosProperties8.consoleFileCount = 0;
        int int13 = atomikosProperties8.getMaxActives();
        java.lang.String str14 = atomikosProperties8.getLogBaseDir();
        java.lang.String str15 = atomikosProperties8.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery16 = atomikosProperties8.getRecovery();
        boolean boolean17 = atomikosProperties8.serialJtaTransactions;
        atomikosProperties8.defaultJtaTimeout = 1;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties21 = atomikosProperties20.asProperties();
        atomikosProperties20.service = "{-1.0=100}";
        long long24 = atomikosProperties20.getDefaultJtaTimeout();
        atomikosProperties20.setThreadedTwoPhaseCommit(true);
        boolean boolean27 = atomikosProperties20.isEnableLogging();
        atomikosProperties20.defaultJtaTimeout = (byte) 10;
        java.lang.Object obj30 = properties6.getOrDefault((java.lang.Object) 1, (java.lang.Object) atomikosProperties20);
        java.io.InputStream inputStream31 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties6.load(inputStream31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNotNull(objEnumeration4);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 50 + "'", int13 == 50);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(recovery16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(properties21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 10000L + "'", long24 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(obj30);
    }

    @Test
    public void test07919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07919");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        boolean boolean2 = properties0.isEmpty();
        java.util.Properties properties3 = new java.util.Properties();
        java.lang.String str4 = properties3.toString();
        java.lang.Object obj6 = properties3.remove((java.lang.Object) (short) 100);
        java.lang.Object obj9 = properties3.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean11 = properties3.containsKey((java.lang.Object) 0L);
        boolean boolean12 = properties0.containsValue((java.lang.Object) 0L);
        java.util.Set<java.lang.String> strSet13 = properties0.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties15 = atomikosProperties14.asProperties();
        atomikosProperties14.service = "{-1.0=100}";
        java.lang.String str18 = atomikosProperties14.getLogBaseName();
        java.lang.String str19 = atomikosProperties14.transactionManagerUniqueName;
        atomikosProperties14.consoleFileName = "";
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties22.setAllowSubTransactions(true);
        atomikosProperties22.logBaseName = "{={-1.0=100}, -1.0=100}";
        int int27 = atomikosProperties22.getConsoleFileLimit();
        java.lang.Object obj28 = properties0.putIfAbsent((java.lang.Object) atomikosProperties14, (java.lang.Object) atomikosProperties22);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery29 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long30 = recovery29.getRetryInterval();
        long long31 = recovery29.getDelay();
        long long32 = recovery29.getDelay();
        recovery29.setForgetOrphanedLogEntriesDelay(10000L);
        recovery29.retryInterval = '4';
        recovery29.setRetryInterval((long) (short) 0);
        recovery29.setMaxRetries(0);
        recovery29.setDelay((long) 2);
        java.lang.Object obj43 = properties0.get((java.lang.Object) recovery29);
        java.lang.String str46 = properties0.getProperty("{com.atomikos.icatch.tm.out=hi!}", "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=true, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=35, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=10, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={-1.0=100}, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{}" + "'", str4, "{}");
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "tmlog" + "'", str18, "tmlog");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 10000L + "'", long30 == 10000L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 10000L + "'", long31 == 10000L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 10000L + "'", long32 == 10000L);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=true, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=35, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=10, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={-1.0=100}, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}" + "'", str46, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=true, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=35, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=10, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={-1.0=100}, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
    }

    @Test
    public void test07920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07920");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery4 = atomikosProperties0.recovery;
        atomikosProperties0.forceShutdownOnVmExit = false;
        boolean boolean7 = atomikosProperties0.isAllowSubTransactions();
        atomikosProperties0.defaultJtaTimeout = (short) 100;
        atomikosProperties0.setMaxTimeout(0L);
        boolean boolean12 = atomikosProperties0.isAllowSubTransactions();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNotNull(recovery4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test07921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07921");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        atomikosProperties0.setConsoleFileCount((int) (byte) 100);
        atomikosProperties0.setAllowSubTransactions(true);
        long long10 = atomikosProperties0.getCheckpointInterval();
        long long11 = atomikosProperties0.defaultJtaTimeout;
        long long12 = atomikosProperties0.getCheckpointInterval();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 500L + "'", long10 == 500L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10000L + "'", long11 == 10000L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 500L + "'", long12 == 500L);
    }

    @Test
    public void test07922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07922");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj3 = properties0.setProperty("{}", "{}");
        java.util.Enumeration<java.lang.Object> objEnumeration4 = properties0.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties0.elements();
        java.util.Properties properties6 = new java.util.Properties(properties0);
        java.util.Set<java.lang.Object> objSet7 = properties0.keySet();
        java.util.Set<java.lang.String> strSet8 = properties0.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery9 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery9.retryInterval = (short) 100;
        recovery9.forgetOrphanedLogEntriesDelay = 'a';
        long long14 = recovery9.retryInterval;
        int int15 = recovery9.maxRetries;
        boolean boolean16 = properties0.containsKey((java.lang.Object) int15);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties18 = atomikosProperties17.asProperties();
        atomikosProperties17.service = "{-1.0=100}";
        long long21 = atomikosProperties17.getDefaultJtaTimeout();
        atomikosProperties17.setThreadedTwoPhaseCommit(true);
        boolean boolean24 = atomikosProperties17.isAllowSubTransactions();
        boolean boolean25 = atomikosProperties17.isEnableLogging();
        atomikosProperties17.allowSubTransactions = false;
        atomikosProperties17.threadedTwoPhaseCommit = true;
        atomikosProperties17.setLogBaseName("tm.out");
        java.lang.String str32 = atomikosProperties17.getLogBaseDir();
        atomikosProperties17.allowSubTransactions = true;
        boolean boolean35 = properties0.containsKey((java.lang.Object) atomikosProperties17);
        java.lang.String str36 = atomikosProperties17.consoleFileName;
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNotNull(objEnumeration4);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNotNull(objSet7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 100L + "'", long14 == 100L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5 + "'", int15 == 5);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10000L + "'", long21 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "tm.out" + "'", str36, "tm.out");
    }

    @Test
    public void test07923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07923");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.enableLogging = false;
        atomikosProperties0.setMaxTimeout((long) (byte) 0);
        atomikosProperties0.setAllowSubTransactions(true);
        java.util.Properties properties11 = new java.util.Properties();
        java.lang.Object obj13 = properties11.remove((java.lang.Object) (-1.0d));
        boolean boolean14 = properties11.isEmpty();
        java.util.Properties properties15 = new java.util.Properties();
        java.lang.String str16 = properties15.toString();
        java.lang.Object obj18 = properties15.remove((java.lang.Object) (short) 100);
        java.lang.Object obj21 = properties15.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean23 = properties15.containsKey((java.lang.Object) 0L);
        java.lang.Object obj26 = properties15.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj29 = properties15.setProperty("", "{-1.0=100}");
        java.lang.Object obj30 = properties15.clone();
        java.lang.Object obj31 = properties11.get((java.lang.Object) properties15);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery33 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery33.retryInterval = (short) 100;
        recovery33.forgetOrphanedLogEntriesDelay = 'a';
        long long38 = recovery33.getDelay();
        long long39 = recovery33.getRetryInterval();
        recovery33.forgetOrphanedLogEntriesDelay = 10000L;
        atomikosProperties0.set(properties15, "tmlog", (java.lang.Object) recovery33);
        java.lang.String str43 = atomikosProperties0.getTransactionManagerUniqueName();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{}" + "'", str16, "{}");
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNotNull(obj30);
// flaky:         org.junit.Assert.assertEquals(obj30.toString(), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 10000L + "'", long38 == 10000L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 100L + "'", long39 == 100L);
        org.junit.Assert.assertNull(str43);
    }

    @Test
    public void test07924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07924");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.remove((java.lang.Object) (-1.0d));
        java.util.Enumeration<?> wildcardEnumeration3 = properties0.propertyNames();
        java.util.Set<java.lang.Object> objSet4 = properties0.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties6 = atomikosProperties5.asProperties();
        atomikosProperties5.service = "{-1.0=100}";
        java.lang.String str9 = atomikosProperties5.getLogBaseName();
        long long10 = atomikosProperties5.defaultJtaTimeout;
        long long11 = atomikosProperties5.getMaxTimeout();
        atomikosProperties5.allowSubTransactions = true;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel14 = atomikosProperties5.consoleLogLevel;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties16 = atomikosProperties15.asProperties();
        atomikosProperties15.service = "{-1.0=100}";
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery19 = atomikosProperties15.recovery;
        atomikosProperties15.enableLogging = true;
        java.lang.String str22 = atomikosProperties15.getService();
        int int23 = atomikosProperties15.consoleFileLimit;
        java.lang.Object obj24 = properties0.putIfAbsent((java.lang.Object) atomikosLoggingLevel14, (java.lang.Object) atomikosProperties15);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties26 = atomikosProperties25.asProperties();
        atomikosProperties25.service = "{-1.0=100}";
        long long29 = atomikosProperties25.getDefaultJtaTimeout();
        atomikosProperties25.enableLogging = false;
        atomikosProperties25.setMaxTimeout((long) (byte) 0);
        long long34 = atomikosProperties25.getDefaultJtaTimeout();
        boolean boolean35 = atomikosProperties25.isAllowSubTransactions();
        long long36 = atomikosProperties25.maxTimeout;
        boolean boolean37 = properties0.equals((java.lang.Object) atomikosProperties25);
        java.io.Writer writer38 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.store(writer38, "{com.atomikos.icatch.tm.out={}}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNotNull(wildcardEnumeration3);
        org.junit.Assert.assertNotNull(objSet4);
        org.junit.Assert.assertNotNull(properties6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tmlog" + "'", str9, "tmlog");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 300000L + "'", long11 == 300000L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel14 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel14.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertNotNull(recovery19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{-1.0=100}" + "'", str22, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(properties26);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 10000L + "'", long29 == 10000L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 10000L + "'", long34 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test07925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07925");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        boolean boolean2 = properties0.isEmpty();
        java.lang.Object obj5 = properties0.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Properties properties6 = new java.util.Properties();
        java.lang.Object obj8 = properties6.remove((java.lang.Object) (-1.0d));
        boolean boolean9 = properties6.isEmpty();
        java.lang.Object obj12 = properties6.setProperty("hi!", "{}");
        java.lang.Object obj14 = properties0.getOrDefault((java.lang.Object) "hi!", (java.lang.Object) 100.0d);
        properties0.clear();
        java.util.Properties properties16 = new java.util.Properties();
        java.lang.String str17 = properties16.toString();
        java.util.Properties properties18 = new java.util.Properties(properties16);
        boolean boolean19 = properties18.isEmpty();
        java.lang.Object obj22 = properties18.setProperty("tmlog", "{}");
        boolean boolean23 = properties0.containsValue((java.lang.Object) properties18);
        java.util.Properties properties24 = new java.util.Properties();
        java.lang.Object obj27 = properties24.setProperty("{}", "{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery28 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery28.retryInterval = (short) 100;
        recovery28.setForgetOrphanedLogEntriesDelay((long) 5);
        recovery28.setForgetOrphanedLogEntriesDelay((long) (short) 0);
        java.util.Properties properties35 = new java.util.Properties();
        java.lang.String str36 = properties35.toString();
        java.lang.Object obj38 = properties35.remove((java.lang.Object) (short) 100);
        java.util.Properties properties39 = new java.util.Properties();
        java.lang.String str40 = properties39.toString();
        boolean boolean41 = properties39.isEmpty();
        java.lang.Object obj44 = properties39.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration45 = properties39.elements();
        boolean boolean46 = properties35.containsKey((java.lang.Object) properties39);
        java.lang.Object obj47 = properties24.putIfAbsent((java.lang.Object) (short) 0, (java.lang.Object) properties39);
        int int48 = properties24.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties50 = atomikosProperties49.asProperties();
        atomikosProperties49.service = "{-1.0=100}";
        long long53 = atomikosProperties49.getDefaultJtaTimeout();
        atomikosProperties49.outputDir = "{={-1.0=100}, -1.0=100}";
        long long56 = atomikosProperties49.getCheckpointInterval();
        atomikosProperties49.setConsoleFileCount((int) (byte) 1);
        boolean boolean59 = atomikosProperties49.threadedTwoPhaseCommit;
        int int60 = atomikosProperties49.getMaxActives();
        boolean boolean61 = atomikosProperties49.isAllowSubTransactions();
        java.util.Properties properties62 = new java.util.Properties();
        java.lang.Object obj64 = properties62.remove((java.lang.Object) (-1.0d));
        java.util.Enumeration<?> wildcardEnumeration65 = properties62.propertyNames();
        boolean boolean66 = properties0.replace((java.lang.Object) int48, (java.lang.Object) atomikosProperties49, (java.lang.Object) properties62);
        java.util.Collection<java.lang.Object> objCollection67 = properties0.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties68 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties69 = atomikosProperties68.asProperties();
        atomikosProperties68.service = "{-1.0=100}";
        long long72 = atomikosProperties68.getDefaultJtaTimeout();
        atomikosProperties68.serialJtaTransactions = true;
        long long75 = atomikosProperties68.maxTimeout;
        atomikosProperties68.setLogBaseDir("{-1.0=100}");
        int int78 = atomikosProperties68.getConsoleFileCount();
        atomikosProperties68.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties81 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties82 = atomikosProperties81.asProperties();
        atomikosProperties81.service = "{-1.0=100}";
        long long85 = atomikosProperties81.getDefaultJtaTimeout();
        atomikosProperties81.setTransactionManagerUniqueName("{}");
        atomikosProperties81.consoleFileName = "hi!";
        int int90 = atomikosProperties81.getConsoleFileCount();
        boolean boolean91 = atomikosProperties81.isThreadedTwoPhaseCommit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel92 = atomikosProperties81.consoleLogLevel;
        atomikosProperties68.consoleLogLevel = atomikosLoggingLevel92;
        atomikosProperties68.setMaxTimeout(500L);
        boolean boolean96 = properties0.containsKey((java.lang.Object) atomikosProperties68);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel97 = atomikosProperties68.getConsoleLogLevel();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + 100.0d + "'", obj14, 100.0d);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "{}" + "'", str17, "{}");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "{}" + "'", str36, "{}");
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "{}" + "'", str40, "{}");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNotNull(objEnumeration45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(properties50);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 10000L + "'", long53 == 10000L);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 500L + "'", long56 == 500L);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 50 + "'", int60 == 50);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNull(obj64);
        org.junit.Assert.assertNotNull(wildcardEnumeration65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(objCollection67);
        org.junit.Assert.assertNotNull(properties69);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 10000L + "'", long72 == 10000L);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 300000L + "'", long75 == 300000L);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(properties82);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 10000L + "'", long85 == 10000L);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel92 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel92.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel97 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel97.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
    }

    @Test
    public void test07926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07926");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setEnableLogging(true);
        atomikosProperties12.setConsoleFileLimit((int) (short) 0);
        boolean boolean17 = properties0.contains((java.lang.Object) atomikosProperties12);
        java.util.Properties properties18 = new java.util.Properties();
        java.lang.String str19 = properties18.toString();
        java.util.Properties properties20 = new java.util.Properties(properties18);
        java.util.Set<java.lang.String> strSet21 = properties20.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties23 = atomikosProperties22.asProperties();
        atomikosProperties22.service = "{-1.0=100}";
        long long26 = atomikosProperties22.getDefaultJtaTimeout();
        atomikosProperties22.enableLogging = false;
        atomikosProperties22.setMaxTimeout((long) (byte) 0);
        atomikosProperties22.setAllowSubTransactions(true);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties34 = atomikosProperties33.asProperties();
        atomikosProperties33.service = "{-1.0=100}";
        java.lang.String str37 = atomikosProperties33.getTransactionManagerUniqueName();
        boolean boolean38 = atomikosProperties33.isSerialJtaTransactions();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel39 = atomikosProperties33.getConsoleLogLevel();
        atomikosProperties22.consoleLogLevel = atomikosLoggingLevel39;
        long long41 = atomikosProperties22.checkpointInterval;
        atomikosProperties22.service = "tm.out";
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties45 = atomikosProperties44.asProperties();
        atomikosProperties44.service = "{-1.0=100}";
        java.lang.String str48 = atomikosProperties44.getLogBaseName();
        long long49 = atomikosProperties44.defaultJtaTimeout;
        long long50 = atomikosProperties44.getMaxTimeout();
        boolean boolean51 = atomikosProperties44.forceShutdownOnVmExit;
        atomikosProperties44.setService("{-1.0=100}");
        atomikosProperties44.setOutputDir("{}");
        boolean boolean56 = properties0.replace((java.lang.Object) properties20, (java.lang.Object) "tm.out", (java.lang.Object) atomikosProperties44);
        java.lang.String str58 = properties0.getProperty("tmlog");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties59 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties60 = atomikosProperties59.asProperties();
        atomikosProperties59.service = "{-1.0=100}";
        long long63 = atomikosProperties59.getDefaultJtaTimeout();
        atomikosProperties59.setThreadedTwoPhaseCommit(true);
        boolean boolean66 = atomikosProperties59.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery67 = atomikosProperties59.recovery;
        boolean boolean68 = atomikosProperties59.threadedTwoPhaseCommit;
        atomikosProperties59.service = "{-1.0=100}";
        atomikosProperties59.setThreadedTwoPhaseCommit(false);
        atomikosProperties59.logBaseName = "hi!";
        atomikosProperties59.setEnableLogging(true);
        java.lang.String str77 = atomikosProperties59.transactionManagerUniqueName;
        boolean boolean78 = properties0.equals((java.lang.Object) atomikosProperties59);
        long long79 = atomikosProperties59.getMaxTimeout();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "{}" + "'", str19, "{}");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(properties23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 10000L + "'", long26 == 10000L);
        org.junit.Assert.assertNotNull(properties34);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel39 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel39.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 500L + "'", long41 == 500L);
        org.junit.Assert.assertNotNull(properties45);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "tmlog" + "'", str48, "tmlog");
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 10000L + "'", long49 == 10000L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 300000L + "'", long50 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(properties60);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 10000L + "'", long63 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(recovery67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 300000L + "'", long79 == 300000L);
    }

    @Test
    public void test07927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07927");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        boolean boolean2 = properties0.isEmpty();
        java.lang.Object obj5 = properties0.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Properties properties6 = new java.util.Properties();
        java.lang.String str7 = properties6.toString();
        java.lang.Object obj9 = properties6.remove((java.lang.Object) (short) 100);
        java.lang.Object obj12 = properties6.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean14 = properties6.containsKey((java.lang.Object) 0L);
        java.lang.Object obj17 = properties6.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties18 = new java.util.Properties(properties6);
        boolean boolean19 = properties0.containsValue((java.lang.Object) properties6);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet20 = properties0.entrySet();
        java.io.OutputStream outputStream21 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.store(outputStream21, "{={-1.0=100}, -1.0=100}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "{}" + "'", str7, "{}");
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objEntrySet20);
    }

    @Test
    public void test07928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07928");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setAllowSubTransactions(true);
        boolean boolean3 = atomikosProperties0.enableLogging;
        atomikosProperties0.consoleFileLimit = (byte) 100;
        java.util.Properties properties6 = new java.util.Properties();
        java.lang.String str7 = properties6.toString();
        java.util.Properties properties8 = new java.util.Properties(properties6);
        java.util.Properties properties10 = new java.util.Properties();
        java.lang.String str11 = properties10.toString();
        java.lang.Object obj13 = properties10.remove((java.lang.Object) (short) 100);
        java.lang.Object obj16 = properties10.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean18 = properties10.containsKey((java.lang.Object) 0L);
        java.lang.Object obj21 = properties10.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties22 = new java.util.Properties(properties10);
        java.util.Enumeration<java.lang.Object> objEnumeration23 = properties22.elements();
        atomikosProperties0.set(properties8, "{={-1.0=100}, -1.0=100}", (java.lang.Object) properties22);
        int int25 = properties8.size();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet26 = properties8.entrySet();
        java.util.Collection<java.lang.Object> objCollection27 = properties8.values();
        java.lang.Object obj30 = properties8.setProperty("", "{{}={}}");
        java.util.Properties properties31 = new java.util.Properties();
        java.lang.Object obj33 = properties31.remove((java.lang.Object) (-1.0d));
        boolean boolean34 = properties31.isEmpty();
        java.util.Collection<java.lang.Object> objCollection35 = properties31.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery36 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery36.retryInterval = (short) 100;
        recovery36.forgetOrphanedLogEntriesDelay = 'a';
        long long41 = recovery36.retryInterval;
        recovery36.forgetOrphanedLogEntriesDelay = 0L;
        long long44 = recovery36.getForgetOrphanedLogEntriesDelay();
        long long45 = recovery36.getForgetOrphanedLogEntriesDelay();
        recovery36.retryInterval = 0L;
        boolean boolean48 = properties31.containsValue((java.lang.Object) recovery36);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet49 = properties31.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties51 = atomikosProperties50.asProperties();
        atomikosProperties50.service = "{-1.0=100}";
        long long54 = atomikosProperties50.getDefaultJtaTimeout();
        atomikosProperties50.serialJtaTransactions = true;
        atomikosProperties50.maxActives = ' ';
        atomikosProperties50.maxActives = (byte) 10;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery61 = atomikosProperties50.recovery;
        boolean boolean62 = properties31.containsKey((java.lang.Object) atomikosProperties50);
        boolean boolean63 = atomikosProperties50.serialJtaTransactions;
        boolean boolean64 = properties8.containsValue((java.lang.Object) atomikosProperties50);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "{}" + "'", str7, "{}");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "{}" + "'", str11, "{}");
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNotNull(objEnumeration23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(objEntrySet26);
        org.junit.Assert.assertNotNull(objCollection27);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(objCollection35);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 100L + "'", long41 == 100L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(objEntrySet49);
        org.junit.Assert.assertNotNull(properties51);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 10000L + "'", long54 == 10000L);
        org.junit.Assert.assertNotNull(recovery61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test07929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07929");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.remove((java.lang.Object) (-1.0d));
        boolean boolean3 = properties0.isEmpty();
        int int4 = properties0.size();
        java.lang.String str6 = properties0.getProperty("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties7.setAllowSubTransactions(true);
        boolean boolean10 = atomikosProperties7.enableLogging;
        boolean boolean11 = atomikosProperties7.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel12 = atomikosProperties7.consoleLogLevel;
        boolean boolean13 = properties0.contains((java.lang.Object) atomikosProperties7);
        atomikosProperties7.setEnableLogging(true);
        atomikosProperties7.allowSubTransactions = false;
        java.lang.String str18 = atomikosProperties7.getService();
        atomikosProperties7.consoleFileName = "tm.out";
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel12 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel12.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test07930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07930");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getLogBaseName();
        long long5 = atomikosProperties0.defaultJtaTimeout;
        long long6 = atomikosProperties0.getMaxTimeout();
        boolean boolean7 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.setService("{-1.0=100}");
        atomikosProperties0.setOutputDir("{}");
        atomikosProperties0.setSerialJtaTransactions(true);
        atomikosProperties0.outputDir = "{-1.0=100}";
        atomikosProperties0.setEnableLogging(false);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tmlog" + "'", str4, "tmlog");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 10000L + "'", long5 == 10000L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 300000L + "'", long6 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test07931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07931");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties();
        java.lang.String str2 = properties1.toString();
        boolean boolean3 = properties1.isEmpty();
        java.util.Properties properties4 = new java.util.Properties();
        java.lang.String str5 = properties4.toString();
        java.lang.Object obj7 = properties4.remove((java.lang.Object) (short) 100);
        java.lang.Object obj10 = properties4.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean12 = properties4.containsKey((java.lang.Object) 0L);
        boolean boolean13 = properties1.containsValue((java.lang.Object) 0L);
        boolean boolean16 = properties0.replace((java.lang.Object) 0L, (java.lang.Object) 0.0f, (java.lang.Object) 10.0d);
        java.lang.String str18 = properties0.getProperty("tm.out");
        java.util.Properties properties19 = new java.util.Properties();
        java.lang.Object obj22 = properties19.setProperty("{}", "{}");
        java.util.Enumeration<java.lang.Object> objEnumeration23 = properties19.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration24 = properties19.elements();
        java.lang.String str25 = properties19.toString();
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties19);
        boolean boolean27 = properties0.isEmpty();
        java.io.InputStream inputStream28 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.loadFromXML(inputStream28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{}" + "'", str2, "{}");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{}" + "'", str5, "{}");
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNotNull(objEnumeration23);
        org.junit.Assert.assertNotNull(objEnumeration24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "{{}={}}" + "'", str25, "{{}={}}");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test07932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07932");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        int int7 = atomikosProperties0.maxActives;
        atomikosProperties0.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.getRecovery();
        atomikosProperties0.forceShutdownOnVmExit = false;
        java.lang.String str13 = atomikosProperties0.service;
        atomikosProperties0.allowSubTransactions = false;
        atomikosProperties0.forceShutdownOnVmExit = false;
        atomikosProperties0.logBaseName = "";
        atomikosProperties0.setAllowSubTransactions(true);
        atomikosProperties0.consoleFileName = "";
        int int24 = atomikosProperties0.consoleFileCount;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{-1.0=100}" + "'", str13, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
    }

    @Test
    public void test07933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07933");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj3 = properties0.setProperty("{}", "{}");
        java.util.Enumeration<java.lang.Object> objEnumeration4 = properties0.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties0.elements();
        java.util.Properties properties6 = new java.util.Properties(properties0);
        java.util.Set<java.lang.String> strSet7 = properties6.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties8.setEnableLogging(true);
        atomikosProperties8.consoleFileCount = 0;
        int int13 = atomikosProperties8.getMaxActives();
        java.lang.String str14 = atomikosProperties8.getLogBaseDir();
        java.lang.String str15 = atomikosProperties8.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery16 = atomikosProperties8.getRecovery();
        boolean boolean17 = atomikosProperties8.serialJtaTransactions;
        atomikosProperties8.defaultJtaTimeout = 1;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties21 = atomikosProperties20.asProperties();
        atomikosProperties20.service = "{-1.0=100}";
        long long24 = atomikosProperties20.getDefaultJtaTimeout();
        atomikosProperties20.setThreadedTwoPhaseCommit(true);
        boolean boolean27 = atomikosProperties20.isEnableLogging();
        atomikosProperties20.defaultJtaTimeout = (byte) 10;
        java.lang.Object obj30 = properties6.getOrDefault((java.lang.Object) 1, (java.lang.Object) atomikosProperties20);
        java.lang.String str31 = atomikosProperties20.logBaseDir;
        int int32 = atomikosProperties20.consoleFileLimit;
        atomikosProperties20.setCheckpointInterval((long) 18);
        long long35 = atomikosProperties20.getCheckpointInterval();
        atomikosProperties20.setMaxTimeout(86400000L);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNotNull(objEnumeration4);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 50 + "'", int13 == 50);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(recovery16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(properties21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 10000L + "'", long24 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 18L + "'", long35 == 18L);
    }

    @Test
    public void test07934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07934");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        int int7 = atomikosProperties0.maxActives;
        atomikosProperties0.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.getRecovery();
        atomikosProperties0.consoleFileName = "{-1.0=100}";
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel13 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel13);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel15 = atomikosProperties0.getConsoleLogLevel();
        int int16 = atomikosProperties0.consoleFileLimit;
        atomikosProperties0.setDefaultJtaTimeout((long) 'a');
        java.lang.String str19 = atomikosProperties0.getConsoleFileName();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel20 = atomikosProperties0.consoleLogLevel;
        atomikosProperties0.consoleFileLimit = 1;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertNull(atomikosLoggingLevel15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "{-1.0=100}" + "'", str19, "{-1.0=100}");
        org.junit.Assert.assertNull(atomikosLoggingLevel20);
    }

    @Test
    public void test07935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07935");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties();
        java.lang.String str2 = properties1.toString();
        java.lang.Object obj4 = properties1.remove((java.lang.Object) (short) 100);
        java.lang.Object obj7 = properties1.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        int int8 = properties1.size();
        java.util.Properties properties9 = new java.util.Properties();
        java.lang.Object obj11 = properties9.remove((java.lang.Object) (-1.0d));
        boolean boolean12 = properties9.isEmpty();
        java.lang.Object obj15 = properties9.setProperty("hi!", "{}");
        boolean boolean16 = properties0.remove((java.lang.Object) int8, (java.lang.Object) properties9);
        java.util.Properties properties17 = new java.util.Properties();
        java.lang.String str18 = properties17.toString();
        java.lang.Object obj20 = properties17.remove((java.lang.Object) (short) 100);
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.String str22 = properties21.toString();
        boolean boolean23 = properties21.isEmpty();
        java.lang.Object obj26 = properties21.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties21.elements();
        boolean boolean28 = properties17.containsKey((java.lang.Object) properties21);
        boolean boolean29 = properties9.contains((java.lang.Object) boolean28);
        java.util.Set<java.lang.String> strSet30 = properties9.stringPropertyNames();
        java.util.Properties properties31 = new java.util.Properties(properties9);
        boolean boolean32 = properties9.isEmpty();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{}" + "'", str2, "{}");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "{}" + "'", str18, "{}");
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{}" + "'", str22, "{}");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test07936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07936");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isThreadedTwoPhaseCommit();
        atomikosProperties0.setTransactionManagerUniqueName("");
        atomikosProperties0.threadedTwoPhaseCommit = true;
        boolean boolean6 = atomikosProperties0.forceShutdownOnVmExit;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test07937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07937");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        boolean boolean2 = properties0.isEmpty();
        java.lang.Object obj5 = properties0.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Properties properties6 = new java.util.Properties();
        java.lang.String str7 = properties6.toString();
        java.lang.Object obj9 = properties6.remove((java.lang.Object) (short) 100);
        java.lang.Object obj12 = properties6.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean14 = properties6.containsKey((java.lang.Object) 0L);
        java.lang.Object obj17 = properties6.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties18 = new java.util.Properties(properties6);
        boolean boolean19 = properties0.containsValue((java.lang.Object) properties6);
        java.lang.String str21 = properties0.getProperty("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties23 = atomikosProperties22.asProperties();
        atomikosProperties22.service = "{-1.0=100}";
        long long26 = atomikosProperties22.getDefaultJtaTimeout();
        atomikosProperties22.enableLogging = false;
        atomikosProperties22.setMaxTimeout((long) (byte) 0);
        atomikosProperties22.setAllowSubTransactions(true);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties34 = atomikosProperties33.asProperties();
        atomikosProperties33.service = "{-1.0=100}";
        java.lang.String str37 = atomikosProperties33.getTransactionManagerUniqueName();
        boolean boolean38 = atomikosProperties33.isSerialJtaTransactions();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel39 = atomikosProperties33.getConsoleLogLevel();
        atomikosProperties22.consoleLogLevel = atomikosLoggingLevel39;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties41.setAllowSubTransactions(true);
        boolean boolean44 = atomikosProperties41.enableLogging;
        boolean boolean45 = atomikosProperties41.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel46 = atomikosProperties41.consoleLogLevel;
        atomikosProperties22.consoleLogLevel = atomikosLoggingLevel46;
        atomikosProperties22.setConsoleFileName("{1.0=-1, -1.0=100}");
        java.util.Properties properties50 = new java.util.Properties();
        java.lang.String str51 = properties50.toString();
        java.util.Properties properties52 = new java.util.Properties(properties50);
        boolean boolean53 = properties52.isEmpty();
        java.lang.Object obj56 = properties52.setProperty("tmlog", "{}");
        java.lang.Object obj57 = properties52.clone();
        java.lang.Object obj58 = properties0.putIfAbsent((java.lang.Object) atomikosProperties22, obj57);
        java.util.Enumeration<java.lang.Object> objEnumeration59 = properties0.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties60 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties61 = atomikosProperties60.asProperties();
        atomikosProperties60.service = "{-1.0=100}";
        long long64 = atomikosProperties60.getDefaultJtaTimeout();
        atomikosProperties60.setThreadedTwoPhaseCommit(true);
        boolean boolean67 = atomikosProperties60.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery68 = atomikosProperties60.recovery;
        boolean boolean69 = atomikosProperties60.threadedTwoPhaseCommit;
        atomikosProperties60.service = "{-1.0=100}";
        atomikosProperties60.setThreadedTwoPhaseCommit(false);
        int int74 = atomikosProperties60.getMaxActives();
        java.lang.Object obj75 = properties0.remove((java.lang.Object) atomikosProperties60);
        java.util.Properties properties76 = new java.util.Properties();
        java.lang.String str77 = properties76.toString();
        boolean boolean78 = properties76.isEmpty();
        boolean boolean79 = properties0.containsKey((java.lang.Object) boolean78);
        java.lang.Object obj80 = properties0.clone();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "{}" + "'", str7, "{}");
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(properties23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 10000L + "'", long26 == 10000L);
        org.junit.Assert.assertNotNull(properties34);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel39 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel39.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel46 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel46.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "{}" + "'", str51, "{}");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertNotNull(obj57);
        org.junit.Assert.assertEquals(obj57.toString(), "{tmlog={}}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj57), "{tmlog={}}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj57), "{tmlog={}}");
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertNotNull(objEnumeration59);
        org.junit.Assert.assertNotNull(properties61);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 10000L + "'", long64 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(recovery68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 50 + "'", int74 == 50);
        org.junit.Assert.assertNull(obj75);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "{}" + "'", str77, "{}");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(obj80);
    }

    @Test
    public void test07938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07938");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        boolean boolean3 = properties0.containsValue((java.lang.Object) (-1L));
        java.lang.Object obj5 = properties0.get((java.lang.Object) 97L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties7 = atomikosProperties6.asProperties();
        atomikosProperties6.service = "{-1.0=100}";
        long long10 = atomikosProperties6.getDefaultJtaTimeout();
        atomikosProperties6.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties6.logBaseName = "hi!";
        long long15 = atomikosProperties6.getCheckpointInterval();
        java.lang.String str16 = atomikosProperties6.outputDir;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties18 = atomikosProperties17.asProperties();
        atomikosProperties17.service = "{-1.0=100}";
        long long21 = atomikosProperties17.getDefaultJtaTimeout();
        atomikosProperties17.outputDir = "{={-1.0=100}, -1.0=100}";
        long long24 = atomikosProperties17.getCheckpointInterval();
        atomikosProperties17.setConsoleFileCount((int) (byte) 1);
        java.util.Properties properties27 = new java.util.Properties();
        properties27.clear();
        java.lang.String str29 = properties27.toString();
        int int30 = properties27.size();
        java.lang.Object obj33 = properties27.setProperty("{-1.0=100}", "{100=100}");
        boolean boolean34 = properties0.replace((java.lang.Object) atomikosProperties6, (java.lang.Object) (byte) 1, (java.lang.Object) properties27);
        java.lang.String str35 = properties0.toString();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 500L + "'", long15 == 500L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{={-1.0=100}, -1.0=100}" + "'", str16, "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10000L + "'", long21 == 10000L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 500L + "'", long24 == 500L);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "{}" + "'", str29, "{}");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "{}" + "'", str35, "{}");
    }

    @Test
    public void test07939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07939");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        boolean boolean2 = properties0.isEmpty();
        java.lang.Object obj5 = properties0.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Properties properties6 = new java.util.Properties();
        java.lang.Object obj8 = properties6.remove((java.lang.Object) (-1.0d));
        boolean boolean9 = properties6.isEmpty();
        java.lang.Object obj12 = properties6.setProperty("hi!", "{}");
        java.lang.Object obj14 = properties0.getOrDefault((java.lang.Object) "hi!", (java.lang.Object) 100.0d);
        properties0.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery16 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery16.retryInterval = (short) 100;
        recovery16.setForgetOrphanedLogEntriesDelay((long) 5);
        recovery16.setRetryInterval((long) (-1));
        recovery16.retryInterval = (byte) 100;
        long long25 = recovery16.getDelay();
        long long26 = recovery16.forgetOrphanedLogEntriesDelay;
        boolean boolean27 = properties0.equals((java.lang.Object) long26);
        boolean boolean28 = properties0.isEmpty();
        java.util.Properties properties29 = new java.util.Properties();
        java.lang.String str30 = properties29.toString();
        java.lang.Object obj32 = properties29.remove((java.lang.Object) (short) 100);
        java.lang.Object obj35 = properties29.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties36.setEnableLogging(true);
        atomikosProperties36.consoleFileCount = 0;
        atomikosProperties36.setSerialJtaTransactions(false);
        java.lang.String str43 = atomikosProperties36.getOutputDir();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties45 = atomikosProperties44.asProperties();
        atomikosProperties44.service = "{-1.0=100}";
        long long48 = atomikosProperties44.getDefaultJtaTimeout();
        atomikosProperties44.serialJtaTransactions = true;
        long long51 = atomikosProperties44.getDefaultJtaTimeout();
        long long52 = atomikosProperties44.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery53 = atomikosProperties44.getRecovery();
        recovery53.setRetryInterval((long) (byte) 0);
        java.lang.Object obj56 = properties29.replace((java.lang.Object) atomikosProperties36, (java.lang.Object) (byte) 0);
        java.lang.String str57 = atomikosProperties36.getLogBaseDir();
        long long58 = atomikosProperties36.getCheckpointInterval();
        java.lang.String str59 = atomikosProperties36.getTransactionManagerUniqueName();
        atomikosProperties36.setForceShutdownOnVmExit(false);
        boolean boolean62 = atomikosProperties36.isAllowSubTransactions();
        atomikosProperties36.outputDir = "";
        boolean boolean65 = properties0.contains((java.lang.Object) "");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + 100.0d + "'", obj14, 100.0d);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 10000L + "'", long25 == 10000L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 5L + "'", long26 == 5L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "{}" + "'", str30, "{}");
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(properties45);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 10000L + "'", long48 == 10000L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 10000L + "'", long51 == 10000L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 500L + "'", long52 == 500L);
        org.junit.Assert.assertNotNull(recovery53);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 500L + "'", long58 == 500L);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test07940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07940");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj7 = properties0.clone();
        java.util.Set<java.lang.String> strSet8 = properties0.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties10 = atomikosProperties9.asProperties();
        atomikosProperties9.service = "{-1.0=100}";
        java.lang.String str13 = atomikosProperties9.getTransactionManagerUniqueName();
        atomikosProperties9.consoleFileName = "hi!";
        atomikosProperties9.service = "tm.out";
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties18.setAllowSubTransactions(true);
        java.lang.String str21 = atomikosProperties18.transactionManagerUniqueName;
        int int22 = atomikosProperties18.getConsoleFileLimit();
        boolean boolean23 = properties0.remove((java.lang.Object) "tm.out", (java.lang.Object) atomikosProperties18);
        boolean boolean24 = properties0.isEmpty();
        java.util.Properties properties25 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties27 = atomikosProperties26.asProperties();
        atomikosProperties26.service = "{-1.0=100}";
        long long30 = atomikosProperties26.getDefaultJtaTimeout();
        long long31 = atomikosProperties26.getMaxTimeout();
        atomikosProperties26.threadedTwoPhaseCommit = true;
        atomikosProperties26.setSerialJtaTransactions(true);
        atomikosProperties26.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties26.logBaseDir = "{1.0=-1, -1.0=100}";
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery40 = atomikosProperties26.getRecovery();
        java.lang.Object obj41 = properties0.replace((java.lang.Object) properties25, (java.lang.Object) atomikosProperties26);
        java.util.Properties properties42 = new java.util.Properties(properties0);
        java.util.Set<java.lang.Object> objSet43 = properties42.keySet();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{1.0=-1}");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(properties27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 10000L + "'", long30 == 10000L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 300000L + "'", long31 == 300000L);
        org.junit.Assert.assertNotNull(recovery40);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertNotNull(objSet43);
    }

    @Test
    public void test07941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07941");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        atomikosProperties0.setDefaultJtaTimeout((long) (short) 0);
        atomikosProperties0.setTransactionManagerUniqueName("{-1.0=100}");
        java.lang.String str11 = atomikosProperties0.logBaseDir;
        atomikosProperties0.defaultJtaTimeout = 0;
        atomikosProperties0.defaultJtaTimeout = 35;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test07942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07942");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        int int7 = atomikosProperties0.maxActives;
        atomikosProperties0.setConsoleFileName("tmlog");
        java.lang.String str10 = atomikosProperties0.logBaseName;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery11 = atomikosProperties0.getRecovery();
        atomikosProperties0.setConsoleFileCount(5);
        atomikosProperties0.outputDir = "";
        atomikosProperties0.checkpointInterval = (short) -1;
        atomikosProperties0.setMaxActives(20);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "tmlog" + "'", str10, "tmlog");
        org.junit.Assert.assertNotNull(recovery11);
    }

    @Test
    public void test07943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07943");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        atomikosProperties0.setConsoleFileCount((int) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel8 = null;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel8;
        java.lang.String str10 = atomikosProperties0.logBaseDir;
        atomikosProperties0.checkpointInterval = (byte) 0;
        java.lang.String str13 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.serialJtaTransactions = true;
        atomikosProperties0.setTransactionManagerUniqueName("{1.0=-1}");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test07944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07944");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        boolean boolean2 = properties0.isEmpty();
        java.lang.Object obj5 = properties0.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Properties properties6 = new java.util.Properties();
        java.lang.Object obj8 = properties6.remove((java.lang.Object) (-1.0d));
        boolean boolean9 = properties6.isEmpty();
        java.util.Properties properties10 = new java.util.Properties();
        java.lang.String str11 = properties10.toString();
        java.lang.Object obj13 = properties10.remove((java.lang.Object) (short) 100);
        java.lang.Object obj16 = properties10.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean18 = properties10.containsKey((java.lang.Object) 0L);
        java.lang.Object obj21 = properties10.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj24 = properties10.setProperty("", "{-1.0=100}");
        java.lang.Object obj25 = properties10.clone();
        java.lang.Object obj26 = properties6.get((java.lang.Object) properties10);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties27.setEnableLogging(true);
        atomikosProperties27.consoleFileCount = 0;
        int int32 = atomikosProperties27.getMaxActives();
        java.lang.String str33 = atomikosProperties27.getLogBaseDir();
        java.lang.String str34 = atomikosProperties27.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery35 = atomikosProperties27.getRecovery();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties37 = atomikosProperties36.asProperties();
        atomikosProperties36.service = "{-1.0=100}";
        long long40 = atomikosProperties36.getDefaultJtaTimeout();
        atomikosProperties36.setThreadedTwoPhaseCommit(true);
        boolean boolean43 = atomikosProperties36.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery44 = atomikosProperties36.recovery;
        atomikosProperties36.setLogBaseDir("");
        java.lang.Object obj47 = properties10.replace((java.lang.Object) recovery35, (java.lang.Object) "");
        java.util.Properties properties48 = new java.util.Properties();
        java.lang.Object obj50 = properties48.remove((java.lang.Object) (-1.0d));
        boolean boolean52 = properties48.contains((java.lang.Object) "{-1.0=100}");
        boolean boolean53 = properties10.equals((java.lang.Object) "{-1.0=100}");
        properties10.clear();
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        java.util.Properties properties56 = new java.util.Properties();
        java.lang.Object obj59 = properties56.setProperty("{}", "{}");
        java.util.Enumeration<java.lang.Object> objEnumeration60 = properties56.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration61 = properties56.elements();
        java.util.Properties properties62 = new java.util.Properties(properties56);
        java.util.Set<java.lang.Object> objSet63 = properties56.keySet();
        java.util.Set<java.lang.String> strSet64 = properties56.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery65 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery65.retryInterval = (short) 100;
        recovery65.forgetOrphanedLogEntriesDelay = 'a';
        long long70 = recovery65.getDelay();
        long long71 = recovery65.getRetryInterval();
        recovery65.setRetryInterval((long) 'a');
        long long74 = recovery65.getRetryInterval();
        int int75 = recovery65.maxRetries;
        java.lang.Object obj76 = properties0.put((java.lang.Object) properties56, (java.lang.Object) recovery65);
        long long77 = recovery65.getDelay();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "{}" + "'", str11, "{}");
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(obj25);
// flaky:         org.junit.Assert.assertEquals(obj25.toString(), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 50 + "'", int32 == 50);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(recovery35);
        org.junit.Assert.assertNotNull(properties37);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 10000L + "'", long40 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(recovery44);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertNotNull(objEnumeration60);
        org.junit.Assert.assertNotNull(objEnumeration61);
        org.junit.Assert.assertNotNull(objSet63);
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 10000L + "'", long70 == 10000L);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 100L + "'", long71 == 100L);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 97L + "'", long74 == 97L);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 5 + "'", int75 == 5);
        org.junit.Assert.assertNull(obj76);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 10000L + "'", long77 == 10000L);
    }

    @Test
    public void test07945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07945");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setMaxActives(0);
        boolean boolean7 = atomikosProperties0.threadedTwoPhaseCommit;
        boolean boolean8 = atomikosProperties0.allowSubTransactions;
        atomikosProperties0.logBaseDir = "{}";
        boolean boolean11 = atomikosProperties0.threadedTwoPhaseCommit;
        long long12 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery13 = atomikosProperties0.getRecovery();
        int int14 = atomikosProperties0.consoleFileLimit;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10000L + "'", long12 == 10000L);
        org.junit.Assert.assertNotNull(recovery13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
    }

    @Test
    public void test07946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07946");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        boolean boolean7 = atomikosProperties0.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery8 = atomikosProperties0.recovery;
        boolean boolean9 = atomikosProperties0.threadedTwoPhaseCommit;
        atomikosProperties0.service = "{-1.0=100}";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        atomikosProperties0.threadedTwoPhaseCommit = true;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(recovery8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test07947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07947");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setEnableLogging(true);
        atomikosProperties0.consoleFileCount = 0;
        int int5 = atomikosProperties0.getMaxActives();
        int int6 = atomikosProperties0.getConsoleFileCount();
        java.lang.String str7 = atomikosProperties0.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties9 = atomikosProperties8.asProperties();
        atomikosProperties8.service = "{-1.0=100}";
        long long12 = atomikosProperties8.getDefaultJtaTimeout();
        atomikosProperties8.setMaxActives(0);
        boolean boolean15 = atomikosProperties8.threadedTwoPhaseCommit;
        boolean boolean16 = atomikosProperties8.allowSubTransactions;
        atomikosProperties8.logBaseDir = "{}";
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean20 = atomikosProperties19.isSerialJtaTransactions();
        atomikosProperties19.logBaseName = "{-1.0=100}";
        int int23 = atomikosProperties19.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery24 = atomikosProperties19.getRecovery();
        atomikosProperties19.setConsoleFileCount((int) (byte) 100);
        atomikosProperties19.setAllowSubTransactions(true);
        atomikosProperties19.setService("tm.out");
        boolean boolean31 = atomikosProperties19.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel32 = atomikosProperties19.getConsoleLogLevel();
        atomikosProperties8.setConsoleLogLevel(atomikosLoggingLevel32);
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel32);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel35 = atomikosProperties0.getConsoleLogLevel();
        java.lang.String str36 = atomikosProperties0.service;
        atomikosProperties0.setForceShutdownOnVmExit(true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 50 + "'", int5 == 50);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10000L + "'", long12 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 50 + "'", int23 == 50);
        org.junit.Assert.assertNotNull(recovery24);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel32 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel32.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel35 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel35.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(str36);
    }

    @Test
    public void test07948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07948");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj7 = properties0.clone();
        java.util.Set<java.lang.String> strSet8 = properties0.stringPropertyNames();
        java.util.Properties properties9 = new java.util.Properties();
        java.lang.String str10 = properties9.toString();
        java.lang.Object obj12 = properties9.remove((java.lang.Object) (short) 100);
        java.lang.Object obj15 = properties9.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean17 = properties9.containsKey((java.lang.Object) 0L);
        java.lang.Object obj20 = properties9.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.String str22 = properties21.toString();
        java.lang.Object obj24 = properties21.remove((java.lang.Object) (short) 100);
        java.lang.Object obj27 = properties21.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj28 = properties21.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration29 = properties21.elements();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties21);
        java.util.Properties properties31 = new java.util.Properties();
        java.lang.String str32 = properties31.toString();
        java.lang.Object obj34 = properties31.remove((java.lang.Object) (short) 100);
        java.lang.Object obj37 = properties31.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean39 = properties31.containsKey((java.lang.Object) 0L);
        java.lang.Object obj42 = properties31.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties43 = new java.util.Properties();
        java.lang.String str44 = properties43.toString();
        java.lang.Object obj46 = properties43.remove((java.lang.Object) (short) 100);
        java.lang.Object obj49 = properties43.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj50 = properties43.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration51 = properties43.elements();
        properties31.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties43);
        java.lang.Object obj53 = properties0.putIfAbsent((java.lang.Object) properties9, (java.lang.Object) properties43);
        java.util.Properties properties54 = new java.util.Properties(properties0);
        java.util.Set<java.lang.Object> objSet55 = properties0.keySet();
        java.lang.String str56 = properties0.toString();
        java.io.OutputStream outputStream57 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.store(outputStream57, "{{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}=hi!}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{1.0=-1}");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "{}" + "'", str10, "{}");
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{}" + "'", str22, "{}");
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "{}" + "'", str32, "{}");
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "{}" + "'", str44, "{}");
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertEquals(obj50.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj50), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj50), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration51);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertNotNull(objSet55);
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "{{1.0=-1, -1.0=100}={1.0=-1}, 1.0=-1}" + "'", str56, "{{1.0=-1, -1.0=100}={1.0=-1}, 1.0=-1}");
    }

    @Test
    public void test07949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07949");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        boolean boolean7 = atomikosProperties0.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery8 = atomikosProperties0.recovery;
        boolean boolean9 = atomikosProperties0.threadedTwoPhaseCommit;
        atomikosProperties0.service = "{-1.0=100}";
        atomikosProperties0.setThreadedTwoPhaseCommit(false);
        int int14 = atomikosProperties0.getMaxActives();
        atomikosProperties0.setTransactionManagerUniqueName("tm.out");
        atomikosProperties0.setLogBaseDir("tmlog");
        int int19 = atomikosProperties0.getMaxActives();
        atomikosProperties0.setConsoleFileCount((int) (byte) 1);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(recovery8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 50 + "'", int14 == 50);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 50 + "'", int19 == 50);
    }

    @Test
    public void test07950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07950");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        long long7 = atomikosProperties0.getDefaultJtaTimeout();
        long long8 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.setForceShutdownOnVmExit(true);
        boolean boolean11 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.transactionManagerUniqueName = "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}";
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test07951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07951");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties();
        java.lang.String str2 = properties1.toString();
        java.lang.Object obj4 = properties1.remove((java.lang.Object) (short) 100);
        java.lang.Object obj7 = properties1.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        int int8 = properties1.size();
        java.util.Properties properties9 = new java.util.Properties();
        java.lang.Object obj11 = properties9.remove((java.lang.Object) (-1.0d));
        boolean boolean12 = properties9.isEmpty();
        java.lang.Object obj15 = properties9.setProperty("hi!", "{}");
        boolean boolean16 = properties0.remove((java.lang.Object) int8, (java.lang.Object) properties9);
        java.util.Properties properties17 = new java.util.Properties();
        java.lang.String str18 = properties17.toString();
        java.lang.Object obj20 = properties17.remove((java.lang.Object) (short) 100);
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.String str22 = properties21.toString();
        boolean boolean23 = properties21.isEmpty();
        java.lang.Object obj26 = properties21.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties21.elements();
        boolean boolean28 = properties17.containsKey((java.lang.Object) properties21);
        boolean boolean29 = properties9.contains((java.lang.Object) boolean28);
        java.util.Set<java.lang.String> strSet30 = properties9.stringPropertyNames();
        int int31 = properties9.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties33 = atomikosProperties32.asProperties();
        atomikosProperties32.service = "{-1.0=100}";
        long long36 = atomikosProperties32.getDefaultJtaTimeout();
        atomikosProperties32.serialJtaTransactions = true;
        atomikosProperties32.maxActives = ' ';
        int int41 = atomikosProperties32.getConsoleFileCount();
        int int42 = atomikosProperties32.consoleFileLimit;
        java.util.Properties properties43 = atomikosProperties32.asProperties();
        java.lang.Object obj44 = properties9.get((java.lang.Object) atomikosProperties32);
        long long45 = atomikosProperties32.getCheckpointInterval();
        long long46 = atomikosProperties32.defaultJtaTimeout;
        atomikosProperties32.setLogBaseDir("{100=100}");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{}" + "'", str2, "{}");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "{}" + "'", str18, "{}");
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{}" + "'", str22, "{}");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(properties33);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 10000L + "'", long36 == 10000L);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(properties43);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 500L + "'", long45 == 500L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 10000L + "'", long46 == 10000L);
    }

    @Test
    public void test07952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07952");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.enableLogging = false;
        atomikosProperties0.setMaxActives((int) ' ');
        atomikosProperties0.maxActives = (short) -1;
        atomikosProperties0.setService("hi!");
        atomikosProperties0.consoleFileLimit = (byte) 0;
        int int15 = atomikosProperties0.maxActives;
        int int16 = atomikosProperties0.getConsoleFileLimit();
        atomikosProperties0.consoleFileLimit = 1;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test07953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07953");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getLogBaseName();
        long long5 = atomikosProperties0.defaultJtaTimeout;
        long long6 = atomikosProperties0.getMaxTimeout();
        boolean boolean7 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.setService("{-1.0=100}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.recovery;
        atomikosProperties0.outputDir = "{{={-1.0=100}, -1.0=100}=}";
        long long13 = atomikosProperties0.maxTimeout;
        atomikosProperties0.setMaxTimeout(10L);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tmlog" + "'", str4, "tmlog");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 10000L + "'", long5 == 10000L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 300000L + "'", long6 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 300000L + "'", long13 == 300000L);
    }

    @Test
    public void test07954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07954");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        long long5 = atomikosProperties0.getMaxTimeout();
        int int6 = atomikosProperties0.consoleFileCount;
        int int7 = atomikosProperties0.getMaxActives();
        boolean boolean8 = atomikosProperties0.forceShutdownOnVmExit;
        boolean boolean9 = atomikosProperties0.isThreadedTwoPhaseCommit();
        atomikosProperties0.enableLogging = true;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test07955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07955");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        long long7 = atomikosProperties0.getDefaultJtaTimeout();
        long long8 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.setForceShutdownOnVmExit(true);
        java.util.Properties properties11 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties13 = atomikosProperties12.asProperties();
        atomikosProperties12.service = "{-1.0=100}";
        long long16 = atomikosProperties12.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel17 = null;
        atomikosProperties12.setConsoleLogLevel(atomikosLoggingLevel17);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel19 = null;
        atomikosProperties12.setConsoleLogLevel(atomikosLoggingLevel19);
        atomikosProperties12.setLogBaseName("{={-1.0=100}, -1.0=100}");
        atomikosProperties12.setConsoleFileLimit(0);
        java.lang.String str25 = atomikosProperties12.consoleFileName;
        java.lang.String str26 = atomikosProperties12.getConsoleFileName();
        boolean boolean27 = properties11.containsKey((java.lang.Object) str26);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNotNull(properties13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10000L + "'", long16 == 10000L);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "tm.out" + "'", str25, "tm.out");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "tm.out" + "'", str26, "tm.out");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test07956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07956");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        boolean boolean2 = properties0.isEmpty();
        java.lang.Object obj5 = properties0.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Properties properties6 = new java.util.Properties();
        java.lang.String str7 = properties6.toString();
        java.lang.Object obj9 = properties6.remove((java.lang.Object) (short) 100);
        java.lang.Object obj12 = properties6.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean14 = properties6.containsKey((java.lang.Object) 0L);
        java.lang.Object obj17 = properties6.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties18 = new java.util.Properties(properties6);
        boolean boolean19 = properties0.containsValue((java.lang.Object) properties6);
        java.lang.String str21 = properties0.getProperty("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties23 = atomikosProperties22.asProperties();
        atomikosProperties22.service = "{-1.0=100}";
        java.lang.String str26 = atomikosProperties22.getTransactionManagerUniqueName();
        atomikosProperties22.consoleFileName = "hi!";
        atomikosProperties22.setCheckpointInterval((long) 5);
        atomikosProperties22.setConsoleFileCount(0);
        boolean boolean33 = atomikosProperties22.isThreadedTwoPhaseCommit();
        long long34 = atomikosProperties22.checkpointInterval;
        java.lang.Object obj35 = properties0.remove((java.lang.Object) atomikosProperties22);
        java.util.Set<java.lang.Object> objSet36 = properties0.keySet();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "{}" + "'", str7, "{}");
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(properties23);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 5L + "'", long34 == 5L);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNotNull(objSet36);
    }

    @Test
    public void test07957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07957");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj7 = properties0.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration8 = properties0.elements();
        java.util.Properties properties9 = new java.util.Properties();
        java.lang.String str10 = properties9.toString();
        java.lang.Object obj12 = properties9.remove((java.lang.Object) (short) 100);
        java.lang.Object obj15 = properties9.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj16 = properties9.clone();
        java.util.Set<java.lang.String> strSet17 = properties9.stringPropertyNames();
        java.util.Properties properties18 = new java.util.Properties(properties9);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties20 = atomikosProperties19.asProperties();
        atomikosProperties19.service = "{-1.0=100}";
        java.lang.String str23 = atomikosProperties19.getTransactionManagerUniqueName();
        boolean boolean24 = atomikosProperties19.isSerialJtaTransactions();
        int int25 = atomikosProperties19.getConsoleFileLimit();
        java.util.Properties properties26 = new java.util.Properties();
        java.lang.String str27 = properties26.toString();
        java.lang.Object obj29 = properties26.remove((java.lang.Object) (short) 100);
        java.lang.Object obj32 = properties26.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean34 = properties26.containsKey((java.lang.Object) 0L);
        java.lang.Object obj37 = properties26.replace((java.lang.Object) false, (java.lang.Object) ' ');
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties38.setEnableLogging(true);
        atomikosProperties38.setConsoleFileLimit((int) (short) 0);
        boolean boolean43 = properties26.contains((java.lang.Object) atomikosProperties38);
        java.lang.Object obj44 = properties18.putIfAbsent((java.lang.Object) int25, (java.lang.Object) atomikosProperties38);
        java.util.Properties properties45 = new java.util.Properties(properties18);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties18);
        java.io.PrintStream printStream47 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.list(printStream47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "{}" + "'", str10, "{}");
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "{1.0=-1}");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(properties20);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "{}" + "'", str27, "{}");
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(obj44);
    }

    @Test
    public void test07958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07958");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.retryInterval = (short) 100;
        recovery0.forgetOrphanedLogEntriesDelay = 'a';
        long long5 = recovery0.retryInterval;
        recovery0.forgetOrphanedLogEntriesDelay = 0L;
        long long8 = recovery0.getForgetOrphanedLogEntriesDelay();
        long long9 = recovery0.getForgetOrphanedLogEntriesDelay();
        recovery0.retryInterval = 0L;
        long long12 = recovery0.retryInterval;
        int int13 = recovery0.maxRetries;
        recovery0.setMaxRetries((int) 'a');
        int int16 = recovery0.getMaxRetries();
        recovery0.retryInterval = 2;
        recovery0.delay = 2L;
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 100L + "'", long5 == 100L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 97 + "'", int16 == 97);
    }

    @Test
    public void test07959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07959");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        long long7 = atomikosProperties0.maxTimeout;
        atomikosProperties0.setLogBaseDir("{-1.0=100}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.setAllowSubTransactions(true);
        atomikosProperties10.maxActives = (short) -1;
        atomikosProperties10.setService("tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties17.setAllowSubTransactions(true);
        boolean boolean20 = atomikosProperties17.enableLogging;
        boolean boolean21 = atomikosProperties17.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel22 = atomikosProperties17.consoleLogLevel;
        atomikosProperties10.setConsoleLogLevel(atomikosLoggingLevel22);
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel22;
        atomikosProperties0.setConsoleFileCount((int) (byte) 0);
        java.util.Properties properties27 = new java.util.Properties();
        java.lang.Object obj29 = properties27.remove((java.lang.Object) (-1.0d));
        boolean boolean30 = properties27.isEmpty();
        int int31 = properties27.size();
        java.util.Properties properties32 = new java.util.Properties();
        properties32.clear();
        java.lang.String str34 = properties32.toString();
        java.lang.Object obj35 = properties32.clone();
        java.util.Properties properties36 = new java.util.Properties();
        java.lang.Object obj38 = properties36.remove((java.lang.Object) (-1.0d));
        boolean boolean39 = properties36.isEmpty();
        int int40 = properties36.size();
        java.lang.String str42 = properties36.getProperty("{}");
        java.util.Set<java.lang.Object> objSet43 = properties36.keySet();
        boolean boolean45 = properties36.containsKey((java.lang.Object) (short) 1);
        int int46 = properties36.size();
        properties32.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties36);
        properties27.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties32);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties51 = atomikosProperties50.asProperties();
        atomikosProperties50.service = "{-1.0=100}";
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery54 = atomikosProperties50.recovery;
        atomikosProperties50.enableLogging = true;
        java.lang.String str57 = atomikosProperties50.getService();
        atomikosProperties0.set(properties32, "{1.0=-1}", (java.lang.Object) str57);
        java.util.Properties properties59 = new java.util.Properties(properties32);
        java.util.Properties properties60 = new java.util.Properties(properties59);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel22 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel22.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "{}" + "'", str34, "{}");
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertEquals(obj35.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj35), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj35), "{}");
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(objSet43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(properties51);
        org.junit.Assert.assertNotNull(recovery54);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "{-1.0=100}" + "'", str57, "{-1.0=100}");
    }

    @Test
    public void test07960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07960");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.enableLogging = false;
        atomikosProperties0.setMaxTimeout((long) (byte) 0);
        atomikosProperties0.setService("tm.out");
        atomikosProperties0.setMaxActives((-1));
        atomikosProperties0.outputDir = "tmlog";
        atomikosProperties0.consoleFileCount = 5;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery17 = atomikosProperties0.recovery;
        int int18 = atomikosProperties0.consoleFileCount;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertNotNull(recovery17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5 + "'", int18 == 5);
    }

    @Test
    public void test07961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07961");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.outputDir = "{={-1.0=100}, -1.0=100}";
        long long7 = atomikosProperties0.getCheckpointInterval();
        boolean boolean8 = atomikosProperties0.isForceShutdownOnVmExit();
        boolean boolean9 = atomikosProperties0.serialJtaTransactions;
        atomikosProperties0.outputDir = "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name={}, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={-1.0=100}, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}";
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test07962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07962");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj3 = properties0.setProperty("{}", "{}");
        java.util.Enumeration<java.lang.Object> objEnumeration4 = properties0.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties0.elements();
        java.util.Properties properties6 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration7 = properties0.elements();
        java.lang.Object obj8 = properties0.clone();
        java.util.Properties properties9 = new java.util.Properties();
        java.util.Properties properties10 = new java.util.Properties();
        java.lang.String str11 = properties10.toString();
        java.lang.Object obj13 = properties10.remove((java.lang.Object) (short) 100);
        java.lang.Object obj16 = properties10.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        int int17 = properties10.size();
        java.util.Properties properties18 = new java.util.Properties();
        java.lang.Object obj20 = properties18.remove((java.lang.Object) (-1.0d));
        boolean boolean21 = properties18.isEmpty();
        java.lang.Object obj24 = properties18.setProperty("hi!", "{}");
        boolean boolean25 = properties9.remove((java.lang.Object) int17, (java.lang.Object) properties18);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties26.outputDir = "{={-1.0=100}, -1.0=100}";
        boolean boolean29 = properties9.contains((java.lang.Object) atomikosProperties26);
        java.util.Properties properties30 = new java.util.Properties();
        java.lang.String str31 = properties30.toString();
        java.lang.Object obj33 = properties30.remove((java.lang.Object) (short) 100);
        java.lang.Object obj36 = properties30.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj37 = properties30.clone();
        java.util.Set<java.lang.String> strSet38 = properties30.stringPropertyNames();
        java.util.Properties properties39 = new java.util.Properties();
        java.lang.String str40 = properties39.toString();
        java.lang.Object obj42 = properties39.remove((java.lang.Object) (short) 100);
        java.lang.Object obj45 = properties39.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        java.util.Properties properties47 = new java.util.Properties();
        java.lang.String str48 = properties47.toString();
        java.lang.Object obj50 = properties47.remove((java.lang.Object) (short) 100);
        java.lang.Object obj53 = properties47.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj54 = properties47.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration55 = properties47.elements();
        java.lang.Object obj56 = properties39.putIfAbsent((java.lang.Object) 10.0f, (java.lang.Object) objEnumeration55);
        boolean boolean57 = properties30.containsKey((java.lang.Object) 10.0f);
        boolean boolean58 = properties0.remove((java.lang.Object) atomikosProperties26, (java.lang.Object) properties30);
        java.lang.Object obj59 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj60 = properties30.remove(obj59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNotNull(objEnumeration4);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNotNull(objEnumeration7);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "{{}={}}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "{{}={}}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "{{}={}}");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "{}" + "'", str11, "{}");
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "{}" + "'", str31, "{}");
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertEquals(obj37.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "{1.0=-1}");
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "{}" + "'", str40, "{}");
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "{}" + "'", str48, "{}");
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertEquals(obj54.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj54), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj54), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration55);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test07963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07963");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getLogBaseName();
        long long5 = atomikosProperties0.defaultJtaTimeout;
        long long6 = atomikosProperties0.getMaxTimeout();
        boolean boolean7 = atomikosProperties0.forceShutdownOnVmExit;
        java.util.Properties properties8 = atomikosProperties0.asProperties();
        atomikosProperties0.setService("{1.0=-1}");
        boolean boolean11 = atomikosProperties0.forceShutdownOnVmExit;
        java.util.Properties properties12 = new java.util.Properties();
        java.lang.String str13 = properties12.toString();
        java.lang.Object obj15 = properties12.remove((java.lang.Object) (short) 100);
        java.lang.Object obj18 = properties12.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        java.util.Properties properties19 = new java.util.Properties();
        java.lang.String str20 = properties19.toString();
        properties19.clear();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet22 = properties19.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties24 = atomikosProperties23.asProperties();
        atomikosProperties23.service = "{-1.0=100}";
        long long27 = atomikosProperties23.getDefaultJtaTimeout();
        atomikosProperties23.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties23.setMaxActives(100);
        java.lang.String str32 = atomikosProperties23.logBaseDir;
        atomikosProperties23.consoleFileCount = (short) 0;
        atomikosProperties23.defaultJtaTimeout = 10000L;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel37 = atomikosProperties23.consoleLogLevel;
        java.lang.Object obj38 = properties12.putIfAbsent((java.lang.Object) properties19, (java.lang.Object) atomikosLoggingLevel37);
        java.lang.String str39 = properties19.toString();
        java.lang.Object obj41 = null;
        atomikosProperties0.set(properties19, "{1.0=-1, -1.0=100}", obj41);
        java.util.Properties properties43 = atomikosProperties0.asProperties();
        java.io.OutputStream outputStream44 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties43.storeToXML(outputStream44, "tmlog", "tm.out");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tmlog" + "'", str4, "tmlog");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 10000L + "'", long5 == 10000L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 300000L + "'", long6 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{}" + "'", str13, "{}");
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{}" + "'", str20, "{}");
        org.junit.Assert.assertNotNull(objEntrySet22);
        org.junit.Assert.assertNotNull(properties24);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10000L + "'", long27 == 10000L);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel37 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel37.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "{}" + "'", str39, "{}");
        org.junit.Assert.assertNotNull(properties43);
    }

    @Test
    public void test07964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07964");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.retryInterval = (short) 100;
        recovery0.forgetOrphanedLogEntriesDelay = 'a';
        long long5 = recovery0.retryInterval;
        recovery0.forgetOrphanedLogEntriesDelay = 0L;
        long long8 = recovery0.getForgetOrphanedLogEntriesDelay();
        long long9 = recovery0.getForgetOrphanedLogEntriesDelay();
        recovery0.retryInterval = 0L;
        long long12 = recovery0.retryInterval;
        int int13 = recovery0.maxRetries;
        recovery0.maxRetries = (short) 100;
        recovery0.retryInterval = 1L;
        recovery0.setRetryInterval(300000L);
        recovery0.delay = (short) -1;
        int int22 = recovery0.getMaxRetries();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 100L + "'", long5 == 100L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 100 + "'", int22 == 100);
    }

    @Test
    public void test07965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07965");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties0.setMaxActives(100);
        boolean boolean9 = atomikosProperties0.enableLogging;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.recovery;
        atomikosProperties0.setConsoleFileLimit(100);
        boolean boolean13 = atomikosProperties0.enableLogging;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery14 = atomikosProperties0.getRecovery();
        recovery14.delay = 0L;
        recovery14.retryInterval = 52L;
        long long19 = recovery14.delay;
        recovery14.setMaxRetries((int) 'a');
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(recovery14);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
    }

    @Test
    public void test07966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07966");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.retryInterval = (short) 100;
        recovery0.forgetOrphanedLogEntriesDelay = 'a';
        long long5 = recovery0.getDelay();
        int int6 = recovery0.maxRetries;
        int int7 = recovery0.maxRetries;
        long long8 = recovery0.getRetryInterval();
        recovery0.retryInterval = (byte) -1;
        int int11 = recovery0.maxRetries;
        recovery0.setRetryInterval((long) (short) 100);
        long long14 = recovery0.getForgetOrphanedLogEntriesDelay();
        recovery0.setDelay((long) 1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 10000L + "'", long5 == 10000L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 5 + "'", int7 == 5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 97L + "'", long14 == 97L);
    }

    @Test
    public void test07967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07967");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery4 = atomikosProperties0.recovery;
        java.lang.String str5 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives(35);
        boolean boolean8 = atomikosProperties0.isThreadedTwoPhaseCommit();
        java.lang.String str9 = atomikosProperties0.getLogBaseName();
        atomikosProperties0.enableLogging = false;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNotNull(recovery4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tmlog" + "'", str9, "tmlog");
    }

    @Test
    public void test07968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07968");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setEnableLogging(true);
        atomikosProperties0.consoleFileCount = 0;
        int int5 = atomikosProperties0.getMaxActives();
        java.lang.String str6 = atomikosProperties0.getLogBaseDir();
        java.lang.String str7 = atomikosProperties0.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery8 = atomikosProperties0.getRecovery();
        boolean boolean9 = atomikosProperties0.serialJtaTransactions;
        java.lang.String str10 = atomikosProperties0.consoleFileName;
        int int11 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties13 = atomikosProperties12.asProperties();
        atomikosProperties12.service = "{-1.0=100}";
        long long16 = atomikosProperties12.getDefaultJtaTimeout();
        atomikosProperties12.setMaxActives(0);
        boolean boolean19 = atomikosProperties12.threadedTwoPhaseCommit;
        boolean boolean20 = atomikosProperties12.allowSubTransactions;
        atomikosProperties12.logBaseDir = "{}";
        atomikosProperties12.logBaseName = "";
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean26 = atomikosProperties25.isSerialJtaTransactions();
        atomikosProperties25.logBaseName = "{-1.0=100}";
        int int29 = atomikosProperties25.maxActives;
        int int30 = atomikosProperties25.consoleFileCount;
        atomikosProperties25.transactionManagerUniqueName = "tm.out";
        atomikosProperties25.consoleFileName = "tm.out";
        atomikosProperties25.allowSubTransactions = false;
        boolean boolean37 = atomikosProperties25.allowSubTransactions;
        java.lang.String str38 = atomikosProperties25.logBaseName;
        atomikosProperties25.maxActives = (byte) 100;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel41 = atomikosProperties25.consoleLogLevel;
        atomikosProperties12.setConsoleLogLevel(atomikosLoggingLevel41);
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel41;
        long long44 = atomikosProperties0.getDefaultJtaTimeout();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 50 + "'", int5 == 50);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(recovery8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "tm.out" + "'", str10, "tm.out");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 50 + "'", int11 == 50);
        org.junit.Assert.assertNotNull(properties13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10000L + "'", long16 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 50 + "'", int29 == 50);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "{-1.0=100}" + "'", str38, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel41 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel41.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 10000L + "'", long44 == 10000L);
    }

    @Test
    public void test07969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07969");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.util.Properties properties3 = new java.util.Properties();
        java.lang.String str4 = properties3.toString();
        java.lang.Object obj6 = properties3.remove((java.lang.Object) (short) 100);
        java.lang.Object obj9 = properties3.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean11 = properties3.containsKey((java.lang.Object) 0L);
        java.lang.Object obj14 = properties3.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj17 = properties3.setProperty("", "{-1.0=100}");
        java.util.Enumeration<java.lang.Object> objEnumeration18 = properties3.keys();
        java.util.Properties properties19 = new java.util.Properties();
        java.lang.String str20 = properties19.toString();
        boolean boolean21 = properties19.isEmpty();
        java.lang.Object obj24 = properties19.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration25 = properties19.elements();
        java.lang.Object obj26 = properties2.replace((java.lang.Object) objEnumeration18, (java.lang.Object) properties19);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties19.elements();
        java.util.Properties properties28 = new java.util.Properties(properties19);
        java.util.Properties properties29 = new java.util.Properties();
        java.lang.String str30 = properties29.toString();
        java.lang.Object obj32 = properties29.remove((java.lang.Object) (short) 100);
        java.lang.Object obj35 = properties29.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean37 = properties29.containsKey((java.lang.Object) 0L);
        java.lang.Object obj40 = properties29.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties41 = new java.util.Properties();
        java.lang.String str42 = properties41.toString();
        java.lang.Object obj44 = properties41.remove((java.lang.Object) (short) 100);
        java.lang.Object obj47 = properties41.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj48 = properties41.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration49 = properties41.elements();
        properties29.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties41);
        java.lang.Object obj51 = properties41.clone();
        properties41.clear();
        java.util.Enumeration<?> wildcardEnumeration53 = properties41.propertyNames();
        boolean boolean54 = properties19.contains((java.lang.Object) wildcardEnumeration53);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties55 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties56 = atomikosProperties55.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties57 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties58 = atomikosProperties57.asProperties();
        atomikosProperties57.service = "{-1.0=100}";
        long long61 = atomikosProperties57.getDefaultJtaTimeout();
        atomikosProperties57.consoleFileLimit = '#';
        java.lang.Object obj64 = properties56.get((java.lang.Object) atomikosProperties57);
        boolean boolean65 = atomikosProperties57.forceShutdownOnVmExit;
        atomikosProperties57.setOutputDir("");
        boolean boolean68 = atomikosProperties57.forceShutdownOnVmExit;
        boolean boolean69 = atomikosProperties57.isThreadedTwoPhaseCommit();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties70 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties71 = atomikosProperties70.asProperties();
        atomikosProperties70.service = "{-1.0=100}";
        long long74 = atomikosProperties70.getDefaultJtaTimeout();
        atomikosProperties70.setThreadedTwoPhaseCommit(true);
        boolean boolean77 = atomikosProperties70.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery78 = atomikosProperties70.recovery;
        atomikosProperties70.setLogBaseDir("");
        java.lang.Object obj81 = properties19.putIfAbsent((java.lang.Object) boolean69, (java.lang.Object) atomikosProperties70);
        boolean boolean82 = atomikosProperties70.isSerialJtaTransactions();
        java.lang.String str83 = atomikosProperties70.logBaseDir;
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{}" + "'", str4, "{}");
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(objEnumeration18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{}" + "'", str20, "{}");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(objEnumeration25);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "{}" + "'", str30, "{}");
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "{}" + "'", str42, "{}");
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertEquals(obj48.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj48), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj48), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration49);
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertEquals(obj51.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj51), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj51), "{1.0=-1}");
        org.junit.Assert.assertNotNull(wildcardEnumeration53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(properties56);
        org.junit.Assert.assertNotNull(properties58);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 10000L + "'", long61 == 10000L);
        org.junit.Assert.assertNull(obj64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(properties71);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 10000L + "'", long74 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(recovery78);
        org.junit.Assert.assertNull(obj81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
    }

    @Test
    public void test07970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07970");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        java.util.Properties properties8 = new java.util.Properties();
        java.lang.String str9 = properties8.toString();
        java.lang.Object obj11 = properties8.remove((java.lang.Object) (short) 100);
        java.lang.Object obj14 = properties8.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj15 = properties8.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration16 = properties8.elements();
        java.lang.Object obj17 = properties0.putIfAbsent((java.lang.Object) 10.0f, (java.lang.Object) objEnumeration16);
        java.lang.String str18 = properties0.toString();
        java.util.Collection<java.lang.Object> objCollection19 = properties0.values();
        java.lang.Object obj22 = properties0.setProperty("{com.atomikos.icatch.={}, 100=100}", "{{}={}}");
        java.lang.String str23 = properties0.toString();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{}" + "'", str9, "{}");
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration16);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(objCollection19);
        org.junit.Assert.assertNull(obj22);
    }

    @Test
    public void test07971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07971");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileLimit = (byte) 10;
        long long7 = atomikosProperties0.getMaxTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel8 = null;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel8;
        boolean boolean10 = atomikosProperties0.isSerialJtaTransactions();
        int int11 = atomikosProperties0.maxActives;
        java.lang.String str12 = atomikosProperties0.outputDir;
        atomikosProperties0.logBaseName = "{1.0=-1}";
        boolean boolean15 = atomikosProperties0.forceShutdownOnVmExit;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 50 + "'", int11 == 50);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test07972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07972");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        boolean boolean7 = atomikosProperties0.isAllowSubTransactions();
        boolean boolean8 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.allowSubTransactions = false;
        atomikosProperties0.threadedTwoPhaseCommit = true;
        boolean boolean13 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.setDefaultJtaTimeout((long) 32);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test07973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07973");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setAllowSubTransactions(true);
        boolean boolean3 = atomikosProperties0.enableLogging;
        boolean boolean4 = atomikosProperties0.isForceShutdownOnVmExit();
        java.lang.String str5 = atomikosProperties0.getService();
        java.lang.String str6 = atomikosProperties0.service;
        java.lang.String str7 = atomikosProperties0.getLogBaseName();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery8 = atomikosProperties0.getRecovery();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "tmlog" + "'", str7, "tmlog");
        org.junit.Assert.assertNotNull(recovery8);
    }

    @Test
    public void test07974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07974");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        int int7 = atomikosProperties0.maxActives;
        atomikosProperties0.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.getRecovery();
        atomikosProperties0.forceShutdownOnVmExit = false;
        long long13 = atomikosProperties0.checkpointInterval;
        int int14 = atomikosProperties0.getConsoleFileLimit();
        long long15 = atomikosProperties0.defaultJtaTimeout;
        java.lang.String str16 = atomikosProperties0.consoleFileName;
        int int17 = atomikosProperties0.getMaxActives();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 500L + "'", long13 == 500L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10000L + "'", long15 == 10000L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tm.out" + "'", str16, "tm.out");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 50 + "'", int17 == 50);
    }

    @Test
    public void test07975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07975");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        boolean boolean7 = atomikosProperties0.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery8 = atomikosProperties0.recovery;
        atomikosProperties0.setLogBaseDir("");
        long long11 = atomikosProperties0.maxTimeout;
        atomikosProperties0.serialJtaTransactions = false;
        atomikosProperties0.transactionManagerUniqueName = "{0={100=100}, {}={}}";
        atomikosProperties0.setMaxTimeout(0L);
        int int18 = atomikosProperties0.getConsoleFileCount();
        atomikosProperties0.setSerialJtaTransactions(true);
        java.lang.String str21 = atomikosProperties0.logBaseDir;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(recovery8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 300000L + "'", long11 == 300000L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
    }

    @Test
    public void test07976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07976");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        boolean boolean7 = atomikosProperties0.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery8 = atomikosProperties0.recovery;
        atomikosProperties0.setLogBaseDir("");
        long long11 = atomikosProperties0.maxTimeout;
        java.lang.String str12 = atomikosProperties0.logBaseDir;
        java.lang.String str13 = atomikosProperties0.logBaseDir;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery14 = atomikosProperties0.getRecovery();
        java.lang.String str15 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.enableLogging = false;
        java.lang.String str18 = atomikosProperties0.getOutputDir();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(recovery8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 300000L + "'", long11 == 300000L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(recovery14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test07977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07977");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.remove((java.lang.Object) (-1.0d));
        boolean boolean3 = properties0.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties5 = atomikosProperties4.asProperties();
        atomikosProperties4.service = "{-1.0=100}";
        java.lang.String str8 = atomikosProperties4.getTransactionManagerUniqueName();
        atomikosProperties4.consoleFileName = "hi!";
        atomikosProperties4.setCheckpointInterval((long) 5);
        atomikosProperties4.setConsoleFileCount(0);
        boolean boolean15 = atomikosProperties4.isThreadedTwoPhaseCommit();
        int int16 = atomikosProperties4.maxActives;
        atomikosProperties4.setConsoleFileName("{={-1.0=100}, -1.0=100}");
        int int19 = atomikosProperties4.getMaxActives();
        atomikosProperties4.setEnableLogging(true);
        atomikosProperties4.outputDir = "{com.atomikos.icatch.console_file_name=hi!, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.output_dir=tm.out, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={-1.0=100}, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}";
        boolean boolean24 = properties0.containsKey((java.lang.Object) "{com.atomikos.icatch.console_file_name=hi!, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.output_dir=tm.out, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={-1.0=100}, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        java.util.Set<java.lang.String> strSet25 = properties0.stringPropertyNames();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 50 + "'", int16 == 50);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 50 + "'", int19 == 50);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strSet25);
    }

    @Test
    public void test07978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07978");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileLimit = (byte) 10;
        long long7 = atomikosProperties0.maxTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel8 = atomikosProperties0.consoleLogLevel;
        long long9 = atomikosProperties0.checkpointInterval;
        long long10 = atomikosProperties0.maxTimeout;
        java.lang.String str11 = atomikosProperties0.getService();
        atomikosProperties0.setDefaultJtaTimeout((long) 32);
        long long14 = atomikosProperties0.getMaxTimeout();
        java.lang.String str15 = atomikosProperties0.getService();
        atomikosProperties0.setOutputDir("{1.0=-1, 10000=0}");
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel8 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel8.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 500L + "'", long9 == 500L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 300000L + "'", long10 == 300000L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "{-1.0=100}" + "'", str11, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 300000L + "'", long14 == 300000L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{-1.0=100}" + "'", str15, "{-1.0=100}");
    }

    @Test
    public void test07979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07979");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long1 = recovery0.getRetryInterval();
        long long2 = recovery0.retryInterval;
        long long3 = recovery0.forgetOrphanedLogEntriesDelay;
        recovery0.setMaxRetries((int) '4');
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 10000L + "'", long1 == 10000L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10000L + "'", long2 == 10000L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 86400000L + "'", long3 == 86400000L);
    }

    @Test
    public void test07980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07980");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        int int7 = atomikosProperties0.maxActives;
        atomikosProperties0.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.getRecovery();
        atomikosProperties0.consoleFileName = "{-1.0=100}";
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel13 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel13);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel15 = atomikosProperties0.getConsoleLogLevel();
        int int16 = atomikosProperties0.consoleFileLimit;
        atomikosProperties0.outputDir = "{={-1.0=100}, -1.0=100}";
        java.lang.String str19 = atomikosProperties0.getService();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setEnableLogging(true);
        boolean boolean24 = atomikosProperties0.allowSubTransactions;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertNull(atomikosLoggingLevel15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "{-1.0=100}" + "'", str19, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test07981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07981");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        long long5 = atomikosProperties0.getMaxTimeout();
        java.lang.String str6 = atomikosProperties0.outputDir;
        atomikosProperties0.consoleFileName = "tm.out";
        boolean boolean9 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.logBaseName = "tm.out";
        atomikosProperties0.threadedTwoPhaseCommit = false;
        long long14 = atomikosProperties0.checkpointInterval;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 500L + "'", long14 == 500L);
    }

    @Test
    public void test07982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07982");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        boolean boolean7 = atomikosProperties0.isAllowSubTransactions();
        int int8 = atomikosProperties0.getConsoleFileLimit();
        boolean boolean9 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.setMaxTimeout(300000L);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery12 = atomikosProperties0.getRecovery();
        java.lang.String str13 = atomikosProperties0.consoleFileName;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery14 = atomikosProperties0.getRecovery();
        long long15 = recovery14.forgetOrphanedLogEntriesDelay;
        long long16 = recovery14.getDelay();
        recovery14.retryInterval = 3;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(recovery12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tm.out" + "'", str13, "tm.out");
        org.junit.Assert.assertNotNull(recovery14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 86400000L + "'", long15 == 86400000L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10000L + "'", long16 == 10000L);
    }

    @Test
    public void test07983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07983");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        int int7 = atomikosProperties0.maxActives;
        atomikosProperties0.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.getRecovery();
        atomikosProperties0.outputDir = "hi!";
        java.lang.String str13 = atomikosProperties0.getLogBaseName();
        atomikosProperties0.setService("{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}");
        atomikosProperties0.maxTimeout = 0L;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery18 = atomikosProperties0.getRecovery();
        java.lang.String str19 = atomikosProperties0.outputDir;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNotNull(recovery18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
    }

    @Test
    public void test07984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07984");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Set<java.lang.String> strSet2 = properties1.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties3 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean4 = atomikosProperties3.isSerialJtaTransactions();
        atomikosProperties3.logBaseName = "{-1.0=100}";
        int int7 = atomikosProperties3.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery8 = atomikosProperties3.getRecovery();
        java.lang.String str9 = atomikosProperties3.getOutputDir();
        java.util.Properties properties10 = new java.util.Properties();
        java.lang.String str11 = properties10.toString();
        java.lang.Object obj13 = properties10.remove((java.lang.Object) (short) 100);
        java.lang.Object obj16 = properties10.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean18 = properties10.containsKey((java.lang.Object) 0L);
        java.lang.Object obj21 = properties10.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj24 = properties10.setProperty("", "{-1.0=100}");
        java.lang.String str25 = properties10.toString();
        java.util.Set<java.lang.String> strSet26 = properties10.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties28 = atomikosProperties27.asProperties();
        atomikosProperties27.service = "{-1.0=100}";
        long long31 = atomikosProperties27.getDefaultJtaTimeout();
        atomikosProperties27.enableLogging = false;
        atomikosProperties27.setMaxTimeout((long) (byte) 0);
        atomikosProperties27.setAllowSubTransactions(true);
        java.util.Properties properties38 = new java.util.Properties();
        java.lang.Object obj40 = properties38.remove((java.lang.Object) (-1.0d));
        boolean boolean41 = properties38.isEmpty();
        java.util.Collection<java.lang.Object> objCollection42 = properties38.values();
        java.lang.Object obj43 = properties10.put((java.lang.Object) true, (java.lang.Object) properties38);
        java.util.Collection<java.lang.Object> objCollection44 = properties38.values();
        java.util.Properties properties45 = new java.util.Properties();
        java.lang.String str46 = properties45.toString();
        boolean boolean47 = properties45.isEmpty();
        java.lang.Object obj50 = properties45.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet51 = properties45.entrySet();
        properties38.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties45);
        java.lang.Object obj53 = properties1.getOrDefault((java.lang.Object) atomikosProperties3, (java.lang.Object) properties45);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertNotNull(recovery8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "{}" + "'", str11, "{}");
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNull(obj24);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "{={-1.0=100}, -1.0=100}" + "'", str25, "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertNotNull(properties28);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 10000L + "'", long31 == 10000L);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(objCollection42);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNotNull(objCollection44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "{}" + "'", str46, "{}");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertNotNull(objEntrySet51);
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertEquals(obj53.toString(), "{100=100}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj53), "{100=100}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj53), "{100=100}");
    }

    @Test
    public void test07985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07985");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties12 = new java.util.Properties();
        java.lang.String str13 = properties12.toString();
        java.lang.Object obj15 = properties12.remove((java.lang.Object) (short) 100);
        java.lang.Object obj18 = properties12.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj19 = properties12.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration20 = properties12.elements();
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties12);
        boolean boolean23 = properties0.equals((java.lang.Object) 1.0f);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties25 = atomikosProperties24.asProperties();
        atomikosProperties24.service = "{-1.0=100}";
        long long28 = atomikosProperties24.getDefaultJtaTimeout();
        long long29 = atomikosProperties24.getMaxTimeout();
        int int30 = atomikosProperties24.consoleFileCount;
        int int31 = atomikosProperties24.getMaxActives();
        boolean boolean32 = atomikosProperties24.forceShutdownOnVmExit;
        java.lang.String str33 = atomikosProperties24.getTransactionManagerUniqueName();
        boolean boolean34 = properties0.containsValue((java.lang.Object) atomikosProperties24);
        java.util.Collection<java.lang.Object> objCollection35 = properties0.values();
        java.lang.String str36 = properties0.toString();
        java.lang.Object obj39 = properties0.setProperty("", "{1.0=-1}");
        java.util.Properties properties40 = new java.util.Properties(properties0);
        java.util.Properties properties41 = new java.util.Properties();
        java.lang.String str42 = properties41.toString();
        java.util.Properties properties43 = new java.util.Properties(properties41);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties45 = atomikosProperties44.asProperties();
        atomikosProperties44.service = "{-1.0=100}";
        long long48 = atomikosProperties44.getDefaultJtaTimeout();
        atomikosProperties44.setThreadedTwoPhaseCommit(true);
        boolean boolean51 = atomikosProperties44.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery52 = atomikosProperties44.recovery;
        atomikosProperties44.setLogBaseDir("");
        atomikosProperties44.setConsoleFileName("");
        atomikosProperties44.setThreadedTwoPhaseCommit(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties59 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean60 = atomikosProperties59.isSerialJtaTransactions();
        atomikosProperties59.logBaseName = "{-1.0=100}";
        int int63 = atomikosProperties59.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery64 = atomikosProperties59.getRecovery();
        atomikosProperties59.setConsoleFileCount((int) (byte) 100);
        atomikosProperties59.setAllowSubTransactions(true);
        atomikosProperties59.setService("tm.out");
        int int71 = atomikosProperties59.consoleFileLimit;
        atomikosProperties59.setDefaultJtaTimeout((long) 'a');
        atomikosProperties59.setEnableLogging(true);
        java.util.Properties properties76 = new java.util.Properties();
        java.util.Enumeration<?> wildcardEnumeration77 = properties76.propertyNames();
        boolean boolean78 = properties41.replace((java.lang.Object) atomikosProperties44, (java.lang.Object) true, (java.lang.Object) properties76);
        java.util.Enumeration<java.lang.Object> objEnumeration79 = properties76.elements();
        java.lang.Object obj80 = properties40.remove((java.lang.Object) properties76);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{}" + "'", str13, "{}");
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 10000L + "'", long28 == 10000L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 300000L + "'", long29 == 300000L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 50 + "'", int31 == 50);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(objCollection35);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "{1.0=-1, -1.0=100}" + "'", str36, "{1.0=-1, -1.0=100}");
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "{}" + "'", str42, "{}");
        org.junit.Assert.assertNotNull(properties45);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 10000L + "'", long48 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(recovery52);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 50 + "'", int63 == 50);
        org.junit.Assert.assertNotNull(recovery64);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertNotNull(wildcardEnumeration77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(objEnumeration79);
        org.junit.Assert.assertNull(obj80);
    }

    @Test
    public void test07986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07986");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getLogBaseName();
        long long5 = atomikosProperties0.defaultJtaTimeout;
        long long6 = atomikosProperties0.getMaxTimeout();
        boolean boolean7 = atomikosProperties0.forceShutdownOnVmExit;
        java.util.Properties properties8 = atomikosProperties0.asProperties();
        int int9 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.recovery;
        java.lang.String str11 = atomikosProperties0.consoleFileName;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tmlog" + "'", str4, "tmlog");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 10000L + "'", long5 == 10000L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 300000L + "'", long6 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "tm.out" + "'", str11, "tm.out");
    }

    @Test
    public void test07987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07987");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        long long7 = atomikosProperties0.getDefaultJtaTimeout();
        long long8 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.setForceShutdownOnVmExit(true);
        java.lang.String str11 = atomikosProperties0.consoleFileName;
        atomikosProperties0.maxTimeout = 0L;
        atomikosProperties0.setEnableLogging(false);
        int int16 = atomikosProperties0.getMaxActives();
        atomikosProperties0.enableLogging = true;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "tm.out" + "'", str11, "tm.out");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 50 + "'", int16 == 50);
    }

    @Test
    public void test07988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07988");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery4 = atomikosProperties0.recovery;
        recovery4.setDelay((long) (short) 0);
        long long7 = recovery4.delay;
        long long8 = recovery4.getForgetOrphanedLogEntriesDelay();
        recovery4.maxRetries = 5;
        recovery4.delay = 300000L;
        int int13 = recovery4.maxRetries;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNotNull(recovery4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 86400000L + "'", long8 == 86400000L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
    }

    @Test
    public void test07989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07989");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long1 = recovery0.forgetOrphanedLogEntriesDelay;
        recovery0.setDelay((long) (byte) -1);
        recovery0.setDelay(2L);
        long long6 = recovery0.getForgetOrphanedLogEntriesDelay();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 86400000L + "'", long1 == 86400000L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 86400000L + "'", long6 == 86400000L);
    }

    @Test
    public void test07990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07990");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setAllowSubTransactions(true);
        boolean boolean3 = atomikosProperties0.enableLogging;
        atomikosProperties0.consoleFileLimit = (byte) 100;
        java.util.Properties properties6 = new java.util.Properties();
        java.lang.String str7 = properties6.toString();
        java.util.Properties properties8 = new java.util.Properties(properties6);
        java.util.Properties properties10 = new java.util.Properties();
        java.lang.String str11 = properties10.toString();
        java.lang.Object obj13 = properties10.remove((java.lang.Object) (short) 100);
        java.lang.Object obj16 = properties10.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean18 = properties10.containsKey((java.lang.Object) 0L);
        java.lang.Object obj21 = properties10.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties22 = new java.util.Properties(properties10);
        java.util.Enumeration<java.lang.Object> objEnumeration23 = properties22.elements();
        atomikosProperties0.set(properties8, "{={-1.0=100}, -1.0=100}", (java.lang.Object) properties22);
        int int25 = properties8.size();
        java.util.Set<java.lang.Object> objSet26 = properties8.keySet();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "{}" + "'", str7, "{}");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "{}" + "'", str11, "{}");
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNotNull(objEnumeration23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(objSet26);
    }

    @Test
    public void test07991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07991");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        boolean boolean5 = atomikosProperties0.threadedTwoPhaseCommit;
        java.lang.String str6 = atomikosProperties0.service;
        atomikosProperties0.maxActives = (byte) 100;
        boolean boolean9 = atomikosProperties0.enableLogging;
        boolean boolean10 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.setConsoleFileName("{1.0=-1, 10000=0}");
        long long13 = atomikosProperties0.maxTimeout;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "{-1.0=100}" + "'", str6, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 300000L + "'", long13 == 300000L);
    }

    @Test
    public void test07992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07992");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel7 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel7);
        boolean boolean9 = atomikosProperties0.enableLogging;
        int int10 = atomikosProperties0.getConsoleFileLimit();
        int int11 = atomikosProperties0.consoleFileLimit;
        long long12 = atomikosProperties0.defaultJtaTimeout;
        boolean boolean13 = atomikosProperties0.isSerialJtaTransactions();
        java.lang.String str14 = atomikosProperties0.consoleFileName;
        atomikosProperties0.maxTimeout = '4';
        atomikosProperties0.consoleFileName = "tm.out";
        long long19 = atomikosProperties0.maxTimeout;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10000L + "'", long12 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "tm.out" + "'", str14, "tm.out");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 52L + "'", long19 == 52L);
    }

    @Test
    public void test07993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07993");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileLimit = (byte) 10;
        atomikosProperties0.consoleFileName = "hi!";
        boolean boolean9 = atomikosProperties0.isEnableLogging();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test07994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07994");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery4 = atomikosProperties0.recovery;
        recovery4.setDelay((long) (short) 0);
        int int7 = recovery4.maxRetries;
        long long8 = recovery4.getDelay();
        int int9 = recovery4.maxRetries;
        long long10 = recovery4.getDelay();
        int int11 = recovery4.maxRetries;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNotNull(recovery4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 5 + "'", int7 == 5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5 + "'", int9 == 5);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
    }

    @Test
    public void test07995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07995");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        boolean boolean2 = properties0.isEmpty();
        java.util.Properties properties3 = new java.util.Properties();
        java.lang.String str4 = properties3.toString();
        java.lang.Object obj6 = properties3.remove((java.lang.Object) (short) 100);
        java.lang.Object obj9 = properties3.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean11 = properties3.containsKey((java.lang.Object) 0L);
        java.lang.Object obj14 = properties3.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties15 = new java.util.Properties();
        java.lang.String str16 = properties15.toString();
        java.lang.Object obj18 = properties15.remove((java.lang.Object) (short) 100);
        java.lang.Object obj21 = properties15.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj22 = properties15.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration23 = properties15.elements();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties15);
        java.lang.Object obj25 = properties15.clone();
        properties15.clear();
        int int27 = properties15.size();
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties15);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties30 = atomikosProperties29.asProperties();
        atomikosProperties29.service = "{-1.0=100}";
        long long33 = atomikosProperties29.getDefaultJtaTimeout();
        atomikosProperties29.serialJtaTransactions = true;
        atomikosProperties29.maxActives = ' ';
        int int38 = atomikosProperties29.getConsoleFileCount();
        long long39 = atomikosProperties29.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties41 = atomikosProperties40.asProperties();
        atomikosProperties40.service = "{-1.0=100}";
        java.lang.String str44 = atomikosProperties40.getTransactionManagerUniqueName();
        boolean boolean45 = atomikosProperties40.isSerialJtaTransactions();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel46 = atomikosProperties40.getConsoleLogLevel();
        atomikosProperties29.setConsoleLogLevel(atomikosLoggingLevel46);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties48 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties48.setAllowSubTransactions(true);
        boolean boolean51 = atomikosProperties48.enableLogging;
        atomikosProperties48.consoleFileLimit = (byte) 100;
        java.util.Properties properties54 = new java.util.Properties();
        java.lang.String str55 = properties54.toString();
        java.util.Properties properties56 = new java.util.Properties(properties54);
        java.util.Properties properties58 = new java.util.Properties();
        java.lang.String str59 = properties58.toString();
        java.lang.Object obj61 = properties58.remove((java.lang.Object) (short) 100);
        java.lang.Object obj64 = properties58.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean66 = properties58.containsKey((java.lang.Object) 0L);
        java.lang.Object obj69 = properties58.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties70 = new java.util.Properties(properties58);
        java.util.Enumeration<java.lang.Object> objEnumeration71 = properties70.elements();
        atomikosProperties48.set(properties56, "{={-1.0=100}, -1.0=100}", (java.lang.Object) properties70);
        atomikosProperties48.setOutputDir("hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery75 = atomikosProperties48.getRecovery();
        long long76 = recovery75.getRetryInterval();
        java.lang.Object obj77 = properties0.replace((java.lang.Object) atomikosProperties29, (java.lang.Object) recovery75);
        long long78 = atomikosProperties29.checkpointInterval;
        atomikosProperties29.serialJtaTransactions = true;
        atomikosProperties29.service = "{com.atomikos.icatch.tm.out=hi!}";
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{}" + "'", str4, "{}");
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{}" + "'", str16, "{}");
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration23);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "{1.0=-1}");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(properties30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 10000L + "'", long33 == 10000L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 10000L + "'", long39 == 10000L);
        org.junit.Assert.assertNotNull(properties41);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel46 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel46.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "{}" + "'", str55, "{}");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "{}" + "'", str59, "{}");
        org.junit.Assert.assertNull(obj61);
        org.junit.Assert.assertNull(obj64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(obj69);
        org.junit.Assert.assertNotNull(objEnumeration71);
        org.junit.Assert.assertNotNull(recovery75);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 10000L + "'", long76 == 10000L);
        org.junit.Assert.assertNull(obj77);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 500L + "'", long78 == 500L);
    }

    @Test
    public void test07996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07996");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj3 = properties0.setProperty("{}", "{}");
        java.util.Enumeration<java.lang.Object> objEnumeration4 = properties0.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties0.elements();
        java.util.Properties properties6 = new java.util.Properties(properties0);
        java.util.Properties properties7 = new java.util.Properties(properties6);
        java.util.Properties properties8 = new java.util.Properties(properties6);
        java.lang.String str11 = properties8.getProperty("{}", "{{}={}}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNotNull(objEnumeration4);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "{}" + "'", str11, "{}");
    }

    @Test
    public void test07997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07997");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        java.util.Properties properties8 = new java.util.Properties();
        java.lang.String str9 = properties8.toString();
        java.lang.Object obj11 = properties8.remove((java.lang.Object) (short) 100);
        java.lang.Object obj14 = properties8.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj15 = properties8.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration16 = properties8.elements();
        java.lang.Object obj17 = properties0.putIfAbsent((java.lang.Object) 10.0f, (java.lang.Object) objEnumeration16);
        java.util.Properties properties18 = new java.util.Properties();
        java.util.Enumeration<?> wildcardEnumeration19 = properties18.propertyNames();
        java.lang.Object obj20 = properties18.clone();
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.String str22 = properties21.toString();
        boolean boolean23 = properties21.isEmpty();
        java.lang.Object obj26 = properties21.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties21.elements();
        java.lang.Object obj28 = properties0.put(obj20, (java.lang.Object) objEnumeration27);
        properties0.clear();
        java.lang.String str30 = properties0.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties32 = atomikosProperties31.asProperties();
        atomikosProperties31.service = "{-1.0=100}";
        long long35 = atomikosProperties31.getDefaultJtaTimeout();
        atomikosProperties31.serialJtaTransactions = true;
        atomikosProperties31.maxActives = ' ';
        int int40 = atomikosProperties31.getConsoleFileCount();
        boolean boolean41 = properties0.equals((java.lang.Object) atomikosProperties31);
        java.lang.Object obj42 = properties0.clone();
        java.util.Enumeration<?> wildcardEnumeration43 = properties0.propertyNames();
        java.lang.Object obj44 = properties0.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties45 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties46 = atomikosProperties45.asProperties();
        atomikosProperties45.service = "{-1.0=100}";
        java.lang.String str49 = atomikosProperties45.getLogBaseName();
        java.lang.String str50 = atomikosProperties45.transactionManagerUniqueName;
        java.lang.Object obj51 = properties0.get((java.lang.Object) atomikosProperties45);
        atomikosProperties45.setDefaultJtaTimeout((long) 5);
        java.lang.String str54 = atomikosProperties45.getService();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{}" + "'", str9, "{}");
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration16);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(wildcardEnumeration19);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{}");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{}" + "'", str22, "{}");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "{}" + "'", str30, "{}");
        org.junit.Assert.assertNotNull(properties32);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 10000L + "'", long35 == 10000L);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "{}");
        org.junit.Assert.assertNotNull(wildcardEnumeration43);
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertEquals(obj44.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj44), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj44), "{}");
        org.junit.Assert.assertNotNull(properties46);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "tmlog" + "'", str49, "tmlog");
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "{-1.0=100}" + "'", str54, "{-1.0=100}");
    }

    @Test
    public void test07998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07998");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.retryInterval = (short) 100;
        recovery0.forgetOrphanedLogEntriesDelay = 'a';
        int int5 = recovery0.getMaxRetries();
        recovery0.forgetOrphanedLogEntriesDelay = 2;
        recovery0.retryInterval = (byte) 1;
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5 + "'", int5 == 5);
    }

    @Test
    public void test07999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test07999");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        boolean boolean7 = atomikosProperties0.isEnableLogging();
        boolean boolean8 = atomikosProperties0.threadedTwoPhaseCommit;
        int int9 = atomikosProperties0.maxActives;
        atomikosProperties0.logBaseName = "{1.0=-1}";
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
    }

    @Test
    public void test08000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest15.test08000");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long1 = recovery0.forgetOrphanedLogEntriesDelay;
        recovery0.setMaxRetries(50);
        recovery0.setDelay((long) ' ');
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 86400000L + "'", long1 == 86400000L);
    }
}
