import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest2 {

    public static boolean debug = false;

    @Test
    public void test01001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01001");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        atomikosProperties2.service = "{-1.0=100}";
        long long6 = atomikosProperties2.getDefaultJtaTimeout();
        atomikosProperties2.consoleFileLimit = '#';
        java.lang.Object obj9 = properties1.get((java.lang.Object) atomikosProperties2);
        boolean boolean10 = atomikosProperties2.forceShutdownOnVmExit;
        atomikosProperties2.setOutputDir("");
        long long13 = atomikosProperties2.defaultJtaTimeout;
        java.lang.String str14 = atomikosProperties2.getLogBaseName();
        atomikosProperties2.serialJtaTransactions = true;
        atomikosProperties2.service = "{{}={}}";
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel19 = atomikosProperties2.getConsoleLogLevel();
        java.lang.Class<?> wildcardClass20 = atomikosProperties2.getClass();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10000L + "'", long13 == 10000L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "tmlog" + "'", str14, "tmlog");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel19 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel19.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test01002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01002");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long1 = recovery0.getRetryInterval();
        long long2 = recovery0.retryInterval;
        long long3 = recovery0.getForgetOrphanedLogEntriesDelay();
        recovery0.maxRetries = '4';
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 10000L + "'", long1 == 10000L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10000L + "'", long2 == 10000L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 86400000L + "'", long3 == 86400000L);
    }

    @Test
    public void test01003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01003");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj14 = properties0.setProperty("", "{-1.0=100}");
        java.lang.Object obj15 = properties0.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery16 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery16.retryInterval = (short) 100;
        recovery16.forgetOrphanedLogEntriesDelay = 'a';
        boolean boolean21 = properties0.equals((java.lang.Object) 'a');
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery22 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery22.retryInterval = (short) 100;
        recovery22.forgetOrphanedLogEntriesDelay = 'a';
        long long27 = recovery22.getDelay();
        int int28 = recovery22.maxRetries;
        int int29 = recovery22.maxRetries;
        long long30 = recovery22.getRetryInterval();
        java.util.Properties properties31 = new java.util.Properties();
        java.util.Enumeration<?> wildcardEnumeration32 = properties31.propertyNames();
        java.lang.Object obj33 = properties0.put((java.lang.Object) long30, (java.lang.Object) wildcardEnumeration32);
        java.util.Properties properties34 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties36 = atomikosProperties35.asProperties();
        atomikosProperties35.service = "{-1.0=100}";
        java.lang.String str39 = atomikosProperties35.getTransactionManagerUniqueName();
        int int40 = atomikosProperties35.getConsoleFileLimit();
        atomikosProperties35.forceShutdownOnVmExit = false;
        boolean boolean43 = properties34.contains((java.lang.Object) false);
        java.lang.String str46 = properties34.getProperty("{{}={}}", "{1.0=-1}");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(obj15);
// flaky:         org.junit.Assert.assertEquals(obj15.toString(), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10000L + "'", long27 == 10000L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5 + "'", int28 == 5);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5 + "'", int29 == 5);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 100L + "'", long30 == 100L);
        org.junit.Assert.assertNotNull(wildcardEnumeration32);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNotNull(properties36);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "{1.0=-1}" + "'", str46, "{1.0=-1}");
    }

    @Test
    public void test01004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01004");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        long long7 = atomikosProperties0.getDefaultJtaTimeout();
        long long8 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties9 = new java.util.Properties();
        java.lang.Object obj11 = properties9.remove((java.lang.Object) (-1.0d));
        boolean boolean12 = properties9.isEmpty();
        java.lang.Object obj15 = properties9.setProperty("hi!", "{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties18 = atomikosProperties17.asProperties();
        atomikosProperties17.service = "{-1.0=100}";
        long long21 = atomikosProperties17.getDefaultJtaTimeout();
        atomikosProperties17.serialJtaTransactions = true;
        atomikosProperties17.maxActives = ' ';
        atomikosProperties0.set(properties9, "", (java.lang.Object) ' ');
        boolean boolean27 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.defaultJtaTimeout = 32;
        java.lang.String str30 = atomikosProperties0.transactionManagerUniqueName;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10000L + "'", long21 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(str30);
    }

    @Test
    public void test01005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01005");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        boolean boolean2 = properties0.isEmpty();
        java.util.Properties properties3 = new java.util.Properties();
        java.lang.String str4 = properties3.toString();
        java.lang.Object obj6 = properties3.remove((java.lang.Object) (short) 100);
        java.lang.Object obj9 = properties3.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean11 = properties3.containsKey((java.lang.Object) 0L);
        boolean boolean12 = properties0.containsValue((java.lang.Object) 0L);
        java.util.Set<java.lang.String> strSet13 = properties0.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties15 = atomikosProperties14.asProperties();
        atomikosProperties14.service = "{-1.0=100}";
        java.lang.String str18 = atomikosProperties14.getLogBaseName();
        java.lang.String str19 = atomikosProperties14.transactionManagerUniqueName;
        atomikosProperties14.consoleFileName = "";
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties22.setAllowSubTransactions(true);
        atomikosProperties22.logBaseName = "{={-1.0=100}, -1.0=100}";
        int int27 = atomikosProperties22.getConsoleFileLimit();
        java.lang.Object obj28 = properties0.putIfAbsent((java.lang.Object) atomikosProperties14, (java.lang.Object) atomikosProperties22);
        java.lang.String str29 = atomikosProperties22.consoleFileName;
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{}" + "'", str4, "{}");
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "tmlog" + "'", str18, "tmlog");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "tm.out" + "'", str29, "tm.out");
    }

    @Test
    public void test01006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01006");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        atomikosProperties0.setTransactionManagerUniqueName("{-1.0=100}");
        atomikosProperties0.consoleFileCount = 0;
        atomikosProperties0.enableLogging = false;
        java.lang.String str13 = atomikosProperties0.getService();
        atomikosProperties0.outputDir = "{{}={}}";
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{-1.0=100}" + "'", str13, "{-1.0=100}");
    }

    @Test
    public void test01007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01007");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.util.Properties properties3 = new java.util.Properties();
        java.lang.String str4 = properties3.toString();
        java.lang.Object obj6 = properties3.remove((java.lang.Object) (short) 100);
        java.lang.Object obj9 = properties3.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean11 = properties3.containsKey((java.lang.Object) 0L);
        java.lang.Object obj14 = properties3.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj17 = properties3.setProperty("", "{-1.0=100}");
        java.util.Enumeration<java.lang.Object> objEnumeration18 = properties3.keys();
        java.util.Properties properties19 = new java.util.Properties();
        java.lang.String str20 = properties19.toString();
        boolean boolean21 = properties19.isEmpty();
        java.lang.Object obj24 = properties19.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration25 = properties19.elements();
        java.lang.Object obj26 = properties2.replace((java.lang.Object) objEnumeration18, (java.lang.Object) properties19);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties19.elements();
        java.util.Enumeration<java.lang.Object> objEnumeration28 = properties19.keys();
        java.util.Properties properties29 = new java.util.Properties();
        java.util.Properties properties30 = new java.util.Properties();
        java.lang.String str31 = properties30.toString();
        java.lang.Object obj33 = properties30.remove((java.lang.Object) (short) 100);
        java.lang.Object obj36 = properties30.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        int int37 = properties30.size();
        java.util.Properties properties38 = new java.util.Properties();
        java.lang.Object obj40 = properties38.remove((java.lang.Object) (-1.0d));
        boolean boolean41 = properties38.isEmpty();
        java.lang.Object obj44 = properties38.setProperty("hi!", "{}");
        boolean boolean45 = properties29.remove((java.lang.Object) int37, (java.lang.Object) properties38);
        java.util.Properties properties46 = new java.util.Properties();
        java.lang.String str47 = properties46.toString();
        java.lang.Object obj49 = properties46.remove((java.lang.Object) (short) 100);
        java.util.Properties properties50 = new java.util.Properties();
        java.lang.String str51 = properties50.toString();
        boolean boolean52 = properties50.isEmpty();
        java.lang.Object obj55 = properties50.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration56 = properties50.elements();
        boolean boolean57 = properties46.containsKey((java.lang.Object) properties50);
        boolean boolean58 = properties38.contains((java.lang.Object) boolean57);
        java.util.Set<java.lang.String> strSet59 = properties38.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties60 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean61 = atomikosProperties60.isSerialJtaTransactions();
        atomikosProperties60.logBaseName = "{-1.0=100}";
        int int64 = atomikosProperties60.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery65 = atomikosProperties60.getRecovery();
        atomikosProperties60.setConsoleFileCount((int) (byte) 100);
        atomikosProperties60.setAllowSubTransactions(true);
        atomikosProperties60.setService("tm.out");
        int int72 = atomikosProperties60.consoleFileLimit;
        atomikosProperties60.setDefaultJtaTimeout((long) 'a');
        boolean boolean75 = atomikosProperties60.enableLogging;
        atomikosProperties60.setService("{={-1.0=100}, -1.0=100}");
        boolean boolean78 = properties19.remove((java.lang.Object) properties38, (java.lang.Object) atomikosProperties60);
        atomikosProperties60.checkpointInterval = (short) 100;
        boolean boolean81 = atomikosProperties60.allowSubTransactions;
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{}" + "'", str4, "{}");
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(objEnumeration18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{}" + "'", str20, "{}");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(objEnumeration25);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertNotNull(objEnumeration28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "{}" + "'", str31, "{}");
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "{}" + "'", str47, "{}");
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "{}" + "'", str51, "{}");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertNotNull(objEnumeration56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(strSet59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 50 + "'", int64 == 50);
        org.junit.Assert.assertNotNull(recovery65);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
    }

    @Test
    public void test01008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01008");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.String str14 = properties0.getProperty("{1.0=-1, -1.0=100}", "{100=100}");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "{100=100}" + "'", str14, "{100=100}");
    }

    @Test
    public void test01009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01009");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties12 = new java.util.Properties(properties0);
        java.util.Properties properties14 = new java.util.Properties();
        java.lang.String str15 = properties14.toString();
        java.lang.Object obj17 = properties14.remove((java.lang.Object) (short) 100);
        java.lang.Object obj20 = properties14.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean22 = properties14.containsKey((java.lang.Object) 0L);
        java.lang.Object obj25 = properties14.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj28 = properties14.setProperty("", "{-1.0=100}");
        java.lang.String str29 = properties14.toString();
        java.util.Set<java.lang.String> strSet30 = properties14.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties32 = atomikosProperties31.asProperties();
        atomikosProperties31.service = "{-1.0=100}";
        long long35 = atomikosProperties31.getDefaultJtaTimeout();
        atomikosProperties31.enableLogging = false;
        atomikosProperties31.setMaxTimeout((long) (byte) 0);
        atomikosProperties31.setAllowSubTransactions(true);
        java.util.Properties properties42 = new java.util.Properties();
        java.lang.Object obj44 = properties42.remove((java.lang.Object) (-1.0d));
        boolean boolean45 = properties42.isEmpty();
        java.util.Collection<java.lang.Object> objCollection46 = properties42.values();
        java.lang.Object obj47 = properties14.put((java.lang.Object) true, (java.lang.Object) properties42);
        java.lang.Object obj48 = properties12.replace((java.lang.Object) 100.0d, (java.lang.Object) properties42);
        java.util.Enumeration<java.lang.Object> objEnumeration49 = properties12.elements();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Enumeration<?> wildcardEnumeration50 = properties12.propertyNames();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.Double cannot be cast to java.lang.String");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{}" + "'", str15, "{}");
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNull(obj28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "{={-1.0=100}, -1.0=100}" + "'", str29, "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertNotNull(properties32);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 10000L + "'", long35 == 10000L);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(objCollection46);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertNotNull(objEnumeration49);
    }

    @Test
    public void test01010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01010");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties12 = new java.util.Properties(properties0);
        java.util.Properties properties14 = new java.util.Properties();
        java.lang.String str15 = properties14.toString();
        java.lang.Object obj17 = properties14.remove((java.lang.Object) (short) 100);
        java.lang.Object obj20 = properties14.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean22 = properties14.containsKey((java.lang.Object) 0L);
        java.lang.Object obj25 = properties14.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj28 = properties14.setProperty("", "{-1.0=100}");
        java.lang.String str29 = properties14.toString();
        java.util.Set<java.lang.String> strSet30 = properties14.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties32 = atomikosProperties31.asProperties();
        atomikosProperties31.service = "{-1.0=100}";
        long long35 = atomikosProperties31.getDefaultJtaTimeout();
        atomikosProperties31.enableLogging = false;
        atomikosProperties31.setMaxTimeout((long) (byte) 0);
        atomikosProperties31.setAllowSubTransactions(true);
        java.util.Properties properties42 = new java.util.Properties();
        java.lang.Object obj44 = properties42.remove((java.lang.Object) (-1.0d));
        boolean boolean45 = properties42.isEmpty();
        java.util.Collection<java.lang.Object> objCollection46 = properties42.values();
        java.lang.Object obj47 = properties14.put((java.lang.Object) true, (java.lang.Object) properties42);
        java.lang.Object obj48 = properties12.replace((java.lang.Object) 100.0d, (java.lang.Object) properties42);
        java.util.Enumeration<java.lang.Object> objEnumeration49 = properties12.elements();
        java.util.Properties properties50 = new java.util.Properties();
        java.lang.Object obj53 = properties50.setProperty("{}", "{}");
        java.util.Enumeration<java.lang.Object> objEnumeration54 = properties50.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration55 = properties50.elements();
        java.util.Properties properties56 = new java.util.Properties(properties50);
        java.lang.String str58 = properties50.getProperty("");
        java.util.Set<java.lang.String> strSet59 = properties50.stringPropertyNames();
        java.util.Set<java.lang.Object> objSet60 = properties50.keySet();
        java.util.Properties properties61 = new java.util.Properties();
        java.lang.String str62 = properties61.toString();
        java.lang.Object obj64 = properties61.remove((java.lang.Object) (short) 100);
        java.lang.Object obj67 = properties61.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean69 = properties61.containsKey((java.lang.Object) 0L);
        java.lang.Object obj72 = properties61.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj75 = properties61.setProperty("", "{-1.0=100}");
        boolean boolean76 = properties61.isEmpty();
        java.util.Properties properties77 = new java.util.Properties();
        java.lang.String str78 = properties77.toString();
        java.util.Properties properties79 = new java.util.Properties(properties77);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet80 = properties79.entrySet();
        java.util.Properties properties82 = new java.util.Properties();
        java.lang.Object obj84 = properties82.remove((java.lang.Object) (-1.0d));
        int int85 = properties82.size();
        boolean boolean86 = properties61.replace((java.lang.Object) properties79, (java.lang.Object) 100L, (java.lang.Object) properties82);
        boolean boolean87 = properties12.remove((java.lang.Object) properties50, (java.lang.Object) properties79);
        java.lang.String str90 = properties79.getProperty("{1.0=-1}", "{{-1.0=100}=}");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{}" + "'", str15, "{}");
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNull(obj28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "{={-1.0=100}, -1.0=100}" + "'", str29, "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertNotNull(properties32);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 10000L + "'", long35 == 10000L);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(objCollection46);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertNotNull(objEnumeration49);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertNotNull(objEnumeration54);
        org.junit.Assert.assertNotNull(objEnumeration55);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(strSet59);
        org.junit.Assert.assertNotNull(objSet60);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "{}" + "'", str62, "{}");
        org.junit.Assert.assertNull(obj64);
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(obj72);
        org.junit.Assert.assertNull(obj75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "{}" + "'", str78, "{}");
        org.junit.Assert.assertNotNull(objEntrySet80);
        org.junit.Assert.assertNull(obj84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "{{-1.0=100}=}" + "'", str90, "{{-1.0=100}=}");
    }

    @Test
    public void test01011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01011");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj3 = properties0.setProperty("{}", "{}");
        java.util.Enumeration<java.lang.Object> objEnumeration4 = properties0.keys();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet5 = properties0.entrySet();
        java.lang.String str8 = properties0.getProperty("{}", "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNotNull(objEnumeration4);
        org.junit.Assert.assertNotNull(objEntrySet5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{}" + "'", str8, "{}");
    }

    @Test
    public void test01012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01012");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        atomikosProperties0.setConsoleFileCount((int) (byte) 100);
        java.lang.String str8 = atomikosProperties0.logBaseName;
        atomikosProperties0.setCheckpointInterval((long) 18);
        atomikosProperties0.checkpointInterval = 100;
        atomikosProperties0.enableLogging = false;
        atomikosProperties0.maxActives = 100;
        atomikosProperties0.setOutputDir("{100=100}");
        atomikosProperties0.defaultJtaTimeout = 10;
        java.lang.Class<?> wildcardClass21 = atomikosProperties0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{-1.0=100}" + "'", str8, "{-1.0=100}");
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test01013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01013");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        atomikosProperties0.setConsoleFileCount((int) (byte) 100);
        atomikosProperties0.setAllowSubTransactions(true);
        atomikosProperties0.setService("tm.out");
        atomikosProperties0.setSerialJtaTransactions(true);
        java.util.Properties properties14 = atomikosProperties0.asProperties();
        atomikosProperties0.outputDir = "hi!";
        boolean boolean17 = atomikosProperties0.threadedTwoPhaseCommit;
        atomikosProperties0.threadedTwoPhaseCommit = true;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test01014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01014");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long1 = recovery0.getRetryInterval();
        long long2 = recovery0.getDelay();
        long long3 = recovery0.getDelay();
        recovery0.setForgetOrphanedLogEntriesDelay(10000L);
        long long6 = recovery0.getForgetOrphanedLogEntriesDelay();
        long long7 = recovery0.getDelay();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 10000L + "'", long1 == 10000L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10000L + "'", long2 == 10000L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 10000L + "'", long3 == 10000L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
    }

    @Test
    public void test01015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01015");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        boolean boolean2 = properties0.isEmpty();
        java.lang.Object obj5 = properties0.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Properties properties6 = new java.util.Properties();
        java.lang.String str7 = properties6.toString();
        java.lang.Object obj9 = properties6.remove((java.lang.Object) (short) 100);
        java.lang.Object obj12 = properties6.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean14 = properties6.containsKey((java.lang.Object) 0L);
        java.lang.Object obj17 = properties6.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties18 = new java.util.Properties(properties6);
        boolean boolean19 = properties0.containsValue((java.lang.Object) properties6);
        java.lang.String str21 = properties0.getProperty("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties23 = atomikosProperties22.asProperties();
        atomikosProperties22.service = "{-1.0=100}";
        long long26 = atomikosProperties22.getDefaultJtaTimeout();
        atomikosProperties22.enableLogging = false;
        atomikosProperties22.setMaxTimeout((long) (byte) 0);
        atomikosProperties22.setAllowSubTransactions(true);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties34 = atomikosProperties33.asProperties();
        atomikosProperties33.service = "{-1.0=100}";
        java.lang.String str37 = atomikosProperties33.getTransactionManagerUniqueName();
        boolean boolean38 = atomikosProperties33.isSerialJtaTransactions();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel39 = atomikosProperties33.getConsoleLogLevel();
        atomikosProperties22.consoleLogLevel = atomikosLoggingLevel39;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties41.setAllowSubTransactions(true);
        boolean boolean44 = atomikosProperties41.enableLogging;
        boolean boolean45 = atomikosProperties41.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel46 = atomikosProperties41.consoleLogLevel;
        atomikosProperties22.consoleLogLevel = atomikosLoggingLevel46;
        atomikosProperties22.setConsoleFileName("{1.0=-1, -1.0=100}");
        java.util.Properties properties50 = new java.util.Properties();
        java.lang.String str51 = properties50.toString();
        java.util.Properties properties52 = new java.util.Properties(properties50);
        boolean boolean53 = properties52.isEmpty();
        java.lang.Object obj56 = properties52.setProperty("tmlog", "{}");
        java.lang.Object obj57 = properties52.clone();
        java.lang.Object obj58 = properties0.putIfAbsent((java.lang.Object) atomikosProperties22, obj57);
        java.util.Enumeration<java.lang.Object> objEnumeration59 = properties0.elements();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet60 = properties0.entrySet();
        java.io.OutputStream outputStream61 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.store(outputStream61, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=32, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={-1.0=100}, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "{}" + "'", str7, "{}");
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(properties23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 10000L + "'", long26 == 10000L);
        org.junit.Assert.assertNotNull(properties34);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel39 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel39.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel46 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel46.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "{}" + "'", str51, "{}");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertNotNull(obj57);
        org.junit.Assert.assertEquals(obj57.toString(), "{tmlog={}}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj57), "{tmlog={}}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj57), "{tmlog={}}");
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertNotNull(objEnumeration59);
        org.junit.Assert.assertNotNull(objEntrySet60);
    }

    @Test
    public void test01016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01016");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.checkpointInterval = 86400000L;
        long long4 = atomikosProperties0.checkpointInterval;
        java.lang.String str5 = atomikosProperties0.getLogBaseName();
        int int6 = atomikosProperties0.getMaxActives();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 86400000L + "'", long4 == 86400000L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tmlog" + "'", str5, "tmlog");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 50 + "'", int6 == 50);
    }

    @Test
    public void test01017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01017");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj7 = properties0.clone();
        java.util.Properties properties8 = new java.util.Properties();
        java.lang.Object obj10 = properties8.remove((java.lang.Object) (-1.0d));
        boolean boolean11 = properties8.isEmpty();
        int int12 = properties8.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery13 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery13.retryInterval = (short) 100;
        recovery13.forgetOrphanedLogEntriesDelay = 'a';
        java.util.Properties properties18 = new java.util.Properties();
        java.lang.Object obj20 = properties18.remove((java.lang.Object) (-1.0d));
        boolean boolean21 = properties18.isEmpty();
        int int22 = properties18.size();
        java.lang.String str24 = properties18.getProperty("{}");
        boolean boolean25 = properties8.remove((java.lang.Object) recovery13, (java.lang.Object) properties18);
        boolean boolean26 = properties0.containsValue((java.lang.Object) properties8);
        java.io.OutputStream outputStream27 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties8.storeToXML(outputStream27, "{{={-1.0=100}, -1.0=100}=}", "{}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{1.0=-1}");
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test01018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01018");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.remove((java.lang.Object) (-1.0d));
        boolean boolean3 = properties0.isEmpty();
        java.util.Properties properties4 = new java.util.Properties();
        java.lang.String str5 = properties4.toString();
        java.lang.Object obj7 = properties4.remove((java.lang.Object) (short) 100);
        java.lang.Object obj10 = properties4.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean12 = properties4.containsKey((java.lang.Object) 0L);
        java.lang.Object obj15 = properties4.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj18 = properties4.setProperty("", "{-1.0=100}");
        java.lang.Object obj19 = properties4.clone();
        java.lang.Object obj20 = properties0.get((java.lang.Object) properties4);
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.String str22 = properties21.toString();
        java.lang.Object obj24 = properties21.remove((java.lang.Object) (short) 100);
        java.lang.Object obj27 = properties21.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean29 = properties21.containsKey((java.lang.Object) 0L);
        java.lang.Object obj32 = properties21.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties33 = new java.util.Properties(properties21);
        java.util.Enumeration<java.lang.Object> objEnumeration34 = properties33.elements();
        java.util.Properties properties35 = new java.util.Properties();
        java.lang.Object obj38 = properties35.setProperty("{}", "{}");
        java.util.Enumeration<java.lang.Object> objEnumeration39 = properties35.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration40 = properties35.elements();
        java.util.Properties properties41 = new java.util.Properties(properties35);
        java.util.Set<java.lang.Object> objSet42 = properties35.keySet();
        java.util.Set<java.lang.String> strSet43 = properties35.stringPropertyNames();
        boolean boolean44 = properties33.contains((java.lang.Object) properties35);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery45 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery45.retryInterval = (short) 100;
        recovery45.forgetOrphanedLogEntriesDelay = 'a';
        long long50 = recovery45.retryInterval;
        recovery45.forgetOrphanedLogEntriesDelay = 0L;
        int int53 = recovery45.getMaxRetries();
        recovery45.maxRetries = 100;
        boolean boolean56 = properties4.remove((java.lang.Object) properties35, (java.lang.Object) recovery45);
        java.io.InputStream inputStream57 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties35.loadFromXML(inputStream57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{}" + "'", str5, "{}");
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(obj19);
// flaky:         org.junit.Assert.assertEquals(obj19.toString(), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{}" + "'", str22, "{}");
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNotNull(objEnumeration34);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertNotNull(objEnumeration39);
        org.junit.Assert.assertNotNull(objEnumeration40);
        org.junit.Assert.assertNotNull(objSet42);
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 100L + "'", long50 == 100L);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 5 + "'", int53 == 5);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test01019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01019");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.enableLogging = false;
        atomikosProperties0.setMaxTimeout((long) (byte) 0);
        atomikosProperties0.setAllowSubTransactions(true);
        java.util.Properties properties11 = new java.util.Properties();
        java.lang.Object obj13 = properties11.remove((java.lang.Object) (-1.0d));
        boolean boolean14 = properties11.isEmpty();
        java.util.Properties properties15 = new java.util.Properties();
        java.lang.String str16 = properties15.toString();
        java.lang.Object obj18 = properties15.remove((java.lang.Object) (short) 100);
        java.lang.Object obj21 = properties15.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean23 = properties15.containsKey((java.lang.Object) 0L);
        java.lang.Object obj26 = properties15.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj29 = properties15.setProperty("", "{-1.0=100}");
        java.lang.Object obj30 = properties15.clone();
        java.lang.Object obj31 = properties11.get((java.lang.Object) properties15);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery33 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery33.retryInterval = (short) 100;
        recovery33.forgetOrphanedLogEntriesDelay = 'a';
        long long38 = recovery33.getDelay();
        long long39 = recovery33.getRetryInterval();
        recovery33.forgetOrphanedLogEntriesDelay = 10000L;
        atomikosProperties0.set(properties15, "tmlog", (java.lang.Object) recovery33);
        java.util.Properties properties43 = new java.util.Properties();
        java.lang.String str44 = properties43.toString();
        java.lang.Object obj46 = properties43.remove((java.lang.Object) (short) 100);
        java.lang.Object obj49 = properties43.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        java.util.Properties properties51 = new java.util.Properties();
        java.lang.String str52 = properties51.toString();
        java.lang.Object obj54 = properties51.remove((java.lang.Object) (short) 100);
        java.lang.Object obj57 = properties51.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj58 = properties51.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration59 = properties51.elements();
        java.lang.Object obj60 = properties43.putIfAbsent((java.lang.Object) 10.0f, (java.lang.Object) objEnumeration59);
        boolean boolean61 = properties15.contains((java.lang.Object) 10.0f);
        java.util.Set<java.lang.String> strSet62 = properties15.stringPropertyNames();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{}" + "'", str16, "{}");
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNotNull(obj30);
// flaky:         org.junit.Assert.assertEquals(obj30.toString(), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 10000L + "'", long38 == 10000L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 100L + "'", long39 == 100L);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "{}" + "'", str44, "{}");
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "{}" + "'", str52, "{}");
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertEquals(obj58.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj58), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj58), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration59);
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(strSet62);
    }

    @Test
    public void test01020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01020");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj14 = properties0.setProperty("", "{-1.0=100}");
        java.lang.Object obj15 = properties0.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery16 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery16.retryInterval = (short) 100;
        recovery16.forgetOrphanedLogEntriesDelay = 'a';
        boolean boolean21 = properties0.equals((java.lang.Object) 'a');
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery22 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery22.retryInterval = (short) 100;
        recovery22.forgetOrphanedLogEntriesDelay = 'a';
        long long27 = recovery22.getDelay();
        int int28 = recovery22.maxRetries;
        int int29 = recovery22.maxRetries;
        long long30 = recovery22.getRetryInterval();
        java.util.Properties properties31 = new java.util.Properties();
        java.util.Enumeration<?> wildcardEnumeration32 = properties31.propertyNames();
        java.lang.Object obj33 = properties0.put((java.lang.Object) long30, (java.lang.Object) wildcardEnumeration32);
        java.util.Enumeration<java.lang.Object> objEnumeration34 = properties0.elements();
        java.lang.Object obj37 = properties0.setProperty("{1.0=-1}", "");
        boolean boolean39 = properties0.containsValue((java.lang.Object) (byte) -1);
        java.lang.Class<?> wildcardClass40 = properties0.getClass();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(obj15);
// flaky:         org.junit.Assert.assertEquals(obj15.toString(), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10000L + "'", long27 == 10000L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5 + "'", int28 == 5);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5 + "'", int29 == 5);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 100L + "'", long30 == 100L);
        org.junit.Assert.assertNotNull(wildcardEnumeration32);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNotNull(objEnumeration34);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test01021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01021");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet2 = properties1.entrySet();
        java.util.Properties properties3 = new java.util.Properties();
        java.lang.Object obj6 = properties3.setProperty("{}", "{}");
        java.util.Enumeration<java.lang.Object> objEnumeration7 = properties3.keys();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet8 = properties3.entrySet();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        atomikosProperties10.service = "{-1.0=100}";
        java.lang.String str14 = atomikosProperties10.getLogBaseName();
        long long15 = atomikosProperties10.defaultJtaTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel16 = null;
        atomikosProperties10.setConsoleLogLevel(atomikosLoggingLevel16);
        atomikosProperties10.setLogBaseDir("");
        java.util.Properties properties20 = atomikosProperties10.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties22 = atomikosProperties21.asProperties();
        atomikosProperties21.service = "{-1.0=100}";
        long long25 = atomikosProperties21.getDefaultJtaTimeout();
        long long26 = atomikosProperties21.getMaxTimeout();
        int int27 = atomikosProperties21.consoleFileCount;
        int int28 = atomikosProperties21.getMaxActives();
        atomikosProperties21.setAllowSubTransactions(true);
        boolean boolean31 = atomikosProperties21.serialJtaTransactions;
        java.lang.Object obj32 = properties20.remove((java.lang.Object) boolean31);
        boolean boolean33 = properties1.containsKey((java.lang.Object) boolean31);
        java.lang.Object obj34 = properties1.clone();
        java.util.Collection<java.lang.Object> objCollection35 = properties1.values();
        java.util.Set<java.lang.Object> objSet36 = properties1.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties38 = atomikosProperties37.asProperties();
        atomikosProperties37.service = "{-1.0=100}";
        long long41 = atomikosProperties37.getDefaultJtaTimeout();
        atomikosProperties37.setThreadedTwoPhaseCommit(true);
        boolean boolean44 = atomikosProperties37.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery45 = atomikosProperties37.recovery;
        atomikosProperties37.setLogBaseDir("");
        boolean boolean48 = properties1.equals((java.lang.Object) atomikosProperties37);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties50 = atomikosProperties49.asProperties();
        atomikosProperties49.service = "{-1.0=100}";
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery53 = atomikosProperties49.recovery;
        atomikosProperties49.enableLogging = true;
        java.lang.String str56 = atomikosProperties49.logBaseName;
        java.lang.Object obj57 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj58 = properties1.putIfAbsent((java.lang.Object) atomikosProperties49, obj57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEntrySet2);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(objEnumeration7);
        org.junit.Assert.assertNotNull(objEntrySet8);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "tmlog" + "'", str14, "tmlog");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10000L + "'", long15 == 10000L);
        org.junit.Assert.assertNotNull(properties20);
        org.junit.Assert.assertNotNull(properties22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 10000L + "'", long25 == 10000L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 300000L + "'", long26 == 300000L);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 50 + "'", int28 == 50);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "{{}={}}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "{{}={}}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "{{}={}}");
        org.junit.Assert.assertNotNull(objCollection35);
        org.junit.Assert.assertNotNull(objSet36);
        org.junit.Assert.assertNotNull(properties38);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 10000L + "'", long41 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(recovery45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(properties50);
        org.junit.Assert.assertNotNull(recovery53);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "tmlog" + "'", str56, "tmlog");
    }

    @Test
    public void test01022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01022");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj7 = properties0.clone();
        java.util.Set<java.lang.String> strSet8 = properties0.stringPropertyNames();
        java.util.Properties properties9 = new java.util.Properties();
        java.lang.String str10 = properties9.toString();
        java.lang.Object obj12 = properties9.remove((java.lang.Object) (short) 100);
        java.lang.Object obj15 = properties9.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean17 = properties9.containsKey((java.lang.Object) 0L);
        java.lang.Object obj20 = properties9.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.String str22 = properties21.toString();
        java.lang.Object obj24 = properties21.remove((java.lang.Object) (short) 100);
        java.lang.Object obj27 = properties21.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj28 = properties21.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration29 = properties21.elements();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties21);
        java.util.Properties properties31 = new java.util.Properties();
        java.lang.String str32 = properties31.toString();
        java.lang.Object obj34 = properties31.remove((java.lang.Object) (short) 100);
        java.lang.Object obj37 = properties31.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean39 = properties31.containsKey((java.lang.Object) 0L);
        java.lang.Object obj42 = properties31.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties43 = new java.util.Properties();
        java.lang.String str44 = properties43.toString();
        java.lang.Object obj46 = properties43.remove((java.lang.Object) (short) 100);
        java.lang.Object obj49 = properties43.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj50 = properties43.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration51 = properties43.elements();
        properties31.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties43);
        java.lang.Object obj53 = properties0.putIfAbsent((java.lang.Object) properties9, (java.lang.Object) properties43);
        java.util.Properties properties54 = new java.util.Properties();
        java.lang.Object obj57 = properties54.setProperty("{}", "{}");
        java.util.Enumeration<java.lang.Object> objEnumeration58 = properties54.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration59 = properties54.elements();
        java.util.Properties properties60 = new java.util.Properties(properties54);
        java.util.Set<java.lang.Object> objSet61 = properties54.keySet();
        java.lang.String str62 = properties54.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery63 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery63.retryInterval = (short) 100;
        recovery63.forgetOrphanedLogEntriesDelay = 'a';
        long long68 = recovery63.retryInterval;
        recovery63.forgetOrphanedLogEntriesDelay = 0L;
        long long71 = recovery63.getForgetOrphanedLogEntriesDelay();
        recovery63.setRetryInterval((long) 0);
        long long74 = recovery63.getForgetOrphanedLogEntriesDelay();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties75 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties76 = atomikosProperties75.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties77 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties78 = atomikosProperties77.asProperties();
        atomikosProperties77.service = "{-1.0=100}";
        long long81 = atomikosProperties77.getDefaultJtaTimeout();
        atomikosProperties77.consoleFileLimit = '#';
        java.lang.Object obj84 = properties76.get((java.lang.Object) atomikosProperties77);
        atomikosProperties77.maxActives = (byte) 0;
        atomikosProperties77.outputDir = "";
        atomikosProperties77.setEnableLogging(true);
        boolean boolean91 = properties54.remove((java.lang.Object) recovery63, (java.lang.Object) atomikosProperties77);
        boolean boolean92 = properties9.containsValue((java.lang.Object) boolean91);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{1.0=-1}");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "{}" + "'", str10, "{}");
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{}" + "'", str22, "{}");
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "{}" + "'", str32, "{}");
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "{}" + "'", str44, "{}");
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertEquals(obj50.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj50), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj50), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration51);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertNotNull(objEnumeration58);
        org.junit.Assert.assertNotNull(objEnumeration59);
        org.junit.Assert.assertNotNull(objSet61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "{{}={}}" + "'", str62, "{{}={}}");
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 100L + "'", long68 == 100L);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertNotNull(properties76);
        org.junit.Assert.assertNotNull(properties78);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 10000L + "'", long81 == 10000L);
        org.junit.Assert.assertNull(obj84);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test01023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01023");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        atomikosProperties2.service = "{-1.0=100}";
        long long6 = atomikosProperties2.getDefaultJtaTimeout();
        atomikosProperties2.consoleFileLimit = '#';
        java.lang.Object obj9 = properties1.get((java.lang.Object) atomikosProperties2);
        boolean boolean10 = atomikosProperties2.forceShutdownOnVmExit;
        atomikosProperties2.setOutputDir("");
        long long13 = atomikosProperties2.defaultJtaTimeout;
        java.lang.String str14 = atomikosProperties2.getLogBaseName();
        atomikosProperties2.serialJtaTransactions = true;
        atomikosProperties2.maxActives = 0;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10000L + "'", long13 == 10000L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "tmlog" + "'", str14, "tmlog");
    }

    @Test
    public void test01024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01024");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        boolean boolean2 = properties0.isEmpty();
        java.io.InputStream inputStream3 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.load(inputStream3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test01025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01025");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet2 = properties1.entrySet();
        java.util.Properties properties3 = new java.util.Properties();
        java.lang.Object obj6 = properties3.setProperty("{}", "{}");
        java.util.Enumeration<java.lang.Object> objEnumeration7 = properties3.keys();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet8 = properties3.entrySet();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        atomikosProperties10.service = "{-1.0=100}";
        java.lang.String str14 = atomikosProperties10.getLogBaseName();
        long long15 = atomikosProperties10.defaultJtaTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel16 = null;
        atomikosProperties10.setConsoleLogLevel(atomikosLoggingLevel16);
        atomikosProperties10.setLogBaseDir("");
        java.util.Properties properties20 = atomikosProperties10.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties22 = atomikosProperties21.asProperties();
        atomikosProperties21.service = "{-1.0=100}";
        long long25 = atomikosProperties21.getDefaultJtaTimeout();
        long long26 = atomikosProperties21.getMaxTimeout();
        int int27 = atomikosProperties21.consoleFileCount;
        int int28 = atomikosProperties21.getMaxActives();
        atomikosProperties21.setAllowSubTransactions(true);
        boolean boolean31 = atomikosProperties21.serialJtaTransactions;
        java.lang.Object obj32 = properties20.remove((java.lang.Object) boolean31);
        boolean boolean33 = properties1.containsKey((java.lang.Object) boolean31);
        java.lang.Object obj34 = properties1.clone();
        java.util.Collection<java.lang.Object> objCollection35 = properties1.values();
        java.util.Set<java.lang.Object> objSet36 = properties1.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties38 = atomikosProperties37.asProperties();
        atomikosProperties37.service = "{-1.0=100}";
        long long41 = atomikosProperties37.getDefaultJtaTimeout();
        atomikosProperties37.setThreadedTwoPhaseCommit(true);
        boolean boolean44 = atomikosProperties37.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery45 = atomikosProperties37.recovery;
        atomikosProperties37.setLogBaseDir("");
        boolean boolean48 = properties1.equals((java.lang.Object) atomikosProperties37);
        int int49 = atomikosProperties37.consoleFileLimit;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean51 = atomikosProperties50.isSerialJtaTransactions();
        atomikosProperties50.logBaseName = "{-1.0=100}";
        int int54 = atomikosProperties50.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery55 = atomikosProperties50.getRecovery();
        atomikosProperties50.setConsoleFileCount((int) (byte) 100);
        atomikosProperties50.setAllowSubTransactions(true);
        atomikosProperties50.setService("tm.out");
        atomikosProperties50.setSerialJtaTransactions(true);
        boolean boolean64 = atomikosProperties50.isThreadedTwoPhaseCommit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel65 = atomikosProperties50.consoleLogLevel;
        atomikosProperties37.consoleLogLevel = atomikosLoggingLevel65;
        org.junit.Assert.assertNotNull(objEntrySet2);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(objEnumeration7);
        org.junit.Assert.assertNotNull(objEntrySet8);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "tmlog" + "'", str14, "tmlog");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10000L + "'", long15 == 10000L);
        org.junit.Assert.assertNotNull(properties20);
        org.junit.Assert.assertNotNull(properties22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 10000L + "'", long25 == 10000L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 300000L + "'", long26 == 300000L);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 50 + "'", int28 == 50);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "{{}={}}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "{{}={}}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "{{}={}}");
        org.junit.Assert.assertNotNull(objCollection35);
        org.junit.Assert.assertNotNull(objSet36);
        org.junit.Assert.assertNotNull(properties38);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 10000L + "'", long41 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(recovery45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 50 + "'", int54 == 50);
        org.junit.Assert.assertNotNull(recovery55);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel65 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel65.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
    }

    @Test
    public void test01026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01026");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        boolean boolean5 = properties0.containsKey((java.lang.Object) 0L);
        java.util.Properties properties6 = new java.util.Properties();
        java.lang.String str7 = properties6.toString();
        java.util.Properties properties8 = new java.util.Properties(properties6);
        java.util.Properties properties9 = new java.util.Properties();
        java.lang.String str10 = properties9.toString();
        java.lang.Object obj12 = properties9.remove((java.lang.Object) (short) 100);
        java.lang.Object obj15 = properties9.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean17 = properties9.containsKey((java.lang.Object) 0L);
        java.lang.Object obj20 = properties9.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj23 = properties9.setProperty("", "{-1.0=100}");
        java.util.Enumeration<java.lang.Object> objEnumeration24 = properties9.keys();
        java.util.Properties properties25 = new java.util.Properties();
        java.lang.String str26 = properties25.toString();
        boolean boolean27 = properties25.isEmpty();
        java.lang.Object obj30 = properties25.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration31 = properties25.elements();
        java.lang.Object obj32 = properties8.replace((java.lang.Object) objEnumeration24, (java.lang.Object) properties25);
        java.util.Enumeration<java.lang.Object> objEnumeration33 = properties25.elements();
        java.util.Properties properties34 = new java.util.Properties();
        java.lang.String str35 = properties34.toString();
        boolean boolean36 = properties34.isEmpty();
        java.lang.Object obj39 = properties34.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Properties properties40 = new java.util.Properties();
        java.lang.String str41 = properties40.toString();
        java.lang.Object obj43 = properties40.remove((java.lang.Object) (short) 100);
        java.lang.Object obj46 = properties40.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean48 = properties40.containsKey((java.lang.Object) 0L);
        java.lang.Object obj51 = properties40.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties52 = new java.util.Properties(properties40);
        boolean boolean53 = properties34.containsValue((java.lang.Object) properties40);
        java.util.Properties properties54 = new java.util.Properties();
        java.lang.String str55 = properties54.toString();
        java.lang.Object obj57 = properties54.remove((java.lang.Object) (short) 100);
        java.lang.Object obj60 = properties54.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean62 = properties54.containsKey((java.lang.Object) 0L);
        java.lang.Object obj65 = properties54.replace((java.lang.Object) false, (java.lang.Object) ' ');
        boolean boolean66 = properties54.isEmpty();
        boolean boolean67 = properties0.replace((java.lang.Object) properties25, (java.lang.Object) properties34, (java.lang.Object) properties54);
        java.util.Enumeration<java.lang.Object> objEnumeration68 = properties25.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties69 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean70 = atomikosProperties69.isSerialJtaTransactions();
        atomikosProperties69.logBaseName = "{-1.0=100}";
        int int73 = atomikosProperties69.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery74 = atomikosProperties69.getRecovery();
        atomikosProperties69.setConsoleFileCount((int) (byte) 100);
        java.lang.String str77 = atomikosProperties69.logBaseName;
        int int78 = atomikosProperties69.getConsoleFileLimit();
        boolean boolean79 = properties25.contains((java.lang.Object) atomikosProperties69);
        java.io.InputStream inputStream80 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties25.load(inputStream80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "{}" + "'", str7, "{}");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "{}" + "'", str10, "{}");
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNotNull(objEnumeration24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "{}" + "'", str26, "{}");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNotNull(objEnumeration31);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNotNull(objEnumeration33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "{}" + "'", str35, "{}");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "{}" + "'", str41, "{}");
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "{}" + "'", str55, "{}");
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(objEnumeration68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 50 + "'", int73 == 50);
        org.junit.Assert.assertNotNull(recovery74);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "{-1.0=100}" + "'", str77, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test01027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01027");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        atomikosProperties0.outputDir = "tm.out";
        java.lang.String str8 = atomikosProperties0.getLogBaseName();
        atomikosProperties0.setEnableLogging(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{-1.0=100}" + "'", str8, "{-1.0=100}");
    }

    @Test
    public void test01028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01028");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj14 = properties0.setProperty("", "{-1.0=100}");
        java.lang.Object obj15 = properties0.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery16 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery16.retryInterval = (short) 100;
        recovery16.forgetOrphanedLogEntriesDelay = 'a';
        boolean boolean21 = properties0.equals((java.lang.Object) 'a');
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery22 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery22.retryInterval = (short) 100;
        recovery22.forgetOrphanedLogEntriesDelay = 'a';
        long long27 = recovery22.getDelay();
        int int28 = recovery22.maxRetries;
        int int29 = recovery22.maxRetries;
        long long30 = recovery22.getRetryInterval();
        java.util.Properties properties31 = new java.util.Properties();
        java.util.Enumeration<?> wildcardEnumeration32 = properties31.propertyNames();
        java.lang.Object obj33 = properties0.put((java.lang.Object) long30, (java.lang.Object) wildcardEnumeration32);
        java.util.Enumeration<java.lang.Object> objEnumeration34 = properties0.elements();
        java.lang.Object obj37 = properties0.setProperty("{1.0=-1}", "");
        java.io.OutputStream outputStream38 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.save(outputStream38, "{{-1.0=100}=}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(obj15);
// flaky:         org.junit.Assert.assertEquals(obj15.toString(), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10000L + "'", long27 == 10000L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5 + "'", int28 == 5);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5 + "'", int29 == 5);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 100L + "'", long30 == 100L);
        org.junit.Assert.assertNotNull(wildcardEnumeration32);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNotNull(objEnumeration34);
        org.junit.Assert.assertNull(obj37);
    }

    @Test
    public void test01029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01029");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        atomikosProperties0.setConsoleFileCount((int) (byte) 100);
        atomikosProperties0.setAllowSubTransactions(true);
        atomikosProperties0.setService("tm.out");
        atomikosProperties0.setSerialJtaTransactions(true);
        java.util.Properties properties14 = atomikosProperties0.asProperties();
        java.lang.String str15 = atomikosProperties0.logBaseName;
        atomikosProperties0.maxTimeout = 32L;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{-1.0=100}" + "'", str15, "{-1.0=100}");
    }

    @Test
    public void test01030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01030");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        boolean boolean2 = properties0.isEmpty();
        java.util.Properties properties3 = new java.util.Properties();
        java.lang.String str4 = properties3.toString();
        java.lang.Object obj6 = properties3.remove((java.lang.Object) (short) 100);
        java.lang.Object obj9 = properties3.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean11 = properties3.containsKey((java.lang.Object) 0L);
        java.lang.Object obj14 = properties3.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties15 = new java.util.Properties();
        java.lang.String str16 = properties15.toString();
        java.lang.Object obj18 = properties15.remove((java.lang.Object) (short) 100);
        java.lang.Object obj21 = properties15.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj22 = properties15.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration23 = properties15.elements();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties15);
        java.lang.Object obj25 = properties15.clone();
        properties15.clear();
        int int27 = properties15.size();
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties15);
        java.util.Enumeration<?> wildcardEnumeration29 = properties0.propertyNames();
        java.lang.Object obj32 = properties0.setProperty("{={-1.0=100}, -1.0=100}", "");
        java.lang.String str34 = properties0.getProperty("{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{}" + "'", str4, "{}");
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{}" + "'", str16, "{}");
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration23);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "{1.0=-1}");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(wildcardEnumeration29);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNull(str34);
    }

    @Test
    public void test01031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01031");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Enumeration<?> wildcardEnumeration1 = properties0.propertyNames();
        java.lang.Object obj2 = properties0.clone();
        java.util.Collection<java.lang.Object> objCollection3 = properties0.values();
        java.util.Enumeration<java.lang.Object> objEnumeration4 = properties0.keys();
        java.util.Properties properties5 = new java.util.Properties();
        java.lang.String str6 = properties5.toString();
        java.lang.Object obj8 = properties5.remove((java.lang.Object) (short) 100);
        java.lang.Object obj11 = properties5.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean13 = properties5.containsKey((java.lang.Object) 0L);
        java.lang.Object obj16 = properties5.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj19 = properties5.setProperty("", "{-1.0=100}");
        java.lang.Object obj20 = properties5.clone();
        java.util.Collection<java.lang.Object> objCollection21 = properties5.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet22 = properties5.entrySet();
        java.lang.String str24 = properties5.getProperty("{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}");
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet25 = properties5.entrySet();
        boolean boolean26 = properties0.equals((java.lang.Object) properties5);
        java.util.Properties properties27 = new java.util.Properties();
        java.lang.String str28 = properties27.toString();
        java.lang.Object obj30 = properties27.remove((java.lang.Object) (short) 100);
        java.lang.Object obj33 = properties27.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean35 = properties27.containsKey((java.lang.Object) 0L);
        java.lang.Object obj38 = properties27.replace((java.lang.Object) false, (java.lang.Object) ' ');
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties39 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties39.setEnableLogging(true);
        atomikosProperties39.setConsoleFileLimit((int) (short) 0);
        boolean boolean44 = properties27.contains((java.lang.Object) atomikosProperties39);
        properties27.clear();
        boolean boolean46 = properties5.containsKey((java.lang.Object) properties27);
        java.io.OutputStream outputStream47 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties27.store(outputStream47, "tm.out");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardEnumeration1);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "{}");
        org.junit.Assert.assertNotNull(objCollection3);
        org.junit.Assert.assertNotNull(objEnumeration4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "{}" + "'", str6, "{}");
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNotNull(obj20);
// flaky:         org.junit.Assert.assertEquals(obj20.toString(), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNotNull(objCollection21);
        org.junit.Assert.assertNotNull(objEntrySet22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(objEntrySet25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "{}" + "'", str28, "{}");
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test01032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01032");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.consoleFileLimit = '#';
        boolean boolean7 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.setDefaultJtaTimeout((long) (short) 1);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.getRecovery();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(recovery10);
    }

    @Test
    public void test01033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01033");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        long long7 = atomikosProperties0.maxTimeout;
        atomikosProperties0.setLogBaseDir("{-1.0=100}");
        int int10 = atomikosProperties0.getConsoleFileCount();
        atomikosProperties0.maxTimeout = (short) 100;
        atomikosProperties0.maxActives = (byte) 10;
        atomikosProperties0.defaultJtaTimeout = 5;
        atomikosProperties0.service = "{}";
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test01034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01034");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties();
        java.lang.String str2 = properties1.toString();
        boolean boolean3 = properties1.isEmpty();
        java.util.Properties properties4 = new java.util.Properties();
        java.lang.String str5 = properties4.toString();
        java.lang.Object obj7 = properties4.remove((java.lang.Object) (short) 100);
        java.lang.Object obj10 = properties4.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean12 = properties4.containsKey((java.lang.Object) 0L);
        boolean boolean13 = properties1.containsValue((java.lang.Object) 0L);
        boolean boolean16 = properties0.replace((java.lang.Object) 0L, (java.lang.Object) 0.0f, (java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration17 = properties0.elements();
        java.util.Set<java.lang.String> strSet18 = properties0.stringPropertyNames();
        java.io.InputStream inputStream19 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.loadFromXML(inputStream19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{}" + "'", str2, "{}");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{}" + "'", str5, "{}");
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objEnumeration17);
        org.junit.Assert.assertNotNull(strSet18);
    }

    @Test
    public void test01035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01035");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.enableLogging = false;
        atomikosProperties0.setMaxTimeout((long) (byte) 0);
        atomikosProperties0.setAllowSubTransactions(true);
        java.util.Properties properties11 = new java.util.Properties();
        java.lang.Object obj13 = properties11.remove((java.lang.Object) (-1.0d));
        boolean boolean14 = properties11.isEmpty();
        java.util.Properties properties15 = new java.util.Properties();
        java.lang.String str16 = properties15.toString();
        java.lang.Object obj18 = properties15.remove((java.lang.Object) (short) 100);
        java.lang.Object obj21 = properties15.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean23 = properties15.containsKey((java.lang.Object) 0L);
        java.lang.Object obj26 = properties15.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj29 = properties15.setProperty("", "{-1.0=100}");
        java.lang.Object obj30 = properties15.clone();
        java.lang.Object obj31 = properties11.get((java.lang.Object) properties15);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery33 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery33.retryInterval = (short) 100;
        recovery33.forgetOrphanedLogEntriesDelay = 'a';
        long long38 = recovery33.getDelay();
        long long39 = recovery33.getRetryInterval();
        recovery33.forgetOrphanedLogEntriesDelay = 10000L;
        atomikosProperties0.set(properties15, "tmlog", (java.lang.Object) recovery33);
        java.util.Properties properties43 = new java.util.Properties();
        java.lang.String str44 = properties43.toString();
        java.lang.Object obj46 = properties43.remove((java.lang.Object) (short) 100);
        java.lang.Object obj49 = properties43.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        java.util.Properties properties51 = new java.util.Properties();
        java.lang.String str52 = properties51.toString();
        java.lang.Object obj54 = properties51.remove((java.lang.Object) (short) 100);
        java.lang.Object obj57 = properties51.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj58 = properties51.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration59 = properties51.elements();
        java.lang.Object obj60 = properties43.putIfAbsent((java.lang.Object) 10.0f, (java.lang.Object) objEnumeration59);
        boolean boolean61 = properties15.contains((java.lang.Object) 10.0f);
        java.io.InputStream inputStream62 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties15.load(inputStream62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{}" + "'", str16, "{}");
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNotNull(obj30);
// flaky:         org.junit.Assert.assertEquals(obj30.toString(), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 10000L + "'", long38 == 10000L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 100L + "'", long39 == 100L);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "{}" + "'", str44, "{}");
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "{}" + "'", str52, "{}");
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertEquals(obj58.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj58), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj58), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration59);
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test01036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01036");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        java.util.Properties properties8 = new java.util.Properties();
        java.lang.String str9 = properties8.toString();
        java.lang.Object obj11 = properties8.remove((java.lang.Object) (short) 100);
        java.lang.Object obj14 = properties8.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj15 = properties8.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration16 = properties8.elements();
        java.lang.Object obj17 = properties0.putIfAbsent((java.lang.Object) 10.0f, (java.lang.Object) objEnumeration16);
        java.util.Properties properties18 = new java.util.Properties();
        java.util.Enumeration<?> wildcardEnumeration19 = properties18.propertyNames();
        java.lang.Object obj20 = properties18.clone();
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.String str22 = properties21.toString();
        boolean boolean23 = properties21.isEmpty();
        java.lang.Object obj26 = properties21.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties21.elements();
        java.lang.Object obj28 = properties0.put(obj20, (java.lang.Object) objEnumeration27);
        properties0.clear();
        java.util.Properties properties30 = new java.util.Properties();
        java.lang.Object obj32 = properties30.remove((java.lang.Object) (-1.0d));
        boolean boolean33 = properties30.isEmpty();
        int int34 = properties30.size();
        java.lang.String str36 = properties30.getProperty("{}");
        java.util.Properties properties37 = new java.util.Properties();
        java.lang.String str38 = properties37.toString();
        java.lang.Object obj40 = properties37.remove((java.lang.Object) (short) 100);
        java.lang.Object obj43 = properties37.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean45 = properties37.containsKey((java.lang.Object) 0L);
        java.lang.Object obj48 = properties37.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties49 = new java.util.Properties(properties37);
        java.util.Enumeration<java.lang.Object> objEnumeration50 = properties37.keys();
        java.lang.Object obj51 = properties0.replace((java.lang.Object) properties30, (java.lang.Object) properties37);
        java.util.Properties properties52 = new java.util.Properties();
        java.util.Properties properties53 = new java.util.Properties();
        java.lang.String str54 = properties53.toString();
        java.lang.Object obj56 = properties53.remove((java.lang.Object) (short) 100);
        java.lang.Object obj59 = properties53.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        int int60 = properties53.size();
        java.util.Properties properties61 = new java.util.Properties();
        java.lang.Object obj63 = properties61.remove((java.lang.Object) (-1.0d));
        boolean boolean64 = properties61.isEmpty();
        java.lang.Object obj67 = properties61.setProperty("hi!", "{}");
        boolean boolean68 = properties52.remove((java.lang.Object) int60, (java.lang.Object) properties61);
        java.lang.Object obj69 = properties0.get((java.lang.Object) boolean68);
        java.util.Enumeration<java.lang.Object> objEnumeration70 = properties0.keys();
        properties0.clear();
        java.util.Properties properties72 = new java.util.Properties(properties0);
        java.lang.String str74 = properties72.getProperty("{{}={}}");
        java.io.OutputStream outputStream75 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties72.save(outputStream75, "{1.0=-1}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{}" + "'", str9, "{}");
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration16);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(wildcardEnumeration19);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{}");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{}" + "'", str22, "{}");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "{}" + "'", str38, "{}");
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertNotNull(objEnumeration50);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "{}" + "'", str54, "{}");
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(obj69);
        org.junit.Assert.assertNotNull(objEnumeration70);
        org.junit.Assert.assertNull(str74);
    }

    @Test
    public void test01037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01037");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        atomikosProperties0.setConsoleFileCount((int) (byte) 100);
        atomikosProperties0.setAllowSubTransactions(true);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean11 = atomikosProperties10.isThreadedTwoPhaseCommit();
        long long12 = atomikosProperties10.getCheckpointInterval();
        atomikosProperties10.setCheckpointInterval((long) 5);
        java.util.Properties properties15 = new java.util.Properties();
        java.lang.String str16 = properties15.toString();
        java.lang.Object obj18 = properties15.remove((java.lang.Object) (short) 100);
        java.lang.Object obj21 = properties15.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean23 = properties15.containsKey((java.lang.Object) 0L);
        java.lang.String str24 = properties15.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties26 = atomikosProperties25.asProperties();
        atomikosProperties25.service = "{-1.0=100}";
        long long29 = atomikosProperties25.getDefaultJtaTimeout();
        atomikosProperties25.setMaxActives(0);
        atomikosProperties25.maxActives = 'a';
        boolean boolean34 = atomikosProperties25.isThreadedTwoPhaseCommit();
        boolean boolean35 = atomikosProperties25.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel36 = atomikosProperties25.consoleLogLevel;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties38 = atomikosProperties37.asProperties();
        atomikosProperties37.service = "{-1.0=100}";
        long long41 = atomikosProperties37.getDefaultJtaTimeout();
        atomikosProperties37.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties37.setMaxActives(100);
        java.lang.String str46 = atomikosProperties37.logBaseDir;
        java.lang.String str47 = atomikosProperties37.outputDir;
        java.lang.Object obj48 = properties15.replace((java.lang.Object) atomikosLoggingLevel36, (java.lang.Object) atomikosProperties37);
        atomikosProperties10.consoleLogLevel = atomikosLoggingLevel36;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel36);
        java.lang.Class<?> wildcardClass51 = atomikosLoggingLevel36.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 500L + "'", long12 == 500L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{}" + "'", str16, "{}");
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "{-1.0=100}" + "'", str24, "{-1.0=100}");
        org.junit.Assert.assertNotNull(properties26);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 10000L + "'", long29 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel36 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel36.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(properties38);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 10000L + "'", long41 == 10000L);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "{={-1.0=100}, -1.0=100}" + "'", str47, "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test01038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01038");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.outputDir = "{={-1.0=100}, -1.0=100}";
        long long7 = atomikosProperties0.getCheckpointInterval();
        boolean boolean8 = atomikosProperties0.isThreadedTwoPhaseCommit();
        java.lang.String str9 = atomikosProperties0.service;
        int int10 = atomikosProperties0.consoleFileCount;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery11 = atomikosProperties0.recovery;
        long long12 = recovery11.getForgetOrphanedLogEntriesDelay();
        recovery11.retryInterval = 100;
        int int15 = recovery11.getMaxRetries();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{-1.0=100}" + "'", str9, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(recovery11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 86400000L + "'", long12 == 86400000L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5 + "'", int15 == 5);
    }

    @Test
    public void test01039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01039");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setEnableLogging(true);
        atomikosProperties0.consoleFileCount = 0;
        long long5 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.consoleFileName = "{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}";
        atomikosProperties0.setTransactionManagerUniqueName("");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 500L + "'", long5 == 500L);
    }

    @Test
    public void test01040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01040");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.retryInterval = (short) 100;
        recovery0.delay = (-1L);
        long long5 = recovery0.delay;
        recovery0.setForgetOrphanedLogEntriesDelay((long) 18);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
    }

    @Test
    public void test01041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01041");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.outputDir = "{={-1.0=100}, -1.0=100}";
        long long7 = atomikosProperties0.getCheckpointInterval();
        boolean boolean8 = atomikosProperties0.enableLogging;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test01042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01042");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long1 = recovery0.getRetryInterval();
        long long2 = recovery0.getDelay();
        int int3 = recovery0.getMaxRetries();
        long long4 = recovery0.getRetryInterval();
        long long5 = recovery0.getForgetOrphanedLogEntriesDelay();
        recovery0.setMaxRetries(100);
        recovery0.delay = 0L;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 10000L + "'", long1 == 10000L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10000L + "'", long2 == 10000L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 5 + "'", int3 == 5);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 86400000L + "'", long5 == 86400000L);
    }

    @Test
    public void test01043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01043");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        boolean boolean3 = properties2.isEmpty();
        java.util.Properties properties4 = new java.util.Properties();
        java.lang.String str5 = properties4.toString();
        java.lang.Object obj7 = properties4.remove((java.lang.Object) (short) 100);
        java.lang.Object obj10 = properties4.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean12 = properties4.containsKey((java.lang.Object) 0L);
        java.lang.Object obj15 = properties4.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj18 = properties4.setProperty("", "{-1.0=100}");
        java.lang.Object obj19 = properties4.clone();
        java.util.Collection<java.lang.Object> objCollection20 = properties4.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet21 = properties4.entrySet();
        java.lang.Class<?> wildcardClass22 = objEntrySet21.getClass();
        java.util.Properties properties23 = new java.util.Properties();
        java.lang.String str24 = properties23.toString();
        java.lang.Object obj26 = properties23.remove((java.lang.Object) (short) 100);
        java.lang.Object obj29 = properties23.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean31 = properties23.containsKey((java.lang.Object) 0L);
        java.lang.Object obj34 = properties23.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj37 = properties23.setProperty("", "{-1.0=100}");
        java.lang.String str38 = properties23.toString();
        java.util.Properties properties39 = new java.util.Properties();
        java.lang.String str40 = properties39.toString();
        java.lang.Object obj42 = properties39.remove((java.lang.Object) (short) 100);
        java.lang.Object obj45 = properties39.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean47 = properties39.containsKey((java.lang.Object) 0L);
        java.lang.Object obj50 = properties39.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties51 = new java.util.Properties(properties39);
        java.util.Enumeration<java.lang.Object> objEnumeration52 = properties39.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties53 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean54 = atomikosProperties53.isSerialJtaTransactions();
        atomikosProperties53.logBaseName = "{-1.0=100}";
        int int57 = atomikosProperties53.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery58 = atomikosProperties53.getRecovery();
        atomikosProperties53.setConsoleFileCount((int) (byte) 100);
        java.lang.String str61 = atomikosProperties53.logBaseName;
        atomikosProperties53.setCheckpointInterval((long) 18);
        long long64 = atomikosProperties53.defaultJtaTimeout;
        java.util.Properties properties65 = atomikosProperties53.asProperties();
        atomikosProperties53.setAllowSubTransactions(false);
        java.util.Properties properties68 = new java.util.Properties();
        java.lang.String str69 = properties68.toString();
        java.util.Properties properties70 = new java.util.Properties(properties68);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet71 = properties70.entrySet();
        boolean boolean72 = properties23.replace((java.lang.Object) objEnumeration52, (java.lang.Object) atomikosProperties53, (java.lang.Object) objEntrySet71);
        java.lang.Object obj73 = properties2.put((java.lang.Object) wildcardClass22, (java.lang.Object) properties23);
        java.io.PrintStream printStream74 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties23.list(printStream74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{}" + "'", str5, "{}");
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(obj19);
// flaky:         org.junit.Assert.assertEquals(obj19.toString(), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNotNull(objCollection20);
        org.junit.Assert.assertNotNull(objEntrySet21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "{}" + "'", str24, "{}");
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNull(obj37);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "{={-1.0=100}, -1.0=100}" + "'", str38, "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "{}" + "'", str40, "{}");
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertNotNull(objEnumeration52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 50 + "'", int57 == 50);
        org.junit.Assert.assertNotNull(recovery58);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "{-1.0=100}" + "'", str61, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 10000L + "'", long64 == 10000L);
        org.junit.Assert.assertNotNull(properties65);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "{}" + "'", str69, "{}");
        org.junit.Assert.assertNotNull(objEntrySet71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(obj73);
    }

    @Test
    public void test01044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01044");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setAllowSubTransactions(true);
        boolean boolean3 = atomikosProperties0.enableLogging;
        atomikosProperties0.consoleFileLimit = (byte) 100;
        java.util.Properties properties6 = new java.util.Properties();
        java.lang.String str7 = properties6.toString();
        java.util.Properties properties8 = new java.util.Properties(properties6);
        java.util.Properties properties10 = new java.util.Properties();
        java.lang.String str11 = properties10.toString();
        java.lang.Object obj13 = properties10.remove((java.lang.Object) (short) 100);
        java.lang.Object obj16 = properties10.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean18 = properties10.containsKey((java.lang.Object) 0L);
        java.lang.Object obj21 = properties10.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties22 = new java.util.Properties(properties10);
        java.util.Enumeration<java.lang.Object> objEnumeration23 = properties22.elements();
        atomikosProperties0.set(properties8, "{={-1.0=100}, -1.0=100}", (java.lang.Object) properties22);
        int int25 = properties8.size();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet26 = properties8.entrySet();
        java.lang.String str27 = properties8.toString();
        java.util.Enumeration<?> wildcardEnumeration28 = properties8.propertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery29 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery29.retryInterval = (short) 100;
        recovery29.delay = (-1L);
        long long34 = recovery29.delay;
        recovery29.delay = (short) 1;
        long long37 = recovery29.getRetryInterval();
        long long38 = recovery29.getForgetOrphanedLogEntriesDelay();
        recovery29.setMaxRetries(10);
        int int41 = recovery29.maxRetries;
        int int42 = recovery29.getMaxRetries();
        java.lang.Object obj43 = properties8.remove((java.lang.Object) int42);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "{}" + "'", str7, "{}");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "{}" + "'", str11, "{}");
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNotNull(objEnumeration23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(objEntrySet26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}" + "'", str27, "{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}");
        org.junit.Assert.assertNotNull(wildcardEnumeration28);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-1L) + "'", long34 == (-1L));
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 100L + "'", long37 == 100L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 86400000L + "'", long38 == 86400000L);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10 + "'", int42 == 10);
        org.junit.Assert.assertNull(obj43);
    }

    @Test
    public void test01045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01045");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        int int7 = atomikosProperties0.maxActives;
        atomikosProperties0.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.getRecovery();
        atomikosProperties0.outputDir = "hi!";
        java.lang.String str13 = atomikosProperties0.service;
        atomikosProperties0.setMaxTimeout((long) 5);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{-1.0=100}" + "'", str13, "{-1.0=100}");
    }

    @Test
    public void test01046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01046");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        int int7 = atomikosProperties0.maxActives;
        atomikosProperties0.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.getRecovery();
        atomikosProperties0.setLogBaseName("");
        java.lang.String str13 = atomikosProperties0.logBaseName;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery14 = atomikosProperties0.getRecovery();
        int int15 = recovery14.getMaxRetries();
        recovery14.setForgetOrphanedLogEntriesDelay((long) 2);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(recovery14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5 + "'", int15 == 5);
    }

    @Test
    public void test01047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01047");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setEnableLogging(true);
        atomikosProperties0.consoleFileCount = 0;
        int int5 = atomikosProperties0.getMaxActives();
        java.lang.String str6 = atomikosProperties0.getLogBaseDir();
        java.lang.String str7 = atomikosProperties0.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery8 = atomikosProperties0.getRecovery();
        java.lang.String str9 = atomikosProperties0.service;
        boolean boolean10 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.setService("{100=100}");
        atomikosProperties0.forceShutdownOnVmExit = true;
        atomikosProperties0.transactionManagerUniqueName = "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}";
        java.lang.String str17 = atomikosProperties0.getLogBaseDir();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 50 + "'", int5 == 50);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(recovery8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test01048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01048");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties();
        java.lang.String str2 = properties1.toString();
        java.lang.Object obj4 = properties1.remove((java.lang.Object) (short) 100);
        java.lang.Object obj7 = properties1.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        int int8 = properties1.size();
        java.util.Properties properties9 = new java.util.Properties();
        java.lang.Object obj11 = properties9.remove((java.lang.Object) (-1.0d));
        boolean boolean12 = properties9.isEmpty();
        java.lang.Object obj15 = properties9.setProperty("hi!", "{}");
        boolean boolean16 = properties0.remove((java.lang.Object) int8, (java.lang.Object) properties9);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties17.outputDir = "{={-1.0=100}, -1.0=100}";
        boolean boolean20 = properties0.contains((java.lang.Object) atomikosProperties17);
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.String str22 = properties21.toString();
        java.lang.Object obj24 = properties21.remove((java.lang.Object) (short) 100);
        java.lang.Object obj27 = properties21.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        java.util.Properties properties29 = new java.util.Properties();
        java.lang.String str30 = properties29.toString();
        java.lang.Object obj32 = properties29.remove((java.lang.Object) (short) 100);
        java.lang.Object obj35 = properties29.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj36 = properties29.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration37 = properties29.elements();
        java.lang.Object obj38 = properties21.putIfAbsent((java.lang.Object) 10.0f, (java.lang.Object) objEnumeration37);
        java.util.Properties properties39 = new java.util.Properties();
        java.util.Enumeration<?> wildcardEnumeration40 = properties39.propertyNames();
        java.lang.Object obj41 = properties39.clone();
        java.util.Properties properties42 = new java.util.Properties();
        java.lang.String str43 = properties42.toString();
        boolean boolean44 = properties42.isEmpty();
        java.lang.Object obj47 = properties42.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration48 = properties42.elements();
        java.lang.Object obj49 = properties21.put(obj41, (java.lang.Object) objEnumeration48);
        properties21.clear();
        java.util.Properties properties51 = new java.util.Properties();
        java.util.Properties properties52 = new java.util.Properties();
        java.lang.Object obj54 = properties52.remove((java.lang.Object) (-1.0d));
        int int55 = properties52.size();
        java.util.Enumeration<java.lang.Object> objEnumeration56 = properties52.elements();
        java.util.Properties properties57 = new java.util.Properties();
        properties57.clear();
        java.lang.String str59 = properties57.toString();
        boolean boolean60 = properties21.replace((java.lang.Object) properties51, (java.lang.Object) properties52, (java.lang.Object) str59);
        java.lang.String str62 = properties21.getProperty("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties63 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean64 = atomikosProperties63.isSerialJtaTransactions();
        atomikosProperties63.logBaseName = "{-1.0=100}";
        int int67 = atomikosProperties63.maxActives;
        int int68 = atomikosProperties63.getConsoleFileCount();
        atomikosProperties63.setDefaultJtaTimeout((long) ' ');
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel71 = null;
        atomikosProperties63.consoleLogLevel = atomikosLoggingLevel71;
        boolean boolean73 = atomikosProperties63.isThreadedTwoPhaseCommit();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties74 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties74.setAllowSubTransactions(true);
        boolean boolean77 = atomikosProperties74.enableLogging;
        atomikosProperties74.consoleFileLimit = (byte) 100;
        java.lang.String str80 = atomikosProperties74.getService();
        atomikosProperties74.setService("{={-1.0=100}, -1.0=100}");
        boolean boolean83 = atomikosProperties74.allowSubTransactions;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean84 = properties0.replace((java.lang.Object) str62, (java.lang.Object) atomikosProperties63, (java.lang.Object) boolean83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{}" + "'", str2, "{}");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{}" + "'", str22, "{}");
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "{}" + "'", str30, "{}");
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration37);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertNotNull(wildcardEnumeration40);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals(obj41.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "{}");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "{}" + "'", str43, "{}");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNotNull(objEnumeration48);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(objEnumeration56);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "{}" + "'", str59, "{}");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 50 + "'", int67 == 50);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
    }

    @Test
    public void test01049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01049");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        boolean boolean2 = properties0.isEmpty();
        java.lang.Object obj5 = properties0.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Properties properties6 = new java.util.Properties();
        java.lang.String str7 = properties6.toString();
        java.lang.Object obj9 = properties6.remove((java.lang.Object) (short) 100);
        java.lang.Object obj12 = properties6.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean14 = properties6.containsKey((java.lang.Object) 0L);
        java.lang.Object obj17 = properties6.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties18 = new java.util.Properties(properties6);
        boolean boolean19 = properties0.containsValue((java.lang.Object) properties6);
        java.io.Writer writer20 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.store(writer20, "{1.0=-1}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "{}" + "'", str7, "{}");
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test01050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01050");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        boolean boolean3 = properties0.containsValue((java.lang.Object) (-1L));
        java.lang.Object obj5 = properties0.get((java.lang.Object) 97L);
        properties0.clear();
        java.lang.String str8 = properties0.getProperty("{1.0=-1}");
        java.io.Writer writer9 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.store(writer9, "{{-1.0=100}=}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test01051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01051");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj7 = properties0.clone();
        java.util.Set<java.lang.String> strSet8 = properties0.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery9 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery9.retryInterval = (short) 100;
        recovery9.delay = (-1L);
        long long14 = recovery9.delay;
        recovery9.delay = (short) 1;
        long long17 = recovery9.getRetryInterval();
        int int18 = recovery9.maxRetries;
        int int19 = recovery9.maxRetries;
        long long20 = recovery9.forgetOrphanedLogEntriesDelay;
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.Object obj23 = properties21.remove((java.lang.Object) (-1.0d));
        boolean boolean24 = properties21.isEmpty();
        int int25 = properties21.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery26 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery26.retryInterval = (short) 100;
        recovery26.forgetOrphanedLogEntriesDelay = 'a';
        java.util.Properties properties31 = new java.util.Properties();
        java.lang.Object obj33 = properties31.remove((java.lang.Object) (-1.0d));
        boolean boolean34 = properties31.isEmpty();
        int int35 = properties31.size();
        java.lang.String str37 = properties31.getProperty("{}");
        boolean boolean38 = properties21.remove((java.lang.Object) recovery26, (java.lang.Object) properties31);
        java.lang.Object obj39 = properties0.putIfAbsent((java.lang.Object) long20, (java.lang.Object) properties21);
        java.util.Enumeration<java.lang.Object> objEnumeration40 = properties0.keys();
        java.util.Properties properties41 = new java.util.Properties();
        java.lang.Object obj43 = properties41.remove((java.lang.Object) (-1.0d));
        boolean boolean44 = properties41.isEmpty();
        java.util.Collection<java.lang.Object> objCollection45 = properties41.values();
        java.util.Properties properties46 = new java.util.Properties();
        java.lang.Object obj49 = properties46.setProperty("{}", "{}");
        java.util.Enumeration<java.lang.Object> objEnumeration50 = properties46.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration51 = properties46.elements();
        java.util.Properties properties52 = new java.util.Properties();
        java.util.Properties properties53 = new java.util.Properties();
        java.lang.String str54 = properties53.toString();
        java.lang.Object obj56 = properties53.remove((java.lang.Object) (short) 100);
        java.lang.Object obj59 = properties53.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        int int60 = properties53.size();
        java.util.Properties properties61 = new java.util.Properties();
        java.lang.Object obj63 = properties61.remove((java.lang.Object) (-1.0d));
        boolean boolean64 = properties61.isEmpty();
        java.lang.Object obj67 = properties61.setProperty("hi!", "{}");
        boolean boolean68 = properties52.remove((java.lang.Object) int60, (java.lang.Object) properties61);
        boolean boolean69 = properties0.replace((java.lang.Object) objCollection45, (java.lang.Object) objEnumeration51, (java.lang.Object) properties61);
        java.io.OutputStream outputStream70 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.save(outputStream70, "{-1.0=100}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{1.0=-1}");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 100L + "'", long17 == 100L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5 + "'", int18 == 5);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 5 + "'", int19 == 5);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 86400000L + "'", long20 == 86400000L);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNotNull(objEnumeration40);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(objCollection45);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertNotNull(objEnumeration50);
        org.junit.Assert.assertNotNull(objEnumeration51);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "{}" + "'", str54, "{}");
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test01052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01052");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        atomikosProperties0.maxActives = ' ';
        int int9 = atomikosProperties0.getConsoleFileCount();
        int int10 = atomikosProperties0.consoleFileLimit;
        java.util.Properties properties11 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean13 = atomikosProperties12.isSerialJtaTransactions();
        atomikosProperties12.logBaseName = "{-1.0=100}";
        int int16 = atomikosProperties12.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery17 = atomikosProperties12.getRecovery();
        atomikosProperties12.setConsoleFileCount((int) (byte) 100);
        atomikosProperties12.setAllowSubTransactions(true);
        atomikosProperties12.setService("tm.out");
        boolean boolean24 = atomikosProperties12.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel25 = atomikosProperties12.getConsoleLogLevel();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties26.setAllowSubTransactions(true);
        boolean boolean29 = atomikosProperties26.enableLogging;
        atomikosProperties26.consoleFileLimit = (byte) 100;
        java.util.Properties properties32 = new java.util.Properties();
        java.lang.String str33 = properties32.toString();
        java.util.Properties properties34 = new java.util.Properties(properties32);
        java.util.Properties properties36 = new java.util.Properties();
        java.lang.String str37 = properties36.toString();
        java.lang.Object obj39 = properties36.remove((java.lang.Object) (short) 100);
        java.lang.Object obj42 = properties36.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean44 = properties36.containsKey((java.lang.Object) 0L);
        java.lang.Object obj47 = properties36.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties48 = new java.util.Properties(properties36);
        java.util.Enumeration<java.lang.Object> objEnumeration49 = properties48.elements();
        atomikosProperties26.set(properties34, "{={-1.0=100}, -1.0=100}", (java.lang.Object) properties48);
        atomikosProperties26.allowSubTransactions = false;
        java.lang.Object obj53 = properties11.put((java.lang.Object) atomikosProperties12, (java.lang.Object) false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties54 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties55 = atomikosProperties54.asProperties();
        atomikosProperties54.service = "{-1.0=100}";
        long long58 = atomikosProperties54.getDefaultJtaTimeout();
        long long59 = atomikosProperties54.getMaxTimeout();
        int int60 = atomikosProperties54.consoleFileCount;
        atomikosProperties54.setConsoleFileCount(0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties63 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties64 = atomikosProperties63.asProperties();
        atomikosProperties63.service = "{-1.0=100}";
        long long67 = atomikosProperties63.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel68 = null;
        atomikosProperties63.setConsoleLogLevel(atomikosLoggingLevel68);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel70 = null;
        atomikosProperties63.setConsoleLogLevel(atomikosLoggingLevel70);
        atomikosProperties63.setLogBaseName("{={-1.0=100}, -1.0=100}");
        boolean boolean74 = atomikosProperties63.enableLogging;
        java.lang.Object obj75 = properties11.replace((java.lang.Object) atomikosProperties54, (java.lang.Object) atomikosProperties63);
        atomikosProperties54.setLogBaseName("");
        atomikosProperties54.maxTimeout = 'a';
        boolean boolean80 = atomikosProperties54.threadedTwoPhaseCommit;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 50 + "'", int16 == 50);
        org.junit.Assert.assertNotNull(recovery17);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel25 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel25.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "{}" + "'", str33, "{}");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "{}" + "'", str37, "{}");
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNotNull(objEnumeration49);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertNotNull(properties55);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 10000L + "'", long58 == 10000L);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 300000L + "'", long59 == 300000L);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(properties64);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 10000L + "'", long67 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNull(obj75);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test01053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01053");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getLogBaseName();
        long long5 = atomikosProperties0.defaultJtaTimeout;
        long long6 = atomikosProperties0.getMaxTimeout();
        boolean boolean7 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.setService("{-1.0=100}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.recovery;
        int int11 = atomikosProperties0.getConsoleFileCount();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tmlog" + "'", str4, "tmlog");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 10000L + "'", long5 == 10000L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 300000L + "'", long6 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
    }

    @Test
    public void test01054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01054");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        atomikosProperties0.setConsoleFileCount((int) (byte) 100);
        atomikosProperties0.setAllowSubTransactions(true);
        int int10 = atomikosProperties0.getMaxActives();
        boolean boolean11 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.setOutputDir("");
        int int14 = atomikosProperties0.consoleFileLimit;
        atomikosProperties0.allowSubTransactions = true;
        atomikosProperties0.service = "{1.0=-1, -1.0=100}";
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 50 + "'", int10 == 50);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
    }

    @Test
    public void test01055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01055");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setAllowSubTransactions(true);
        boolean boolean3 = atomikosProperties0.enableLogging;
        java.lang.String str4 = atomikosProperties0.logBaseDir;
        atomikosProperties0.defaultJtaTimeout = 50L;
        boolean boolean7 = atomikosProperties0.isSerialJtaTransactions();
        boolean boolean8 = atomikosProperties0.isForceShutdownOnVmExit();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test01056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01056");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        boolean boolean7 = atomikosProperties0.isAllowSubTransactions();
        int int8 = atomikosProperties0.getConsoleFileLimit();
        atomikosProperties0.setForceShutdownOnVmExit(false);
        long long11 = atomikosProperties0.defaultJtaTimeout;
        java.util.Properties properties12 = new java.util.Properties();
        java.lang.String str13 = properties12.toString();
        java.lang.Object obj15 = properties12.remove((java.lang.Object) (short) 100);
        java.lang.Object obj18 = properties12.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj19 = properties12.clone();
        java.util.Set<java.lang.String> strSet20 = properties12.stringPropertyNames();
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.String str22 = properties21.toString();
        java.lang.Object obj24 = properties21.remove((java.lang.Object) (short) 100);
        java.lang.Object obj27 = properties21.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean29 = properties21.containsKey((java.lang.Object) 0L);
        java.lang.Object obj32 = properties21.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties33 = new java.util.Properties();
        java.lang.String str34 = properties33.toString();
        java.lang.Object obj36 = properties33.remove((java.lang.Object) (short) 100);
        java.lang.Object obj39 = properties33.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj40 = properties33.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration41 = properties33.elements();
        properties21.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties33);
        java.util.Properties properties43 = new java.util.Properties();
        java.lang.String str44 = properties43.toString();
        java.lang.Object obj46 = properties43.remove((java.lang.Object) (short) 100);
        java.lang.Object obj49 = properties43.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean51 = properties43.containsKey((java.lang.Object) 0L);
        java.lang.Object obj54 = properties43.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties55 = new java.util.Properties();
        java.lang.String str56 = properties55.toString();
        java.lang.Object obj58 = properties55.remove((java.lang.Object) (short) 100);
        java.lang.Object obj61 = properties55.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj62 = properties55.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration63 = properties55.elements();
        properties43.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties55);
        java.lang.Object obj65 = properties12.putIfAbsent((java.lang.Object) properties21, (java.lang.Object) properties55);
        java.util.Enumeration<java.lang.Object> objEnumeration66 = properties12.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties68 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean69 = atomikosProperties68.isSerialJtaTransactions();
        atomikosProperties68.logBaseName = "{-1.0=100}";
        int int72 = atomikosProperties68.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery73 = atomikosProperties68.getRecovery();
        java.lang.String str74 = atomikosProperties68.getLogBaseName();
        atomikosProperties68.setCheckpointInterval((long) 32);
        atomikosProperties0.set(properties12, "{-1.0=100}", (java.lang.Object) atomikosProperties68);
        java.lang.String str78 = atomikosProperties0.getService();
        atomikosProperties0.setMaxTimeout((long) (byte) -1);
        atomikosProperties0.setSerialJtaTransactions(true);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10000L + "'", long11 == 10000L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{}" + "'", str13, "{}");
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "{1.0=-1}");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{}" + "'", str22, "{}");
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "{}" + "'", str34, "{}");
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertEquals(obj40.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration41);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "{}" + "'", str44, "{}");
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "{}" + "'", str56, "{}");
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertNull(obj61);
        org.junit.Assert.assertNotNull(obj62);
        org.junit.Assert.assertEquals(obj62.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj62), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj62), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration63);
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertNotNull(objEnumeration66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 50 + "'", int72 == 50);
        org.junit.Assert.assertNotNull(recovery73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "{-1.0=100}" + "'", str74, "{-1.0=100}");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "{-1.0=100}" + "'", str78, "{-1.0=100}");
    }

    @Test
    public void test01057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01057");
        java.util.Properties properties0 = new java.util.Properties();
        properties0.clear();
        java.io.PrintWriter printWriter2 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.list(printWriter2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test01058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01058");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties12 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration13 = properties12.elements();
        java.util.Properties properties14 = new java.util.Properties();
        java.lang.Object obj17 = properties14.setProperty("{}", "{}");
        java.util.Enumeration<java.lang.Object> objEnumeration18 = properties14.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration19 = properties14.elements();
        java.util.Properties properties20 = new java.util.Properties(properties14);
        java.util.Properties properties21 = new java.util.Properties(properties20);
        java.util.Properties properties22 = new java.util.Properties(properties20);
        java.util.Collection<java.lang.Object> objCollection23 = properties20.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties25 = atomikosProperties24.asProperties();
        atomikosProperties24.service = "{-1.0=100}";
        long long28 = atomikosProperties24.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel29 = null;
        atomikosProperties24.setConsoleLogLevel(atomikosLoggingLevel29);
        atomikosProperties24.setTransactionManagerUniqueName("{-1.0=100}");
        int int33 = atomikosProperties24.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties34 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties34.setAllowSubTransactions(true);
        atomikosProperties34.maxActives = (short) -1;
        atomikosProperties34.setService("tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties41.setAllowSubTransactions(true);
        boolean boolean44 = atomikosProperties41.enableLogging;
        boolean boolean45 = atomikosProperties41.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel46 = atomikosProperties41.consoleLogLevel;
        atomikosProperties34.setConsoleLogLevel(atomikosLoggingLevel46);
        atomikosProperties24.setConsoleLogLevel(atomikosLoggingLevel46);
        java.lang.Object obj49 = properties12.put((java.lang.Object) properties20, (java.lang.Object) atomikosProperties24);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties51 = atomikosProperties50.asProperties();
        atomikosProperties50.service = "{-1.0=100}";
        long long54 = atomikosProperties50.getDefaultJtaTimeout();
        atomikosProperties50.consoleFileLimit = '#';
        int int57 = atomikosProperties50.getConsoleFileCount();
        atomikosProperties50.consoleFileLimit = 5;
        boolean boolean60 = properties12.containsValue((java.lang.Object) atomikosProperties50);
        boolean boolean61 = atomikosProperties50.forceShutdownOnVmExit;
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNotNull(objEnumeration13);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(objEnumeration18);
        org.junit.Assert.assertNotNull(objEnumeration19);
        org.junit.Assert.assertNotNull(objCollection23);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 10000L + "'", long28 == 10000L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 50 + "'", int33 == 50);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel46 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel46.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertNotNull(properties51);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 10000L + "'", long54 == 10000L);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test01059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01059");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean8 = atomikosProperties7.isSerialJtaTransactions();
        atomikosProperties7.logBaseName = "{-1.0=100}";
        int int11 = atomikosProperties7.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery12 = atomikosProperties7.getRecovery();
        atomikosProperties7.setConsoleFileCount((int) (byte) 100);
        atomikosProperties7.setAllowSubTransactions(true);
        atomikosProperties7.setService("tm.out");
        int int19 = atomikosProperties7.consoleFileLimit;
        atomikosProperties7.setDefaultJtaTimeout((long) 'a');
        boolean boolean22 = atomikosProperties7.enableLogging;
        java.lang.String str23 = atomikosProperties7.consoleFileName;
        java.lang.String str24 = atomikosProperties7.transactionManagerUniqueName;
        boolean boolean25 = atomikosProperties7.isSerialJtaTransactions();
        java.lang.String str26 = atomikosProperties7.consoleFileName;
        boolean boolean27 = properties0.containsKey((java.lang.Object) str26);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery28 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery28.retryInterval = (short) 100;
        recovery28.forgetOrphanedLogEntriesDelay = 'a';
        long long33 = recovery28.getDelay();
        int int34 = recovery28.maxRetries;
        int int35 = recovery28.maxRetries;
        recovery28.setDelay((long) (-1));
        long long38 = recovery28.forgetOrphanedLogEntriesDelay;
        recovery28.maxRetries = (-1);
        boolean boolean41 = properties0.equals((java.lang.Object) recovery28);
        int int42 = recovery28.getMaxRetries();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 50 + "'", int11 == 50);
        org.junit.Assert.assertNotNull(recovery12);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "tm.out" + "'", str23, "tm.out");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "tm.out" + "'", str26, "tm.out");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 10000L + "'", long33 == 10000L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 5 + "'", int34 == 5);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 5 + "'", int35 == 5);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 97L + "'", long38 == 97L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
    }

    @Test
    public void test01060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01060");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        java.util.Properties properties8 = new java.util.Properties();
        java.lang.String str9 = properties8.toString();
        java.lang.Object obj11 = properties8.remove((java.lang.Object) (short) 100);
        java.lang.Object obj14 = properties8.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj15 = properties8.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration16 = properties8.elements();
        java.lang.Object obj17 = properties0.putIfAbsent((java.lang.Object) 10.0f, (java.lang.Object) objEnumeration16);
        java.util.Properties properties18 = new java.util.Properties();
        java.util.Enumeration<?> wildcardEnumeration19 = properties18.propertyNames();
        java.lang.Object obj20 = properties18.clone();
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.String str22 = properties21.toString();
        boolean boolean23 = properties21.isEmpty();
        java.lang.Object obj26 = properties21.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties21.elements();
        java.lang.Object obj28 = properties0.put(obj20, (java.lang.Object) objEnumeration27);
        properties0.clear();
        java.util.Properties properties30 = new java.util.Properties();
        java.lang.Object obj32 = properties30.remove((java.lang.Object) (-1.0d));
        boolean boolean33 = properties30.isEmpty();
        int int34 = properties30.size();
        java.lang.String str36 = properties30.getProperty("{}");
        java.util.Properties properties37 = new java.util.Properties();
        java.lang.String str38 = properties37.toString();
        java.lang.Object obj40 = properties37.remove((java.lang.Object) (short) 100);
        java.lang.Object obj43 = properties37.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean45 = properties37.containsKey((java.lang.Object) 0L);
        java.lang.Object obj48 = properties37.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties49 = new java.util.Properties(properties37);
        java.util.Enumeration<java.lang.Object> objEnumeration50 = properties37.keys();
        java.lang.Object obj51 = properties0.replace((java.lang.Object) properties30, (java.lang.Object) properties37);
        java.io.Writer writer52 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties30.store(writer52, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{}" + "'", str9, "{}");
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration16);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(wildcardEnumeration19);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{}");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{}" + "'", str22, "{}");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "{}" + "'", str38, "{}");
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertNotNull(objEnumeration50);
        org.junit.Assert.assertNull(obj51);
    }

    @Test
    public void test01061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01061");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        java.util.Properties properties8 = new java.util.Properties();
        java.lang.String str9 = properties8.toString();
        java.lang.Object obj11 = properties8.remove((java.lang.Object) (short) 100);
        java.lang.Object obj14 = properties8.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj15 = properties8.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration16 = properties8.elements();
        java.lang.Object obj17 = properties0.putIfAbsent((java.lang.Object) 10.0f, (java.lang.Object) objEnumeration16);
        java.util.Properties properties18 = new java.util.Properties();
        java.util.Enumeration<?> wildcardEnumeration19 = properties18.propertyNames();
        java.lang.Object obj20 = properties18.clone();
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.String str22 = properties21.toString();
        boolean boolean23 = properties21.isEmpty();
        java.lang.Object obj26 = properties21.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties21.elements();
        java.lang.Object obj28 = properties0.put(obj20, (java.lang.Object) objEnumeration27);
        properties0.clear();
        java.util.Properties properties30 = new java.util.Properties();
        java.util.Properties properties31 = new java.util.Properties();
        java.lang.Object obj33 = properties31.remove((java.lang.Object) (-1.0d));
        int int34 = properties31.size();
        java.util.Enumeration<java.lang.Object> objEnumeration35 = properties31.elements();
        java.util.Properties properties36 = new java.util.Properties();
        properties36.clear();
        java.lang.String str38 = properties36.toString();
        boolean boolean39 = properties0.replace((java.lang.Object) properties30, (java.lang.Object) properties31, (java.lang.Object) str38);
        java.lang.String str40 = properties30.toString();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{}" + "'", str9, "{}");
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration16);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(wildcardEnumeration19);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{}");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{}" + "'", str22, "{}");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(objEnumeration35);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "{}" + "'", str38, "{}");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "{}" + "'", str40, "{}");
    }

    @Test
    public void test01062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01062");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getLogBaseName();
        long long5 = atomikosProperties0.defaultJtaTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel6 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel6);
        atomikosProperties0.setLogBaseDir("");
        atomikosProperties0.setLogBaseDir("{={-1.0=100}, -1.0=100}");
        java.lang.Class<?> wildcardClass12 = atomikosProperties0.getClass();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tmlog" + "'", str4, "tmlog");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 10000L + "'", long5 == 10000L);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test01063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01063");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj14 = properties0.setProperty("", "{-1.0=100}");
        java.lang.Object obj15 = properties0.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery16 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery16.retryInterval = (short) 100;
        recovery16.forgetOrphanedLogEntriesDelay = 'a';
        boolean boolean21 = properties0.equals((java.lang.Object) 'a');
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery22 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery22.retryInterval = (short) 100;
        recovery22.forgetOrphanedLogEntriesDelay = 'a';
        long long27 = recovery22.getDelay();
        int int28 = recovery22.maxRetries;
        int int29 = recovery22.maxRetries;
        long long30 = recovery22.getRetryInterval();
        java.util.Properties properties31 = new java.util.Properties();
        java.util.Enumeration<?> wildcardEnumeration32 = properties31.propertyNames();
        java.lang.Object obj33 = properties0.put((java.lang.Object) long30, (java.lang.Object) wildcardEnumeration32);
        java.lang.String str35 = properties0.getProperty("hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties37 = atomikosProperties36.asProperties();
        atomikosProperties36.service = "{-1.0=100}";
        java.lang.String str40 = atomikosProperties36.getTransactionManagerUniqueName();
        atomikosProperties36.consoleFileName = "hi!";
        atomikosProperties36.setCheckpointInterval((long) 5);
        atomikosProperties36.setConsoleFileCount(0);
        atomikosProperties36.setService("{-1.0=100}");
        atomikosProperties36.setDefaultJtaTimeout((long) 100);
        atomikosProperties36.defaultJtaTimeout = 32;
        atomikosProperties36.maxTimeout = 0;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel55 = null;
        atomikosProperties36.consoleLogLevel = atomikosLoggingLevel55;
        java.util.Properties properties57 = new java.util.Properties();
        java.lang.String str58 = properties57.toString();
        java.lang.Object obj60 = properties57.remove((java.lang.Object) (short) 100);
        java.lang.Object obj63 = properties57.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties64 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties65 = atomikosProperties64.asProperties();
        java.lang.Object obj66 = properties57.remove((java.lang.Object) properties65);
        java.lang.Object obj67 = properties65.clone();
        boolean boolean68 = properties0.remove((java.lang.Object) atomikosProperties36, (java.lang.Object) properties65);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties69 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties70 = atomikosProperties69.asProperties();
        atomikosProperties69.service = "{-1.0=100}";
        long long73 = atomikosProperties69.getDefaultJtaTimeout();
        atomikosProperties69.serialJtaTransactions = true;
        long long76 = atomikosProperties69.getDefaultJtaTimeout();
        long long77 = atomikosProperties69.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery78 = atomikosProperties69.getRecovery();
        long long79 = atomikosProperties69.getCheckpointInterval();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties80 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties81 = atomikosProperties80.asProperties();
        atomikosProperties80.service = "{-1.0=100}";
        long long84 = atomikosProperties80.getDefaultJtaTimeout();
        atomikosProperties80.serialJtaTransactions = true;
        long long87 = atomikosProperties80.getDefaultJtaTimeout();
        long long88 = atomikosProperties80.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery89 = atomikosProperties80.getRecovery();
        java.lang.Object obj90 = properties65.replace((java.lang.Object) long79, (java.lang.Object) recovery89);
        java.io.InputStream inputStream91 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties65.loadFromXML(inputStream91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(obj15);
// flaky:         org.junit.Assert.assertEquals(obj15.toString(), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10000L + "'", long27 == 10000L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5 + "'", int28 == 5);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5 + "'", int29 == 5);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 100L + "'", long30 == 100L);
        org.junit.Assert.assertNotNull(wildcardEnumeration32);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(properties37);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "{}" + "'", str58, "{}");
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertNotNull(properties65);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertNotNull(obj67);
// flaky:         org.junit.Assert.assertEquals(obj67.toString(), "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj67), "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj67), "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(properties70);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 10000L + "'", long73 == 10000L);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 10000L + "'", long76 == 10000L);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 500L + "'", long77 == 500L);
        org.junit.Assert.assertNotNull(recovery78);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 500L + "'", long79 == 500L);
        org.junit.Assert.assertNotNull(properties81);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 10000L + "'", long84 == 10000L);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 10000L + "'", long87 == 10000L);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 500L + "'", long88 == 500L);
        org.junit.Assert.assertNotNull(recovery89);
        org.junit.Assert.assertNull(obj90);
    }

    @Test
    public void test01064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01064");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.retryInterval = (short) 100;
        recovery0.delay = (-1L);
        long long5 = recovery0.delay;
        recovery0.delay = (short) 1;
        long long8 = recovery0.getRetryInterval();
        long long9 = recovery0.getForgetOrphanedLogEntriesDelay();
        recovery0.setMaxRetries(10);
        int int12 = recovery0.maxRetries;
        recovery0.setForgetOrphanedLogEntriesDelay((long) 32);
        long long15 = recovery0.delay;
        int int16 = recovery0.getMaxRetries();
        recovery0.setRetryInterval((long) (short) 1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 86400000L + "'", long9 == 86400000L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
    }

    @Test
    public void test01065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01065");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties5 = atomikosProperties4.asProperties();
        atomikosProperties4.service = "{-1.0=100}";
        long long8 = atomikosProperties4.getDefaultJtaTimeout();
        atomikosProperties4.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties4.setMaxActives(100);
        atomikosProperties4.defaultJtaTimeout = ' ';
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties16 = atomikosProperties15.asProperties();
        atomikosProperties15.service = "{-1.0=100}";
        long long19 = atomikosProperties15.getDefaultJtaTimeout();
        atomikosProperties15.outputDir = "{={-1.0=100}, -1.0=100}";
        long long22 = atomikosProperties15.getCheckpointInterval();
        atomikosProperties15.setConsoleFileCount((int) (byte) 1);
        boolean boolean25 = atomikosProperties15.threadedTwoPhaseCommit;
        java.lang.String str26 = atomikosProperties15.getTransactionManagerUniqueName();
        java.lang.Object obj27 = properties0.put((java.lang.Object) ' ', (java.lang.Object) atomikosProperties15);
        java.util.Properties properties28 = new java.util.Properties();
        java.util.Properties properties29 = new java.util.Properties();
        java.lang.String str30 = properties29.toString();
        boolean boolean31 = properties29.isEmpty();
        java.util.Properties properties32 = new java.util.Properties();
        java.lang.String str33 = properties32.toString();
        java.lang.Object obj35 = properties32.remove((java.lang.Object) (short) 100);
        java.lang.Object obj38 = properties32.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean40 = properties32.containsKey((java.lang.Object) 0L);
        boolean boolean41 = properties29.containsValue((java.lang.Object) 0L);
        boolean boolean44 = properties28.replace((java.lang.Object) 0L, (java.lang.Object) 0.0f, (java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration45 = properties28.elements();
        java.util.Enumeration<java.lang.Object> objEnumeration46 = properties28.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties47 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties48 = atomikosProperties47.asProperties();
        boolean boolean49 = properties0.remove((java.lang.Object) properties28, (java.lang.Object) atomikosProperties47);
        java.lang.Object obj50 = properties28.clone();
        java.io.OutputStream outputStream51 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties28.save(outputStream51, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 10000L + "'", long8 == 10000L);
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10000L + "'", long19 == 10000L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 500L + "'", long22 == 500L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "{}" + "'", str30, "{}");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "{}" + "'", str33, "{}");
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(objEnumeration45);
        org.junit.Assert.assertNotNull(objEnumeration46);
        org.junit.Assert.assertNotNull(properties48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertEquals(obj50.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj50), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj50), "{}");
    }

    @Test
    public void test01066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01066");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setEnableLogging(true);
        atomikosProperties0.consoleFileCount = 0;
        atomikosProperties0.setSerialJtaTransactions(false);
        atomikosProperties0.consoleFileCount = (short) 1;
        java.lang.String str9 = atomikosProperties0.outputDir;
        boolean boolean10 = atomikosProperties0.enableLogging;
        java.lang.String str11 = atomikosProperties0.consoleFileName;
        boolean boolean12 = atomikosProperties0.isForceShutdownOnVmExit();
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "tm.out" + "'", str11, "tm.out");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test01067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01067");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties12 = new java.util.Properties();
        java.lang.String str13 = properties12.toString();
        java.lang.Object obj15 = properties12.remove((java.lang.Object) (short) 100);
        java.lang.Object obj18 = properties12.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj19 = properties12.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration20 = properties12.elements();
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties12);
        java.lang.Object obj22 = properties12.clone();
        java.io.InputStream inputStream23 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties12.loadFromXML(inputStream23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{}" + "'", str13, "{}");
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration20);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "{1.0=-1}");
    }

    @Test
    public void test01068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01068");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties12 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration13 = properties12.elements();
        java.io.OutputStream outputStream14 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties12.storeToXML(outputStream14, "{1.0=-1, -1.0=100}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNotNull(objEnumeration13);
    }

    @Test
    public void test01069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01069");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet2 = properties1.entrySet();
        java.util.Properties properties3 = new java.util.Properties();
        java.lang.Object obj6 = properties3.setProperty("{}", "{}");
        java.util.Enumeration<java.lang.Object> objEnumeration7 = properties3.keys();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet8 = properties3.entrySet();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery10.retryInterval = (short) 100;
        recovery10.delay = (-1L);
        long long15 = recovery10.delay;
        recovery10.delay = (short) 1;
        long long18 = recovery10.getRetryInterval();
        java.util.Properties properties19 = new java.util.Properties();
        java.lang.String str20 = properties19.toString();
        properties19.clear();
        java.lang.Object obj22 = properties1.getOrDefault((java.lang.Object) recovery10, (java.lang.Object) properties19);
        properties19.clear();
        org.junit.Assert.assertNotNull(objEntrySet2);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(objEnumeration7);
        org.junit.Assert.assertNotNull(objEntrySet8);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 100L + "'", long18 == 100L);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{}" + "'", str20, "{}");
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "{}");
    }

    @Test
    public void test01070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01070");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties8 = atomikosProperties7.asProperties();
        java.lang.Object obj9 = properties0.remove((java.lang.Object) properties8);
        java.io.Reader reader10 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.load(reader10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertNull(obj9);
    }

    @Test
    public void test01071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01071");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj14 = properties0.setProperty("", "{-1.0=100}");
        java.lang.Object obj15 = properties0.clone();
        java.util.Collection<java.lang.Object> objCollection16 = properties0.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet17 = properties0.entrySet();
        java.lang.String str19 = properties0.getProperty("{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}");
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet20 = properties0.entrySet();
        java.lang.String str22 = properties0.getProperty("{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}");
        java.io.InputStream inputStream23 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.loadFromXML(inputStream23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(obj15);
// flaky:         org.junit.Assert.assertEquals(obj15.toString(), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNotNull(objCollection16);
        org.junit.Assert.assertNotNull(objEntrySet17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(objEntrySet20);
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test01072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01072");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet2 = properties1.entrySet();
        java.util.Properties properties3 = new java.util.Properties();
        java.lang.Object obj6 = properties3.setProperty("{}", "{}");
        java.util.Enumeration<java.lang.Object> objEnumeration7 = properties3.keys();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet8 = properties3.entrySet();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery10.retryInterval = (short) 100;
        recovery10.delay = (-1L);
        long long15 = recovery10.delay;
        recovery10.delay = (short) 1;
        long long18 = recovery10.getRetryInterval();
        java.util.Properties properties19 = new java.util.Properties();
        java.lang.String str20 = properties19.toString();
        properties19.clear();
        java.lang.Object obj22 = properties1.getOrDefault((java.lang.Object) recovery10, (java.lang.Object) properties19);
        recovery10.retryInterval = 0L;
        org.junit.Assert.assertNotNull(objEntrySet2);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(objEnumeration7);
        org.junit.Assert.assertNotNull(objEntrySet8);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 100L + "'", long18 == 100L);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{}" + "'", str20, "{}");
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "{}");
    }

    @Test
    public void test01073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01073");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.remove((java.lang.Object) (-1.0d));
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties3 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties4 = atomikosProperties3.asProperties();
        atomikosProperties3.service = "{-1.0=100}";
        long long7 = atomikosProperties3.getDefaultJtaTimeout();
        atomikosProperties3.setThreadedTwoPhaseCommit(true);
        boolean boolean10 = atomikosProperties3.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery11 = atomikosProperties3.recovery;
        atomikosProperties3.setLogBaseDir("");
        long long14 = atomikosProperties3.maxTimeout;
        atomikosProperties3.setService("{={-1.0=100}, -1.0=100}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean18 = atomikosProperties17.isSerialJtaTransactions();
        atomikosProperties17.logBaseName = "{-1.0=100}";
        int int21 = atomikosProperties17.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery22 = atomikosProperties17.getRecovery();
        java.lang.String str23 = atomikosProperties17.getOutputDir();
        boolean boolean24 = atomikosProperties17.isForceShutdownOnVmExit();
        boolean boolean25 = atomikosProperties17.enableLogging;
        java.lang.Class<?> wildcardClass26 = atomikosProperties17.getClass();
        java.lang.Object obj27 = properties0.replace((java.lang.Object) atomikosProperties3, (java.lang.Object) wildcardClass26);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties29 = atomikosProperties28.asProperties();
        atomikosProperties28.service = "{-1.0=100}";
        long long32 = atomikosProperties28.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel33 = null;
        atomikosProperties28.setConsoleLogLevel(atomikosLoggingLevel33);
        int int35 = atomikosProperties28.maxActives;
        atomikosProperties28.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery38 = atomikosProperties28.getRecovery();
        atomikosProperties28.consoleFileName = "{-1.0=100}";
        atomikosProperties28.setSerialJtaTransactions(false);
        atomikosProperties28.consoleFileName = "{={-1.0=100}, -1.0=100}";
        atomikosProperties28.defaultJtaTimeout = 50;
        atomikosProperties28.setTransactionManagerUniqueName("{}");
        java.lang.Object obj49 = properties0.get((java.lang.Object) atomikosProperties28);
        boolean boolean50 = properties0.isEmpty();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNotNull(properties4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(recovery11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 300000L + "'", long14 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 50 + "'", int21 == 50);
        org.junit.Assert.assertNotNull(recovery22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNotNull(properties29);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 10000L + "'", long32 == 10000L);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 50 + "'", int35 == 50);
        org.junit.Assert.assertNotNull(recovery38);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
    }

    @Test
    public void test01074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01074");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery7 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery7.retryInterval = (short) 100;
        recovery7.delay = (-1L);
        long long12 = recovery7.delay;
        boolean boolean13 = properties0.equals((java.lang.Object) long12);
        java.io.InputStream inputStream14 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.loadFromXML(inputStream14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test01075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01075");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        java.util.Properties properties8 = new java.util.Properties();
        java.lang.String str9 = properties8.toString();
        java.lang.Object obj11 = properties8.remove((java.lang.Object) (short) 100);
        java.lang.Object obj14 = properties8.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj15 = properties8.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration16 = properties8.elements();
        java.lang.Object obj17 = properties0.putIfAbsent((java.lang.Object) 10.0f, (java.lang.Object) objEnumeration16);
        java.util.Properties properties18 = new java.util.Properties();
        java.util.Enumeration<?> wildcardEnumeration19 = properties18.propertyNames();
        java.lang.Object obj20 = properties18.clone();
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.String str22 = properties21.toString();
        boolean boolean23 = properties21.isEmpty();
        java.lang.Object obj26 = properties21.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties21.elements();
        java.lang.Object obj28 = properties0.put(obj20, (java.lang.Object) objEnumeration27);
        properties0.clear();
        java.util.Properties properties30 = new java.util.Properties();
        java.util.Properties properties31 = new java.util.Properties();
        java.lang.Object obj33 = properties31.remove((java.lang.Object) (-1.0d));
        int int34 = properties31.size();
        java.util.Enumeration<java.lang.Object> objEnumeration35 = properties31.elements();
        java.util.Properties properties36 = new java.util.Properties();
        properties36.clear();
        java.lang.String str38 = properties36.toString();
        boolean boolean39 = properties0.replace((java.lang.Object) properties30, (java.lang.Object) properties31, (java.lang.Object) str38);
        java.util.Enumeration<java.lang.Object> objEnumeration40 = properties31.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties42 = atomikosProperties41.asProperties();
        atomikosProperties41.service = "{-1.0=100}";
        long long45 = atomikosProperties41.getDefaultJtaTimeout();
        atomikosProperties41.setThreadedTwoPhaseCommit(true);
        boolean boolean48 = atomikosProperties41.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery49 = atomikosProperties41.recovery;
        long long50 = recovery49.getForgetOrphanedLogEntriesDelay();
        recovery49.delay = 3;
        java.lang.Object obj53 = properties31.remove((java.lang.Object) 3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties54 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties55 = atomikosProperties54.asProperties();
        atomikosProperties54.service = "{-1.0=100}";
        long long58 = atomikosProperties54.getDefaultJtaTimeout();
        atomikosProperties54.setTransactionManagerUniqueName("{}");
        atomikosProperties54.consoleFileName = "hi!";
        int int63 = atomikosProperties54.getConsoleFileCount();
        long long64 = atomikosProperties54.getMaxTimeout();
        atomikosProperties54.consoleFileLimit = (byte) -1;
        boolean boolean67 = properties31.containsKey((java.lang.Object) (byte) -1);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{}" + "'", str9, "{}");
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration16);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(wildcardEnumeration19);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{}");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{}" + "'", str22, "{}");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(objEnumeration35);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "{}" + "'", str38, "{}");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(objEnumeration40);
        org.junit.Assert.assertNotNull(properties42);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 10000L + "'", long45 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(recovery49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 86400000L + "'", long50 == 86400000L);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertNotNull(properties55);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 10000L + "'", long58 == 10000L);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 300000L + "'", long64 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test01076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01076");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setAllowSubTransactions(true);
        atomikosProperties0.maxActives = (short) -1;
        atomikosProperties0.setService("tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties7.setAllowSubTransactions(true);
        boolean boolean10 = atomikosProperties7.enableLogging;
        boolean boolean11 = atomikosProperties7.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel12 = atomikosProperties7.consoleLogLevel;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel12);
        atomikosProperties0.maxActives = 0;
        java.util.Properties properties16 = new java.util.Properties();
        java.lang.String str17 = properties16.toString();
        java.lang.Object obj19 = properties16.remove((java.lang.Object) (short) 100);
        java.lang.Object obj22 = properties16.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj23 = properties16.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration24 = properties16.elements();
        java.util.Properties properties25 = new java.util.Properties();
        java.lang.String str26 = properties25.toString();
        java.lang.Object obj28 = properties25.remove((java.lang.Object) (short) 100);
        java.lang.Object obj31 = properties25.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj32 = properties25.clone();
        java.util.Set<java.lang.String> strSet33 = properties25.stringPropertyNames();
        java.util.Properties properties34 = new java.util.Properties(properties25);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties36 = atomikosProperties35.asProperties();
        atomikosProperties35.service = "{-1.0=100}";
        java.lang.String str39 = atomikosProperties35.getTransactionManagerUniqueName();
        boolean boolean40 = atomikosProperties35.isSerialJtaTransactions();
        int int41 = atomikosProperties35.getConsoleFileLimit();
        java.util.Properties properties42 = new java.util.Properties();
        java.lang.String str43 = properties42.toString();
        java.lang.Object obj45 = properties42.remove((java.lang.Object) (short) 100);
        java.lang.Object obj48 = properties42.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean50 = properties42.containsKey((java.lang.Object) 0L);
        java.lang.Object obj53 = properties42.replace((java.lang.Object) false, (java.lang.Object) ' ');
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties54 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties54.setEnableLogging(true);
        atomikosProperties54.setConsoleFileLimit((int) (short) 0);
        boolean boolean59 = properties42.contains((java.lang.Object) atomikosProperties54);
        java.lang.Object obj60 = properties34.putIfAbsent((java.lang.Object) int41, (java.lang.Object) atomikosProperties54);
        java.util.Properties properties61 = new java.util.Properties(properties34);
        properties16.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties34);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties64 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties65 = atomikosProperties64.asProperties();
        atomikosProperties64.service = "{-1.0=100}";
        long long68 = atomikosProperties64.getDefaultJtaTimeout();
        atomikosProperties64.setThreadedTwoPhaseCommit(true);
        boolean boolean71 = atomikosProperties64.isAllowSubTransactions();
        boolean boolean72 = atomikosProperties64.isEnableLogging();
        atomikosProperties64.allowSubTransactions = false;
        atomikosProperties64.threadedTwoPhaseCommit = true;
        atomikosProperties64.setLogBaseName("tm.out");
        java.lang.String str79 = atomikosProperties64.getLogBaseDir();
        atomikosProperties0.set(properties34, "{1.0=-1}", (java.lang.Object) atomikosProperties64);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery81 = atomikosProperties0.getRecovery();
        long long82 = recovery81.retryInterval;
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel12 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel12.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "{}" + "'", str17, "{}");
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "{}" + "'", str26, "{}");
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "{1.0=-1}");
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertNotNull(properties36);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "{}" + "'", str43, "{}");
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertNotNull(properties65);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 10000L + "'", long68 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertNotNull(recovery81);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 10000L + "'", long82 == 10000L);
    }

    @Test
    public void test01077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01077");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties12 = new java.util.Properties(properties0);
        java.io.PrintStream printStream13 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties12.list(printStream13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
    }

    @Test
    public void test01078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01078");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        boolean boolean2 = properties0.isEmpty();
        java.util.Properties properties3 = new java.util.Properties();
        java.lang.String str4 = properties3.toString();
        java.lang.Object obj6 = properties3.remove((java.lang.Object) (short) 100);
        java.lang.Object obj9 = properties3.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean11 = properties3.containsKey((java.lang.Object) 0L);
        boolean boolean12 = properties0.containsValue((java.lang.Object) 0L);
        java.util.Set<java.lang.String> strSet13 = properties0.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties15 = atomikosProperties14.asProperties();
        atomikosProperties14.service = "{-1.0=100}";
        java.lang.String str18 = atomikosProperties14.getLogBaseName();
        java.lang.String str19 = atomikosProperties14.transactionManagerUniqueName;
        atomikosProperties14.consoleFileName = "";
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties22.setAllowSubTransactions(true);
        atomikosProperties22.logBaseName = "{={-1.0=100}, -1.0=100}";
        int int27 = atomikosProperties22.getConsoleFileLimit();
        java.lang.Object obj28 = properties0.putIfAbsent((java.lang.Object) atomikosProperties14, (java.lang.Object) atomikosProperties22);
        atomikosProperties14.consoleFileName = "{}";
        atomikosProperties14.defaultJtaTimeout = 2L;
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{}" + "'", str4, "{}");
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "tmlog" + "'", str18, "tmlog");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNull(obj28);
    }

    @Test
    public void test01079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01079");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties12 = new java.util.Properties();
        java.lang.String str13 = properties12.toString();
        java.lang.Object obj15 = properties12.remove((java.lang.Object) (short) 100);
        java.lang.Object obj18 = properties12.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj19 = properties12.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration20 = properties12.elements();
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties12);
        boolean boolean23 = properties0.equals((java.lang.Object) 1.0f);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties25 = atomikosProperties24.asProperties();
        atomikosProperties24.service = "{-1.0=100}";
        long long28 = atomikosProperties24.getDefaultJtaTimeout();
        long long29 = atomikosProperties24.getMaxTimeout();
        int int30 = atomikosProperties24.consoleFileCount;
        int int31 = atomikosProperties24.getMaxActives();
        boolean boolean32 = atomikosProperties24.forceShutdownOnVmExit;
        java.lang.String str33 = atomikosProperties24.getTransactionManagerUniqueName();
        boolean boolean34 = properties0.containsValue((java.lang.Object) atomikosProperties24);
        java.io.Writer writer35 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.store(writer35, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{}" + "'", str13, "{}");
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 10000L + "'", long28 == 10000L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 300000L + "'", long29 == 300000L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 50 + "'", int31 == 50);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test01080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01080");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj7 = properties0.clone();
        java.util.Set<java.lang.String> strSet8 = properties0.stringPropertyNames();
        java.util.Properties properties9 = new java.util.Properties(properties0);
        java.lang.String str11 = properties9.getProperty("hi!");
        java.util.Collection<java.lang.Object> objCollection12 = properties9.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties14 = atomikosProperties13.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties16 = atomikosProperties15.asProperties();
        atomikosProperties15.service = "{-1.0=100}";
        long long19 = atomikosProperties15.getDefaultJtaTimeout();
        atomikosProperties15.consoleFileLimit = '#';
        java.lang.Object obj22 = properties14.get((java.lang.Object) atomikosProperties15);
        boolean boolean23 = atomikosProperties15.isForceShutdownOnVmExit();
        atomikosProperties15.consoleFileName = "";
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel26 = atomikosProperties15.getConsoleLogLevel();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery27 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery27.retryInterval = (short) 100;
        recovery27.forgetOrphanedLogEntriesDelay = 'a';
        long long32 = recovery27.retryInterval;
        recovery27.forgetOrphanedLogEntriesDelay = 0L;
        long long35 = recovery27.getForgetOrphanedLogEntriesDelay();
        long long36 = recovery27.getForgetOrphanedLogEntriesDelay();
        recovery27.retryInterval = 0L;
        long long39 = recovery27.retryInterval;
        int int40 = recovery27.maxRetries;
        long long41 = recovery27.getDelay();
        recovery27.setRetryInterval((long) 1);
        recovery27.setMaxRetries(1);
        int int46 = recovery27.getMaxRetries();
        long long47 = recovery27.retryInterval;
        java.lang.Object obj48 = properties9.putIfAbsent((java.lang.Object) atomikosLoggingLevel26, (java.lang.Object) recovery27);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Enumeration<?> wildcardEnumeration49 = properties9.propertyNames();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.Float cannot be cast to java.lang.String");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{1.0=-1}");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(objCollection12);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10000L + "'", long19 == 10000L);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel26 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel26.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 100L + "'", long32 == 100L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 5 + "'", int40 == 5);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 10000L + "'", long41 == 10000L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
        org.junit.Assert.assertNull(obj48);
    }

    @Test
    public void test01081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01081");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj7 = properties0.clone();
        java.lang.String str9 = properties0.getProperty("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        atomikosProperties10.service = "{-1.0=100}";
        long long14 = atomikosProperties10.getDefaultJtaTimeout();
        atomikosProperties10.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties10.setMaxActives(100);
        boolean boolean19 = atomikosProperties10.enableLogging;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery20 = atomikosProperties10.recovery;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties22 = atomikosProperties21.asProperties();
        atomikosProperties21.service = "{-1.0=100}";
        long long25 = atomikosProperties21.getDefaultJtaTimeout();
        atomikosProperties21.setMaxActives(0);
        boolean boolean28 = atomikosProperties21.threadedTwoPhaseCommit;
        boolean boolean29 = atomikosProperties21.allowSubTransactions;
        atomikosProperties21.logBaseDir = "{}";
        atomikosProperties21.service = "{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}";
        java.lang.Object obj34 = properties0.put((java.lang.Object) recovery20, (java.lang.Object) atomikosProperties21);
        java.lang.String str36 = properties0.getProperty("tm.out");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{1.0=-1}");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10000L + "'", long14 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(recovery20);
        org.junit.Assert.assertNotNull(properties22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 10000L + "'", long25 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNull(str36);
    }

    @Test
    public void test01082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01082");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj14 = properties0.setProperty("", "{-1.0=100}");
        java.lang.String str15 = properties0.toString();
        java.util.Set<java.lang.String> strSet16 = properties0.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties18 = atomikosProperties17.asProperties();
        atomikosProperties17.service = "{-1.0=100}";
        long long21 = atomikosProperties17.getDefaultJtaTimeout();
        atomikosProperties17.enableLogging = false;
        atomikosProperties17.setMaxTimeout((long) (byte) 0);
        atomikosProperties17.setAllowSubTransactions(true);
        java.util.Properties properties28 = new java.util.Properties();
        java.lang.Object obj30 = properties28.remove((java.lang.Object) (-1.0d));
        boolean boolean31 = properties28.isEmpty();
        java.util.Collection<java.lang.Object> objCollection32 = properties28.values();
        java.lang.Object obj33 = properties0.put((java.lang.Object) true, (java.lang.Object) properties28);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties34 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties35 = atomikosProperties34.asProperties();
        atomikosProperties34.service = "{-1.0=100}";
        long long38 = atomikosProperties34.getDefaultJtaTimeout();
        atomikosProperties34.setThreadedTwoPhaseCommit(true);
        boolean boolean41 = atomikosProperties34.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery42 = atomikosProperties34.recovery;
        atomikosProperties34.setLogBaseDir("");
        atomikosProperties34.setConsoleFileName("");
        atomikosProperties34.setThreadedTwoPhaseCommit(false);
        java.lang.String str49 = atomikosProperties34.getService();
        java.lang.String str50 = atomikosProperties34.logBaseName;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties51 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties52 = atomikosProperties51.asProperties();
        atomikosProperties51.service = "{-1.0=100}";
        long long55 = atomikosProperties51.getDefaultJtaTimeout();
        atomikosProperties51.outputDir = "{={-1.0=100}, -1.0=100}";
        long long58 = atomikosProperties51.getCheckpointInterval();
        boolean boolean59 = atomikosProperties51.isThreadedTwoPhaseCommit();
        java.lang.String str60 = atomikosProperties51.service;
        int int61 = atomikosProperties51.consoleFileCount;
        atomikosProperties51.logBaseName = "tm.out";
        java.lang.String str64 = atomikosProperties51.getService();
        java.lang.String str65 = atomikosProperties51.logBaseName;
        java.lang.Object obj66 = properties0.putIfAbsent((java.lang.Object) atomikosProperties34, (java.lang.Object) str65);
        atomikosProperties34.allowSubTransactions = false;
        atomikosProperties34.setLogBaseName("{com.atomikos.icatch.={}, 100=100}");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{={-1.0=100}, -1.0=100}" + "'", str15, "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10000L + "'", long21 == 10000L);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objCollection32);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNotNull(properties35);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 10000L + "'", long38 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(recovery42);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "{-1.0=100}" + "'", str49, "{-1.0=100}");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "tmlog" + "'", str50, "tmlog");
        org.junit.Assert.assertNotNull(properties52);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 10000L + "'", long55 == 10000L);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 500L + "'", long58 == 500L);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "{-1.0=100}" + "'", str60, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "{-1.0=100}" + "'", str64, "{-1.0=100}");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "tm.out" + "'", str65, "tm.out");
        org.junit.Assert.assertNull(obj66);
    }

    @Test
    public void test01083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01083");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.consoleFileLimit = '#';
        atomikosProperties0.setMaxTimeout((long) 100);
        boolean boolean9 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.setForceShutdownOnVmExit(true);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test01084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01084");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        boolean boolean2 = properties0.isEmpty();
        java.util.Properties properties3 = new java.util.Properties();
        java.lang.String str4 = properties3.toString();
        java.lang.Object obj6 = properties3.remove((java.lang.Object) (short) 100);
        java.lang.Object obj9 = properties3.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean11 = properties3.containsKey((java.lang.Object) 0L);
        boolean boolean12 = properties0.containsValue((java.lang.Object) 0L);
        java.util.Set<java.lang.String> strSet13 = properties0.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties15 = atomikosProperties14.asProperties();
        atomikosProperties14.service = "{-1.0=100}";
        long long18 = atomikosProperties14.getDefaultJtaTimeout();
        atomikosProperties14.setThreadedTwoPhaseCommit(true);
        boolean boolean21 = atomikosProperties14.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery22 = atomikosProperties14.recovery;
        java.util.Properties properties23 = new java.util.Properties();
        java.lang.String str24 = properties23.toString();
        boolean boolean25 = properties23.isEmpty();
        java.lang.Object obj28 = properties23.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        boolean boolean29 = properties0.remove((java.lang.Object) atomikosProperties14, (java.lang.Object) (short) 100);
        java.lang.String str31 = properties0.getProperty("{={-1.0=100}, -1.0=100}");
        java.lang.String str33 = properties0.getProperty("tm.out");
        java.io.OutputStream outputStream34 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.storeToXML(outputStream34, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{}" + "'", str4, "{}");
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10000L + "'", long18 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(recovery22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "{}" + "'", str24, "{}");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(str33);
    }

    @Test
    public void test01085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01085");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        java.util.Properties properties2 = new java.util.Properties();
        java.lang.Object obj4 = properties2.remove((java.lang.Object) (-1.0d));
        boolean boolean5 = properties2.isEmpty();
        int int6 = properties2.size();
        java.lang.String str8 = properties2.getProperty("{}");
        java.lang.Object obj9 = properties1.remove((java.lang.Object) properties2);
        java.util.Properties properties10 = new java.util.Properties();
        java.lang.String str11 = properties10.toString();
        java.util.Properties properties12 = new java.util.Properties(properties10);
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        java.util.Enumeration<?> wildcardEnumeration14 = properties1.propertyNames();
        java.io.PrintWriter printWriter15 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.list(printWriter15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "{}" + "'", str11, "{}");
        org.junit.Assert.assertNotNull(wildcardEnumeration14);
    }

    @Test
    public void test01086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01086");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        atomikosProperties0.setConsoleFileCount((int) (byte) 100);
        atomikosProperties0.setAllowSubTransactions(true);
        atomikosProperties0.setService("tm.out");
        atomikosProperties0.setSerialJtaTransactions(true);
        java.util.Properties properties14 = atomikosProperties0.asProperties();
        java.io.OutputStream outputStream15 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties14.storeToXML(outputStream15, "{{}={}}", "{{}={}}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertNotNull(properties14);
    }

    @Test
    public void test01087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01087");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileLimit = (byte) 10;
        long long7 = atomikosProperties0.getMaxTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel8 = null;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel8;
        atomikosProperties0.setService("");
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel12 = atomikosProperties0.consoleLogLevel;
        atomikosProperties0.service = "{1.0=-1}";
        java.util.Properties properties15 = atomikosProperties0.asProperties();
        java.io.OutputStream outputStream16 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties15.save(outputStream16, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertNull(atomikosLoggingLevel12);
        org.junit.Assert.assertNotNull(properties15);
    }

    @Test
    public void test01088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01088");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.outputDir = "{={-1.0=100}, -1.0=100}";
        long long7 = atomikosProperties0.getCheckpointInterval();
        boolean boolean8 = atomikosProperties0.isThreadedTwoPhaseCommit();
        java.lang.String str9 = atomikosProperties0.service;
        int int10 = atomikosProperties0.consoleFileCount;
        atomikosProperties0.logBaseName = "tm.out";
        java.lang.String str13 = atomikosProperties0.getService();
        long long14 = atomikosProperties0.getMaxTimeout();
        boolean boolean15 = atomikosProperties0.enableLogging;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{-1.0=100}" + "'", str9, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{-1.0=100}" + "'", str13, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 300000L + "'", long14 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test01089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01089");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setEnableLogging(true);
        atomikosProperties0.consoleFileCount = 0;
        atomikosProperties0.consoleFileCount = (byte) 0;
        atomikosProperties0.logBaseName = "tmlog";
        atomikosProperties0.setConsoleFileLimit((int) (short) 0);
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
    }

    @Test
    public void test01090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01090");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties();
        java.lang.String str2 = properties1.toString();
        boolean boolean3 = properties1.isEmpty();
        java.util.Properties properties4 = new java.util.Properties();
        java.lang.String str5 = properties4.toString();
        java.lang.Object obj7 = properties4.remove((java.lang.Object) (short) 100);
        java.lang.Object obj10 = properties4.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean12 = properties4.containsKey((java.lang.Object) 0L);
        boolean boolean13 = properties1.containsValue((java.lang.Object) 0L);
        boolean boolean16 = properties0.replace((java.lang.Object) 0L, (java.lang.Object) 0.0f, (java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration17 = properties0.elements();
        java.util.Set<java.lang.String> strSet18 = properties0.stringPropertyNames();
        java.io.Writer writer19 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.store(writer19, "{1.0=-1, -1.0=100}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{}" + "'", str2, "{}");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{}" + "'", str5, "{}");
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objEnumeration17);
        org.junit.Assert.assertNotNull(strSet18);
    }

    @Test
    public void test01091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01091");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties12 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration13 = properties0.keys();
        java.util.Properties properties14 = new java.util.Properties();
        java.lang.String str15 = properties14.toString();
        java.util.Properties properties16 = new java.util.Properties();
        java.lang.String str17 = properties16.toString();
        java.lang.Object obj19 = properties16.remove((java.lang.Object) (short) 100);
        java.lang.Object obj22 = properties16.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj23 = properties16.clone();
        java.util.Set<java.lang.String> strSet24 = properties16.stringPropertyNames();
        java.util.Properties properties25 = new java.util.Properties();
        java.lang.String str26 = properties25.toString();
        java.lang.Object obj28 = properties25.remove((java.lang.Object) (short) 100);
        java.lang.Object obj31 = properties25.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean33 = properties25.containsKey((java.lang.Object) 0L);
        java.lang.Object obj36 = properties25.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties37 = new java.util.Properties();
        java.lang.String str38 = properties37.toString();
        java.lang.Object obj40 = properties37.remove((java.lang.Object) (short) 100);
        java.lang.Object obj43 = properties37.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj44 = properties37.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration45 = properties37.elements();
        properties25.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties37);
        java.util.Properties properties47 = new java.util.Properties();
        java.lang.String str48 = properties47.toString();
        java.lang.Object obj50 = properties47.remove((java.lang.Object) (short) 100);
        java.lang.Object obj53 = properties47.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean55 = properties47.containsKey((java.lang.Object) 0L);
        java.lang.Object obj58 = properties47.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties59 = new java.util.Properties();
        java.lang.String str60 = properties59.toString();
        java.lang.Object obj62 = properties59.remove((java.lang.Object) (short) 100);
        java.lang.Object obj65 = properties59.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj66 = properties59.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration67 = properties59.elements();
        properties47.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties59);
        java.lang.Object obj69 = properties16.putIfAbsent((java.lang.Object) properties25, (java.lang.Object) properties59);
        java.util.Properties properties70 = new java.util.Properties();
        java.lang.String str71 = properties70.toString();
        java.lang.Object obj73 = properties70.remove((java.lang.Object) (short) 100);
        java.lang.Object obj76 = properties70.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean78 = properties70.containsKey((java.lang.Object) 0L);
        java.lang.Object obj81 = properties70.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj84 = properties70.setProperty("", "{-1.0=100}");
        java.util.Enumeration<java.lang.Object> objEnumeration85 = properties70.keys();
        boolean boolean86 = properties59.contains((java.lang.Object) properties70);
        java.lang.Object obj87 = properties14.get((java.lang.Object) properties70);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet88 = properties14.entrySet();
        java.lang.Object obj89 = properties0.get((java.lang.Object) objEntrySet88);
        java.util.Set<java.lang.String> strSet90 = properties0.stringPropertyNames();
        java.io.PrintStream printStream91 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.list(printStream91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNotNull(objEnumeration13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{}" + "'", str15, "{}");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "{}" + "'", str17, "{}");
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "{1.0=-1}");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "{}" + "'", str26, "{}");
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "{}" + "'", str38, "{}");
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertEquals(obj44.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj44), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj44), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration45);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "{}" + "'", str48, "{}");
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "{}" + "'", str60, "{}");
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertNotNull(obj66);
        org.junit.Assert.assertEquals(obj66.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj66), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj66), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration67);
        org.junit.Assert.assertNull(obj69);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "{}" + "'", str71, "{}");
        org.junit.Assert.assertNull(obj73);
        org.junit.Assert.assertNull(obj76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(obj81);
        org.junit.Assert.assertNull(obj84);
        org.junit.Assert.assertNotNull(objEnumeration85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(obj87);
        org.junit.Assert.assertNotNull(objEntrySet88);
        org.junit.Assert.assertNull(obj89);
        org.junit.Assert.assertNotNull(strSet90);
    }

    @Test
    public void test01092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01092");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.retryInterval = (short) 100;
        recovery0.forgetOrphanedLogEntriesDelay = 'a';
        long long5 = recovery0.retryInterval;
        recovery0.forgetOrphanedLogEntriesDelay = 0L;
        long long8 = recovery0.getForgetOrphanedLogEntriesDelay();
        long long9 = recovery0.getForgetOrphanedLogEntriesDelay();
        recovery0.retryInterval = 0L;
        int int12 = recovery0.getMaxRetries();
        long long13 = recovery0.getForgetOrphanedLogEntriesDelay();
        long long14 = recovery0.retryInterval;
        recovery0.setMaxRetries(10);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 100L + "'", long5 == 100L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 5 + "'", int12 == 5);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
    }

    @Test
    public void test01093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01093");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        java.util.Properties properties2 = new java.util.Properties();
        java.lang.Object obj4 = properties2.remove((java.lang.Object) (-1.0d));
        boolean boolean5 = properties2.isEmpty();
        int int6 = properties2.size();
        java.lang.String str8 = properties2.getProperty("{}");
        java.lang.Object obj9 = properties1.remove((java.lang.Object) properties2);
        java.util.Properties properties10 = new java.util.Properties();
        java.util.Properties properties11 = new java.util.Properties();
        java.lang.String str12 = properties11.toString();
        boolean boolean13 = properties11.isEmpty();
        java.util.Properties properties14 = new java.util.Properties();
        java.lang.String str15 = properties14.toString();
        java.lang.Object obj17 = properties14.remove((java.lang.Object) (short) 100);
        java.lang.Object obj20 = properties14.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean22 = properties14.containsKey((java.lang.Object) 0L);
        boolean boolean23 = properties11.containsValue((java.lang.Object) 0L);
        boolean boolean26 = properties10.replace((java.lang.Object) 0L, (java.lang.Object) 0.0f, (java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties10.elements();
        java.lang.String str28 = properties10.toString();
        java.util.Enumeration<java.lang.Object> objEnumeration29 = properties10.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties31 = atomikosProperties30.asProperties();
        boolean boolean32 = properties1.remove((java.lang.Object) properties10, (java.lang.Object) properties31);
        java.io.Reader reader33 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties31.load(reader33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "{}" + "'", str12, "{}");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{}" + "'", str15, "{}");
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "{}" + "'", str28, "{}");
        org.junit.Assert.assertNotNull(objEnumeration29);
        org.junit.Assert.assertNotNull(properties31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test01094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01094");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj3 = properties0.setProperty("{}", "{}");
        java.util.Enumeration<java.lang.Object> objEnumeration4 = properties0.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties0.elements();
        java.util.Properties properties6 = new java.util.Properties(properties0);
        java.util.Set<java.lang.Object> objSet7 = properties0.keySet();
        java.lang.String str9 = properties0.getProperty("tmlog");
        java.util.Properties properties10 = new java.util.Properties();
        java.util.Enumeration<java.lang.Object> objEnumeration11 = properties10.elements();
        boolean boolean12 = properties0.containsValue((java.lang.Object) objEnumeration11);
        java.lang.String str15 = properties0.getProperty("{1.0=-1}", "");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNotNull(objEnumeration4);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNotNull(objSet7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(objEnumeration11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test01095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01095");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileName = "hi!";
        atomikosProperties0.setCheckpointInterval((long) 5);
        atomikosProperties0.setConsoleFileCount(0);
        atomikosProperties0.setService("{-1.0=100}");
        atomikosProperties0.setDefaultJtaTimeout((long) 100);
        atomikosProperties0.defaultJtaTimeout = 32;
        boolean boolean17 = atomikosProperties0.isSerialJtaTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties19 = atomikosProperties18.asProperties();
        atomikosProperties18.service = "{-1.0=100}";
        long long22 = atomikosProperties18.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel23 = null;
        atomikosProperties18.setConsoleLogLevel(atomikosLoggingLevel23);
        atomikosProperties18.setTransactionManagerUniqueName("{-1.0=100}");
        int int27 = atomikosProperties18.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties28.setAllowSubTransactions(true);
        atomikosProperties28.maxActives = (short) -1;
        atomikosProperties28.setService("tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties35.setAllowSubTransactions(true);
        boolean boolean38 = atomikosProperties35.enableLogging;
        boolean boolean39 = atomikosProperties35.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel40 = atomikosProperties35.consoleLogLevel;
        atomikosProperties28.setConsoleLogLevel(atomikosLoggingLevel40);
        atomikosProperties18.setConsoleLogLevel(atomikosLoggingLevel40);
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel40;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(properties19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 10000L + "'", long22 == 10000L);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 50 + "'", int27 == 50);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel40 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel40.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
    }

    @Test
    public void test01096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01096");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.retryInterval = (short) 100;
        recovery0.forgetOrphanedLogEntriesDelay = 'a';
        long long5 = recovery0.retryInterval;
        recovery0.forgetOrphanedLogEntriesDelay = 0L;
        long long8 = recovery0.getForgetOrphanedLogEntriesDelay();
        recovery0.setRetryInterval((long) 0);
        long long11 = recovery0.getForgetOrphanedLogEntriesDelay();
        int int12 = recovery0.maxRetries;
        recovery0.forgetOrphanedLogEntriesDelay = 50L;
        recovery0.setDelay(500L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 100L + "'", long5 == 100L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 5 + "'", int12 == 5);
    }

    @Test
    public void test01097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01097");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long1 = recovery0.getRetryInterval();
        long long2 = recovery0.retryInterval;
        long long3 = recovery0.forgetOrphanedLogEntriesDelay;
        long long4 = recovery0.getRetryInterval();
        recovery0.retryInterval = 97L;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 10000L + "'", long1 == 10000L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10000L + "'", long2 == 10000L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 86400000L + "'", long3 == 86400000L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
    }

    @Test
    public void test01098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01098");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.remove((java.lang.Object) (-1.0d));
        boolean boolean3 = properties0.isEmpty();
        int int4 = properties0.size();
        java.lang.String str6 = properties0.getProperty("{}");
        java.util.Enumeration<java.lang.Object> objEnumeration7 = properties0.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties9 = atomikosProperties8.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        atomikosProperties10.service = "{-1.0=100}";
        long long14 = atomikosProperties10.getDefaultJtaTimeout();
        atomikosProperties10.consoleFileLimit = '#';
        java.lang.Object obj17 = properties9.get((java.lang.Object) atomikosProperties10);
        boolean boolean18 = atomikosProperties10.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties20 = atomikosProperties19.asProperties();
        atomikosProperties19.service = "{-1.0=100}";
        long long23 = atomikosProperties19.getDefaultJtaTimeout();
        atomikosProperties19.serialJtaTransactions = true;
        atomikosProperties19.maxActives = ' ';
        int int28 = atomikosProperties19.maxActives;
        boolean boolean29 = atomikosProperties19.isAllowSubTransactions();
        java.lang.Object obj30 = properties0.putIfAbsent((java.lang.Object) atomikosProperties10, (java.lang.Object) boolean29);
        java.io.OutputStream outputStream31 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.store(outputStream31, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=32, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={-1.0=100}, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(objEnumeration7);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10000L + "'", long14 == 10000L);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(properties20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 10000L + "'", long23 == 10000L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 32 + "'", int28 == 32);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNull(obj30);
    }

    @Test
    public void test01099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01099");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        long long5 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.threadedTwoPhaseCommit = true;
        long long8 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.logBaseDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties0.setLogBaseName("{1.0=-1, -1.0=100}");
        java.lang.String str13 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.consoleFileName = "hi!";
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tm.out" + "'", str13, "tm.out");
    }

    @Test
    public void test01100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01100");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj14 = properties0.setProperty("", "{-1.0=100}");
        java.lang.Object obj15 = properties0.clone();
        java.util.Collection<java.lang.Object> objCollection16 = properties0.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet17 = properties0.entrySet();
        java.io.OutputStream outputStream18 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.storeToXML(outputStream18, "{{-1.0=100}=}", "{{={-1.0=100}, -1.0=100}=}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(obj15);
// flaky:         org.junit.Assert.assertEquals(obj15.toString(), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNotNull(objCollection16);
        org.junit.Assert.assertNotNull(objEntrySet17);
    }

    @Test
    public void test01101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01101");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getLogBaseName();
        long long5 = atomikosProperties0.defaultJtaTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel6 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel6);
        atomikosProperties0.service = "";
        atomikosProperties0.forceShutdownOnVmExit = true;
        atomikosProperties0.setConsoleFileName("{-1.0=100}");
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tmlog" + "'", str4, "tmlog");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 10000L + "'", long5 == 10000L);
    }

    @Test
    public void test01102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01102");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.checkpointInterval = 86400000L;
        boolean boolean4 = atomikosProperties0.enableLogging;
        java.lang.String str5 = atomikosProperties0.consoleFileName;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tm.out" + "'", str5, "tm.out");
    }

    @Test
    public void test01103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01103");
        java.util.Properties properties0 = new java.util.Properties();
        properties0.clear();
        java.lang.String str2 = properties0.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery3 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery3.retryInterval = (short) 100;
        recovery3.setForgetOrphanedLogEntriesDelay((long) 5);
        recovery3.setRetryInterval((long) (-1));
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery10.retryInterval = (short) 100;
        recovery10.forgetOrphanedLogEntriesDelay = 'a';
        long long15 = recovery10.retryInterval;
        recovery10.forgetOrphanedLogEntriesDelay = 0L;
        java.lang.Object obj18 = properties0.put((java.lang.Object) (-1), (java.lang.Object) recovery10);
        long long19 = recovery10.getForgetOrphanedLogEntriesDelay();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{}" + "'", str2, "{}");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 100L + "'", long15 == 100L);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
    }

    @Test
    public void test01104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01104");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        boolean boolean5 = atomikosProperties0.enableLogging;
        boolean boolean6 = atomikosProperties0.isForceShutdownOnVmExit();
        int int7 = atomikosProperties0.consoleFileCount;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
    }

    @Test
    public void test01105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01105");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        long long7 = atomikosProperties0.maxTimeout;
        boolean boolean8 = atomikosProperties0.isThreadedTwoPhaseCommit();
        atomikosProperties0.setCheckpointInterval(1L);
        atomikosProperties0.setOutputDir("{}");
        atomikosProperties0.consoleFileLimit = (-1);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel15 = atomikosProperties0.getConsoleLogLevel();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel15 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel15.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
    }

    @Test
    public void test01106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01106");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj7 = properties0.clone();
        java.util.Set<java.lang.String> strSet8 = properties0.stringPropertyNames();
        java.util.Properties properties9 = new java.util.Properties();
        java.lang.String str10 = properties9.toString();
        java.lang.Object obj12 = properties9.remove((java.lang.Object) (short) 100);
        java.lang.Object obj15 = properties9.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean17 = properties9.containsKey((java.lang.Object) 0L);
        java.lang.Object obj20 = properties9.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.String str22 = properties21.toString();
        java.lang.Object obj24 = properties21.remove((java.lang.Object) (short) 100);
        java.lang.Object obj27 = properties21.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj28 = properties21.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration29 = properties21.elements();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties21);
        java.util.Properties properties31 = new java.util.Properties();
        java.lang.String str32 = properties31.toString();
        java.lang.Object obj34 = properties31.remove((java.lang.Object) (short) 100);
        java.lang.Object obj37 = properties31.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean39 = properties31.containsKey((java.lang.Object) 0L);
        java.lang.Object obj42 = properties31.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties43 = new java.util.Properties();
        java.lang.String str44 = properties43.toString();
        java.lang.Object obj46 = properties43.remove((java.lang.Object) (short) 100);
        java.lang.Object obj49 = properties43.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj50 = properties43.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration51 = properties43.elements();
        properties31.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties43);
        java.lang.Object obj53 = properties0.putIfAbsent((java.lang.Object) properties9, (java.lang.Object) properties43);
        java.util.Properties properties54 = new java.util.Properties();
        java.lang.Object obj56 = properties54.remove((java.lang.Object) (-1.0d));
        boolean boolean57 = properties54.isEmpty();
        int int58 = properties54.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery59 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery59.retryInterval = (short) 100;
        recovery59.forgetOrphanedLogEntriesDelay = 'a';
        java.util.Properties properties64 = new java.util.Properties();
        java.lang.Object obj66 = properties64.remove((java.lang.Object) (-1.0d));
        boolean boolean67 = properties64.isEmpty();
        int int68 = properties64.size();
        java.lang.String str70 = properties64.getProperty("{}");
        boolean boolean71 = properties54.remove((java.lang.Object) recovery59, (java.lang.Object) properties64);
        java.lang.Object obj72 = properties54.clone();
        boolean boolean73 = properties43.containsValue(obj72);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{1.0=-1}");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "{}" + "'", str10, "{}");
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{}" + "'", str22, "{}");
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "{}" + "'", str32, "{}");
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "{}" + "'", str44, "{}");
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertEquals(obj50.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj50), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj50), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration51);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(obj72);
        org.junit.Assert.assertEquals(obj72.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj72), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj72), "{}");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test01107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01107");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.remove((java.lang.Object) (-1.0d));
        boolean boolean3 = properties0.isEmpty();
        java.util.Properties properties4 = new java.util.Properties();
        java.lang.String str5 = properties4.toString();
        java.lang.Object obj7 = properties4.remove((java.lang.Object) (short) 100);
        java.lang.Object obj10 = properties4.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean12 = properties4.containsKey((java.lang.Object) 0L);
        java.lang.Object obj15 = properties4.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties16 = new java.util.Properties();
        java.lang.String str17 = properties16.toString();
        java.lang.Object obj19 = properties16.remove((java.lang.Object) (short) 100);
        java.lang.Object obj22 = properties16.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj23 = properties16.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration24 = properties16.elements();
        properties4.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties16);
        java.lang.Object obj26 = properties16.clone();
        properties16.clear();
        int int28 = properties16.size();
        java.util.Properties properties29 = new java.util.Properties();
        java.lang.String str30 = properties29.toString();
        java.lang.Object obj32 = properties29.remove((java.lang.Object) (short) 100);
        java.lang.Object obj35 = properties29.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj36 = properties29.clone();
        java.util.Set<java.lang.String> strSet37 = properties29.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery38 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery38.retryInterval = (short) 100;
        recovery38.delay = (-1L);
        long long43 = recovery38.delay;
        recovery38.delay = (short) 1;
        long long46 = recovery38.getRetryInterval();
        int int47 = recovery38.maxRetries;
        int int48 = recovery38.maxRetries;
        long long49 = recovery38.forgetOrphanedLogEntriesDelay;
        java.util.Properties properties50 = new java.util.Properties();
        java.lang.Object obj52 = properties50.remove((java.lang.Object) (-1.0d));
        boolean boolean53 = properties50.isEmpty();
        int int54 = properties50.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery55 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery55.retryInterval = (short) 100;
        recovery55.forgetOrphanedLogEntriesDelay = 'a';
        java.util.Properties properties60 = new java.util.Properties();
        java.lang.Object obj62 = properties60.remove((java.lang.Object) (-1.0d));
        boolean boolean63 = properties60.isEmpty();
        int int64 = properties60.size();
        java.lang.String str66 = properties60.getProperty("{}");
        boolean boolean67 = properties50.remove((java.lang.Object) recovery55, (java.lang.Object) properties60);
        java.lang.Object obj68 = properties29.putIfAbsent((java.lang.Object) long49, (java.lang.Object) properties50);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties69 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties69.setAllowSubTransactions(true);
        atomikosProperties69.maxActives = (short) -1;
        atomikosProperties69.setLogBaseDir("{-1.0=100}");
        boolean boolean76 = properties0.replace((java.lang.Object) properties16, (java.lang.Object) long49, (java.lang.Object) "{-1.0=100}");
        boolean boolean77 = properties0.isEmpty();
        java.io.InputStream inputStream78 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.load(inputStream78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{}" + "'", str5, "{}");
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "{}" + "'", str17, "{}");
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration24);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "{1.0=-1}");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "{}" + "'", str30, "{}");
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "{1.0=-1}");
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-1L) + "'", long43 == (-1L));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 100L + "'", long46 == 100L);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 5 + "'", int47 == 5);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 5 + "'", int48 == 5);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 86400000L + "'", long49 == 86400000L);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(obj68);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
    }

    @Test
    public void test01108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01108");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.retryInterval = (short) 100;
        recovery0.delay = (-1L);
        long long5 = recovery0.delay;
        recovery0.delay = (short) 1;
        long long8 = recovery0.getRetryInterval();
        long long9 = recovery0.getForgetOrphanedLogEntriesDelay();
        recovery0.setMaxRetries(10);
        int int12 = recovery0.maxRetries;
        recovery0.setForgetOrphanedLogEntriesDelay((long) 32);
        long long15 = recovery0.delay;
        int int16 = recovery0.getMaxRetries();
        recovery0.maxRetries = 32;
        int int19 = recovery0.maxRetries;
        int int20 = recovery0.maxRetries;
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 86400000L + "'", long9 == 86400000L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 32 + "'", int19 == 32);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 32 + "'", int20 == 32);
    }

    @Test
    public void test01109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01109");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileLimit = (byte) 10;
        java.lang.String str7 = atomikosProperties0.getTransactionManagerUniqueName();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery8 = atomikosProperties0.recovery;
        java.lang.Class<?> wildcardClass9 = recovery8.getClass();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(recovery8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test01110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01110");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        atomikosProperties0.setConsoleFileCount((int) (byte) 100);
        atomikosProperties0.setAllowSubTransactions(true);
        int int10 = atomikosProperties0.getMaxActives();
        boolean boolean11 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.setOutputDir("");
        java.lang.String str14 = atomikosProperties0.getTransactionManagerUniqueName();
        java.lang.String str15 = atomikosProperties0.getLogBaseDir();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel16 = atomikosProperties0.consoleLogLevel;
        java.util.Properties properties17 = atomikosProperties0.asProperties();
        atomikosProperties0.setDefaultJtaTimeout((long) (byte) 1);
        atomikosProperties0.setService("");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 50 + "'", int10 == 50);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel16 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel16.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(properties17);
    }

    @Test
    public void test01111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01111");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getLogBaseName();
        java.lang.String str5 = atomikosProperties0.transactionManagerUniqueName;
        boolean boolean6 = atomikosProperties0.isThreadedTwoPhaseCommit();
        long long7 = atomikosProperties0.getMaxTimeout();
        boolean boolean8 = atomikosProperties0.serialJtaTransactions;
        boolean boolean9 = atomikosProperties0.isAllowSubTransactions();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tmlog" + "'", str4, "tmlog");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test01112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01112");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj3 = properties0.setProperty("{}", "{}");
        java.util.Enumeration<java.lang.Object> objEnumeration4 = properties0.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties0.elements();
        java.util.Properties properties6 = new java.util.Properties(properties0);
        java.util.Set<java.lang.Object> objSet7 = properties0.keySet();
        java.lang.String str8 = properties0.toString();
        boolean boolean9 = properties0.isEmpty();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNotNull(objEnumeration4);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNotNull(objSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{{}={}}" + "'", str8, "{{}={}}");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test01113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01113");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        java.lang.String str6 = atomikosProperties0.getLogBaseName();
        atomikosProperties0.setCheckpointInterval((long) 32);
        atomikosProperties0.setAllowSubTransactions(false);
        boolean boolean11 = atomikosProperties0.isThreadedTwoPhaseCommit();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties13 = atomikosProperties12.asProperties();
        atomikosProperties12.service = "{-1.0=100}";
        long long16 = atomikosProperties12.getDefaultJtaTimeout();
        atomikosProperties12.serialJtaTransactions = true;
        atomikosProperties12.maxActives = ' ';
        int int21 = atomikosProperties12.getConsoleFileCount();
        int int22 = atomikosProperties12.consoleFileLimit;
        java.util.Properties properties23 = atomikosProperties12.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean25 = atomikosProperties24.isSerialJtaTransactions();
        atomikosProperties24.logBaseName = "{-1.0=100}";
        int int28 = atomikosProperties24.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery29 = atomikosProperties24.getRecovery();
        atomikosProperties24.setConsoleFileCount((int) (byte) 100);
        atomikosProperties24.setAllowSubTransactions(true);
        atomikosProperties24.setService("tm.out");
        boolean boolean36 = atomikosProperties24.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel37 = atomikosProperties24.getConsoleLogLevel();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties38.setAllowSubTransactions(true);
        boolean boolean41 = atomikosProperties38.enableLogging;
        atomikosProperties38.consoleFileLimit = (byte) 100;
        java.util.Properties properties44 = new java.util.Properties();
        java.lang.String str45 = properties44.toString();
        java.util.Properties properties46 = new java.util.Properties(properties44);
        java.util.Properties properties48 = new java.util.Properties();
        java.lang.String str49 = properties48.toString();
        java.lang.Object obj51 = properties48.remove((java.lang.Object) (short) 100);
        java.lang.Object obj54 = properties48.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean56 = properties48.containsKey((java.lang.Object) 0L);
        java.lang.Object obj59 = properties48.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties60 = new java.util.Properties(properties48);
        java.util.Enumeration<java.lang.Object> objEnumeration61 = properties60.elements();
        atomikosProperties38.set(properties46, "{={-1.0=100}, -1.0=100}", (java.lang.Object) properties60);
        atomikosProperties38.allowSubTransactions = false;
        java.lang.Object obj65 = properties23.put((java.lang.Object) atomikosProperties24, (java.lang.Object) false);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel66 = atomikosProperties24.consoleLogLevel;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel66;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "{-1.0=100}" + "'", str6, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(properties13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10000L + "'", long16 == 10000L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(properties23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 50 + "'", int28 == 50);
        org.junit.Assert.assertNotNull(recovery29);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel37 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel37.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "{}" + "'", str45, "{}");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "{}" + "'", str49, "{}");
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertNotNull(objEnumeration61);
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel66 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel66.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
    }

    @Test
    public void test01114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01114");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Enumeration<?> wildcardEnumeration1 = properties0.propertyNames();
        java.lang.Object obj4 = properties0.setProperty("{={-1.0=100}, -1.0=100}", "{={-1.0=100}, -1.0=100}");
        java.util.Properties properties5 = new java.util.Properties(properties0);
        java.io.InputStream inputStream6 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.loadFromXML(inputStream6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardEnumeration1);
        org.junit.Assert.assertNull(obj4);
    }

    @Test
    public void test01115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01115");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.util.Properties properties7 = new java.util.Properties();
        java.lang.String str8 = properties7.toString();
        java.lang.Object obj10 = properties7.remove((java.lang.Object) (short) 100);
        java.lang.Object obj13 = properties7.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        int int14 = properties7.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery15 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery15.retryInterval = (short) 100;
        recovery15.forgetOrphanedLogEntriesDelay = 'a';
        long long20 = recovery15.retryInterval;
        recovery15.setForgetOrphanedLogEntriesDelay((long) 0);
        java.lang.Object obj23 = properties0.replace((java.lang.Object) int14, (java.lang.Object) recovery15);
        java.lang.Object obj26 = properties0.setProperty("{}", "{}");
        java.io.InputStream inputStream27 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.load(inputStream27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{}" + "'", str8, "{}");
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 100L + "'", long20 == 100L);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNull(obj26);
    }

    @Test
    public void test01116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01116");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties12 = new java.util.Properties();
        java.lang.String str13 = properties12.toString();
        java.lang.Object obj15 = properties12.remove((java.lang.Object) (short) 100);
        java.lang.Object obj18 = properties12.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj19 = properties12.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration20 = properties12.elements();
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties12);
        boolean boolean23 = properties0.equals((java.lang.Object) 1.0f);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties25 = atomikosProperties24.asProperties();
        atomikosProperties24.service = "{-1.0=100}";
        long long28 = atomikosProperties24.getDefaultJtaTimeout();
        long long29 = atomikosProperties24.getMaxTimeout();
        int int30 = atomikosProperties24.consoleFileCount;
        int int31 = atomikosProperties24.getMaxActives();
        boolean boolean32 = atomikosProperties24.forceShutdownOnVmExit;
        java.lang.String str33 = atomikosProperties24.getTransactionManagerUniqueName();
        boolean boolean34 = properties0.containsValue((java.lang.Object) atomikosProperties24);
        java.util.Collection<java.lang.Object> objCollection35 = properties0.values();
        java.util.Properties properties36 = new java.util.Properties();
        java.lang.String str37 = properties36.toString();
        java.lang.Object obj39 = properties36.remove((java.lang.Object) (short) 100);
        java.lang.Object obj42 = properties36.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean44 = properties36.containsKey((java.lang.Object) 0L);
        java.lang.Object obj47 = properties36.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties48 = new java.util.Properties();
        java.lang.String str49 = properties48.toString();
        java.lang.Object obj51 = properties48.remove((java.lang.Object) (short) 100);
        java.lang.Object obj54 = properties48.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj55 = properties48.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration56 = properties48.elements();
        properties36.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties48);
        java.lang.Object obj60 = properties48.setProperty("{={-1.0=100}, -1.0=100}", "hi!");
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties48);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties62 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties63 = atomikosProperties62.asProperties();
        atomikosProperties62.service = "{-1.0=100}";
        long long66 = atomikosProperties62.getDefaultJtaTimeout();
        atomikosProperties62.serialJtaTransactions = true;
        long long69 = atomikosProperties62.getDefaultJtaTimeout();
        long long70 = atomikosProperties62.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery71 = atomikosProperties62.getRecovery();
        java.lang.String str72 = atomikosProperties62.outputDir;
        atomikosProperties62.setTransactionManagerUniqueName("");
        atomikosProperties62.setTransactionManagerUniqueName("");
        atomikosProperties62.setLogBaseDir("{{}={}}");
        boolean boolean79 = properties0.containsKey((java.lang.Object) atomikosProperties62);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{}" + "'", str13, "{}");
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 10000L + "'", long28 == 10000L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 300000L + "'", long29 == 300000L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 50 + "'", int31 == 50);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(objCollection35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "{}" + "'", str37, "{}");
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "{}" + "'", str49, "{}");
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertEquals(obj55.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj55), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj55), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration56);
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertNotNull(properties63);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 10000L + "'", long66 == 10000L);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 10000L + "'", long69 == 10000L);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 500L + "'", long70 == 500L);
        org.junit.Assert.assertNotNull(recovery71);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test01117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01117");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.remove((java.lang.Object) (-1.0d));
        boolean boolean3 = properties0.isEmpty();
        java.util.Properties properties4 = new java.util.Properties();
        java.lang.String str5 = properties4.toString();
        java.lang.Object obj7 = properties4.remove((java.lang.Object) (short) 100);
        java.lang.Object obj10 = properties4.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean12 = properties4.containsKey((java.lang.Object) 0L);
        java.lang.Object obj15 = properties4.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj18 = properties4.setProperty("", "{-1.0=100}");
        java.lang.Object obj19 = properties4.clone();
        java.lang.Object obj20 = properties0.get((java.lang.Object) properties4);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties21.setEnableLogging(true);
        atomikosProperties21.consoleFileCount = 0;
        int int26 = atomikosProperties21.getMaxActives();
        java.lang.String str27 = atomikosProperties21.getLogBaseDir();
        java.lang.String str28 = atomikosProperties21.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery29 = atomikosProperties21.getRecovery();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties31 = atomikosProperties30.asProperties();
        atomikosProperties30.service = "{-1.0=100}";
        long long34 = atomikosProperties30.getDefaultJtaTimeout();
        atomikosProperties30.setThreadedTwoPhaseCommit(true);
        boolean boolean37 = atomikosProperties30.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery38 = atomikosProperties30.recovery;
        atomikosProperties30.setLogBaseDir("");
        java.lang.Object obj41 = properties4.replace((java.lang.Object) recovery29, (java.lang.Object) "");
        java.util.Properties properties42 = new java.util.Properties();
        java.lang.Object obj44 = properties42.remove((java.lang.Object) (-1.0d));
        boolean boolean46 = properties42.contains((java.lang.Object) "{-1.0=100}");
        boolean boolean47 = properties4.equals((java.lang.Object) "{-1.0=100}");
        java.util.Enumeration<java.lang.Object> objEnumeration48 = properties4.elements();
        java.lang.Object obj51 = properties4.setProperty("{{1.0=-1}=hi!}", "tmlog");
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{}" + "'", str5, "{}");
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(obj19);
// flaky:         org.junit.Assert.assertEquals(obj19.toString(), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 50 + "'", int26 == 50);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(recovery29);
        org.junit.Assert.assertNotNull(properties31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 10000L + "'", long34 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(recovery38);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(objEnumeration48);
        org.junit.Assert.assertNull(obj51);
    }

    @Test
    public void test01118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01118");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties0.setMaxActives(100);
        boolean boolean9 = atomikosProperties0.enableLogging;
        atomikosProperties0.forceShutdownOnVmExit = true;
        atomikosProperties0.setAllowSubTransactions(false);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test01119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01119");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        boolean boolean5 = properties0.containsKey((java.lang.Object) 0L);
        java.util.Properties properties6 = new java.util.Properties();
        java.lang.String str7 = properties6.toString();
        java.util.Properties properties8 = new java.util.Properties(properties6);
        java.util.Properties properties9 = new java.util.Properties();
        java.lang.String str10 = properties9.toString();
        java.lang.Object obj12 = properties9.remove((java.lang.Object) (short) 100);
        java.lang.Object obj15 = properties9.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean17 = properties9.containsKey((java.lang.Object) 0L);
        java.lang.Object obj20 = properties9.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj23 = properties9.setProperty("", "{-1.0=100}");
        java.util.Enumeration<java.lang.Object> objEnumeration24 = properties9.keys();
        java.util.Properties properties25 = new java.util.Properties();
        java.lang.String str26 = properties25.toString();
        boolean boolean27 = properties25.isEmpty();
        java.lang.Object obj30 = properties25.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration31 = properties25.elements();
        java.lang.Object obj32 = properties8.replace((java.lang.Object) objEnumeration24, (java.lang.Object) properties25);
        java.util.Enumeration<java.lang.Object> objEnumeration33 = properties25.elements();
        java.util.Properties properties34 = new java.util.Properties();
        java.lang.String str35 = properties34.toString();
        boolean boolean36 = properties34.isEmpty();
        java.lang.Object obj39 = properties34.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Properties properties40 = new java.util.Properties();
        java.lang.String str41 = properties40.toString();
        java.lang.Object obj43 = properties40.remove((java.lang.Object) (short) 100);
        java.lang.Object obj46 = properties40.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean48 = properties40.containsKey((java.lang.Object) 0L);
        java.lang.Object obj51 = properties40.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties52 = new java.util.Properties(properties40);
        boolean boolean53 = properties34.containsValue((java.lang.Object) properties40);
        java.util.Properties properties54 = new java.util.Properties();
        java.lang.String str55 = properties54.toString();
        java.lang.Object obj57 = properties54.remove((java.lang.Object) (short) 100);
        java.lang.Object obj60 = properties54.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean62 = properties54.containsKey((java.lang.Object) 0L);
        java.lang.Object obj65 = properties54.replace((java.lang.Object) false, (java.lang.Object) ' ');
        boolean boolean66 = properties54.isEmpty();
        boolean boolean67 = properties0.replace((java.lang.Object) properties25, (java.lang.Object) properties34, (java.lang.Object) properties54);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery68 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long69 = recovery68.forgetOrphanedLogEntriesDelay;
        long long70 = recovery68.forgetOrphanedLogEntriesDelay;
        long long71 = recovery68.getDelay();
        java.lang.Object obj72 = properties34.remove((java.lang.Object) recovery68);
        int int73 = recovery68.maxRetries;
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "{}" + "'", str7, "{}");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "{}" + "'", str10, "{}");
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNotNull(objEnumeration24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "{}" + "'", str26, "{}");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNotNull(objEnumeration31);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNotNull(objEnumeration33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "{}" + "'", str35, "{}");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "{}" + "'", str41, "{}");
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "{}" + "'", str55, "{}");
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 86400000L + "'", long69 == 86400000L);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 86400000L + "'", long70 == 86400000L);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 10000L + "'", long71 == 10000L);
        org.junit.Assert.assertNull(obj72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 5 + "'", int73 == 5);
    }

    @Test
    public void test01120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01120");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        java.util.Properties properties8 = new java.util.Properties();
        java.lang.String str9 = properties8.toString();
        java.lang.Object obj11 = properties8.remove((java.lang.Object) (short) 100);
        java.lang.Object obj14 = properties8.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj15 = properties8.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration16 = properties8.elements();
        java.lang.Object obj17 = properties0.putIfAbsent((java.lang.Object) 10.0f, (java.lang.Object) objEnumeration16);
        java.util.Properties properties18 = new java.util.Properties();
        java.util.Enumeration<?> wildcardEnumeration19 = properties18.propertyNames();
        java.lang.Object obj20 = properties18.clone();
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.String str22 = properties21.toString();
        boolean boolean23 = properties21.isEmpty();
        java.lang.Object obj26 = properties21.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties21.elements();
        java.lang.Object obj28 = properties0.put(obj20, (java.lang.Object) objEnumeration27);
        properties0.clear();
        java.util.Properties properties30 = new java.util.Properties();
        java.util.Properties properties31 = new java.util.Properties();
        java.lang.Object obj33 = properties31.remove((java.lang.Object) (-1.0d));
        int int34 = properties31.size();
        java.util.Enumeration<java.lang.Object> objEnumeration35 = properties31.elements();
        java.util.Properties properties36 = new java.util.Properties();
        properties36.clear();
        java.lang.String str38 = properties36.toString();
        boolean boolean39 = properties0.replace((java.lang.Object) properties30, (java.lang.Object) properties31, (java.lang.Object) str38);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean41 = atomikosProperties40.isSerialJtaTransactions();
        atomikosProperties40.logBaseName = "{-1.0=100}";
        int int44 = atomikosProperties40.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery45 = atomikosProperties40.getRecovery();
        atomikosProperties40.setConsoleFileCount((int) (byte) 100);
        java.lang.String str48 = atomikosProperties40.logBaseName;
        atomikosProperties40.setCheckpointInterval((long) 18);
        long long51 = atomikosProperties40.defaultJtaTimeout;
        boolean boolean52 = properties30.containsValue((java.lang.Object) atomikosProperties40);
        java.io.InputStream inputStream53 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties30.loadFromXML(inputStream53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{}" + "'", str9, "{}");
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration16);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(wildcardEnumeration19);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{}");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{}" + "'", str22, "{}");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(objEnumeration35);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "{}" + "'", str38, "{}");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 50 + "'", int44 == 50);
        org.junit.Assert.assertNotNull(recovery45);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "{-1.0=100}" + "'", str48, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 10000L + "'", long51 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test01121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01121");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj7 = properties0.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration8 = properties0.elements();
        java.util.Properties properties9 = new java.util.Properties();
        java.lang.String str10 = properties9.toString();
        java.lang.Object obj12 = properties9.remove((java.lang.Object) (short) 100);
        java.lang.Object obj15 = properties9.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj16 = properties9.clone();
        java.util.Set<java.lang.String> strSet17 = properties9.stringPropertyNames();
        java.util.Properties properties18 = new java.util.Properties(properties9);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties20 = atomikosProperties19.asProperties();
        atomikosProperties19.service = "{-1.0=100}";
        java.lang.String str23 = atomikosProperties19.getTransactionManagerUniqueName();
        boolean boolean24 = atomikosProperties19.isSerialJtaTransactions();
        int int25 = atomikosProperties19.getConsoleFileLimit();
        java.util.Properties properties26 = new java.util.Properties();
        java.lang.String str27 = properties26.toString();
        java.lang.Object obj29 = properties26.remove((java.lang.Object) (short) 100);
        java.lang.Object obj32 = properties26.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean34 = properties26.containsKey((java.lang.Object) 0L);
        java.lang.Object obj37 = properties26.replace((java.lang.Object) false, (java.lang.Object) ' ');
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties38.setEnableLogging(true);
        atomikosProperties38.setConsoleFileLimit((int) (short) 0);
        boolean boolean43 = properties26.contains((java.lang.Object) atomikosProperties38);
        java.lang.Object obj44 = properties18.putIfAbsent((java.lang.Object) int25, (java.lang.Object) atomikosProperties38);
        java.util.Properties properties45 = new java.util.Properties(properties18);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties18);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery47 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery47.retryInterval = (short) 100;
        recovery47.forgetOrphanedLogEntriesDelay = 'a';
        long long52 = recovery47.getDelay();
        int int53 = recovery47.maxRetries;
        int int54 = recovery47.maxRetries;
        recovery47.setDelay((long) (-1));
        boolean boolean57 = properties0.contains((java.lang.Object) recovery47);
        java.io.OutputStream outputStream58 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.save(outputStream58, "{{}={}}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "{}" + "'", str10, "{}");
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "{1.0=-1}");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(properties20);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "{}" + "'", str27, "{}");
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 10000L + "'", long52 == 10000L);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 5 + "'", int53 == 5);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 5 + "'", int54 == 5);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test01122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01122");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        boolean boolean7 = atomikosProperties0.isAllowSubTransactions();
        boolean boolean8 = atomikosProperties0.isEnableLogging();
        long long9 = atomikosProperties0.getCheckpointInterval();
        atomikosProperties0.setConsoleFileName("{1.0=-1, -1.0=100}");
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 500L + "'", long9 == 500L);
    }

    @Test
    public void test01123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01123");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        boolean boolean2 = properties0.isEmpty();
        java.util.Properties properties3 = new java.util.Properties();
        java.lang.String str4 = properties3.toString();
        java.lang.Object obj6 = properties3.remove((java.lang.Object) (short) 100);
        java.lang.Object obj9 = properties3.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean11 = properties3.containsKey((java.lang.Object) 0L);
        boolean boolean12 = properties0.containsValue((java.lang.Object) 0L);
        java.util.Set<java.lang.String> strSet13 = properties0.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties15 = atomikosProperties14.asProperties();
        atomikosProperties14.service = "{-1.0=100}";
        java.lang.String str18 = atomikosProperties14.getLogBaseName();
        java.lang.String str19 = atomikosProperties14.transactionManagerUniqueName;
        atomikosProperties14.consoleFileName = "";
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties22.setAllowSubTransactions(true);
        atomikosProperties22.logBaseName = "{={-1.0=100}, -1.0=100}";
        int int27 = atomikosProperties22.getConsoleFileLimit();
        java.lang.Object obj28 = properties0.putIfAbsent((java.lang.Object) atomikosProperties14, (java.lang.Object) atomikosProperties22);
        atomikosProperties14.allowSubTransactions = false;
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{}" + "'", str4, "{}");
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "tmlog" + "'", str18, "tmlog");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNull(obj28);
    }

    @Test
    public void test01124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01124");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long1 = recovery0.getRetryInterval();
        long long2 = recovery0.retryInterval;
        recovery0.forgetOrphanedLogEntriesDelay = 0;
        long long5 = recovery0.delay;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 10000L + "'", long1 == 10000L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10000L + "'", long2 == 10000L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 10000L + "'", long5 == 10000L);
    }

    @Test
    public void test01125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01125");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.util.Properties properties7 = new java.util.Properties();
        java.lang.String str8 = properties7.toString();
        java.lang.Object obj10 = properties7.remove((java.lang.Object) (short) 100);
        java.lang.Object obj13 = properties7.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        int int14 = properties7.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery15 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery15.retryInterval = (short) 100;
        recovery15.forgetOrphanedLogEntriesDelay = 'a';
        long long20 = recovery15.retryInterval;
        recovery15.setForgetOrphanedLogEntriesDelay((long) 0);
        java.lang.Object obj23 = properties0.replace((java.lang.Object) int14, (java.lang.Object) recovery15);
        recovery15.forgetOrphanedLogEntriesDelay = (byte) 0;
        long long26 = recovery15.getDelay();
        recovery15.setRetryInterval((long) ' ');
        recovery15.retryInterval = ' ';
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{}" + "'", str8, "{}");
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 100L + "'", long20 == 100L);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 10000L + "'", long26 == 10000L);
    }

    @Test
    public void test01126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01126");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileName = "hi!";
        atomikosProperties0.setCheckpointInterval((long) 5);
        atomikosProperties0.setConsoleFileCount(0);
        atomikosProperties0.setService("{-1.0=100}");
        atomikosProperties0.setDefaultJtaTimeout((long) 100);
        atomikosProperties0.setConsoleFileCount(18);
        atomikosProperties0.logBaseDir = "";
        long long19 = atomikosProperties0.maxTimeout;
        atomikosProperties0.setAllowSubTransactions(false);
        boolean boolean22 = atomikosProperties0.isEnableLogging();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 300000L + "'", long19 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test01127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01127");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration2 = properties1.elements();
        java.util.Properties properties3 = new java.util.Properties();
        java.lang.String str4 = properties3.toString();
        java.lang.Object obj6 = properties3.remove((java.lang.Object) (short) 100);
        java.lang.Object obj9 = properties3.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean11 = properties3.containsKey((java.lang.Object) 0L);
        java.lang.Object obj14 = properties3.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj17 = properties3.setProperty("", "{-1.0=100}");
        boolean boolean18 = properties3.isEmpty();
        java.util.Properties properties19 = new java.util.Properties();
        java.lang.String str20 = properties19.toString();
        java.util.Properties properties21 = new java.util.Properties(properties19);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet22 = properties21.entrySet();
        java.util.Properties properties24 = new java.util.Properties();
        java.lang.Object obj26 = properties24.remove((java.lang.Object) (-1.0d));
        int int27 = properties24.size();
        boolean boolean28 = properties3.replace((java.lang.Object) properties21, (java.lang.Object) 100L, (java.lang.Object) properties24);
        boolean boolean29 = properties3.isEmpty();
        java.util.Set<java.lang.Object> objSet30 = properties3.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties32 = atomikosProperties31.asProperties();
        atomikosProperties31.service = "{-1.0=100}";
        long long35 = atomikosProperties31.getDefaultJtaTimeout();
        long long36 = atomikosProperties31.getMaxTimeout();
        int int37 = atomikosProperties31.consoleFileCount;
        java.lang.String str38 = atomikosProperties31.getOutputDir();
        boolean boolean39 = properties1.remove((java.lang.Object) properties3, (java.lang.Object) atomikosProperties31);
        java.io.OutputStream outputStream40 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.store(outputStream40, "{-1.0=100}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEnumeration2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{}" + "'", str4, "{}");
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{}" + "'", str20, "{}");
        org.junit.Assert.assertNotNull(objEntrySet22);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(objSet30);
        org.junit.Assert.assertNotNull(properties32);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 10000L + "'", long35 == 10000L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 300000L + "'", long36 == 300000L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test01128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01128");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileName = "hi!";
        atomikosProperties0.serialJtaTransactions = true;
        atomikosProperties0.outputDir = "tm.out";
        boolean boolean11 = atomikosProperties0.isAllowSubTransactions();
        atomikosProperties0.consoleFileName = "";
        atomikosProperties0.transactionManagerUniqueName = "";
        int int16 = atomikosProperties0.consoleFileLimit;
        atomikosProperties0.setEnableLogging(true);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
    }

    @Test
    public void test01129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01129");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.remove((java.lang.Object) (-1.0d));
        boolean boolean3 = properties0.isEmpty();
        java.util.Properties properties4 = new java.util.Properties();
        java.lang.String str5 = properties4.toString();
        java.lang.Object obj7 = properties4.remove((java.lang.Object) (short) 100);
        java.lang.Object obj10 = properties4.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean12 = properties4.containsKey((java.lang.Object) 0L);
        java.lang.Object obj15 = properties4.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj18 = properties4.setProperty("", "{-1.0=100}");
        java.lang.Object obj19 = properties4.clone();
        java.lang.Object obj20 = properties0.get((java.lang.Object) properties4);
        java.lang.Object obj21 = properties4.clone();
        java.lang.String str22 = properties4.toString();
        java.lang.Object obj25 = properties4.setProperty("{1.0=-1, -1.0=100}", "{1.0=-1, -1.0=100}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery26 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery26.retryInterval = (short) 100;
        recovery26.delay = (-1L);
        long long31 = recovery26.delay;
        recovery26.delay = (short) 1;
        long long34 = recovery26.getRetryInterval();
        long long35 = recovery26.getForgetOrphanedLogEntriesDelay();
        recovery26.setMaxRetries(10);
        int int38 = recovery26.maxRetries;
        long long39 = recovery26.getDelay();
        recovery26.forgetOrphanedLogEntriesDelay = 500L;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery42 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery42.retryInterval = (short) 100;
        recovery42.delay = (-1L);
        long long47 = recovery42.delay;
        int int48 = recovery42.getMaxRetries();
        long long49 = recovery42.getForgetOrphanedLogEntriesDelay();
        boolean boolean50 = properties4.remove((java.lang.Object) 500L, (java.lang.Object) recovery42);
        recovery42.setRetryInterval((long) (byte) 1);
        recovery42.retryInterval = (short) 0;
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{}" + "'", str5, "{}");
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(obj19);
// flaky:         org.junit.Assert.assertEquals(obj19.toString(), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNotNull(obj21);
// flaky:         org.junit.Assert.assertEquals(obj21.toString(), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{={-1.0=100}, -1.0=100}" + "'", str22, "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 100L + "'", long34 == 100L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 86400000L + "'", long35 == 86400000L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10 + "'", int38 == 10);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1L + "'", long39 == 1L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-1L) + "'", long47 == (-1L));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 5 + "'", int48 == 5);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 86400000L + "'", long49 == 86400000L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test01130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01130");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.util.Properties properties4 = new java.util.Properties();
        java.lang.String str5 = properties4.toString();
        boolean boolean6 = properties4.isEmpty();
        java.lang.Object obj9 = properties4.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration10 = properties4.elements();
        boolean boolean11 = properties0.containsKey((java.lang.Object) properties4);
        java.util.Set<java.lang.String> strSet12 = properties0.stringPropertyNames();
        java.io.Writer writer13 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.store(writer13, "{com.atomikos.icatch.={}, 100=100}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{}" + "'", str5, "{}");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNotNull(objEnumeration10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strSet12);
    }

    @Test
    public void test01131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01131");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getLogBaseName();
        long long5 = atomikosProperties0.defaultJtaTimeout;
        long long6 = atomikosProperties0.getMaxTimeout();
        boolean boolean7 = atomikosProperties0.forceShutdownOnVmExit;
        java.util.Properties properties8 = atomikosProperties0.asProperties();
        atomikosProperties0.setService("{1.0=-1}");
        boolean boolean11 = atomikosProperties0.forceShutdownOnVmExit;
        java.util.Properties properties12 = new java.util.Properties();
        java.lang.String str13 = properties12.toString();
        java.lang.Object obj15 = properties12.remove((java.lang.Object) (short) 100);
        java.lang.Object obj18 = properties12.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        java.util.Properties properties19 = new java.util.Properties();
        java.lang.String str20 = properties19.toString();
        properties19.clear();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet22 = properties19.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties24 = atomikosProperties23.asProperties();
        atomikosProperties23.service = "{-1.0=100}";
        long long27 = atomikosProperties23.getDefaultJtaTimeout();
        atomikosProperties23.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties23.setMaxActives(100);
        java.lang.String str32 = atomikosProperties23.logBaseDir;
        atomikosProperties23.consoleFileCount = (short) 0;
        atomikosProperties23.defaultJtaTimeout = 10000L;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel37 = atomikosProperties23.consoleLogLevel;
        java.lang.Object obj38 = properties12.putIfAbsent((java.lang.Object) properties19, (java.lang.Object) atomikosLoggingLevel37);
        java.lang.String str39 = properties19.toString();
        java.lang.Object obj41 = null;
        atomikosProperties0.set(properties19, "{1.0=-1, -1.0=100}", obj41);
        java.io.OutputStream outputStream43 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties19.save(outputStream43, "{{-1.0=100}=}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tmlog" + "'", str4, "tmlog");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 10000L + "'", long5 == 10000L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 300000L + "'", long6 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{}" + "'", str13, "{}");
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{}" + "'", str20, "{}");
        org.junit.Assert.assertNotNull(objEntrySet22);
        org.junit.Assert.assertNotNull(properties24);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10000L + "'", long27 == 10000L);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel37 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel37.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "{}" + "'", str39, "{}");
    }

    @Test
    public void test01132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01132");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        atomikosProperties0.setConsoleFileCount((int) (byte) 100);
        atomikosProperties0.setAllowSubTransactions(true);
        atomikosProperties0.setService("tm.out");
        boolean boolean12 = atomikosProperties0.isForceShutdownOnVmExit();
        boolean boolean13 = atomikosProperties0.isAllowSubTransactions();
        atomikosProperties0.setLogBaseName("");
        boolean boolean16 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.setTransactionManagerUniqueName("{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}");
        java.util.Properties properties19 = new java.util.Properties();
        java.lang.String str20 = properties19.toString();
        java.lang.Object obj22 = properties19.remove((java.lang.Object) (short) 100);
        java.lang.Object obj25 = properties19.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean27 = properties19.containsKey((java.lang.Object) 0L);
        java.lang.Object obj30 = properties19.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj33 = properties19.setProperty("", "{-1.0=100}");
        java.lang.String str34 = properties19.toString();
        java.util.Set<java.lang.String> strSet35 = properties19.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties37 = atomikosProperties36.asProperties();
        atomikosProperties36.service = "{-1.0=100}";
        long long40 = atomikosProperties36.getDefaultJtaTimeout();
        atomikosProperties36.enableLogging = false;
        atomikosProperties36.setMaxTimeout((long) (byte) 0);
        atomikosProperties36.setAllowSubTransactions(true);
        java.util.Properties properties47 = new java.util.Properties();
        java.lang.Object obj49 = properties47.remove((java.lang.Object) (-1.0d));
        boolean boolean50 = properties47.isEmpty();
        java.util.Collection<java.lang.Object> objCollection51 = properties47.values();
        java.lang.Object obj52 = properties19.put((java.lang.Object) true, (java.lang.Object) properties47);
        java.util.Properties properties53 = new java.util.Properties(properties47);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties55 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean56 = atomikosProperties55.isSerialJtaTransactions();
        atomikosProperties55.logBaseName = "{-1.0=100}";
        int int59 = atomikosProperties55.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery60 = atomikosProperties55.getRecovery();
        atomikosProperties55.setConsoleFileCount((int) (byte) 100);
        java.lang.String str63 = atomikosProperties55.logBaseName;
        atomikosProperties55.setCheckpointInterval((long) 18);
        atomikosProperties0.set(properties47, "hi!", (java.lang.Object) atomikosProperties55);
        java.lang.String str69 = properties47.getProperty("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}", "{}");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{}" + "'", str20, "{}");
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNull(obj33);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "{={-1.0=100}, -1.0=100}" + "'", str34, "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertNotNull(properties37);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 10000L + "'", long40 == 10000L);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(objCollection51);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 50 + "'", int59 == 50);
        org.junit.Assert.assertNotNull(recovery60);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "{-1.0=100}" + "'", str63, "{-1.0=100}");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "{}" + "'", str69, "{}");
    }

    @Test
    public void test01133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01133");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties0.allowSubTransactions = true;
        atomikosProperties0.setEnableLogging(true);
        atomikosProperties0.logBaseName = "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}";
        atomikosProperties0.consoleFileName = "hi!";
    }

    @Test
    public void test01134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01134");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        int int7 = atomikosProperties0.maxActives;
        java.util.Properties properties8 = new java.util.Properties();
        java.lang.Object obj10 = properties8.remove((java.lang.Object) (-1.0d));
        java.util.Enumeration<?> wildcardEnumeration11 = properties8.propertyNames();
        java.util.Set<java.lang.Object> objSet12 = properties8.keySet();
        java.util.Set<java.lang.String> strSet13 = properties8.stringPropertyNames();
        java.util.Properties properties15 = new java.util.Properties();
        atomikosProperties0.set(properties8, "tm.out", (java.lang.Object) properties15);
        java.lang.String str19 = properties15.getProperty("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}", "{100=100}");
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNotNull(wildcardEnumeration11);
        org.junit.Assert.assertNotNull(objSet12);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "{100=100}" + "'", str19, "{100=100}");
    }

    @Test
    public void test01135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01135");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        long long7 = atomikosProperties0.maxTimeout;
        atomikosProperties0.setLogBaseDir("{-1.0=100}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.setAllowSubTransactions(true);
        atomikosProperties10.maxActives = (short) -1;
        atomikosProperties10.setService("tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties17.setAllowSubTransactions(true);
        boolean boolean20 = atomikosProperties17.enableLogging;
        boolean boolean21 = atomikosProperties17.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel22 = atomikosProperties17.consoleLogLevel;
        atomikosProperties10.setConsoleLogLevel(atomikosLoggingLevel22);
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel22;
        atomikosProperties0.setConsoleFileCount((int) (byte) 0);
        atomikosProperties0.setConsoleFileLimit((int) ' ');
        atomikosProperties0.service = "{1.0=-1}";
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel22 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel22.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
    }

    @Test
    public void test01136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01136");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj14 = properties0.setProperty("", "{-1.0=100}");
        java.lang.Object obj15 = properties0.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery16 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery16.retryInterval = (short) 100;
        recovery16.forgetOrphanedLogEntriesDelay = 'a';
        boolean boolean21 = properties0.equals((java.lang.Object) 'a');
        boolean boolean22 = properties0.isEmpty();
        java.util.Properties properties23 = new java.util.Properties();
        java.lang.String str24 = properties23.toString();
        java.lang.Object obj26 = properties23.remove((java.lang.Object) (short) 100);
        java.lang.Object obj29 = properties23.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        java.util.Properties properties31 = new java.util.Properties();
        java.lang.String str32 = properties31.toString();
        java.lang.Object obj34 = properties31.remove((java.lang.Object) (short) 100);
        java.lang.Object obj37 = properties31.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj38 = properties31.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration39 = properties31.elements();
        java.lang.Object obj40 = properties23.putIfAbsent((java.lang.Object) 10.0f, (java.lang.Object) objEnumeration39);
        java.util.Properties properties41 = new java.util.Properties();
        java.util.Enumeration<?> wildcardEnumeration42 = properties41.propertyNames();
        java.lang.Object obj43 = properties41.clone();
        java.util.Properties properties44 = new java.util.Properties();
        java.lang.String str45 = properties44.toString();
        boolean boolean46 = properties44.isEmpty();
        java.lang.Object obj49 = properties44.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration50 = properties44.elements();
        java.lang.Object obj51 = properties23.put(obj43, (java.lang.Object) objEnumeration50);
        properties23.clear();
        java.util.Properties properties53 = new java.util.Properties();
        java.util.Properties properties54 = new java.util.Properties();
        java.lang.Object obj56 = properties54.remove((java.lang.Object) (-1.0d));
        int int57 = properties54.size();
        java.util.Enumeration<java.lang.Object> objEnumeration58 = properties54.elements();
        java.util.Properties properties59 = new java.util.Properties();
        properties59.clear();
        java.lang.String str61 = properties59.toString();
        boolean boolean62 = properties23.replace((java.lang.Object) properties53, (java.lang.Object) properties54, (java.lang.Object) str61);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties63 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean64 = atomikosProperties63.isSerialJtaTransactions();
        atomikosProperties63.logBaseName = "{-1.0=100}";
        int int67 = atomikosProperties63.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery68 = atomikosProperties63.getRecovery();
        atomikosProperties63.setConsoleFileCount((int) (byte) 100);
        atomikosProperties63.setAllowSubTransactions(true);
        atomikosProperties63.setService("tm.out");
        boolean boolean75 = atomikosProperties63.isForceShutdownOnVmExit();
        java.util.Properties properties76 = new java.util.Properties();
        java.lang.String str77 = properties76.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties78 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties79 = atomikosProperties78.asProperties();
        atomikosProperties78.service = "{-1.0=100}";
        long long82 = atomikosProperties78.getDefaultJtaTimeout();
        atomikosProperties78.setThreadedTwoPhaseCommit(true);
        boolean boolean85 = atomikosProperties78.isEnableLogging();
        atomikosProperties78.defaultJtaTimeout = (byte) 10;
        boolean boolean88 = properties54.replace((java.lang.Object) boolean75, (java.lang.Object) properties76, (java.lang.Object) (byte) 10);
        boolean boolean89 = properties0.contains((java.lang.Object) properties76);
        java.util.Set<java.lang.String> strSet90 = properties76.stringPropertyNames();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(obj15);
// flaky:         org.junit.Assert.assertEquals(obj15.toString(), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "{}" + "'", str24, "{}");
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "{}" + "'", str32, "{}");
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertEquals(obj38.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration39);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNotNull(wildcardEnumeration42);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "{}");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "{}" + "'", str45, "{}");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertNotNull(objEnumeration50);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(objEnumeration58);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "{}" + "'", str61, "{}");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 50 + "'", int67 == 50);
        org.junit.Assert.assertNotNull(recovery68);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "{}" + "'", str77, "{}");
        org.junit.Assert.assertNotNull(properties79);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 10000L + "'", long82 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(strSet90);
    }

    @Test
    public void test01137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01137");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.util.Properties properties3 = new java.util.Properties();
        java.lang.String str4 = properties3.toString();
        java.lang.Object obj6 = properties3.remove((java.lang.Object) (short) 100);
        java.lang.Object obj9 = properties3.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean11 = properties3.containsKey((java.lang.Object) 0L);
        java.lang.Object obj14 = properties3.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj17 = properties3.setProperty("", "{-1.0=100}");
        java.util.Enumeration<java.lang.Object> objEnumeration18 = properties3.keys();
        java.util.Properties properties19 = new java.util.Properties();
        java.lang.String str20 = properties19.toString();
        boolean boolean21 = properties19.isEmpty();
        java.lang.Object obj24 = properties19.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration25 = properties19.elements();
        java.lang.Object obj26 = properties2.replace((java.lang.Object) objEnumeration18, (java.lang.Object) properties19);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties19.elements();
        java.util.Enumeration<java.lang.Object> objEnumeration28 = properties19.keys();
        java.lang.Object obj29 = properties19.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties31 = atomikosProperties30.asProperties();
        atomikosProperties30.service = "{-1.0=100}";
        long long34 = atomikosProperties30.getDefaultJtaTimeout();
        atomikosProperties30.serialJtaTransactions = true;
        long long37 = atomikosProperties30.maxTimeout;
        boolean boolean38 = atomikosProperties30.isThreadedTwoPhaseCommit();
        atomikosProperties30.setCheckpointInterval(1L);
        atomikosProperties30.setOutputDir("{}");
        atomikosProperties30.setLogBaseDir("");
        java.lang.String str45 = atomikosProperties30.getOutputDir();
        atomikosProperties30.setForceShutdownOnVmExit(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties48 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties49 = atomikosProperties48.asProperties();
        atomikosProperties48.service = "{-1.0=100}";
        java.lang.String str52 = atomikosProperties48.getTransactionManagerUniqueName();
        atomikosProperties48.consoleFileLimit = (byte) 10;
        java.lang.String str55 = atomikosProperties48.getTransactionManagerUniqueName();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery56 = atomikosProperties48.recovery;
        atomikosProperties48.setCheckpointInterval(100L);
        java.lang.Object obj59 = properties19.getOrDefault((java.lang.Object) false, (java.lang.Object) atomikosProperties48);
        java.io.OutputStream outputStream60 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties19.storeToXML(outputStream60, "{}", "{com.atomikos.icatch.={}, 100=100}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{}" + "'", str4, "{}");
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(objEnumeration18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{}" + "'", str20, "{}");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(objEnumeration25);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertNotNull(objEnumeration28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "{100=100}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "{100=100}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "{100=100}");
        org.junit.Assert.assertNotNull(properties31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 10000L + "'", long34 == 10000L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 300000L + "'", long37 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "{}" + "'", str45, "{}");
        org.junit.Assert.assertNotNull(properties49);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(recovery56);
        org.junit.Assert.assertNotNull(obj59);
    }

    @Test
    public void test01138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01138");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.outputDir = "{={-1.0=100}, -1.0=100}";
        long long7 = atomikosProperties0.getCheckpointInterval();
        boolean boolean8 = atomikosProperties0.isThreadedTwoPhaseCommit();
        java.lang.String str9 = atomikosProperties0.service;
        int int10 = atomikosProperties0.consoleFileCount;
        atomikosProperties0.logBaseName = "tm.out";
        java.lang.String str13 = atomikosProperties0.getService();
        atomikosProperties0.forceShutdownOnVmExit = false;
        atomikosProperties0.setEnableLogging(false);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{-1.0=100}" + "'", str9, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{-1.0=100}" + "'", str13, "{-1.0=100}");
    }

    @Test
    public void test01139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01139");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.enableLogging = false;
        atomikosProperties0.setMaxTimeout((long) (byte) 0);
        atomikosProperties0.setAllowSubTransactions(true);
        atomikosProperties0.setMaxTimeout((long) 2);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
    }

    @Test
    public void test01140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01140");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.retryInterval = (short) 100;
        recovery0.setForgetOrphanedLogEntriesDelay((long) 5);
        recovery0.setRetryInterval((long) (-1));
        recovery0.retryInterval = (byte) 100;
        long long9 = recovery0.getDelay();
        long long10 = recovery0.forgetOrphanedLogEntriesDelay;
        long long11 = recovery0.getRetryInterval();
        long long12 = recovery0.getForgetOrphanedLogEntriesDelay();
        long long13 = recovery0.getForgetOrphanedLogEntriesDelay();
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10000L + "'", long9 == 10000L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 5L + "'", long10 == 5L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 5L + "'", long12 == 5L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 5L + "'", long13 == 5L);
    }

    @Test
    public void test01141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01141");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.enableLogging = false;
        atomikosProperties0.setMaxActives((int) ' ');
        java.util.Properties properties9 = atomikosProperties0.asProperties();
        java.io.OutputStream outputStream10 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties9.storeToXML(outputStream10, "", "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertNotNull(properties9);
    }

    @Test
    public void test01142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01142");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet2 = properties1.entrySet();
        java.util.Properties properties3 = new java.util.Properties();
        java.lang.Object obj6 = properties3.setProperty("{}", "{}");
        java.util.Enumeration<java.lang.Object> objEnumeration7 = properties3.keys();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet8 = properties3.entrySet();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        atomikosProperties10.service = "{-1.0=100}";
        java.lang.String str14 = atomikosProperties10.getLogBaseName();
        long long15 = atomikosProperties10.defaultJtaTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel16 = null;
        atomikosProperties10.setConsoleLogLevel(atomikosLoggingLevel16);
        atomikosProperties10.setLogBaseDir("");
        java.util.Properties properties20 = atomikosProperties10.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties22 = atomikosProperties21.asProperties();
        atomikosProperties21.service = "{-1.0=100}";
        long long25 = atomikosProperties21.getDefaultJtaTimeout();
        long long26 = atomikosProperties21.getMaxTimeout();
        int int27 = atomikosProperties21.consoleFileCount;
        int int28 = atomikosProperties21.getMaxActives();
        atomikosProperties21.setAllowSubTransactions(true);
        boolean boolean31 = atomikosProperties21.serialJtaTransactions;
        java.lang.Object obj32 = properties20.remove((java.lang.Object) boolean31);
        boolean boolean33 = properties1.containsKey((java.lang.Object) boolean31);
        java.io.Reader reader34 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.load(reader34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEntrySet2);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(objEnumeration7);
        org.junit.Assert.assertNotNull(objEntrySet8);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "tmlog" + "'", str14, "tmlog");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10000L + "'", long15 == 10000L);
        org.junit.Assert.assertNotNull(properties20);
        org.junit.Assert.assertNotNull(properties22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 10000L + "'", long25 == 10000L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 300000L + "'", long26 == 300000L);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 50 + "'", int28 == 50);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test01143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01143");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileName = "hi!";
        atomikosProperties0.setCheckpointInterval((long) 5);
        atomikosProperties0.setService("");
        java.lang.String str11 = atomikosProperties0.outputDir;
        atomikosProperties0.logBaseName = "{{1.0=-1}=hi!}";
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test01144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01144");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel7 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel7);
        atomikosProperties0.setLogBaseName("{={-1.0=100}, -1.0=100}");
        boolean boolean11 = atomikosProperties0.enableLogging;
        atomikosProperties0.defaultJtaTimeout = 5L;
        atomikosProperties0.consoleFileName = "{{1.0=-1}=hi!}";
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test01145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01145");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.retryInterval = (short) 100;
        recovery0.forgetOrphanedLogEntriesDelay = 'a';
        long long5 = recovery0.getDelay();
        long long6 = recovery0.getRetryInterval();
        recovery0.setRetryInterval((long) 'a');
        recovery0.setForgetOrphanedLogEntriesDelay(10000L);
        recovery0.maxRetries = '#';
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 10000L + "'", long5 == 10000L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 100L + "'", long6 == 100L);
    }

    @Test
    public void test01146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01146");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj14 = properties0.setProperty("", "{-1.0=100}");
        java.lang.String str15 = properties0.toString();
        java.util.Set<java.lang.String> strSet16 = properties0.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties18 = atomikosProperties17.asProperties();
        atomikosProperties17.service = "{-1.0=100}";
        long long21 = atomikosProperties17.getDefaultJtaTimeout();
        atomikosProperties17.enableLogging = false;
        atomikosProperties17.setMaxTimeout((long) (byte) 0);
        atomikosProperties17.setAllowSubTransactions(true);
        java.util.Properties properties28 = new java.util.Properties();
        java.lang.Object obj30 = properties28.remove((java.lang.Object) (-1.0d));
        boolean boolean31 = properties28.isEmpty();
        java.util.Collection<java.lang.Object> objCollection32 = properties28.values();
        java.lang.Object obj33 = properties0.put((java.lang.Object) true, (java.lang.Object) properties28);
        java.util.Collection<java.lang.Object> objCollection34 = properties28.values();
        java.util.Properties properties35 = new java.util.Properties();
        java.lang.Object obj38 = properties35.setProperty("{}", "{}");
        java.util.Enumeration<java.lang.Object> objEnumeration39 = properties35.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration40 = properties35.elements();
        java.util.Properties properties41 = new java.util.Properties(properties35);
        java.util.Set<java.lang.Object> objSet42 = properties35.keySet();
        java.util.Set<java.lang.String> strSet43 = properties35.stringPropertyNames();
        java.lang.Object obj44 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean45 = properties28.remove((java.lang.Object) properties35, obj44);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{={-1.0=100}, -1.0=100}" + "'", str15, "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10000L + "'", long21 == 10000L);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objCollection32);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNotNull(objCollection34);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertNotNull(objEnumeration39);
        org.junit.Assert.assertNotNull(objEnumeration40);
        org.junit.Assert.assertNotNull(objSet42);
        org.junit.Assert.assertNotNull(strSet43);
    }

    @Test
    public void test01147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01147");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj1 = null;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        atomikosProperties2.service = "{-1.0=100}";
        long long6 = atomikosProperties2.getDefaultJtaTimeout();
        atomikosProperties2.setThreadedTwoPhaseCommit(true);
        boolean boolean9 = atomikosProperties2.isAllowSubTransactions();
        int int10 = atomikosProperties2.getConsoleFileLimit();
        boolean boolean11 = atomikosProperties2.forceShutdownOnVmExit;
        atomikosProperties2.setMaxTimeout(300000L);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery14 = atomikosProperties2.getRecovery();
        java.lang.String str15 = atomikosProperties2.consoleFileName;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery16 = atomikosProperties2.getRecovery();
        atomikosProperties2.setLogBaseDir("{}");
        atomikosProperties2.consoleFileName = "{1.0=-1, -1.0=100}";
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel21 = atomikosProperties2.consoleLogLevel;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj22 = properties0.put(obj1, (java.lang.Object) atomikosProperties2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(recovery14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "tm.out" + "'", str15, "tm.out");
        org.junit.Assert.assertNotNull(recovery16);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel21 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel21.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
    }

    @Test
    public void test01148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01148");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setEnableLogging(true);
        atomikosProperties0.setConsoleFileLimit((int) (short) 0);
        atomikosProperties0.outputDir = "tmlog";
        java.lang.String str7 = atomikosProperties0.getOutputDir();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties8.setEnableLogging(true);
        atomikosProperties8.consoleFileCount = 0;
        java.util.Properties properties13 = atomikosProperties8.asProperties();
        boolean boolean14 = atomikosProperties8.isEnableLogging();
        int int15 = atomikosProperties8.getMaxActives();
        java.util.Properties properties16 = new java.util.Properties();
        java.lang.Object obj18 = properties16.remove((java.lang.Object) (-1.0d));
        int int19 = properties16.size();
        java.util.Enumeration<java.lang.Object> objEnumeration20 = properties16.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties22.setAllowSubTransactions(true);
        boolean boolean25 = atomikosProperties22.isSerialJtaTransactions();
        atomikosProperties22.setConsoleFileCount(5);
        atomikosProperties8.set(properties16, "{}", (java.lang.Object) 5);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties30 = atomikosProperties29.asProperties();
        atomikosProperties29.service = "{-1.0=100}";
        long long33 = atomikosProperties29.getDefaultJtaTimeout();
        atomikosProperties29.outputDir = "{={-1.0=100}, -1.0=100}";
        long long36 = atomikosProperties29.getCheckpointInterval();
        boolean boolean37 = atomikosProperties29.isThreadedTwoPhaseCommit();
        java.lang.String str38 = atomikosProperties29.service;
        int int39 = atomikosProperties29.consoleFileCount;
        atomikosProperties29.logBaseName = "tm.out";
        java.lang.String str42 = atomikosProperties29.getService();
        atomikosProperties29.setCheckpointInterval(300000L);
        java.lang.Object obj45 = properties16.get((java.lang.Object) atomikosProperties29);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties47 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties48 = atomikosProperties47.asProperties();
        atomikosProperties47.service = "{-1.0=100}";
        java.lang.String str51 = atomikosProperties47.getTransactionManagerUniqueName();
        atomikosProperties47.consoleFileName = "hi!";
        atomikosProperties47.service = "tm.out";
        atomikosProperties47.logBaseName = "tm.out";
        atomikosProperties47.setThreadedTwoPhaseCommit(true);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel60 = atomikosProperties47.consoleLogLevel;
        atomikosProperties47.logBaseDir = "";
        atomikosProperties0.set(properties16, "{}", (java.lang.Object) "");
        java.io.InputStream inputStream64 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties16.loadFromXML(inputStream64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "tmlog" + "'", str7, "tmlog");
        org.junit.Assert.assertNotNull(properties13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 50 + "'", int15 == 50);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(objEnumeration20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(properties30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 10000L + "'", long33 == 10000L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 500L + "'", long36 == 500L);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "{-1.0=100}" + "'", str38, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "{-1.0=100}" + "'", str42, "{-1.0=100}");
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertNotNull(properties48);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel60 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel60.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
    }

    @Test
    public void test01149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01149");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        boolean boolean5 = properties0.containsKey((java.lang.Object) 0L);
        java.util.Properties properties6 = new java.util.Properties();
        java.lang.String str7 = properties6.toString();
        java.util.Properties properties8 = new java.util.Properties(properties6);
        java.util.Properties properties9 = new java.util.Properties();
        java.lang.String str10 = properties9.toString();
        java.lang.Object obj12 = properties9.remove((java.lang.Object) (short) 100);
        java.lang.Object obj15 = properties9.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean17 = properties9.containsKey((java.lang.Object) 0L);
        java.lang.Object obj20 = properties9.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj23 = properties9.setProperty("", "{-1.0=100}");
        java.util.Enumeration<java.lang.Object> objEnumeration24 = properties9.keys();
        java.util.Properties properties25 = new java.util.Properties();
        java.lang.String str26 = properties25.toString();
        boolean boolean27 = properties25.isEmpty();
        java.lang.Object obj30 = properties25.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration31 = properties25.elements();
        java.lang.Object obj32 = properties8.replace((java.lang.Object) objEnumeration24, (java.lang.Object) properties25);
        java.util.Enumeration<java.lang.Object> objEnumeration33 = properties25.elements();
        java.util.Properties properties34 = new java.util.Properties();
        java.lang.String str35 = properties34.toString();
        boolean boolean36 = properties34.isEmpty();
        java.lang.Object obj39 = properties34.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Properties properties40 = new java.util.Properties();
        java.lang.String str41 = properties40.toString();
        java.lang.Object obj43 = properties40.remove((java.lang.Object) (short) 100);
        java.lang.Object obj46 = properties40.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean48 = properties40.containsKey((java.lang.Object) 0L);
        java.lang.Object obj51 = properties40.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties52 = new java.util.Properties(properties40);
        boolean boolean53 = properties34.containsValue((java.lang.Object) properties40);
        java.util.Properties properties54 = new java.util.Properties();
        java.lang.String str55 = properties54.toString();
        java.lang.Object obj57 = properties54.remove((java.lang.Object) (short) 100);
        java.lang.Object obj60 = properties54.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean62 = properties54.containsKey((java.lang.Object) 0L);
        java.lang.Object obj65 = properties54.replace((java.lang.Object) false, (java.lang.Object) ' ');
        boolean boolean66 = properties54.isEmpty();
        boolean boolean67 = properties0.replace((java.lang.Object) properties25, (java.lang.Object) properties34, (java.lang.Object) properties54);
        java.util.Properties properties68 = new java.util.Properties(properties25);
        java.io.PrintStream printStream69 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties25.list(printStream69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "{}" + "'", str7, "{}");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "{}" + "'", str10, "{}");
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNotNull(objEnumeration24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "{}" + "'", str26, "{}");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNotNull(objEnumeration31);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNotNull(objEnumeration33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "{}" + "'", str35, "{}");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "{}" + "'", str41, "{}");
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "{}" + "'", str55, "{}");
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test01150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01150");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        int int7 = atomikosProperties0.maxActives;
        long long8 = atomikosProperties0.getDefaultJtaTimeout();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 10000L + "'", long8 == 10000L);
    }

    @Test
    public void test01151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01151");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        long long7 = atomikosProperties0.getDefaultJtaTimeout();
        long long8 = atomikosProperties0.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery9 = atomikosProperties0.getRecovery();
        java.lang.String str10 = atomikosProperties0.outputDir;
        int int11 = atomikosProperties0.consoleFileCount;
        atomikosProperties0.setAllowSubTransactions(false);
        java.lang.String str14 = atomikosProperties0.service;
        boolean boolean15 = atomikosProperties0.isEnableLogging();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(recovery9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "{-1.0=100}" + "'", str14, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test01152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01152");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setEnableLogging(true);
        atomikosProperties12.setConsoleFileLimit((int) (short) 0);
        boolean boolean17 = properties0.contains((java.lang.Object) atomikosProperties12);
        properties0.clear();
        java.util.Properties properties19 = new java.util.Properties();
        java.lang.String str20 = properties19.toString();
        java.lang.Object obj22 = properties19.remove((java.lang.Object) (short) 100);
        java.lang.Object obj25 = properties19.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj26 = properties19.clone();
        java.util.Set<java.lang.String> strSet27 = properties19.stringPropertyNames();
        java.util.Properties properties28 = new java.util.Properties();
        java.lang.String str29 = properties28.toString();
        java.lang.Object obj31 = properties28.remove((java.lang.Object) (short) 100);
        java.lang.Object obj34 = properties28.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean36 = properties28.containsKey((java.lang.Object) 0L);
        java.lang.Object obj39 = properties28.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties40 = new java.util.Properties();
        java.lang.String str41 = properties40.toString();
        java.lang.Object obj43 = properties40.remove((java.lang.Object) (short) 100);
        java.lang.Object obj46 = properties40.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj47 = properties40.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration48 = properties40.elements();
        properties28.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties40);
        java.util.Properties properties50 = new java.util.Properties();
        java.lang.String str51 = properties50.toString();
        java.lang.Object obj53 = properties50.remove((java.lang.Object) (short) 100);
        java.lang.Object obj56 = properties50.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean58 = properties50.containsKey((java.lang.Object) 0L);
        java.lang.Object obj61 = properties50.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties62 = new java.util.Properties();
        java.lang.String str63 = properties62.toString();
        java.lang.Object obj65 = properties62.remove((java.lang.Object) (short) 100);
        java.lang.Object obj68 = properties62.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj69 = properties62.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration70 = properties62.elements();
        properties50.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties62);
        java.lang.Object obj72 = properties19.putIfAbsent((java.lang.Object) properties28, (java.lang.Object) properties62);
        properties28.clear();
        java.lang.Object obj75 = properties0.put((java.lang.Object) properties28, (java.lang.Object) "tmlog");
        java.io.OutputStream outputStream76 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties28.store(outputStream76, "tm.out");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{}" + "'", str20, "{}");
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "{1.0=-1}");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "{}" + "'", str29, "{}");
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "{}" + "'", str41, "{}");
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertEquals(obj47.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj47), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj47), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration48);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "{}" + "'", str51, "{}");
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(obj61);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "{}" + "'", str63, "{}");
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertNull(obj68);
        org.junit.Assert.assertNotNull(obj69);
        org.junit.Assert.assertEquals(obj69.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj69), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj69), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration70);
        org.junit.Assert.assertNull(obj72);
        org.junit.Assert.assertNull(obj75);
    }

    @Test
    public void test01153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01153");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.util.Properties properties7 = new java.util.Properties();
        java.lang.String str8 = properties7.toString();
        java.lang.Object obj10 = properties7.remove((java.lang.Object) (short) 100);
        java.lang.Object obj13 = properties7.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        int int14 = properties7.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery15 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery15.retryInterval = (short) 100;
        recovery15.forgetOrphanedLogEntriesDelay = 'a';
        long long20 = recovery15.retryInterval;
        recovery15.setForgetOrphanedLogEntriesDelay((long) 0);
        java.lang.Object obj23 = properties0.replace((java.lang.Object) int14, (java.lang.Object) recovery15);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties25 = atomikosProperties24.asProperties();
        atomikosProperties24.service = "{-1.0=100}";
        long long28 = atomikosProperties24.getDefaultJtaTimeout();
        long long29 = atomikosProperties24.defaultJtaTimeout;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery30 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery30.retryInterval = (short) 100;
        recovery30.forgetOrphanedLogEntriesDelay = 'a';
        long long35 = recovery30.retryInterval;
        recovery30.forgetOrphanedLogEntriesDelay = 0L;
        long long38 = recovery30.getForgetOrphanedLogEntriesDelay();
        recovery30.setRetryInterval((long) 0);
        java.lang.Object obj41 = properties0.put((java.lang.Object) long29, (java.lang.Object) 0);
        java.io.Reader reader42 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.load(reader42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{}" + "'", str8, "{}");
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 100L + "'", long20 == 100L);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 10000L + "'", long28 == 10000L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 10000L + "'", long29 == 10000L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 100L + "'", long35 == 100L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNull(obj41);
    }

    @Test
    public void test01154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01154");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.outputDir = "{={-1.0=100}, -1.0=100}";
        long long7 = atomikosProperties0.getCheckpointInterval();
        boolean boolean8 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.setForceShutdownOnVmExit(true);
        java.lang.String str11 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.setMaxActives(50);
        atomikosProperties0.consoleFileLimit = (byte) 100;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test01155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01155");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        atomikosProperties0.setConsoleFileCount((int) (byte) 100);
        atomikosProperties0.setAllowSubTransactions(true);
        atomikosProperties0.setService("tm.out");
        atomikosProperties0.setSerialJtaTransactions(true);
        java.util.Properties properties14 = atomikosProperties0.asProperties();
        java.lang.String str15 = atomikosProperties0.logBaseName;
        long long16 = atomikosProperties0.defaultJtaTimeout;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{-1.0=100}" + "'", str15, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10000L + "'", long16 == 10000L);
    }

    @Test
    public void test01156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01156");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj14 = properties0.setProperty("", "{-1.0=100}");
        java.lang.Object obj15 = properties0.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery16 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery16.retryInterval = (short) 100;
        recovery16.forgetOrphanedLogEntriesDelay = 'a';
        boolean boolean21 = properties0.equals((java.lang.Object) 'a');
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery22 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery22.retryInterval = (short) 100;
        recovery22.forgetOrphanedLogEntriesDelay = 'a';
        long long27 = recovery22.getDelay();
        int int28 = recovery22.maxRetries;
        int int29 = recovery22.maxRetries;
        long long30 = recovery22.getRetryInterval();
        java.util.Properties properties31 = new java.util.Properties();
        java.util.Enumeration<?> wildcardEnumeration32 = properties31.propertyNames();
        java.lang.Object obj33 = properties0.put((java.lang.Object) long30, (java.lang.Object) wildcardEnumeration32);
        java.util.Properties properties34 = new java.util.Properties(properties0);
        java.lang.Object obj35 = properties0.clone();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(obj15);
// flaky:         org.junit.Assert.assertEquals(obj15.toString(), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10000L + "'", long27 == 10000L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5 + "'", int28 == 5);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5 + "'", int29 == 5);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 100L + "'", long30 == 100L);
        org.junit.Assert.assertNotNull(wildcardEnumeration32);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNotNull(obj35);
    }

    @Test
    public void test01157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01157");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        boolean boolean3 = properties0.containsValue((java.lang.Object) (-1L));
        java.lang.Object obj5 = properties0.get((java.lang.Object) 97L);
        properties0.clear();
        java.lang.String str8 = properties0.getProperty("{1.0=-1}");
        java.io.OutputStream outputStream9 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.store(outputStream9, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test01158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01158");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setEnableLogging(true);
        atomikosProperties0.consoleFileCount = 0;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties6 = atomikosProperties5.asProperties();
        atomikosProperties5.service = "{-1.0=100}";
        long long9 = atomikosProperties5.getDefaultJtaTimeout();
        boolean boolean10 = atomikosProperties5.enableLogging;
        boolean boolean11 = atomikosProperties5.isForceShutdownOnVmExit();
        atomikosProperties5.consoleFileLimit = (byte) -1;
        java.lang.String str14 = atomikosProperties5.getService();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel15 = atomikosProperties5.consoleLogLevel;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel15;
        boolean boolean17 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.consoleFileCount = 'a';
        boolean boolean20 = atomikosProperties0.threadedTwoPhaseCommit;
        atomikosProperties0.logBaseName = "{1.0=-1}";
        java.lang.String str23 = atomikosProperties0.getLogBaseDir();
        java.lang.String str24 = atomikosProperties0.getTransactionManagerUniqueName();
        org.junit.Assert.assertNotNull(properties6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10000L + "'", long9 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "{-1.0=100}" + "'", str14, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel15 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel15.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(str24);
    }

    @Test
    public void test01159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01159");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        atomikosProperties2.service = "{-1.0=100}";
        long long6 = atomikosProperties2.getDefaultJtaTimeout();
        atomikosProperties2.consoleFileLimit = '#';
        java.lang.Object obj9 = properties1.get((java.lang.Object) atomikosProperties2);
        boolean boolean10 = atomikosProperties2.forceShutdownOnVmExit;
        atomikosProperties2.setOutputDir("");
        long long13 = atomikosProperties2.defaultJtaTimeout;
        java.lang.String str14 = atomikosProperties2.getLogBaseName();
        atomikosProperties2.setEnableLogging(false);
        atomikosProperties2.consoleFileName = "{1.0=-1, -1.0=100}";
        atomikosProperties2.allowSubTransactions = true;
        atomikosProperties2.setMaxTimeout(0L);
        boolean boolean23 = atomikosProperties2.allowSubTransactions;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10000L + "'", long13 == 10000L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "tmlog" + "'", str14, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test01160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01160");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        boolean boolean2 = properties0.isEmpty();
        java.util.Properties properties3 = new java.util.Properties();
        java.lang.String str4 = properties3.toString();
        java.lang.Object obj6 = properties3.remove((java.lang.Object) (short) 100);
        java.lang.Object obj9 = properties3.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean11 = properties3.containsKey((java.lang.Object) 0L);
        java.lang.Object obj14 = properties3.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties15 = new java.util.Properties();
        java.lang.String str16 = properties15.toString();
        java.lang.Object obj18 = properties15.remove((java.lang.Object) (short) 100);
        java.lang.Object obj21 = properties15.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj22 = properties15.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration23 = properties15.elements();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties15);
        java.lang.Object obj25 = properties15.clone();
        properties15.clear();
        int int27 = properties15.size();
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties15);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties30 = atomikosProperties29.asProperties();
        atomikosProperties29.service = "{-1.0=100}";
        long long33 = atomikosProperties29.getDefaultJtaTimeout();
        atomikosProperties29.serialJtaTransactions = true;
        atomikosProperties29.maxActives = ' ';
        int int38 = atomikosProperties29.getConsoleFileCount();
        long long39 = atomikosProperties29.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties41 = atomikosProperties40.asProperties();
        atomikosProperties40.service = "{-1.0=100}";
        java.lang.String str44 = atomikosProperties40.getTransactionManagerUniqueName();
        boolean boolean45 = atomikosProperties40.isSerialJtaTransactions();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel46 = atomikosProperties40.getConsoleLogLevel();
        atomikosProperties29.setConsoleLogLevel(atomikosLoggingLevel46);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties48 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties48.setAllowSubTransactions(true);
        boolean boolean51 = atomikosProperties48.enableLogging;
        atomikosProperties48.consoleFileLimit = (byte) 100;
        java.util.Properties properties54 = new java.util.Properties();
        java.lang.String str55 = properties54.toString();
        java.util.Properties properties56 = new java.util.Properties(properties54);
        java.util.Properties properties58 = new java.util.Properties();
        java.lang.String str59 = properties58.toString();
        java.lang.Object obj61 = properties58.remove((java.lang.Object) (short) 100);
        java.lang.Object obj64 = properties58.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean66 = properties58.containsKey((java.lang.Object) 0L);
        java.lang.Object obj69 = properties58.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties70 = new java.util.Properties(properties58);
        java.util.Enumeration<java.lang.Object> objEnumeration71 = properties70.elements();
        atomikosProperties48.set(properties56, "{={-1.0=100}, -1.0=100}", (java.lang.Object) properties70);
        atomikosProperties48.setOutputDir("hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery75 = atomikosProperties48.getRecovery();
        long long76 = recovery75.getRetryInterval();
        java.lang.Object obj77 = properties0.replace((java.lang.Object) atomikosProperties29, (java.lang.Object) recovery75);
        java.util.Properties properties78 = new java.util.Properties();
        java.lang.String str79 = properties78.toString();
        boolean boolean80 = properties78.isEmpty();
        java.util.Properties properties81 = new java.util.Properties();
        java.lang.String str82 = properties81.toString();
        java.lang.Object obj84 = properties81.remove((java.lang.Object) (short) 100);
        java.lang.Object obj87 = properties81.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean89 = properties81.containsKey((java.lang.Object) 0L);
        boolean boolean90 = properties78.containsValue((java.lang.Object) 0L);
        java.util.Set<java.lang.String> strSet91 = properties78.stringPropertyNames();
        java.util.Set<java.lang.Object> objSet92 = properties78.keySet();
        boolean boolean93 = properties0.contains((java.lang.Object) properties78);
        java.io.OutputStream outputStream94 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.store(outputStream94, "tm.out");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{}" + "'", str4, "{}");
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{}" + "'", str16, "{}");
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration23);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "{1.0=-1}");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(properties30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 10000L + "'", long33 == 10000L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 10000L + "'", long39 == 10000L);
        org.junit.Assert.assertNotNull(properties41);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel46 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel46.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "{}" + "'", str55, "{}");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "{}" + "'", str59, "{}");
        org.junit.Assert.assertNull(obj61);
        org.junit.Assert.assertNull(obj64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(obj69);
        org.junit.Assert.assertNotNull(objEnumeration71);
        org.junit.Assert.assertNotNull(recovery75);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 10000L + "'", long76 == 10000L);
        org.junit.Assert.assertNull(obj77);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "{}" + "'", str79, "{}");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "{}" + "'", str82, "{}");
        org.junit.Assert.assertNull(obj84);
        org.junit.Assert.assertNull(obj87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(strSet91);
        org.junit.Assert.assertNotNull(objSet92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test01161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01161");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.util.Properties properties3 = new java.util.Properties();
        java.lang.String str4 = properties3.toString();
        java.lang.Object obj6 = properties3.remove((java.lang.Object) (short) 100);
        java.lang.Object obj9 = properties3.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean11 = properties3.containsKey((java.lang.Object) 0L);
        java.lang.Object obj14 = properties3.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj17 = properties3.setProperty("", "{-1.0=100}");
        java.util.Enumeration<java.lang.Object> objEnumeration18 = properties3.keys();
        java.util.Properties properties19 = new java.util.Properties();
        java.lang.String str20 = properties19.toString();
        boolean boolean21 = properties19.isEmpty();
        java.lang.Object obj24 = properties19.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration25 = properties19.elements();
        java.lang.Object obj26 = properties2.replace((java.lang.Object) objEnumeration18, (java.lang.Object) properties19);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties19.elements();
        java.util.Enumeration<java.lang.Object> objEnumeration28 = properties19.keys();
        java.lang.Object obj29 = properties19.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties31 = atomikosProperties30.asProperties();
        atomikosProperties30.service = "{-1.0=100}";
        long long34 = atomikosProperties30.getDefaultJtaTimeout();
        atomikosProperties30.setThreadedTwoPhaseCommit(true);
        boolean boolean37 = atomikosProperties30.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery38 = atomikosProperties30.recovery;
        atomikosProperties30.setLogBaseDir("");
        atomikosProperties30.setConsoleFileName("");
        atomikosProperties30.setTransactionManagerUniqueName("{100=100}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties45 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties45.setEnableLogging(true);
        atomikosProperties45.consoleFileCount = 0;
        atomikosProperties45.consoleFileCount = (byte) 0;
        atomikosProperties45.setDefaultJtaTimeout(0L);
        java.lang.Object obj54 = properties19.replace((java.lang.Object) atomikosProperties30, (java.lang.Object) 0L);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass55 = obj54.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{}" + "'", str4, "{}");
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(objEnumeration18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{}" + "'", str20, "{}");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(objEnumeration25);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertNotNull(objEnumeration28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "{100=100}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "{100=100}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "{100=100}");
        org.junit.Assert.assertNotNull(properties31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 10000L + "'", long34 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(recovery38);
        org.junit.Assert.assertNull(obj54);
    }

    @Test
    public void test01162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01162");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        boolean boolean7 = atomikosProperties0.isAllowSubTransactions();
        boolean boolean8 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.allowSubTransactions = false;
        atomikosProperties0.threadedTwoPhaseCommit = true;
        java.lang.String str13 = atomikosProperties0.getLogBaseDir();
        boolean boolean14 = atomikosProperties0.isThreadedTwoPhaseCommit();
        boolean boolean15 = atomikosProperties0.isSerialJtaTransactions();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test01163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01163");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        long long7 = atomikosProperties0.getDefaultJtaTimeout();
        long long8 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.setForceShutdownOnVmExit(true);
        java.util.Properties properties11 = atomikosProperties0.asProperties();
        java.io.OutputStream outputStream12 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties11.storeToXML(outputStream12, "tmlog", "{tmlog=hi!, com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(properties11);
    }

    @Test
    public void test01164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01164");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileLimit = (byte) 10;
        long long7 = atomikosProperties0.getMaxTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel8 = null;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel8;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.recovery;
        java.lang.String str11 = atomikosProperties0.getOutputDir();
        atomikosProperties0.setConsoleFileName("{1.0=-1, -1.0=100}");
        atomikosProperties0.setLogBaseName("{={-1.0=100}, -1.0=100}");
        atomikosProperties0.setDefaultJtaTimeout((long) (byte) 1);
        atomikosProperties0.setService("");
        atomikosProperties0.service = "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=32, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={-1.0=100}, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}";
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test01165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01165");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long1 = recovery0.getRetryInterval();
        long long2 = recovery0.getDelay();
        int int3 = recovery0.getMaxRetries();
        long long4 = recovery0.getDelay();
        recovery0.setMaxRetries(32);
        recovery0.retryInterval = 5L;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 10000L + "'", long1 == 10000L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10000L + "'", long2 == 10000L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 5 + "'", int3 == 5);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
    }

    @Test
    public void test01166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01166");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileName = "hi!";
        atomikosProperties0.setCheckpointInterval((long) 5);
        atomikosProperties0.setConsoleFileCount(0);
        atomikosProperties0.setService("{-1.0=100}");
        atomikosProperties0.setLogBaseDir("{-1.0=100}");
        long long15 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.maxTimeout = 10;
        long long18 = atomikosProperties0.getCheckpointInterval();
        long long19 = atomikosProperties0.maxTimeout;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10000L + "'", long15 == 10000L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 5L + "'", long18 == 5L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10L + "'", long19 == 10L);
    }

    @Test
    public void test01167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01167");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setTransactionManagerUniqueName("{}");
        atomikosProperties0.consoleFileName = "hi!";
        int int9 = atomikosProperties0.getConsoleFileLimit();
        boolean boolean10 = atomikosProperties0.isThreadedTwoPhaseCommit();
        boolean boolean11 = atomikosProperties0.allowSubTransactions;
        long long12 = atomikosProperties0.checkpointInterval;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 500L + "'", long12 == 500L);
    }

    @Test
    public void test01168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01168");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.util.Properties properties3 = new java.util.Properties();
        java.lang.String str4 = properties3.toString();
        java.lang.Object obj6 = properties3.remove((java.lang.Object) (short) 100);
        java.lang.Object obj9 = properties3.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean11 = properties3.containsKey((java.lang.Object) 0L);
        java.lang.Object obj14 = properties3.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj17 = properties3.setProperty("", "{-1.0=100}");
        java.util.Enumeration<java.lang.Object> objEnumeration18 = properties3.keys();
        java.util.Properties properties19 = new java.util.Properties();
        java.lang.String str20 = properties19.toString();
        boolean boolean21 = properties19.isEmpty();
        java.lang.Object obj24 = properties19.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration25 = properties19.elements();
        java.lang.Object obj26 = properties2.replace((java.lang.Object) objEnumeration18, (java.lang.Object) properties19);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties2.keys();
        java.lang.String str28 = properties2.toString();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet29 = properties2.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery30 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long31 = recovery30.forgetOrphanedLogEntriesDelay;
        long long32 = recovery30.forgetOrphanedLogEntriesDelay;
        long long33 = recovery30.getDelay();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties34 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties35 = atomikosProperties34.asProperties();
        atomikosProperties34.service = "{-1.0=100}";
        long long38 = atomikosProperties34.getDefaultJtaTimeout();
        long long39 = atomikosProperties34.getMaxTimeout();
        atomikosProperties34.threadedTwoPhaseCommit = true;
        atomikosProperties34.setSerialJtaTransactions(true);
        atomikosProperties34.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties34.logBaseDir = "{1.0=-1, -1.0=100}";
        boolean boolean48 = properties2.remove((java.lang.Object) recovery30, (java.lang.Object) "{1.0=-1, -1.0=100}");
        java.lang.Object obj49 = properties2.clone();
        java.util.Properties properties50 = new java.util.Properties();
        java.lang.String str51 = properties50.toString();
        java.lang.Object obj53 = properties50.remove((java.lang.Object) (short) 100);
        java.lang.Object obj56 = properties50.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean58 = properties50.containsKey((java.lang.Object) 0L);
        java.lang.Object obj61 = properties50.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties62 = new java.util.Properties();
        java.lang.String str63 = properties62.toString();
        java.lang.Object obj65 = properties62.remove((java.lang.Object) (short) 100);
        java.lang.Object obj68 = properties62.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj69 = properties62.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration70 = properties62.elements();
        properties50.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties62);
        boolean boolean73 = properties50.equals((java.lang.Object) 1.0f);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties74 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean75 = atomikosProperties74.isThreadedTwoPhaseCommit();
        long long76 = atomikosProperties74.getCheckpointInterval();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties77 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean78 = atomikosProperties77.isSerialJtaTransactions();
        atomikosProperties77.logBaseName = "{-1.0=100}";
        int int81 = atomikosProperties77.maxActives;
        int int82 = atomikosProperties77.getConsoleFileCount();
        boolean boolean83 = properties50.remove((java.lang.Object) atomikosProperties74, (java.lang.Object) atomikosProperties77);
        java.lang.Object obj84 = properties2.get((java.lang.Object) boolean83);
        java.io.PrintStream printStream85 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties2.list(printStream85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{}" + "'", str4, "{}");
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(objEnumeration18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{}" + "'", str20, "{}");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(objEnumeration25);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "{}" + "'", str28, "{}");
        org.junit.Assert.assertNotNull(objEntrySet29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 86400000L + "'", long31 == 86400000L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 86400000L + "'", long32 == 86400000L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 10000L + "'", long33 == 10000L);
        org.junit.Assert.assertNotNull(properties35);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 10000L + "'", long38 == 10000L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 300000L + "'", long39 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "{}");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "{}" + "'", str51, "{}");
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(obj61);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "{}" + "'", str63, "{}");
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertNull(obj68);
        org.junit.Assert.assertNotNull(obj69);
        org.junit.Assert.assertEquals(obj69.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj69), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj69), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration70);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 500L + "'", long76 == 500L);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 50 + "'", int81 == 50);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNull(obj84);
    }

    @Test
    public void test01169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01169");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileLimit = (byte) 10;
        java.lang.String str7 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.allowSubTransactions = true;
        atomikosProperties0.forceShutdownOnVmExit = false;
        atomikosProperties0.threadedTwoPhaseCommit = true;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test01170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01170");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        boolean boolean5 = properties0.containsKey((java.lang.Object) 0L);
        java.util.Properties properties6 = new java.util.Properties();
        java.lang.String str7 = properties6.toString();
        java.util.Properties properties8 = new java.util.Properties(properties6);
        java.util.Properties properties9 = new java.util.Properties();
        java.lang.String str10 = properties9.toString();
        java.lang.Object obj12 = properties9.remove((java.lang.Object) (short) 100);
        java.lang.Object obj15 = properties9.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean17 = properties9.containsKey((java.lang.Object) 0L);
        java.lang.Object obj20 = properties9.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj23 = properties9.setProperty("", "{-1.0=100}");
        java.util.Enumeration<java.lang.Object> objEnumeration24 = properties9.keys();
        java.util.Properties properties25 = new java.util.Properties();
        java.lang.String str26 = properties25.toString();
        boolean boolean27 = properties25.isEmpty();
        java.lang.Object obj30 = properties25.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration31 = properties25.elements();
        java.lang.Object obj32 = properties8.replace((java.lang.Object) objEnumeration24, (java.lang.Object) properties25);
        java.util.Enumeration<java.lang.Object> objEnumeration33 = properties25.elements();
        java.util.Properties properties34 = new java.util.Properties();
        java.lang.String str35 = properties34.toString();
        boolean boolean36 = properties34.isEmpty();
        java.lang.Object obj39 = properties34.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Properties properties40 = new java.util.Properties();
        java.lang.String str41 = properties40.toString();
        java.lang.Object obj43 = properties40.remove((java.lang.Object) (short) 100);
        java.lang.Object obj46 = properties40.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean48 = properties40.containsKey((java.lang.Object) 0L);
        java.lang.Object obj51 = properties40.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties52 = new java.util.Properties(properties40);
        boolean boolean53 = properties34.containsValue((java.lang.Object) properties40);
        java.util.Properties properties54 = new java.util.Properties();
        java.lang.String str55 = properties54.toString();
        java.lang.Object obj57 = properties54.remove((java.lang.Object) (short) 100);
        java.lang.Object obj60 = properties54.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean62 = properties54.containsKey((java.lang.Object) 0L);
        java.lang.Object obj65 = properties54.replace((java.lang.Object) false, (java.lang.Object) ' ');
        boolean boolean66 = properties54.isEmpty();
        boolean boolean67 = properties0.replace((java.lang.Object) properties25, (java.lang.Object) properties34, (java.lang.Object) properties54);
        java.util.Properties properties68 = new java.util.Properties(properties0);
        java.lang.Object obj69 = null;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties70 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties71 = atomikosProperties70.asProperties();
        atomikosProperties70.service = "{-1.0=100}";
        long long74 = atomikosProperties70.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel75 = null;
        atomikosProperties70.setConsoleLogLevel(atomikosLoggingLevel75);
        int int77 = atomikosProperties70.maxActives;
        atomikosProperties70.setLogBaseDir("{}");
        java.lang.String str80 = atomikosProperties70.logBaseDir;
        atomikosProperties70.logBaseDir = "hi!";
        java.lang.String str83 = atomikosProperties70.getConsoleFileName();
        atomikosProperties70.setEnableLogging(false);
        java.lang.String str86 = atomikosProperties70.consoleFileName;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj87 = properties68.put(obj69, (java.lang.Object) atomikosProperties70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "{}" + "'", str7, "{}");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "{}" + "'", str10, "{}");
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNotNull(objEnumeration24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "{}" + "'", str26, "{}");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNotNull(objEnumeration31);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNotNull(objEnumeration33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "{}" + "'", str35, "{}");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "{}" + "'", str41, "{}");
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "{}" + "'", str55, "{}");
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(properties71);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 10000L + "'", long74 == 10000L);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 50 + "'", int77 == 50);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "{}" + "'", str80, "{}");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "tm.out" + "'", str83, "tm.out");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "tm.out" + "'", str86, "tm.out");
    }

    @Test
    public void test01171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01171");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.remove((java.lang.Object) (-1.0d));
        boolean boolean3 = properties0.isEmpty();
        java.util.Properties properties4 = new java.util.Properties();
        java.lang.String str5 = properties4.toString();
        java.lang.Object obj7 = properties4.remove((java.lang.Object) (short) 100);
        java.lang.Object obj10 = properties4.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean12 = properties4.containsKey((java.lang.Object) 0L);
        java.lang.Object obj15 = properties4.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj18 = properties4.setProperty("", "{-1.0=100}");
        java.lang.Object obj19 = properties4.clone();
        java.lang.Object obj20 = properties0.get((java.lang.Object) properties4);
        java.lang.Object obj21 = properties4.clone();
        int int22 = properties4.size();
        java.lang.Object obj23 = properties4.clone();
        java.util.Properties properties24 = new java.util.Properties();
        java.lang.Object obj26 = properties24.remove((java.lang.Object) (-1.0d));
        boolean boolean28 = properties24.contains((java.lang.Object) "{-1.0=100}");
        java.util.Enumeration<?> wildcardEnumeration29 = properties24.propertyNames();
        java.lang.Object obj30 = properties24.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties32 = atomikosProperties31.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties34 = atomikosProperties33.asProperties();
        atomikosProperties33.service = "{-1.0=100}";
        long long37 = atomikosProperties33.getDefaultJtaTimeout();
        atomikosProperties33.consoleFileLimit = '#';
        java.lang.Object obj40 = properties32.get((java.lang.Object) atomikosProperties33);
        boolean boolean41 = atomikosProperties33.forceShutdownOnVmExit;
        atomikosProperties33.setOutputDir("");
        atomikosProperties33.setThreadedTwoPhaseCommit(false);
        boolean boolean46 = atomikosProperties33.isThreadedTwoPhaseCommit();
        java.lang.Object obj47 = properties4.putIfAbsent(obj30, (java.lang.Object) atomikosProperties33);
        long long48 = atomikosProperties33.maxTimeout;
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{}" + "'", str5, "{}");
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(obj19);
// flaky:         org.junit.Assert.assertEquals(obj19.toString(), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNotNull(obj21);
// flaky:         org.junit.Assert.assertEquals(obj21.toString(), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(obj23);
// flaky:         org.junit.Assert.assertEquals(obj23.toString(), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardEnumeration29);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "{}");
        org.junit.Assert.assertNotNull(properties32);
        org.junit.Assert.assertNotNull(properties34);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 10000L + "'", long37 == 10000L);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 300000L + "'", long48 == 300000L);
    }

    @Test
    public void test01172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01172");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        boolean boolean7 = atomikosProperties0.isAllowSubTransactions();
        boolean boolean8 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.allowSubTransactions = false;
        atomikosProperties0.threadedTwoPhaseCommit = true;
        atomikosProperties0.setLogBaseName("tm.out");
        atomikosProperties0.setConsoleFileLimit((int) ' ');
        boolean boolean17 = atomikosProperties0.isAllowSubTransactions();
        java.lang.String str18 = atomikosProperties0.service;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "{-1.0=100}" + "'", str18, "{-1.0=100}");
    }

    @Test
    public void test01173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01173");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileLimit = (byte) 10;
        long long7 = atomikosProperties0.maxTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel8 = atomikosProperties0.consoleLogLevel;
        atomikosProperties0.enableLogging = false;
        long long11 = atomikosProperties0.maxTimeout;
        long long12 = atomikosProperties0.maxTimeout;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel8 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel8.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 300000L + "'", long11 == 300000L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 300000L + "'", long12 == 300000L);
    }

    @Test
    public void test01174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01174");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Enumeration<?> wildcardEnumeration1 = properties0.propertyNames();
        java.lang.Object obj2 = properties0.clone();
        java.util.Collection<java.lang.Object> objCollection3 = properties0.values();
        java.util.Properties properties4 = new java.util.Properties();
        java.lang.String str5 = properties4.toString();
        java.lang.Object obj7 = properties4.remove((java.lang.Object) (short) 100);
        java.lang.Object obj10 = properties4.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj11 = properties4.clone();
        java.util.Set<java.lang.String> strSet12 = properties4.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery13 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery13.retryInterval = (short) 100;
        recovery13.delay = (-1L);
        long long18 = recovery13.delay;
        recovery13.delay = (short) 1;
        long long21 = recovery13.getRetryInterval();
        int int22 = recovery13.maxRetries;
        int int23 = recovery13.maxRetries;
        long long24 = recovery13.forgetOrphanedLogEntriesDelay;
        java.util.Properties properties25 = new java.util.Properties();
        java.lang.Object obj27 = properties25.remove((java.lang.Object) (-1.0d));
        boolean boolean28 = properties25.isEmpty();
        int int29 = properties25.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery30 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery30.retryInterval = (short) 100;
        recovery30.forgetOrphanedLogEntriesDelay = 'a';
        java.util.Properties properties35 = new java.util.Properties();
        java.lang.Object obj37 = properties35.remove((java.lang.Object) (-1.0d));
        boolean boolean38 = properties35.isEmpty();
        int int39 = properties35.size();
        java.lang.String str41 = properties35.getProperty("{}");
        boolean boolean42 = properties25.remove((java.lang.Object) recovery30, (java.lang.Object) properties35);
        java.lang.Object obj43 = properties4.putIfAbsent((java.lang.Object) long24, (java.lang.Object) properties25);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties25);
        java.util.Enumeration<java.lang.Object> objEnumeration45 = properties0.keys();
        java.io.Writer writer46 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.store(writer46, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardEnumeration1);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "{}");
        org.junit.Assert.assertNotNull(objCollection3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{}" + "'", str5, "{}");
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "{1.0=-1}");
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 100L + "'", long21 == 100L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 5 + "'", int22 == 5);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 5 + "'", int23 == 5);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 86400000L + "'", long24 == 86400000L);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNotNull(objEnumeration45);
    }

    @Test
    public void test01175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01175");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        atomikosProperties0.setConsoleFileCount((int) (byte) 100);
        atomikosProperties0.setAllowSubTransactions(true);
        atomikosProperties0.setService("tm.out");
        boolean boolean12 = atomikosProperties0.isForceShutdownOnVmExit();
        boolean boolean13 = atomikosProperties0.isAllowSubTransactions();
        atomikosProperties0.setLogBaseName("");
        boolean boolean16 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.setTransactionManagerUniqueName("{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}");
        java.util.Properties properties19 = new java.util.Properties();
        java.lang.String str20 = properties19.toString();
        java.lang.Object obj22 = properties19.remove((java.lang.Object) (short) 100);
        java.lang.Object obj25 = properties19.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean27 = properties19.containsKey((java.lang.Object) 0L);
        java.lang.Object obj30 = properties19.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj33 = properties19.setProperty("", "{-1.0=100}");
        java.lang.String str34 = properties19.toString();
        java.util.Set<java.lang.String> strSet35 = properties19.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties37 = atomikosProperties36.asProperties();
        atomikosProperties36.service = "{-1.0=100}";
        long long40 = atomikosProperties36.getDefaultJtaTimeout();
        atomikosProperties36.enableLogging = false;
        atomikosProperties36.setMaxTimeout((long) (byte) 0);
        atomikosProperties36.setAllowSubTransactions(true);
        java.util.Properties properties47 = new java.util.Properties();
        java.lang.Object obj49 = properties47.remove((java.lang.Object) (-1.0d));
        boolean boolean50 = properties47.isEmpty();
        java.util.Collection<java.lang.Object> objCollection51 = properties47.values();
        java.lang.Object obj52 = properties19.put((java.lang.Object) true, (java.lang.Object) properties47);
        java.util.Properties properties53 = new java.util.Properties(properties47);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties55 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean56 = atomikosProperties55.isSerialJtaTransactions();
        atomikosProperties55.logBaseName = "{-1.0=100}";
        int int59 = atomikosProperties55.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery60 = atomikosProperties55.getRecovery();
        atomikosProperties55.setConsoleFileCount((int) (byte) 100);
        java.lang.String str63 = atomikosProperties55.logBaseName;
        atomikosProperties55.setCheckpointInterval((long) 18);
        atomikosProperties0.set(properties47, "hi!", (java.lang.Object) atomikosProperties55);
        atomikosProperties55.logBaseName = "{100=100}";
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel69 = atomikosProperties55.getConsoleLogLevel();
        atomikosProperties55.setLogBaseDir("{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{}" + "'", str20, "{}");
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNull(obj33);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "{={-1.0=100}, -1.0=100}" + "'", str34, "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertNotNull(properties37);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 10000L + "'", long40 == 10000L);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(objCollection51);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 50 + "'", int59 == 50);
        org.junit.Assert.assertNotNull(recovery60);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "{-1.0=100}" + "'", str63, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel69 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel69.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
    }

    @Test
    public void test01176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01176");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery4 = atomikosProperties0.recovery;
        atomikosProperties0.enableLogging = true;
        int int7 = atomikosProperties0.getConsoleFileCount();
        boolean boolean8 = atomikosProperties0.isEnableLogging();
        long long9 = atomikosProperties0.checkpointInterval;
        long long10 = atomikosProperties0.defaultJtaTimeout;
        atomikosProperties0.threadedTwoPhaseCommit = false;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNotNull(recovery4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 500L + "'", long9 == 500L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
    }

    @Test
    public void test01177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01177");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.util.Properties properties7 = new java.util.Properties();
        java.lang.String str8 = properties7.toString();
        java.lang.Object obj10 = properties7.remove((java.lang.Object) (short) 100);
        java.lang.Object obj13 = properties7.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        int int14 = properties7.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery15 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery15.retryInterval = (short) 100;
        recovery15.forgetOrphanedLogEntriesDelay = 'a';
        long long20 = recovery15.retryInterval;
        recovery15.setForgetOrphanedLogEntriesDelay((long) 0);
        java.lang.Object obj23 = properties0.replace((java.lang.Object) int14, (java.lang.Object) recovery15);
        java.io.OutputStream outputStream24 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.save(outputStream24, "{{-1.0=100}=}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{}" + "'", str8, "{}");
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 100L + "'", long20 == 100L);
        org.junit.Assert.assertNull(obj23);
    }

    @Test
    public void test01178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01178");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getLogBaseName();
        long long5 = atomikosProperties0.defaultJtaTimeout;
        long long6 = atomikosProperties0.getMaxTimeout();
        boolean boolean7 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.setService("{-1.0=100}");
        atomikosProperties0.setOutputDir("{}");
        atomikosProperties0.setSerialJtaTransactions(true);
        atomikosProperties0.setCheckpointInterval((long) '#');
        java.lang.Class<?> wildcardClass16 = atomikosProperties0.getClass();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tmlog" + "'", str4, "tmlog");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 10000L + "'", long5 == 10000L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 300000L + "'", long6 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test01179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01179");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        atomikosProperties0.setTransactionManagerUniqueName("{-1.0=100}");
        boolean boolean9 = atomikosProperties0.enableLogging;
        atomikosProperties0.setAllowSubTransactions(true);
        atomikosProperties0.logBaseDir = "";
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test01180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01180");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        boolean boolean7 = atomikosProperties0.isAllowSubTransactions();
        boolean boolean8 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.allowSubTransactions = false;
        atomikosProperties0.threadedTwoPhaseCommit = true;
        java.lang.String str13 = atomikosProperties0.getLogBaseDir();
        long long14 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setForceShutdownOnVmExit(true);
        boolean boolean17 = atomikosProperties0.isThreadedTwoPhaseCommit();
        atomikosProperties0.setLogBaseName("{{}={}}");
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10000L + "'", long14 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test01181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01181");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        atomikosProperties0.setConsoleFileCount((int) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel8 = null;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel8;
        java.lang.String str10 = atomikosProperties0.logBaseDir;
        java.lang.String str11 = atomikosProperties0.consoleFileName;
        int int12 = atomikosProperties0.getConsoleFileCount();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties13.setAllowSubTransactions(true);
        boolean boolean16 = atomikosProperties13.enableLogging;
        boolean boolean17 = atomikosProperties13.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel18 = atomikosProperties13.consoleLogLevel;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel18);
        java.lang.String str20 = atomikosProperties0.getService();
        atomikosProperties0.consoleFileCount = 0;
        java.lang.String str23 = atomikosProperties0.service;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "tm.out" + "'", str11, "tm.out");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel18 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel18.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str23);
    }

    @Test
    public void test01182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01182");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.util.Properties properties4 = new java.util.Properties();
        java.lang.String str5 = properties4.toString();
        boolean boolean6 = properties4.isEmpty();
        java.lang.Object obj9 = properties4.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration10 = properties4.elements();
        boolean boolean11 = properties0.containsKey((java.lang.Object) properties4);
        java.lang.Object obj12 = properties0.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties13.setAllowSubTransactions(true);
        boolean boolean16 = atomikosProperties13.enableLogging;
        atomikosProperties13.consoleFileLimit = (byte) 100;
        java.util.Properties properties19 = new java.util.Properties();
        java.lang.String str20 = properties19.toString();
        java.util.Properties properties21 = new java.util.Properties(properties19);
        java.util.Properties properties23 = new java.util.Properties();
        java.lang.String str24 = properties23.toString();
        java.lang.Object obj26 = properties23.remove((java.lang.Object) (short) 100);
        java.lang.Object obj29 = properties23.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean31 = properties23.containsKey((java.lang.Object) 0L);
        java.lang.Object obj34 = properties23.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties35 = new java.util.Properties(properties23);
        java.util.Enumeration<java.lang.Object> objEnumeration36 = properties35.elements();
        atomikosProperties13.set(properties21, "{={-1.0=100}, -1.0=100}", (java.lang.Object) properties35);
        atomikosProperties13.setOutputDir("hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery40 = atomikosProperties13.getRecovery();
        atomikosProperties13.setOutputDir("{={-1.0=100}, -1.0=100}");
        java.lang.Object obj43 = properties0.get((java.lang.Object) "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{}" + "'", str5, "{}");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNotNull(objEnumeration10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "{}");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{}" + "'", str20, "{}");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "{}" + "'", str24, "{}");
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNotNull(objEnumeration36);
        org.junit.Assert.assertNotNull(recovery40);
        org.junit.Assert.assertNull(obj43);
    }

    @Test
    public void test01183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01183");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        atomikosProperties0.setTransactionManagerUniqueName("{-1.0=100}");
        atomikosProperties0.consoleFileCount = 0;
        long long11 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.consoleFileLimit = 100;
        java.lang.String str14 = atomikosProperties0.getOutputDir();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10000L + "'", long11 == 10000L);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test01184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01184");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties7.setEnableLogging(true);
        atomikosProperties7.consoleFileCount = 0;
        atomikosProperties7.setSerialJtaTransactions(false);
        java.lang.String str14 = atomikosProperties7.getOutputDir();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties16 = atomikosProperties15.asProperties();
        atomikosProperties15.service = "{-1.0=100}";
        long long19 = atomikosProperties15.getDefaultJtaTimeout();
        atomikosProperties15.serialJtaTransactions = true;
        long long22 = atomikosProperties15.getDefaultJtaTimeout();
        long long23 = atomikosProperties15.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery24 = atomikosProperties15.getRecovery();
        recovery24.setRetryInterval((long) (byte) 0);
        java.lang.Object obj27 = properties0.replace((java.lang.Object) atomikosProperties7, (java.lang.Object) (byte) 0);
        int int28 = properties0.size();
        java.util.Set<java.lang.Object> objSet29 = properties0.keySet();
        java.lang.String str30 = properties0.toString();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10000L + "'", long19 == 10000L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 10000L + "'", long22 == 10000L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 500L + "'", long23 == 500L);
        org.junit.Assert.assertNotNull(recovery24);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(objSet29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "{1.0=-1}" + "'", str30, "{1.0=-1}");
    }

    @Test
    public void test01185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01185");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj14 = properties0.setProperty("", "{-1.0=100}");
        java.lang.Object obj15 = properties0.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery16 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery16.retryInterval = (short) 100;
        recovery16.forgetOrphanedLogEntriesDelay = 'a';
        boolean boolean21 = properties0.equals((java.lang.Object) 'a');
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery22 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery22.retryInterval = (short) 100;
        recovery22.forgetOrphanedLogEntriesDelay = 'a';
        long long27 = recovery22.getDelay();
        int int28 = recovery22.maxRetries;
        int int29 = recovery22.maxRetries;
        long long30 = recovery22.getRetryInterval();
        java.util.Properties properties31 = new java.util.Properties();
        java.util.Enumeration<?> wildcardEnumeration32 = properties31.propertyNames();
        java.lang.Object obj33 = properties0.put((java.lang.Object) long30, (java.lang.Object) wildcardEnumeration32);
        java.util.Properties properties34 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties36 = atomikosProperties35.asProperties();
        atomikosProperties35.service = "{-1.0=100}";
        java.lang.String str39 = atomikosProperties35.getTransactionManagerUniqueName();
        int int40 = atomikosProperties35.getConsoleFileLimit();
        atomikosProperties35.forceShutdownOnVmExit = false;
        boolean boolean43 = properties34.contains((java.lang.Object) false);
        java.io.InputStream inputStream44 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties34.loadFromXML(inputStream44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(obj15);
// flaky:         org.junit.Assert.assertEquals(obj15.toString(), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10000L + "'", long27 == 10000L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5 + "'", int28 == 5);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5 + "'", int29 == 5);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 100L + "'", long30 == 100L);
        org.junit.Assert.assertNotNull(wildcardEnumeration32);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNotNull(properties36);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test01186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01186");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        atomikosProperties2.service = "{-1.0=100}";
        long long6 = atomikosProperties2.getDefaultJtaTimeout();
        atomikosProperties2.consoleFileLimit = '#';
        java.lang.Object obj9 = properties1.get((java.lang.Object) atomikosProperties2);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean11 = atomikosProperties10.isSerialJtaTransactions();
        atomikosProperties10.logBaseName = "{-1.0=100}";
        int int14 = atomikosProperties10.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery15 = atomikosProperties10.getRecovery();
        atomikosProperties10.setConsoleFileCount((int) (byte) 100);
        atomikosProperties10.setAllowSubTransactions(true);
        atomikosProperties10.setService("tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties22.setAllowSubTransactions(true);
        atomikosProperties22.maxActives = (short) -1;
        atomikosProperties22.setService("tm.out");
        int int29 = atomikosProperties22.maxActives;
        atomikosProperties22.logBaseDir = "tmlog";
        boolean boolean32 = atomikosProperties22.allowSubTransactions;
        java.util.Properties properties33 = new java.util.Properties();
        java.lang.String str34 = properties33.toString();
        java.util.Properties properties35 = new java.util.Properties(properties33);
        boolean boolean36 = properties1.replace((java.lang.Object) "tm.out", (java.lang.Object) atomikosProperties22, (java.lang.Object) properties33);
        java.util.Properties properties37 = new java.util.Properties(properties1);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 50 + "'", int14 == 50);
        org.junit.Assert.assertNotNull(recovery15);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "{}" + "'", str34, "{}");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test01187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01187");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setTransactionManagerUniqueName("{}");
        atomikosProperties0.consoleFileName = "hi!";
        atomikosProperties0.setSerialJtaTransactions(false);
        atomikosProperties0.setSerialJtaTransactions(false);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
    }

    @Test
    public void test01188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01188");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj14 = properties0.setProperty("", "{-1.0=100}");
        boolean boolean15 = properties0.isEmpty();
        java.util.Properties properties16 = new java.util.Properties();
        java.lang.String str17 = properties16.toString();
        java.util.Properties properties18 = new java.util.Properties(properties16);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet19 = properties18.entrySet();
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.Object obj23 = properties21.remove((java.lang.Object) (-1.0d));
        int int24 = properties21.size();
        boolean boolean25 = properties0.replace((java.lang.Object) properties18, (java.lang.Object) 100L, (java.lang.Object) properties21);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties27 = atomikosProperties26.asProperties();
        atomikosProperties26.service = "{-1.0=100}";
        long long30 = atomikosProperties26.getDefaultJtaTimeout();
        atomikosProperties26.setThreadedTwoPhaseCommit(true);
        boolean boolean33 = atomikosProperties26.isAllowSubTransactions();
        boolean boolean34 = atomikosProperties26.isEnableLogging();
        atomikosProperties26.allowSubTransactions = false;
        atomikosProperties26.threadedTwoPhaseCommit = true;
        atomikosProperties26.setLogBaseName("tm.out");
        java.lang.String str41 = atomikosProperties26.getLogBaseDir();
        java.lang.String str42 = atomikosProperties26.outputDir;
        java.lang.Object obj43 = properties18.get((java.lang.Object) atomikosProperties26);
        java.lang.String str44 = atomikosProperties26.outputDir;
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "{}" + "'", str17, "{}");
        org.junit.Assert.assertNotNull(objEntrySet19);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(properties27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 10000L + "'", long30 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNull(str44);
    }

    @Test
    public void test01189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01189");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        atomikosProperties0.setConsoleFileCount((int) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel8 = null;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel8;
        java.lang.String str10 = atomikosProperties0.logBaseDir;
        java.lang.String str11 = atomikosProperties0.consoleFileName;
        int int12 = atomikosProperties0.getConsoleFileCount();
        atomikosProperties0.setConsoleFileCount((int) (short) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties16 = atomikosProperties15.asProperties();
        atomikosProperties15.service = "{-1.0=100}";
        long long19 = atomikosProperties15.getDefaultJtaTimeout();
        atomikosProperties15.serialJtaTransactions = true;
        atomikosProperties15.maxActives = ' ';
        int int24 = atomikosProperties15.getConsoleFileCount();
        long long25 = atomikosProperties15.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties27 = atomikosProperties26.asProperties();
        atomikosProperties26.service = "{-1.0=100}";
        java.lang.String str30 = atomikosProperties26.getTransactionManagerUniqueName();
        boolean boolean31 = atomikosProperties26.isSerialJtaTransactions();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel32 = atomikosProperties26.getConsoleLogLevel();
        atomikosProperties15.setConsoleLogLevel(atomikosLoggingLevel32);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel34 = atomikosProperties15.getConsoleLogLevel();
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel34;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "tm.out" + "'", str11, "tm.out");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10000L + "'", long19 == 10000L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 10000L + "'", long25 == 10000L);
        org.junit.Assert.assertNotNull(properties27);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel32 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel32.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel34 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel34.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
    }

    @Test
    public void test01190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01190");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileName = "hi!";
        atomikosProperties0.setCheckpointInterval((long) 5);
        atomikosProperties0.setConsoleFileCount(0);
        atomikosProperties0.setService("{-1.0=100}");
        atomikosProperties0.setDefaultJtaTimeout((long) 100);
        atomikosProperties0.setConsoleFileCount(18);
        atomikosProperties0.maxTimeout = 0;
        atomikosProperties0.consoleFileLimit = 'a';
        atomikosProperties0.transactionManagerUniqueName = "tmlog";
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test01191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01191");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        int int7 = atomikosProperties0.maxActives;
        atomikosProperties0.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.getRecovery();
        atomikosProperties0.consoleFileName = "{-1.0=100}";
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel13 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel13);
        atomikosProperties0.setThreadedTwoPhaseCommit(false);
        java.lang.String str17 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.setLogBaseName("tmlog");
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test01192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01192");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj14 = properties0.setProperty("", "{-1.0=100}");
        java.lang.Object obj15 = properties0.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery16 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery16.retryInterval = (short) 100;
        recovery16.forgetOrphanedLogEntriesDelay = 'a';
        boolean boolean21 = properties0.equals((java.lang.Object) 'a');
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery22 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery22.retryInterval = (short) 100;
        recovery22.forgetOrphanedLogEntriesDelay = 'a';
        long long27 = recovery22.getDelay();
        int int28 = recovery22.maxRetries;
        int int29 = recovery22.maxRetries;
        long long30 = recovery22.getRetryInterval();
        java.util.Properties properties31 = new java.util.Properties();
        java.util.Enumeration<?> wildcardEnumeration32 = properties31.propertyNames();
        java.lang.Object obj33 = properties0.put((java.lang.Object) long30, (java.lang.Object) wildcardEnumeration32);
        java.lang.String str35 = properties0.getProperty("hi!");
        java.lang.Object obj38 = properties0.setProperty("{1.0=-1}", "{1.0=-1}");
        java.io.PrintWriter printWriter39 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.list(printWriter39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(obj15);
// flaky:         org.junit.Assert.assertEquals(obj15.toString(), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10000L + "'", long27 == 10000L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5 + "'", int28 == 5);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5 + "'", int29 == 5);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 100L + "'", long30 == 100L);
        org.junit.Assert.assertNotNull(wildcardEnumeration32);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(obj38);
    }

    @Test
    public void test01193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01193");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj14 = properties0.setProperty("", "{-1.0=100}");
        java.lang.String str15 = properties0.toString();
        java.util.Set<java.lang.String> strSet16 = properties0.stringPropertyNames();
        java.util.Properties properties17 = new java.util.Properties(properties0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Enumeration<?> wildcardEnumeration18 = properties0.propertyNames();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.Double cannot be cast to java.lang.String");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{={-1.0=100}, -1.0=100}" + "'", str15, "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNotNull(strSet16);
    }

    @Test
    public void test01194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01194");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getLogBaseName();
        java.lang.String str5 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.consoleFileName = "";
        atomikosProperties0.forceShutdownOnVmExit = false;
        boolean boolean10 = atomikosProperties0.enableLogging;
        atomikosProperties0.transactionManagerUniqueName = "{={-1.0=100}, -1.0=100}";
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tmlog" + "'", str4, "tmlog");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test01195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01195");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        atomikosProperties0.setTransactionManagerUniqueName("{-1.0=100}");
        long long9 = atomikosProperties0.getDefaultJtaTimeout();
        long long10 = atomikosProperties0.maxTimeout;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10000L + "'", long9 == 10000L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 300000L + "'", long10 == 300000L);
    }

    @Test
    public void test01196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01196");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj14 = properties0.setProperty("", "{-1.0=100}");
        java.lang.Object obj15 = properties0.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery16 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery16.retryInterval = (short) 100;
        recovery16.forgetOrphanedLogEntriesDelay = 'a';
        boolean boolean21 = properties0.equals((java.lang.Object) 'a');
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery22 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery22.retryInterval = (short) 100;
        recovery22.forgetOrphanedLogEntriesDelay = 'a';
        long long27 = recovery22.getDelay();
        int int28 = recovery22.maxRetries;
        int int29 = recovery22.maxRetries;
        long long30 = recovery22.getRetryInterval();
        java.util.Properties properties31 = new java.util.Properties();
        java.util.Enumeration<?> wildcardEnumeration32 = properties31.propertyNames();
        java.lang.Object obj33 = properties0.put((java.lang.Object) long30, (java.lang.Object) wildcardEnumeration32);
        java.util.Enumeration<java.lang.Object> objEnumeration34 = properties0.elements();
        java.lang.String str37 = properties0.getProperty("{{}={}}", "{{}={}}");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(obj15);
// flaky:         org.junit.Assert.assertEquals(obj15.toString(), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10000L + "'", long27 == 10000L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5 + "'", int28 == 5);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5 + "'", int29 == 5);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 100L + "'", long30 == 100L);
        org.junit.Assert.assertNotNull(wildcardEnumeration32);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNotNull(objEnumeration34);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "{{}={}}" + "'", str37, "{{}={}}");
    }

    @Test
    public void test01197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01197");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        properties0.clear();
        java.lang.Object obj4 = properties0.get((java.lang.Object) "{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long6 = recovery5.getRetryInterval();
        long long7 = recovery5.getDelay();
        long long8 = recovery5.getDelay();
        recovery5.setForgetOrphanedLogEntriesDelay(10000L);
        recovery5.retryInterval = '4';
        recovery5.setRetryInterval((long) (short) 0);
        recovery5.setMaxRetries(0);
        java.lang.Object obj17 = properties0.get((java.lang.Object) 0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties19 = atomikosProperties18.asProperties();
        atomikosProperties18.service = "{-1.0=100}";
        long long22 = atomikosProperties18.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel23 = null;
        atomikosProperties18.setConsoleLogLevel(atomikosLoggingLevel23);
        int int25 = atomikosProperties18.maxActives;
        atomikosProperties18.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery28 = atomikosProperties18.getRecovery();
        atomikosProperties18.outputDir = "hi!";
        java.lang.String str31 = atomikosProperties18.getService();
        boolean boolean32 = properties0.equals((java.lang.Object) atomikosProperties18);
        java.lang.String str35 = properties0.getProperty("", "");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 10000L + "'", long8 == 10000L);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(properties19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 10000L + "'", long22 == 10000L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 50 + "'", int25 == 50);
        org.junit.Assert.assertNotNull(recovery28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "{-1.0=100}" + "'", str31, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
    }

    @Test
    public void test01198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01198");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        atomikosProperties2.service = "{-1.0=100}";
        long long6 = atomikosProperties2.getDefaultJtaTimeout();
        atomikosProperties2.consoleFileLimit = '#';
        java.lang.Object obj9 = properties1.get((java.lang.Object) atomikosProperties2);
        boolean boolean10 = atomikosProperties2.forceShutdownOnVmExit;
        atomikosProperties2.setOutputDir("");
        long long13 = atomikosProperties2.defaultJtaTimeout;
        java.lang.String str14 = atomikosProperties2.getLogBaseName();
        java.lang.String str15 = atomikosProperties2.logBaseName;
        atomikosProperties2.setConsoleFileLimit((int) (short) 1);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel18 = atomikosProperties2.getConsoleLogLevel();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel19 = atomikosProperties2.consoleLogLevel;
        java.lang.String str20 = atomikosProperties2.service;
        java.lang.String str21 = atomikosProperties2.consoleFileName;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10000L + "'", long13 == 10000L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "tmlog" + "'", str14, "tmlog");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "tmlog" + "'", str15, "tmlog");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel18 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel18.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel19 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel19.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{-1.0=100}" + "'", str20, "{-1.0=100}");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "tm.out" + "'", str21, "tm.out");
    }

    @Test
    public void test01199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01199");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getLogBaseName();
        long long5 = atomikosProperties0.defaultJtaTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel6 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel6);
        atomikosProperties0.threadedTwoPhaseCommit = false;
        atomikosProperties0.setConsoleFileLimit((int) (byte) 10);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery12 = atomikosProperties0.getRecovery();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tmlog" + "'", str4, "tmlog");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 10000L + "'", long5 == 10000L);
        org.junit.Assert.assertNotNull(recovery12);
    }

    @Test
    public void test01200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01200");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.retryInterval = (short) 100;
        recovery0.delay = (-1L);
        long long5 = recovery0.delay;
        recovery0.maxRetries = 0;
        long long8 = recovery0.forgetOrphanedLogEntriesDelay;
        long long9 = recovery0.getDelay();
        long long10 = recovery0.getDelay();
        long long11 = recovery0.getRetryInterval();
        int int12 = recovery0.maxRetries;
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 86400000L + "'", long8 == 86400000L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test01201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01201");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setAllowSubTransactions(true);
        boolean boolean3 = atomikosProperties0.enableLogging;
        atomikosProperties0.consoleFileLimit = (byte) 100;
        java.util.Properties properties6 = new java.util.Properties();
        java.lang.String str7 = properties6.toString();
        java.util.Properties properties8 = new java.util.Properties(properties6);
        java.util.Properties properties10 = new java.util.Properties();
        java.lang.String str11 = properties10.toString();
        java.lang.Object obj13 = properties10.remove((java.lang.Object) (short) 100);
        java.lang.Object obj16 = properties10.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean18 = properties10.containsKey((java.lang.Object) 0L);
        java.lang.Object obj21 = properties10.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties22 = new java.util.Properties(properties10);
        java.util.Enumeration<java.lang.Object> objEnumeration23 = properties22.elements();
        atomikosProperties0.set(properties8, "{={-1.0=100}, -1.0=100}", (java.lang.Object) properties22);
        int int25 = properties8.size();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet26 = properties8.entrySet();
        java.util.Collection<java.lang.Object> objCollection27 = properties8.values();
        java.io.InputStream inputStream28 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties8.loadFromXML(inputStream28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "{}" + "'", str7, "{}");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "{}" + "'", str11, "{}");
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNotNull(objEnumeration23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(objEntrySet26);
        org.junit.Assert.assertNotNull(objCollection27);
    }

    @Test
    public void test01202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01202");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        boolean boolean12 = properties0.isEmpty();
        boolean boolean13 = properties0.isEmpty();
        java.lang.String str14 = properties0.toString();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "{-1.0=100}" + "'", str14, "{-1.0=100}");
    }

    @Test
    public void test01203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01203");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        java.util.Properties properties2 = new java.util.Properties();
        java.lang.Object obj4 = properties2.remove((java.lang.Object) (-1.0d));
        boolean boolean5 = properties2.isEmpty();
        int int6 = properties2.size();
        java.lang.String str8 = properties2.getProperty("{}");
        java.lang.Object obj9 = properties1.remove((java.lang.Object) properties2);
        java.util.Properties properties10 = new java.util.Properties();
        java.util.Properties properties11 = new java.util.Properties();
        java.lang.String str12 = properties11.toString();
        boolean boolean13 = properties11.isEmpty();
        java.util.Properties properties14 = new java.util.Properties();
        java.lang.String str15 = properties14.toString();
        java.lang.Object obj17 = properties14.remove((java.lang.Object) (short) 100);
        java.lang.Object obj20 = properties14.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean22 = properties14.containsKey((java.lang.Object) 0L);
        boolean boolean23 = properties11.containsValue((java.lang.Object) 0L);
        boolean boolean26 = properties10.replace((java.lang.Object) 0L, (java.lang.Object) 0.0f, (java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties10.elements();
        java.lang.String str28 = properties10.toString();
        java.util.Enumeration<java.lang.Object> objEnumeration29 = properties10.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties31 = atomikosProperties30.asProperties();
        boolean boolean32 = properties1.remove((java.lang.Object) properties10, (java.lang.Object) properties31);
        java.util.Properties properties33 = new java.util.Properties();
        java.lang.Object obj35 = properties33.remove((java.lang.Object) (-1.0d));
        boolean boolean37 = properties33.contains((java.lang.Object) "{-1.0=100}");
        java.util.Enumeration<java.lang.Object> objEnumeration38 = properties33.keys();
        java.util.Properties properties39 = new java.util.Properties(properties33);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties41 = atomikosProperties40.asProperties();
        atomikosProperties40.service = "{-1.0=100}";
        java.lang.String str44 = atomikosProperties40.getTransactionManagerUniqueName();
        atomikosProperties40.consoleFileName = "hi!";
        atomikosProperties40.serialJtaTransactions = true;
        atomikosProperties40.outputDir = "tm.out";
        boolean boolean51 = atomikosProperties40.isAllowSubTransactions();
        atomikosProperties40.consoleFileName = "";
        java.lang.Object obj54 = properties31.replace((java.lang.Object) properties39, (java.lang.Object) "");
        java.io.Writer writer55 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties31.store(writer55, "{{={-1.0=100}, -1.0=100}=}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "{}" + "'", str12, "{}");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{}" + "'", str15, "{}");
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "{}" + "'", str28, "{}");
        org.junit.Assert.assertNotNull(objEnumeration29);
        org.junit.Assert.assertNotNull(properties31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(objEnumeration38);
        org.junit.Assert.assertNotNull(properties41);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNull(obj54);
    }

    @Test
    public void test01204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01204");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        atomikosProperties0.setTransactionManagerUniqueName("{-1.0=100}");
        atomikosProperties0.consoleFileCount = 0;
        long long11 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.consoleFileLimit = 100;
        boolean boolean14 = atomikosProperties0.allowSubTransactions;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery15 = atomikosProperties0.getRecovery();
        long long16 = recovery15.forgetOrphanedLogEntriesDelay;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10000L + "'", long11 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(recovery15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 86400000L + "'", long16 == 86400000L);
    }

    @Test
    public void test01205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01205");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        int int7 = atomikosProperties0.maxActives;
        atomikosProperties0.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.getRecovery();
        atomikosProperties0.forceShutdownOnVmExit = false;
        java.util.Properties properties13 = atomikosProperties0.asProperties();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet14 = properties13.entrySet();
        java.util.Properties properties15 = new java.util.Properties();
        properties15.clear();
        java.lang.String str17 = properties15.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery18 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery18.retryInterval = (short) 100;
        recovery18.setForgetOrphanedLogEntriesDelay((long) 5);
        recovery18.setRetryInterval((long) (-1));
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery25 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery25.retryInterval = (short) 100;
        recovery25.forgetOrphanedLogEntriesDelay = 'a';
        long long30 = recovery25.retryInterval;
        recovery25.forgetOrphanedLogEntriesDelay = 0L;
        java.lang.Object obj33 = properties15.put((java.lang.Object) (-1), (java.lang.Object) recovery25);
        boolean boolean34 = properties15.isEmpty();
        java.util.Properties properties35 = new java.util.Properties();
        java.util.Properties properties36 = new java.util.Properties();
        java.lang.String str37 = properties36.toString();
        boolean boolean38 = properties36.isEmpty();
        java.util.Properties properties39 = new java.util.Properties();
        java.lang.String str40 = properties39.toString();
        java.lang.Object obj42 = properties39.remove((java.lang.Object) (short) 100);
        java.lang.Object obj45 = properties39.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean47 = properties39.containsKey((java.lang.Object) 0L);
        boolean boolean48 = properties36.containsValue((java.lang.Object) 0L);
        boolean boolean51 = properties35.replace((java.lang.Object) 0L, (java.lang.Object) 0.0f, (java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration52 = properties35.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties53 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties54 = atomikosProperties53.asProperties();
        atomikosProperties53.service = "{-1.0=100}";
        java.lang.String str57 = atomikosProperties53.getTransactionManagerUniqueName();
        boolean boolean58 = atomikosProperties53.isSerialJtaTransactions();
        java.lang.String str59 = atomikosProperties53.logBaseName;
        boolean boolean60 = properties15.remove((java.lang.Object) properties35, (java.lang.Object) str59);
        java.util.Properties properties61 = new java.util.Properties();
        java.lang.String str62 = properties61.toString();
        java.lang.Object obj64 = properties61.remove((java.lang.Object) (short) 100);
        java.lang.Object obj67 = properties61.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj68 = properties61.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration69 = properties61.elements();
        java.util.Properties properties70 = new java.util.Properties();
        java.lang.String str71 = properties70.toString();
        java.lang.Object obj73 = properties70.remove((java.lang.Object) (short) 100);
        java.lang.Object obj76 = properties70.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj77 = properties70.clone();
        java.util.Set<java.lang.String> strSet78 = properties70.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties79 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties80 = atomikosProperties79.asProperties();
        atomikosProperties79.service = "{-1.0=100}";
        java.lang.String str83 = atomikosProperties79.getTransactionManagerUniqueName();
        atomikosProperties79.consoleFileName = "hi!";
        atomikosProperties79.service = "tm.out";
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties88 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties88.setAllowSubTransactions(true);
        java.lang.String str91 = atomikosProperties88.transactionManagerUniqueName;
        int int92 = atomikosProperties88.getConsoleFileLimit();
        boolean boolean93 = properties70.remove((java.lang.Object) "tm.out", (java.lang.Object) atomikosProperties88);
        boolean boolean94 = properties13.replace((java.lang.Object) boolean60, (java.lang.Object) properties61, (java.lang.Object) boolean93);
        java.lang.String str97 = properties13.getProperty("", "{1.0=-1, -1.0=100}");
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertNotNull(properties13);
        org.junit.Assert.assertNotNull(objEntrySet14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "{}" + "'", str17, "{}");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 100L + "'", long30 == 100L);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "{}" + "'", str37, "{}");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "{}" + "'", str40, "{}");
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(objEnumeration52);
        org.junit.Assert.assertNotNull(properties54);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "tmlog" + "'", str59, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "{}" + "'", str62, "{}");
        org.junit.Assert.assertNull(obj64);
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertNotNull(obj68);
        org.junit.Assert.assertEquals(obj68.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj68), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj68), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration69);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "{}" + "'", str71, "{}");
        org.junit.Assert.assertNull(obj73);
        org.junit.Assert.assertNull(obj76);
        org.junit.Assert.assertNotNull(obj77);
        org.junit.Assert.assertEquals(obj77.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj77), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj77), "{1.0=-1}");
        org.junit.Assert.assertNotNull(strSet78);
        org.junit.Assert.assertNotNull(properties80);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNull(str91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-1) + "'", int92 == (-1));
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "{1.0=-1, -1.0=100}" + "'", str97, "{1.0=-1, -1.0=100}");
    }

    @Test
    public void test01206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01206");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        int int7 = atomikosProperties0.maxActives;
        atomikosProperties0.setConsoleFileName("tmlog");
        java.lang.String str10 = atomikosProperties0.logBaseName;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery11 = atomikosProperties0.getRecovery();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery12 = atomikosProperties0.recovery;
        recovery12.setDelay((long) (short) 0);
        recovery12.forgetOrphanedLogEntriesDelay = '#';
        recovery12.setMaxRetries(35);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "tmlog" + "'", str10, "tmlog");
        org.junit.Assert.assertNotNull(recovery11);
        org.junit.Assert.assertNotNull(recovery12);
    }

    @Test
    public void test01207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01207");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        atomikosProperties0.maxActives = ' ';
        int int9 = atomikosProperties0.getConsoleFileCount();
        int int10 = atomikosProperties0.consoleFileLimit;
        java.util.Properties properties11 = atomikosProperties0.asProperties();
        properties11.clear();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(properties11);
    }

    @Test
    public void test01208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01208");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties0.setMaxActives(100);
        boolean boolean9 = atomikosProperties0.enableLogging;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.recovery;
        atomikosProperties0.checkpointInterval = 300000L;
        int int13 = atomikosProperties0.consoleFileCount;
        atomikosProperties0.enableLogging = true;
        atomikosProperties0.setService("{={-1.0=100}, -1.0=100}");
        atomikosProperties0.consoleFileCount = 0;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test01209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01209");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj7 = properties0.clone();
        java.util.Set<java.lang.String> strSet8 = properties0.stringPropertyNames();
        java.util.Properties properties9 = new java.util.Properties();
        java.lang.String str10 = properties9.toString();
        java.lang.Object obj12 = properties9.remove((java.lang.Object) (short) 100);
        java.lang.Object obj15 = properties9.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean17 = properties9.containsKey((java.lang.Object) 0L);
        java.lang.Object obj20 = properties9.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.String str22 = properties21.toString();
        java.lang.Object obj24 = properties21.remove((java.lang.Object) (short) 100);
        java.lang.Object obj27 = properties21.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj28 = properties21.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration29 = properties21.elements();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties21);
        java.util.Properties properties31 = new java.util.Properties();
        java.lang.String str32 = properties31.toString();
        java.lang.Object obj34 = properties31.remove((java.lang.Object) (short) 100);
        java.lang.Object obj37 = properties31.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean39 = properties31.containsKey((java.lang.Object) 0L);
        java.lang.Object obj42 = properties31.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties43 = new java.util.Properties();
        java.lang.String str44 = properties43.toString();
        java.lang.Object obj46 = properties43.remove((java.lang.Object) (short) 100);
        java.lang.Object obj49 = properties43.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj50 = properties43.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration51 = properties43.elements();
        properties31.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties43);
        java.lang.Object obj53 = properties0.putIfAbsent((java.lang.Object) properties9, (java.lang.Object) properties43);
        java.util.Properties properties54 = new java.util.Properties(properties0);
        java.util.Set<java.lang.Object> objSet55 = properties0.keySet();
        java.lang.Object obj58 = properties0.setProperty("tmlog", "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        java.io.PrintWriter printWriter59 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.list(printWriter59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{1.0=-1}");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "{}" + "'", str10, "{}");
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{}" + "'", str22, "{}");
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "{}" + "'", str32, "{}");
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "{}" + "'", str44, "{}");
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertEquals(obj50.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj50), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj50), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration51);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertNotNull(objSet55);
        org.junit.Assert.assertNull(obj58);
    }

    @Test
    public void test01210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01210");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileName = "hi!";
        atomikosProperties0.setCheckpointInterval((long) 5);
        atomikosProperties0.setConsoleFileCount(0);
        boolean boolean11 = atomikosProperties0.isThreadedTwoPhaseCommit();
        atomikosProperties0.consoleFileLimit = 5;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties15 = atomikosProperties14.asProperties();
        atomikosProperties14.service = "{-1.0=100}";
        long long18 = atomikosProperties14.getDefaultJtaTimeout();
        atomikosProperties14.enableLogging = false;
        atomikosProperties14.setMaxTimeout((long) (byte) 0);
        atomikosProperties14.setAllowSubTransactions(true);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties26 = atomikosProperties25.asProperties();
        atomikosProperties25.service = "{-1.0=100}";
        java.lang.String str29 = atomikosProperties25.getTransactionManagerUniqueName();
        boolean boolean30 = atomikosProperties25.isSerialJtaTransactions();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel31 = atomikosProperties25.getConsoleLogLevel();
        atomikosProperties14.consoleLogLevel = atomikosLoggingLevel31;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel31;
        atomikosProperties0.setThreadedTwoPhaseCommit(false);
        atomikosProperties0.enableLogging = false;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10000L + "'", long18 == 10000L);
        org.junit.Assert.assertNotNull(properties26);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel31 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel31.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
    }

    @Test
    public void test01211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01211");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        long long6 = recovery5.getForgetOrphanedLogEntriesDelay();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 86400000L + "'", long6 == 86400000L);
    }

    @Test
    public void test01212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01212");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        atomikosProperties0.setConsoleFileCount((int) (byte) 100);
        atomikosProperties0.setAllowSubTransactions(true);
        atomikosProperties0.setService("tm.out");
        int int12 = atomikosProperties0.consoleFileLimit;
        atomikosProperties0.setDefaultJtaTimeout((long) 'a');
        boolean boolean15 = atomikosProperties0.enableLogging;
        java.lang.String str16 = atomikosProperties0.consoleFileName;
        java.lang.String str17 = atomikosProperties0.transactionManagerUniqueName;
        boolean boolean18 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.serialJtaTransactions = true;
        java.lang.String str21 = atomikosProperties0.consoleFileName;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel22 = atomikosProperties0.consoleLogLevel;
        atomikosProperties0.logBaseName = "{{}={}}";
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tm.out" + "'", str16, "tm.out");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "tm.out" + "'", str21, "tm.out");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel22 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel22.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
    }

    @Test
    public void test01213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01213");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        boolean boolean2 = properties0.isEmpty();
        java.lang.Object obj5 = properties0.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Properties properties6 = new java.util.Properties();
        java.lang.Object obj8 = properties6.remove((java.lang.Object) (-1.0d));
        boolean boolean9 = properties6.isEmpty();
        java.lang.Object obj12 = properties6.setProperty("hi!", "{}");
        java.lang.Object obj14 = properties0.getOrDefault((java.lang.Object) "hi!", (java.lang.Object) 100.0d);
        properties0.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery16 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery16.retryInterval = (short) 100;
        recovery16.setForgetOrphanedLogEntriesDelay((long) 5);
        recovery16.setRetryInterval((long) (-1));
        recovery16.retryInterval = (byte) 100;
        long long25 = recovery16.getDelay();
        long long26 = recovery16.forgetOrphanedLogEntriesDelay;
        boolean boolean27 = properties0.equals((java.lang.Object) long26);
        java.lang.Object obj30 = properties0.setProperty("{1.0=-1}", "hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties32 = atomikosProperties31.asProperties();
        atomikosProperties31.service = "{-1.0=100}";
        java.lang.String str35 = atomikosProperties31.getLogBaseName();
        long long36 = atomikosProperties31.defaultJtaTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel37 = null;
        atomikosProperties31.setConsoleLogLevel(atomikosLoggingLevel37);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties39 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties40 = atomikosProperties39.asProperties();
        atomikosProperties39.service = "{-1.0=100}";
        long long43 = atomikosProperties39.getDefaultJtaTimeout();
        atomikosProperties39.setTransactionManagerUniqueName("{}");
        atomikosProperties39.consoleFileName = "hi!";
        boolean boolean48 = atomikosProperties39.threadedTwoPhaseCommit;
        atomikosProperties39.setConsoleFileLimit(5);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj51 = properties0.replace((java.lang.Object) atomikosLoggingLevel37, (java.lang.Object) 5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + 100.0d + "'", obj14, 100.0d);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 10000L + "'", long25 == 10000L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 5L + "'", long26 == 5L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNotNull(properties32);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "tmlog" + "'", str35, "tmlog");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 10000L + "'", long36 == 10000L);
        org.junit.Assert.assertNotNull(properties40);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 10000L + "'", long43 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test01214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01214");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        int int7 = atomikosProperties0.maxActives;
        atomikosProperties0.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.getRecovery();
        boolean boolean11 = atomikosProperties0.allowSubTransactions;
        atomikosProperties0.setService("{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test01215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01215");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        long long5 = atomikosProperties0.getMaxTimeout();
        java.lang.String str6 = atomikosProperties0.outputDir;
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        atomikosProperties0.setTransactionManagerUniqueName("{{={-1.0=100}, -1.0=100}=}");
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test01216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01216");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj7 = properties0.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration8 = properties0.elements();
        java.util.Properties properties9 = new java.util.Properties();
        java.lang.String str10 = properties9.toString();
        java.lang.Object obj12 = properties9.remove((java.lang.Object) (short) 100);
        java.lang.Object obj15 = properties9.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj16 = properties9.clone();
        java.util.Set<java.lang.String> strSet17 = properties9.stringPropertyNames();
        java.util.Properties properties18 = new java.util.Properties(properties9);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties20 = atomikosProperties19.asProperties();
        atomikosProperties19.service = "{-1.0=100}";
        java.lang.String str23 = atomikosProperties19.getTransactionManagerUniqueName();
        boolean boolean24 = atomikosProperties19.isSerialJtaTransactions();
        int int25 = atomikosProperties19.getConsoleFileLimit();
        java.util.Properties properties26 = new java.util.Properties();
        java.lang.String str27 = properties26.toString();
        java.lang.Object obj29 = properties26.remove((java.lang.Object) (short) 100);
        java.lang.Object obj32 = properties26.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean34 = properties26.containsKey((java.lang.Object) 0L);
        java.lang.Object obj37 = properties26.replace((java.lang.Object) false, (java.lang.Object) ' ');
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties38.setEnableLogging(true);
        atomikosProperties38.setConsoleFileLimit((int) (short) 0);
        boolean boolean43 = properties26.contains((java.lang.Object) atomikosProperties38);
        java.lang.Object obj44 = properties18.putIfAbsent((java.lang.Object) int25, (java.lang.Object) atomikosProperties38);
        java.util.Properties properties45 = new java.util.Properties(properties18);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties18);
        java.lang.String str48 = properties18.getProperty("tmlog");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties50 = atomikosProperties49.asProperties();
        atomikosProperties49.service = "{-1.0=100}";
        java.lang.String str53 = atomikosProperties49.getTransactionManagerUniqueName();
        atomikosProperties49.consoleFileLimit = (byte) 10;
        long long56 = atomikosProperties49.getMaxTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel57 = null;
        atomikosProperties49.consoleLogLevel = atomikosLoggingLevel57;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery59 = atomikosProperties49.getRecovery();
        boolean boolean60 = atomikosProperties49.isForceShutdownOnVmExit();
        atomikosProperties49.setForceShutdownOnVmExit(false);
        boolean boolean63 = properties18.equals((java.lang.Object) false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties64 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties65 = atomikosProperties64.asProperties();
        atomikosProperties64.service = "{-1.0=100}";
        long long68 = atomikosProperties64.getDefaultJtaTimeout();
        atomikosProperties64.setTransactionManagerUniqueName("{}");
        atomikosProperties64.enableLogging = true;
        java.lang.String str73 = atomikosProperties64.getService();
        atomikosProperties64.transactionManagerUniqueName = "tmlog";
        atomikosProperties64.setService("tm.out");
        atomikosProperties64.setLogBaseDir("{{={-1.0=100}, -1.0=100}=}");
        boolean boolean80 = properties18.contains((java.lang.Object) atomikosProperties64);
        atomikosProperties64.maxActives = (byte) 0;
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "{}" + "'", str10, "{}");
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "{1.0=-1}");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(properties20);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "{}" + "'", str27, "{}");
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(properties50);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 300000L + "'", long56 == 300000L);
        org.junit.Assert.assertNotNull(recovery59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(properties65);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 10000L + "'", long68 == 10000L);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "{-1.0=100}" + "'", str73, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test01217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01217");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileLimit = (byte) 10;
        long long7 = atomikosProperties0.maxTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel8 = atomikosProperties0.consoleLogLevel;
        atomikosProperties0.enableLogging = false;
        long long11 = atomikosProperties0.maxTimeout;
        atomikosProperties0.setTransactionManagerUniqueName("{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}");
        atomikosProperties0.maxActives = 0;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel8 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel8.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 300000L + "'", long11 == 300000L);
    }

    @Test
    public void test01218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01218");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileLimit = (byte) 10;
        long long7 = atomikosProperties0.getMaxTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel8 = null;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel8;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.getRecovery();
        boolean boolean11 = atomikosProperties0.isForceShutdownOnVmExit();
        boolean boolean12 = atomikosProperties0.isAllowSubTransactions();
        atomikosProperties0.outputDir = "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}";
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test01219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01219");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.outputDir = "{={-1.0=100}, -1.0=100}";
        long long7 = atomikosProperties0.getCheckpointInterval();
        boolean boolean8 = atomikosProperties0.isThreadedTwoPhaseCommit();
        java.lang.String str9 = atomikosProperties0.service;
        int int10 = atomikosProperties0.consoleFileCount;
        int int11 = atomikosProperties0.maxActives;
        boolean boolean12 = atomikosProperties0.forceShutdownOnVmExit;
        java.lang.String str13 = atomikosProperties0.service;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{-1.0=100}" + "'", str9, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 50 + "'", int11 == 50);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{-1.0=100}" + "'", str13, "{-1.0=100}");
    }

    @Test
    public void test01220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01220");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileName = "hi!";
        atomikosProperties0.setCheckpointInterval((long) 5);
        atomikosProperties0.setConsoleFileCount(0);
        boolean boolean11 = atomikosProperties0.isForceShutdownOnVmExit();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test01221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01221");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setEnableLogging(true);
        atomikosProperties12.setConsoleFileLimit((int) (short) 0);
        boolean boolean17 = properties0.contains((java.lang.Object) atomikosProperties12);
        properties0.clear();
        java.util.Properties properties19 = new java.util.Properties();
        java.lang.String str20 = properties19.toString();
        java.lang.Object obj22 = properties19.remove((java.lang.Object) (short) 100);
        java.lang.Object obj25 = properties19.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj26 = properties19.clone();
        java.util.Set<java.lang.String> strSet27 = properties19.stringPropertyNames();
        java.util.Properties properties28 = new java.util.Properties();
        java.lang.String str29 = properties28.toString();
        java.lang.Object obj31 = properties28.remove((java.lang.Object) (short) 100);
        java.lang.Object obj34 = properties28.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean36 = properties28.containsKey((java.lang.Object) 0L);
        java.lang.Object obj39 = properties28.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties40 = new java.util.Properties();
        java.lang.String str41 = properties40.toString();
        java.lang.Object obj43 = properties40.remove((java.lang.Object) (short) 100);
        java.lang.Object obj46 = properties40.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj47 = properties40.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration48 = properties40.elements();
        properties28.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties40);
        java.util.Properties properties50 = new java.util.Properties();
        java.lang.String str51 = properties50.toString();
        java.lang.Object obj53 = properties50.remove((java.lang.Object) (short) 100);
        java.lang.Object obj56 = properties50.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean58 = properties50.containsKey((java.lang.Object) 0L);
        java.lang.Object obj61 = properties50.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties62 = new java.util.Properties();
        java.lang.String str63 = properties62.toString();
        java.lang.Object obj65 = properties62.remove((java.lang.Object) (short) 100);
        java.lang.Object obj68 = properties62.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj69 = properties62.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration70 = properties62.elements();
        properties50.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties62);
        java.lang.Object obj72 = properties19.putIfAbsent((java.lang.Object) properties28, (java.lang.Object) properties62);
        properties28.clear();
        java.lang.Object obj75 = properties0.put((java.lang.Object) properties28, (java.lang.Object) "tmlog");
        java.io.Writer writer76 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.store(writer76, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{}" + "'", str20, "{}");
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "{1.0=-1}");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "{}" + "'", str29, "{}");
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "{}" + "'", str41, "{}");
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertEquals(obj47.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj47), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj47), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration48);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "{}" + "'", str51, "{}");
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(obj61);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "{}" + "'", str63, "{}");
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertNull(obj68);
        org.junit.Assert.assertNotNull(obj69);
        org.junit.Assert.assertEquals(obj69.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj69), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj69), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration70);
        org.junit.Assert.assertNull(obj72);
        org.junit.Assert.assertNull(obj75);
    }

    @Test
    public void test01222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01222");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        boolean boolean7 = atomikosProperties0.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery8 = atomikosProperties0.recovery;
        boolean boolean9 = atomikosProperties0.threadedTwoPhaseCommit;
        atomikosProperties0.setOutputDir("tmlog");
        boolean boolean12 = atomikosProperties0.isAllowSubTransactions();
        atomikosProperties0.defaultJtaTimeout = 1L;
        atomikosProperties0.setLogBaseName("hi!");
        atomikosProperties0.defaultJtaTimeout = 97;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(recovery8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test01223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01223");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        boolean boolean5 = properties0.containsKey((java.lang.Object) 0L);
        properties0.clear();
        java.lang.String str8 = properties0.getProperty("{{}={}}");
        java.util.Enumeration<java.lang.Object> objEnumeration9 = properties0.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration10 = properties0.elements();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(objEnumeration9);
        org.junit.Assert.assertNotNull(objEnumeration10);
    }

    @Test
    public void test01224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01224");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setAllowSubTransactions(true);
        boolean boolean3 = atomikosProperties0.enableLogging;
        atomikosProperties0.consoleFileLimit = (byte) 100;
        java.util.Properties properties6 = new java.util.Properties();
        java.lang.String str7 = properties6.toString();
        java.util.Properties properties8 = new java.util.Properties(properties6);
        java.util.Properties properties10 = new java.util.Properties();
        java.lang.String str11 = properties10.toString();
        java.lang.Object obj13 = properties10.remove((java.lang.Object) (short) 100);
        java.lang.Object obj16 = properties10.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean18 = properties10.containsKey((java.lang.Object) 0L);
        java.lang.Object obj21 = properties10.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties22 = new java.util.Properties(properties10);
        java.util.Enumeration<java.lang.Object> objEnumeration23 = properties22.elements();
        atomikosProperties0.set(properties8, "{={-1.0=100}, -1.0=100}", (java.lang.Object) properties22);
        int int25 = properties8.size();
        java.util.Properties properties26 = new java.util.Properties();
        java.lang.String str27 = properties26.toString();
        java.lang.Object obj29 = properties26.remove((java.lang.Object) (short) 100);
        java.lang.Object obj32 = properties26.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj33 = properties26.clone();
        java.util.Set<java.lang.String> strSet34 = properties26.stringPropertyNames();
        java.util.Properties properties35 = new java.util.Properties(properties26);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties37 = atomikosProperties36.asProperties();
        atomikosProperties36.service = "{-1.0=100}";
        java.lang.String str40 = atomikosProperties36.getTransactionManagerUniqueName();
        boolean boolean41 = atomikosProperties36.isSerialJtaTransactions();
        int int42 = atomikosProperties36.getConsoleFileLimit();
        java.util.Properties properties43 = new java.util.Properties();
        java.lang.String str44 = properties43.toString();
        java.lang.Object obj46 = properties43.remove((java.lang.Object) (short) 100);
        java.lang.Object obj49 = properties43.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean51 = properties43.containsKey((java.lang.Object) 0L);
        java.lang.Object obj54 = properties43.replace((java.lang.Object) false, (java.lang.Object) ' ');
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties55 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties55.setEnableLogging(true);
        atomikosProperties55.setConsoleFileLimit((int) (short) 0);
        boolean boolean60 = properties43.contains((java.lang.Object) atomikosProperties55);
        java.lang.Object obj61 = properties35.putIfAbsent((java.lang.Object) int42, (java.lang.Object) atomikosProperties55);
        java.util.Properties properties62 = new java.util.Properties(properties35);
        java.lang.Object obj64 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean65 = properties8.replace((java.lang.Object) properties62, (java.lang.Object) "{100=100}", obj64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "{}" + "'", str7, "{}");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "{}" + "'", str11, "{}");
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNotNull(objEnumeration23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "{}" + "'", str27, "{}");
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "{1.0=-1}");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertNotNull(properties37);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "{}" + "'", str44, "{}");
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(obj61);
    }

    @Test
    public void test01225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01225");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        properties0.clear();
        java.lang.Object obj4 = properties0.get((java.lang.Object) "{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long6 = recovery5.getRetryInterval();
        long long7 = recovery5.getDelay();
        long long8 = recovery5.getDelay();
        recovery5.setForgetOrphanedLogEntriesDelay(10000L);
        recovery5.retryInterval = '4';
        recovery5.setRetryInterval((long) (short) 0);
        recovery5.setMaxRetries(0);
        java.lang.Object obj17 = properties0.get((java.lang.Object) 0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties19 = atomikosProperties18.asProperties();
        atomikosProperties18.service = "{-1.0=100}";
        long long22 = atomikosProperties18.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel23 = null;
        atomikosProperties18.setConsoleLogLevel(atomikosLoggingLevel23);
        int int25 = atomikosProperties18.maxActives;
        atomikosProperties18.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery28 = atomikosProperties18.getRecovery();
        atomikosProperties18.outputDir = "hi!";
        java.lang.String str31 = atomikosProperties18.getService();
        boolean boolean32 = properties0.equals((java.lang.Object) atomikosProperties18);
        boolean boolean33 = properties0.isEmpty();
        java.io.Writer writer34 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.store(writer34, "{-1.0=100}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 10000L + "'", long8 == 10000L);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(properties19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 10000L + "'", long22 == 10000L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 50 + "'", int25 == 50);
        org.junit.Assert.assertNotNull(recovery28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "{-1.0=100}" + "'", str31, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    }

    @Test
    public void test01226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01226");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties12 = new java.util.Properties();
        java.lang.String str13 = properties12.toString();
        java.lang.Object obj15 = properties12.remove((java.lang.Object) (short) 100);
        java.lang.Object obj18 = properties12.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj19 = properties12.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration20 = properties12.elements();
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties12);
        java.lang.Object obj24 = properties12.setProperty("{={-1.0=100}, -1.0=100}", "hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery25 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery25.retryInterval = (short) 100;
        recovery25.forgetOrphanedLogEntriesDelay = 'a';
        long long30 = recovery25.getDelay();
        int int31 = recovery25.maxRetries;
        recovery25.delay = 1L;
        boolean boolean34 = properties12.contains((java.lang.Object) recovery25);
        java.util.Enumeration<java.lang.Object> objEnumeration35 = properties12.keys();
        java.io.OutputStream outputStream36 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties12.save(outputStream36, "{={-1.0=100}, -1.0=100}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{}" + "'", str13, "{}");
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration20);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 10000L + "'", long30 == 10000L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 5 + "'", int31 == 5);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(objEnumeration35);
    }

    @Test
    public void test01227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01227");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.enableLogging = false;
        atomikosProperties0.setMaxActives((int) ' ');
        atomikosProperties0.maxActives = (short) -1;
        atomikosProperties0.setService("hi!");
        atomikosProperties0.consoleFileLimit = (byte) 0;
        int int15 = atomikosProperties0.maxActives;
        boolean boolean16 = atomikosProperties0.isForceShutdownOnVmExit();
        long long17 = atomikosProperties0.maxTimeout;
        int int18 = atomikosProperties0.getConsoleFileCount();
        int int19 = atomikosProperties0.getMaxActives();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 300000L + "'", long17 == 300000L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
    }

    @Test
    public void test01228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01228");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.outputDir = "{={-1.0=100}, -1.0=100}";
        long long7 = atomikosProperties0.getCheckpointInterval();
        boolean boolean8 = atomikosProperties0.isThreadedTwoPhaseCommit();
        java.lang.String str9 = atomikosProperties0.service;
        int int10 = atomikosProperties0.consoleFileCount;
        atomikosProperties0.defaultJtaTimeout = (-1L);
        atomikosProperties0.transactionManagerUniqueName = "{}";
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel15 = atomikosProperties0.consoleLogLevel;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{-1.0=100}" + "'", str9, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel15 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel15.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
    }

    @Test
    public void test01229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01229");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.remove((java.lang.Object) (-1.0d));
        boolean boolean3 = properties0.isEmpty();
        int int4 = properties0.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties6 = atomikosProperties5.asProperties();
        atomikosProperties5.service = "{-1.0=100}";
        long long9 = atomikosProperties5.getDefaultJtaTimeout();
        atomikosProperties5.enableLogging = false;
        atomikosProperties5.setMaxActives((int) ' ');
        java.util.Properties properties14 = atomikosProperties5.asProperties();
        java.util.Enumeration<java.lang.Object> objEnumeration15 = properties14.elements();
        java.lang.Object obj16 = properties14.clone();
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties14);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties20 = atomikosProperties19.asProperties();
        atomikosProperties19.service = "{-1.0=100}";
        java.lang.String str23 = atomikosProperties19.getTransactionManagerUniqueName();
        boolean boolean24 = atomikosProperties19.isSerialJtaTransactions();
        int int25 = atomikosProperties19.getConsoleFileLimit();
        boolean boolean26 = atomikosProperties19.allowSubTransactions;
        java.lang.String str27 = atomikosProperties19.outputDir;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj28 = properties14.put((java.lang.Object) 0.0d, (java.lang.Object) str27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(properties6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10000L + "'", long9 == 10000L);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertNotNull(objEnumeration15);
        org.junit.Assert.assertNotNull(obj16);
// flaky:         org.junit.Assert.assertEquals(obj16.toString(), "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=32, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={-1.0=100}, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=32, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={-1.0=100}, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=32, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={-1.0=100}, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        org.junit.Assert.assertNotNull(properties20);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(str27);
    }

    @Test
    public void test01230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01230");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        java.util.Properties properties2 = new java.util.Properties();
        java.lang.Object obj4 = properties2.remove((java.lang.Object) (-1.0d));
        boolean boolean5 = properties2.isEmpty();
        int int6 = properties2.size();
        java.lang.String str8 = properties2.getProperty("{}");
        java.lang.Object obj9 = properties1.remove((java.lang.Object) properties2);
        java.lang.String str11 = properties2.getProperty("tmlog");
        java.lang.String str13 = properties2.getProperty("{100=100}");
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test01231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01231");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj3 = properties0.setProperty("{}", "{}");
        java.util.Enumeration<java.lang.Object> objEnumeration4 = properties0.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties0.elements();
        java.util.Properties properties6 = new java.util.Properties(properties0);
        java.lang.String str8 = properties0.getProperty("");
        java.util.Set<java.lang.String> strSet9 = properties0.stringPropertyNames();
        java.util.Set<java.lang.Object> objSet10 = properties0.keySet();
        java.util.Enumeration<java.lang.Object> objEnumeration11 = properties0.elements();
        java.io.InputStream inputStream12 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.loadFromXML(inputStream12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNotNull(objEnumeration4);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNotNull(objSet10);
        org.junit.Assert.assertNotNull(objEnumeration11);
    }

    @Test
    public void test01232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01232");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        boolean boolean7 = atomikosProperties0.isAllowSubTransactions();
        int int8 = atomikosProperties0.getConsoleFileLimit();
        boolean boolean9 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.setMaxTimeout(300000L);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery12 = atomikosProperties0.getRecovery();
        int int13 = recovery12.getMaxRetries();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(recovery12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
    }

    @Test
    public void test01233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01233");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Enumeration<?> wildcardEnumeration1 = properties0.propertyNames();
        java.lang.Object obj2 = properties0.clone();
        java.util.Collection<java.lang.Object> objCollection3 = properties0.values();
        java.util.Enumeration<java.lang.Object> objEnumeration4 = properties0.elements();
        java.io.Writer writer5 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.store(writer5, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardEnumeration1);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "{}");
        org.junit.Assert.assertNotNull(objCollection3);
        org.junit.Assert.assertNotNull(objEnumeration4);
    }

    @Test
    public void test01234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01234");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        java.util.Properties properties8 = new java.util.Properties();
        java.lang.String str9 = properties8.toString();
        java.lang.Object obj11 = properties8.remove((java.lang.Object) (short) 100);
        java.lang.Object obj14 = properties8.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj15 = properties8.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration16 = properties8.elements();
        java.lang.Object obj17 = properties0.putIfAbsent((java.lang.Object) 10.0f, (java.lang.Object) objEnumeration16);
        java.util.Properties properties18 = new java.util.Properties();
        java.util.Enumeration<?> wildcardEnumeration19 = properties18.propertyNames();
        java.lang.Object obj20 = properties18.clone();
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.String str22 = properties21.toString();
        boolean boolean23 = properties21.isEmpty();
        java.lang.Object obj26 = properties21.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties21.elements();
        java.lang.Object obj28 = properties0.put(obj20, (java.lang.Object) objEnumeration27);
        properties0.clear();
        java.util.Properties properties30 = new java.util.Properties();
        java.lang.Object obj32 = properties30.remove((java.lang.Object) (-1.0d));
        boolean boolean33 = properties30.isEmpty();
        int int34 = properties30.size();
        java.lang.String str36 = properties30.getProperty("{}");
        java.util.Properties properties37 = new java.util.Properties();
        java.lang.String str38 = properties37.toString();
        java.lang.Object obj40 = properties37.remove((java.lang.Object) (short) 100);
        java.lang.Object obj43 = properties37.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean45 = properties37.containsKey((java.lang.Object) 0L);
        java.lang.Object obj48 = properties37.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties49 = new java.util.Properties(properties37);
        java.util.Enumeration<java.lang.Object> objEnumeration50 = properties37.keys();
        java.lang.Object obj51 = properties0.replace((java.lang.Object) properties30, (java.lang.Object) properties37);
        java.io.PrintStream printStream52 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.list(printStream52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{}" + "'", str9, "{}");
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration16);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(wildcardEnumeration19);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{}");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{}" + "'", str22, "{}");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "{}" + "'", str38, "{}");
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertNotNull(objEnumeration50);
        org.junit.Assert.assertNull(obj51);
    }

    @Test
    public void test01235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01235");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        atomikosProperties0.setLogBaseName("{}");
        long long9 = atomikosProperties0.checkpointInterval;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 500L + "'", long9 == 500L);
    }

    @Test
    public void test01236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01236");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        boolean boolean7 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.defaultJtaTimeout = (byte) 10;
        java.lang.String str10 = atomikosProperties0.transactionManagerUniqueName;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery11 = atomikosProperties0.getRecovery();
        java.lang.String str12 = atomikosProperties0.outputDir;
        atomikosProperties0.setConsoleFileName("{1.0=-1, -1.0=100}");
        atomikosProperties0.setConsoleFileLimit(18);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(recovery11);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test01237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01237");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        atomikosProperties0.maxActives = ' ';
        int int9 = atomikosProperties0.getConsoleFileCount();
        int int10 = atomikosProperties0.consoleFileLimit;
        java.util.Properties properties11 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean13 = atomikosProperties12.isSerialJtaTransactions();
        atomikosProperties12.logBaseName = "{-1.0=100}";
        int int16 = atomikosProperties12.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery17 = atomikosProperties12.getRecovery();
        atomikosProperties12.setConsoleFileCount((int) (byte) 100);
        atomikosProperties12.setAllowSubTransactions(true);
        atomikosProperties12.setService("tm.out");
        boolean boolean24 = atomikosProperties12.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel25 = atomikosProperties12.getConsoleLogLevel();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties26.setAllowSubTransactions(true);
        boolean boolean29 = atomikosProperties26.enableLogging;
        atomikosProperties26.consoleFileLimit = (byte) 100;
        java.util.Properties properties32 = new java.util.Properties();
        java.lang.String str33 = properties32.toString();
        java.util.Properties properties34 = new java.util.Properties(properties32);
        java.util.Properties properties36 = new java.util.Properties();
        java.lang.String str37 = properties36.toString();
        java.lang.Object obj39 = properties36.remove((java.lang.Object) (short) 100);
        java.lang.Object obj42 = properties36.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean44 = properties36.containsKey((java.lang.Object) 0L);
        java.lang.Object obj47 = properties36.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties48 = new java.util.Properties(properties36);
        java.util.Enumeration<java.lang.Object> objEnumeration49 = properties48.elements();
        atomikosProperties26.set(properties34, "{={-1.0=100}, -1.0=100}", (java.lang.Object) properties48);
        atomikosProperties26.allowSubTransactions = false;
        java.lang.Object obj53 = properties11.put((java.lang.Object) atomikosProperties12, (java.lang.Object) false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties54 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties55 = atomikosProperties54.asProperties();
        atomikosProperties54.service = "{-1.0=100}";
        long long58 = atomikosProperties54.getDefaultJtaTimeout();
        long long59 = atomikosProperties54.getMaxTimeout();
        int int60 = atomikosProperties54.consoleFileCount;
        atomikosProperties54.setConsoleFileCount(0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties63 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties64 = atomikosProperties63.asProperties();
        atomikosProperties63.service = "{-1.0=100}";
        long long67 = atomikosProperties63.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel68 = null;
        atomikosProperties63.setConsoleLogLevel(atomikosLoggingLevel68);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel70 = null;
        atomikosProperties63.setConsoleLogLevel(atomikosLoggingLevel70);
        atomikosProperties63.setLogBaseName("{={-1.0=100}, -1.0=100}");
        boolean boolean74 = atomikosProperties63.enableLogging;
        java.lang.Object obj75 = properties11.replace((java.lang.Object) atomikosProperties54, (java.lang.Object) atomikosProperties63);
        atomikosProperties54.setCheckpointInterval(0L);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 50 + "'", int16 == 50);
        org.junit.Assert.assertNotNull(recovery17);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel25 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel25.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "{}" + "'", str33, "{}");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "{}" + "'", str37, "{}");
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNotNull(objEnumeration49);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertNotNull(properties55);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 10000L + "'", long58 == 10000L);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 300000L + "'", long59 == 300000L);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(properties64);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 10000L + "'", long67 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNull(obj75);
    }

    @Test
    public void test01238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01238");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setEnableLogging(true);
        atomikosProperties0.consoleFileCount = 0;
        int int5 = atomikosProperties0.getMaxActives();
        java.lang.String str6 = atomikosProperties0.getLogBaseDir();
        java.lang.String str7 = atomikosProperties0.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery8 = atomikosProperties0.getRecovery();
        boolean boolean9 = atomikosProperties0.serialJtaTransactions;
        atomikosProperties0.setLogBaseName("{={-1.0=100}, -1.0=100}");
        atomikosProperties0.defaultJtaTimeout = '4';
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 50 + "'", int5 == 50);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(recovery8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test01239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01239");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.util.Properties properties7 = new java.util.Properties();
        java.lang.String str8 = properties7.toString();
        java.lang.Object obj10 = properties7.remove((java.lang.Object) (short) 100);
        java.lang.Object obj13 = properties7.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        int int14 = properties7.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery15 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery15.retryInterval = (short) 100;
        recovery15.forgetOrphanedLogEntriesDelay = 'a';
        long long20 = recovery15.retryInterval;
        recovery15.setForgetOrphanedLogEntriesDelay((long) 0);
        java.lang.Object obj23 = properties0.replace((java.lang.Object) int14, (java.lang.Object) recovery15);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet24 = properties0.entrySet();
        java.io.OutputStream outputStream25 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.storeToXML(outputStream25, "{100=100}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{}" + "'", str8, "{}");
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 100L + "'", long20 == 100L);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNotNull(objEntrySet24);
    }

    @Test
    public void test01240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01240");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj7 = properties0.clone();
        java.util.Set<java.lang.String> strSet8 = properties0.stringPropertyNames();
        java.util.Properties properties9 = new java.util.Properties();
        java.lang.String str10 = properties9.toString();
        java.lang.Object obj12 = properties9.remove((java.lang.Object) (short) 100);
        java.lang.Object obj15 = properties9.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        java.util.Properties properties17 = new java.util.Properties();
        java.lang.String str18 = properties17.toString();
        java.lang.Object obj20 = properties17.remove((java.lang.Object) (short) 100);
        java.lang.Object obj23 = properties17.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj24 = properties17.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration25 = properties17.elements();
        java.lang.Object obj26 = properties9.putIfAbsent((java.lang.Object) 10.0f, (java.lang.Object) objEnumeration25);
        boolean boolean27 = properties0.containsKey((java.lang.Object) 10.0f);
        java.io.PrintStream printStream28 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.list(printStream28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{1.0=-1}");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "{}" + "'", str10, "{}");
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "{}" + "'", str18, "{}");
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration25);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test01241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01241");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileName = "hi!";
        atomikosProperties0.enableLogging = true;
        atomikosProperties0.setAllowSubTransactions(false);
        java.lang.String str11 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.logBaseDir = "{={-1.0=100}, -1.0=100}";
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
    }

    @Test
    public void test01242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01242");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        boolean boolean7 = atomikosProperties0.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery8 = atomikosProperties0.recovery;
        atomikosProperties0.setLogBaseDir("");
        long long11 = atomikosProperties0.maxTimeout;
        atomikosProperties0.serialJtaTransactions = false;
        atomikosProperties0.consoleFileName = "{1.0=-1, -1.0=100}";
        int int16 = atomikosProperties0.getConsoleFileCount();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(recovery8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 300000L + "'", long11 == 300000L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test01243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01243");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean8 = atomikosProperties7.isSerialJtaTransactions();
        atomikosProperties7.logBaseName = "{-1.0=100}";
        int int11 = atomikosProperties7.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery12 = atomikosProperties7.getRecovery();
        atomikosProperties7.setConsoleFileCount((int) (byte) 100);
        atomikosProperties7.setAllowSubTransactions(true);
        atomikosProperties7.setService("tm.out");
        int int19 = atomikosProperties7.consoleFileLimit;
        atomikosProperties7.setDefaultJtaTimeout((long) 'a');
        boolean boolean22 = atomikosProperties7.enableLogging;
        java.lang.String str23 = atomikosProperties7.consoleFileName;
        java.lang.String str24 = atomikosProperties7.transactionManagerUniqueName;
        boolean boolean25 = atomikosProperties7.isSerialJtaTransactions();
        java.lang.String str26 = atomikosProperties7.consoleFileName;
        boolean boolean27 = properties0.containsKey((java.lang.Object) str26);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery28 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery28.retryInterval = (short) 100;
        recovery28.forgetOrphanedLogEntriesDelay = 'a';
        long long33 = recovery28.getDelay();
        int int34 = recovery28.maxRetries;
        int int35 = recovery28.maxRetries;
        recovery28.setDelay((long) (-1));
        long long38 = recovery28.forgetOrphanedLogEntriesDelay;
        recovery28.maxRetries = (-1);
        boolean boolean41 = properties0.equals((java.lang.Object) recovery28);
        recovery28.setForgetOrphanedLogEntriesDelay(5L);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 50 + "'", int11 == 50);
        org.junit.Assert.assertNotNull(recovery12);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "tm.out" + "'", str23, "tm.out");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "tm.out" + "'", str26, "tm.out");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 10000L + "'", long33 == 10000L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 5 + "'", int34 == 5);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 5 + "'", int35 == 5);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 97L + "'", long38 == 97L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test01244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01244");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        boolean boolean2 = properties0.isEmpty();
        java.util.Properties properties3 = new java.util.Properties();
        java.lang.String str4 = properties3.toString();
        java.lang.Object obj6 = properties3.remove((java.lang.Object) (short) 100);
        java.lang.Object obj9 = properties3.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean11 = properties3.containsKey((java.lang.Object) 0L);
        java.lang.Object obj14 = properties3.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties15 = new java.util.Properties();
        java.lang.String str16 = properties15.toString();
        java.lang.Object obj18 = properties15.remove((java.lang.Object) (short) 100);
        java.lang.Object obj21 = properties15.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj22 = properties15.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration23 = properties15.elements();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties15);
        java.lang.Object obj25 = properties15.clone();
        properties15.clear();
        int int27 = properties15.size();
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties15);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties29.setAllowSubTransactions(true);
        java.lang.String str32 = atomikosProperties29.transactionManagerUniqueName;
        int int33 = atomikosProperties29.getConsoleFileLimit();
        java.lang.String str34 = atomikosProperties29.logBaseDir;
        int int35 = atomikosProperties29.getConsoleFileLimit();
        boolean boolean36 = atomikosProperties29.enableLogging;
        java.lang.Object obj37 = properties0.remove((java.lang.Object) boolean36);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{}" + "'", str4, "{}");
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{}" + "'", str16, "{}");
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration23);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "{1.0=-1}");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNull(obj37);
    }

    @Test
    public void test01245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01245");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        long long5 = atomikosProperties0.getMaxTimeout();
        int int6 = atomikosProperties0.consoleFileCount;
        int int7 = atomikosProperties0.getMaxActives();
        atomikosProperties0.setAllowSubTransactions(true);
        atomikosProperties0.transactionManagerUniqueName = "{={-1.0=100}, -1.0=100}";
        boolean boolean12 = atomikosProperties0.isThreadedTwoPhaseCommit();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test01246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01246");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setTransactionManagerUniqueName("{}");
        atomikosProperties0.consoleFileName = "hi!";
        int int9 = atomikosProperties0.getConsoleFileCount();
        java.util.Properties properties10 = new java.util.Properties();
        java.lang.String str11 = properties10.toString();
        java.lang.Object obj13 = properties10.remove((java.lang.Object) (short) 100);
        java.lang.Object obj16 = properties10.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj17 = properties10.clone();
        java.util.Set<java.lang.String> strSet18 = properties10.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery19 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery19.retryInterval = (short) 100;
        recovery19.delay = (-1L);
        long long24 = recovery19.delay;
        recovery19.delay = (short) 1;
        long long27 = recovery19.getRetryInterval();
        int int28 = recovery19.maxRetries;
        int int29 = recovery19.maxRetries;
        long long30 = recovery19.forgetOrphanedLogEntriesDelay;
        java.util.Properties properties31 = new java.util.Properties();
        java.lang.Object obj33 = properties31.remove((java.lang.Object) (-1.0d));
        boolean boolean34 = properties31.isEmpty();
        int int35 = properties31.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery36 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery36.retryInterval = (short) 100;
        recovery36.forgetOrphanedLogEntriesDelay = 'a';
        java.util.Properties properties41 = new java.util.Properties();
        java.lang.Object obj43 = properties41.remove((java.lang.Object) (-1.0d));
        boolean boolean44 = properties41.isEmpty();
        int int45 = properties41.size();
        java.lang.String str47 = properties41.getProperty("{}");
        boolean boolean48 = properties31.remove((java.lang.Object) recovery36, (java.lang.Object) properties41);
        java.lang.Object obj49 = properties10.putIfAbsent((java.lang.Object) long30, (java.lang.Object) properties31);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties51 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties52 = atomikosProperties51.asProperties();
        atomikosProperties51.service = "{-1.0=100}";
        long long55 = atomikosProperties51.getDefaultJtaTimeout();
        long long56 = atomikosProperties51.getMaxTimeout();
        int int57 = atomikosProperties51.consoleFileCount;
        int int58 = atomikosProperties51.getMaxActives();
        java.lang.Class<?> wildcardClass59 = atomikosProperties51.getClass();
        atomikosProperties0.set(properties10, "{-1.0=100}", (java.lang.Object) wildcardClass59);
        int int61 = atomikosProperties0.consoleFileCount;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "{}" + "'", str11, "{}");
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "{1.0=-1}");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 100L + "'", long27 == 100L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5 + "'", int28 == 5);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5 + "'", int29 == 5);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 86400000L + "'", long30 == 86400000L);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertNotNull(properties52);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 10000L + "'", long55 == 10000L);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 300000L + "'", long56 == 300000L);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 50 + "'", int58 == 50);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
    }

    @Test
    public void test01247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01247");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        atomikosProperties0.setConsoleFileCount((int) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel8 = null;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel8;
        java.lang.String str10 = atomikosProperties0.logBaseDir;
        atomikosProperties0.checkpointInterval = (byte) 0;
        java.lang.String str13 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.serialJtaTransactions = true;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel16 = atomikosProperties0.getConsoleLogLevel();
        java.lang.String str17 = atomikosProperties0.consoleFileName;
        atomikosProperties0.setForceShutdownOnVmExit(true);
        boolean boolean20 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.setTransactionManagerUniqueName("{={-1.0=100}, -1.0=100}");
        atomikosProperties0.setAllowSubTransactions(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(atomikosLoggingLevel16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tm.out" + "'", str17, "tm.out");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test01248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01248");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.util.Properties properties3 = new java.util.Properties();
        java.lang.String str4 = properties3.toString();
        java.lang.Object obj6 = properties3.remove((java.lang.Object) (short) 100);
        java.lang.Object obj9 = properties3.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean11 = properties3.containsKey((java.lang.Object) 0L);
        java.lang.Object obj14 = properties3.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj17 = properties3.setProperty("", "{-1.0=100}");
        java.util.Enumeration<java.lang.Object> objEnumeration18 = properties3.keys();
        java.util.Properties properties19 = new java.util.Properties();
        java.lang.String str20 = properties19.toString();
        boolean boolean21 = properties19.isEmpty();
        java.lang.Object obj24 = properties19.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration25 = properties19.elements();
        java.lang.Object obj26 = properties2.replace((java.lang.Object) objEnumeration18, (java.lang.Object) properties19);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties19.elements();
        java.util.Enumeration<java.lang.Object> objEnumeration28 = properties19.keys();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet29 = properties19.entrySet();
        java.lang.String str32 = properties19.getProperty("{{-1.0=100}=}", "{{={-1.0=100}, -1.0=100}=}");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{}" + "'", str4, "{}");
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(objEnumeration18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{}" + "'", str20, "{}");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(objEnumeration25);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertNotNull(objEnumeration28);
        org.junit.Assert.assertNotNull(objEntrySet29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "{{={-1.0=100}, -1.0=100}=}" + "'", str32, "{{={-1.0=100}, -1.0=100}=}");
    }

    @Test
    public void test01249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01249");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.outputDir = "{={-1.0=100}, -1.0=100}";
        long long7 = atomikosProperties0.getCheckpointInterval();
        boolean boolean8 = atomikosProperties0.isThreadedTwoPhaseCommit();
        java.lang.String str9 = atomikosProperties0.service;
        int int10 = atomikosProperties0.consoleFileCount;
        atomikosProperties0.logBaseName = "tm.out";
        java.util.Properties properties13 = new java.util.Properties();
        java.lang.String str14 = properties13.toString();
        java.lang.Object obj16 = properties13.remove((java.lang.Object) (short) 100);
        java.lang.Object obj19 = properties13.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.String str22 = properties21.toString();
        java.lang.Object obj24 = properties21.remove((java.lang.Object) (short) 100);
        java.lang.Object obj27 = properties21.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj28 = properties21.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration29 = properties21.elements();
        java.lang.Object obj30 = properties13.putIfAbsent((java.lang.Object) 10.0f, (java.lang.Object) objEnumeration29);
        java.util.Properties properties31 = new java.util.Properties();
        java.util.Enumeration<?> wildcardEnumeration32 = properties31.propertyNames();
        java.lang.Object obj33 = properties31.clone();
        java.util.Properties properties34 = new java.util.Properties();
        java.lang.String str35 = properties34.toString();
        boolean boolean36 = properties34.isEmpty();
        java.lang.Object obj39 = properties34.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration40 = properties34.elements();
        java.lang.Object obj41 = properties13.put(obj33, (java.lang.Object) objEnumeration40);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties43 = atomikosProperties42.asProperties();
        atomikosProperties42.service = "{-1.0=100}";
        long long46 = atomikosProperties42.getDefaultJtaTimeout();
        atomikosProperties42.setThreadedTwoPhaseCommit(true);
        java.lang.String str49 = atomikosProperties42.getLogBaseName();
        boolean boolean50 = properties13.equals((java.lang.Object) atomikosProperties42);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties52 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties53 = atomikosProperties52.asProperties();
        atomikosProperties52.service = "{-1.0=100}";
        long long56 = atomikosProperties52.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel57 = null;
        atomikosProperties52.setConsoleLogLevel(atomikosLoggingLevel57);
        atomikosProperties52.setTransactionManagerUniqueName("{-1.0=100}");
        atomikosProperties0.set(properties13, "tmlog", (java.lang.Object) atomikosProperties52);
        long long62 = atomikosProperties52.getCheckpointInterval();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{-1.0=100}" + "'", str9, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "{}" + "'", str14, "{}");
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{}" + "'", str22, "{}");
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration29);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNotNull(wildcardEnumeration32);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "{}");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "{}" + "'", str35, "{}");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNotNull(objEnumeration40);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertNotNull(properties43);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 10000L + "'", long46 == 10000L);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "tmlog" + "'", str49, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(properties53);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 10000L + "'", long56 == 10000L);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 500L + "'", long62 == 500L);
    }

    @Test
    public void test01250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01250");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties3 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties4 = atomikosProperties3.asProperties();
        atomikosProperties3.service = "{-1.0=100}";
        long long7 = atomikosProperties3.getDefaultJtaTimeout();
        atomikosProperties3.setThreadedTwoPhaseCommit(true);
        boolean boolean10 = atomikosProperties3.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery11 = atomikosProperties3.recovery;
        atomikosProperties3.setLogBaseDir("");
        atomikosProperties3.setConsoleFileName("");
        atomikosProperties3.setThreadedTwoPhaseCommit(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean19 = atomikosProperties18.isSerialJtaTransactions();
        atomikosProperties18.logBaseName = "{-1.0=100}";
        int int22 = atomikosProperties18.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery23 = atomikosProperties18.getRecovery();
        atomikosProperties18.setConsoleFileCount((int) (byte) 100);
        atomikosProperties18.setAllowSubTransactions(true);
        atomikosProperties18.setService("tm.out");
        int int30 = atomikosProperties18.consoleFileLimit;
        atomikosProperties18.setDefaultJtaTimeout((long) 'a');
        atomikosProperties18.setEnableLogging(true);
        java.util.Properties properties35 = new java.util.Properties();
        java.util.Enumeration<?> wildcardEnumeration36 = properties35.propertyNames();
        boolean boolean37 = properties0.replace((java.lang.Object) atomikosProperties3, (java.lang.Object) true, (java.lang.Object) properties35);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties39 = atomikosProperties38.asProperties();
        atomikosProperties38.service = "{-1.0=100}";
        long long42 = atomikosProperties38.getDefaultJtaTimeout();
        long long43 = atomikosProperties38.getMaxTimeout();
        java.lang.String str44 = atomikosProperties38.outputDir;
        atomikosProperties38.consoleFileName = "tm.out";
        java.lang.String str47 = atomikosProperties38.consoleFileName;
        atomikosProperties38.enableLogging = true;
        java.util.Properties properties50 = new java.util.Properties();
        java.util.Enumeration<?> wildcardEnumeration51 = properties50.propertyNames();
        java.lang.Object obj52 = properties50.clone();
        java.util.Collection<java.lang.Object> objCollection53 = properties50.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties54 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties54.setEnableLogging(true);
        atomikosProperties54.setConsoleFileLimit((int) (short) 0);
        atomikosProperties54.maxActives = 1;
        java.util.Properties properties61 = new java.util.Properties();
        java.lang.Object obj63 = properties61.remove((java.lang.Object) (-1.0d));
        int int64 = properties61.size();
        java.util.Enumeration<java.lang.Object> objEnumeration65 = properties61.elements();
        java.lang.Object obj66 = properties50.getOrDefault((java.lang.Object) 1, (java.lang.Object) properties61);
        java.lang.Object obj67 = properties35.put((java.lang.Object) true, (java.lang.Object) properties61);
        java.io.OutputStream outputStream68 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties35.storeToXML(outputStream68, "{{1.0=-1}=hi!}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNotNull(properties4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(recovery11);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 50 + "'", int22 == 50);
        org.junit.Assert.assertNotNull(recovery23);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(wildcardEnumeration36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(properties39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 10000L + "'", long42 == 10000L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 300000L + "'", long43 == 300000L);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "tm.out" + "'", str47, "tm.out");
        org.junit.Assert.assertNotNull(wildcardEnumeration51);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertEquals(obj52.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj52), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj52), "{}");
        org.junit.Assert.assertNotNull(objCollection53);
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(objEnumeration65);
        org.junit.Assert.assertNotNull(obj66);
        org.junit.Assert.assertEquals(obj66.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj66), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj66), "{}");
        org.junit.Assert.assertNull(obj67);
    }

    @Test
    public void test01251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01251");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        java.lang.String str6 = atomikosProperties0.getOutputDir();
        atomikosProperties0.setLogBaseDir("{-1.0=100}");
        atomikosProperties0.setLogBaseDir("");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test01252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01252");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileName = "hi!";
        atomikosProperties0.setCheckpointInterval((long) 5);
        atomikosProperties0.setConsoleFileCount(0);
        atomikosProperties0.setService("{-1.0=100}");
        atomikosProperties0.setDefaultJtaTimeout((long) 100);
        atomikosProperties0.setLogBaseDir("tmlog");
        atomikosProperties0.setOutputDir("tm.out");
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test01253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01253");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.consoleFileLimit = '#';
        atomikosProperties0.threadedTwoPhaseCommit = false;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
    }

    @Test
    public void test01254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01254");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.remove((java.lang.Object) (-1.0d));
        boolean boolean3 = properties0.isEmpty();
        int int4 = properties0.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties6 = atomikosProperties5.asProperties();
        atomikosProperties5.service = "{-1.0=100}";
        long long9 = atomikosProperties5.getDefaultJtaTimeout();
        atomikosProperties5.enableLogging = false;
        atomikosProperties5.setMaxActives((int) ' ');
        java.util.Properties properties14 = atomikosProperties5.asProperties();
        java.util.Enumeration<java.lang.Object> objEnumeration15 = properties14.elements();
        java.lang.Object obj16 = properties14.clone();
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties14);
        java.io.PrintWriter printWriter18 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.list(printWriter18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(properties6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10000L + "'", long9 == 10000L);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertNotNull(objEnumeration15);
        org.junit.Assert.assertNotNull(obj16);
// flaky:         org.junit.Assert.assertEquals(obj16.toString(), "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=32, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={-1.0=100}, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=32, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={-1.0=100}, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=32, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={-1.0=100}, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
    }

    @Test
    public void test01255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01255");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long1 = recovery0.getRetryInterval();
        long long2 = recovery0.getDelay();
        long long3 = recovery0.getDelay();
        recovery0.setForgetOrphanedLogEntriesDelay(10000L);
        recovery0.retryInterval = '4';
        recovery0.setRetryInterval((long) (short) 0);
        long long10 = recovery0.getForgetOrphanedLogEntriesDelay();
        long long11 = recovery0.getDelay();
        recovery0.setMaxRetries((int) (byte) 0);
        recovery0.delay = 86400000L;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 10000L + "'", long1 == 10000L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10000L + "'", long2 == 10000L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 10000L + "'", long3 == 10000L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10000L + "'", long11 == 10000L);
    }

    @Test
    public void test01256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01256");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj7 = properties0.clone();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet8 = properties0.entrySet();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet9 = properties0.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        atomikosProperties10.service = "{-1.0=100}";
        long long14 = atomikosProperties10.getDefaultJtaTimeout();
        long long15 = atomikosProperties10.getMaxTimeout();
        int int16 = atomikosProperties10.consoleFileCount;
        int int17 = atomikosProperties10.getMaxActives();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties18.setEnableLogging(true);
        atomikosProperties18.consoleFileCount = 0;
        int int23 = atomikosProperties18.getMaxActives();
        java.lang.String str24 = atomikosProperties18.getLogBaseDir();
        java.lang.String str25 = atomikosProperties18.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery26 = atomikosProperties18.getRecovery();
        java.lang.String str27 = atomikosProperties18.service;
        java.lang.Object obj28 = properties0.replace((java.lang.Object) int17, (java.lang.Object) atomikosProperties18);
        java.util.Set<java.lang.Object> objSet29 = properties0.keySet();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEntrySet8);
        org.junit.Assert.assertNotNull(objEntrySet9);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10000L + "'", long14 == 10000L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 300000L + "'", long15 == 300000L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 50 + "'", int17 == 50);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 50 + "'", int23 == 50);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(recovery26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNotNull(objSet29);
    }

    @Test
    public void test01257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01257");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        boolean boolean7 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.defaultJtaTimeout = (byte) 10;
        java.lang.String str10 = atomikosProperties0.transactionManagerUniqueName;
        long long11 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.setDefaultJtaTimeout(97L);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 500L + "'", long11 == 500L);
    }

    @Test
    public void test01258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01258");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj7 = properties0.clone();
        java.util.Set<java.lang.String> strSet8 = properties0.stringPropertyNames();
        java.util.Properties properties9 = new java.util.Properties();
        java.lang.String str10 = properties9.toString();
        java.lang.Object obj12 = properties9.remove((java.lang.Object) (short) 100);
        java.lang.Object obj15 = properties9.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean17 = properties9.containsKey((java.lang.Object) 0L);
        java.lang.Object obj20 = properties9.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.String str22 = properties21.toString();
        java.lang.Object obj24 = properties21.remove((java.lang.Object) (short) 100);
        java.lang.Object obj27 = properties21.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj28 = properties21.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration29 = properties21.elements();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties21);
        java.util.Properties properties31 = new java.util.Properties();
        java.lang.String str32 = properties31.toString();
        java.lang.Object obj34 = properties31.remove((java.lang.Object) (short) 100);
        java.lang.Object obj37 = properties31.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean39 = properties31.containsKey((java.lang.Object) 0L);
        java.lang.Object obj42 = properties31.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties43 = new java.util.Properties();
        java.lang.String str44 = properties43.toString();
        java.lang.Object obj46 = properties43.remove((java.lang.Object) (short) 100);
        java.lang.Object obj49 = properties43.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj50 = properties43.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration51 = properties43.elements();
        properties31.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties43);
        java.lang.Object obj53 = properties0.putIfAbsent((java.lang.Object) properties9, (java.lang.Object) properties43);
        java.util.Properties properties54 = new java.util.Properties();
        java.lang.String str55 = properties54.toString();
        java.lang.Object obj57 = properties54.remove((java.lang.Object) (short) 100);
        java.lang.Object obj60 = properties54.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean62 = properties54.containsKey((java.lang.Object) 0L);
        java.lang.Object obj65 = properties54.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj68 = properties54.setProperty("", "{-1.0=100}");
        java.util.Enumeration<java.lang.Object> objEnumeration69 = properties54.keys();
        boolean boolean70 = properties43.contains((java.lang.Object) properties54);
        java.lang.Object obj71 = properties43.clone();
        java.lang.String str73 = properties43.getProperty("tm.out");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{1.0=-1}");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "{}" + "'", str10, "{}");
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{}" + "'", str22, "{}");
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "{}" + "'", str32, "{}");
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "{}" + "'", str44, "{}");
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertEquals(obj50.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj50), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj50), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration51);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "{}" + "'", str55, "{}");
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertNull(obj68);
        org.junit.Assert.assertNotNull(objEnumeration69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(obj71);
        org.junit.Assert.assertEquals(obj71.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj71), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj71), "{1.0=-1}");
        org.junit.Assert.assertNull(str73);
    }

    @Test
    public void test01259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01259");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        atomikosProperties2.service = "{-1.0=100}";
        long long6 = atomikosProperties2.getDefaultJtaTimeout();
        atomikosProperties2.consoleFileLimit = '#';
        java.lang.Object obj9 = properties1.get((java.lang.Object) atomikosProperties2);
        boolean boolean10 = atomikosProperties2.forceShutdownOnVmExit;
        atomikosProperties2.setOutputDir("");
        boolean boolean13 = atomikosProperties2.forceShutdownOnVmExit;
        atomikosProperties2.serialJtaTransactions = true;
        long long16 = atomikosProperties2.getDefaultJtaTimeout();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10000L + "'", long16 == 10000L);
    }

    @Test
    public void test01260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01260");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setEnableLogging(true);
        atomikosProperties12.setConsoleFileLimit((int) (short) 0);
        boolean boolean17 = properties0.contains((java.lang.Object) atomikosProperties12);
        java.lang.String str18 = atomikosProperties12.transactionManagerUniqueName;
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test01261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01261");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj14 = properties0.setProperty("", "{-1.0=100}");
        java.lang.String str15 = properties0.toString();
        java.util.Set<java.lang.String> strSet16 = properties0.stringPropertyNames();
        java.util.Properties properties18 = new java.util.Properties();
        java.util.Properties properties19 = new java.util.Properties();
        java.lang.String str20 = properties19.toString();
        boolean boolean21 = properties19.isEmpty();
        java.util.Properties properties22 = new java.util.Properties();
        java.lang.String str23 = properties22.toString();
        java.lang.Object obj25 = properties22.remove((java.lang.Object) (short) 100);
        java.lang.Object obj28 = properties22.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean30 = properties22.containsKey((java.lang.Object) 0L);
        boolean boolean31 = properties19.containsValue((java.lang.Object) 0L);
        boolean boolean34 = properties18.replace((java.lang.Object) 0L, (java.lang.Object) 0.0f, (java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration35 = properties18.elements();
        java.lang.Class<?> wildcardClass36 = objEnumeration35.getClass();
        java.lang.Object obj37 = properties0.replace((java.lang.Object) 500L, (java.lang.Object) objEnumeration35);
        java.util.Properties properties38 = new java.util.Properties();
        java.lang.String str39 = properties38.toString();
        java.lang.Object obj41 = properties38.remove((java.lang.Object) (short) 100);
        java.lang.Object obj44 = properties38.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean46 = properties38.containsKey((java.lang.Object) 0L);
        java.lang.Object obj49 = properties38.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj52 = properties38.setProperty("", "{-1.0=100}");
        java.lang.String str53 = properties38.toString();
        boolean boolean54 = properties0.contains((java.lang.Object) properties38);
        java.lang.Class<?> wildcardClass55 = properties38.getClass();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{={-1.0=100}, -1.0=100}" + "'", str15, "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{}" + "'", str20, "{}");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "{}" + "'", str23, "{}");
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(objEnumeration35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "{}" + "'", str39, "{}");
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertNull(obj52);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "{={-1.0=100}, -1.0=100}" + "'", str53, "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test01262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01262");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj3 = properties0.setProperty("{}", "{}");
        java.util.Enumeration<java.lang.Object> objEnumeration4 = properties0.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties0.elements();
        java.util.Properties properties6 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties8 = atomikosProperties7.asProperties();
        atomikosProperties7.service = "{-1.0=100}";
        long long11 = atomikosProperties7.getDefaultJtaTimeout();
        atomikosProperties7.setTransactionManagerUniqueName("{}");
        atomikosProperties7.consoleFileName = "hi!";
        int int16 = atomikosProperties7.getConsoleFileLimit();
        boolean boolean17 = atomikosProperties7.isThreadedTwoPhaseCommit();
        boolean boolean18 = atomikosProperties7.allowSubTransactions;
        java.util.Properties properties19 = new java.util.Properties();
        java.util.Properties properties20 = new java.util.Properties(properties19);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties22 = atomikosProperties21.asProperties();
        atomikosProperties21.service = "{-1.0=100}";
        long long25 = atomikosProperties21.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel26 = null;
        atomikosProperties21.setConsoleLogLevel(atomikosLoggingLevel26);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel28 = null;
        atomikosProperties21.setConsoleLogLevel(atomikosLoggingLevel28);
        atomikosProperties21.setLogBaseName("{={-1.0=100}, -1.0=100}");
        boolean boolean32 = atomikosProperties21.enableLogging;
        atomikosProperties21.setOutputDir("");
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel35 = atomikosProperties21.consoleLogLevel;
        atomikosProperties21.checkpointInterval = 0L;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties38.setAllowSubTransactions(true);
        atomikosProperties38.logBaseName = "{={-1.0=100}, -1.0=100}";
        atomikosProperties38.setTransactionManagerUniqueName("");
        java.lang.Object obj45 = properties20.putIfAbsent((java.lang.Object) atomikosProperties21, (java.lang.Object) atomikosProperties38);
        java.lang.Object obj46 = properties6.getOrDefault((java.lang.Object) boolean18, (java.lang.Object) properties20);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties47 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties48 = atomikosProperties47.asProperties();
        atomikosProperties47.service = "{-1.0=100}";
        long long51 = atomikosProperties47.getDefaultJtaTimeout();
        atomikosProperties47.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties47.setMaxActives(100);
        boolean boolean56 = atomikosProperties47.enableLogging;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery57 = atomikosProperties47.recovery;
        atomikosProperties47.checkpointInterval = 300000L;
        atomikosProperties47.enableLogging = false;
        java.util.Properties properties62 = atomikosProperties47.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties63 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties63.setEnableLogging(true);
        atomikosProperties63.consoleFileCount = 0;
        int int68 = atomikosProperties63.getMaxActives();
        java.lang.String str69 = atomikosProperties63.getLogBaseDir();
        java.lang.String str70 = atomikosProperties63.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery71 = atomikosProperties63.getRecovery();
        long long72 = atomikosProperties63.getDefaultJtaTimeout();
        atomikosProperties63.allowSubTransactions = false;
        java.util.Properties properties75 = atomikosProperties63.asProperties();
        boolean boolean76 = atomikosProperties63.forceShutdownOnVmExit;
        java.lang.String str77 = atomikosProperties63.getService();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj78 = properties20.putIfAbsent((java.lang.Object) atomikosProperties47, (java.lang.Object) str77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNotNull(objEnumeration4);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10000L + "'", long11 == 10000L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(properties22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 10000L + "'", long25 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNull(atomikosLoggingLevel35);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertNotNull(properties48);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 10000L + "'", long51 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(recovery57);
        org.junit.Assert.assertNotNull(properties62);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 50 + "'", int68 == 50);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNotNull(recovery71);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 10000L + "'", long72 == 10000L);
        org.junit.Assert.assertNotNull(properties75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(str77);
    }

    @Test
    public void test01263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01263");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setAllowSubTransactions(true);
        boolean boolean3 = atomikosProperties0.enableLogging;
        boolean boolean4 = atomikosProperties0.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = atomikosProperties0.consoleLogLevel;
        atomikosProperties0.maxTimeout = 97L;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel5 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel5.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
    }

    @Test
    public void test01264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01264");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        boolean boolean7 = atomikosProperties0.isAllowSubTransactions();
        int int8 = atomikosProperties0.getConsoleFileLimit();
        boolean boolean9 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.setMaxTimeout(300000L);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery12 = atomikosProperties0.getRecovery();
        boolean boolean13 = atomikosProperties0.threadedTwoPhaseCommit;
        boolean boolean14 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.logBaseDir = "{{-1.0=100}=}";
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(recovery12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test01265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01265");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties12 = new java.util.Properties();
        java.lang.String str13 = properties12.toString();
        java.lang.Object obj15 = properties12.remove((java.lang.Object) (short) 100);
        java.lang.Object obj18 = properties12.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj19 = properties12.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration20 = properties12.elements();
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties12);
        java.lang.Object obj24 = properties12.setProperty("{={-1.0=100}, -1.0=100}", "hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery25 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery25.retryInterval = (short) 100;
        recovery25.forgetOrphanedLogEntriesDelay = 'a';
        long long30 = recovery25.getDelay();
        int int31 = recovery25.maxRetries;
        recovery25.delay = 1L;
        boolean boolean34 = properties12.contains((java.lang.Object) recovery25);
        long long35 = recovery25.retryInterval;
        recovery25.setMaxRetries((int) (short) 1);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{}" + "'", str13, "{}");
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration20);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 10000L + "'", long30 == 10000L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 5 + "'", int31 == 5);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 100L + "'", long35 == 100L);
    }

    @Test
    public void test01266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01266");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        java.util.Properties properties7 = new java.util.Properties();
        java.lang.String str8 = properties7.toString();
        java.lang.Object obj10 = properties7.remove((java.lang.Object) (short) 100);
        java.lang.Object obj13 = properties7.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj14 = properties7.clone();
        java.lang.String str16 = properties7.getProperty("{}");
        java.lang.Object obj19 = properties7.put((java.lang.Object) 86400000L, (java.lang.Object) "{-1.0=100}");
        boolean boolean20 = properties0.containsKey((java.lang.Object) properties7);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Enumeration<?> wildcardEnumeration21 = properties0.propertyNames();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.Double cannot be cast to java.lang.String");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{}" + "'", str8, "{}");
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "{1.0=-1}");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test01267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01267");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setEnableLogging(true);
        atomikosProperties0.consoleFileCount = 0;
        int int5 = atomikosProperties0.getMaxActives();
        java.lang.String str6 = atomikosProperties0.getLogBaseDir();
        java.lang.String str7 = atomikosProperties0.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery8 = atomikosProperties0.getRecovery();
        boolean boolean9 = atomikosProperties0.serialJtaTransactions;
        atomikosProperties0.setForceShutdownOnVmExit(false);
        long long12 = atomikosProperties0.checkpointInterval;
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 50 + "'", int5 == 50);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(recovery8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 500L + "'", long12 == 500L);
    }

    @Test
    public void test01268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01268");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        long long5 = atomikosProperties0.getMaxTimeout();
        java.lang.String str6 = atomikosProperties0.outputDir;
        atomikosProperties0.consoleFileName = "tm.out";
        long long9 = atomikosProperties0.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel10 = atomikosProperties0.consoleLogLevel;
        atomikosProperties0.consoleFileLimit = 'a';
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 500L + "'", long9 == 500L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel10 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel10.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
    }

    @Test
    public void test01269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01269");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj7 = properties0.clone();
        java.lang.String str9 = properties0.getProperty("{}");
        java.lang.Object obj12 = properties0.put((java.lang.Object) 86400000L, (java.lang.Object) "{-1.0=100}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties14 = atomikosProperties13.asProperties();
        atomikosProperties13.service = "{-1.0=100}";
        java.lang.String str17 = atomikosProperties13.getTransactionManagerUniqueName();
        boolean boolean18 = atomikosProperties13.isSerialJtaTransactions();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel19 = atomikosProperties13.getConsoleLogLevel();
        java.lang.Object obj20 = properties0.remove((java.lang.Object) atomikosProperties13);
        atomikosProperties13.forceShutdownOnVmExit = false;
        atomikosProperties13.service = "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}";
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{1.0=-1}");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel19 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel19.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj20);
    }

    @Test
    public void test01270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01270");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setAllowSubTransactions(true);
        boolean boolean3 = atomikosProperties0.enableLogging;
        atomikosProperties0.consoleFileLimit = (byte) 100;
        java.util.Properties properties6 = new java.util.Properties();
        java.lang.String str7 = properties6.toString();
        java.util.Properties properties8 = new java.util.Properties(properties6);
        java.util.Properties properties10 = new java.util.Properties();
        java.lang.String str11 = properties10.toString();
        java.lang.Object obj13 = properties10.remove((java.lang.Object) (short) 100);
        java.lang.Object obj16 = properties10.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean18 = properties10.containsKey((java.lang.Object) 0L);
        java.lang.Object obj21 = properties10.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties22 = new java.util.Properties(properties10);
        java.util.Enumeration<java.lang.Object> objEnumeration23 = properties22.elements();
        atomikosProperties0.set(properties8, "{={-1.0=100}, -1.0=100}", (java.lang.Object) properties22);
        atomikosProperties0.setOutputDir("hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery27 = atomikosProperties0.getRecovery();
        atomikosProperties0.setOutputDir("{={-1.0=100}, -1.0=100}");
        boolean boolean30 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.defaultJtaTimeout = 50;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "{}" + "'", str7, "{}");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "{}" + "'", str11, "{}");
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNotNull(objEnumeration23);
        org.junit.Assert.assertNotNull(recovery27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test01271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01271");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj7 = properties0.clone();
        java.lang.String str9 = properties0.getProperty("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        atomikosProperties10.service = "{-1.0=100}";
        long long14 = atomikosProperties10.getDefaultJtaTimeout();
        atomikosProperties10.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties10.setMaxActives(100);
        boolean boolean19 = atomikosProperties10.enableLogging;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery20 = atomikosProperties10.recovery;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties22 = atomikosProperties21.asProperties();
        atomikosProperties21.service = "{-1.0=100}";
        long long25 = atomikosProperties21.getDefaultJtaTimeout();
        atomikosProperties21.setMaxActives(0);
        boolean boolean28 = atomikosProperties21.threadedTwoPhaseCommit;
        boolean boolean29 = atomikosProperties21.allowSubTransactions;
        atomikosProperties21.logBaseDir = "{}";
        atomikosProperties21.service = "{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}";
        java.lang.Object obj34 = properties0.put((java.lang.Object) recovery20, (java.lang.Object) atomikosProperties21);
        atomikosProperties21.setLogBaseDir("{{}={}}");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{1.0=-1}");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10000L + "'", long14 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(recovery20);
        org.junit.Assert.assertNotNull(properties22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 10000L + "'", long25 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNull(obj34);
    }

    @Test
    public void test01272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01272");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileName = "hi!";
        atomikosProperties0.serialJtaTransactions = true;
        atomikosProperties0.outputDir = "tm.out";
        int int11 = atomikosProperties0.getConsoleFileLimit();
        atomikosProperties0.threadedTwoPhaseCommit = false;
        atomikosProperties0.setLogBaseName("{{-1.0=100}=}");
        java.lang.String str16 = atomikosProperties0.getLogBaseName();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{{-1.0=100}=}" + "'", str16, "{{-1.0=100}=}");
    }

    @Test
    public void test01273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01273");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setEnableLogging(true);
        atomikosProperties0.setConsoleFileLimit((int) (short) 0);
        atomikosProperties0.outputDir = "tmlog";
        java.lang.String str7 = atomikosProperties0.getOutputDir();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties8.setEnableLogging(true);
        atomikosProperties8.consoleFileCount = 0;
        java.util.Properties properties13 = atomikosProperties8.asProperties();
        boolean boolean14 = atomikosProperties8.isEnableLogging();
        int int15 = atomikosProperties8.getMaxActives();
        java.util.Properties properties16 = new java.util.Properties();
        java.lang.Object obj18 = properties16.remove((java.lang.Object) (-1.0d));
        int int19 = properties16.size();
        java.util.Enumeration<java.lang.Object> objEnumeration20 = properties16.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties22.setAllowSubTransactions(true);
        boolean boolean25 = atomikosProperties22.isSerialJtaTransactions();
        atomikosProperties22.setConsoleFileCount(5);
        atomikosProperties8.set(properties16, "{}", (java.lang.Object) 5);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties30 = atomikosProperties29.asProperties();
        atomikosProperties29.service = "{-1.0=100}";
        long long33 = atomikosProperties29.getDefaultJtaTimeout();
        atomikosProperties29.outputDir = "{={-1.0=100}, -1.0=100}";
        long long36 = atomikosProperties29.getCheckpointInterval();
        boolean boolean37 = atomikosProperties29.isThreadedTwoPhaseCommit();
        java.lang.String str38 = atomikosProperties29.service;
        int int39 = atomikosProperties29.consoleFileCount;
        atomikosProperties29.logBaseName = "tm.out";
        java.lang.String str42 = atomikosProperties29.getService();
        atomikosProperties29.setCheckpointInterval(300000L);
        java.lang.Object obj45 = properties16.get((java.lang.Object) atomikosProperties29);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties47 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties48 = atomikosProperties47.asProperties();
        atomikosProperties47.service = "{-1.0=100}";
        java.lang.String str51 = atomikosProperties47.getTransactionManagerUniqueName();
        atomikosProperties47.consoleFileName = "hi!";
        atomikosProperties47.service = "tm.out";
        atomikosProperties47.logBaseName = "tm.out";
        atomikosProperties47.setThreadedTwoPhaseCommit(true);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel60 = atomikosProperties47.consoleLogLevel;
        atomikosProperties47.logBaseDir = "";
        atomikosProperties0.set(properties16, "{}", (java.lang.Object) "");
        atomikosProperties0.consoleFileName = "{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}";
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "tmlog" + "'", str7, "tmlog");
        org.junit.Assert.assertNotNull(properties13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 50 + "'", int15 == 50);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(objEnumeration20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(properties30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 10000L + "'", long33 == 10000L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 500L + "'", long36 == 500L);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "{-1.0=100}" + "'", str38, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "{-1.0=100}" + "'", str42, "{-1.0=100}");
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertNotNull(properties48);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel60 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel60.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
    }

    @Test
    public void test01274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01274");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        boolean boolean7 = atomikosProperties0.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery8 = atomikosProperties0.recovery;
        long long9 = recovery8.getForgetOrphanedLogEntriesDelay();
        long long10 = recovery8.getDelay();
        long long11 = recovery8.delay;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(recovery8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 86400000L + "'", long9 == 86400000L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10000L + "'", long11 == 10000L);
    }

    @Test
    public void test01275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01275");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        int int7 = atomikosProperties0.maxActives;
        atomikosProperties0.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.getRecovery();
        atomikosProperties0.forceShutdownOnVmExit = false;
        java.util.Properties properties13 = atomikosProperties0.asProperties();
        boolean boolean14 = atomikosProperties0.isAllowSubTransactions();
        boolean boolean15 = atomikosProperties0.serialJtaTransactions;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertNotNull(properties13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test01276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01276");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties12 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration13 = properties12.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties14.outputDir = "{={-1.0=100}, -1.0=100}";
        boolean boolean17 = atomikosProperties14.isThreadedTwoPhaseCommit();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties19 = atomikosProperties18.asProperties();
        atomikosProperties18.service = "{-1.0=100}";
        long long22 = atomikosProperties18.getDefaultJtaTimeout();
        atomikosProperties18.setThreadedTwoPhaseCommit(true);
        boolean boolean25 = atomikosProperties18.isAllowSubTransactions();
        boolean boolean26 = atomikosProperties18.isEnableLogging();
        atomikosProperties18.allowSubTransactions = false;
        atomikosProperties18.threadedTwoPhaseCommit = true;
        java.lang.String str31 = atomikosProperties18.getLogBaseDir();
        java.util.Properties properties32 = new java.util.Properties();
        java.lang.String str33 = properties32.toString();
        java.lang.Object obj35 = properties32.remove((java.lang.Object) (short) 100);
        java.util.Properties properties36 = new java.util.Properties();
        java.lang.String str37 = properties36.toString();
        boolean boolean38 = properties36.isEmpty();
        java.lang.Object obj41 = properties36.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration42 = properties36.elements();
        boolean boolean43 = properties32.containsKey((java.lang.Object) properties36);
        java.util.Enumeration<?> wildcardEnumeration44 = properties32.propertyNames();
        java.util.Properties properties45 = new java.util.Properties(properties32);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties46 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties47 = atomikosProperties46.asProperties();
        atomikosProperties46.service = "{-1.0=100}";
        long long50 = atomikosProperties46.getDefaultJtaTimeout();
        boolean boolean51 = atomikosProperties46.enableLogging;
        boolean boolean52 = atomikosProperties46.isForceShutdownOnVmExit();
        atomikosProperties46.consoleFileLimit = (byte) -1;
        java.lang.String str55 = atomikosProperties46.getService();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel56 = atomikosProperties46.consoleLogLevel;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties57 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties58 = atomikosProperties57.asProperties();
        atomikosProperties57.service = "{-1.0=100}";
        long long61 = atomikosProperties57.getDefaultJtaTimeout();
        atomikosProperties57.serialJtaTransactions = true;
        long long64 = atomikosProperties57.maxTimeout;
        atomikosProperties57.setLogBaseDir("{-1.0=100}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties67 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties67.setAllowSubTransactions(true);
        atomikosProperties67.maxActives = (short) -1;
        atomikosProperties67.setService("tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties74 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties74.setAllowSubTransactions(true);
        boolean boolean77 = atomikosProperties74.enableLogging;
        boolean boolean78 = atomikosProperties74.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel79 = atomikosProperties74.consoleLogLevel;
        atomikosProperties67.setConsoleLogLevel(atomikosLoggingLevel79);
        atomikosProperties57.consoleLogLevel = atomikosLoggingLevel79;
        atomikosProperties46.consoleLogLevel = atomikosLoggingLevel79;
        boolean boolean83 = properties45.containsValue((java.lang.Object) atomikosLoggingLevel79);
        atomikosProperties18.consoleLogLevel = atomikosLoggingLevel79;
        atomikosProperties14.setConsoleLogLevel(atomikosLoggingLevel79);
        java.lang.Object obj86 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj87 = properties12.putIfAbsent((java.lang.Object) atomikosProperties14, obj86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNotNull(objEnumeration13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(properties19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 10000L + "'", long22 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "{}" + "'", str33, "{}");
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "{}" + "'", str37, "{}");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertNotNull(objEnumeration42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardEnumeration44);
        org.junit.Assert.assertNotNull(properties47);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 10000L + "'", long50 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "{-1.0=100}" + "'", str55, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel56 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel56.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(properties58);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 10000L + "'", long61 == 10000L);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 300000L + "'", long64 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel79 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel79.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test01277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01277");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setEnableLogging(true);
        atomikosProperties0.consoleFileCount = 0;
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        properties5.clear();
        int int7 = properties5.size();
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test01278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01278");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        long long7 = atomikosProperties0.getDefaultJtaTimeout();
        long long8 = atomikosProperties0.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery9 = atomikosProperties0.getRecovery();
        java.lang.String str10 = atomikosProperties0.outputDir;
        long long11 = atomikosProperties0.maxTimeout;
        atomikosProperties0.setCheckpointInterval(300000L);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(recovery9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 300000L + "'", long11 == 300000L);
    }

    @Test
    public void test01279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01279");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.remove((java.lang.Object) (-1.0d));
        boolean boolean3 = properties0.isEmpty();
        int int4 = properties0.size();
        java.util.Map<java.lang.Object, java.lang.Object> objMap5 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.putAll(objMap5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test01280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01280");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        int int7 = properties0.size();
        int int8 = properties0.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties10 = atomikosProperties9.asProperties();
        atomikosProperties9.service = "{-1.0=100}";
        java.lang.String str13 = atomikosProperties9.getTransactionManagerUniqueName();
        atomikosProperties9.consoleFileName = "hi!";
        atomikosProperties9.setCheckpointInterval((long) 5);
        atomikosProperties9.setLogBaseDir("{-1.0=100}");
        java.lang.String str20 = atomikosProperties9.transactionManagerUniqueName;
        java.lang.Object obj21 = properties0.get((java.lang.Object) atomikosProperties9);
        java.lang.String str22 = atomikosProperties9.getOutputDir();
        atomikosProperties9.setConsoleFileLimit(0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test01281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01281");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.remove((java.lang.Object) (-1.0d));
        boolean boolean3 = properties0.isEmpty();
        int int4 = properties0.size();
        java.util.Properties properties5 = new java.util.Properties();
        properties5.clear();
        java.lang.String str7 = properties5.toString();
        java.lang.Object obj8 = properties5.clone();
        java.util.Properties properties9 = new java.util.Properties();
        java.lang.Object obj11 = properties9.remove((java.lang.Object) (-1.0d));
        boolean boolean12 = properties9.isEmpty();
        int int13 = properties9.size();
        java.lang.String str15 = properties9.getProperty("{}");
        java.util.Set<java.lang.Object> objSet16 = properties9.keySet();
        boolean boolean18 = properties9.containsKey((java.lang.Object) (short) 1);
        int int19 = properties9.size();
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties9);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties23 = atomikosProperties22.asProperties();
        atomikosProperties22.service = "{-1.0=100}";
        long long26 = atomikosProperties22.getDefaultJtaTimeout();
        atomikosProperties22.setThreadedTwoPhaseCommit(true);
        boolean boolean29 = atomikosProperties22.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery30 = atomikosProperties22.recovery;
        atomikosProperties22.setLogBaseDir("");
        long long33 = atomikosProperties22.maxTimeout;
        atomikosProperties22.setConsoleFileLimit(0);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel36 = atomikosProperties22.getConsoleLogLevel();
        java.lang.Object obj37 = properties5.remove((java.lang.Object) atomikosProperties22);
        boolean boolean38 = atomikosProperties22.isForceShutdownOnVmExit();
        java.util.Properties properties39 = atomikosProperties22.asProperties();
        atomikosProperties22.logBaseDir = "{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}";
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "{}" + "'", str7, "{}");
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "{}");
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(objSet16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(properties23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 10000L + "'", long26 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(recovery30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 300000L + "'", long33 == 300000L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel36 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel36.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(properties39);
    }

    @Test
    public void test01282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01282");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj14 = properties0.setProperty("", "{-1.0=100}");
        java.lang.Object obj15 = properties0.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery16 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery16.retryInterval = (short) 100;
        recovery16.forgetOrphanedLogEntriesDelay = 'a';
        boolean boolean21 = properties0.equals((java.lang.Object) 'a');
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery22 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery22.retryInterval = (short) 100;
        recovery22.forgetOrphanedLogEntriesDelay = 'a';
        long long27 = recovery22.getDelay();
        int int28 = recovery22.maxRetries;
        int int29 = recovery22.maxRetries;
        long long30 = recovery22.getRetryInterval();
        java.util.Properties properties31 = new java.util.Properties();
        java.util.Enumeration<?> wildcardEnumeration32 = properties31.propertyNames();
        java.lang.Object obj33 = properties0.put((java.lang.Object) long30, (java.lang.Object) wildcardEnumeration32);
        java.lang.String str35 = properties0.getProperty("hi!");
        java.lang.Object obj38 = properties0.setProperty("{1.0=-1}", "{1.0=-1}");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Enumeration<?> wildcardEnumeration39 = properties0.propertyNames();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.Long cannot be cast to java.lang.String");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(obj15);
// flaky:         org.junit.Assert.assertEquals(obj15.toString(), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10000L + "'", long27 == 10000L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5 + "'", int28 == 5);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5 + "'", int29 == 5);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 100L + "'", long30 == 100L);
        org.junit.Assert.assertNotNull(wildcardEnumeration32);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(obj38);
    }

    @Test
    public void test01283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01283");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        atomikosProperties2.service = "{-1.0=100}";
        long long6 = atomikosProperties2.getDefaultJtaTimeout();
        atomikosProperties2.consoleFileLimit = '#';
        java.lang.Object obj9 = properties1.get((java.lang.Object) atomikosProperties2);
        boolean boolean10 = atomikosProperties2.forceShutdownOnVmExit;
        atomikosProperties2.setOutputDir("");
        long long13 = atomikosProperties2.defaultJtaTimeout;
        java.lang.String str14 = atomikosProperties2.getLogBaseName();
        java.lang.String str15 = atomikosProperties2.logBaseName;
        int int16 = atomikosProperties2.getConsoleFileLimit();
        atomikosProperties2.setMaxTimeout(1L);
        java.lang.String str19 = atomikosProperties2.outputDir;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10000L + "'", long13 == 10000L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "tmlog" + "'", str14, "tmlog");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "tmlog" + "'", str15, "tmlog");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 35 + "'", int16 == 35);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test01284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01284");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties();
        java.lang.String str2 = properties1.toString();
        java.lang.Object obj4 = properties1.remove((java.lang.Object) (short) 100);
        java.lang.Object obj7 = properties1.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        int int8 = properties1.size();
        java.util.Properties properties9 = new java.util.Properties();
        java.lang.Object obj11 = properties9.remove((java.lang.Object) (-1.0d));
        boolean boolean12 = properties9.isEmpty();
        java.lang.Object obj15 = properties9.setProperty("hi!", "{}");
        boolean boolean16 = properties0.remove((java.lang.Object) int8, (java.lang.Object) properties9);
        java.util.Enumeration<java.lang.Object> objEnumeration17 = properties0.keys();
        java.util.Properties properties18 = new java.util.Properties();
        properties18.clear();
        java.lang.String str20 = properties18.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties21.setEnableLogging(true);
        atomikosProperties21.consoleFileCount = 0;
        int int26 = atomikosProperties21.getMaxActives();
        java.lang.String str27 = atomikosProperties21.getLogBaseDir();
        java.lang.String str28 = atomikosProperties21.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery29 = atomikosProperties21.getRecovery();
        long long30 = atomikosProperties21.getDefaultJtaTimeout();
        int int31 = atomikosProperties21.getMaxActives();
        atomikosProperties21.consoleFileLimit = 50;
        boolean boolean34 = atomikosProperties21.isEnableLogging();
        atomikosProperties21.maxActives = (short) 10;
        atomikosProperties21.setLogBaseName("hi!");
        java.lang.Object obj39 = properties0.replace((java.lang.Object) properties18, (java.lang.Object) "hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties41 = atomikosProperties40.asProperties();
        atomikosProperties40.service = "{-1.0=100}";
        long long44 = atomikosProperties40.getDefaultJtaTimeout();
        atomikosProperties40.outputDir = "{={-1.0=100}, -1.0=100}";
        long long47 = atomikosProperties40.getCheckpointInterval();
        boolean boolean48 = atomikosProperties40.isThreadedTwoPhaseCommit();
        java.lang.String str49 = atomikosProperties40.service;
        int int50 = atomikosProperties40.consoleFileCount;
        atomikosProperties40.logBaseName = "tm.out";
        java.lang.String str53 = atomikosProperties40.getService();
        java.lang.String str54 = atomikosProperties40.logBaseName;
        long long55 = atomikosProperties40.defaultJtaTimeout;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery56 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery56.retryInterval = (short) 100;
        recovery56.delay = (-1L);
        long long61 = recovery56.delay;
        int int62 = recovery56.getMaxRetries();
        recovery56.setForgetOrphanedLogEntriesDelay((long) (byte) 0);
        long long65 = recovery56.getForgetOrphanedLogEntriesDelay();
        recovery56.setDelay(5L);
        java.lang.Object obj68 = properties18.getOrDefault((java.lang.Object) atomikosProperties40, (java.lang.Object) 5L);
        java.io.OutputStream outputStream69 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties18.storeToXML(outputStream69, "{com.atomikos.icatch.={}, 100=100}", "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{}" + "'", str2, "{}");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objEnumeration17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{}" + "'", str20, "{}");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 50 + "'", int26 == 50);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(recovery29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 10000L + "'", long30 == 10000L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 50 + "'", int31 == 50);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNotNull(properties41);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 10000L + "'", long44 == 10000L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 500L + "'", long47 == 500L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "{-1.0=100}" + "'", str49, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "{-1.0=100}" + "'", str53, "{-1.0=100}");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "tm.out" + "'", str54, "tm.out");
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 10000L + "'", long55 == 10000L);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + (-1L) + "'", long61 == (-1L));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 5 + "'", int62 == 5);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertEquals("'" + obj68 + "' != '" + 5L + "'", obj68, 5L);
    }

    @Test
    public void test01285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01285");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj7 = properties0.clone();
        java.util.Properties properties8 = new java.util.Properties();
        java.lang.Object obj10 = properties8.remove((java.lang.Object) (-1.0d));
        boolean boolean11 = properties8.isEmpty();
        int int12 = properties8.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery13 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery13.retryInterval = (short) 100;
        recovery13.forgetOrphanedLogEntriesDelay = 'a';
        java.util.Properties properties18 = new java.util.Properties();
        java.lang.Object obj20 = properties18.remove((java.lang.Object) (-1.0d));
        boolean boolean21 = properties18.isEmpty();
        int int22 = properties18.size();
        java.lang.String str24 = properties18.getProperty("{}");
        boolean boolean25 = properties8.remove((java.lang.Object) recovery13, (java.lang.Object) properties18);
        boolean boolean26 = properties0.containsValue((java.lang.Object) properties8);
        java.lang.String str27 = properties0.toString();
        java.io.Writer writer28 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.store(writer28, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{1.0=-1}");
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "{1.0=-1}" + "'", str27, "{1.0=-1}");
    }

    @Test
    public void test01286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01286");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileName = "hi!";
        atomikosProperties0.allowSubTransactions = true;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test01287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01287");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setAllowSubTransactions(true);
        boolean boolean3 = atomikosProperties0.enableLogging;
        atomikosProperties0.consoleFileLimit = (byte) 100;
        java.util.Properties properties6 = new java.util.Properties();
        java.lang.String str7 = properties6.toString();
        java.util.Properties properties8 = new java.util.Properties(properties6);
        java.util.Properties properties10 = new java.util.Properties();
        java.lang.String str11 = properties10.toString();
        java.lang.Object obj13 = properties10.remove((java.lang.Object) (short) 100);
        java.lang.Object obj16 = properties10.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean18 = properties10.containsKey((java.lang.Object) 0L);
        java.lang.Object obj21 = properties10.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties22 = new java.util.Properties(properties10);
        java.util.Enumeration<java.lang.Object> objEnumeration23 = properties22.elements();
        atomikosProperties0.set(properties8, "{={-1.0=100}, -1.0=100}", (java.lang.Object) properties22);
        atomikosProperties0.setOutputDir("hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery27 = atomikosProperties0.getRecovery();
        long long28 = recovery27.getRetryInterval();
        long long29 = recovery27.retryInterval;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "{}" + "'", str7, "{}");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "{}" + "'", str11, "{}");
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNotNull(objEnumeration23);
        org.junit.Assert.assertNotNull(recovery27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 10000L + "'", long28 == 10000L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 10000L + "'", long29 == 10000L);
    }

    @Test
    public void test01288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01288");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        int int7 = atomikosProperties0.maxActives;
        atomikosProperties0.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.getRecovery();
        atomikosProperties0.forceShutdownOnVmExit = false;
        java.lang.String str13 = atomikosProperties0.service;
        atomikosProperties0.allowSubTransactions = false;
        atomikosProperties0.enableLogging = false;
        atomikosProperties0.enableLogging = false;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{-1.0=100}" + "'", str13, "{-1.0=100}");
    }

    @Test
    public void test01289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01289");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        boolean boolean2 = properties0.isEmpty();
        java.lang.Object obj5 = properties0.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Properties properties6 = new java.util.Properties();
        java.lang.String str7 = properties6.toString();
        java.lang.Object obj9 = properties6.remove((java.lang.Object) (short) 100);
        java.lang.Object obj12 = properties6.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean14 = properties6.containsKey((java.lang.Object) 0L);
        java.lang.Object obj17 = properties6.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties18 = new java.util.Properties(properties6);
        boolean boolean19 = properties0.containsValue((java.lang.Object) properties6);
        java.util.Set<java.lang.String> strSet20 = properties0.stringPropertyNames();
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.String str22 = properties21.toString();
        java.lang.Object obj24 = properties21.remove((java.lang.Object) (short) 100);
        java.lang.Object obj27 = properties21.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        java.util.Properties properties29 = new java.util.Properties();
        java.lang.String str30 = properties29.toString();
        java.lang.Object obj32 = properties29.remove((java.lang.Object) (short) 100);
        java.lang.Object obj35 = properties29.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj36 = properties29.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration37 = properties29.elements();
        java.lang.Object obj38 = properties21.putIfAbsent((java.lang.Object) 10.0f, (java.lang.Object) objEnumeration37);
        java.util.Properties properties39 = new java.util.Properties();
        java.util.Enumeration<?> wildcardEnumeration40 = properties39.propertyNames();
        java.lang.Object obj41 = properties39.clone();
        java.util.Properties properties42 = new java.util.Properties();
        java.lang.String str43 = properties42.toString();
        boolean boolean44 = properties42.isEmpty();
        java.lang.Object obj47 = properties42.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration48 = properties42.elements();
        java.lang.Object obj49 = properties21.put(obj41, (java.lang.Object) objEnumeration48);
        properties21.clear();
        java.util.Properties properties51 = new java.util.Properties();
        java.lang.Object obj53 = properties51.remove((java.lang.Object) (-1.0d));
        boolean boolean54 = properties51.isEmpty();
        int int55 = properties51.size();
        java.lang.String str57 = properties51.getProperty("{}");
        java.util.Properties properties58 = new java.util.Properties();
        java.lang.String str59 = properties58.toString();
        java.lang.Object obj61 = properties58.remove((java.lang.Object) (short) 100);
        java.lang.Object obj64 = properties58.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean66 = properties58.containsKey((java.lang.Object) 0L);
        java.lang.Object obj69 = properties58.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties70 = new java.util.Properties(properties58);
        java.util.Enumeration<java.lang.Object> objEnumeration71 = properties58.keys();
        java.lang.Object obj72 = properties21.replace((java.lang.Object) properties51, (java.lang.Object) properties58);
        java.util.Properties properties73 = new java.util.Properties();
        java.util.Properties properties74 = new java.util.Properties();
        java.lang.String str75 = properties74.toString();
        java.lang.Object obj77 = properties74.remove((java.lang.Object) (short) 100);
        java.lang.Object obj80 = properties74.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        int int81 = properties74.size();
        java.util.Properties properties82 = new java.util.Properties();
        java.lang.Object obj84 = properties82.remove((java.lang.Object) (-1.0d));
        boolean boolean85 = properties82.isEmpty();
        java.lang.Object obj88 = properties82.setProperty("hi!", "{}");
        boolean boolean89 = properties73.remove((java.lang.Object) int81, (java.lang.Object) properties82);
        java.lang.Object obj90 = properties21.get((java.lang.Object) boolean89);
        java.util.Enumeration<java.lang.Object> objEnumeration91 = properties21.keys();
        boolean boolean92 = properties0.contains((java.lang.Object) properties21);
        java.util.Collection<java.lang.Object> objCollection93 = properties21.values();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "{}" + "'", str7, "{}");
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{}" + "'", str22, "{}");
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "{}" + "'", str30, "{}");
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration37);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertNotNull(wildcardEnumeration40);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals(obj41.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "{}");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "{}" + "'", str43, "{}");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNotNull(objEnumeration48);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "{}" + "'", str59, "{}");
        org.junit.Assert.assertNull(obj61);
        org.junit.Assert.assertNull(obj64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(obj69);
        org.junit.Assert.assertNotNull(objEnumeration71);
        org.junit.Assert.assertNull(obj72);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "{}" + "'", str75, "{}");
        org.junit.Assert.assertNull(obj77);
        org.junit.Assert.assertNull(obj80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNull(obj84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNull(obj88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNull(obj90);
        org.junit.Assert.assertNotNull(objEnumeration91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(objCollection93);
    }

    @Test
    public void test01290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01290");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        long long7 = atomikosProperties0.getDefaultJtaTimeout();
        long long8 = atomikosProperties0.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery9 = atomikosProperties0.getRecovery();
        long long10 = recovery9.delay;
        recovery9.maxRetries = (-1);
        long long13 = recovery9.getRetryInterval();
        long long14 = recovery9.getDelay();
        recovery9.forgetOrphanedLogEntriesDelay = 10L;
        java.lang.Class<?> wildcardClass17 = recovery9.getClass();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(recovery9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10000L + "'", long13 == 10000L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10000L + "'", long14 == 10000L);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test01291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01291");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        int int5 = atomikosProperties0.getConsoleFileCount();
        atomikosProperties0.setDefaultJtaTimeout((long) ' ');
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel8 = null;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel8;
        boolean boolean10 = atomikosProperties0.isThreadedTwoPhaseCommit();
        atomikosProperties0.enableLogging = false;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test01292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01292");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.remove((java.lang.Object) (-1.0d));
        boolean boolean3 = properties0.isEmpty();
        int int4 = properties0.size();
        java.io.OutputStream outputStream5 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.save(outputStream5, "{1.0=-1}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test01293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01293");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj7 = properties0.clone();
        java.util.Set<java.lang.String> strSet8 = properties0.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery9 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery9.retryInterval = (short) 100;
        recovery9.delay = (-1L);
        long long14 = recovery9.delay;
        recovery9.delay = (short) 1;
        long long17 = recovery9.getRetryInterval();
        int int18 = recovery9.maxRetries;
        int int19 = recovery9.maxRetries;
        long long20 = recovery9.forgetOrphanedLogEntriesDelay;
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.Object obj23 = properties21.remove((java.lang.Object) (-1.0d));
        boolean boolean24 = properties21.isEmpty();
        int int25 = properties21.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery26 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery26.retryInterval = (short) 100;
        recovery26.forgetOrphanedLogEntriesDelay = 'a';
        java.util.Properties properties31 = new java.util.Properties();
        java.lang.Object obj33 = properties31.remove((java.lang.Object) (-1.0d));
        boolean boolean34 = properties31.isEmpty();
        int int35 = properties31.size();
        java.lang.String str37 = properties31.getProperty("{}");
        boolean boolean38 = properties21.remove((java.lang.Object) recovery26, (java.lang.Object) properties31);
        java.lang.Object obj39 = properties0.putIfAbsent((java.lang.Object) long20, (java.lang.Object) properties21);
        java.util.Enumeration<java.lang.Object> objEnumeration40 = properties0.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties42 = atomikosProperties41.asProperties();
        atomikosProperties41.service = "{-1.0=100}";
        long long45 = atomikosProperties41.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel46 = null;
        atomikosProperties41.setConsoleLogLevel(atomikosLoggingLevel46);
        int int48 = atomikosProperties41.maxActives;
        atomikosProperties41.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery51 = atomikosProperties41.getRecovery();
        atomikosProperties41.consoleFileName = "{-1.0=100}";
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel54 = null;
        atomikosProperties41.setConsoleLogLevel(atomikosLoggingLevel54);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel56 = atomikosProperties41.getConsoleLogLevel();
        int int57 = atomikosProperties41.consoleFileLimit;
        atomikosProperties41.setDefaultJtaTimeout((long) 'a');
        java.lang.String str60 = atomikosProperties41.getConsoleFileName();
        boolean boolean61 = properties0.equals((java.lang.Object) atomikosProperties41);
        java.util.Set<java.lang.Object> objSet62 = properties0.keySet();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{1.0=-1}");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 100L + "'", long17 == 100L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5 + "'", int18 == 5);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 5 + "'", int19 == 5);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 86400000L + "'", long20 == 86400000L);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNotNull(objEnumeration40);
        org.junit.Assert.assertNotNull(properties42);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 10000L + "'", long45 == 10000L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 50 + "'", int48 == 50);
        org.junit.Assert.assertNotNull(recovery51);
        org.junit.Assert.assertNull(atomikosLoggingLevel56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "{-1.0=100}" + "'", str60, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(objSet62);
    }

    @Test
    public void test01294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01294");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setEnableLogging(true);
        atomikosProperties0.setConsoleFileLimit((int) (short) 0);
        atomikosProperties0.outputDir = "tmlog";
        java.lang.String str7 = atomikosProperties0.getOutputDir();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties8.setEnableLogging(true);
        atomikosProperties8.consoleFileCount = 0;
        java.util.Properties properties13 = atomikosProperties8.asProperties();
        boolean boolean14 = atomikosProperties8.isEnableLogging();
        int int15 = atomikosProperties8.getMaxActives();
        java.util.Properties properties16 = new java.util.Properties();
        java.lang.Object obj18 = properties16.remove((java.lang.Object) (-1.0d));
        int int19 = properties16.size();
        java.util.Enumeration<java.lang.Object> objEnumeration20 = properties16.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties22.setAllowSubTransactions(true);
        boolean boolean25 = atomikosProperties22.isSerialJtaTransactions();
        atomikosProperties22.setConsoleFileCount(5);
        atomikosProperties8.set(properties16, "{}", (java.lang.Object) 5);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties30 = atomikosProperties29.asProperties();
        atomikosProperties29.service = "{-1.0=100}";
        long long33 = atomikosProperties29.getDefaultJtaTimeout();
        atomikosProperties29.outputDir = "{={-1.0=100}, -1.0=100}";
        long long36 = atomikosProperties29.getCheckpointInterval();
        boolean boolean37 = atomikosProperties29.isThreadedTwoPhaseCommit();
        java.lang.String str38 = atomikosProperties29.service;
        int int39 = atomikosProperties29.consoleFileCount;
        atomikosProperties29.logBaseName = "tm.out";
        java.lang.String str42 = atomikosProperties29.getService();
        atomikosProperties29.setCheckpointInterval(300000L);
        java.lang.Object obj45 = properties16.get((java.lang.Object) atomikosProperties29);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties47 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties48 = atomikosProperties47.asProperties();
        atomikosProperties47.service = "{-1.0=100}";
        java.lang.String str51 = atomikosProperties47.getTransactionManagerUniqueName();
        atomikosProperties47.consoleFileName = "hi!";
        atomikosProperties47.service = "tm.out";
        atomikosProperties47.logBaseName = "tm.out";
        atomikosProperties47.setThreadedTwoPhaseCommit(true);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel60 = atomikosProperties47.consoleLogLevel;
        atomikosProperties47.logBaseDir = "";
        atomikosProperties0.set(properties16, "{}", (java.lang.Object) "");
        java.util.Properties properties64 = new java.util.Properties(properties16);
        java.io.OutputStream outputStream65 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties64.storeToXML(outputStream65, "{tmlog=hi!, com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "tmlog" + "'", str7, "tmlog");
        org.junit.Assert.assertNotNull(properties13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 50 + "'", int15 == 50);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(objEnumeration20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(properties30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 10000L + "'", long33 == 10000L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 500L + "'", long36 == 500L);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "{-1.0=100}" + "'", str38, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "{-1.0=100}" + "'", str42, "{-1.0=100}");
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertNotNull(properties48);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel60 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel60.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
    }

    @Test
    public void test01295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01295");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties();
        java.lang.String str2 = properties1.toString();
        java.lang.Object obj4 = properties1.remove((java.lang.Object) (short) 100);
        java.lang.Object obj7 = properties1.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        int int8 = properties1.size();
        java.util.Properties properties9 = new java.util.Properties();
        java.lang.Object obj11 = properties9.remove((java.lang.Object) (-1.0d));
        boolean boolean12 = properties9.isEmpty();
        java.lang.Object obj15 = properties9.setProperty("hi!", "{}");
        boolean boolean16 = properties0.remove((java.lang.Object) int8, (java.lang.Object) properties9);
        java.util.Properties properties17 = new java.util.Properties();
        java.lang.String str18 = properties17.toString();
        java.lang.Object obj20 = properties17.remove((java.lang.Object) (short) 100);
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.String str22 = properties21.toString();
        boolean boolean23 = properties21.isEmpty();
        java.lang.Object obj26 = properties21.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties21.elements();
        boolean boolean28 = properties17.containsKey((java.lang.Object) properties21);
        boolean boolean29 = properties9.contains((java.lang.Object) boolean28);
        java.util.Set<java.lang.String> strSet30 = properties9.stringPropertyNames();
        java.io.Reader reader31 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties9.load(reader31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{}" + "'", str2, "{}");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "{}" + "'", str18, "{}");
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{}" + "'", str22, "{}");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strSet30);
    }

    @Test
    public void test01296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01296");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        long long5 = atomikosProperties0.getMaxTimeout();
        int int6 = atomikosProperties0.consoleFileCount;
        long long7 = atomikosProperties0.getCheckpointInterval();
        java.lang.String str8 = atomikosProperties0.outputDir;
        atomikosProperties0.setEnableLogging(false);
        atomikosProperties0.setForceShutdownOnVmExit(true);
        atomikosProperties0.threadedTwoPhaseCommit = false;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test01297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01297");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj7 = properties0.clone();
        java.util.Set<java.lang.String> strSet8 = properties0.stringPropertyNames();
        java.util.Properties properties9 = new java.util.Properties();
        java.lang.String str10 = properties9.toString();
        java.lang.Object obj12 = properties9.remove((java.lang.Object) (short) 100);
        java.lang.Object obj15 = properties9.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean17 = properties9.containsKey((java.lang.Object) 0L);
        java.lang.Object obj20 = properties9.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.String str22 = properties21.toString();
        java.lang.Object obj24 = properties21.remove((java.lang.Object) (short) 100);
        java.lang.Object obj27 = properties21.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj28 = properties21.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration29 = properties21.elements();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties21);
        java.util.Properties properties31 = new java.util.Properties();
        java.lang.String str32 = properties31.toString();
        java.lang.Object obj34 = properties31.remove((java.lang.Object) (short) 100);
        java.lang.Object obj37 = properties31.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean39 = properties31.containsKey((java.lang.Object) 0L);
        java.lang.Object obj42 = properties31.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties43 = new java.util.Properties();
        java.lang.String str44 = properties43.toString();
        java.lang.Object obj46 = properties43.remove((java.lang.Object) (short) 100);
        java.lang.Object obj49 = properties43.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj50 = properties43.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration51 = properties43.elements();
        properties31.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties43);
        java.lang.Object obj53 = properties0.putIfAbsent((java.lang.Object) properties9, (java.lang.Object) properties43);
        java.util.Properties properties54 = new java.util.Properties();
        java.lang.String str55 = properties54.toString();
        java.lang.Object obj57 = properties54.remove((java.lang.Object) (short) 100);
        java.lang.Object obj60 = properties54.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean62 = properties54.containsKey((java.lang.Object) 0L);
        java.lang.Object obj65 = properties54.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj68 = properties54.setProperty("", "{-1.0=100}");
        java.util.Enumeration<java.lang.Object> objEnumeration69 = properties54.keys();
        boolean boolean70 = properties43.contains((java.lang.Object) properties54);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery71 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery71.retryInterval = (short) 100;
        recovery71.setRetryInterval((long) (short) -1);
        java.lang.Object obj77 = properties54.getOrDefault((java.lang.Object) recovery71, (java.lang.Object) (byte) 10);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery78 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        java.lang.Object obj79 = properties54.get((java.lang.Object) recovery78);
        java.io.OutputStream outputStream80 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties54.save(outputStream80, "{1.0=-1, -1.0=100}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{1.0=-1}");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "{}" + "'", str10, "{}");
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{}" + "'", str22, "{}");
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "{}" + "'", str32, "{}");
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "{}" + "'", str44, "{}");
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertEquals(obj50.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj50), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj50), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration51);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "{}" + "'", str55, "{}");
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertNull(obj68);
        org.junit.Assert.assertNotNull(objEnumeration69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + obj77 + "' != '" + (byte) 10 + "'", obj77, (byte) 10);
        org.junit.Assert.assertNull(obj79);
    }

    @Test
    public void test01298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01298");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.consoleFileLimit = '#';
        atomikosProperties0.setLogBaseName("{={-1.0=100}, -1.0=100}");
        java.lang.String str9 = atomikosProperties0.outputDir;
        atomikosProperties0.setConsoleFileLimit((int) (byte) -1);
        atomikosProperties0.setLogBaseDir("{1.0=-1, -1.0=100}");
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test01299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01299");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long1 = recovery0.getRetryInterval();
        long long2 = recovery0.getDelay();
        long long3 = recovery0.getDelay();
        recovery0.setForgetOrphanedLogEntriesDelay(10000L);
        recovery0.retryInterval = '4';
        long long8 = recovery0.forgetOrphanedLogEntriesDelay;
        long long9 = recovery0.retryInterval;
        long long10 = recovery0.forgetOrphanedLogEntriesDelay;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 10000L + "'", long1 == 10000L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10000L + "'", long2 == 10000L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 10000L + "'", long3 == 10000L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 10000L + "'", long8 == 10000L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 52L + "'", long9 == 52L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
    }

    @Test
    public void test01300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01300");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        atomikosProperties0.setConsoleFileCount((int) (byte) 100);
        atomikosProperties0.setAllowSubTransactions(true);
        atomikosProperties0.setService("tm.out");
        java.lang.String str12 = atomikosProperties0.outputDir;
        java.lang.String str13 = atomikosProperties0.getTransactionManagerUniqueName();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test01301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01301");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        atomikosProperties0.setConsoleFileCount((int) (byte) 100);
        atomikosProperties0.setAllowSubTransactions(true);
        atomikosProperties0.setService("tm.out");
        java.lang.String str12 = atomikosProperties0.outputDir;
        int int13 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel14 = atomikosProperties0.getConsoleLogLevel();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 50 + "'", int13 == 50);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel14 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel14.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
    }

    @Test
    public void test01302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01302");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        java.util.Properties properties2 = new java.util.Properties();
        java.lang.Object obj4 = properties2.remove((java.lang.Object) (-1.0d));
        boolean boolean5 = properties2.isEmpty();
        int int6 = properties2.size();
        java.lang.String str8 = properties2.getProperty("{}");
        java.lang.Object obj9 = properties1.remove((java.lang.Object) properties2);
        java.util.Properties properties10 = new java.util.Properties();
        java.lang.String str11 = properties10.toString();
        java.util.Properties properties12 = new java.util.Properties(properties10);
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        java.io.PrintWriter printWriter14 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.list(printWriter14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "{}" + "'", str11, "{}");
    }

    @Test
    public void test01303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01303");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        int int7 = atomikosProperties0.maxActives;
        atomikosProperties0.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.getRecovery();
        atomikosProperties0.forceShutdownOnVmExit = false;
        java.util.Properties properties13 = atomikosProperties0.asProperties();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet14 = properties13.entrySet();
        java.util.Properties properties15 = new java.util.Properties();
        properties15.clear();
        java.lang.String str17 = properties15.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery18 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery18.retryInterval = (short) 100;
        recovery18.setForgetOrphanedLogEntriesDelay((long) 5);
        recovery18.setRetryInterval((long) (-1));
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery25 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery25.retryInterval = (short) 100;
        recovery25.forgetOrphanedLogEntriesDelay = 'a';
        long long30 = recovery25.retryInterval;
        recovery25.forgetOrphanedLogEntriesDelay = 0L;
        java.lang.Object obj33 = properties15.put((java.lang.Object) (-1), (java.lang.Object) recovery25);
        boolean boolean34 = properties15.isEmpty();
        java.util.Properties properties35 = new java.util.Properties();
        java.util.Properties properties36 = new java.util.Properties();
        java.lang.String str37 = properties36.toString();
        boolean boolean38 = properties36.isEmpty();
        java.util.Properties properties39 = new java.util.Properties();
        java.lang.String str40 = properties39.toString();
        java.lang.Object obj42 = properties39.remove((java.lang.Object) (short) 100);
        java.lang.Object obj45 = properties39.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean47 = properties39.containsKey((java.lang.Object) 0L);
        boolean boolean48 = properties36.containsValue((java.lang.Object) 0L);
        boolean boolean51 = properties35.replace((java.lang.Object) 0L, (java.lang.Object) 0.0f, (java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration52 = properties35.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties53 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties54 = atomikosProperties53.asProperties();
        atomikosProperties53.service = "{-1.0=100}";
        java.lang.String str57 = atomikosProperties53.getTransactionManagerUniqueName();
        boolean boolean58 = atomikosProperties53.isSerialJtaTransactions();
        java.lang.String str59 = atomikosProperties53.logBaseName;
        boolean boolean60 = properties15.remove((java.lang.Object) properties35, (java.lang.Object) str59);
        java.util.Properties properties61 = new java.util.Properties();
        java.lang.String str62 = properties61.toString();
        java.lang.Object obj64 = properties61.remove((java.lang.Object) (short) 100);
        java.lang.Object obj67 = properties61.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj68 = properties61.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration69 = properties61.elements();
        java.util.Properties properties70 = new java.util.Properties();
        java.lang.String str71 = properties70.toString();
        java.lang.Object obj73 = properties70.remove((java.lang.Object) (short) 100);
        java.lang.Object obj76 = properties70.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj77 = properties70.clone();
        java.util.Set<java.lang.String> strSet78 = properties70.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties79 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties80 = atomikosProperties79.asProperties();
        atomikosProperties79.service = "{-1.0=100}";
        java.lang.String str83 = atomikosProperties79.getTransactionManagerUniqueName();
        atomikosProperties79.consoleFileName = "hi!";
        atomikosProperties79.service = "tm.out";
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties88 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties88.setAllowSubTransactions(true);
        java.lang.String str91 = atomikosProperties88.transactionManagerUniqueName;
        int int92 = atomikosProperties88.getConsoleFileLimit();
        boolean boolean93 = properties70.remove((java.lang.Object) "tm.out", (java.lang.Object) atomikosProperties88);
        boolean boolean94 = properties13.replace((java.lang.Object) boolean60, (java.lang.Object) properties61, (java.lang.Object) boolean93);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Enumeration<?> wildcardEnumeration95 = properties61.propertyNames();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.Float cannot be cast to java.lang.String");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertNotNull(properties13);
        org.junit.Assert.assertNotNull(objEntrySet14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "{}" + "'", str17, "{}");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 100L + "'", long30 == 100L);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "{}" + "'", str37, "{}");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "{}" + "'", str40, "{}");
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(objEnumeration52);
        org.junit.Assert.assertNotNull(properties54);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "tmlog" + "'", str59, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "{}" + "'", str62, "{}");
        org.junit.Assert.assertNull(obj64);
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertNotNull(obj68);
        org.junit.Assert.assertEquals(obj68.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj68), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj68), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration69);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "{}" + "'", str71, "{}");
        org.junit.Assert.assertNull(obj73);
        org.junit.Assert.assertNull(obj76);
        org.junit.Assert.assertNotNull(obj77);
        org.junit.Assert.assertEquals(obj77.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj77), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj77), "{1.0=-1}");
        org.junit.Assert.assertNotNull(strSet78);
        org.junit.Assert.assertNotNull(properties80);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNull(str91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-1) + "'", int92 == (-1));
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test01304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01304");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        int int7 = atomikosProperties0.maxActives;
        atomikosProperties0.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.getRecovery();
        atomikosProperties0.forceShutdownOnVmExit = false;
        long long13 = atomikosProperties0.checkpointInterval;
        int int14 = atomikosProperties0.getConsoleFileLimit();
        long long15 = atomikosProperties0.defaultJtaTimeout;
        java.lang.String str16 = atomikosProperties0.consoleFileName;
        atomikosProperties0.setTransactionManagerUniqueName("{={-1.0=100}, -1.0=100}");
        boolean boolean19 = atomikosProperties0.isAllowSubTransactions();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 500L + "'", long13 == 500L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10000L + "'", long15 == 10000L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tm.out" + "'", str16, "tm.out");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test01305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01305");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        atomikosProperties2.service = "{-1.0=100}";
        long long6 = atomikosProperties2.getDefaultJtaTimeout();
        atomikosProperties2.consoleFileLimit = '#';
        java.lang.Object obj9 = properties1.get((java.lang.Object) atomikosProperties2);
        java.lang.Object obj10 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean11 = properties1.containsValue(obj10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertNull(obj9);
    }

    @Test
    public void test01306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01306");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setAllowSubTransactions(true);
        boolean boolean3 = atomikosProperties0.enableLogging;
        atomikosProperties0.consoleFileLimit = (byte) 100;
        java.util.Properties properties6 = new java.util.Properties();
        java.lang.String str7 = properties6.toString();
        java.util.Properties properties8 = new java.util.Properties(properties6);
        java.util.Properties properties10 = new java.util.Properties();
        java.lang.String str11 = properties10.toString();
        java.lang.Object obj13 = properties10.remove((java.lang.Object) (short) 100);
        java.lang.Object obj16 = properties10.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean18 = properties10.containsKey((java.lang.Object) 0L);
        java.lang.Object obj21 = properties10.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties22 = new java.util.Properties(properties10);
        java.util.Enumeration<java.lang.Object> objEnumeration23 = properties22.elements();
        atomikosProperties0.set(properties8, "{={-1.0=100}, -1.0=100}", (java.lang.Object) properties22);
        java.util.Properties properties25 = new java.util.Properties();
        java.lang.String str26 = properties25.toString();
        java.lang.Object obj28 = properties25.remove((java.lang.Object) (short) 100);
        java.lang.Object obj31 = properties25.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean33 = properties25.containsKey((java.lang.Object) 0L);
        java.lang.Object obj36 = properties25.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj39 = properties25.setProperty("", "{-1.0=100}");
        boolean boolean40 = properties25.isEmpty();
        java.util.Properties properties41 = new java.util.Properties();
        java.lang.String str42 = properties41.toString();
        java.util.Properties properties43 = new java.util.Properties(properties41);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet44 = properties43.entrySet();
        java.util.Properties properties46 = new java.util.Properties();
        java.lang.Object obj48 = properties46.remove((java.lang.Object) (-1.0d));
        int int49 = properties46.size();
        boolean boolean50 = properties25.replace((java.lang.Object) properties43, (java.lang.Object) 100L, (java.lang.Object) properties46);
        java.util.Enumeration<java.lang.Object> objEnumeration51 = properties43.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties52 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean53 = atomikosProperties52.isSerialJtaTransactions();
        atomikosProperties52.logBaseName = "{-1.0=100}";
        int int56 = atomikosProperties52.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery57 = atomikosProperties52.getRecovery();
        atomikosProperties52.setConsoleFileCount((int) (byte) 100);
        atomikosProperties52.maxTimeout = 50;
        java.lang.String str62 = atomikosProperties52.getConsoleFileName();
        boolean boolean63 = properties43.containsValue((java.lang.Object) atomikosProperties52);
        boolean boolean64 = properties22.containsKey((java.lang.Object) atomikosProperties52);
        atomikosProperties52.setConsoleFileName("{1.0=-1}");
        java.lang.String str67 = atomikosProperties52.getTransactionManagerUniqueName();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery68 = atomikosProperties52.getRecovery();
        atomikosProperties52.setConsoleFileName("{-1.0=100}");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "{}" + "'", str7, "{}");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "{}" + "'", str11, "{}");
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNotNull(objEnumeration23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "{}" + "'", str26, "{}");
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "{}" + "'", str42, "{}");
        org.junit.Assert.assertNotNull(objEntrySet44);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(objEnumeration51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 50 + "'", int56 == 50);
        org.junit.Assert.assertNotNull(recovery57);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "tm.out" + "'", str62, "tm.out");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(recovery68);
    }

    @Test
    public void test01307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01307");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties0.setMaxActives(100);
        java.lang.String str9 = atomikosProperties0.logBaseDir;
        int int10 = atomikosProperties0.getMaxActives();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
    }

    @Test
    public void test01308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01308");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.retryInterval = (short) 100;
        recovery0.delay = (-1L);
        long long5 = recovery0.delay;
        int int6 = recovery0.getMaxRetries();
        recovery0.setForgetOrphanedLogEntriesDelay((long) (byte) 0);
        long long9 = recovery0.getForgetOrphanedLogEntriesDelay();
        recovery0.setDelay(5L);
        int int12 = recovery0.maxRetries;
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 5 + "'", int12 == 5);
    }

    @Test
    public void test01309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01309");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        atomikosProperties0.setConsoleFileCount((int) (byte) 100);
        atomikosProperties0.setAllowSubTransactions(true);
        atomikosProperties0.setService("tm.out");
        int int12 = atomikosProperties0.consoleFileLimit;
        atomikosProperties0.setLogBaseName("");
        java.lang.String str15 = atomikosProperties0.logBaseDir;
        long long16 = atomikosProperties0.getMaxTimeout();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 300000L + "'", long16 == 300000L);
    }

    @Test
    public void test01310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01310");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties7.setEnableLogging(true);
        atomikosProperties7.consoleFileCount = 0;
        atomikosProperties7.setSerialJtaTransactions(false);
        java.lang.String str14 = atomikosProperties7.getOutputDir();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties16 = atomikosProperties15.asProperties();
        atomikosProperties15.service = "{-1.0=100}";
        long long19 = atomikosProperties15.getDefaultJtaTimeout();
        atomikosProperties15.serialJtaTransactions = true;
        long long22 = atomikosProperties15.getDefaultJtaTimeout();
        long long23 = atomikosProperties15.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery24 = atomikosProperties15.getRecovery();
        recovery24.setRetryInterval((long) (byte) 0);
        java.lang.Object obj27 = properties0.replace((java.lang.Object) atomikosProperties7, (java.lang.Object) (byte) 0);
        java.lang.String str28 = atomikosProperties7.getLogBaseDir();
        atomikosProperties7.setSerialJtaTransactions(false);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10000L + "'", long19 == 10000L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 10000L + "'", long22 == 10000L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 500L + "'", long23 == 500L);
        org.junit.Assert.assertNotNull(recovery24);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNull(str28);
    }

    @Test
    public void test01311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01311");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        java.util.Properties properties8 = new java.util.Properties();
        java.lang.String str9 = properties8.toString();
        java.lang.Object obj11 = properties8.remove((java.lang.Object) (short) 100);
        java.lang.Object obj14 = properties8.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj15 = properties8.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration16 = properties8.elements();
        java.lang.Object obj17 = properties0.putIfAbsent((java.lang.Object) 10.0f, (java.lang.Object) objEnumeration16);
        java.util.Properties properties18 = new java.util.Properties();
        java.util.Enumeration<?> wildcardEnumeration19 = properties18.propertyNames();
        java.lang.Object obj20 = properties18.clone();
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.String str22 = properties21.toString();
        boolean boolean23 = properties21.isEmpty();
        java.lang.Object obj26 = properties21.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties21.elements();
        java.lang.Object obj28 = properties0.put(obj20, (java.lang.Object) objEnumeration27);
        properties0.clear();
        java.util.Properties properties30 = new java.util.Properties();
        java.util.Properties properties31 = new java.util.Properties();
        java.lang.Object obj33 = properties31.remove((java.lang.Object) (-1.0d));
        int int34 = properties31.size();
        java.util.Enumeration<java.lang.Object> objEnumeration35 = properties31.elements();
        java.util.Properties properties36 = new java.util.Properties();
        properties36.clear();
        java.lang.String str38 = properties36.toString();
        boolean boolean39 = properties0.replace((java.lang.Object) properties30, (java.lang.Object) properties31, (java.lang.Object) str38);
        java.io.InputStream inputStream40 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties31.loadFromXML(inputStream40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{}" + "'", str9, "{}");
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration16);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(wildcardEnumeration19);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{}");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{}" + "'", str22, "{}");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(objEnumeration35);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "{}" + "'", str38, "{}");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test01312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01312");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties5 = atomikosProperties4.asProperties();
        atomikosProperties4.service = "{-1.0=100}";
        long long8 = atomikosProperties4.getDefaultJtaTimeout();
        atomikosProperties4.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties4.setMaxActives(100);
        atomikosProperties4.defaultJtaTimeout = ' ';
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties16 = atomikosProperties15.asProperties();
        atomikosProperties15.service = "{-1.0=100}";
        long long19 = atomikosProperties15.getDefaultJtaTimeout();
        atomikosProperties15.outputDir = "{={-1.0=100}, -1.0=100}";
        long long22 = atomikosProperties15.getCheckpointInterval();
        atomikosProperties15.setConsoleFileCount((int) (byte) 1);
        boolean boolean25 = atomikosProperties15.threadedTwoPhaseCommit;
        java.lang.String str26 = atomikosProperties15.getTransactionManagerUniqueName();
        java.lang.Object obj27 = properties0.put((java.lang.Object) ' ', (java.lang.Object) atomikosProperties15);
        java.util.Properties properties28 = new java.util.Properties();
        java.util.Properties properties29 = new java.util.Properties();
        java.lang.String str30 = properties29.toString();
        boolean boolean31 = properties29.isEmpty();
        java.util.Properties properties32 = new java.util.Properties();
        java.lang.String str33 = properties32.toString();
        java.lang.Object obj35 = properties32.remove((java.lang.Object) (short) 100);
        java.lang.Object obj38 = properties32.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean40 = properties32.containsKey((java.lang.Object) 0L);
        boolean boolean41 = properties29.containsValue((java.lang.Object) 0L);
        boolean boolean44 = properties28.replace((java.lang.Object) 0L, (java.lang.Object) 0.0f, (java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration45 = properties28.elements();
        java.util.Enumeration<java.lang.Object> objEnumeration46 = properties28.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties47 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties48 = atomikosProperties47.asProperties();
        boolean boolean49 = properties0.remove((java.lang.Object) properties28, (java.lang.Object) atomikosProperties47);
        java.lang.Object obj50 = properties28.clone();
        java.io.Reader reader51 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties28.load(reader51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 10000L + "'", long8 == 10000L);
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10000L + "'", long19 == 10000L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 500L + "'", long22 == 500L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "{}" + "'", str30, "{}");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "{}" + "'", str33, "{}");
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(objEnumeration45);
        org.junit.Assert.assertNotNull(objEnumeration46);
        org.junit.Assert.assertNotNull(properties48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertEquals(obj50.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj50), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj50), "{}");
    }

    @Test
    public void test01313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01313");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.lang.Object obj5 = properties0.setProperty("", "{={-1.0=100}, -1.0=100}");
        java.io.Reader reader6 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.load(reader6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj5);
    }

    @Test
    public void test01314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01314");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        boolean boolean7 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.defaultJtaTimeout = (byte) 10;
        java.lang.String str10 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.consoleFileCount = (-1);
        atomikosProperties0.checkpointInterval = 10000L;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test01315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01315");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        atomikosProperties0.setConsoleFileCount((int) (byte) 100);
        atomikosProperties0.setAllowSubTransactions(true);
        atomikosProperties0.setService("tm.out");
        boolean boolean12 = atomikosProperties0.isForceShutdownOnVmExit();
        boolean boolean13 = atomikosProperties0.isAllowSubTransactions();
        atomikosProperties0.setLogBaseName("");
        atomikosProperties0.forceShutdownOnVmExit = true;
        atomikosProperties0.logBaseName = "";
        java.util.Properties properties20 = null;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean23 = atomikosProperties22.isSerialJtaTransactions();
        atomikosProperties22.logBaseName = "{-1.0=100}";
        int int26 = atomikosProperties22.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery27 = atomikosProperties22.getRecovery();
        java.lang.String str28 = atomikosProperties22.getOutputDir();
        boolean boolean29 = atomikosProperties22.isForceShutdownOnVmExit();
        boolean boolean30 = atomikosProperties22.enableLogging;
        java.lang.String str31 = atomikosProperties22.getTransactionManagerUniqueName();
        // The following exception was thrown during execution in test generation
        try {
            atomikosProperties0.set(properties20, "tmlog", (java.lang.Object) atomikosProperties22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 50 + "'", int26 == 50);
        org.junit.Assert.assertNotNull(recovery27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNull(str31);
    }

    @Test
    public void test01316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01316");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        int int5 = atomikosProperties0.consoleFileCount;
        atomikosProperties0.transactionManagerUniqueName = "tm.out";
        atomikosProperties0.consoleFileName = "tm.out";
        atomikosProperties0.allowSubTransactions = false;
        int int12 = atomikosProperties0.getConsoleFileCount();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test01317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01317");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.retryInterval = (short) 100;
        recovery0.delay = (-1L);
        long long5 = recovery0.delay;
        recovery0.delay = (short) 1;
        long long8 = recovery0.getRetryInterval();
        long long9 = recovery0.getForgetOrphanedLogEntriesDelay();
        recovery0.setMaxRetries(10);
        int int12 = recovery0.maxRetries;
        long long13 = recovery0.getDelay();
        recovery0.forgetOrphanedLogEntriesDelay = 500L;
        long long16 = recovery0.getForgetOrphanedLogEntriesDelay();
        long long17 = recovery0.forgetOrphanedLogEntriesDelay;
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 86400000L + "'", long9 == 86400000L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 500L + "'", long16 == 500L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 500L + "'", long17 == 500L);
    }

    @Test
    public void test01318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01318");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj14 = properties0.setProperty("", "{-1.0=100}");
        java.lang.String str15 = properties0.toString();
        java.util.Set<java.lang.String> strSet16 = properties0.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties18 = atomikosProperties17.asProperties();
        atomikosProperties17.service = "{-1.0=100}";
        long long21 = atomikosProperties17.getDefaultJtaTimeout();
        atomikosProperties17.enableLogging = false;
        atomikosProperties17.setMaxTimeout((long) (byte) 0);
        atomikosProperties17.setAllowSubTransactions(true);
        java.util.Properties properties28 = new java.util.Properties();
        java.lang.Object obj30 = properties28.remove((java.lang.Object) (-1.0d));
        boolean boolean31 = properties28.isEmpty();
        java.util.Collection<java.lang.Object> objCollection32 = properties28.values();
        java.lang.Object obj33 = properties0.put((java.lang.Object) true, (java.lang.Object) properties28);
        java.util.Properties properties34 = new java.util.Properties(properties28);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties36 = atomikosProperties35.asProperties();
        atomikosProperties35.service = "{-1.0=100}";
        long long39 = atomikosProperties35.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel40 = null;
        atomikosProperties35.setConsoleLogLevel(atomikosLoggingLevel40);
        int int42 = atomikosProperties35.maxActives;
        java.util.Properties properties43 = new java.util.Properties();
        java.lang.Object obj45 = properties43.remove((java.lang.Object) (-1.0d));
        java.util.Enumeration<?> wildcardEnumeration46 = properties43.propertyNames();
        java.util.Set<java.lang.Object> objSet47 = properties43.keySet();
        java.util.Set<java.lang.String> strSet48 = properties43.stringPropertyNames();
        java.util.Properties properties50 = new java.util.Properties();
        atomikosProperties35.set(properties43, "tm.out", (java.lang.Object) properties50);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties52 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties53 = atomikosProperties52.asProperties();
        atomikosProperties52.service = "{-1.0=100}";
        long long56 = atomikosProperties52.getDefaultJtaTimeout();
        atomikosProperties52.setThreadedTwoPhaseCommit(true);
        boolean boolean59 = atomikosProperties52.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery60 = atomikosProperties52.recovery;
        atomikosProperties52.setLogBaseDir("");
        atomikosProperties52.setConsoleFileName("");
        atomikosProperties52.setThreadedTwoPhaseCommit(false);
        java.lang.Object obj67 = properties34.getOrDefault((java.lang.Object) "tm.out", (java.lang.Object) false);
        java.lang.String str68 = properties34.toString();
        java.lang.String str69 = properties34.toString();
        java.io.OutputStream outputStream70 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties34.save(outputStream70, "{{={-1.0=100}, -1.0=100}=}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{={-1.0=100}, -1.0=100}" + "'", str15, "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10000L + "'", long21 == 10000L);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objCollection32);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNotNull(properties36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 10000L + "'", long39 == 10000L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 50 + "'", int42 == 50);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertNotNull(wildcardEnumeration46);
        org.junit.Assert.assertNotNull(objSet47);
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertNotNull(properties53);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 10000L + "'", long56 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(recovery60);
        org.junit.Assert.assertEquals("'" + obj67 + "' != '" + false + "'", obj67, false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "{}" + "'", str68, "{}");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "{}" + "'", str69, "{}");
    }

    @Test
    public void test01319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01319");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileLimit = (byte) 10;
        long long7 = atomikosProperties0.getMaxTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel8 = null;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel8;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel10 = null;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel10;
        atomikosProperties0.enableLogging = false;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
    }

    @Test
    public void test01320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01320");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.util.Properties properties3 = new java.util.Properties();
        java.lang.String str4 = properties3.toString();
        java.lang.Object obj6 = properties3.remove((java.lang.Object) (short) 100);
        java.lang.Object obj9 = properties3.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean11 = properties3.containsKey((java.lang.Object) 0L);
        java.lang.Object obj14 = properties3.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj17 = properties3.setProperty("", "{-1.0=100}");
        java.util.Enumeration<java.lang.Object> objEnumeration18 = properties3.keys();
        java.util.Properties properties19 = new java.util.Properties();
        java.lang.String str20 = properties19.toString();
        boolean boolean21 = properties19.isEmpty();
        java.lang.Object obj24 = properties19.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration25 = properties19.elements();
        java.lang.Object obj26 = properties2.replace((java.lang.Object) objEnumeration18, (java.lang.Object) properties19);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties19.elements();
        java.lang.String str29 = properties19.getProperty("{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}");
        java.util.Set<java.lang.String> strSet30 = properties19.stringPropertyNames();
        java.io.InputStream inputStream31 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties19.loadFromXML(inputStream31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{}" + "'", str4, "{}");
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(objEnumeration18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{}" + "'", str20, "{}");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(objEnumeration25);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(strSet30);
    }

    @Test
    public void test01321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01321");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties();
        java.lang.String str2 = properties1.toString();
        java.lang.Object obj4 = properties1.remove((java.lang.Object) (short) 100);
        java.lang.Object obj7 = properties1.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        int int8 = properties1.size();
        java.util.Properties properties9 = new java.util.Properties();
        java.lang.Object obj11 = properties9.remove((java.lang.Object) (-1.0d));
        boolean boolean12 = properties9.isEmpty();
        java.lang.Object obj15 = properties9.setProperty("hi!", "{}");
        boolean boolean16 = properties0.remove((java.lang.Object) int8, (java.lang.Object) properties9);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties17.setAllowSubTransactions(true);
        atomikosProperties17.maxActives = (short) -1;
        atomikosProperties17.setService("tm.out");
        boolean boolean24 = properties9.containsValue((java.lang.Object) atomikosProperties17);
        java.util.Properties properties25 = new java.util.Properties();
        java.lang.String str26 = properties25.toString();
        java.util.Properties properties27 = new java.util.Properties(properties25);
        java.util.Properties properties28 = new java.util.Properties();
        java.lang.String str29 = properties28.toString();
        java.lang.Object obj31 = properties28.remove((java.lang.Object) (short) 100);
        java.lang.Object obj34 = properties28.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean36 = properties28.containsKey((java.lang.Object) 0L);
        java.lang.Object obj39 = properties28.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj42 = properties28.setProperty("", "{-1.0=100}");
        java.util.Enumeration<java.lang.Object> objEnumeration43 = properties28.keys();
        java.util.Properties properties44 = new java.util.Properties();
        java.lang.String str45 = properties44.toString();
        boolean boolean46 = properties44.isEmpty();
        java.lang.Object obj49 = properties44.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration50 = properties44.elements();
        java.lang.Object obj51 = properties27.replace((java.lang.Object) objEnumeration43, (java.lang.Object) properties44);
        java.util.Enumeration<java.lang.Object> objEnumeration52 = properties44.elements();
        java.lang.String str54 = properties44.getProperty("{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}");
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties44);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties56 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties57 = atomikosProperties56.asProperties();
        atomikosProperties56.service = "{-1.0=100}";
        java.lang.String str60 = atomikosProperties56.getTransactionManagerUniqueName();
        boolean boolean61 = properties44.equals((java.lang.Object) str60);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery62 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery62.retryInterval = (short) 100;
        recovery62.forgetOrphanedLogEntriesDelay = 'a';
        long long67 = recovery62.retryInterval;
        recovery62.forgetOrphanedLogEntriesDelay = 0L;
        long long70 = recovery62.getForgetOrphanedLogEntriesDelay();
        long long71 = recovery62.getForgetOrphanedLogEntriesDelay();
        recovery62.retryInterval = 0L;
        long long74 = recovery62.retryInterval;
        int int75 = recovery62.maxRetries;
        recovery62.maxRetries = (short) 100;
        boolean boolean78 = properties44.containsKey((java.lang.Object) (short) 100);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet79 = properties44.entrySet();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{}" + "'", str2, "{}");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "{}" + "'", str26, "{}");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "{}" + "'", str29, "{}");
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertNotNull(objEnumeration43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "{}" + "'", str45, "{}");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertNotNull(objEnumeration50);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNotNull(objEnumeration52);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(properties57);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 100L + "'", long67 == 100L);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 5 + "'", int75 == 5);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(objEntrySet79);
    }

    @Test
    public void test01322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01322");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getLogBaseName();
        long long5 = atomikosProperties0.defaultJtaTimeout;
        long long6 = atomikosProperties0.getMaxTimeout();
        boolean boolean7 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.setService("{-1.0=100}");
        atomikosProperties0.setOutputDir("{}");
        atomikosProperties0.setConsoleFileLimit((int) (byte) 1);
        atomikosProperties0.maxActives = 50;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tmlog" + "'", str4, "tmlog");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 10000L + "'", long5 == 10000L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 300000L + "'", long6 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test01323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01323");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileLimit = (byte) 10;
        long long7 = atomikosProperties0.maxTimeout;
        boolean boolean8 = atomikosProperties0.isAllowSubTransactions();
        boolean boolean9 = atomikosProperties0.threadedTwoPhaseCommit;
        boolean boolean10 = atomikosProperties0.serialJtaTransactions;
        java.lang.String str11 = atomikosProperties0.consoleFileName;
        atomikosProperties0.forceShutdownOnVmExit = false;
        boolean boolean14 = atomikosProperties0.isEnableLogging();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "tm.out" + "'", str11, "tm.out");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test01324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01324");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties7.setEnableLogging(true);
        atomikosProperties7.consoleFileCount = 0;
        atomikosProperties7.setSerialJtaTransactions(false);
        java.lang.String str14 = atomikosProperties7.getOutputDir();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties16 = atomikosProperties15.asProperties();
        atomikosProperties15.service = "{-1.0=100}";
        long long19 = atomikosProperties15.getDefaultJtaTimeout();
        atomikosProperties15.serialJtaTransactions = true;
        long long22 = atomikosProperties15.getDefaultJtaTimeout();
        long long23 = atomikosProperties15.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery24 = atomikosProperties15.getRecovery();
        recovery24.setRetryInterval((long) (byte) 0);
        java.lang.Object obj27 = properties0.replace((java.lang.Object) atomikosProperties7, (java.lang.Object) (byte) 0);
        java.lang.String str28 = atomikosProperties7.getService();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10000L + "'", long19 == 10000L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 10000L + "'", long22 == 10000L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 500L + "'", long23 == 500L);
        org.junit.Assert.assertNotNull(recovery24);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNull(str28);
    }

    @Test
    public void test01325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01325");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long1 = recovery0.getRetryInterval();
        long long2 = recovery0.getDelay();
        int int3 = recovery0.maxRetries;
        recovery0.setForgetOrphanedLogEntriesDelay(10L);
        long long6 = recovery0.getDelay();
        long long7 = recovery0.forgetOrphanedLogEntriesDelay;
        recovery0.delay = 2;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 10000L + "'", long1 == 10000L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10000L + "'", long2 == 10000L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 5 + "'", int3 == 5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10L + "'", long7 == 10L);
    }

    @Test
    public void test01326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01326");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties12 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration13 = properties12.elements();
        java.util.Properties properties14 = new java.util.Properties();
        java.lang.Object obj17 = properties14.setProperty("{}", "{}");
        java.util.Enumeration<java.lang.Object> objEnumeration18 = properties14.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration19 = properties14.elements();
        java.util.Properties properties20 = new java.util.Properties(properties14);
        java.util.Properties properties21 = new java.util.Properties(properties20);
        java.util.Properties properties22 = new java.util.Properties(properties20);
        java.util.Collection<java.lang.Object> objCollection23 = properties20.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties25 = atomikosProperties24.asProperties();
        atomikosProperties24.service = "{-1.0=100}";
        long long28 = atomikosProperties24.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel29 = null;
        atomikosProperties24.setConsoleLogLevel(atomikosLoggingLevel29);
        atomikosProperties24.setTransactionManagerUniqueName("{-1.0=100}");
        int int33 = atomikosProperties24.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties34 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties34.setAllowSubTransactions(true);
        atomikosProperties34.maxActives = (short) -1;
        atomikosProperties34.setService("tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties41.setAllowSubTransactions(true);
        boolean boolean44 = atomikosProperties41.enableLogging;
        boolean boolean45 = atomikosProperties41.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel46 = atomikosProperties41.consoleLogLevel;
        atomikosProperties34.setConsoleLogLevel(atomikosLoggingLevel46);
        atomikosProperties24.setConsoleLogLevel(atomikosLoggingLevel46);
        java.lang.Object obj49 = properties12.put((java.lang.Object) properties20, (java.lang.Object) atomikosProperties24);
        java.lang.Object obj50 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean51 = properties12.containsKey(obj50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNotNull(objEnumeration13);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(objEnumeration18);
        org.junit.Assert.assertNotNull(objEnumeration19);
        org.junit.Assert.assertNotNull(objCollection23);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 10000L + "'", long28 == 10000L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 50 + "'", int33 == 50);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel46 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel46.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj49);
    }

    @Test
    public void test01327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01327");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        boolean boolean2 = properties0.isEmpty();
        java.util.Properties properties3 = new java.util.Properties();
        java.lang.String str4 = properties3.toString();
        java.lang.Object obj6 = properties3.remove((java.lang.Object) (short) 100);
        java.lang.Object obj9 = properties3.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean11 = properties3.containsKey((java.lang.Object) 0L);
        boolean boolean12 = properties0.containsValue((java.lang.Object) 0L);
        java.util.Set<java.lang.String> strSet13 = properties0.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties15 = atomikosProperties14.asProperties();
        atomikosProperties14.service = "{-1.0=100}";
        long long18 = atomikosProperties14.getDefaultJtaTimeout();
        atomikosProperties14.setThreadedTwoPhaseCommit(true);
        boolean boolean21 = atomikosProperties14.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery22 = atomikosProperties14.recovery;
        java.util.Properties properties23 = new java.util.Properties();
        java.lang.String str24 = properties23.toString();
        boolean boolean25 = properties23.isEmpty();
        java.lang.Object obj28 = properties23.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        boolean boolean29 = properties0.remove((java.lang.Object) atomikosProperties14, (java.lang.Object) (short) 100);
        java.lang.String str30 = atomikosProperties14.logBaseName;
        long long31 = atomikosProperties14.getMaxTimeout();
        java.lang.String str32 = atomikosProperties14.consoleFileName;
        boolean boolean33 = atomikosProperties14.threadedTwoPhaseCommit;
        int int34 = atomikosProperties14.getConsoleFileLimit();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{}" + "'", str4, "{}");
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10000L + "'", long18 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(recovery22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "{}" + "'", str24, "{}");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "tmlog" + "'", str30, "tmlog");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 300000L + "'", long31 == 300000L);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "tm.out" + "'", str32, "tm.out");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
    }

    @Test
    public void test01328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01328");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.util.Properties properties4 = new java.util.Properties();
        java.lang.String str5 = properties4.toString();
        boolean boolean6 = properties4.isEmpty();
        java.lang.Object obj9 = properties4.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration10 = properties4.elements();
        boolean boolean11 = properties0.containsKey((java.lang.Object) properties4);
        java.util.Set<java.lang.String> strSet12 = properties0.stringPropertyNames();
        java.util.Set<java.lang.Object> objSet13 = properties0.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties15 = atomikosProperties14.asProperties();
        atomikosProperties14.service = "{-1.0=100}";
        long long18 = atomikosProperties14.getDefaultJtaTimeout();
        atomikosProperties14.enableLogging = false;
        atomikosProperties14.setMaxTimeout((long) (byte) 0);
        atomikosProperties14.setAllowSubTransactions(true);
        java.util.Properties properties25 = new java.util.Properties();
        java.lang.Object obj27 = properties25.remove((java.lang.Object) (-1.0d));
        boolean boolean28 = properties25.isEmpty();
        java.util.Properties properties29 = new java.util.Properties();
        java.lang.String str30 = properties29.toString();
        java.lang.Object obj32 = properties29.remove((java.lang.Object) (short) 100);
        java.lang.Object obj35 = properties29.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean37 = properties29.containsKey((java.lang.Object) 0L);
        java.lang.Object obj40 = properties29.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj43 = properties29.setProperty("", "{-1.0=100}");
        java.lang.Object obj44 = properties29.clone();
        java.lang.Object obj45 = properties25.get((java.lang.Object) properties29);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery47 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery47.retryInterval = (short) 100;
        recovery47.forgetOrphanedLogEntriesDelay = 'a';
        long long52 = recovery47.getDelay();
        long long53 = recovery47.getRetryInterval();
        recovery47.forgetOrphanedLogEntriesDelay = 10000L;
        atomikosProperties14.set(properties29, "tmlog", (java.lang.Object) recovery47);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties57 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties58 = atomikosProperties57.asProperties();
        atomikosProperties57.service = "{-1.0=100}";
        long long61 = atomikosProperties57.getDefaultJtaTimeout();
        atomikosProperties57.serialJtaTransactions = true;
        java.lang.Object obj64 = properties0.put((java.lang.Object) "tmlog", (java.lang.Object) true);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties65 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties66 = atomikosProperties65.asProperties();
        atomikosProperties65.service = "{-1.0=100}";
        long long69 = atomikosProperties65.getDefaultJtaTimeout();
        atomikosProperties65.serialJtaTransactions = true;
        long long72 = atomikosProperties65.maxTimeout;
        atomikosProperties65.setLogBaseDir("{-1.0=100}");
        int int75 = atomikosProperties65.getConsoleFileCount();
        atomikosProperties65.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties78 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties79 = atomikosProperties78.asProperties();
        atomikosProperties78.service = "{-1.0=100}";
        long long82 = atomikosProperties78.getDefaultJtaTimeout();
        atomikosProperties78.setTransactionManagerUniqueName("{}");
        atomikosProperties78.consoleFileName = "hi!";
        int int87 = atomikosProperties78.getConsoleFileCount();
        boolean boolean88 = atomikosProperties78.isThreadedTwoPhaseCommit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel89 = atomikosProperties78.consoleLogLevel;
        atomikosProperties65.consoleLogLevel = atomikosLoggingLevel89;
        java.lang.Object obj91 = properties0.get((java.lang.Object) atomikosProperties65);
        boolean boolean92 = properties0.isEmpty();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{}" + "'", str5, "{}");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNotNull(objEnumeration10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNotNull(objSet13);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10000L + "'", long18 == 10000L);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "{}" + "'", str30, "{}");
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNotNull(obj44);
// flaky:         org.junit.Assert.assertEquals(obj44.toString(), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj44), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj44), "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 10000L + "'", long52 == 10000L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 100L + "'", long53 == 100L);
        org.junit.Assert.assertNotNull(properties58);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 10000L + "'", long61 == 10000L);
        org.junit.Assert.assertNull(obj64);
        org.junit.Assert.assertNotNull(properties66);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 10000L + "'", long69 == 10000L);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 300000L + "'", long72 == 300000L);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(properties79);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 10000L + "'", long82 == 10000L);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel89 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel89.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test01329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01329");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        atomikosProperties0.setTransactionManagerUniqueName("{-1.0=100}");
        atomikosProperties0.consoleFileCount = 0;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery11 = atomikosProperties0.getRecovery();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery12 = atomikosProperties0.recovery;
        atomikosProperties0.maxActives = (byte) 100;
        boolean boolean15 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.setDefaultJtaTimeout((long) (short) -1);
        atomikosProperties0.transactionManagerUniqueName = "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}";
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertNotNull(recovery11);
        org.junit.Assert.assertNotNull(recovery12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test01330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01330");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        atomikosProperties0.setTransactionManagerUniqueName("{-1.0=100}");
        boolean boolean9 = atomikosProperties0.enableLogging;
        atomikosProperties0.setAllowSubTransactions(true);
        atomikosProperties0.maxActives = 100;
        atomikosProperties0.setMaxActives((int) (short) -1);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test01331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01331");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.remove((java.lang.Object) (-1.0d));
        boolean boolean3 = properties0.isEmpty();
        int int4 = properties0.size();
        java.util.Properties properties5 = new java.util.Properties();
        properties5.clear();
        java.lang.String str7 = properties5.toString();
        java.lang.Object obj8 = properties5.clone();
        java.util.Properties properties9 = new java.util.Properties();
        java.lang.Object obj11 = properties9.remove((java.lang.Object) (-1.0d));
        boolean boolean12 = properties9.isEmpty();
        int int13 = properties9.size();
        java.lang.String str15 = properties9.getProperty("{}");
        java.util.Set<java.lang.Object> objSet16 = properties9.keySet();
        boolean boolean18 = properties9.containsKey((java.lang.Object) (short) 1);
        int int19 = properties9.size();
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties9);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties5);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties23 = atomikosProperties22.asProperties();
        atomikosProperties22.service = "{-1.0=100}";
        long long26 = atomikosProperties22.getDefaultJtaTimeout();
        atomikosProperties22.setThreadedTwoPhaseCommit(true);
        boolean boolean29 = atomikosProperties22.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery30 = atomikosProperties22.recovery;
        atomikosProperties22.setLogBaseDir("");
        long long33 = atomikosProperties22.maxTimeout;
        atomikosProperties22.setConsoleFileLimit(0);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel36 = atomikosProperties22.getConsoleLogLevel();
        java.lang.Object obj37 = properties5.remove((java.lang.Object) atomikosProperties22);
        java.io.InputStream inputStream38 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties5.load(inputStream38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "{}" + "'", str7, "{}");
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "{}");
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(objSet16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(properties23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 10000L + "'", long26 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(recovery30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 300000L + "'", long33 == 300000L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel36 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel36.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj37);
    }

    @Test
    public void test01332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01332");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        java.util.Properties properties7 = new java.util.Properties();
        java.lang.String str8 = properties7.toString();
        properties7.clear();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet10 = properties7.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties12 = atomikosProperties11.asProperties();
        atomikosProperties11.service = "{-1.0=100}";
        long long15 = atomikosProperties11.getDefaultJtaTimeout();
        atomikosProperties11.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties11.setMaxActives(100);
        java.lang.String str20 = atomikosProperties11.logBaseDir;
        atomikosProperties11.consoleFileCount = (short) 0;
        atomikosProperties11.defaultJtaTimeout = 10000L;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel25 = atomikosProperties11.consoleLogLevel;
        java.lang.Object obj26 = properties0.putIfAbsent((java.lang.Object) properties7, (java.lang.Object) atomikosLoggingLevel25);
        java.lang.String str27 = properties7.toString();
        java.util.Collection<java.lang.Object> objCollection28 = properties7.values();
        java.lang.String str31 = properties7.getProperty("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=32, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={-1.0=100}, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}", "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=32, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={-1.0=100}, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{}" + "'", str8, "{}");
        org.junit.Assert.assertNotNull(objEntrySet10);
        org.junit.Assert.assertNotNull(properties12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10000L + "'", long15 == 10000L);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel25 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel25.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "{}" + "'", str27, "{}");
        org.junit.Assert.assertNotNull(objCollection28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=32, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={-1.0=100}, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}" + "'", str31, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=32, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={-1.0=100}, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
    }

    @Test
    public void test01333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01333");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        long long7 = atomikosProperties0.getDefaultJtaTimeout();
        long long8 = atomikosProperties0.checkpointInterval;
        java.lang.String str9 = atomikosProperties0.getService();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{-1.0=100}" + "'", str9, "{-1.0=100}");
    }

    @Test
    public void test01334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01334");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        atomikosProperties0.setConsoleFileCount((int) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel8 = null;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel8;
        java.lang.String str10 = atomikosProperties0.logBaseDir;
        java.lang.String str11 = atomikosProperties0.consoleFileName;
        int int12 = atomikosProperties0.getConsoleFileCount();
        atomikosProperties0.serialJtaTransactions = false;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "tm.out" + "'", str11, "tm.out");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
    }

    @Test
    public void test01335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01335");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj14 = properties0.setProperty("", "{-1.0=100}");
        java.lang.Object obj15 = properties0.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery16 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery16.retryInterval = (short) 100;
        recovery16.forgetOrphanedLogEntriesDelay = 'a';
        boolean boolean21 = properties0.equals((java.lang.Object) 'a');
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties23 = atomikosProperties22.asProperties();
        atomikosProperties22.service = "{-1.0=100}";
        java.lang.String str26 = atomikosProperties22.getTransactionManagerUniqueName();
        atomikosProperties22.consoleFileName = "hi!";
        atomikosProperties22.setCheckpointInterval((long) 5);
        atomikosProperties22.setConsoleFileCount(0);
        atomikosProperties22.setService("{-1.0=100}");
        atomikosProperties22.setDefaultJtaTimeout((long) 100);
        atomikosProperties22.defaultJtaTimeout = 32;
        atomikosProperties22.setService("{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}");
        long long41 = atomikosProperties22.defaultJtaTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel42 = atomikosProperties22.getConsoleLogLevel();
        boolean boolean43 = properties0.contains((java.lang.Object) atomikosProperties22);
        boolean boolean44 = atomikosProperties22.threadedTwoPhaseCommit;
        boolean boolean45 = atomikosProperties22.enableLogging;
        java.lang.String str46 = atomikosProperties22.outputDir;
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(obj15);
// flaky:         org.junit.Assert.assertEquals(obj15.toString(), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(properties23);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 32L + "'", long41 == 32L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel42 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel42.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNull(str46);
    }

    @Test
    public void test01336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01336");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        long long5 = atomikosProperties0.getMaxTimeout();
        int int6 = atomikosProperties0.consoleFileCount;
        long long7 = atomikosProperties0.getCheckpointInterval();
        atomikosProperties0.consoleFileLimit = (short) 10;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
    }

    @Test
    public void test01337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01337");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties12 = new java.util.Properties();
        java.lang.String str13 = properties12.toString();
        java.lang.Object obj15 = properties12.remove((java.lang.Object) (short) 100);
        java.lang.Object obj18 = properties12.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj19 = properties12.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration20 = properties12.elements();
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties12);
        java.lang.Object obj22 = properties12.clone();
        properties12.clear();
        int int24 = properties12.size();
        java.util.Properties properties25 = new java.util.Properties(properties12);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties27 = atomikosProperties26.asProperties();
        atomikosProperties26.service = "{-1.0=100}";
        long long30 = atomikosProperties26.getDefaultJtaTimeout();
        long long31 = atomikosProperties26.getMaxTimeout();
        int int32 = atomikosProperties26.consoleFileCount;
        atomikosProperties26.setConsoleFileCount(0);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel35 = atomikosProperties26.getConsoleLogLevel();
        java.util.Properties properties36 = new java.util.Properties();
        java.lang.Object obj38 = properties36.remove((java.lang.Object) (-1.0d));
        boolean boolean39 = properties36.isEmpty();
        int int40 = properties36.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery41 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery41.retryInterval = (short) 100;
        recovery41.forgetOrphanedLogEntriesDelay = 'a';
        java.util.Properties properties46 = new java.util.Properties();
        java.lang.Object obj48 = properties46.remove((java.lang.Object) (-1.0d));
        boolean boolean49 = properties46.isEmpty();
        int int50 = properties46.size();
        java.lang.String str52 = properties46.getProperty("{}");
        boolean boolean53 = properties36.remove((java.lang.Object) recovery41, (java.lang.Object) properties46);
        java.util.Set<java.lang.String> strSet54 = properties36.stringPropertyNames();
        java.lang.Object obj55 = properties12.replace((java.lang.Object) atomikosLoggingLevel35, (java.lang.Object) properties36);
        java.util.Enumeration<java.lang.Object> objEnumeration56 = properties12.elements();
        java.io.PrintWriter printWriter57 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties12.list(printWriter57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{}" + "'", str13, "{}");
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration20);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "{1.0=-1}");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(properties27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 10000L + "'", long30 == 10000L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 300000L + "'", long31 == 300000L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel35 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel35.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(strSet54);
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertNotNull(objEnumeration56);
    }

    @Test
    public void test01338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01338");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        java.util.Properties properties8 = new java.util.Properties();
        java.lang.String str9 = properties8.toString();
        java.lang.Object obj11 = properties8.remove((java.lang.Object) (short) 100);
        java.lang.Object obj14 = properties8.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj15 = properties8.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration16 = properties8.elements();
        java.lang.Object obj17 = properties0.putIfAbsent((java.lang.Object) 10.0f, (java.lang.Object) objEnumeration16);
        java.util.Enumeration<java.lang.Object> objEnumeration18 = properties0.keys();
        java.io.PrintStream printStream19 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.list(printStream19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{}" + "'", str9, "{}");
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration16);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(objEnumeration18);
    }

    @Test
    public void test01339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01339");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.lang.Object obj5 = properties0.setProperty("", "{={-1.0=100}, -1.0=100}");
        java.util.Set<java.lang.String> strSet6 = properties0.stringPropertyNames();
        java.lang.Object obj7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj8 = properties0.remove(obj7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(strSet6);
    }

    @Test
    public void test01340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01340");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        int int7 = atomikosProperties0.maxActives;
        atomikosProperties0.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.getRecovery();
        atomikosProperties0.consoleFileName = "{-1.0=100}";
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel13 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel13);
        atomikosProperties0.setForceShutdownOnVmExit(true);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery17 = atomikosProperties0.getRecovery();
        atomikosProperties0.setTransactionManagerUniqueName("{-1.0=100}");
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertNotNull(recovery17);
    }

    @Test
    public void test01341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01341");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        long long7 = atomikosProperties0.maxTimeout;
        boolean boolean8 = atomikosProperties0.isThreadedTwoPhaseCommit();
        atomikosProperties0.setCheckpointInterval(1L);
        atomikosProperties0.setOutputDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery13 = atomikosProperties0.recovery;
        recovery13.setMaxRetries(0);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(recovery13);
    }

    @Test
    public void test01342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01342");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.remove((java.lang.Object) (-1.0d));
        boolean boolean3 = properties0.isEmpty();
        java.util.Collection<java.lang.Object> objCollection4 = properties0.values();
        java.util.Properties properties5 = new java.util.Properties(properties0);
        boolean boolean6 = properties0.isEmpty();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(objCollection4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test01343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01343");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        boolean boolean2 = properties0.isEmpty();
        properties0.clear();
        java.util.Properties properties4 = new java.util.Properties(properties0);
        java.io.InputStream inputStream5 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties4.load(inputStream5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test01344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01344");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        int int7 = atomikosProperties0.maxActives;
        atomikosProperties0.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.getRecovery();
        atomikosProperties0.outputDir = "hi!";
        atomikosProperties0.setDefaultJtaTimeout((long) 10);
        atomikosProperties0.allowSubTransactions = false;
        boolean boolean17 = atomikosProperties0.isAllowSubTransactions();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test01345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01345");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.util.Properties properties3 = new java.util.Properties();
        java.lang.String str4 = properties3.toString();
        java.lang.Object obj6 = properties3.remove((java.lang.Object) (short) 100);
        java.lang.Object obj9 = properties3.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean11 = properties3.containsKey((java.lang.Object) 0L);
        java.lang.Object obj14 = properties3.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj17 = properties3.setProperty("", "{-1.0=100}");
        java.util.Enumeration<java.lang.Object> objEnumeration18 = properties3.keys();
        java.util.Properties properties19 = new java.util.Properties();
        java.lang.String str20 = properties19.toString();
        boolean boolean21 = properties19.isEmpty();
        java.lang.Object obj24 = properties19.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration25 = properties19.elements();
        java.lang.Object obj26 = properties2.replace((java.lang.Object) objEnumeration18, (java.lang.Object) properties19);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties19.elements();
        java.util.Properties properties28 = new java.util.Properties(properties19);
        java.util.Properties properties29 = new java.util.Properties();
        java.lang.String str30 = properties29.toString();
        java.lang.Object obj32 = properties29.remove((java.lang.Object) (short) 100);
        java.lang.Object obj35 = properties29.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean37 = properties29.containsKey((java.lang.Object) 0L);
        java.lang.Object obj40 = properties29.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties41 = new java.util.Properties();
        java.lang.String str42 = properties41.toString();
        java.lang.Object obj44 = properties41.remove((java.lang.Object) (short) 100);
        java.lang.Object obj47 = properties41.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj48 = properties41.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration49 = properties41.elements();
        properties29.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties41);
        java.lang.Object obj51 = properties41.clone();
        properties41.clear();
        java.util.Enumeration<?> wildcardEnumeration53 = properties41.propertyNames();
        boolean boolean54 = properties19.contains((java.lang.Object) wildcardEnumeration53);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties55 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties56 = atomikosProperties55.asProperties();
        atomikosProperties55.service = "{-1.0=100}";
        long long59 = atomikosProperties55.getDefaultJtaTimeout();
        atomikosProperties55.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties55.setMaxActives(100);
        java.lang.String str64 = atomikosProperties55.logBaseDir;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties65 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean66 = atomikosProperties65.isSerialJtaTransactions();
        boolean boolean67 = atomikosProperties65.allowSubTransactions;
        java.lang.Object obj68 = properties19.getOrDefault((java.lang.Object) atomikosProperties55, (java.lang.Object) atomikosProperties65);
        boolean boolean69 = atomikosProperties65.threadedTwoPhaseCommit;
        java.lang.String str70 = atomikosProperties65.getTransactionManagerUniqueName();
        atomikosProperties65.setService("{100=100}");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{}" + "'", str4, "{}");
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(objEnumeration18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{}" + "'", str20, "{}");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(objEnumeration25);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "{}" + "'", str30, "{}");
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "{}" + "'", str42, "{}");
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertEquals(obj48.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj48), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj48), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration49);
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertEquals(obj51.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj51), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj51), "{1.0=-1}");
        org.junit.Assert.assertNotNull(wildcardEnumeration53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(properties56);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 10000L + "'", long59 == 10000L);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(obj68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(str70);
    }

    @Test
    public void test01346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01346");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getLogBaseName();
        java.lang.String str5 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.consoleFileName = "";
        atomikosProperties0.forceShutdownOnVmExit = false;
        boolean boolean10 = atomikosProperties0.isAllowSubTransactions();
        atomikosProperties0.setDefaultJtaTimeout(86400000L);
        int int13 = atomikosProperties0.maxActives;
        atomikosProperties0.setService("{100=100}");
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tmlog" + "'", str4, "tmlog");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 50 + "'", int13 == 50);
    }

    @Test
    public void test01347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01347");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        long long7 = atomikosProperties0.getDefaultJtaTimeout();
        long long8 = atomikosProperties0.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery9 = atomikosProperties0.getRecovery();
        long long10 = recovery9.delay;
        int int11 = recovery9.maxRetries;
        recovery9.setMaxRetries((int) '#');
        long long14 = recovery9.forgetOrphanedLogEntriesDelay;
        long long15 = recovery9.getRetryInterval();
        int int16 = recovery9.maxRetries;
        recovery9.delay = (-1);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(recovery9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 86400000L + "'", long14 == 86400000L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10000L + "'", long15 == 10000L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 35 + "'", int16 == 35);
    }

    @Test
    public void test01348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01348");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        java.util.Properties properties2 = new java.util.Properties();
        java.lang.Object obj4 = properties2.remove((java.lang.Object) (-1.0d));
        boolean boolean5 = properties2.isEmpty();
        int int6 = properties2.size();
        java.lang.String str8 = properties2.getProperty("{}");
        java.lang.Object obj9 = properties1.remove((java.lang.Object) properties2);
        java.util.Properties properties10 = new java.util.Properties();
        java.util.Properties properties11 = new java.util.Properties();
        java.lang.String str12 = properties11.toString();
        boolean boolean13 = properties11.isEmpty();
        java.util.Properties properties14 = new java.util.Properties();
        java.lang.String str15 = properties14.toString();
        java.lang.Object obj17 = properties14.remove((java.lang.Object) (short) 100);
        java.lang.Object obj20 = properties14.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean22 = properties14.containsKey((java.lang.Object) 0L);
        boolean boolean23 = properties11.containsValue((java.lang.Object) 0L);
        boolean boolean26 = properties10.replace((java.lang.Object) 0L, (java.lang.Object) 0.0f, (java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties10.elements();
        java.lang.String str28 = properties10.toString();
        java.util.Enumeration<java.lang.Object> objEnumeration29 = properties10.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties31 = atomikosProperties30.asProperties();
        boolean boolean32 = properties1.remove((java.lang.Object) properties10, (java.lang.Object) properties31);
        java.io.InputStream inputStream33 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties10.loadFromXML(inputStream33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "{}" + "'", str12, "{}");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{}" + "'", str15, "{}");
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "{}" + "'", str28, "{}");
        org.junit.Assert.assertNotNull(objEnumeration29);
        org.junit.Assert.assertNotNull(properties31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test01349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01349");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.util.Properties properties4 = new java.util.Properties();
        java.lang.String str5 = properties4.toString();
        boolean boolean6 = properties4.isEmpty();
        java.lang.Object obj9 = properties4.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration10 = properties4.elements();
        boolean boolean11 = properties0.containsKey((java.lang.Object) properties4);
        java.util.Set<java.lang.String> strSet12 = properties0.stringPropertyNames();
        java.util.Set<java.lang.Object> objSet13 = properties0.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties15 = atomikosProperties14.asProperties();
        atomikosProperties14.service = "{-1.0=100}";
        long long18 = atomikosProperties14.getDefaultJtaTimeout();
        atomikosProperties14.enableLogging = false;
        atomikosProperties14.setMaxTimeout((long) (byte) 0);
        atomikosProperties14.setAllowSubTransactions(true);
        java.util.Properties properties25 = new java.util.Properties();
        java.lang.Object obj27 = properties25.remove((java.lang.Object) (-1.0d));
        boolean boolean28 = properties25.isEmpty();
        java.util.Properties properties29 = new java.util.Properties();
        java.lang.String str30 = properties29.toString();
        java.lang.Object obj32 = properties29.remove((java.lang.Object) (short) 100);
        java.lang.Object obj35 = properties29.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean37 = properties29.containsKey((java.lang.Object) 0L);
        java.lang.Object obj40 = properties29.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj43 = properties29.setProperty("", "{-1.0=100}");
        java.lang.Object obj44 = properties29.clone();
        java.lang.Object obj45 = properties25.get((java.lang.Object) properties29);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery47 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery47.retryInterval = (short) 100;
        recovery47.forgetOrphanedLogEntriesDelay = 'a';
        long long52 = recovery47.getDelay();
        long long53 = recovery47.getRetryInterval();
        recovery47.forgetOrphanedLogEntriesDelay = 10000L;
        atomikosProperties14.set(properties29, "tmlog", (java.lang.Object) recovery47);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties57 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties58 = atomikosProperties57.asProperties();
        atomikosProperties57.service = "{-1.0=100}";
        long long61 = atomikosProperties57.getDefaultJtaTimeout();
        atomikosProperties57.serialJtaTransactions = true;
        java.lang.Object obj64 = properties0.put((java.lang.Object) "tmlog", (java.lang.Object) true);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties65 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties66 = atomikosProperties65.asProperties();
        atomikosProperties65.service = "{-1.0=100}";
        long long69 = atomikosProperties65.getDefaultJtaTimeout();
        atomikosProperties65.serialJtaTransactions = true;
        long long72 = atomikosProperties65.maxTimeout;
        atomikosProperties65.setLogBaseDir("{-1.0=100}");
        int int75 = atomikosProperties65.getConsoleFileCount();
        atomikosProperties65.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties78 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties79 = atomikosProperties78.asProperties();
        atomikosProperties78.service = "{-1.0=100}";
        long long82 = atomikosProperties78.getDefaultJtaTimeout();
        atomikosProperties78.setTransactionManagerUniqueName("{}");
        atomikosProperties78.consoleFileName = "hi!";
        int int87 = atomikosProperties78.getConsoleFileCount();
        boolean boolean88 = atomikosProperties78.isThreadedTwoPhaseCommit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel89 = atomikosProperties78.consoleLogLevel;
        atomikosProperties65.consoleLogLevel = atomikosLoggingLevel89;
        java.lang.Object obj91 = properties0.get((java.lang.Object) atomikosProperties65);
        boolean boolean92 = atomikosProperties65.isAllowSubTransactions();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{}" + "'", str5, "{}");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNotNull(objEnumeration10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNotNull(objSet13);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10000L + "'", long18 == 10000L);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "{}" + "'", str30, "{}");
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNotNull(obj44);
// flaky:         org.junit.Assert.assertEquals(obj44.toString(), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj44), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj44), "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 10000L + "'", long52 == 10000L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 100L + "'", long53 == 100L);
        org.junit.Assert.assertNotNull(properties58);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 10000L + "'", long61 == 10000L);
        org.junit.Assert.assertNull(obj64);
        org.junit.Assert.assertNotNull(properties66);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 10000L + "'", long69 == 10000L);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 300000L + "'", long72 == 300000L);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(properties79);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 10000L + "'", long82 == 10000L);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel89 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel89.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
    }

    @Test
    public void test01350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01350");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.retryInterval = (short) 100;
        recovery0.delay = (-1L);
        long long5 = recovery0.delay;
        int int6 = recovery0.getMaxRetries();
        long long7 = recovery0.getForgetOrphanedLogEntriesDelay();
        long long8 = recovery0.getForgetOrphanedLogEntriesDelay();
        recovery0.setRetryInterval(300000L);
        long long11 = recovery0.getRetryInterval();
        long long12 = recovery0.getRetryInterval();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 86400000L + "'", long7 == 86400000L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 86400000L + "'", long8 == 86400000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 300000L + "'", long11 == 300000L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 300000L + "'", long12 == 300000L);
    }

    @Test
    public void test01351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01351");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        atomikosProperties2.service = "{-1.0=100}";
        long long6 = atomikosProperties2.getDefaultJtaTimeout();
        atomikosProperties2.consoleFileLimit = '#';
        java.lang.Object obj9 = properties1.get((java.lang.Object) atomikosProperties2);
        boolean boolean10 = atomikosProperties2.forceShutdownOnVmExit;
        atomikosProperties2.setOutputDir("");
        atomikosProperties2.setThreadedTwoPhaseCommit(false);
        boolean boolean15 = atomikosProperties2.isEnableLogging();
        java.util.Properties properties16 = new java.util.Properties();
        java.lang.String str17 = properties16.toString();
        java.lang.Object obj19 = properties16.remove((java.lang.Object) (short) 100);
        boolean boolean21 = properties16.containsKey((java.lang.Object) 0L);
        properties16.clear();
        java.util.Set<java.lang.Object> objSet23 = properties16.keySet();
        java.util.Enumeration<java.lang.Object> objEnumeration24 = properties16.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties27 = atomikosProperties26.asProperties();
        atomikosProperties26.service = "{-1.0=100}";
        long long30 = atomikosProperties26.getDefaultJtaTimeout();
        atomikosProperties26.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties26.setMaxActives(100);
        boolean boolean35 = atomikosProperties26.enableLogging;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery36 = atomikosProperties26.recovery;
        atomikosProperties26.checkpointInterval = 300000L;
        int int39 = atomikosProperties26.consoleFileCount;
        atomikosProperties26.enableLogging = true;
        atomikosProperties26.setLogBaseName("hi!");
        atomikosProperties26.setLogBaseDir("hi!");
        atomikosProperties2.set(properties16, "tm.out", (java.lang.Object) "hi!");
        java.util.Properties properties47 = new java.util.Properties();
        java.lang.String str48 = properties47.toString();
        boolean boolean49 = properties47.isEmpty();
        properties47.clear();
        java.util.Properties properties51 = new java.util.Properties(properties47);
        java.lang.Object obj52 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj53 = properties16.put((java.lang.Object) properties51, obj52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "{}" + "'", str17, "{}");
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(objSet23);
        org.junit.Assert.assertNotNull(objEnumeration24);
        org.junit.Assert.assertNotNull(properties27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 10000L + "'", long30 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(recovery36);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "{}" + "'", str48, "{}");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
    }

    @Test
    public void test01352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01352");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.util.Properties properties3 = new java.util.Properties();
        java.lang.String str4 = properties3.toString();
        java.lang.Object obj6 = properties3.remove((java.lang.Object) (short) 100);
        java.lang.Object obj9 = properties3.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean11 = properties3.containsKey((java.lang.Object) 0L);
        java.lang.Object obj14 = properties3.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj17 = properties3.setProperty("", "{-1.0=100}");
        java.util.Enumeration<java.lang.Object> objEnumeration18 = properties3.keys();
        java.util.Properties properties19 = new java.util.Properties();
        java.lang.String str20 = properties19.toString();
        boolean boolean21 = properties19.isEmpty();
        java.lang.Object obj24 = properties19.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration25 = properties19.elements();
        java.lang.Object obj26 = properties2.replace((java.lang.Object) objEnumeration18, (java.lang.Object) properties19);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties19.elements();
        java.util.Enumeration<java.lang.Object> objEnumeration28 = properties19.keys();
        java.util.Properties properties29 = new java.util.Properties();
        java.util.Properties properties30 = new java.util.Properties();
        java.lang.String str31 = properties30.toString();
        java.lang.Object obj33 = properties30.remove((java.lang.Object) (short) 100);
        java.lang.Object obj36 = properties30.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        int int37 = properties30.size();
        java.util.Properties properties38 = new java.util.Properties();
        java.lang.Object obj40 = properties38.remove((java.lang.Object) (-1.0d));
        boolean boolean41 = properties38.isEmpty();
        java.lang.Object obj44 = properties38.setProperty("hi!", "{}");
        boolean boolean45 = properties29.remove((java.lang.Object) int37, (java.lang.Object) properties38);
        java.util.Properties properties46 = new java.util.Properties();
        java.lang.String str47 = properties46.toString();
        java.lang.Object obj49 = properties46.remove((java.lang.Object) (short) 100);
        java.util.Properties properties50 = new java.util.Properties();
        java.lang.String str51 = properties50.toString();
        boolean boolean52 = properties50.isEmpty();
        java.lang.Object obj55 = properties50.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration56 = properties50.elements();
        boolean boolean57 = properties46.containsKey((java.lang.Object) properties50);
        boolean boolean58 = properties38.contains((java.lang.Object) boolean57);
        java.util.Set<java.lang.String> strSet59 = properties38.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties60 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean61 = atomikosProperties60.isSerialJtaTransactions();
        atomikosProperties60.logBaseName = "{-1.0=100}";
        int int64 = atomikosProperties60.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery65 = atomikosProperties60.getRecovery();
        atomikosProperties60.setConsoleFileCount((int) (byte) 100);
        atomikosProperties60.setAllowSubTransactions(true);
        atomikosProperties60.setService("tm.out");
        int int72 = atomikosProperties60.consoleFileLimit;
        atomikosProperties60.setDefaultJtaTimeout((long) 'a');
        boolean boolean75 = atomikosProperties60.enableLogging;
        atomikosProperties60.setService("{={-1.0=100}, -1.0=100}");
        boolean boolean78 = properties19.remove((java.lang.Object) properties38, (java.lang.Object) atomikosProperties60);
        java.lang.String str81 = properties19.getProperty("tm.out", "{1.0=-1, -1.0=100}");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{}" + "'", str4, "{}");
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(objEnumeration18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{}" + "'", str20, "{}");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(objEnumeration25);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertNotNull(objEnumeration28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "{}" + "'", str31, "{}");
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "{}" + "'", str47, "{}");
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "{}" + "'", str51, "{}");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertNotNull(objEnumeration56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(strSet59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 50 + "'", int64 == 50);
        org.junit.Assert.assertNotNull(recovery65);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "{1.0=-1, -1.0=100}" + "'", str81, "{1.0=-1, -1.0=100}");
    }

    @Test
    public void test01353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01353");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj7 = properties0.clone();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet8 = properties0.entrySet();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet9 = properties0.entrySet();
        java.io.Writer writer10 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.store(writer10, "tm.out");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEntrySet8);
        org.junit.Assert.assertNotNull(objEntrySet9);
    }

    @Test
    public void test01354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01354");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        long long5 = atomikosProperties0.getMaxTimeout();
        int int6 = atomikosProperties0.consoleFileCount;
        long long7 = atomikosProperties0.getCheckpointInterval();
        atomikosProperties0.serialJtaTransactions = true;
        java.lang.String str10 = atomikosProperties0.logBaseName;
        long long11 = atomikosProperties0.checkpointInterval;
        int int12 = atomikosProperties0.getMaxActives();
        java.lang.String str13 = atomikosProperties0.transactionManagerUniqueName;
        boolean boolean14 = atomikosProperties0.isThreadedTwoPhaseCommit();
        atomikosProperties0.consoleFileName = "{100=100}";
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "tmlog" + "'", str10, "tmlog");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 500L + "'", long11 == 500L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 50 + "'", int12 == 50);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test01355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01355");
        java.util.Properties properties0 = new java.util.Properties();
        properties0.clear();
        java.lang.String str2 = properties0.toString();
        java.lang.Object obj3 = properties0.clone();
        properties0.clear();
        java.lang.Object obj5 = null;
        java.util.Properties properties6 = new java.util.Properties();
        java.lang.String str7 = properties6.toString();
        java.lang.Object obj9 = properties6.remove((java.lang.Object) (short) 100);
        java.lang.Object obj10 = properties6.clone();
        java.lang.Object obj13 = properties6.setProperty("{100=100}", "");
        java.util.Properties properties14 = new java.util.Properties();
        java.lang.String str15 = properties14.toString();
        java.lang.Object obj17 = properties14.remove((java.lang.Object) (short) 100);
        java.util.Properties properties18 = new java.util.Properties();
        java.lang.String str19 = properties18.toString();
        boolean boolean20 = properties18.isEmpty();
        java.lang.Object obj23 = properties18.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration24 = properties18.elements();
        boolean boolean25 = properties14.containsKey((java.lang.Object) properties18);
        java.util.Enumeration<?> wildcardEnumeration26 = properties14.propertyNames();
        java.util.Properties properties27 = new java.util.Properties();
        java.lang.Object obj29 = properties27.remove((java.lang.Object) (-1.0d));
        boolean boolean30 = properties27.isEmpty();
        java.lang.Object obj33 = properties27.setProperty("hi!", "{}");
        java.util.Set<java.lang.String> strSet34 = properties27.stringPropertyNames();
        java.lang.Object obj35 = properties14.get((java.lang.Object) properties27);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties37 = atomikosProperties36.asProperties();
        atomikosProperties36.service = "{-1.0=100}";
        long long40 = atomikosProperties36.getDefaultJtaTimeout();
        atomikosProperties36.serialJtaTransactions = true;
        long long43 = atomikosProperties36.getDefaultJtaTimeout();
        long long44 = atomikosProperties36.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery45 = atomikosProperties36.getRecovery();
        long long46 = recovery45.delay;
        recovery45.maxRetries = (-1);
        java.lang.Object obj49 = properties6.put((java.lang.Object) properties14, (java.lang.Object) (-1));
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj50 = properties0.getOrDefault(obj5, (java.lang.Object) (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{}" + "'", str2, "{}");
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "{}" + "'", str7, "{}");
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{}");
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{}" + "'", str15, "{}");
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "{}" + "'", str19, "{}");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNotNull(objEnumeration24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(wildcardEnumeration26);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNotNull(properties37);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 10000L + "'", long40 == 10000L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 10000L + "'", long43 == 10000L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 500L + "'", long44 == 500L);
        org.junit.Assert.assertNotNull(recovery45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 10000L + "'", long46 == 10000L);
        org.junit.Assert.assertNull(obj49);
    }

    @Test
    public void test01356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01356");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.util.Properties properties3 = new java.util.Properties();
        java.lang.String str4 = properties3.toString();
        java.lang.Object obj6 = properties3.remove((java.lang.Object) (short) 100);
        java.lang.Object obj9 = properties3.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean11 = properties3.containsKey((java.lang.Object) 0L);
        java.lang.Object obj14 = properties3.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj17 = properties3.setProperty("", "{-1.0=100}");
        java.util.Enumeration<java.lang.Object> objEnumeration18 = properties3.keys();
        java.util.Properties properties19 = new java.util.Properties();
        java.lang.String str20 = properties19.toString();
        boolean boolean21 = properties19.isEmpty();
        java.lang.Object obj24 = properties19.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration25 = properties19.elements();
        java.lang.Object obj26 = properties2.replace((java.lang.Object) objEnumeration18, (java.lang.Object) properties19);
        java.util.Properties properties27 = new java.util.Properties();
        java.lang.String str28 = properties27.toString();
        java.lang.Object obj30 = properties27.remove((java.lang.Object) (short) 100);
        java.lang.Object obj33 = properties27.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj34 = properties27.clone();
        java.util.Set<java.lang.String> strSet35 = properties27.stringPropertyNames();
        java.util.Properties properties36 = new java.util.Properties();
        java.lang.String str37 = properties36.toString();
        java.lang.Object obj39 = properties36.remove((java.lang.Object) (short) 100);
        java.lang.Object obj42 = properties36.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean44 = properties36.containsKey((java.lang.Object) 0L);
        java.lang.Object obj47 = properties36.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties48 = new java.util.Properties();
        java.lang.String str49 = properties48.toString();
        java.lang.Object obj51 = properties48.remove((java.lang.Object) (short) 100);
        java.lang.Object obj54 = properties48.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj55 = properties48.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration56 = properties48.elements();
        properties36.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties48);
        java.util.Properties properties58 = new java.util.Properties();
        java.lang.String str59 = properties58.toString();
        java.lang.Object obj61 = properties58.remove((java.lang.Object) (short) 100);
        java.lang.Object obj64 = properties58.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean66 = properties58.containsKey((java.lang.Object) 0L);
        java.lang.Object obj69 = properties58.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties70 = new java.util.Properties();
        java.lang.String str71 = properties70.toString();
        java.lang.Object obj73 = properties70.remove((java.lang.Object) (short) 100);
        java.lang.Object obj76 = properties70.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj77 = properties70.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration78 = properties70.elements();
        properties58.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties70);
        java.lang.Object obj80 = properties27.putIfAbsent((java.lang.Object) properties36, (java.lang.Object) properties70);
        java.lang.Object obj82 = properties2.getOrDefault((java.lang.Object) properties70, (java.lang.Object) (short) 10);
        java.util.Set<java.lang.String> strSet83 = properties2.stringPropertyNames();
        java.lang.Class<?> wildcardClass84 = properties2.getClass();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{}" + "'", str4, "{}");
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(objEnumeration18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{}" + "'", str20, "{}");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(objEnumeration25);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "{}" + "'", str28, "{}");
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "{1.0=-1}");
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "{}" + "'", str37, "{}");
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "{}" + "'", str49, "{}");
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertEquals(obj55.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj55), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj55), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration56);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "{}" + "'", str59, "{}");
        org.junit.Assert.assertNull(obj61);
        org.junit.Assert.assertNull(obj64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(obj69);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "{}" + "'", str71, "{}");
        org.junit.Assert.assertNull(obj73);
        org.junit.Assert.assertNull(obj76);
        org.junit.Assert.assertNotNull(obj77);
        org.junit.Assert.assertEquals(obj77.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj77), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj77), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration78);
        org.junit.Assert.assertNull(obj80);
        org.junit.Assert.assertEquals("'" + obj82 + "' != '" + (short) 10 + "'", obj82, (short) 10);
        org.junit.Assert.assertNotNull(strSet83);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test01357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01357");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        java.lang.String str6 = atomikosProperties0.getOutputDir();
        boolean boolean7 = atomikosProperties0.isForceShutdownOnVmExit();
        boolean boolean8 = atomikosProperties0.enableLogging;
        java.util.Properties properties9 = atomikosProperties0.asProperties();
        atomikosProperties0.enableLogging = false;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(properties9);
    }

    @Test
    public void test01358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01358");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        boolean boolean7 = atomikosProperties0.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery8 = atomikosProperties0.recovery;
        boolean boolean9 = atomikosProperties0.threadedTwoPhaseCommit;
        atomikosProperties0.service = "{-1.0=100}";
        atomikosProperties0.logBaseDir = "{-1.0=100}";
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(recovery8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test01359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01359");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj7 = properties0.clone();
        java.util.Properties properties8 = new java.util.Properties();
        java.lang.Object obj10 = properties8.remove((java.lang.Object) (-1.0d));
        boolean boolean11 = properties8.isEmpty();
        int int12 = properties8.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery13 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery13.retryInterval = (short) 100;
        recovery13.forgetOrphanedLogEntriesDelay = 'a';
        java.util.Properties properties18 = new java.util.Properties();
        java.lang.Object obj20 = properties18.remove((java.lang.Object) (-1.0d));
        boolean boolean21 = properties18.isEmpty();
        int int22 = properties18.size();
        java.lang.String str24 = properties18.getProperty("{}");
        boolean boolean25 = properties8.remove((java.lang.Object) recovery13, (java.lang.Object) properties18);
        boolean boolean26 = properties0.containsValue((java.lang.Object) properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties27.setAllowSubTransactions(true);
        boolean boolean30 = atomikosProperties27.enableLogging;
        atomikosProperties27.consoleFileLimit = (byte) 100;
        java.util.Properties properties33 = new java.util.Properties();
        java.lang.String str34 = properties33.toString();
        java.util.Properties properties35 = new java.util.Properties(properties33);
        java.util.Properties properties37 = new java.util.Properties();
        java.lang.String str38 = properties37.toString();
        java.lang.Object obj40 = properties37.remove((java.lang.Object) (short) 100);
        java.lang.Object obj43 = properties37.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean45 = properties37.containsKey((java.lang.Object) 0L);
        java.lang.Object obj48 = properties37.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties49 = new java.util.Properties(properties37);
        java.util.Enumeration<java.lang.Object> objEnumeration50 = properties49.elements();
        atomikosProperties27.set(properties35, "{={-1.0=100}, -1.0=100}", (java.lang.Object) properties49);
        atomikosProperties27.setOutputDir("hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery54 = atomikosProperties27.getRecovery();
        atomikosProperties27.setOutputDir("{={-1.0=100}, -1.0=100}");
        boolean boolean57 = atomikosProperties27.isForceShutdownOnVmExit();
        atomikosProperties27.setOutputDir("hi!");
        java.lang.String str60 = atomikosProperties27.logBaseDir;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery61 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery61.retryInterval = (short) 100;
        recovery61.delay = (-1L);
        long long66 = recovery61.delay;
        recovery61.delay = (short) 1;
        long long69 = recovery61.getRetryInterval();
        long long70 = recovery61.getForgetOrphanedLogEntriesDelay();
        recovery61.setMaxRetries(10);
        int int73 = recovery61.maxRetries;
        recovery61.setForgetOrphanedLogEntriesDelay((long) 32);
        long long76 = recovery61.delay;
        int int77 = recovery61.getMaxRetries();
        java.lang.Object obj78 = properties0.put((java.lang.Object) atomikosProperties27, (java.lang.Object) recovery61);
        long long79 = recovery61.getForgetOrphanedLogEntriesDelay();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{1.0=-1}");
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "{}" + "'", str34, "{}");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "{}" + "'", str38, "{}");
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertNotNull(objEnumeration50);
        org.junit.Assert.assertNotNull(recovery54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + (-1L) + "'", long66 == (-1L));
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 100L + "'", long69 == 100L);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 86400000L + "'", long70 == 86400000L);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 10 + "'", int73 == 10);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 1L + "'", long76 == 1L);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 10 + "'", int77 == 10);
        org.junit.Assert.assertNull(obj78);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 32L + "'", long79 == 32L);
    }

    @Test
    public void test01360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01360");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getLogBaseName();
        long long5 = atomikosProperties0.defaultJtaTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel6 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel6);
        atomikosProperties0.setLogBaseDir("");
        atomikosProperties0.transactionManagerUniqueName = "tmlog";
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tmlog" + "'", str4, "tmlog");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 10000L + "'", long5 == 10000L);
    }

    @Test
    public void test01361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01361");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.retryInterval = (short) 100;
        recovery0.forgetOrphanedLogEntriesDelay = 'a';
        long long5 = recovery0.getDelay();
        long long6 = recovery0.getRetryInterval();
        recovery0.retryInterval = 10;
        recovery0.setDelay(50L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 10000L + "'", long5 == 10000L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 100L + "'", long6 == 100L);
    }

    @Test
    public void test01362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01362");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getLogBaseName();
        java.lang.String str5 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.consoleFileName = "";
        long long8 = atomikosProperties0.checkpointInterval;
        long long9 = atomikosProperties0.defaultJtaTimeout;
        java.lang.String str10 = atomikosProperties0.getLogBaseDir();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tmlog" + "'", str4, "tmlog");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10000L + "'", long9 == 10000L);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test01363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01363");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.remove((java.lang.Object) (-1.0d));
        boolean boolean3 = properties0.isEmpty();
        int int4 = properties0.size();
        java.lang.String str6 = properties0.getProperty("{}");
        java.util.Set<java.lang.Object> objSet7 = properties0.keySet();
        java.lang.String str9 = properties0.getProperty("hi!");
        java.io.PrintWriter printWriter10 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.list(printWriter10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(objSet7);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test01364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01364");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileLimit = (byte) 10;
        long long7 = atomikosProperties0.getMaxTimeout();
        boolean boolean8 = atomikosProperties0.allowSubTransactions;
        atomikosProperties0.threadedTwoPhaseCommit = false;
        java.util.Properties properties11 = new java.util.Properties();
        java.util.Properties properties12 = new java.util.Properties();
        java.lang.String str13 = properties12.toString();
        boolean boolean14 = properties12.isEmpty();
        java.util.Properties properties15 = new java.util.Properties();
        java.lang.String str16 = properties15.toString();
        java.lang.Object obj18 = properties15.remove((java.lang.Object) (short) 100);
        java.lang.Object obj21 = properties15.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean23 = properties15.containsKey((java.lang.Object) 0L);
        boolean boolean24 = properties12.containsValue((java.lang.Object) 0L);
        boolean boolean27 = properties11.replace((java.lang.Object) 0L, (java.lang.Object) 0.0f, (java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration28 = properties11.elements();
        java.lang.String str29 = properties11.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean32 = atomikosProperties31.isSerialJtaTransactions();
        atomikosProperties31.logBaseName = "{-1.0=100}";
        int int35 = atomikosProperties31.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery36 = atomikosProperties31.getRecovery();
        atomikosProperties31.setConsoleFileCount((int) (byte) 100);
        atomikosProperties31.maxTimeout = 50;
        java.lang.String str41 = atomikosProperties31.getConsoleFileName();
        atomikosProperties31.setDefaultJtaTimeout((long) 'a');
        int int44 = atomikosProperties31.maxActives;
        atomikosProperties0.set(properties11, "tm.out", (java.lang.Object) atomikosProperties31);
        java.io.OutputStream outputStream46 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties11.store(outputStream46, "{100=100}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{}" + "'", str13, "{}");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{}" + "'", str16, "{}");
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(objEnumeration28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "{}" + "'", str29, "{}");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 50 + "'", int35 == 50);
        org.junit.Assert.assertNotNull(recovery36);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "tm.out" + "'", str41, "tm.out");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 50 + "'", int44 == 50);
    }

    @Test
    public void test01365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01365");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.util.Properties properties7 = new java.util.Properties();
        java.lang.String str8 = properties7.toString();
        java.lang.Object obj10 = properties7.remove((java.lang.Object) (short) 100);
        java.lang.Object obj13 = properties7.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        int int14 = properties7.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery15 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery15.retryInterval = (short) 100;
        recovery15.forgetOrphanedLogEntriesDelay = 'a';
        long long20 = recovery15.retryInterval;
        recovery15.setForgetOrphanedLogEntriesDelay((long) 0);
        java.lang.Object obj23 = properties0.replace((java.lang.Object) int14, (java.lang.Object) recovery15);
        recovery15.forgetOrphanedLogEntriesDelay = 300000L;
        recovery15.forgetOrphanedLogEntriesDelay = 35;
        recovery15.setDelay(97L);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{}" + "'", str8, "{}");
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 100L + "'", long20 == 100L);
        org.junit.Assert.assertNull(obj23);
    }

    @Test
    public void test01366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01366");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        long long7 = atomikosProperties0.maxTimeout;
        atomikosProperties0.setLogBaseDir("{-1.0=100}");
        atomikosProperties0.setMaxTimeout((-1L));
        boolean boolean12 = atomikosProperties0.isSerialJtaTransactions();
        java.lang.String str13 = atomikosProperties0.service;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{-1.0=100}" + "'", str13, "{-1.0=100}");
    }

    @Test
    public void test01367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01367");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long1 = recovery0.getRetryInterval();
        long long2 = recovery0.retryInterval;
        long long3 = recovery0.delay;
        java.lang.Class<?> wildcardClass4 = recovery0.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 10000L + "'", long1 == 10000L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10000L + "'", long2 == 10000L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 10000L + "'", long3 == 10000L);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test01368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01368");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj3 = properties0.setProperty("{}", "{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery4 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery4.retryInterval = (short) 100;
        recovery4.setForgetOrphanedLogEntriesDelay((long) 5);
        recovery4.setForgetOrphanedLogEntriesDelay((long) (short) 0);
        java.util.Properties properties11 = new java.util.Properties();
        java.lang.String str12 = properties11.toString();
        java.lang.Object obj14 = properties11.remove((java.lang.Object) (short) 100);
        java.util.Properties properties15 = new java.util.Properties();
        java.lang.String str16 = properties15.toString();
        boolean boolean17 = properties15.isEmpty();
        java.lang.Object obj20 = properties15.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration21 = properties15.elements();
        boolean boolean22 = properties11.containsKey((java.lang.Object) properties15);
        java.lang.Object obj23 = properties0.putIfAbsent((java.lang.Object) (short) 0, (java.lang.Object) properties15);
        java.lang.String str24 = properties0.toString();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "{}" + "'", str12, "{}");
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{}" + "'", str16, "{}");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNotNull(objEnumeration21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "{0={100=100}, {}={}}" + "'", str24, "{0={100=100}, {}={}}");
    }

    @Test
    public void test01369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01369");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.retryInterval = (short) 100;
        recovery0.forgetOrphanedLogEntriesDelay = 'a';
        long long5 = recovery0.retryInterval;
        recovery0.forgetOrphanedLogEntriesDelay = 0L;
        long long8 = recovery0.getForgetOrphanedLogEntriesDelay();
        long long9 = recovery0.getForgetOrphanedLogEntriesDelay();
        recovery0.retryInterval = 0L;
        long long12 = recovery0.retryInterval;
        int int13 = recovery0.maxRetries;
        long long14 = recovery0.getDelay();
        recovery0.setRetryInterval((long) 1);
        recovery0.setMaxRetries(1);
        recovery0.setForgetOrphanedLogEntriesDelay(52L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 100L + "'", long5 == 100L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10000L + "'", long14 == 10000L);
    }

    @Test
    public void test01370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01370");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties();
        java.lang.String str2 = properties1.toString();
        java.lang.Object obj4 = properties1.remove((java.lang.Object) (short) 100);
        java.lang.Object obj7 = properties1.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        int int8 = properties1.size();
        java.util.Properties properties9 = new java.util.Properties();
        java.lang.Object obj11 = properties9.remove((java.lang.Object) (-1.0d));
        boolean boolean12 = properties9.isEmpty();
        java.lang.Object obj15 = properties9.setProperty("hi!", "{}");
        boolean boolean16 = properties0.remove((java.lang.Object) int8, (java.lang.Object) properties9);
        java.util.Enumeration<java.lang.Object> objEnumeration17 = properties0.keys();
        java.util.Properties properties18 = new java.util.Properties();
        properties18.clear();
        java.lang.String str20 = properties18.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties21.setEnableLogging(true);
        atomikosProperties21.consoleFileCount = 0;
        int int26 = atomikosProperties21.getMaxActives();
        java.lang.String str27 = atomikosProperties21.getLogBaseDir();
        java.lang.String str28 = atomikosProperties21.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery29 = atomikosProperties21.getRecovery();
        long long30 = atomikosProperties21.getDefaultJtaTimeout();
        int int31 = atomikosProperties21.getMaxActives();
        atomikosProperties21.consoleFileLimit = 50;
        boolean boolean34 = atomikosProperties21.isEnableLogging();
        atomikosProperties21.maxActives = (short) 10;
        atomikosProperties21.setLogBaseName("hi!");
        java.lang.Object obj39 = properties0.replace((java.lang.Object) properties18, (java.lang.Object) "hi!");
        java.util.Properties properties40 = new java.util.Properties();
        java.lang.String str41 = properties40.toString();
        java.lang.Object obj43 = properties40.remove((java.lang.Object) (short) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties45 = atomikosProperties44.asProperties();
        atomikosProperties44.service = "{-1.0=100}";
        long long48 = atomikosProperties44.getDefaultJtaTimeout();
        atomikosProperties44.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties44.setMaxActives(100);
        atomikosProperties44.defaultJtaTimeout = ' ';
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties55 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties56 = atomikosProperties55.asProperties();
        atomikosProperties55.service = "{-1.0=100}";
        long long59 = atomikosProperties55.getDefaultJtaTimeout();
        atomikosProperties55.outputDir = "{={-1.0=100}, -1.0=100}";
        long long62 = atomikosProperties55.getCheckpointInterval();
        atomikosProperties55.setConsoleFileCount((int) (byte) 1);
        boolean boolean65 = atomikosProperties55.threadedTwoPhaseCommit;
        java.lang.String str66 = atomikosProperties55.getTransactionManagerUniqueName();
        java.lang.Object obj67 = properties40.put((java.lang.Object) ' ', (java.lang.Object) atomikosProperties55);
        java.util.Properties properties68 = new java.util.Properties();
        java.util.Properties properties69 = new java.util.Properties();
        java.lang.String str70 = properties69.toString();
        boolean boolean71 = properties69.isEmpty();
        java.util.Properties properties72 = new java.util.Properties();
        java.lang.String str73 = properties72.toString();
        java.lang.Object obj75 = properties72.remove((java.lang.Object) (short) 100);
        java.lang.Object obj78 = properties72.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean80 = properties72.containsKey((java.lang.Object) 0L);
        boolean boolean81 = properties69.containsValue((java.lang.Object) 0L);
        boolean boolean84 = properties68.replace((java.lang.Object) 0L, (java.lang.Object) 0.0f, (java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration85 = properties68.elements();
        java.util.Enumeration<java.lang.Object> objEnumeration86 = properties68.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties87 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties88 = atomikosProperties87.asProperties();
        boolean boolean89 = properties40.remove((java.lang.Object) properties68, (java.lang.Object) atomikosProperties87);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties40);
        java.io.PrintStream printStream91 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties40.list(printStream91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{}" + "'", str2, "{}");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objEnumeration17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{}" + "'", str20, "{}");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 50 + "'", int26 == 50);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(recovery29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 10000L + "'", long30 == 10000L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 50 + "'", int31 == 50);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "{}" + "'", str41, "{}");
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNotNull(properties45);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 10000L + "'", long48 == 10000L);
        org.junit.Assert.assertNotNull(properties56);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 10000L + "'", long59 == 10000L);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 500L + "'", long62 == 500L);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "{}" + "'", str70, "{}");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "{}" + "'", str73, "{}");
        org.junit.Assert.assertNull(obj75);
        org.junit.Assert.assertNull(obj78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(objEnumeration85);
        org.junit.Assert.assertNotNull(objEnumeration86);
        org.junit.Assert.assertNotNull(properties88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test01371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01371");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        long long7 = atomikosProperties0.maxTimeout;
        atomikosProperties0.setLogBaseDir("{-1.0=100}");
        int int10 = atomikosProperties0.getMaxActives();
        atomikosProperties0.forceShutdownOnVmExit = false;
        java.lang.String str13 = atomikosProperties0.logBaseName;
        atomikosProperties0.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel16 = atomikosProperties0.getConsoleLogLevel();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 50 + "'", int10 == 50);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel16 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel16.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
    }

    @Test
    public void test01372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01372");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        atomikosProperties2.service = "{-1.0=100}";
        java.lang.String str6 = atomikosProperties2.getTransactionManagerUniqueName();
        atomikosProperties2.consoleFileLimit = (byte) 10;
        long long9 = atomikosProperties2.getMaxTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel10 = null;
        atomikosProperties2.consoleLogLevel = atomikosLoggingLevel10;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery12 = atomikosProperties2.recovery;
        atomikosProperties2.consoleFileCount = (short) -1;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean16 = atomikosProperties15.isSerialJtaTransactions();
        atomikosProperties15.logBaseName = "{-1.0=100}";
        int int19 = atomikosProperties15.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery20 = atomikosProperties15.getRecovery();
        atomikosProperties15.setConsoleFileCount((int) (byte) 100);
        java.lang.String str23 = atomikosProperties15.logBaseName;
        atomikosProperties15.setCheckpointInterval((long) 18);
        long long26 = atomikosProperties15.defaultJtaTimeout;
        boolean boolean27 = atomikosProperties15.forceShutdownOnVmExit;
        java.lang.Object obj28 = properties1.put((java.lang.Object) atomikosProperties2, (java.lang.Object) boolean27);
        java.util.Properties properties29 = new java.util.Properties();
        java.lang.Object obj32 = properties29.setProperty("{}", "{}");
        java.util.Enumeration<java.lang.Object> objEnumeration33 = properties29.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration34 = properties29.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties36 = atomikosProperties35.asProperties();
        atomikosProperties35.service = "{-1.0=100}";
        long long39 = atomikosProperties35.getDefaultJtaTimeout();
        long long40 = atomikosProperties35.getMaxTimeout();
        java.lang.String str41 = atomikosProperties35.outputDir;
        atomikosProperties35.consoleFileName = "tm.out";
        int int44 = atomikosProperties35.consoleFileCount;
        java.lang.Object obj45 = properties29.get((java.lang.Object) int44);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties46 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties47 = atomikosProperties46.asProperties();
        atomikosProperties46.service = "{-1.0=100}";
        long long50 = atomikosProperties46.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel51 = null;
        atomikosProperties46.setConsoleLogLevel(atomikosLoggingLevel51);
        atomikosProperties46.setTransactionManagerUniqueName("{-1.0=100}");
        atomikosProperties46.consoleFileCount = 0;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery57 = atomikosProperties46.getRecovery();
        long long58 = recovery57.retryInterval;
        boolean boolean59 = properties1.remove((java.lang.Object) properties29, (java.lang.Object) long58);
        java.io.Reader reader60 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties29.load(reader60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 300000L + "'", long9 == 300000L);
        org.junit.Assert.assertNotNull(recovery12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 50 + "'", int19 == 50);
        org.junit.Assert.assertNotNull(recovery20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "{-1.0=100}" + "'", str23, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 10000L + "'", long26 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNotNull(objEnumeration33);
        org.junit.Assert.assertNotNull(objEnumeration34);
        org.junit.Assert.assertNotNull(properties36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 10000L + "'", long39 == 10000L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 300000L + "'", long40 == 300000L);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertNotNull(properties47);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 10000L + "'", long50 == 10000L);
        org.junit.Assert.assertNotNull(recovery57);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 10000L + "'", long58 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test01373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01373");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        java.util.Properties properties2 = new java.util.Properties();
        java.lang.Object obj4 = properties2.remove((java.lang.Object) (-1.0d));
        boolean boolean5 = properties2.isEmpty();
        int int6 = properties2.size();
        java.lang.String str8 = properties2.getProperty("{}");
        java.lang.Object obj9 = properties1.remove((java.lang.Object) properties2);
        java.util.Properties properties10 = new java.util.Properties();
        java.util.Properties properties11 = new java.util.Properties();
        java.lang.String str12 = properties11.toString();
        boolean boolean13 = properties11.isEmpty();
        java.util.Properties properties14 = new java.util.Properties();
        java.lang.String str15 = properties14.toString();
        java.lang.Object obj17 = properties14.remove((java.lang.Object) (short) 100);
        java.lang.Object obj20 = properties14.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean22 = properties14.containsKey((java.lang.Object) 0L);
        boolean boolean23 = properties11.containsValue((java.lang.Object) 0L);
        boolean boolean26 = properties10.replace((java.lang.Object) 0L, (java.lang.Object) 0.0f, (java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties10.elements();
        java.lang.String str28 = properties10.toString();
        java.util.Enumeration<java.lang.Object> objEnumeration29 = properties10.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties31 = atomikosProperties30.asProperties();
        boolean boolean32 = properties1.remove((java.lang.Object) properties10, (java.lang.Object) properties31);
        java.util.Properties properties33 = new java.util.Properties();
        java.lang.Object obj35 = properties33.remove((java.lang.Object) (-1.0d));
        boolean boolean37 = properties33.contains((java.lang.Object) "{-1.0=100}");
        java.util.Enumeration<java.lang.Object> objEnumeration38 = properties33.keys();
        java.util.Properties properties39 = new java.util.Properties(properties33);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties41 = atomikosProperties40.asProperties();
        atomikosProperties40.service = "{-1.0=100}";
        java.lang.String str44 = atomikosProperties40.getTransactionManagerUniqueName();
        atomikosProperties40.consoleFileName = "hi!";
        atomikosProperties40.serialJtaTransactions = true;
        atomikosProperties40.outputDir = "tm.out";
        boolean boolean51 = atomikosProperties40.isAllowSubTransactions();
        atomikosProperties40.consoleFileName = "";
        java.lang.Object obj54 = properties31.replace((java.lang.Object) properties39, (java.lang.Object) "");
        java.util.Set<java.lang.Object> objSet55 = properties39.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties56 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties57 = atomikosProperties56.asProperties();
        atomikosProperties56.service = "{-1.0=100}";
        long long60 = atomikosProperties56.getDefaultJtaTimeout();
        atomikosProperties56.consoleFileLimit = '#';
        int int63 = atomikosProperties56.getConsoleFileCount();
        atomikosProperties56.defaultJtaTimeout = ' ';
        java.lang.Object obj66 = properties39.get((java.lang.Object) ' ');
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet67 = properties39.entrySet();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "{}" + "'", str12, "{}");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{}" + "'", str15, "{}");
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "{}" + "'", str28, "{}");
        org.junit.Assert.assertNotNull(objEnumeration29);
        org.junit.Assert.assertNotNull(properties31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(objEnumeration38);
        org.junit.Assert.assertNotNull(properties41);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertNotNull(objSet55);
        org.junit.Assert.assertNotNull(properties57);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 10000L + "'", long60 == 10000L);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertNotNull(objEntrySet67);
    }

    @Test
    public void test01374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01374");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileName = "hi!";
        atomikosProperties0.setCheckpointInterval((long) 5);
        atomikosProperties0.setConsoleFileCount(0);
        boolean boolean11 = atomikosProperties0.isThreadedTwoPhaseCommit();
        atomikosProperties0.consoleFileLimit = 5;
        atomikosProperties0.setConsoleFileLimit((int) (short) 0);
        java.lang.String str16 = atomikosProperties0.logBaseDir;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test01375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01375");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        atomikosProperties0.setConsoleFileCount((int) (byte) 100);
        java.lang.String str8 = atomikosProperties0.logBaseName;
        atomikosProperties0.setCheckpointInterval((long) 18);
        long long11 = atomikosProperties0.defaultJtaTimeout;
        atomikosProperties0.allowSubTransactions = false;
        boolean boolean14 = atomikosProperties0.threadedTwoPhaseCommit;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{-1.0=100}" + "'", str8, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10000L + "'", long11 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test01376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01376");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.remove((java.lang.Object) (-1.0d));
        boolean boolean3 = properties0.isEmpty();
        int int4 = properties0.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery5.retryInterval = (short) 100;
        recovery5.forgetOrphanedLogEntriesDelay = 'a';
        java.util.Properties properties10 = new java.util.Properties();
        java.lang.Object obj12 = properties10.remove((java.lang.Object) (-1.0d));
        boolean boolean13 = properties10.isEmpty();
        int int14 = properties10.size();
        java.lang.String str16 = properties10.getProperty("{}");
        boolean boolean17 = properties0.remove((java.lang.Object) recovery5, (java.lang.Object) properties10);
        int int18 = properties10.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery19 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery19.retryInterval = (short) 100;
        recovery19.delay = (-1L);
        long long24 = recovery19.delay;
        recovery19.delay = (short) 1;
        long long27 = recovery19.getRetryInterval();
        long long28 = recovery19.getForgetOrphanedLogEntriesDelay();
        recovery19.setMaxRetries(10);
        int int31 = recovery19.maxRetries;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties33 = atomikosProperties32.asProperties();
        atomikosProperties32.service = "{-1.0=100}";
        long long36 = atomikosProperties32.getDefaultJtaTimeout();
        atomikosProperties32.setThreadedTwoPhaseCommit(true);
        boolean boolean39 = atomikosProperties32.isEnableLogging();
        atomikosProperties32.defaultJtaTimeout = (byte) 10;
        java.lang.String str42 = atomikosProperties32.transactionManagerUniqueName;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery43 = atomikosProperties32.getRecovery();
        recovery43.forgetOrphanedLogEntriesDelay = 10000L;
        java.lang.Object obj46 = properties10.putIfAbsent((java.lang.Object) recovery19, (java.lang.Object) recovery43);
        int int47 = recovery43.getMaxRetries();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 100L + "'", long27 == 100L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 86400000L + "'", long28 == 86400000L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10 + "'", int31 == 10);
        org.junit.Assert.assertNotNull(properties33);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 10000L + "'", long36 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(recovery43);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 5 + "'", int47 == 5);
    }

    @Test
    public void test01377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01377");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        atomikosProperties2.service = "{-1.0=100}";
        java.lang.String str6 = atomikosProperties2.getTransactionManagerUniqueName();
        atomikosProperties2.consoleFileLimit = (byte) 10;
        long long9 = atomikosProperties2.getMaxTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel10 = null;
        atomikosProperties2.consoleLogLevel = atomikosLoggingLevel10;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery12 = atomikosProperties2.recovery;
        atomikosProperties2.consoleFileCount = (short) -1;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean16 = atomikosProperties15.isSerialJtaTransactions();
        atomikosProperties15.logBaseName = "{-1.0=100}";
        int int19 = atomikosProperties15.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery20 = atomikosProperties15.getRecovery();
        atomikosProperties15.setConsoleFileCount((int) (byte) 100);
        java.lang.String str23 = atomikosProperties15.logBaseName;
        atomikosProperties15.setCheckpointInterval((long) 18);
        long long26 = atomikosProperties15.defaultJtaTimeout;
        boolean boolean27 = atomikosProperties15.forceShutdownOnVmExit;
        java.lang.Object obj28 = properties1.put((java.lang.Object) atomikosProperties2, (java.lang.Object) boolean27);
        java.lang.String str29 = atomikosProperties2.getLogBaseDir();
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 300000L + "'", long9 == 300000L);
        org.junit.Assert.assertNotNull(recovery12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 50 + "'", int19 == 50);
        org.junit.Assert.assertNotNull(recovery20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "{-1.0=100}" + "'", str23, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 10000L + "'", long26 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNull(str29);
    }

    @Test
    public void test01378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01378");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        int int7 = atomikosProperties0.maxActives;
        atomikosProperties0.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.getRecovery();
        long long11 = recovery10.forgetOrphanedLogEntriesDelay;
        recovery10.setDelay(0L);
        long long14 = recovery10.delay;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 86400000L + "'", long11 == 86400000L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
    }

    @Test
    public void test01379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01379");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.remove((java.lang.Object) (-1.0d));
        boolean boolean3 = properties0.isEmpty();
        int int4 = properties0.size();
        java.lang.String str6 = properties0.getProperty("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean8 = atomikosProperties7.isSerialJtaTransactions();
        atomikosProperties7.logBaseName = "{-1.0=100}";
        int int11 = atomikosProperties7.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery12 = atomikosProperties7.getRecovery();
        atomikosProperties7.setConsoleFileCount((int) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel15 = null;
        atomikosProperties7.consoleLogLevel = atomikosLoggingLevel15;
        java.lang.String str17 = atomikosProperties7.logBaseDir;
        atomikosProperties7.checkpointInterval = (byte) 0;
        java.lang.String str20 = atomikosProperties7.getTransactionManagerUniqueName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties22 = atomikosProperties21.asProperties();
        java.util.Properties properties23 = new java.util.Properties();
        java.lang.Object obj25 = properties23.remove((java.lang.Object) (-1.0d));
        boolean boolean26 = properties23.isEmpty();
        int int27 = properties23.size();
        java.lang.String str29 = properties23.getProperty("{}");
        java.lang.Object obj30 = properties22.remove((java.lang.Object) properties23);
        java.util.Properties properties31 = new java.util.Properties();
        java.lang.String str32 = properties31.toString();
        java.util.Properties properties33 = new java.util.Properties(properties31);
        properties22.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties31);
        java.lang.Object obj35 = properties0.getOrDefault((java.lang.Object) atomikosProperties7, (java.lang.Object) properties31);
        java.util.Properties properties36 = new java.util.Properties(properties0);
        java.io.OutputStream outputStream37 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.storeToXML(outputStream37, "{={-1.0=100}, -1.0=100}", "{{={-1.0=100}, -1.0=100}=}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 50 + "'", int11 == 50);
        org.junit.Assert.assertNotNull(recovery12);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(properties22);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "{}" + "'", str32, "{}");
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertEquals(obj35.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj35), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj35), "{}");
    }

    @Test
    public void test01380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01380");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        atomikosProperties2.service = "{-1.0=100}";
        long long6 = atomikosProperties2.getDefaultJtaTimeout();
        atomikosProperties2.consoleFileLimit = '#';
        java.lang.Object obj9 = properties1.get((java.lang.Object) atomikosProperties2);
        boolean boolean10 = atomikosProperties2.forceShutdownOnVmExit;
        atomikosProperties2.setOutputDir("");
        atomikosProperties2.setThreadedTwoPhaseCommit(false);
        boolean boolean15 = atomikosProperties2.isEnableLogging();
        atomikosProperties2.forceShutdownOnVmExit = true;
        java.lang.String str18 = atomikosProperties2.service;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "{-1.0=100}" + "'", str18, "{-1.0=100}");
    }

    @Test
    public void test01381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01381");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.outputDir = "{={-1.0=100}, -1.0=100}";
        boolean boolean3 = atomikosProperties0.isThreadedTwoPhaseCommit();
        atomikosProperties0.consoleFileName = "tmlog";
        boolean boolean6 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.setConsoleFileLimit((int) ' ');
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test01382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01382");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        int int7 = properties0.size();
        int int8 = properties0.size();
        java.lang.Object obj11 = properties0.setProperty("hi!", "");
        java.io.Writer writer12 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.store(writer12, "{com.atomikos.icatch.={}, 100=100}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNull(obj11);
    }

    @Test
    public void test01383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01383");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        boolean boolean2 = properties0.isEmpty();
        java.lang.Object obj5 = properties0.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Properties properties6 = new java.util.Properties();
        java.lang.String str7 = properties6.toString();
        java.lang.Object obj9 = properties6.remove((java.lang.Object) (short) 100);
        java.lang.Object obj12 = properties6.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean14 = properties6.containsKey((java.lang.Object) 0L);
        java.lang.Object obj17 = properties6.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties18 = new java.util.Properties(properties6);
        boolean boolean19 = properties0.containsValue((java.lang.Object) properties6);
        java.lang.String str21 = properties0.getProperty("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties23 = atomikosProperties22.asProperties();
        atomikosProperties22.service = "{-1.0=100}";
        long long26 = atomikosProperties22.getDefaultJtaTimeout();
        atomikosProperties22.enableLogging = false;
        atomikosProperties22.setMaxTimeout((long) (byte) 0);
        atomikosProperties22.setAllowSubTransactions(true);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties34 = atomikosProperties33.asProperties();
        atomikosProperties33.service = "{-1.0=100}";
        java.lang.String str37 = atomikosProperties33.getTransactionManagerUniqueName();
        boolean boolean38 = atomikosProperties33.isSerialJtaTransactions();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel39 = atomikosProperties33.getConsoleLogLevel();
        atomikosProperties22.consoleLogLevel = atomikosLoggingLevel39;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties41.setAllowSubTransactions(true);
        boolean boolean44 = atomikosProperties41.enableLogging;
        boolean boolean45 = atomikosProperties41.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel46 = atomikosProperties41.consoleLogLevel;
        atomikosProperties22.consoleLogLevel = atomikosLoggingLevel46;
        atomikosProperties22.setConsoleFileName("{1.0=-1, -1.0=100}");
        java.util.Properties properties50 = new java.util.Properties();
        java.lang.String str51 = properties50.toString();
        java.util.Properties properties52 = new java.util.Properties(properties50);
        boolean boolean53 = properties52.isEmpty();
        java.lang.Object obj56 = properties52.setProperty("tmlog", "{}");
        java.lang.Object obj57 = properties52.clone();
        java.lang.Object obj58 = properties0.putIfAbsent((java.lang.Object) atomikosProperties22, obj57);
        java.util.Enumeration<java.lang.Object> objEnumeration59 = properties0.keys();
        java.lang.String str60 = properties0.toString();
        java.lang.String str63 = properties0.getProperty("tm.out", "{}");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "{}" + "'", str7, "{}");
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(properties23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 10000L + "'", long26 == 10000L);
        org.junit.Assert.assertNotNull(properties34);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel39 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel39.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel46 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel46.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "{}" + "'", str51, "{}");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertNotNull(obj57);
        org.junit.Assert.assertEquals(obj57.toString(), "{tmlog={}}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj57), "{tmlog={}}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj57), "{tmlog={}}");
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertNotNull(objEnumeration59);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "{}" + "'", str63, "{}");
    }

    @Test
    public void test01384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01384");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setAllowSubTransactions(true);
        boolean boolean3 = atomikosProperties0.enableLogging;
        atomikosProperties0.consoleFileLimit = (byte) 100;
        java.util.Properties properties6 = new java.util.Properties();
        java.lang.String str7 = properties6.toString();
        java.util.Properties properties8 = new java.util.Properties(properties6);
        java.util.Properties properties10 = new java.util.Properties();
        java.lang.String str11 = properties10.toString();
        java.lang.Object obj13 = properties10.remove((java.lang.Object) (short) 100);
        java.lang.Object obj16 = properties10.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean18 = properties10.containsKey((java.lang.Object) 0L);
        java.lang.Object obj21 = properties10.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties22 = new java.util.Properties(properties10);
        java.util.Enumeration<java.lang.Object> objEnumeration23 = properties22.elements();
        atomikosProperties0.set(properties8, "{={-1.0=100}, -1.0=100}", (java.lang.Object) properties22);
        int int25 = properties8.size();
        java.lang.Object obj28 = properties8.setProperty("tmlog", "hi!");
        int int29 = properties8.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean31 = atomikosProperties30.isSerialJtaTransactions();
        atomikosProperties30.logBaseName = "{-1.0=100}";
        int int34 = atomikosProperties30.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery35 = atomikosProperties30.getRecovery();
        atomikosProperties30.setConsoleFileCount((int) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel38 = null;
        atomikosProperties30.consoleLogLevel = atomikosLoggingLevel38;
        atomikosProperties30.logBaseName = "tmlog";
        long long42 = atomikosProperties30.getCheckpointInterval();
        java.lang.Object obj43 = properties8.remove((java.lang.Object) atomikosProperties30);
        java.io.OutputStream outputStream44 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties8.storeToXML(outputStream44, "{{1.0=-1}=hi!}", "{{={-1.0=100}, -1.0=100}=}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "{}" + "'", str7, "{}");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "{}" + "'", str11, "{}");
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNotNull(objEnumeration23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 50 + "'", int34 == 50);
        org.junit.Assert.assertNotNull(recovery35);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 500L + "'", long42 == 500L);
        org.junit.Assert.assertNull(obj43);
    }

    @Test
    public void test01385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01385");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.remove((java.lang.Object) (-1.0d));
        boolean boolean3 = properties0.isEmpty();
        int int4 = properties0.size();
        java.lang.String str6 = properties0.getProperty("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean8 = atomikosProperties7.isSerialJtaTransactions();
        atomikosProperties7.logBaseName = "{-1.0=100}";
        int int11 = atomikosProperties7.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery12 = atomikosProperties7.getRecovery();
        atomikosProperties7.setConsoleFileCount((int) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel15 = null;
        atomikosProperties7.consoleLogLevel = atomikosLoggingLevel15;
        java.lang.String str17 = atomikosProperties7.logBaseDir;
        atomikosProperties7.checkpointInterval = (byte) 0;
        java.lang.String str20 = atomikosProperties7.getTransactionManagerUniqueName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties22 = atomikosProperties21.asProperties();
        java.util.Properties properties23 = new java.util.Properties();
        java.lang.Object obj25 = properties23.remove((java.lang.Object) (-1.0d));
        boolean boolean26 = properties23.isEmpty();
        int int27 = properties23.size();
        java.lang.String str29 = properties23.getProperty("{}");
        java.lang.Object obj30 = properties22.remove((java.lang.Object) properties23);
        java.util.Properties properties31 = new java.util.Properties();
        java.lang.String str32 = properties31.toString();
        java.util.Properties properties33 = new java.util.Properties(properties31);
        properties22.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties31);
        java.lang.Object obj35 = properties0.getOrDefault((java.lang.Object) atomikosProperties7, (java.lang.Object) properties31);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties38 = atomikosProperties37.asProperties();
        atomikosProperties37.service = "{-1.0=100}";
        long long41 = atomikosProperties37.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel42 = null;
        atomikosProperties37.setConsoleLogLevel(atomikosLoggingLevel42);
        int int44 = atomikosProperties37.maxActives;
        atomikosProperties37.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery47 = atomikosProperties37.getRecovery();
        atomikosProperties37.consoleFileName = "{-1.0=100}";
        atomikosProperties37.setSerialJtaTransactions(false);
        atomikosProperties37.consoleFileName = "{={-1.0=100}, -1.0=100}";
        boolean boolean54 = atomikosProperties37.isEnableLogging();
        atomikosProperties37.service = "tm.out";
        atomikosProperties37.setEnableLogging(true);
        boolean boolean59 = properties0.remove((java.lang.Object) 10000L, (java.lang.Object) true);
        java.lang.Object obj62 = properties0.setProperty("{-1.0=100}", "");
        java.lang.String str63 = properties0.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery64 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery64.retryInterval = (short) 100;
        recovery64.forgetOrphanedLogEntriesDelay = 'a';
        long long69 = recovery64.retryInterval;
        recovery64.forgetOrphanedLogEntriesDelay = 0L;
        long long72 = recovery64.getForgetOrphanedLogEntriesDelay();
        long long73 = recovery64.getForgetOrphanedLogEntriesDelay();
        recovery64.retryInterval = 0L;
        long long76 = recovery64.retryInterval;
        int int77 = recovery64.maxRetries;
        long long78 = recovery64.getDelay();
        recovery64.setRetryInterval((long) ' ');
        long long81 = recovery64.getForgetOrphanedLogEntriesDelay();
        recovery64.delay = 0L;
        java.lang.Object obj84 = properties0.get((java.lang.Object) 0L);
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 50 + "'", int11 == 50);
        org.junit.Assert.assertNotNull(recovery12);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(properties22);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "{}" + "'", str32, "{}");
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertEquals(obj35.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj35), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj35), "{}");
        org.junit.Assert.assertNotNull(properties38);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 10000L + "'", long41 == 10000L);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 50 + "'", int44 == 50);
        org.junit.Assert.assertNotNull(recovery47);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "{{-1.0=100}=}" + "'", str63, "{{-1.0=100}=}");
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 100L + "'", long69 == 100L);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 5 + "'", int77 == 5);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 10000L + "'", long78 == 10000L);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 0L + "'", long81 == 0L);
        org.junit.Assert.assertNull(obj84);
    }

    @Test
    public void test01386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01386");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.retryInterval = (short) 100;
        recovery0.forgetOrphanedLogEntriesDelay = 'a';
        int int5 = recovery0.getMaxRetries();
        long long6 = recovery0.delay;
        recovery0.setForgetOrphanedLogEntriesDelay((long) (-1));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5 + "'", int5 == 5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
    }

    @Test
    public void test01387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01387");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        boolean boolean7 = atomikosProperties0.isAllowSubTransactions();
        int int8 = atomikosProperties0.getConsoleFileLimit();
        boolean boolean9 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.setMaxTimeout(300000L);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery12 = atomikosProperties0.getRecovery();
        java.lang.String str13 = atomikosProperties0.consoleFileName;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery14 = atomikosProperties0.getRecovery();
        long long15 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.threadedTwoPhaseCommit = false;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(recovery12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tm.out" + "'", str13, "tm.out");
        org.junit.Assert.assertNotNull(recovery14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10000L + "'", long15 == 10000L);
    }

    @Test
    public void test01388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01388");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties12 = new java.util.Properties(properties0);
        int int13 = properties0.size();
        java.lang.String str14 = properties0.toString();
        properties0.clear();
        java.lang.Object obj16 = null;
        java.lang.Object obj17 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean18 = properties0.remove(obj16, obj17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "{-1.0=100}" + "'", str14, "{-1.0=100}");
    }

    @Test
    public void test01389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01389");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.util.Properties properties4 = new java.util.Properties();
        java.lang.String str5 = properties4.toString();
        boolean boolean6 = properties4.isEmpty();
        java.lang.Object obj9 = properties4.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration10 = properties4.elements();
        boolean boolean11 = properties0.containsKey((java.lang.Object) properties4);
        java.util.Set<java.lang.String> strSet12 = properties0.stringPropertyNames();
        java.util.Set<java.lang.Object> objSet13 = properties0.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties15 = atomikosProperties14.asProperties();
        atomikosProperties14.service = "{-1.0=100}";
        long long18 = atomikosProperties14.getDefaultJtaTimeout();
        atomikosProperties14.enableLogging = false;
        atomikosProperties14.setMaxTimeout((long) (byte) 0);
        atomikosProperties14.setAllowSubTransactions(true);
        java.util.Properties properties25 = new java.util.Properties();
        java.lang.Object obj27 = properties25.remove((java.lang.Object) (-1.0d));
        boolean boolean28 = properties25.isEmpty();
        java.util.Properties properties29 = new java.util.Properties();
        java.lang.String str30 = properties29.toString();
        java.lang.Object obj32 = properties29.remove((java.lang.Object) (short) 100);
        java.lang.Object obj35 = properties29.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean37 = properties29.containsKey((java.lang.Object) 0L);
        java.lang.Object obj40 = properties29.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj43 = properties29.setProperty("", "{-1.0=100}");
        java.lang.Object obj44 = properties29.clone();
        java.lang.Object obj45 = properties25.get((java.lang.Object) properties29);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery47 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery47.retryInterval = (short) 100;
        recovery47.forgetOrphanedLogEntriesDelay = 'a';
        long long52 = recovery47.getDelay();
        long long53 = recovery47.getRetryInterval();
        recovery47.forgetOrphanedLogEntriesDelay = 10000L;
        atomikosProperties14.set(properties29, "tmlog", (java.lang.Object) recovery47);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties57 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties58 = atomikosProperties57.asProperties();
        atomikosProperties57.service = "{-1.0=100}";
        long long61 = atomikosProperties57.getDefaultJtaTimeout();
        atomikosProperties57.serialJtaTransactions = true;
        java.lang.Object obj64 = properties0.put((java.lang.Object) "tmlog", (java.lang.Object) true);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties65 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties66 = atomikosProperties65.asProperties();
        atomikosProperties65.service = "{-1.0=100}";
        long long69 = atomikosProperties65.getDefaultJtaTimeout();
        atomikosProperties65.serialJtaTransactions = true;
        long long72 = atomikosProperties65.maxTimeout;
        atomikosProperties65.setLogBaseDir("{-1.0=100}");
        int int75 = atomikosProperties65.getConsoleFileCount();
        atomikosProperties65.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties78 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties79 = atomikosProperties78.asProperties();
        atomikosProperties78.service = "{-1.0=100}";
        long long82 = atomikosProperties78.getDefaultJtaTimeout();
        atomikosProperties78.setTransactionManagerUniqueName("{}");
        atomikosProperties78.consoleFileName = "hi!";
        int int87 = atomikosProperties78.getConsoleFileCount();
        boolean boolean88 = atomikosProperties78.isThreadedTwoPhaseCommit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel89 = atomikosProperties78.consoleLogLevel;
        atomikosProperties65.consoleLogLevel = atomikosLoggingLevel89;
        java.lang.Object obj91 = properties0.get((java.lang.Object) atomikosProperties65);
        properties0.clear();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{}" + "'", str5, "{}");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNotNull(objEnumeration10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNotNull(objSet13);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10000L + "'", long18 == 10000L);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "{}" + "'", str30, "{}");
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNotNull(obj44);
// flaky:         org.junit.Assert.assertEquals(obj44.toString(), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj44), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj44), "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 10000L + "'", long52 == 10000L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 100L + "'", long53 == 100L);
        org.junit.Assert.assertNotNull(properties58);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 10000L + "'", long61 == 10000L);
        org.junit.Assert.assertNull(obj64);
        org.junit.Assert.assertNotNull(properties66);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 10000L + "'", long69 == 10000L);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 300000L + "'", long72 == 300000L);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(properties79);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 10000L + "'", long82 == 10000L);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel89 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel89.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj91);
    }

    @Test
    public void test01390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01390");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        atomikosProperties0.maxActives = ' ';
        int int9 = atomikosProperties0.getConsoleFileCount();
        int int10 = atomikosProperties0.consoleFileLimit;
        java.util.Properties properties11 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean13 = atomikosProperties12.isSerialJtaTransactions();
        atomikosProperties12.logBaseName = "{-1.0=100}";
        int int16 = atomikosProperties12.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery17 = atomikosProperties12.getRecovery();
        atomikosProperties12.setConsoleFileCount((int) (byte) 100);
        atomikosProperties12.setAllowSubTransactions(true);
        atomikosProperties12.setService("tm.out");
        boolean boolean24 = atomikosProperties12.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel25 = atomikosProperties12.getConsoleLogLevel();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties26.setAllowSubTransactions(true);
        boolean boolean29 = atomikosProperties26.enableLogging;
        atomikosProperties26.consoleFileLimit = (byte) 100;
        java.util.Properties properties32 = new java.util.Properties();
        java.lang.String str33 = properties32.toString();
        java.util.Properties properties34 = new java.util.Properties(properties32);
        java.util.Properties properties36 = new java.util.Properties();
        java.lang.String str37 = properties36.toString();
        java.lang.Object obj39 = properties36.remove((java.lang.Object) (short) 100);
        java.lang.Object obj42 = properties36.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean44 = properties36.containsKey((java.lang.Object) 0L);
        java.lang.Object obj47 = properties36.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties48 = new java.util.Properties(properties36);
        java.util.Enumeration<java.lang.Object> objEnumeration49 = properties48.elements();
        atomikosProperties26.set(properties34, "{={-1.0=100}, -1.0=100}", (java.lang.Object) properties48);
        atomikosProperties26.allowSubTransactions = false;
        java.lang.Object obj53 = properties11.put((java.lang.Object) atomikosProperties12, (java.lang.Object) false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties54 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties55 = atomikosProperties54.asProperties();
        atomikosProperties54.service = "{-1.0=100}";
        long long58 = atomikosProperties54.getDefaultJtaTimeout();
        long long59 = atomikosProperties54.getMaxTimeout();
        int int60 = atomikosProperties54.consoleFileCount;
        atomikosProperties54.setConsoleFileCount(0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties63 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties64 = atomikosProperties63.asProperties();
        atomikosProperties63.service = "{-1.0=100}";
        long long67 = atomikosProperties63.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel68 = null;
        atomikosProperties63.setConsoleLogLevel(atomikosLoggingLevel68);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel70 = null;
        atomikosProperties63.setConsoleLogLevel(atomikosLoggingLevel70);
        atomikosProperties63.setLogBaseName("{={-1.0=100}, -1.0=100}");
        boolean boolean74 = atomikosProperties63.enableLogging;
        java.lang.Object obj75 = properties11.replace((java.lang.Object) atomikosProperties54, (java.lang.Object) atomikosProperties63);
        atomikosProperties54.setLogBaseName("");
        boolean boolean78 = atomikosProperties54.isSerialJtaTransactions();
        atomikosProperties54.setOutputDir("");
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 50 + "'", int16 == 50);
        org.junit.Assert.assertNotNull(recovery17);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel25 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel25.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "{}" + "'", str33, "{}");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "{}" + "'", str37, "{}");
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNotNull(objEnumeration49);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertNotNull(properties55);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 10000L + "'", long58 == 10000L);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 300000L + "'", long59 == 300000L);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(properties64);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 10000L + "'", long67 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNull(obj75);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
    }

    @Test
    public void test01391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01391");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        properties0.clear();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet3 = properties0.entrySet();
        java.util.Properties properties4 = new java.util.Properties();
        java.lang.String str5 = properties4.toString();
        java.lang.Object obj7 = properties4.remove((java.lang.Object) (short) 100);
        java.lang.Object obj10 = properties4.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery11 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery11.retryInterval = (short) 100;
        recovery11.delay = (-1L);
        long long16 = recovery11.delay;
        boolean boolean17 = properties4.equals((java.lang.Object) long16);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery18 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery18.retryInterval = (short) 100;
        recovery18.forgetOrphanedLogEntriesDelay = 'a';
        long long23 = recovery18.retryInterval;
        recovery18.forgetOrphanedLogEntriesDelay = 0L;
        long long26 = recovery18.getForgetOrphanedLogEntriesDelay();
        recovery18.setRetryInterval((long) 0);
        boolean boolean29 = properties4.contains((java.lang.Object) recovery18);
        recovery18.retryInterval = 0L;
        boolean boolean32 = properties0.containsKey((java.lang.Object) recovery18);
        int int33 = recovery18.getMaxRetries();
        recovery18.setRetryInterval(0L);
        recovery18.setDelay((long) 20);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNotNull(objEntrySet3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{}" + "'", str5, "{}");
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 100L + "'", long23 == 100L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5 + "'", int33 == 5);
    }

    @Test
    public void test01392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01392");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.remove((java.lang.Object) (-1.0d));
        boolean boolean3 = properties0.isEmpty();
        java.util.Properties properties4 = new java.util.Properties();
        java.lang.String str5 = properties4.toString();
        java.lang.Object obj7 = properties4.remove((java.lang.Object) (short) 100);
        java.lang.Object obj10 = properties4.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean12 = properties4.containsKey((java.lang.Object) 0L);
        java.lang.Object obj15 = properties4.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj18 = properties4.setProperty("", "{-1.0=100}");
        java.lang.Object obj19 = properties4.clone();
        java.lang.Object obj20 = properties0.get((java.lang.Object) properties4);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties21.setEnableLogging(true);
        atomikosProperties21.consoleFileCount = 0;
        int int26 = atomikosProperties21.getMaxActives();
        java.lang.String str27 = atomikosProperties21.getLogBaseDir();
        java.lang.String str28 = atomikosProperties21.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery29 = atomikosProperties21.getRecovery();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties31 = atomikosProperties30.asProperties();
        atomikosProperties30.service = "{-1.0=100}";
        long long34 = atomikosProperties30.getDefaultJtaTimeout();
        atomikosProperties30.setThreadedTwoPhaseCommit(true);
        boolean boolean37 = atomikosProperties30.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery38 = atomikosProperties30.recovery;
        atomikosProperties30.setLogBaseDir("");
        java.lang.Object obj41 = properties4.replace((java.lang.Object) recovery29, (java.lang.Object) "");
        java.util.Properties properties42 = new java.util.Properties();
        java.lang.Object obj44 = properties42.remove((java.lang.Object) (-1.0d));
        boolean boolean46 = properties42.contains((java.lang.Object) "{-1.0=100}");
        boolean boolean47 = properties4.equals((java.lang.Object) "{-1.0=100}");
        java.util.Properties properties48 = new java.util.Properties();
        java.lang.String str49 = properties48.toString();
        java.lang.Object obj51 = properties48.remove((java.lang.Object) (short) 100);
        java.lang.Object obj54 = properties48.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        java.util.Properties properties56 = new java.util.Properties();
        java.lang.String str57 = properties56.toString();
        java.lang.Object obj59 = properties56.remove((java.lang.Object) (short) 100);
        java.lang.Object obj62 = properties56.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj63 = properties56.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration64 = properties56.elements();
        java.lang.Object obj65 = properties48.putIfAbsent((java.lang.Object) 10.0f, (java.lang.Object) objEnumeration64);
        java.util.Properties properties66 = new java.util.Properties();
        java.util.Enumeration<?> wildcardEnumeration67 = properties66.propertyNames();
        java.lang.Object obj68 = properties66.clone();
        java.util.Properties properties69 = new java.util.Properties();
        java.lang.String str70 = properties69.toString();
        boolean boolean71 = properties69.isEmpty();
        java.lang.Object obj74 = properties69.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration75 = properties69.elements();
        java.lang.Object obj76 = properties48.put(obj68, (java.lang.Object) objEnumeration75);
        properties48.clear();
        java.util.Properties properties78 = new java.util.Properties();
        java.util.Properties properties79 = new java.util.Properties();
        java.lang.Object obj81 = properties79.remove((java.lang.Object) (-1.0d));
        int int82 = properties79.size();
        java.util.Enumeration<java.lang.Object> objEnumeration83 = properties79.elements();
        java.util.Properties properties84 = new java.util.Properties();
        properties84.clear();
        java.lang.String str86 = properties84.toString();
        boolean boolean87 = properties48.replace((java.lang.Object) properties78, (java.lang.Object) properties79, (java.lang.Object) str86);
        properties4.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties79);
        java.io.OutputStream outputStream89 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties4.store(outputStream89, "{{={-1.0=100}, -1.0=100}=}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{}" + "'", str5, "{}");
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(obj19);
// flaky:         org.junit.Assert.assertEquals(obj19.toString(), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 50 + "'", int26 == 50);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(recovery29);
        org.junit.Assert.assertNotNull(properties31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 10000L + "'", long34 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(recovery38);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "{}" + "'", str49, "{}");
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "{}" + "'", str57, "{}");
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertNotNull(obj63);
        org.junit.Assert.assertEquals(obj63.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj63), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj63), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration64);
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertNotNull(wildcardEnumeration67);
        org.junit.Assert.assertNotNull(obj68);
        org.junit.Assert.assertEquals(obj68.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj68), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj68), "{}");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "{}" + "'", str70, "{}");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertNotNull(objEnumeration75);
        org.junit.Assert.assertNull(obj76);
        org.junit.Assert.assertNull(obj81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(objEnumeration83);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "{}" + "'", str86, "{}");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test01393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01393");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        boolean boolean2 = properties0.isEmpty();
        java.util.Properties properties3 = new java.util.Properties();
        java.lang.String str4 = properties3.toString();
        java.lang.Object obj6 = properties3.remove((java.lang.Object) (short) 100);
        java.lang.Object obj9 = properties3.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean11 = properties3.containsKey((java.lang.Object) 0L);
        java.lang.Object obj14 = properties3.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties15 = new java.util.Properties();
        java.lang.String str16 = properties15.toString();
        java.lang.Object obj18 = properties15.remove((java.lang.Object) (short) 100);
        java.lang.Object obj21 = properties15.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj22 = properties15.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration23 = properties15.elements();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties15);
        java.lang.Object obj25 = properties15.clone();
        properties15.clear();
        int int27 = properties15.size();
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties15);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties30 = atomikosProperties29.asProperties();
        atomikosProperties29.service = "{-1.0=100}";
        long long33 = atomikosProperties29.getDefaultJtaTimeout();
        atomikosProperties29.serialJtaTransactions = true;
        atomikosProperties29.maxActives = ' ';
        int int38 = atomikosProperties29.getConsoleFileCount();
        long long39 = atomikosProperties29.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties41 = atomikosProperties40.asProperties();
        atomikosProperties40.service = "{-1.0=100}";
        java.lang.String str44 = atomikosProperties40.getTransactionManagerUniqueName();
        boolean boolean45 = atomikosProperties40.isSerialJtaTransactions();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel46 = atomikosProperties40.getConsoleLogLevel();
        atomikosProperties29.setConsoleLogLevel(atomikosLoggingLevel46);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties48 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties48.setAllowSubTransactions(true);
        boolean boolean51 = atomikosProperties48.enableLogging;
        atomikosProperties48.consoleFileLimit = (byte) 100;
        java.util.Properties properties54 = new java.util.Properties();
        java.lang.String str55 = properties54.toString();
        java.util.Properties properties56 = new java.util.Properties(properties54);
        java.util.Properties properties58 = new java.util.Properties();
        java.lang.String str59 = properties58.toString();
        java.lang.Object obj61 = properties58.remove((java.lang.Object) (short) 100);
        java.lang.Object obj64 = properties58.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean66 = properties58.containsKey((java.lang.Object) 0L);
        java.lang.Object obj69 = properties58.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties70 = new java.util.Properties(properties58);
        java.util.Enumeration<java.lang.Object> objEnumeration71 = properties70.elements();
        atomikosProperties48.set(properties56, "{={-1.0=100}, -1.0=100}", (java.lang.Object) properties70);
        atomikosProperties48.setOutputDir("hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery75 = atomikosProperties48.getRecovery();
        long long76 = recovery75.getRetryInterval();
        java.lang.Object obj77 = properties0.replace((java.lang.Object) atomikosProperties29, (java.lang.Object) recovery75);
        long long78 = atomikosProperties29.checkpointInterval;
        boolean boolean79 = atomikosProperties29.isSerialJtaTransactions();
        boolean boolean80 = atomikosProperties29.allowSubTransactions;
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{}" + "'", str4, "{}");
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{}" + "'", str16, "{}");
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration23);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "{1.0=-1}");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(properties30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 10000L + "'", long33 == 10000L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 10000L + "'", long39 == 10000L);
        org.junit.Assert.assertNotNull(properties41);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel46 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel46.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "{}" + "'", str55, "{}");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "{}" + "'", str59, "{}");
        org.junit.Assert.assertNull(obj61);
        org.junit.Assert.assertNull(obj64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(obj69);
        org.junit.Assert.assertNotNull(objEnumeration71);
        org.junit.Assert.assertNotNull(recovery75);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 10000L + "'", long76 == 10000L);
        org.junit.Assert.assertNull(obj77);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 500L + "'", long78 == 500L);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
    }

    @Test
    public void test01394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01394");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.util.Set<java.lang.Object> objSet9 = properties0.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery11 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery11.retryInterval = (short) 100;
        recovery11.forgetOrphanedLogEntriesDelay = 'a';
        long long16 = recovery11.getDelay();
        int int17 = recovery11.maxRetries;
        int int18 = recovery11.maxRetries;
        long long19 = recovery11.getRetryInterval();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean21 = atomikosProperties20.isSerialJtaTransactions();
        atomikosProperties20.logBaseName = "{-1.0=100}";
        int int24 = atomikosProperties20.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery25 = atomikosProperties20.getRecovery();
        atomikosProperties20.setConsoleFileCount((int) (byte) 100);
        atomikosProperties20.setAllowSubTransactions(true);
        atomikosProperties20.setService("tm.out");
        boolean boolean32 = properties0.replace((java.lang.Object) 1, (java.lang.Object) long19, (java.lang.Object) "tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery33 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long34 = recovery33.getRetryInterval();
        recovery33.setRetryInterval(0L);
        boolean boolean37 = properties0.equals((java.lang.Object) recovery33);
        java.lang.String str40 = properties0.getProperty("{-1.0=100}", "{{1.0=-1}=hi!}");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(objSet9);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10000L + "'", long16 == 10000L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5 + "'", int18 == 5);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 100L + "'", long19 == 100L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 50 + "'", int24 == 50);
        org.junit.Assert.assertNotNull(recovery25);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 10000L + "'", long34 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "{{1.0=-1}=hi!}" + "'", str40, "{{1.0=-1}=hi!}");
    }

    @Test
    public void test01395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01395");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.enableLogging = false;
        atomikosProperties0.setMaxTimeout((long) (byte) 0);
        long long9 = atomikosProperties0.getDefaultJtaTimeout();
        boolean boolean10 = atomikosProperties0.isAllowSubTransactions();
        java.lang.String str11 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setConsoleFileCount((int) (short) 0);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10000L + "'", long9 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test01396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01396");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileName = "hi!";
        atomikosProperties0.setCheckpointInterval((long) 5);
        atomikosProperties0.setConsoleFileCount(0);
        atomikosProperties0.setService("{-1.0=100}");
        atomikosProperties0.setDefaultJtaTimeout((long) 100);
        atomikosProperties0.setLogBaseDir("tmlog");
        atomikosProperties0.setAllowSubTransactions(false);
        atomikosProperties0.setCheckpointInterval(300000L);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test01397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01397");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.util.Properties properties7 = new java.util.Properties();
        java.lang.String str8 = properties7.toString();
        java.lang.Object obj10 = properties7.remove((java.lang.Object) (short) 100);
        java.lang.Object obj13 = properties7.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        int int14 = properties7.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery15 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery15.retryInterval = (short) 100;
        recovery15.forgetOrphanedLogEntriesDelay = 'a';
        long long20 = recovery15.retryInterval;
        recovery15.setForgetOrphanedLogEntriesDelay((long) 0);
        java.lang.Object obj23 = properties0.replace((java.lang.Object) int14, (java.lang.Object) recovery15);
        recovery15.forgetOrphanedLogEntriesDelay = (byte) 0;
        long long26 = recovery15.getDelay();
        recovery15.setRetryInterval((long) ' ');
        recovery15.maxRetries = 100;
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{}" + "'", str8, "{}");
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 100L + "'", long20 == 100L);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 10000L + "'", long26 == 10000L);
    }

    @Test
    public void test01398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01398");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setAllowSubTransactions(true);
        atomikosProperties0.maxActives = (short) -1;
        atomikosProperties0.setService("tm.out");
        atomikosProperties0.transactionManagerUniqueName = "{={-1.0=100}, -1.0=100}";
        atomikosProperties0.setLogBaseDir("{tmlog=hi!, com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}");
    }

    @Test
    public void test01399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01399");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        atomikosProperties0.maxActives = ' ';
        atomikosProperties0.maxActives = (byte) 10;
        atomikosProperties0.setCheckpointInterval((long) '4');
        atomikosProperties0.setService("{={-1.0=100}, -1.0=100}");
        atomikosProperties0.setLogBaseDir("");
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
    }

    @Test
    public void test01400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01400");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Enumeration<?> wildcardEnumeration1 = properties0.propertyNames();
        java.lang.Object obj2 = properties0.clone();
        java.util.Collection<java.lang.Object> objCollection3 = properties0.values();
        java.util.Properties properties4 = new java.util.Properties();
        java.lang.String str5 = properties4.toString();
        java.lang.Object obj7 = properties4.remove((java.lang.Object) (short) 100);
        java.lang.Object obj10 = properties4.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj11 = properties4.clone();
        java.util.Set<java.lang.String> strSet12 = properties4.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery13 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery13.retryInterval = (short) 100;
        recovery13.delay = (-1L);
        long long18 = recovery13.delay;
        recovery13.delay = (short) 1;
        long long21 = recovery13.getRetryInterval();
        int int22 = recovery13.maxRetries;
        int int23 = recovery13.maxRetries;
        long long24 = recovery13.forgetOrphanedLogEntriesDelay;
        java.util.Properties properties25 = new java.util.Properties();
        java.lang.Object obj27 = properties25.remove((java.lang.Object) (-1.0d));
        boolean boolean28 = properties25.isEmpty();
        int int29 = properties25.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery30 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery30.retryInterval = (short) 100;
        recovery30.forgetOrphanedLogEntriesDelay = 'a';
        java.util.Properties properties35 = new java.util.Properties();
        java.lang.Object obj37 = properties35.remove((java.lang.Object) (-1.0d));
        boolean boolean38 = properties35.isEmpty();
        int int39 = properties35.size();
        java.lang.String str41 = properties35.getProperty("{}");
        boolean boolean42 = properties25.remove((java.lang.Object) recovery30, (java.lang.Object) properties35);
        java.lang.Object obj43 = properties4.putIfAbsent((java.lang.Object) long24, (java.lang.Object) properties25);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties25);
        java.util.Properties properties45 = new java.util.Properties();
        java.lang.String str46 = properties45.toString();
        java.lang.Object obj48 = properties45.remove((java.lang.Object) (short) 100);
        java.lang.Object obj51 = properties45.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean53 = properties45.containsKey((java.lang.Object) 0L);
        java.lang.Object obj56 = properties45.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties57 = new java.util.Properties(properties45);
        java.util.Enumeration<java.lang.Object> objEnumeration58 = properties45.keys();
        java.lang.Object obj59 = properties25.get((java.lang.Object) properties45);
        java.io.InputStream inputStream60 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties25.load(inputStream60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardEnumeration1);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "{}");
        org.junit.Assert.assertNotNull(objCollection3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{}" + "'", str5, "{}");
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "{1.0=-1}");
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 100L + "'", long21 == 100L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 5 + "'", int22 == 5);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 5 + "'", int23 == 5);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 86400000L + "'", long24 == 86400000L);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "{}" + "'", str46, "{}");
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertNotNull(objEnumeration58);
        org.junit.Assert.assertNull(obj59);
    }

    @Test
    public void test01401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01401");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.retryInterval = (short) 100;
        recovery0.delay = (-1L);
        long long5 = recovery0.delay;
        recovery0.maxRetries = 0;
        recovery0.forgetOrphanedLogEntriesDelay = (short) 0;
        long long10 = recovery0.delay;
        long long11 = recovery0.getDelay();
        recovery0.retryInterval = '#';
        long long14 = recovery0.getForgetOrphanedLogEntriesDelay();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
    }

    @Test
    public void test01402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01402");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.retryInterval = (short) 100;
        recovery0.forgetOrphanedLogEntriesDelay = 'a';
        long long5 = recovery0.retryInterval;
        recovery0.forgetOrphanedLogEntriesDelay = 0L;
        long long8 = recovery0.getForgetOrphanedLogEntriesDelay();
        long long9 = recovery0.getForgetOrphanedLogEntriesDelay();
        recovery0.retryInterval = 0L;
        long long12 = recovery0.retryInterval;
        int int13 = recovery0.maxRetries;
        long long14 = recovery0.getDelay();
        recovery0.setRetryInterval((long) 1);
        recovery0.delay = 18;
        recovery0.setMaxRetries(5);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 100L + "'", long5 == 100L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10000L + "'", long14 == 10000L);
    }

    @Test
    public void test01403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01403");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.retryInterval = (short) 100;
        recovery0.delay = (-1L);
        long long5 = recovery0.delay;
        recovery0.delay = (short) 1;
        long long8 = recovery0.getRetryInterval();
        int int9 = recovery0.maxRetries;
        int int10 = recovery0.maxRetries;
        long long11 = recovery0.forgetOrphanedLogEntriesDelay;
        recovery0.delay = 100;
        long long14 = recovery0.getRetryInterval();
        long long15 = recovery0.forgetOrphanedLogEntriesDelay;
        recovery0.setDelay((long) 3);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5 + "'", int9 == 5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5 + "'", int10 == 5);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 86400000L + "'", long11 == 86400000L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 100L + "'", long14 == 100L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 86400000L + "'", long15 == 86400000L);
    }

    @Test
    public void test01404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01404");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileLimit = (byte) 10;
        long long7 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.setLogBaseName("{-1.0=100}");
        atomikosProperties0.logBaseDir = "{}";
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
    }

    @Test
    public void test01405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01405");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        int int7 = atomikosProperties0.maxActives;
        atomikosProperties0.setConsoleFileName("tmlog");
        java.lang.String str10 = atomikosProperties0.logBaseName;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery11 = atomikosProperties0.getRecovery();
        atomikosProperties0.setConsoleFileCount((int) (byte) 100);
        atomikosProperties0.enableLogging = true;
        java.lang.String str16 = atomikosProperties0.getConsoleFileName();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "tmlog" + "'", str10, "tmlog");
        org.junit.Assert.assertNotNull(recovery11);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tmlog" + "'", str16, "tmlog");
    }

    @Test
    public void test01406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01406");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        java.util.Properties properties8 = new java.util.Properties();
        java.lang.String str9 = properties8.toString();
        java.lang.Object obj11 = properties8.remove((java.lang.Object) (short) 100);
        java.lang.Object obj14 = properties8.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj15 = properties8.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration16 = properties8.elements();
        java.lang.Object obj17 = properties0.putIfAbsent((java.lang.Object) 10.0f, (java.lang.Object) objEnumeration16);
        java.util.Properties properties18 = new java.util.Properties();
        java.util.Enumeration<?> wildcardEnumeration19 = properties18.propertyNames();
        java.lang.Object obj20 = properties18.clone();
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.String str22 = properties21.toString();
        boolean boolean23 = properties21.isEmpty();
        java.lang.Object obj26 = properties21.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties21.elements();
        java.lang.Object obj28 = properties0.put(obj20, (java.lang.Object) objEnumeration27);
        properties0.clear();
        java.util.Properties properties30 = new java.util.Properties();
        java.util.Properties properties31 = new java.util.Properties();
        java.lang.Object obj33 = properties31.remove((java.lang.Object) (-1.0d));
        int int34 = properties31.size();
        java.util.Enumeration<java.lang.Object> objEnumeration35 = properties31.elements();
        java.util.Properties properties36 = new java.util.Properties();
        properties36.clear();
        java.lang.String str38 = properties36.toString();
        boolean boolean39 = properties0.replace((java.lang.Object) properties30, (java.lang.Object) properties31, (java.lang.Object) str38);
        java.util.Properties properties40 = new java.util.Properties();
        java.lang.String str41 = properties40.toString();
        java.lang.Object obj43 = properties40.remove((java.lang.Object) (short) 100);
        java.lang.Object obj46 = properties40.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj47 = properties40.clone();
        java.util.Set<java.lang.String> strSet48 = properties40.stringPropertyNames();
        java.util.Properties properties49 = new java.util.Properties(properties40);
        java.util.Properties properties50 = new java.util.Properties();
        java.lang.Object obj53 = properties50.setProperty("{}", "{}");
        java.util.Enumeration<java.lang.Object> objEnumeration54 = properties50.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration55 = properties50.elements();
        java.util.Properties properties56 = new java.util.Properties(properties50);
        java.util.Properties properties57 = new java.util.Properties(properties56);
        java.util.Properties properties58 = new java.util.Properties(properties56);
        java.lang.Object obj59 = properties31.put((java.lang.Object) properties49, (java.lang.Object) properties56);
        java.util.Properties properties60 = new java.util.Properties();
        java.lang.String str61 = properties60.toString();
        java.util.Properties properties62 = new java.util.Properties(properties60);
        java.lang.Object obj65 = properties60.setProperty("", "{={-1.0=100}, -1.0=100}");
        java.util.Properties properties66 = new java.util.Properties(properties60);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties67 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean68 = atomikosProperties67.isSerialJtaTransactions();
        atomikosProperties67.logBaseName = "{-1.0=100}";
        int int71 = atomikosProperties67.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery72 = atomikosProperties67.getRecovery();
        atomikosProperties67.setConsoleFileCount((int) (byte) 100);
        java.lang.String str75 = atomikosProperties67.logBaseName;
        atomikosProperties67.setCheckpointInterval((long) 18);
        long long78 = atomikosProperties67.defaultJtaTimeout;
        java.util.Properties properties79 = atomikosProperties67.asProperties();
        java.lang.Object obj80 = properties56.getOrDefault((java.lang.Object) properties66, (java.lang.Object) properties79);
        java.lang.String str82 = properties66.getProperty("{-1.0=100}");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{}" + "'", str9, "{}");
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration16);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(wildcardEnumeration19);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{}");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{}" + "'", str22, "{}");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(objEnumeration35);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "{}" + "'", str38, "{}");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "{}" + "'", str41, "{}");
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertEquals(obj47.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj47), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj47), "{1.0=-1}");
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertNotNull(objEnumeration54);
        org.junit.Assert.assertNotNull(objEnumeration55);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "{}" + "'", str61, "{}");
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 50 + "'", int71 == 50);
        org.junit.Assert.assertNotNull(recovery72);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "{-1.0=100}" + "'", str75, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 10000L + "'", long78 == 10000L);
        org.junit.Assert.assertNotNull(properties79);
        org.junit.Assert.assertNotNull(obj80);
// flaky:         org.junit.Assert.assertEquals(obj80.toString(), "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=100, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=18, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name={-1.0=100}, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj80), "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=100, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=18, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name={-1.0=100}, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj80), "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=100, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=18, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name={-1.0=100}, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        org.junit.Assert.assertNull(str82);
    }

    @Test
    public void test01407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01407");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        boolean boolean3 = properties2.isEmpty();
        java.lang.Object obj6 = properties2.setProperty("tmlog", "{}");
        java.lang.Object obj7 = properties2.clone();
        java.util.Properties properties8 = new java.util.Properties();
        java.lang.Object obj10 = properties8.remove((java.lang.Object) (-1.0d));
        java.util.Enumeration<?> wildcardEnumeration11 = properties8.propertyNames();
        java.util.Set<java.lang.Object> objSet12 = properties8.keySet();
        java.util.Set<java.lang.String> strSet13 = properties8.stringPropertyNames();
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        java.io.PrintWriter printWriter15 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties8.list(printWriter15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{tmlog={}}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{tmlog={}}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{tmlog={}}");
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNotNull(wildcardEnumeration11);
        org.junit.Assert.assertNotNull(objSet12);
        org.junit.Assert.assertNotNull(strSet13);
    }

    @Test
    public void test01408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01408");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj14 = properties0.setProperty("", "{-1.0=100}");
        java.lang.String str15 = properties0.toString();
        java.util.Set<java.lang.String> strSet16 = properties0.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties18 = atomikosProperties17.asProperties();
        atomikosProperties17.service = "{-1.0=100}";
        long long21 = atomikosProperties17.getDefaultJtaTimeout();
        atomikosProperties17.enableLogging = false;
        atomikosProperties17.setMaxTimeout((long) (byte) 0);
        atomikosProperties17.setAllowSubTransactions(true);
        java.util.Properties properties28 = new java.util.Properties();
        java.lang.Object obj30 = properties28.remove((java.lang.Object) (-1.0d));
        boolean boolean31 = properties28.isEmpty();
        java.util.Collection<java.lang.Object> objCollection32 = properties28.values();
        java.lang.Object obj33 = properties0.put((java.lang.Object) true, (java.lang.Object) properties28);
        java.util.Properties properties34 = new java.util.Properties(properties28);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties36 = atomikosProperties35.asProperties();
        atomikosProperties35.service = "{-1.0=100}";
        long long39 = atomikosProperties35.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel40 = null;
        atomikosProperties35.setConsoleLogLevel(atomikosLoggingLevel40);
        int int42 = atomikosProperties35.maxActives;
        java.util.Properties properties43 = new java.util.Properties();
        java.lang.Object obj45 = properties43.remove((java.lang.Object) (-1.0d));
        java.util.Enumeration<?> wildcardEnumeration46 = properties43.propertyNames();
        java.util.Set<java.lang.Object> objSet47 = properties43.keySet();
        java.util.Set<java.lang.String> strSet48 = properties43.stringPropertyNames();
        java.util.Properties properties50 = new java.util.Properties();
        atomikosProperties35.set(properties43, "tm.out", (java.lang.Object) properties50);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties52 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties53 = atomikosProperties52.asProperties();
        atomikosProperties52.service = "{-1.0=100}";
        long long56 = atomikosProperties52.getDefaultJtaTimeout();
        atomikosProperties52.setThreadedTwoPhaseCommit(true);
        boolean boolean59 = atomikosProperties52.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery60 = atomikosProperties52.recovery;
        atomikosProperties52.setLogBaseDir("");
        atomikosProperties52.setConsoleFileName("");
        atomikosProperties52.setThreadedTwoPhaseCommit(false);
        java.lang.Object obj67 = properties34.getOrDefault((java.lang.Object) "tm.out", (java.lang.Object) false);
        java.lang.String str68 = properties34.toString();
        java.lang.String str70 = properties34.getProperty("{-1.0=100}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties71 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties71.setEnableLogging(true);
        atomikosProperties71.consoleFileCount = 0;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties76 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties77 = atomikosProperties76.asProperties();
        atomikosProperties76.service = "{-1.0=100}";
        long long80 = atomikosProperties76.getDefaultJtaTimeout();
        boolean boolean81 = atomikosProperties76.enableLogging;
        boolean boolean82 = atomikosProperties76.isForceShutdownOnVmExit();
        atomikosProperties76.consoleFileLimit = (byte) -1;
        java.lang.String str85 = atomikosProperties76.getService();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel86 = atomikosProperties76.consoleLogLevel;
        atomikosProperties71.consoleLogLevel = atomikosLoggingLevel86;
        boolean boolean88 = atomikosProperties71.forceShutdownOnVmExit;
        atomikosProperties71.consoleFileCount = 'a';
        boolean boolean91 = atomikosProperties71.threadedTwoPhaseCommit;
        atomikosProperties71.logBaseName = "{1.0=-1}";
        java.lang.String str94 = atomikosProperties71.getLogBaseDir();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj96 = properties34.getOrDefault((java.lang.Object) str94, (java.lang.Object) "{com.atomikos.icatch.={}, 100=100}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{={-1.0=100}, -1.0=100}" + "'", str15, "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10000L + "'", long21 == 10000L);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objCollection32);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNotNull(properties36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 10000L + "'", long39 == 10000L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 50 + "'", int42 == 50);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertNotNull(wildcardEnumeration46);
        org.junit.Assert.assertNotNull(objSet47);
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertNotNull(properties53);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 10000L + "'", long56 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(recovery60);
        org.junit.Assert.assertEquals("'" + obj67 + "' != '" + false + "'", obj67, false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "{}" + "'", str68, "{}");
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNotNull(properties77);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 10000L + "'", long80 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "{-1.0=100}" + "'", str85, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel86 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel86.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNull(str94);
    }

    @Test
    public void test01409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01409");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties12 = new java.util.Properties();
        java.lang.String str13 = properties12.toString();
        java.lang.Object obj15 = properties12.remove((java.lang.Object) (short) 100);
        java.lang.Object obj18 = properties12.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj19 = properties12.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration20 = properties12.elements();
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties12);
        boolean boolean23 = properties0.equals((java.lang.Object) 1.0f);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties25 = atomikosProperties24.asProperties();
        atomikosProperties24.service = "{-1.0=100}";
        long long28 = atomikosProperties24.getDefaultJtaTimeout();
        long long29 = atomikosProperties24.getMaxTimeout();
        int int30 = atomikosProperties24.consoleFileCount;
        int int31 = atomikosProperties24.getMaxActives();
        boolean boolean32 = atomikosProperties24.forceShutdownOnVmExit;
        java.lang.String str33 = atomikosProperties24.getTransactionManagerUniqueName();
        boolean boolean34 = properties0.containsValue((java.lang.Object) atomikosProperties24);
        java.util.Collection<java.lang.Object> objCollection35 = properties0.values();
        java.lang.String str36 = properties0.toString();
        java.io.OutputStream outputStream37 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.store(outputStream37, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{}" + "'", str13, "{}");
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 10000L + "'", long28 == 10000L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 300000L + "'", long29 == 300000L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 50 + "'", int31 == 50);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(objCollection35);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "{1.0=-1, -1.0=100}" + "'", str36, "{1.0=-1, -1.0=100}");
    }

    @Test
    public void test01410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01410");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.consoleFileLimit = '#';
        int int7 = atomikosProperties0.getConsoleFileCount();
        atomikosProperties0.consoleFileLimit = 5;
        atomikosProperties0.setConsoleFileCount((int) (byte) -1);
        java.lang.Class<?> wildcardClass12 = atomikosProperties0.getClass();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test01411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01411");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        long long7 = atomikosProperties0.maxTimeout;
        boolean boolean8 = atomikosProperties0.isThreadedTwoPhaseCommit();
        atomikosProperties0.setCheckpointInterval(1L);
        atomikosProperties0.setOutputDir("{}");
        atomikosProperties0.consoleFileLimit = (-1);
        boolean boolean15 = atomikosProperties0.isAllowSubTransactions();
        java.lang.String str16 = atomikosProperties0.getService();
        atomikosProperties0.setService("{{}={}}");
        atomikosProperties0.setConsoleFileLimit((int) (byte) 1);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{-1.0=100}" + "'", str16, "{-1.0=100}");
    }

    @Test
    public void test01412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01412");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setAllowSubTransactions(true);
        boolean boolean3 = atomikosProperties0.enableLogging;
        atomikosProperties0.consoleFileLimit = (byte) 100;
        java.util.Properties properties6 = new java.util.Properties();
        java.lang.String str7 = properties6.toString();
        java.util.Properties properties8 = new java.util.Properties(properties6);
        java.util.Properties properties10 = new java.util.Properties();
        java.lang.String str11 = properties10.toString();
        java.lang.Object obj13 = properties10.remove((java.lang.Object) (short) 100);
        java.lang.Object obj16 = properties10.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean18 = properties10.containsKey((java.lang.Object) 0L);
        java.lang.Object obj21 = properties10.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties22 = new java.util.Properties(properties10);
        java.util.Enumeration<java.lang.Object> objEnumeration23 = properties22.elements();
        atomikosProperties0.set(properties8, "{={-1.0=100}, -1.0=100}", (java.lang.Object) properties22);
        java.util.Properties properties25 = new java.util.Properties();
        java.lang.String str26 = properties25.toString();
        java.lang.Object obj28 = properties25.remove((java.lang.Object) (short) 100);
        java.lang.Object obj31 = properties25.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean33 = properties25.containsKey((java.lang.Object) 0L);
        java.lang.Object obj36 = properties25.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj39 = properties25.setProperty("", "{-1.0=100}");
        boolean boolean40 = properties25.isEmpty();
        java.util.Properties properties41 = new java.util.Properties();
        java.lang.String str42 = properties41.toString();
        java.util.Properties properties43 = new java.util.Properties(properties41);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet44 = properties43.entrySet();
        java.util.Properties properties46 = new java.util.Properties();
        java.lang.Object obj48 = properties46.remove((java.lang.Object) (-1.0d));
        int int49 = properties46.size();
        boolean boolean50 = properties25.replace((java.lang.Object) properties43, (java.lang.Object) 100L, (java.lang.Object) properties46);
        java.util.Enumeration<java.lang.Object> objEnumeration51 = properties43.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties52 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean53 = atomikosProperties52.isSerialJtaTransactions();
        atomikosProperties52.logBaseName = "{-1.0=100}";
        int int56 = atomikosProperties52.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery57 = atomikosProperties52.getRecovery();
        atomikosProperties52.setConsoleFileCount((int) (byte) 100);
        atomikosProperties52.maxTimeout = 50;
        java.lang.String str62 = atomikosProperties52.getConsoleFileName();
        boolean boolean63 = properties43.containsValue((java.lang.Object) atomikosProperties52);
        boolean boolean64 = properties22.containsKey((java.lang.Object) atomikosProperties52);
        atomikosProperties52.setConsoleFileName("{1.0=-1}");
        long long67 = atomikosProperties52.checkpointInterval;
        boolean boolean68 = atomikosProperties52.isAllowSubTransactions();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "{}" + "'", str7, "{}");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "{}" + "'", str11, "{}");
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNotNull(objEnumeration23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "{}" + "'", str26, "{}");
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "{}" + "'", str42, "{}");
        org.junit.Assert.assertNotNull(objEntrySet44);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(objEnumeration51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 50 + "'", int56 == 50);
        org.junit.Assert.assertNotNull(recovery57);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "tm.out" + "'", str62, "tm.out");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 500L + "'", long67 == 500L);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
    }

    @Test
    public void test01413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01413");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.util.Properties properties3 = new java.util.Properties();
        java.lang.String str4 = properties3.toString();
        java.lang.Object obj6 = properties3.remove((java.lang.Object) (short) 100);
        java.lang.Object obj9 = properties3.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean11 = properties3.containsKey((java.lang.Object) 0L);
        java.lang.Object obj14 = properties3.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj17 = properties3.setProperty("", "{-1.0=100}");
        java.util.Enumeration<java.lang.Object> objEnumeration18 = properties3.keys();
        java.util.Properties properties19 = new java.util.Properties();
        java.lang.String str20 = properties19.toString();
        boolean boolean21 = properties19.isEmpty();
        java.lang.Object obj24 = properties19.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration25 = properties19.elements();
        java.lang.Object obj26 = properties2.replace((java.lang.Object) objEnumeration18, (java.lang.Object) properties19);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties2.keys();
        java.lang.String str30 = properties2.getProperty("{{={-1.0=100}, -1.0=100}=}", "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=32, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={-1.0=100}, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{}" + "'", str4, "{}");
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(objEnumeration18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{}" + "'", str20, "{}");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(objEnumeration25);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=32, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={-1.0=100}, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}" + "'", str30, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=32, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={-1.0=100}, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
    }

    @Test
    public void test01414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01414");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isThreadedTwoPhaseCommit();
        long long2 = atomikosProperties0.getCheckpointInterval();
        boolean boolean3 = atomikosProperties0.serialJtaTransactions;
        atomikosProperties0.forceShutdownOnVmExit = true;
        boolean boolean6 = atomikosProperties0.allowSubTransactions;
        atomikosProperties0.setLogBaseDir("{100=100}");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 500L + "'", long2 == 500L);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test01415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01415");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj14 = properties0.setProperty("", "{-1.0=100}");
        java.lang.Object obj15 = properties0.clone();
        java.util.Collection<java.lang.Object> objCollection16 = properties0.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet17 = properties0.entrySet();
        java.lang.String str19 = properties0.getProperty("{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}");
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet20 = properties0.entrySet();
        java.lang.String str22 = properties0.getProperty("{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}");
        int int23 = properties0.size();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(obj15);
// flaky:         org.junit.Assert.assertEquals(obj15.toString(), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNotNull(objCollection16);
        org.junit.Assert.assertNotNull(objEntrySet17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(objEntrySet20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
    }

    @Test
    public void test01416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01416");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setEnableLogging(true);
        atomikosProperties12.setConsoleFileLimit((int) (short) 0);
        boolean boolean17 = properties0.contains((java.lang.Object) atomikosProperties12);
        java.lang.String str18 = properties0.toString();
        java.lang.Object obj21 = properties0.setProperty("", "tm.out");
        java.io.Writer writer22 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.store(writer22, "{0={100=100}, {}={}}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "{-1.0=100}" + "'", str18, "{-1.0=100}");
        org.junit.Assert.assertNull(obj21);
    }

    @Test
    public void test01417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01417");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setMaxActives(0);
        boolean boolean7 = atomikosProperties0.threadedTwoPhaseCommit;
        boolean boolean8 = atomikosProperties0.allowSubTransactions;
        atomikosProperties0.logBaseDir = "{}";
        atomikosProperties0.logBaseName = "{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}";
        boolean boolean13 = atomikosProperties0.isEnableLogging();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test01418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01418");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean8 = atomikosProperties7.isSerialJtaTransactions();
        atomikosProperties7.logBaseName = "{-1.0=100}";
        int int11 = atomikosProperties7.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery12 = atomikosProperties7.getRecovery();
        atomikosProperties7.setConsoleFileCount((int) (byte) 100);
        atomikosProperties7.setAllowSubTransactions(true);
        atomikosProperties7.setService("tm.out");
        int int19 = atomikosProperties7.consoleFileLimit;
        atomikosProperties7.setDefaultJtaTimeout((long) 'a');
        boolean boolean22 = atomikosProperties7.enableLogging;
        java.lang.String str23 = atomikosProperties7.consoleFileName;
        java.lang.String str24 = atomikosProperties7.transactionManagerUniqueName;
        boolean boolean25 = atomikosProperties7.isSerialJtaTransactions();
        java.lang.String str26 = atomikosProperties7.consoleFileName;
        boolean boolean27 = properties0.containsKey((java.lang.Object) str26);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery28 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery28.retryInterval = (short) 100;
        recovery28.forgetOrphanedLogEntriesDelay = 'a';
        long long33 = recovery28.getDelay();
        int int34 = recovery28.maxRetries;
        int int35 = recovery28.maxRetries;
        recovery28.setDelay((long) (-1));
        long long38 = recovery28.forgetOrphanedLogEntriesDelay;
        recovery28.maxRetries = (-1);
        boolean boolean41 = properties0.equals((java.lang.Object) recovery28);
        long long42 = recovery28.forgetOrphanedLogEntriesDelay;
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 50 + "'", int11 == 50);
        org.junit.Assert.assertNotNull(recovery12);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "tm.out" + "'", str23, "tm.out");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "tm.out" + "'", str26, "tm.out");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 10000L + "'", long33 == 10000L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 5 + "'", int34 == 5);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 5 + "'", int35 == 5);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 97L + "'", long38 == 97L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 97L + "'", long42 == 97L);
    }

    @Test
    public void test01419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01419");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.String str9 = properties0.toString();
        int int10 = properties0.size();
        java.util.Properties properties11 = new java.util.Properties();
        java.lang.Object obj13 = properties11.remove((java.lang.Object) (-1.0d));
        boolean boolean14 = properties11.isEmpty();
        int int15 = properties11.size();
        java.lang.String str17 = properties11.getProperty("{}");
        java.util.Set<java.lang.Object> objSet18 = properties11.keySet();
        java.util.Enumeration<java.lang.Object> objEnumeration19 = properties11.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties20.setEnableLogging(true);
        atomikosProperties20.consoleFileCount = 0;
        int int25 = atomikosProperties20.getMaxActives();
        java.lang.String str26 = atomikosProperties20.getLogBaseDir();
        java.lang.String str27 = atomikosProperties20.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery28 = atomikosProperties20.getRecovery();
        boolean boolean29 = atomikosProperties20.serialJtaTransactions;
        atomikosProperties20.setCheckpointInterval(10000L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties33 = atomikosProperties32.asProperties();
        atomikosProperties32.service = "{-1.0=100}";
        long long36 = atomikosProperties32.getDefaultJtaTimeout();
        atomikosProperties32.serialJtaTransactions = true;
        atomikosProperties32.maxActives = ' ';
        atomikosProperties32.maxActives = (byte) 10;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery43 = atomikosProperties32.recovery;
        java.lang.String str44 = atomikosProperties32.transactionManagerUniqueName;
        long long45 = atomikosProperties32.getCheckpointInterval();
        boolean boolean46 = properties0.replace((java.lang.Object) properties11, (java.lang.Object) 10000L, (java.lang.Object) atomikosProperties32);
        java.lang.Object obj47 = null;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery48 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery48.retryInterval = (short) 100;
        recovery48.forgetOrphanedLogEntriesDelay = 'a';
        long long53 = recovery48.retryInterval;
        recovery48.forgetOrphanedLogEntriesDelay = 0L;
        long long56 = recovery48.getForgetOrphanedLogEntriesDelay();
        long long57 = recovery48.getForgetOrphanedLogEntriesDelay();
        recovery48.retryInterval = 0L;
        long long60 = recovery48.retryInterval;
        int int61 = recovery48.maxRetries;
        long long62 = recovery48.getDelay();
        long long63 = recovery48.retryInterval;
        recovery48.maxRetries = (byte) 10;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties66 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties67 = atomikosProperties66.asProperties();
        atomikosProperties66.service = "{-1.0=100}";
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery70 = atomikosProperties66.recovery;
        atomikosProperties66.enableLogging = true;
        int int73 = atomikosProperties66.getConsoleFileCount();
        boolean boolean74 = atomikosProperties66.isEnableLogging();
        atomikosProperties66.defaultJtaTimeout = 5;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean77 = properties0.replace(obj47, (java.lang.Object) recovery48, (java.lang.Object) atomikosProperties66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{-1.0=100}" + "'", str9, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(objSet18);
        org.junit.Assert.assertNotNull(objEnumeration19);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 50 + "'", int25 == 50);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(recovery28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(properties33);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 10000L + "'", long36 == 10000L);
        org.junit.Assert.assertNotNull(recovery43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 500L + "'", long45 == 500L);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 100L + "'", long53 == 100L);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 5 + "'", int61 == 5);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 10000L + "'", long62 == 10000L);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertNotNull(properties67);
        org.junit.Assert.assertNotNull(recovery70);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
    }

    @Test
    public void test01420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01420");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        boolean boolean2 = properties0.isEmpty();
        java.lang.Object obj5 = properties0.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration6 = properties0.elements();
        java.util.Properties properties7 = new java.util.Properties();
        java.util.Properties properties8 = new java.util.Properties(properties7);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery9 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery9.retryInterval = (short) 100;
        recovery9.forgetOrphanedLogEntriesDelay = 'a';
        long long14 = recovery9.retryInterval;
        recovery9.forgetOrphanedLogEntriesDelay = 0L;
        long long17 = recovery9.getForgetOrphanedLogEntriesDelay();
        recovery9.setRetryInterval((long) 0);
        boolean boolean20 = properties0.remove((java.lang.Object) properties8, (java.lang.Object) 0);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery21 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery21.retryInterval = (short) 100;
        recovery21.forgetOrphanedLogEntriesDelay = 'a';
        long long26 = recovery21.retryInterval;
        long long27 = recovery21.forgetOrphanedLogEntriesDelay;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties29 = atomikosProperties28.asProperties();
        atomikosProperties28.service = "{-1.0=100}";
        long long32 = atomikosProperties28.getDefaultJtaTimeout();
        atomikosProperties28.consoleFileLimit = '#';
        int int35 = atomikosProperties28.getConsoleFileCount();
        int int36 = atomikosProperties28.maxActives;
        atomikosProperties28.setEnableLogging(true);
        java.lang.Object obj39 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean40 = properties8.replace((java.lang.Object) long27, (java.lang.Object) true, obj39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(objEnumeration6);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 100L + "'", long14 == 100L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 100L + "'", long26 == 100L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 97L + "'", long27 == 97L);
        org.junit.Assert.assertNotNull(properties29);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 10000L + "'", long32 == 10000L);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 50 + "'", int36 == 50);
    }

    @Test
    public void test01421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01421");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long1 = recovery0.forgetOrphanedLogEntriesDelay;
        long long2 = recovery0.forgetOrphanedLogEntriesDelay;
        int int3 = recovery0.maxRetries;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 86400000L + "'", long1 == 86400000L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 86400000L + "'", long2 == 86400000L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 5 + "'", int3 == 5);
    }

    @Test
    public void test01422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01422");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.retryInterval = (short) 100;
        recovery0.delay = (-1L);
        long long5 = recovery0.delay;
        recovery0.maxRetries = 0;
        long long8 = recovery0.forgetOrphanedLogEntriesDelay;
        long long9 = recovery0.getForgetOrphanedLogEntriesDelay();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 86400000L + "'", long8 == 86400000L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 86400000L + "'", long9 == 86400000L);
    }

    @Test
    public void test01423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01423");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.util.Properties properties3 = new java.util.Properties();
        java.lang.String str4 = properties3.toString();
        java.lang.Object obj6 = properties3.remove((java.lang.Object) (short) 100);
        java.lang.Object obj9 = properties3.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean11 = properties3.containsKey((java.lang.Object) 0L);
        java.lang.Object obj14 = properties3.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj17 = properties3.setProperty("", "{-1.0=100}");
        java.util.Enumeration<java.lang.Object> objEnumeration18 = properties3.keys();
        java.util.Properties properties19 = new java.util.Properties();
        java.lang.String str20 = properties19.toString();
        boolean boolean21 = properties19.isEmpty();
        java.lang.Object obj24 = properties19.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration25 = properties19.elements();
        java.lang.Object obj26 = properties2.replace((java.lang.Object) objEnumeration18, (java.lang.Object) properties19);
        java.util.Properties properties27 = new java.util.Properties();
        java.lang.String str28 = properties27.toString();
        java.lang.Object obj30 = properties27.remove((java.lang.Object) (short) 100);
        java.lang.Object obj33 = properties27.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj34 = properties27.clone();
        java.util.Set<java.lang.String> strSet35 = properties27.stringPropertyNames();
        java.util.Properties properties36 = new java.util.Properties();
        java.lang.String str37 = properties36.toString();
        java.lang.Object obj39 = properties36.remove((java.lang.Object) (short) 100);
        java.lang.Object obj42 = properties36.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean44 = properties36.containsKey((java.lang.Object) 0L);
        java.lang.Object obj47 = properties36.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties48 = new java.util.Properties();
        java.lang.String str49 = properties48.toString();
        java.lang.Object obj51 = properties48.remove((java.lang.Object) (short) 100);
        java.lang.Object obj54 = properties48.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj55 = properties48.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration56 = properties48.elements();
        properties36.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties48);
        java.util.Properties properties58 = new java.util.Properties();
        java.lang.String str59 = properties58.toString();
        java.lang.Object obj61 = properties58.remove((java.lang.Object) (short) 100);
        java.lang.Object obj64 = properties58.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean66 = properties58.containsKey((java.lang.Object) 0L);
        java.lang.Object obj69 = properties58.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties70 = new java.util.Properties();
        java.lang.String str71 = properties70.toString();
        java.lang.Object obj73 = properties70.remove((java.lang.Object) (short) 100);
        java.lang.Object obj76 = properties70.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj77 = properties70.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration78 = properties70.elements();
        properties58.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties70);
        java.lang.Object obj80 = properties27.putIfAbsent((java.lang.Object) properties36, (java.lang.Object) properties70);
        java.lang.Object obj82 = properties2.getOrDefault((java.lang.Object) properties70, (java.lang.Object) (short) 10);
        java.util.Set<java.lang.String> strSet83 = properties2.stringPropertyNames();
        java.lang.String str84 = properties2.toString();
        java.io.Reader reader85 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties2.load(reader85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{}" + "'", str4, "{}");
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(objEnumeration18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{}" + "'", str20, "{}");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(objEnumeration25);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "{}" + "'", str28, "{}");
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "{1.0=-1}");
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "{}" + "'", str37, "{}");
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "{}" + "'", str49, "{}");
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertEquals(obj55.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj55), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj55), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration56);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "{}" + "'", str59, "{}");
        org.junit.Assert.assertNull(obj61);
        org.junit.Assert.assertNull(obj64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(obj69);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "{}" + "'", str71, "{}");
        org.junit.Assert.assertNull(obj73);
        org.junit.Assert.assertNull(obj76);
        org.junit.Assert.assertNotNull(obj77);
        org.junit.Assert.assertEquals(obj77.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj77), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj77), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration78);
        org.junit.Assert.assertNull(obj80);
        org.junit.Assert.assertEquals("'" + obj82 + "' != '" + (short) 10 + "'", obj82, (short) 10);
        org.junit.Assert.assertNotNull(strSet83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "{}" + "'", str84, "{}");
    }

    @Test
    public void test01424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01424");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Enumeration<?> wildcardEnumeration1 = properties0.propertyNames();
        java.lang.Object obj4 = properties0.setProperty("{={-1.0=100}, -1.0=100}", "{={-1.0=100}, -1.0=100}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long6 = recovery5.getRetryInterval();
        long long7 = recovery5.getDelay();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties9 = atomikosProperties8.asProperties();
        atomikosProperties8.service = "{-1.0=100}";
        java.lang.String str12 = atomikosProperties8.getTransactionManagerUniqueName();
        atomikosProperties8.consoleFileName = "hi!";
        atomikosProperties8.serialJtaTransactions = true;
        atomikosProperties8.outputDir = "tm.out";
        boolean boolean19 = atomikosProperties8.isAllowSubTransactions();
        atomikosProperties8.consoleFileName = "";
        atomikosProperties8.transactionManagerUniqueName = "";
        java.lang.Object obj24 = properties0.replace((java.lang.Object) long7, (java.lang.Object) atomikosProperties8);
        boolean boolean25 = properties0.isEmpty();
        java.io.OutputStream outputStream26 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.storeToXML(outputStream26, "tmlog", "{0={100=100}, {}={}}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardEnumeration1);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test01425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01425");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getLogBaseName();
        long long5 = atomikosProperties0.defaultJtaTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel6 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel6);
        atomikosProperties0.threadedTwoPhaseCommit = false;
        atomikosProperties0.allowSubTransactions = false;
        java.lang.String str12 = atomikosProperties0.getConsoleFileName();
        java.util.Properties properties13 = atomikosProperties0.asProperties();
        java.io.OutputStream outputStream14 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties13.storeToXML(outputStream14, "{{-1.0=100}=}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tmlog" + "'", str4, "tmlog");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 10000L + "'", long5 == 10000L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "tm.out" + "'", str12, "tm.out");
        org.junit.Assert.assertNotNull(properties13);
    }

    @Test
    public void test01426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01426");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.remove((java.lang.Object) (-1.0d));
        int int3 = properties0.size();
        java.util.Enumeration<?> wildcardEnumeration4 = properties0.propertyNames();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(wildcardEnumeration4);
    }

    @Test
    public void test01427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01427");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        atomikosProperties0.maxActives = ' ';
        int int9 = atomikosProperties0.getConsoleFileCount();
        int int10 = atomikosProperties0.consoleFileLimit;
        java.util.Properties properties11 = atomikosProperties0.asProperties();
        long long12 = atomikosProperties0.defaultJtaTimeout;
        java.lang.String str13 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setService("{-1.0=100}");
        atomikosProperties0.threadedTwoPhaseCommit = true;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10000L + "'", long12 == 10000L);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test01428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01428");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        long long5 = atomikosProperties0.getMaxTimeout();
        int int6 = atomikosProperties0.consoleFileCount;
        long long7 = atomikosProperties0.getCheckpointInterval();
        atomikosProperties0.setTransactionManagerUniqueName("{1.0=-1, -1.0=100}");
        boolean boolean10 = atomikosProperties0.serialJtaTransactions;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test01429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01429");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        atomikosProperties0.setConsoleFileCount((int) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel8 = null;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel8;
        java.lang.String str10 = atomikosProperties0.logBaseDir;
        atomikosProperties0.checkpointInterval = (byte) 0;
        java.lang.String str13 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.serialJtaTransactions = true;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel16 = atomikosProperties0.getConsoleLogLevel();
        java.lang.String str17 = atomikosProperties0.consoleFileName;
        atomikosProperties0.setForceShutdownOnVmExit(true);
        boolean boolean20 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.consoleFileCount = (short) -1;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(atomikosLoggingLevel16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tm.out" + "'", str17, "tm.out");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test01430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01430");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj14 = properties0.setProperty("", "{-1.0=100}");
        java.util.Enumeration<java.lang.Object> objEnumeration15 = properties0.keys();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet16 = properties0.entrySet();
        java.io.OutputStream outputStream17 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.store(outputStream17, "tm.out");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(objEnumeration15);
        org.junit.Assert.assertNotNull(objEntrySet16);
    }

    @Test
    public void test01431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01431");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        int int7 = properties0.size();
        int int8 = properties0.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties10 = atomikosProperties9.asProperties();
        atomikosProperties9.service = "{-1.0=100}";
        java.lang.String str13 = atomikosProperties9.getTransactionManagerUniqueName();
        atomikosProperties9.consoleFileName = "hi!";
        atomikosProperties9.setCheckpointInterval((long) 5);
        atomikosProperties9.setLogBaseDir("{-1.0=100}");
        java.lang.String str20 = atomikosProperties9.transactionManagerUniqueName;
        java.lang.Object obj21 = properties0.get((java.lang.Object) atomikosProperties9);
        java.util.Properties properties22 = new java.util.Properties(properties0);
        java.io.InputStream inputStream23 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.load(inputStream23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(obj21);
    }

    @Test
    public void test01432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01432");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        int int7 = atomikosProperties0.maxActives;
        atomikosProperties0.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.getRecovery();
        atomikosProperties0.consoleFileName = "{-1.0=100}";
        atomikosProperties0.setSerialJtaTransactions(false);
        atomikosProperties0.consoleFileName = "{={-1.0=100}, -1.0=100}";
        atomikosProperties0.defaultJtaTimeout = 50;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel19 = atomikosProperties0.getConsoleLogLevel();
        atomikosProperties0.enableLogging = true;
        atomikosProperties0.checkpointInterval = (-1L);
        int int24 = atomikosProperties0.maxActives;
        boolean boolean25 = atomikosProperties0.serialJtaTransactions;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertNull(atomikosLoggingLevel19);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 50 + "'", int24 == 50);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test01433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01433");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        java.util.Properties properties2 = new java.util.Properties();
        java.lang.Object obj4 = properties2.remove((java.lang.Object) (-1.0d));
        boolean boolean5 = properties2.isEmpty();
        int int6 = properties2.size();
        java.lang.String str8 = properties2.getProperty("{}");
        java.lang.Object obj9 = properties1.remove((java.lang.Object) properties2);
        java.util.Properties properties10 = new java.util.Properties();
        java.lang.String str11 = properties10.toString();
        java.util.Properties properties12 = new java.util.Properties(properties10);
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        java.lang.String str16 = properties1.getProperty("{100=100}", "{{={-1.0=100}, -1.0=100}=}");
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "{}" + "'", str11, "{}");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{{={-1.0=100}, -1.0=100}=}" + "'", str16, "{{={-1.0=100}, -1.0=100}=}");
    }

    @Test
    public void test01434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01434");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj14 = properties0.setProperty("", "{-1.0=100}");
        java.lang.Object obj15 = properties0.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery16 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery16.retryInterval = (short) 100;
        recovery16.forgetOrphanedLogEntriesDelay = 'a';
        boolean boolean21 = properties0.equals((java.lang.Object) 'a');
        boolean boolean22 = properties0.isEmpty();
        java.util.Properties properties23 = new java.util.Properties();
        java.lang.String str24 = properties23.toString();
        java.lang.Object obj26 = properties23.remove((java.lang.Object) (short) 100);
        java.lang.Object obj29 = properties23.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        java.util.Properties properties31 = new java.util.Properties();
        java.lang.String str32 = properties31.toString();
        java.lang.Object obj34 = properties31.remove((java.lang.Object) (short) 100);
        java.lang.Object obj37 = properties31.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj38 = properties31.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration39 = properties31.elements();
        java.lang.Object obj40 = properties23.putIfAbsent((java.lang.Object) 10.0f, (java.lang.Object) objEnumeration39);
        java.util.Properties properties41 = new java.util.Properties();
        java.util.Enumeration<?> wildcardEnumeration42 = properties41.propertyNames();
        java.lang.Object obj43 = properties41.clone();
        java.util.Properties properties44 = new java.util.Properties();
        java.lang.String str45 = properties44.toString();
        boolean boolean46 = properties44.isEmpty();
        java.lang.Object obj49 = properties44.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration50 = properties44.elements();
        java.lang.Object obj51 = properties23.put(obj43, (java.lang.Object) objEnumeration50);
        properties23.clear();
        java.util.Properties properties53 = new java.util.Properties();
        java.util.Properties properties54 = new java.util.Properties();
        java.lang.Object obj56 = properties54.remove((java.lang.Object) (-1.0d));
        int int57 = properties54.size();
        java.util.Enumeration<java.lang.Object> objEnumeration58 = properties54.elements();
        java.util.Properties properties59 = new java.util.Properties();
        properties59.clear();
        java.lang.String str61 = properties59.toString();
        boolean boolean62 = properties23.replace((java.lang.Object) properties53, (java.lang.Object) properties54, (java.lang.Object) str61);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties63 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean64 = atomikosProperties63.isSerialJtaTransactions();
        atomikosProperties63.logBaseName = "{-1.0=100}";
        int int67 = atomikosProperties63.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery68 = atomikosProperties63.getRecovery();
        atomikosProperties63.setConsoleFileCount((int) (byte) 100);
        atomikosProperties63.setAllowSubTransactions(true);
        atomikosProperties63.setService("tm.out");
        boolean boolean75 = atomikosProperties63.isForceShutdownOnVmExit();
        java.util.Properties properties76 = new java.util.Properties();
        java.lang.String str77 = properties76.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties78 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties79 = atomikosProperties78.asProperties();
        atomikosProperties78.service = "{-1.0=100}";
        long long82 = atomikosProperties78.getDefaultJtaTimeout();
        atomikosProperties78.setThreadedTwoPhaseCommit(true);
        boolean boolean85 = atomikosProperties78.isEnableLogging();
        atomikosProperties78.defaultJtaTimeout = (byte) 10;
        boolean boolean88 = properties54.replace((java.lang.Object) boolean75, (java.lang.Object) properties76, (java.lang.Object) (byte) 10);
        boolean boolean89 = properties0.contains((java.lang.Object) properties76);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet90 = properties0.entrySet();
        java.lang.String str92 = properties0.getProperty("");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(obj15);
// flaky:         org.junit.Assert.assertEquals(obj15.toString(), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "{}" + "'", str24, "{}");
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "{}" + "'", str32, "{}");
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertEquals(obj38.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration39);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNotNull(wildcardEnumeration42);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "{}");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "{}" + "'", str45, "{}");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertNotNull(objEnumeration50);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(objEnumeration58);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "{}" + "'", str61, "{}");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 50 + "'", int67 == 50);
        org.junit.Assert.assertNotNull(recovery68);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "{}" + "'", str77, "{}");
        org.junit.Assert.assertNotNull(properties79);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 10000L + "'", long82 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(objEntrySet90);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "{-1.0=100}" + "'", str92, "{-1.0=100}");
    }

    @Test
    public void test01435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01435");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        atomikosProperties0.consoleFileLimit = 32;
        atomikosProperties0.setEnableLogging(true);
        java.lang.String str9 = atomikosProperties0.getLogBaseName();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel10 = atomikosProperties0.getConsoleLogLevel();
        atomikosProperties0.consoleFileLimit = 3;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{-1.0=100}" + "'", str9, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel10 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel10.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
    }

    @Test
    public void test01436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01436");
        java.util.Properties properties0 = new java.util.Properties();
        properties0.clear();
        java.lang.String str2 = properties0.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery3 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery3.retryInterval = (short) 100;
        recovery3.setForgetOrphanedLogEntriesDelay((long) 5);
        recovery3.setRetryInterval((long) (-1));
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery10.retryInterval = (short) 100;
        recovery10.forgetOrphanedLogEntriesDelay = 'a';
        long long15 = recovery10.retryInterval;
        recovery10.forgetOrphanedLogEntriesDelay = 0L;
        java.lang.Object obj18 = properties0.put((java.lang.Object) (-1), (java.lang.Object) recovery10);
        boolean boolean19 = properties0.isEmpty();
        java.util.Properties properties20 = new java.util.Properties();
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.String str22 = properties21.toString();
        boolean boolean23 = properties21.isEmpty();
        java.util.Properties properties24 = new java.util.Properties();
        java.lang.String str25 = properties24.toString();
        java.lang.Object obj27 = properties24.remove((java.lang.Object) (short) 100);
        java.lang.Object obj30 = properties24.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean32 = properties24.containsKey((java.lang.Object) 0L);
        boolean boolean33 = properties21.containsValue((java.lang.Object) 0L);
        boolean boolean36 = properties20.replace((java.lang.Object) 0L, (java.lang.Object) 0.0f, (java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration37 = properties20.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties39 = atomikosProperties38.asProperties();
        atomikosProperties38.service = "{-1.0=100}";
        java.lang.String str42 = atomikosProperties38.getTransactionManagerUniqueName();
        boolean boolean43 = atomikosProperties38.isSerialJtaTransactions();
        java.lang.String str44 = atomikosProperties38.logBaseName;
        boolean boolean45 = properties0.remove((java.lang.Object) properties20, (java.lang.Object) str44);
        int int46 = properties0.size();
        java.io.Writer writer47 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.store(writer47, "{1.0=-1, -1.0=100}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{}" + "'", str2, "{}");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 100L + "'", long15 == 100L);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{}" + "'", str22, "{}");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "{}" + "'", str25, "{}");
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(objEnumeration37);
        org.junit.Assert.assertNotNull(properties39);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "tmlog" + "'", str44, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
    }

    @Test
    public void test01437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01437");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setTransactionManagerUniqueName("{}");
        atomikosProperties0.consoleFileName = "hi!";
        int int9 = atomikosProperties0.getConsoleFileCount();
        boolean boolean10 = atomikosProperties0.isThreadedTwoPhaseCommit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel11 = atomikosProperties0.consoleLogLevel;
        long long12 = atomikosProperties0.getDefaultJtaTimeout();
        boolean boolean13 = atomikosProperties0.isEnableLogging();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel11 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel11.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10000L + "'", long12 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test01438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01438");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.enableLogging = false;
        atomikosProperties0.setMaxTimeout((long) (byte) 0);
        atomikosProperties0.setService("tm.out");
        boolean boolean11 = atomikosProperties0.enableLogging;
        long long12 = atomikosProperties0.getCheckpointInterval();
        int int13 = atomikosProperties0.getConsoleFileLimit();
        int int14 = atomikosProperties0.consoleFileLimit;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 500L + "'", long12 == 500L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
    }

    @Test
    public void test01439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01439");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.enableLogging = false;
        atomikosProperties0.setMaxTimeout((long) (byte) 0);
        atomikosProperties0.setAllowSubTransactions(true);
        atomikosProperties0.transactionManagerUniqueName = "";
        java.lang.String str13 = atomikosProperties0.getConsoleFileName();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tm.out" + "'", str13, "tm.out");
    }

    @Test
    public void test01440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01440");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setEnableLogging(true);
        atomikosProperties0.setConsoleFileLimit((int) (short) 0);
        atomikosProperties0.setSerialJtaTransactions(false);
    }

    @Test
    public void test01441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01441");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj4 = properties0.clone();
        java.util.Properties properties5 = new java.util.Properties();
        java.lang.String str6 = properties5.toString();
        boolean boolean7 = properties5.isEmpty();
        java.lang.Object obj10 = properties5.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration11 = properties5.elements();
        java.util.Properties properties12 = new java.util.Properties();
        java.util.Properties properties13 = new java.util.Properties(properties12);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery14 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery14.retryInterval = (short) 100;
        recovery14.forgetOrphanedLogEntriesDelay = 'a';
        long long19 = recovery14.retryInterval;
        recovery14.forgetOrphanedLogEntriesDelay = 0L;
        long long22 = recovery14.getForgetOrphanedLogEntriesDelay();
        recovery14.setRetryInterval((long) 0);
        boolean boolean25 = properties5.remove((java.lang.Object) properties13, (java.lang.Object) 0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties27 = atomikosProperties26.asProperties();
        atomikosProperties26.service = "{-1.0=100}";
        long long30 = atomikosProperties26.getDefaultJtaTimeout();
        atomikosProperties26.enableLogging = false;
        atomikosProperties26.setMaxTimeout((long) (byte) 0);
        java.lang.Object obj35 = properties5.get((java.lang.Object) (byte) 0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties37 = atomikosProperties36.asProperties();
        atomikosProperties36.service = "{-1.0=100}";
        long long40 = atomikosProperties36.getDefaultJtaTimeout();
        atomikosProperties36.serialJtaTransactions = true;
        long long43 = atomikosProperties36.getDefaultJtaTimeout();
        long long44 = atomikosProperties36.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery45 = atomikosProperties36.getRecovery();
        long long46 = recovery45.delay;
        recovery45.maxRetries = (-1);
        long long49 = recovery45.getRetryInterval();
        long long50 = recovery45.getDelay();
        boolean boolean51 = properties0.remove((java.lang.Object) (byte) 0, (java.lang.Object) recovery45);
        java.io.PrintStream printStream52 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.list(printStream52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "{}");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "{}" + "'", str6, "{}");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNotNull(objEnumeration11);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 100L + "'", long19 == 100L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(properties27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 10000L + "'", long30 == 10000L);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNotNull(properties37);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 10000L + "'", long40 == 10000L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 10000L + "'", long43 == 10000L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 500L + "'", long44 == 500L);
        org.junit.Assert.assertNotNull(recovery45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 10000L + "'", long46 == 10000L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 10000L + "'", long49 == 10000L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 10000L + "'", long50 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test01442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01442");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        int int7 = atomikosProperties0.maxActives;
        atomikosProperties0.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.getRecovery();
        atomikosProperties0.forceShutdownOnVmExit = false;
        long long13 = atomikosProperties0.checkpointInterval;
        int int14 = atomikosProperties0.getConsoleFileLimit();
        long long15 = atomikosProperties0.defaultJtaTimeout;
        atomikosProperties0.logBaseName = "{100=100}";
        atomikosProperties0.serialJtaTransactions = false;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 500L + "'", long13 == 500L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10000L + "'", long15 == 10000L);
    }

    @Test
    public void test01443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01443");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileName = "hi!";
        atomikosProperties0.setCheckpointInterval((long) 5);
        atomikosProperties0.setConsoleFileCount(0);
        atomikosProperties0.setService("{-1.0=100}");
        atomikosProperties0.setDefaultJtaTimeout((long) 100);
        atomikosProperties0.defaultJtaTimeout = 32;
        atomikosProperties0.setService("{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}");
        boolean boolean19 = atomikosProperties0.isThreadedTwoPhaseCommit();
        java.lang.String str20 = atomikosProperties0.outputDir;
        atomikosProperties0.threadedTwoPhaseCommit = false;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test01444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01444");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        int int5 = atomikosProperties0.getConsoleFileCount();
        boolean boolean6 = atomikosProperties0.enableLogging;
        atomikosProperties0.setSerialJtaTransactions(true);
        atomikosProperties0.setConsoleFileCount((-1));
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test01445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01445");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        int int7 = atomikosProperties0.maxActives;
        atomikosProperties0.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.getRecovery();
        atomikosProperties0.forceShutdownOnVmExit = false;
        java.lang.String str13 = atomikosProperties0.service;
        atomikosProperties0.allowSubTransactions = false;
        atomikosProperties0.forceShutdownOnVmExit = false;
        atomikosProperties0.logBaseName = "";
        atomikosProperties0.setMaxTimeout((long) 97);
        atomikosProperties0.setConsoleFileCount(5);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{-1.0=100}" + "'", str13, "{-1.0=100}");
    }

    @Test
    public void test01446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01446");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        boolean boolean5 = properties0.containsKey((java.lang.Object) 0L);
        java.util.Properties properties6 = new java.util.Properties();
        java.lang.String str7 = properties6.toString();
        java.util.Properties properties8 = new java.util.Properties(properties6);
        java.util.Properties properties9 = new java.util.Properties();
        java.lang.String str10 = properties9.toString();
        java.lang.Object obj12 = properties9.remove((java.lang.Object) (short) 100);
        java.lang.Object obj15 = properties9.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean17 = properties9.containsKey((java.lang.Object) 0L);
        java.lang.Object obj20 = properties9.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj23 = properties9.setProperty("", "{-1.0=100}");
        java.util.Enumeration<java.lang.Object> objEnumeration24 = properties9.keys();
        java.util.Properties properties25 = new java.util.Properties();
        java.lang.String str26 = properties25.toString();
        boolean boolean27 = properties25.isEmpty();
        java.lang.Object obj30 = properties25.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration31 = properties25.elements();
        java.lang.Object obj32 = properties8.replace((java.lang.Object) objEnumeration24, (java.lang.Object) properties25);
        java.util.Enumeration<java.lang.Object> objEnumeration33 = properties25.elements();
        java.util.Properties properties34 = new java.util.Properties();
        java.lang.String str35 = properties34.toString();
        boolean boolean36 = properties34.isEmpty();
        java.lang.Object obj39 = properties34.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Properties properties40 = new java.util.Properties();
        java.lang.String str41 = properties40.toString();
        java.lang.Object obj43 = properties40.remove((java.lang.Object) (short) 100);
        java.lang.Object obj46 = properties40.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean48 = properties40.containsKey((java.lang.Object) 0L);
        java.lang.Object obj51 = properties40.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties52 = new java.util.Properties(properties40);
        boolean boolean53 = properties34.containsValue((java.lang.Object) properties40);
        java.util.Properties properties54 = new java.util.Properties();
        java.lang.String str55 = properties54.toString();
        java.lang.Object obj57 = properties54.remove((java.lang.Object) (short) 100);
        java.lang.Object obj60 = properties54.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean62 = properties54.containsKey((java.lang.Object) 0L);
        java.lang.Object obj65 = properties54.replace((java.lang.Object) false, (java.lang.Object) ' ');
        boolean boolean66 = properties54.isEmpty();
        boolean boolean67 = properties0.replace((java.lang.Object) properties25, (java.lang.Object) properties34, (java.lang.Object) properties54);
        java.util.Properties properties68 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties69 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties70 = atomikosProperties69.asProperties();
        atomikosProperties69.service = "{-1.0=100}";
        long long73 = atomikosProperties69.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel74 = null;
        atomikosProperties69.setConsoleLogLevel(atomikosLoggingLevel74);
        int int76 = atomikosProperties69.maxActives;
        int int77 = atomikosProperties69.maxActives;
        java.lang.Object obj78 = properties68.remove((java.lang.Object) atomikosProperties69);
        java.lang.Class<?> wildcardClass79 = atomikosProperties69.getClass();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "{}" + "'", str7, "{}");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "{}" + "'", str10, "{}");
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNotNull(objEnumeration24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "{}" + "'", str26, "{}");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNotNull(objEnumeration31);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNotNull(objEnumeration33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "{}" + "'", str35, "{}");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "{}" + "'", str41, "{}");
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "{}" + "'", str55, "{}");
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(properties70);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 10000L + "'", long73 == 10000L);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 50 + "'", int76 == 50);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 50 + "'", int77 == 50);
        org.junit.Assert.assertNull(obj78);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test01447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01447");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setAllowSubTransactions(true);
        atomikosProperties0.logBaseName = "{={-1.0=100}, -1.0=100}";
        int int5 = atomikosProperties0.getConsoleFileLimit();
        java.lang.String str6 = atomikosProperties0.getLogBaseDir();
        java.lang.String str7 = atomikosProperties0.outputDir;
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test01448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01448");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        int int5 = atomikosProperties0.consoleFileCount;
        atomikosProperties0.transactionManagerUniqueName = "tm.out";
        atomikosProperties0.consoleFileName = "tm.out";
        atomikosProperties0.allowSubTransactions = false;
        boolean boolean12 = atomikosProperties0.allowSubTransactions;
        java.lang.String str13 = atomikosProperties0.logBaseName;
        atomikosProperties0.setEnableLogging(true);
        boolean boolean16 = atomikosProperties0.serialJtaTransactions;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{-1.0=100}" + "'", str13, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test01449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01449");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.retryInterval = (short) 100;
        recovery0.forgetOrphanedLogEntriesDelay = 'a';
        long long5 = recovery0.retryInterval;
        recovery0.forgetOrphanedLogEntriesDelay = 0L;
        long long8 = recovery0.getForgetOrphanedLogEntriesDelay();
        long long9 = recovery0.getForgetOrphanedLogEntriesDelay();
        recovery0.retryInterval = 0L;
        long long12 = recovery0.retryInterval;
        int int13 = recovery0.maxRetries;
        recovery0.setMaxRetries((int) 'a');
        long long16 = recovery0.getForgetOrphanedLogEntriesDelay();
        long long17 = recovery0.forgetOrphanedLogEntriesDelay;
        recovery0.setForgetOrphanedLogEntriesDelay((-1L));
        long long20 = recovery0.delay;
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 100L + "'", long5 == 100L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10000L + "'", long20 == 10000L);
    }

    @Test
    public void test01450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01450");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        int int7 = atomikosProperties0.maxActives;
        atomikosProperties0.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.getRecovery();
        long long11 = recovery10.forgetOrphanedLogEntriesDelay;
        recovery10.setDelay(0L);
        long long14 = recovery10.getDelay();
        recovery10.setMaxRetries(10);
        recovery10.setMaxRetries((int) ' ');
        recovery10.retryInterval = 100L;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 86400000L + "'", long11 == 86400000L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
    }

    @Test
    public void test01451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01451");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj7 = properties0.clone();
        java.util.Set<java.lang.String> strSet8 = properties0.stringPropertyNames();
        java.util.Properties properties9 = new java.util.Properties();
        java.lang.String str10 = properties9.toString();
        java.lang.Object obj12 = properties9.remove((java.lang.Object) (short) 100);
        java.lang.Object obj15 = properties9.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean17 = properties9.containsKey((java.lang.Object) 0L);
        java.lang.Object obj20 = properties9.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.String str22 = properties21.toString();
        java.lang.Object obj24 = properties21.remove((java.lang.Object) (short) 100);
        java.lang.Object obj27 = properties21.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj28 = properties21.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration29 = properties21.elements();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties21);
        java.util.Properties properties31 = new java.util.Properties();
        java.lang.String str32 = properties31.toString();
        java.lang.Object obj34 = properties31.remove((java.lang.Object) (short) 100);
        java.lang.Object obj37 = properties31.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean39 = properties31.containsKey((java.lang.Object) 0L);
        java.lang.Object obj42 = properties31.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties43 = new java.util.Properties();
        java.lang.String str44 = properties43.toString();
        java.lang.Object obj46 = properties43.remove((java.lang.Object) (short) 100);
        java.lang.Object obj49 = properties43.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj50 = properties43.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration51 = properties43.elements();
        properties31.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties43);
        java.lang.Object obj53 = properties0.putIfAbsent((java.lang.Object) properties9, (java.lang.Object) properties43);
        properties43.clear();
        boolean boolean55 = properties43.isEmpty();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{1.0=-1}");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "{}" + "'", str10, "{}");
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{}" + "'", str22, "{}");
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "{}" + "'", str32, "{}");
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "{}" + "'", str44, "{}");
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertEquals(obj50.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj50), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj50), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration51);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
    }

    @Test
    public void test01452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01452");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.outputDir = "{={-1.0=100}, -1.0=100}";
        long long7 = atomikosProperties0.getCheckpointInterval();
        boolean boolean8 = atomikosProperties0.isThreadedTwoPhaseCommit();
        java.lang.String str9 = atomikosProperties0.service;
        int int10 = atomikosProperties0.consoleFileCount;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery11 = atomikosProperties0.recovery;
        atomikosProperties0.logBaseDir = "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=32, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={-1.0=100}, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}";
        int int14 = atomikosProperties0.getMaxActives();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{-1.0=100}" + "'", str9, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(recovery11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 50 + "'", int14 == 50);
    }

    @Test
    public void test01453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01453");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties0.setMaxActives(100);
        java.lang.String str9 = atomikosProperties0.logBaseDir;
        java.lang.String str10 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.checkpointInterval = 100L;
        atomikosProperties0.forceShutdownOnVmExit = false;
        atomikosProperties0.defaultJtaTimeout = 18;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "tm.out" + "'", str10, "tm.out");
    }

    @Test
    public void test01454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01454");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        int int7 = atomikosProperties0.maxActives;
        atomikosProperties0.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.getRecovery();
        atomikosProperties0.consoleFileName = "{-1.0=100}";
        atomikosProperties0.setSerialJtaTransactions(false);
        atomikosProperties0.consoleFileName = "{={-1.0=100}, -1.0=100}";
        boolean boolean17 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.service = "tm.out";
        atomikosProperties0.setCheckpointInterval((long) 0);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test01455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01455");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        java.util.Properties properties7 = new java.util.Properties();
        java.lang.String str8 = properties7.toString();
        properties7.clear();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet10 = properties7.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties12 = atomikosProperties11.asProperties();
        atomikosProperties11.service = "{-1.0=100}";
        long long15 = atomikosProperties11.getDefaultJtaTimeout();
        atomikosProperties11.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties11.setMaxActives(100);
        java.lang.String str20 = atomikosProperties11.logBaseDir;
        atomikosProperties11.consoleFileCount = (short) 0;
        atomikosProperties11.defaultJtaTimeout = 10000L;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel25 = atomikosProperties11.consoleLogLevel;
        java.lang.Object obj26 = properties0.putIfAbsent((java.lang.Object) properties7, (java.lang.Object) atomikosLoggingLevel25);
        java.lang.String str27 = properties7.toString();
        int int28 = properties7.size();
        java.lang.String str30 = properties7.getProperty("{com.atomikos.icatch.={}, 100=100}");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{}" + "'", str8, "{}");
        org.junit.Assert.assertNotNull(objEntrySet10);
        org.junit.Assert.assertNotNull(properties12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10000L + "'", long15 == 10000L);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel25 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel25.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "{}" + "'", str27, "{}");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNull(str30);
    }

    @Test
    public void test01456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01456");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties8 = atomikosProperties7.asProperties();
        java.lang.Object obj9 = properties0.remove((java.lang.Object) properties8);
        java.util.Properties properties10 = new java.util.Properties(properties8);
        java.lang.String str11 = properties8.toString();
        java.util.Set<java.lang.Object> objSet12 = properties8.keySet();
        java.util.Enumeration<java.lang.Object> objEnumeration13 = properties8.elements();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertNull(obj9);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}" + "'", str11, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        org.junit.Assert.assertNotNull(objSet12);
        org.junit.Assert.assertNotNull(objEnumeration13);
    }

    @Test
    public void test01457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01457");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj14 = properties0.setProperty("", "{-1.0=100}");
        java.lang.Object obj15 = properties0.clone();
        java.util.Collection<java.lang.Object> objCollection16 = properties0.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet17 = properties0.entrySet();
        java.lang.String str19 = properties0.getProperty("{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}");
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet20 = properties0.entrySet();
        java.lang.String str22 = properties0.getProperty("{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean24 = atomikosProperties23.isSerialJtaTransactions();
        atomikosProperties23.logBaseName = "{-1.0=100}";
        int int27 = atomikosProperties23.maxActives;
        int int28 = atomikosProperties23.getConsoleFileCount();
        atomikosProperties23.setDefaultJtaTimeout((long) ' ');
        int int31 = atomikosProperties23.getMaxActives();
        boolean boolean32 = properties0.containsValue((java.lang.Object) atomikosProperties23);
        java.io.OutputStream outputStream33 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.save(outputStream33, "{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(obj15);
// flaky:         org.junit.Assert.assertEquals(obj15.toString(), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNotNull(objCollection16);
        org.junit.Assert.assertNotNull(objEntrySet17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(objEntrySet20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 50 + "'", int27 == 50);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 50 + "'", int31 == 50);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test01458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01458");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.enableLogging = false;
        atomikosProperties0.setMaxActives((int) ' ');
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties9.setAllowSubTransactions(true);
        boolean boolean12 = atomikosProperties9.enableLogging;
        boolean boolean13 = atomikosProperties9.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel14 = atomikosProperties9.consoleLogLevel;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel14);
        long long16 = atomikosProperties0.defaultJtaTimeout;
        java.util.Properties properties17 = new java.util.Properties();
        properties17.clear();
        java.lang.String str19 = properties17.toString();
        java.lang.Object obj20 = properties17.clone();
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.Object obj23 = properties21.remove((java.lang.Object) (-1.0d));
        boolean boolean24 = properties21.isEmpty();
        int int25 = properties21.size();
        java.lang.String str27 = properties21.getProperty("{}");
        java.util.Set<java.lang.Object> objSet28 = properties21.keySet();
        boolean boolean30 = properties21.containsKey((java.lang.Object) (short) 1);
        int int31 = properties21.size();
        properties17.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties21);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet33 = properties21.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery35 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery35.retryInterval = (short) 100;
        recovery35.delay = (-1L);
        long long40 = recovery35.delay;
        recovery35.delay = (short) 1;
        long long43 = recovery35.getRetryInterval();
        long long44 = recovery35.getForgetOrphanedLogEntriesDelay();
        recovery35.setMaxRetries(10);
        int int47 = recovery35.maxRetries;
        long long48 = recovery35.getDelay();
        recovery35.forgetOrphanedLogEntriesDelay = 500L;
        long long51 = recovery35.getForgetOrphanedLogEntriesDelay();
        recovery35.maxRetries = (short) -1;
        atomikosProperties0.set(properties21, "{tmlog=hi!, com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}", (java.lang.Object) (short) -1);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel14 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel14.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10000L + "'", long16 == 10000L);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "{}" + "'", str19, "{}");
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{}");
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(objSet28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(objEntrySet33);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-1L) + "'", long40 == (-1L));
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 100L + "'", long43 == 100L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 86400000L + "'", long44 == 86400000L);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10 + "'", int47 == 10);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1L + "'", long48 == 1L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 500L + "'", long51 == 500L);
    }

    @Test
    public void test01459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01459");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long1 = recovery0.getRetryInterval();
        long long2 = recovery0.getDelay();
        int int3 = recovery0.getMaxRetries();
        long long4 = recovery0.getDelay();
        recovery0.setDelay(500L);
        recovery0.setMaxRetries(5);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 10000L + "'", long1 == 10000L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10000L + "'", long2 == 10000L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 5 + "'", int3 == 5);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
    }

    @Test
    public void test01460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01460");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        java.lang.String str6 = atomikosProperties0.getOutputDir();
        boolean boolean7 = atomikosProperties0.isForceShutdownOnVmExit();
        int int8 = atomikosProperties0.consoleFileCount;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }

    @Test
    public void test01461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01461");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setEnableLogging(true);
        atomikosProperties0.consoleFileCount = 0;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties6 = atomikosProperties5.asProperties();
        atomikosProperties5.service = "{-1.0=100}";
        long long9 = atomikosProperties5.getDefaultJtaTimeout();
        boolean boolean10 = atomikosProperties5.enableLogging;
        boolean boolean11 = atomikosProperties5.isForceShutdownOnVmExit();
        atomikosProperties5.consoleFileLimit = (byte) -1;
        java.lang.String str14 = atomikosProperties5.getService();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel15 = atomikosProperties5.consoleLogLevel;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel15;
        boolean boolean17 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.consoleFileCount = 'a';
        atomikosProperties0.setMaxActives((int) (byte) 100);
        org.junit.Assert.assertNotNull(properties6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10000L + "'", long9 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "{-1.0=100}" + "'", str14, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel15 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel15.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test01462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01462");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        atomikosProperties0.maxActives = ' ';
        int int9 = atomikosProperties0.getConsoleFileCount();
        int int10 = atomikosProperties0.consoleFileLimit;
        java.util.Properties properties11 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean13 = atomikosProperties12.isSerialJtaTransactions();
        atomikosProperties12.logBaseName = "{-1.0=100}";
        int int16 = atomikosProperties12.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery17 = atomikosProperties12.getRecovery();
        atomikosProperties12.setConsoleFileCount((int) (byte) 100);
        atomikosProperties12.setAllowSubTransactions(true);
        atomikosProperties12.setService("tm.out");
        boolean boolean24 = atomikosProperties12.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel25 = atomikosProperties12.getConsoleLogLevel();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties26.setAllowSubTransactions(true);
        boolean boolean29 = atomikosProperties26.enableLogging;
        atomikosProperties26.consoleFileLimit = (byte) 100;
        java.util.Properties properties32 = new java.util.Properties();
        java.lang.String str33 = properties32.toString();
        java.util.Properties properties34 = new java.util.Properties(properties32);
        java.util.Properties properties36 = new java.util.Properties();
        java.lang.String str37 = properties36.toString();
        java.lang.Object obj39 = properties36.remove((java.lang.Object) (short) 100);
        java.lang.Object obj42 = properties36.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean44 = properties36.containsKey((java.lang.Object) 0L);
        java.lang.Object obj47 = properties36.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties48 = new java.util.Properties(properties36);
        java.util.Enumeration<java.lang.Object> objEnumeration49 = properties48.elements();
        atomikosProperties26.set(properties34, "{={-1.0=100}, -1.0=100}", (java.lang.Object) properties48);
        atomikosProperties26.allowSubTransactions = false;
        java.lang.Object obj53 = properties11.put((java.lang.Object) atomikosProperties12, (java.lang.Object) false);
        java.util.Properties properties54 = new java.util.Properties();
        java.lang.String str55 = properties54.toString();
        java.lang.Object obj57 = properties54.remove((java.lang.Object) (short) 100);
        java.lang.Object obj60 = properties54.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean62 = properties54.containsKey((java.lang.Object) 0L);
        java.lang.Object obj65 = properties54.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj68 = properties54.setProperty("", "{-1.0=100}");
        boolean boolean69 = properties54.isEmpty();
        java.util.Properties properties70 = new java.util.Properties();
        java.lang.String str71 = properties70.toString();
        java.util.Properties properties72 = new java.util.Properties(properties70);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet73 = properties72.entrySet();
        java.util.Properties properties75 = new java.util.Properties();
        java.lang.Object obj77 = properties75.remove((java.lang.Object) (-1.0d));
        int int78 = properties75.size();
        boolean boolean79 = properties54.replace((java.lang.Object) properties72, (java.lang.Object) 100L, (java.lang.Object) properties75);
        java.util.Properties properties80 = new java.util.Properties();
        java.lang.Object obj83 = properties80.setProperty("{}", "{}");
        java.util.Enumeration<java.lang.Object> objEnumeration84 = properties80.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration85 = properties80.elements();
        java.util.Properties properties86 = new java.util.Properties(properties80);
        boolean boolean87 = properties54.containsValue((java.lang.Object) properties86);
        java.lang.Object obj88 = properties11.get((java.lang.Object) boolean87);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Enumeration<?> wildcardEnumeration89 = properties11.propertyNames();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.springframework.boot.jta.atomikos.AtomikosProperties cannot be cast to java.lang.String");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 50 + "'", int16 == 50);
        org.junit.Assert.assertNotNull(recovery17);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel25 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel25.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "{}" + "'", str33, "{}");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "{}" + "'", str37, "{}");
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNotNull(objEnumeration49);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "{}" + "'", str55, "{}");
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertNull(obj68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "{}" + "'", str71, "{}");
        org.junit.Assert.assertNotNull(objEntrySet73);
        org.junit.Assert.assertNull(obj77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(obj83);
        org.junit.Assert.assertNotNull(objEnumeration84);
        org.junit.Assert.assertNotNull(objEnumeration85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNull(obj88);
    }

    @Test
    public void test01463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01463");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj7 = properties0.clone();
        java.util.Set<java.lang.String> strSet8 = properties0.stringPropertyNames();
        java.util.Properties properties9 = new java.util.Properties();
        java.lang.String str10 = properties9.toString();
        java.lang.Object obj12 = properties9.remove((java.lang.Object) (short) 100);
        java.lang.Object obj15 = properties9.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean17 = properties9.containsKey((java.lang.Object) 0L);
        java.lang.Object obj20 = properties9.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.String str22 = properties21.toString();
        java.lang.Object obj24 = properties21.remove((java.lang.Object) (short) 100);
        java.lang.Object obj27 = properties21.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj28 = properties21.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration29 = properties21.elements();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties21);
        java.util.Properties properties31 = new java.util.Properties();
        java.lang.String str32 = properties31.toString();
        java.lang.Object obj34 = properties31.remove((java.lang.Object) (short) 100);
        java.lang.Object obj37 = properties31.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean39 = properties31.containsKey((java.lang.Object) 0L);
        java.lang.Object obj42 = properties31.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties43 = new java.util.Properties();
        java.lang.String str44 = properties43.toString();
        java.lang.Object obj46 = properties43.remove((java.lang.Object) (short) 100);
        java.lang.Object obj49 = properties43.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj50 = properties43.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration51 = properties43.elements();
        properties31.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties43);
        java.lang.Object obj53 = properties0.putIfAbsent((java.lang.Object) properties9, (java.lang.Object) properties43);
        java.util.Properties properties54 = new java.util.Properties();
        java.lang.String str55 = properties54.toString();
        java.lang.Object obj57 = properties54.remove((java.lang.Object) (short) 100);
        java.lang.Object obj60 = properties54.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean62 = properties54.containsKey((java.lang.Object) 0L);
        java.lang.Object obj65 = properties54.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj68 = properties54.setProperty("", "{-1.0=100}");
        java.util.Enumeration<java.lang.Object> objEnumeration69 = properties54.keys();
        boolean boolean70 = properties43.contains((java.lang.Object) properties54);
        java.util.Set<java.lang.String> strSet71 = properties54.stringPropertyNames();
        properties54.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery73 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery73.retryInterval = (short) 100;
        recovery73.forgetOrphanedLogEntriesDelay = 'a';
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties78 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties78.setAllowSubTransactions(true);
        atomikosProperties78.maxActives = (short) -1;
        atomikosProperties78.setService("tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties85 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties85.setAllowSubTransactions(true);
        boolean boolean88 = atomikosProperties85.enableLogging;
        boolean boolean89 = atomikosProperties85.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel90 = atomikosProperties85.consoleLogLevel;
        atomikosProperties78.setConsoleLogLevel(atomikosLoggingLevel90);
        atomikosProperties78.setThreadedTwoPhaseCommit(true);
        java.lang.Object obj94 = properties54.put((java.lang.Object) recovery73, (java.lang.Object) atomikosProperties78);
        java.lang.String str95 = atomikosProperties78.logBaseName;
        java.lang.String str96 = atomikosProperties78.service;
        atomikosProperties78.outputDir = "hi!";
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{1.0=-1}");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "{}" + "'", str10, "{}");
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{}" + "'", str22, "{}");
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "{}" + "'", str32, "{}");
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "{}" + "'", str44, "{}");
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertEquals(obj50.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj50), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj50), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration51);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "{}" + "'", str55, "{}");
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertNull(obj68);
        org.junit.Assert.assertNotNull(objEnumeration69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(strSet71);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel90 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel90.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj94);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "tmlog" + "'", str95, "tmlog");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "tm.out" + "'", str96, "tm.out");
    }

    @Test
    public void test01464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01464");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel7 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel7);
        boolean boolean9 = atomikosProperties0.enableLogging;
        int int10 = atomikosProperties0.getConsoleFileLimit();
        atomikosProperties0.serialJtaTransactions = false;
        java.lang.String str13 = atomikosProperties0.logBaseName;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel14 = atomikosProperties0.getConsoleLogLevel();
        java.lang.String str15 = atomikosProperties0.getService();
        java.lang.String str16 = atomikosProperties0.logBaseDir;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNull(atomikosLoggingLevel14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{-1.0=100}" + "'", str15, "{-1.0=100}");
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test01465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01465");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        boolean boolean7 = atomikosProperties0.isAllowSubTransactions();
        int int8 = atomikosProperties0.getConsoleFileLimit();
        long long9 = atomikosProperties0.getMaxTimeout();
        boolean boolean10 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.setMaxTimeout((long) 1);
        long long13 = atomikosProperties0.getMaxTimeout();
        int int14 = atomikosProperties0.getMaxActives();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 300000L + "'", long9 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 50 + "'", int14 == 50);
    }

    @Test
    public void test01466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01466");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setEnableLogging(true);
        atomikosProperties0.consoleFileCount = 0;
        int int5 = atomikosProperties0.getMaxActives();
        java.lang.String str6 = atomikosProperties0.getLogBaseDir();
        java.lang.String str7 = atomikosProperties0.service;
        boolean boolean8 = atomikosProperties0.allowSubTransactions;
        long long9 = atomikosProperties0.checkpointInterval;
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 50 + "'", int5 == 50);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 500L + "'", long9 == 500L);
    }

    @Test
    public void test01467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01467");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties();
        java.lang.String str2 = properties1.toString();
        java.lang.Object obj4 = properties1.remove((java.lang.Object) (short) 100);
        java.lang.Object obj7 = properties1.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        int int8 = properties1.size();
        java.util.Properties properties9 = new java.util.Properties();
        java.lang.Object obj11 = properties9.remove((java.lang.Object) (-1.0d));
        boolean boolean12 = properties9.isEmpty();
        java.lang.Object obj15 = properties9.setProperty("hi!", "{}");
        boolean boolean16 = properties0.remove((java.lang.Object) int8, (java.lang.Object) properties9);
        java.util.Properties properties17 = new java.util.Properties();
        java.lang.String str18 = properties17.toString();
        java.lang.Object obj20 = properties17.remove((java.lang.Object) (short) 100);
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.String str22 = properties21.toString();
        boolean boolean23 = properties21.isEmpty();
        java.lang.Object obj26 = properties21.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties21.elements();
        boolean boolean28 = properties17.containsKey((java.lang.Object) properties21);
        boolean boolean29 = properties9.contains((java.lang.Object) boolean28);
        java.util.Set<java.lang.String> strSet30 = properties9.stringPropertyNames();
        int int31 = properties9.size();
        java.io.InputStream inputStream32 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties9.loadFromXML(inputStream32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{}" + "'", str2, "{}");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "{}" + "'", str18, "{}");
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{}" + "'", str22, "{}");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
    }

    @Test
    public void test01468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01468");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getLogBaseName();
        atomikosProperties0.setForceShutdownOnVmExit(false);
        int int7 = atomikosProperties0.getConsoleFileCount();
        long long8 = atomikosProperties0.maxTimeout;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tmlog" + "'", str4, "tmlog");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 300000L + "'", long8 == 300000L);
    }

    @Test
    public void test01469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01469");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        java.util.Properties properties7 = new java.util.Properties();
        java.lang.String str8 = properties7.toString();
        properties7.clear();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet10 = properties7.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties12 = atomikosProperties11.asProperties();
        atomikosProperties11.service = "{-1.0=100}";
        long long15 = atomikosProperties11.getDefaultJtaTimeout();
        atomikosProperties11.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties11.setMaxActives(100);
        java.lang.String str20 = atomikosProperties11.logBaseDir;
        atomikosProperties11.consoleFileCount = (short) 0;
        atomikosProperties11.defaultJtaTimeout = 10000L;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel25 = atomikosProperties11.consoleLogLevel;
        java.lang.Object obj26 = properties0.putIfAbsent((java.lang.Object) properties7, (java.lang.Object) atomikosLoggingLevel25);
        java.lang.String str27 = properties7.toString();
        int int28 = properties7.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties30 = atomikosProperties29.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties32 = atomikosProperties31.asProperties();
        atomikosProperties31.service = "{-1.0=100}";
        long long35 = atomikosProperties31.getDefaultJtaTimeout();
        atomikosProperties31.consoleFileLimit = '#';
        java.lang.Object obj38 = properties30.get((java.lang.Object) atomikosProperties31);
        boolean boolean39 = atomikosProperties31.forceShutdownOnVmExit;
        atomikosProperties31.setOutputDir("");
        boolean boolean42 = atomikosProperties31.forceShutdownOnVmExit;
        boolean boolean43 = atomikosProperties31.isThreadedTwoPhaseCommit();
        atomikosProperties31.setForceShutdownOnVmExit(false);
        java.lang.Object obj46 = properties7.remove((java.lang.Object) false);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{}" + "'", str8, "{}");
        org.junit.Assert.assertNotNull(objEntrySet10);
        org.junit.Assert.assertNotNull(properties12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10000L + "'", long15 == 10000L);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel25 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel25.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "{}" + "'", str27, "{}");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(properties30);
        org.junit.Assert.assertNotNull(properties32);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 10000L + "'", long35 == 10000L);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(obj46);
    }

    @Test
    public void test01470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01470");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel5);
        int int7 = atomikosProperties0.maxActives;
        atomikosProperties0.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.getRecovery();
        atomikosProperties0.forceShutdownOnVmExit = false;
        java.util.Properties properties13 = atomikosProperties0.asProperties();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet14 = properties13.entrySet();
        java.io.InputStream inputStream15 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties13.load(inputStream15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertNotNull(properties13);
        org.junit.Assert.assertNotNull(objEntrySet14);
    }

    @Test
    public void test01471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01471");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj14 = properties0.setProperty("", "{-1.0=100}");
        java.lang.String str15 = properties0.toString();
        java.util.Set<java.lang.String> strSet16 = properties0.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties18 = atomikosProperties17.asProperties();
        atomikosProperties17.service = "{-1.0=100}";
        long long21 = atomikosProperties17.getDefaultJtaTimeout();
        atomikosProperties17.enableLogging = false;
        atomikosProperties17.setMaxTimeout((long) (byte) 0);
        atomikosProperties17.setAllowSubTransactions(true);
        java.util.Properties properties28 = new java.util.Properties();
        java.lang.Object obj30 = properties28.remove((java.lang.Object) (-1.0d));
        boolean boolean31 = properties28.isEmpty();
        java.util.Collection<java.lang.Object> objCollection32 = properties28.values();
        java.lang.Object obj33 = properties0.put((java.lang.Object) true, (java.lang.Object) properties28);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties34 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties35 = atomikosProperties34.asProperties();
        atomikosProperties34.service = "{-1.0=100}";
        long long38 = atomikosProperties34.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel39 = null;
        atomikosProperties34.setConsoleLogLevel(atomikosLoggingLevel39);
        int int41 = atomikosProperties34.maxActives;
        java.util.Properties properties42 = new java.util.Properties();
        java.lang.Object obj44 = properties42.remove((java.lang.Object) (-1.0d));
        java.util.Enumeration<?> wildcardEnumeration45 = properties42.propertyNames();
        java.util.Set<java.lang.Object> objSet46 = properties42.keySet();
        java.util.Set<java.lang.String> strSet47 = properties42.stringPropertyNames();
        java.util.Properties properties49 = new java.util.Properties();
        atomikosProperties34.set(properties42, "tm.out", (java.lang.Object) properties49);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties51 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean52 = atomikosProperties51.isSerialJtaTransactions();
        atomikosProperties51.logBaseName = "{-1.0=100}";
        int int55 = atomikosProperties51.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery56 = atomikosProperties51.getRecovery();
        java.lang.String str57 = atomikosProperties51.getOutputDir();
        int int58 = atomikosProperties51.getMaxActives();
        boolean boolean59 = atomikosProperties51.allowSubTransactions;
        int int60 = atomikosProperties51.maxActives;
        java.lang.Object obj61 = properties0.putIfAbsent((java.lang.Object) "tm.out", (java.lang.Object) atomikosProperties51);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties62 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean63 = atomikosProperties62.isSerialJtaTransactions();
        atomikosProperties62.logBaseName = "{-1.0=100}";
        int int66 = atomikosProperties62.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery67 = atomikosProperties62.getRecovery();
        atomikosProperties62.setConsoleFileCount((int) (byte) 100);
        atomikosProperties62.setAllowSubTransactions(true);
        atomikosProperties62.setService("tm.out");
        int int74 = atomikosProperties62.consoleFileLimit;
        atomikosProperties62.setDefaultJtaTimeout((long) 'a');
        boolean boolean77 = atomikosProperties62.enableLogging;
        java.lang.String str78 = atomikosProperties62.consoleFileName;
        java.lang.String str79 = atomikosProperties62.transactionManagerUniqueName;
        boolean boolean80 = atomikosProperties62.isSerialJtaTransactions();
        java.lang.String str81 = atomikosProperties62.consoleFileName;
        java.lang.Object obj82 = properties0.remove((java.lang.Object) atomikosProperties62);
        java.io.OutputStream outputStream83 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.save(outputStream83, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=32, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service={-1.0=100}, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{={-1.0=100}, -1.0=100}" + "'", str15, "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10000L + "'", long21 == 10000L);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objCollection32);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNotNull(properties35);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 10000L + "'", long38 == 10000L);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 50 + "'", int41 == 50);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNotNull(wildcardEnumeration45);
        org.junit.Assert.assertNotNull(objSet46);
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 50 + "'", int55 == 50);
        org.junit.Assert.assertNotNull(recovery56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 50 + "'", int58 == 50);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 50 + "'", int60 == 50);
        org.junit.Assert.assertNull(obj61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 50 + "'", int66 == 50);
        org.junit.Assert.assertNotNull(recovery67);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "tm.out" + "'", str78, "tm.out");
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "tm.out" + "'", str81, "tm.out");
        org.junit.Assert.assertNull(obj82);
    }

    @Test
    public void test01472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01472");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setEnableLogging(true);
        atomikosProperties0.consoleFileCount = 0;
        int int5 = atomikosProperties0.getMaxActives();
        java.lang.String str6 = atomikosProperties0.getLogBaseDir();
        java.lang.String str7 = atomikosProperties0.service;
        boolean boolean8 = atomikosProperties0.allowSubTransactions;
        atomikosProperties0.setForceShutdownOnVmExit(true);
        atomikosProperties0.setMaxTimeout((long) (byte) 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 50 + "'", int5 == 50);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test01473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01473");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties();
        java.lang.String str2 = properties1.toString();
        java.lang.Object obj4 = properties1.remove((java.lang.Object) (short) 100);
        java.lang.Object obj7 = properties1.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        int int8 = properties1.size();
        java.util.Properties properties9 = new java.util.Properties();
        java.lang.Object obj11 = properties9.remove((java.lang.Object) (-1.0d));
        boolean boolean12 = properties9.isEmpty();
        java.lang.Object obj15 = properties9.setProperty("hi!", "{}");
        boolean boolean16 = properties0.remove((java.lang.Object) int8, (java.lang.Object) properties9);
        java.util.Properties properties17 = new java.util.Properties();
        java.lang.String str18 = properties17.toString();
        java.lang.Object obj20 = properties17.remove((java.lang.Object) (short) 100);
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.String str22 = properties21.toString();
        boolean boolean23 = properties21.isEmpty();
        java.lang.Object obj26 = properties21.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties21.elements();
        boolean boolean28 = properties17.containsKey((java.lang.Object) properties21);
        boolean boolean29 = properties9.contains((java.lang.Object) boolean28);
        java.util.Set<java.lang.String> strSet30 = properties9.stringPropertyNames();
        int int31 = properties9.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties33 = atomikosProperties32.asProperties();
        atomikosProperties32.service = "{-1.0=100}";
        long long36 = atomikosProperties32.getDefaultJtaTimeout();
        atomikosProperties32.serialJtaTransactions = true;
        atomikosProperties32.maxActives = ' ';
        int int41 = atomikosProperties32.getConsoleFileCount();
        int int42 = atomikosProperties32.consoleFileLimit;
        java.util.Properties properties43 = atomikosProperties32.asProperties();
        java.lang.Object obj44 = properties9.get((java.lang.Object) atomikosProperties32);
        atomikosProperties32.setDefaultJtaTimeout((long) (byte) 1);
        atomikosProperties32.setConsoleFileName("{}");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{}" + "'", str2, "{}");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "{}" + "'", str18, "{}");
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{}" + "'", str22, "{}");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(properties33);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 10000L + "'", long36 == 10000L);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(properties43);
        org.junit.Assert.assertNull(obj44);
    }

    @Test
    public void test01474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01474");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getLogBaseName();
        long long5 = atomikosProperties0.defaultJtaTimeout;
        long long6 = atomikosProperties0.getMaxTimeout();
        boolean boolean7 = atomikosProperties0.forceShutdownOnVmExit;
        boolean boolean8 = atomikosProperties0.isSerialJtaTransactions();
        java.lang.String str9 = atomikosProperties0.logBaseName;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tmlog" + "'", str4, "tmlog");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 10000L + "'", long5 == 10000L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 300000L + "'", long6 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tmlog" + "'", str9, "tmlog");
    }

    @Test
    public void test01475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01475");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties12 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration13 = properties0.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties15 = atomikosProperties14.asProperties();
        atomikosProperties14.service = "{-1.0=100}";
        long long18 = atomikosProperties14.getDefaultJtaTimeout();
        long long19 = atomikosProperties14.getMaxTimeout();
        java.lang.String str20 = atomikosProperties14.outputDir;
        atomikosProperties14.consoleFileName = "tm.out";
        long long23 = atomikosProperties14.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel24 = atomikosProperties14.consoleLogLevel;
        java.util.Properties properties25 = new java.util.Properties();
        java.lang.String str26 = properties25.toString();
        java.lang.Object obj28 = properties25.remove((java.lang.Object) (short) 100);
        java.lang.Object obj31 = properties25.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean33 = properties25.containsKey((java.lang.Object) 0L);
        java.lang.String str34 = properties25.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties36 = atomikosProperties35.asProperties();
        atomikosProperties35.service = "{-1.0=100}";
        long long39 = atomikosProperties35.getDefaultJtaTimeout();
        atomikosProperties35.setMaxActives(0);
        atomikosProperties35.maxActives = 'a';
        boolean boolean44 = atomikosProperties35.isThreadedTwoPhaseCommit();
        boolean boolean45 = atomikosProperties35.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel46 = atomikosProperties35.consoleLogLevel;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties47 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties48 = atomikosProperties47.asProperties();
        atomikosProperties47.service = "{-1.0=100}";
        long long51 = atomikosProperties47.getDefaultJtaTimeout();
        atomikosProperties47.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties47.setMaxActives(100);
        java.lang.String str56 = atomikosProperties47.logBaseDir;
        java.lang.String str57 = atomikosProperties47.outputDir;
        java.lang.Object obj58 = properties25.replace((java.lang.Object) atomikosLoggingLevel46, (java.lang.Object) atomikosProperties47);
        java.lang.Object obj59 = properties0.replace((java.lang.Object) atomikosProperties14, (java.lang.Object) atomikosLoggingLevel46);
        java.lang.String str62 = properties0.getProperty("{}", "{tmlog=hi!, com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNotNull(objEnumeration13);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10000L + "'", long18 == 10000L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 300000L + "'", long19 == 300000L);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 500L + "'", long23 == 500L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel24 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel24.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "{}" + "'", str26, "{}");
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "{-1.0=100}" + "'", str34, "{-1.0=100}");
        org.junit.Assert.assertNotNull(properties36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 10000L + "'", long39 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel46 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel46.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(properties48);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 10000L + "'", long51 == 10000L);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "{={-1.0=100}, -1.0=100}" + "'", str57, "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "{tmlog=hi!, com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}" + "'", str62, "{tmlog=hi!, com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}");
    }

    @Test
    public void test01476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01476");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.outputDir = "{={-1.0=100}, -1.0=100}";
        long long7 = atomikosProperties0.getCheckpointInterval();
        boolean boolean8 = atomikosProperties0.isThreadedTwoPhaseCommit();
        java.lang.String str9 = atomikosProperties0.service;
        int int10 = atomikosProperties0.consoleFileCount;
        atomikosProperties0.logBaseName = "tm.out";
        java.lang.String str13 = atomikosProperties0.getService();
        java.lang.String str14 = atomikosProperties0.logBaseName;
        java.lang.String str15 = atomikosProperties0.getTransactionManagerUniqueName();
        boolean boolean16 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.setCheckpointInterval((long) (byte) 1);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{-1.0=100}" + "'", str9, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{-1.0=100}" + "'", str13, "{-1.0=100}");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "tm.out" + "'", str14, "tm.out");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test01477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01477");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean5 = atomikosProperties4.isThreadedTwoPhaseCommit();
        long long6 = atomikosProperties4.getCheckpointInterval();
        boolean boolean7 = atomikosProperties4.serialJtaTransactions;
        boolean boolean8 = properties0.contains((java.lang.Object) boolean7);
        java.lang.String str11 = properties0.getProperty("", "");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test01478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01478");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileName = "hi!";
        atomikosProperties0.setCheckpointInterval((long) 5);
        atomikosProperties0.setConsoleFileCount(0);
        atomikosProperties0.setService("{-1.0=100}");
        atomikosProperties0.setLogBaseDir("{-1.0=100}");
        boolean boolean15 = atomikosProperties0.isAllowSubTransactions();
        java.lang.String str16 = atomikosProperties0.getTransactionManagerUniqueName();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test01479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01479");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj7 = properties0.clone();
        java.util.Set<java.lang.String> strSet8 = properties0.stringPropertyNames();
        java.util.Properties properties9 = new java.util.Properties();
        java.lang.String str10 = properties9.toString();
        java.lang.Object obj12 = properties9.remove((java.lang.Object) (short) 100);
        java.lang.Object obj15 = properties9.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean17 = properties9.containsKey((java.lang.Object) 0L);
        java.lang.Object obj20 = properties9.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.String str22 = properties21.toString();
        java.lang.Object obj24 = properties21.remove((java.lang.Object) (short) 100);
        java.lang.Object obj27 = properties21.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj28 = properties21.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration29 = properties21.elements();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties21);
        java.util.Properties properties31 = new java.util.Properties();
        java.lang.String str32 = properties31.toString();
        java.lang.Object obj34 = properties31.remove((java.lang.Object) (short) 100);
        java.lang.Object obj37 = properties31.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean39 = properties31.containsKey((java.lang.Object) 0L);
        java.lang.Object obj42 = properties31.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties43 = new java.util.Properties();
        java.lang.String str44 = properties43.toString();
        java.lang.Object obj46 = properties43.remove((java.lang.Object) (short) 100);
        java.lang.Object obj49 = properties43.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj50 = properties43.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration51 = properties43.elements();
        properties31.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties43);
        java.lang.Object obj53 = properties0.putIfAbsent((java.lang.Object) properties9, (java.lang.Object) properties43);
        java.util.Properties properties54 = new java.util.Properties(properties0);
        java.io.OutputStream outputStream55 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.storeToXML(outputStream55, "{com.atomikos.icatch.={}, 100=100}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{1.0=-1}");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "{}" + "'", str10, "{}");
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{}" + "'", str22, "{}");
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "{}" + "'", str32, "{}");
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "{}" + "'", str44, "{}");
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertEquals(obj50.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj50), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj50), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration51);
        org.junit.Assert.assertNull(obj53);
    }

    @Test
    public void test01480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01480");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        boolean boolean3 = properties0.containsValue((java.lang.Object) (-1L));
        java.lang.Object obj5 = properties0.get((java.lang.Object) 97L);
        properties0.clear();
        java.lang.String str8 = properties0.getProperty("{1.0=-1}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties10 = atomikosProperties9.asProperties();
        atomikosProperties9.service = "{-1.0=100}";
        long long13 = atomikosProperties9.getDefaultJtaTimeout();
        atomikosProperties9.setThreadedTwoPhaseCommit(true);
        boolean boolean16 = atomikosProperties9.isAllowSubTransactions();
        boolean boolean17 = atomikosProperties9.isEnableLogging();
        int int18 = atomikosProperties9.getConsoleFileLimit();
        boolean boolean19 = properties0.containsKey((java.lang.Object) atomikosProperties9);
        java.io.OutputStream outputStream20 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.storeToXML(outputStream20, "{{={-1.0=100}, -1.0=100}=}", "{={-1.0=100}, -1.0=100}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10000L + "'", long13 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test01481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01481");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.getRecovery();
        atomikosProperties0.setConsoleFileCount((int) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel8 = null;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel8;
        java.lang.String str10 = atomikosProperties0.logBaseDir;
        atomikosProperties0.checkpointInterval = (byte) 0;
        java.lang.String str13 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.serialJtaTransactions = true;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel16 = atomikosProperties0.getConsoleLogLevel();
        java.lang.String str17 = atomikosProperties0.consoleFileName;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel18 = null;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel18);
        atomikosProperties0.checkpointInterval = ' ';
        atomikosProperties0.defaultJtaTimeout = (short) 1;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(atomikosLoggingLevel16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tm.out" + "'", str17, "tm.out");
    }

    @Test
    public void test01482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01482");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        boolean boolean7 = atomikosProperties0.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery8 = atomikosProperties0.recovery;
        boolean boolean9 = atomikosProperties0.threadedTwoPhaseCommit;
        atomikosProperties0.service = "{-1.0=100}";
        atomikosProperties0.setThreadedTwoPhaseCommit(false);
        int int14 = atomikosProperties0.getMaxActives();
        atomikosProperties0.setForceShutdownOnVmExit(true);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(recovery8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 50 + "'", int14 == 50);
    }

    @Test
    public void test01483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01483");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.util.Properties properties3 = new java.util.Properties();
        java.lang.String str4 = properties3.toString();
        java.lang.Object obj6 = properties3.remove((java.lang.Object) (short) 100);
        java.lang.Object obj9 = properties3.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean11 = properties3.containsKey((java.lang.Object) 0L);
        java.lang.Object obj14 = properties3.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj17 = properties3.setProperty("", "{-1.0=100}");
        java.util.Enumeration<java.lang.Object> objEnumeration18 = properties3.keys();
        java.util.Properties properties19 = new java.util.Properties();
        java.lang.String str20 = properties19.toString();
        boolean boolean21 = properties19.isEmpty();
        java.lang.Object obj24 = properties19.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration25 = properties19.elements();
        java.lang.Object obj26 = properties2.replace((java.lang.Object) objEnumeration18, (java.lang.Object) properties19);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties19.elements();
        java.util.Properties properties28 = new java.util.Properties(properties19);
        java.util.Properties properties29 = new java.util.Properties();
        java.lang.String str30 = properties29.toString();
        java.lang.Object obj32 = properties29.remove((java.lang.Object) (short) 100);
        java.lang.Object obj35 = properties29.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean37 = properties29.containsKey((java.lang.Object) 0L);
        java.lang.Object obj40 = properties29.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties41 = new java.util.Properties();
        java.lang.String str42 = properties41.toString();
        java.lang.Object obj44 = properties41.remove((java.lang.Object) (short) 100);
        java.lang.Object obj47 = properties41.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj48 = properties41.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration49 = properties41.elements();
        properties29.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties41);
        java.lang.Object obj51 = properties41.clone();
        properties41.clear();
        java.util.Enumeration<?> wildcardEnumeration53 = properties41.propertyNames();
        boolean boolean54 = properties19.contains((java.lang.Object) wildcardEnumeration53);
        java.io.OutputStream outputStream55 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties19.save(outputStream55, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{}" + "'", str4, "{}");
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(objEnumeration18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{}" + "'", str20, "{}");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(objEnumeration25);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "{}" + "'", str30, "{}");
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "{}" + "'", str42, "{}");
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertEquals(obj48.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj48), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj48), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration49);
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertEquals(obj51.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj51), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj51), "{1.0=-1}");
        org.junit.Assert.assertNotNull(wildcardEnumeration53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test01484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01484");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        boolean boolean7 = atomikosProperties0.isAllowSubTransactions();
        boolean boolean8 = atomikosProperties0.isEnableLogging();
        java.lang.String str9 = atomikosProperties0.logBaseDir;
        atomikosProperties0.consoleFileName = "{={-1.0=100}, -1.0=100}";
        int int12 = atomikosProperties0.getConsoleFileCount();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test01485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01485");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        boolean boolean5 = atomikosProperties0.isSerialJtaTransactions();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel6 = atomikosProperties0.getConsoleLogLevel();
        boolean boolean7 = atomikosProperties0.isSerialJtaTransactions();
        boolean boolean8 = atomikosProperties0.isEnableLogging();
        java.lang.String str9 = atomikosProperties0.getLogBaseDir();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel6 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel6.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test01486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01486");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setAllowSubTransactions(true);
        atomikosProperties0.maxActives = (short) -1;
        atomikosProperties0.setCheckpointInterval((long) 0);
        atomikosProperties0.setMaxTimeout(100L);
        java.lang.String str9 = atomikosProperties0.logBaseName;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel10 = atomikosProperties0.getConsoleLogLevel();
        boolean boolean11 = atomikosProperties0.serialJtaTransactions;
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tmlog" + "'", str9, "tmlog");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel10 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel10.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test01487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01487");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.retryInterval = (short) 100;
        recovery0.forgetOrphanedLogEntriesDelay = 'a';
        long long5 = recovery0.retryInterval;
        recovery0.forgetOrphanedLogEntriesDelay = 0L;
        int int8 = recovery0.getMaxRetries();
        recovery0.maxRetries = 100;
        recovery0.setMaxRetries(1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 100L + "'", long5 == 100L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 5 + "'", int8 == 5);
    }

    @Test
    public void test01488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01488");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        java.util.Properties properties2 = new java.util.Properties();
        java.lang.Object obj4 = properties2.remove((java.lang.Object) (-1.0d));
        boolean boolean5 = properties2.isEmpty();
        int int6 = properties2.size();
        java.lang.String str8 = properties2.getProperty("{}");
        java.lang.Object obj9 = properties1.remove((java.lang.Object) properties2);
        java.util.Properties properties10 = new java.util.Properties();
        java.util.Properties properties11 = new java.util.Properties();
        java.lang.String str12 = properties11.toString();
        boolean boolean13 = properties11.isEmpty();
        java.util.Properties properties14 = new java.util.Properties();
        java.lang.String str15 = properties14.toString();
        java.lang.Object obj17 = properties14.remove((java.lang.Object) (short) 100);
        java.lang.Object obj20 = properties14.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean22 = properties14.containsKey((java.lang.Object) 0L);
        boolean boolean23 = properties11.containsValue((java.lang.Object) 0L);
        boolean boolean26 = properties10.replace((java.lang.Object) 0L, (java.lang.Object) 0.0f, (java.lang.Object) 10.0d);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties10.elements();
        java.lang.String str28 = properties10.toString();
        java.util.Enumeration<java.lang.Object> objEnumeration29 = properties10.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties31 = atomikosProperties30.asProperties();
        boolean boolean32 = properties1.remove((java.lang.Object) properties10, (java.lang.Object) properties31);
        java.util.Properties properties33 = new java.util.Properties();
        java.lang.Object obj35 = properties33.remove((java.lang.Object) (-1.0d));
        boolean boolean37 = properties33.contains((java.lang.Object) "{-1.0=100}");
        java.util.Enumeration<java.lang.Object> objEnumeration38 = properties33.keys();
        java.util.Properties properties39 = new java.util.Properties(properties33);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties41 = atomikosProperties40.asProperties();
        atomikosProperties40.service = "{-1.0=100}";
        java.lang.String str44 = atomikosProperties40.getTransactionManagerUniqueName();
        atomikosProperties40.consoleFileName = "hi!";
        atomikosProperties40.serialJtaTransactions = true;
        atomikosProperties40.outputDir = "tm.out";
        boolean boolean51 = atomikosProperties40.isAllowSubTransactions();
        atomikosProperties40.consoleFileName = "";
        java.lang.Object obj54 = properties31.replace((java.lang.Object) properties39, (java.lang.Object) "");
        java.util.Set<java.lang.Object> objSet55 = properties39.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties56 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties57 = atomikosProperties56.asProperties();
        atomikosProperties56.service = "{-1.0=100}";
        long long60 = atomikosProperties56.getDefaultJtaTimeout();
        atomikosProperties56.consoleFileLimit = '#';
        int int63 = atomikosProperties56.getConsoleFileCount();
        atomikosProperties56.defaultJtaTimeout = ' ';
        java.lang.Object obj66 = properties39.get((java.lang.Object) ' ');
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties67 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties68 = atomikosProperties67.asProperties();
        atomikosProperties67.service = "{-1.0=100}";
        long long71 = atomikosProperties67.getDefaultJtaTimeout();
        atomikosProperties67.serialJtaTransactions = true;
        long long74 = atomikosProperties67.getDefaultJtaTimeout();
        long long75 = atomikosProperties67.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery76 = atomikosProperties67.getRecovery();
        java.lang.String str77 = atomikosProperties67.outputDir;
        int int78 = atomikosProperties67.consoleFileCount;
        atomikosProperties67.setAllowSubTransactions(false);
        java.lang.String str81 = atomikosProperties67.service;
        long long82 = atomikosProperties67.getMaxTimeout();
        boolean boolean83 = properties39.contains((java.lang.Object) atomikosProperties67);
        long long84 = atomikosProperties67.getDefaultJtaTimeout();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "{}" + "'", str12, "{}");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{}" + "'", str15, "{}");
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "{}" + "'", str28, "{}");
        org.junit.Assert.assertNotNull(objEnumeration29);
        org.junit.Assert.assertNotNull(properties31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(objEnumeration38);
        org.junit.Assert.assertNotNull(properties41);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertNotNull(objSet55);
        org.junit.Assert.assertNotNull(properties57);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 10000L + "'", long60 == 10000L);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertNotNull(properties68);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 10000L + "'", long71 == 10000L);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 10000L + "'", long74 == 10000L);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 500L + "'", long75 == 500L);
        org.junit.Assert.assertNotNull(recovery76);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "{-1.0=100}" + "'", str81, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 300000L + "'", long82 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 10000L + "'", long84 == 10000L);
    }

    @Test
    public void test01489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01489");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.util.Properties properties3 = new java.util.Properties();
        java.lang.String str4 = properties3.toString();
        java.lang.Object obj6 = properties3.remove((java.lang.Object) (short) 100);
        java.lang.Object obj9 = properties3.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean11 = properties3.containsKey((java.lang.Object) 0L);
        java.lang.Object obj14 = properties3.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj17 = properties3.setProperty("", "{-1.0=100}");
        java.util.Enumeration<java.lang.Object> objEnumeration18 = properties3.keys();
        java.util.Properties properties19 = new java.util.Properties();
        java.lang.String str20 = properties19.toString();
        boolean boolean21 = properties19.isEmpty();
        java.lang.Object obj24 = properties19.putIfAbsent((java.lang.Object) (short) 100, (java.lang.Object) (short) 100);
        java.util.Enumeration<java.lang.Object> objEnumeration25 = properties19.elements();
        java.lang.Object obj26 = properties2.replace((java.lang.Object) objEnumeration18, (java.lang.Object) properties19);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties19.elements();
        java.util.Properties properties28 = new java.util.Properties(properties19);
        java.util.Properties properties29 = new java.util.Properties();
        java.lang.String str30 = properties29.toString();
        java.lang.Object obj32 = properties29.remove((java.lang.Object) (short) 100);
        java.lang.Object obj35 = properties29.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean37 = properties29.containsKey((java.lang.Object) 0L);
        java.lang.Object obj40 = properties29.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.util.Properties properties41 = new java.util.Properties();
        java.lang.String str42 = properties41.toString();
        java.lang.Object obj44 = properties41.remove((java.lang.Object) (short) 100);
        java.lang.Object obj47 = properties41.put((java.lang.Object) 1.0f, (java.lang.Object) (-1L));
        java.lang.Object obj48 = properties41.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration49 = properties41.elements();
        properties29.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties41);
        java.lang.Object obj51 = properties41.clone();
        properties41.clear();
        java.util.Enumeration<?> wildcardEnumeration53 = properties41.propertyNames();
        boolean boolean54 = properties19.contains((java.lang.Object) wildcardEnumeration53);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties55 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties56 = atomikosProperties55.asProperties();
        atomikosProperties55.service = "{-1.0=100}";
        long long59 = atomikosProperties55.getDefaultJtaTimeout();
        atomikosProperties55.outputDir = "{={-1.0=100}, -1.0=100}";
        atomikosProperties55.setMaxActives(100);
        java.lang.String str64 = atomikosProperties55.logBaseDir;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties65 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean66 = atomikosProperties65.isSerialJtaTransactions();
        boolean boolean67 = atomikosProperties65.allowSubTransactions;
        java.lang.Object obj68 = properties19.getOrDefault((java.lang.Object) atomikosProperties55, (java.lang.Object) atomikosProperties65);
        boolean boolean69 = atomikosProperties65.threadedTwoPhaseCommit;
        java.lang.String str70 = atomikosProperties65.getTransactionManagerUniqueName();
        java.lang.String str71 = atomikosProperties65.outputDir;
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{}" + "'", str4, "{}");
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(objEnumeration18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{}" + "'", str20, "{}");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(objEnumeration25);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "{}" + "'", str30, "{}");
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "{}" + "'", str42, "{}");
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertEquals(obj48.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj48), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj48), "{1.0=-1}");
        org.junit.Assert.assertNotNull(objEnumeration49);
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertEquals(obj51.toString(), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj51), "{1.0=-1}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj51), "{1.0=-1}");
        org.junit.Assert.assertNotNull(wildcardEnumeration53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(properties56);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 10000L + "'", long59 == 10000L);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(obj68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNull(str71);
    }

    @Test
    public void test01490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01490");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery7 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery7.retryInterval = (short) 100;
        recovery7.delay = (-1L);
        long long12 = recovery7.delay;
        boolean boolean13 = properties0.equals((java.lang.Object) long12);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery14 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery14.retryInterval = (short) 100;
        recovery14.forgetOrphanedLogEntriesDelay = 'a';
        long long19 = recovery14.retryInterval;
        recovery14.forgetOrphanedLogEntriesDelay = 0L;
        long long22 = recovery14.getForgetOrphanedLogEntriesDelay();
        recovery14.setRetryInterval((long) 0);
        boolean boolean25 = properties0.contains((java.lang.Object) recovery14);
        boolean boolean26 = properties0.isEmpty();
        java.lang.String str27 = properties0.toString();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 100L + "'", long19 == 100L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "{-1.0=100}" + "'", str27, "{-1.0=100}");
    }

    @Test
    public void test01491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01491");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        boolean boolean7 = atomikosProperties0.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery8 = atomikosProperties0.recovery;
        boolean boolean9 = atomikosProperties0.threadedTwoPhaseCommit;
        atomikosProperties0.service = "{-1.0=100}";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        atomikosProperties0.setEnableLogging(false);
        java.lang.String str16 = atomikosProperties0.getLogBaseDir();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(recovery8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test01492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01492");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        boolean boolean7 = atomikosProperties0.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery8 = atomikosProperties0.recovery;
        atomikosProperties0.checkpointInterval = 'a';
        atomikosProperties0.serialJtaTransactions = true;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(recovery8);
    }

    @Test
    public void test01493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01493");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.consoleFileCount;
        int int5 = atomikosProperties0.getConsoleFileCount();
        java.lang.String str6 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setSerialJtaTransactions(false);
        atomikosProperties0.maxTimeout = 100;
        int int11 = atomikosProperties0.consoleFileLimit;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tm.out" + "'", str6, "tm.out");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
    }

    @Test
    public void test01494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01494");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseName = "{-1.0=100}";
        int int4 = atomikosProperties0.maxActives;
        atomikosProperties0.setAllowSubTransactions(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery7 = atomikosProperties0.getRecovery();
        atomikosProperties0.transactionManagerUniqueName = "{com.atomikos.icatch.{={-1.0=100}, -1.0=100}={}}";
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.getRecovery();
        recovery10.forgetOrphanedLogEntriesDelay = ' ';
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery7);
        org.junit.Assert.assertNotNull(recovery10);
    }

    @Test
    public void test01495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01495");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        long long7 = atomikosProperties0.getDefaultJtaTimeout();
        long long8 = atomikosProperties0.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery9 = atomikosProperties0.getRecovery();
        long long10 = recovery9.delay;
        recovery9.maxRetries = (-1);
        long long13 = recovery9.delay;
        long long14 = recovery9.delay;
        recovery9.setForgetOrphanedLogEntriesDelay(0L);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(recovery9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10000L + "'", long13 == 10000L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10000L + "'", long14 == 10000L);
    }

    @Test
    public void test01496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01496");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.String str1 = properties0.toString();
        java.lang.Object obj3 = properties0.remove((java.lang.Object) (short) 100);
        java.lang.Object obj6 = properties0.put((java.lang.Object) (-1.0d), (java.lang.Object) (byte) 100);
        boolean boolean8 = properties0.containsKey((java.lang.Object) 0L);
        java.lang.Object obj11 = properties0.replace((java.lang.Object) false, (java.lang.Object) ' ');
        java.lang.Object obj14 = properties0.setProperty("", "{-1.0=100}");
        java.lang.Object obj15 = properties0.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery16 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery16.retryInterval = (short) 100;
        recovery16.forgetOrphanedLogEntriesDelay = 'a';
        boolean boolean21 = properties0.equals((java.lang.Object) 'a');
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery22 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery22.retryInterval = (short) 100;
        recovery22.forgetOrphanedLogEntriesDelay = 'a';
        long long27 = recovery22.getDelay();
        int int28 = recovery22.maxRetries;
        int int29 = recovery22.maxRetries;
        long long30 = recovery22.getRetryInterval();
        java.util.Properties properties31 = new java.util.Properties();
        java.util.Enumeration<?> wildcardEnumeration32 = properties31.propertyNames();
        java.lang.Object obj33 = properties0.put((java.lang.Object) long30, (java.lang.Object) wildcardEnumeration32);
        java.util.Properties properties34 = new java.util.Properties(properties0);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet35 = properties34.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties37 = atomikosProperties36.asProperties();
        atomikosProperties36.service = "{-1.0=100}";
        long long40 = atomikosProperties36.getDefaultJtaTimeout();
        atomikosProperties36.setThreadedTwoPhaseCommit(true);
        boolean boolean43 = atomikosProperties36.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery44 = atomikosProperties36.recovery;
        atomikosProperties36.setLogBaseDir("");
        long long47 = atomikosProperties36.maxTimeout;
        atomikosProperties36.setService("{={-1.0=100}, -1.0=100}");
        atomikosProperties36.setCheckpointInterval((long) (short) 10);
        int int52 = atomikosProperties36.getConsoleFileLimit();
        boolean boolean53 = properties34.contains((java.lang.Object) int52);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}");
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(obj15);
// flaky:         org.junit.Assert.assertEquals(obj15.toString(), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "{={-1.0=100}, -1.0=100}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "{={-1.0=100}, -1.0=100}");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10000L + "'", long27 == 10000L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5 + "'", int28 == 5);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5 + "'", int29 == 5);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 100L + "'", long30 == 100L);
        org.junit.Assert.assertNotNull(wildcardEnumeration32);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNotNull(objEntrySet35);
        org.junit.Assert.assertNotNull(properties37);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 10000L + "'", long40 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(recovery44);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 300000L + "'", long47 == 300000L);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test01497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01497");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj3 = properties0.setProperty("{}", "{}");
        java.util.Enumeration<java.lang.Object> objEnumeration4 = properties0.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties0.elements();
        java.util.Properties properties6 = new java.util.Properties(properties0);
        java.util.Set<java.lang.String> strSet7 = properties6.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties8.setEnableLogging(true);
        atomikosProperties8.consoleFileCount = 0;
        int int13 = atomikosProperties8.getMaxActives();
        java.lang.String str14 = atomikosProperties8.getLogBaseDir();
        java.lang.String str15 = atomikosProperties8.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery16 = atomikosProperties8.getRecovery();
        boolean boolean17 = atomikosProperties8.serialJtaTransactions;
        atomikosProperties8.defaultJtaTimeout = 1;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties21 = atomikosProperties20.asProperties();
        atomikosProperties20.service = "{-1.0=100}";
        long long24 = atomikosProperties20.getDefaultJtaTimeout();
        atomikosProperties20.setThreadedTwoPhaseCommit(true);
        boolean boolean27 = atomikosProperties20.isEnableLogging();
        atomikosProperties20.defaultJtaTimeout = (byte) 10;
        java.lang.Object obj30 = properties6.getOrDefault((java.lang.Object) 1, (java.lang.Object) atomikosProperties20);
        java.lang.Class<?> wildcardClass31 = properties6.getClass();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNotNull(objEnumeration4);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 50 + "'", int13 == 50);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(recovery16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(properties21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 10000L + "'", long24 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test01498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01498");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "{-1.0=100}";
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        boolean boolean7 = atomikosProperties0.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery8 = atomikosProperties0.recovery;
        int int9 = atomikosProperties0.getConsoleFileLimit();
        atomikosProperties0.setConsoleFileCount(3);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(recovery8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
    }

    @Test
    public void test01499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01499");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setEnableLogging(true);
        atomikosProperties0.consoleFileCount = 0;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties6 = atomikosProperties5.asProperties();
        atomikosProperties5.service = "{-1.0=100}";
        long long9 = atomikosProperties5.getDefaultJtaTimeout();
        boolean boolean10 = atomikosProperties5.enableLogging;
        boolean boolean11 = atomikosProperties5.isForceShutdownOnVmExit();
        atomikosProperties5.consoleFileLimit = (byte) -1;
        java.lang.String str14 = atomikosProperties5.getService();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel15 = atomikosProperties5.consoleLogLevel;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel15;
        boolean boolean17 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.setMaxTimeout(97L);
        int int20 = atomikosProperties0.consoleFileLimit;
        org.junit.Assert.assertNotNull(properties6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10000L + "'", long9 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "{-1.0=100}" + "'", str14, "{-1.0=100}");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel15 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel15.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
    }

    @Test
    public void test01500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01500");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        atomikosProperties2.service = "{-1.0=100}";
        long long6 = atomikosProperties2.getDefaultJtaTimeout();
        atomikosProperties2.consoleFileLimit = '#';
        java.lang.Object obj9 = properties1.get((java.lang.Object) atomikosProperties2);
        boolean boolean10 = atomikosProperties2.forceShutdownOnVmExit;
        atomikosProperties2.setOutputDir("");
        long long13 = atomikosProperties2.defaultJtaTimeout;
        atomikosProperties2.setConsoleFileLimit((int) (short) -1);
        boolean boolean16 = atomikosProperties2.serialJtaTransactions;
        int int17 = atomikosProperties2.consoleFileCount;
        int int18 = atomikosProperties2.consoleFileLimit;
        atomikosProperties2.enableLogging = true;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10000L + "'", long13 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
    }
}
