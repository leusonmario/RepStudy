/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 08 21:04:43 GMT 2021
 */

package org.springframework.boot.jta.atomikos;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.Writer;
import java.util.Properties;
import org.apache.catalina.connector.Response;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.jcp.xml.dsig.internal.dom.XMLDSigRI;
import org.junit.runner.RunWith;
import org.springframework.boot.jta.atomikos.AtomikosLoggingLevel;
import org.springframework.boot.jta.atomikos.AtomikosProperties;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AtomikosProperties_ESTest extends AtomikosProperties_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertNotNull(atomikosProperties0);
      
      atomikosProperties0.setLogBaseName(atomikosProperties0.service);
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      
      atomikosProperties0.setThreadedTwoPhaseCommit(atomikosProperties0.serialJtaTransactions);
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      
      atomikosProperties0.setConsoleFileLimit(atomikosProperties0.consoleFileLimit);
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      
      atomikosProperties0.recovery.setDelay(atomikosProperties0.checkpointInterval);
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      
      atomikosProperties0.recovery.setForgetOrphanedLogEntriesDelay(atomikosProperties0.maxActives);
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      
      atomikosProperties0.setLogBaseDir(atomikosProperties0.logBaseName);
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertNotNull(atomikosProperties0);
      
      atomikosProperties0.setConsoleLogLevel(atomikosProperties0.consoleLogLevel);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      
      atomikosProperties0.setConsoleFileName(atomikosProperties0.consoleFileName);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      
      Properties properties0 = atomikosProperties0.asProperties();
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(properties0.isEmpty());
      assertEquals(18, properties0.size());
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertNotNull(properties0);
      
      String string0 = "max_timeout";
      Object object0 = new Object();
      assertNotNull(object0);
      
      atomikosProperties0.set(properties0, string0, object0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(properties0.isEmpty());
      assertEquals(18, properties0.size());
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      
      atomikosProperties0.setTransactionManagerUniqueName(atomikosProperties0.logBaseName);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals("tmlog", atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertNotNull(atomikosProperties0);
      
      atomikosProperties0.setSerialJtaTransactions(atomikosProperties0.threadedTwoPhaseCommit);
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      
      atomikosProperties0.recovery.setMaxRetries(atomikosProperties0.maxActives);
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      
      atomikosProperties0.setConsoleFileCount(atomikosProperties0.maxActives);
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(50, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertNotNull(atomikosProperties0);
      
      atomikosProperties0.setDefaultJtaTimeout(atomikosProperties0.recovery.forgetOrphanedLogEntriesDelay);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(86400000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(86400000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      
      atomikosProperties0.setAllowSubTransactions(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(86400000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(86400000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      
      atomikosProperties0.setMaxActives(atomikosProperties0.recovery.maxRetries);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(86400000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(5, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(5, atomikosProperties0.maxActives);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(86400000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      
      atomikosProperties0.setCheckpointInterval(atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(86400000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(5L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(5, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(5L, atomikosProperties0.checkpointInterval);
      assertEquals(5, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(86400000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      
      atomikosProperties0.setOutputDir(atomikosProperties0.transactionManagerUniqueName);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(86400000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(5L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(5, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(5L, atomikosProperties0.checkpointInterval);
      assertEquals(5, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(86400000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      
      atomikosProperties0.setMaxTimeout(atomikosProperties0.maxActives);
      assertEquals(5L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(86400000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(5L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(5, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals(5L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(5L, atomikosProperties0.checkpointInterval);
      assertEquals(5, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(86400000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      
      atomikosProperties0.setService(atomikosProperties0.consoleFileName);
      assertEquals(5L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(86400000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(5L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(5, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("tm.out", atomikosProperties0.getService());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals(5L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(5L, atomikosProperties0.checkpointInterval);
      assertEquals(5, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(86400000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      
      atomikosProperties0.setEnableLogging(atomikosProperties0.enableLogging);
      assertEquals(5L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(86400000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(5L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(5, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("tm.out", atomikosProperties0.getService());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals(5L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(5L, atomikosProperties0.checkpointInterval);
      assertEquals(5, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(86400000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      
      atomikosProperties0.recovery.setRetryInterval(atomikosProperties0.checkpointInterval);
      assertEquals(5L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(86400000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(5L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(5, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("tm.out", atomikosProperties0.getService());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals(5L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(5L, atomikosProperties0.checkpointInterval);
      assertEquals(5, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(86400000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertNotNull(atomikosProperties0);
      
      atomikosProperties0.setForceShutdownOnVmExit(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertNotNull(atomikosProperties0);
      
      AtomikosProperties.Recovery atomikosProperties_Recovery0 = atomikosProperties0.getRecovery();
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(5, atomikosProperties_Recovery0.maxRetries);
      assertEquals(86400000L, atomikosProperties_Recovery0.forgetOrphanedLogEntriesDelay);
      assertEquals(10000L, atomikosProperties_Recovery0.retryInterval);
      assertEquals(10000L, atomikosProperties_Recovery0.delay);
      assertNotNull(atomikosProperties_Recovery0);
      
      atomikosProperties0.maxActives = atomikosProperties_Recovery0.maxRetries;
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(5, atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      
      atomikosProperties_Recovery0.retryInterval = atomikosProperties0.defaultJtaTimeout;
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(5, atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      
      int int0 = (-36);
      atomikosProperties_Recovery0.setMaxRetries(int0);
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(5, atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals((-36), atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(5, atomikosProperties0.maxActives);
      assertEquals(86400000L, atomikosProperties_Recovery0.forgetOrphanedLogEntriesDelay);
      assertEquals(10000L, atomikosProperties_Recovery0.retryInterval);
      assertEquals((-36), atomikosProperties_Recovery0.maxRetries);
      assertEquals(10000L, atomikosProperties_Recovery0.delay);
      
      atomikosProperties_Recovery0.maxRetries = int0;
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(5, atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals((-36), atomikosProperties_Recovery0.getMaxRetries());
      
      long long0 = (-2738L);
      atomikosProperties_Recovery0.setRetryInterval(long0);
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(5, atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals((-2738L), atomikosProperties_Recovery0.getRetryInterval());
      assertEquals((-36), atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(5, atomikosProperties0.maxActives);
      assertEquals(86400000L, atomikosProperties_Recovery0.forgetOrphanedLogEntriesDelay);
      assertEquals((-2738L), atomikosProperties_Recovery0.retryInterval);
      assertEquals((-36), atomikosProperties_Recovery0.maxRetries);
      assertEquals(10000L, atomikosProperties_Recovery0.delay);
      
      int int1 = atomikosProperties0.getConsoleFileCount();
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(5, atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(5, atomikosProperties0.maxActives);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      atomikosProperties0.consoleFileLimit = int1;
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(1, atomikosProperties0.getConsoleFileLimit());
      assertEquals(5, atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      
      atomikosProperties0.setDefaultJtaTimeout(atomikosProperties_Recovery0.delay);
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(1, atomikosProperties0.getConsoleFileLimit());
      assertEquals(5, atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals((-2738L), atomikosProperties_Recovery0.getRetryInterval());
      assertEquals((-36), atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(1, atomikosProperties0.consoleFileLimit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(5, atomikosProperties0.maxActives);
      assertEquals(86400000L, atomikosProperties_Recovery0.forgetOrphanedLogEntriesDelay);
      assertEquals((-2738L), atomikosProperties_Recovery0.retryInterval);
      assertEquals((-36), atomikosProperties_Recovery0.maxRetries);
      assertEquals(10000L, atomikosProperties_Recovery0.delay);
      
      int int2 = (-348);
      long long1 = (-1523L);
      atomikosProperties_Recovery0.forgetOrphanedLogEntriesDelay = long1;
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(1, atomikosProperties0.getConsoleFileLimit());
      assertEquals(5, atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals((-1523L), atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals((-2738L), atomikosProperties_Recovery0.getRetryInterval());
      assertEquals((-36), atomikosProperties_Recovery0.getMaxRetries());
      
      atomikosProperties0.setConsoleFileCount(int2);
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(1, atomikosProperties0.getConsoleFileLimit());
      assertEquals(5, atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals((-348), atomikosProperties0.getConsoleFileCount());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(1, atomikosProperties0.consoleFileLimit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-348), atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(5, atomikosProperties0.maxActives);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      AtomikosProperties.Recovery atomikosProperties_Recovery1 = atomikosProperties0.getRecovery();
      assertEquals((-2738L), atomikosProperties_Recovery1.getRetryInterval());
      assertEquals((-36), atomikosProperties_Recovery1.getMaxRetries());
      assertEquals((-1523L), atomikosProperties_Recovery1.getForgetOrphanedLogEntriesDelay());
      assertEquals(10000L, atomikosProperties_Recovery1.getDelay());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(1, atomikosProperties0.getConsoleFileLimit());
      assertEquals(5, atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals((-348), atomikosProperties0.getConsoleFileCount());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals((-36), atomikosProperties_Recovery1.maxRetries);
      assertEquals((-2738L), atomikosProperties_Recovery1.retryInterval);
      assertEquals(10000L, atomikosProperties_Recovery1.delay);
      assertEquals((-1523L), atomikosProperties_Recovery1.forgetOrphanedLogEntriesDelay);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(1, atomikosProperties0.consoleFileLimit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-348), atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(5, atomikosProperties0.maxActives);
      assertSame(atomikosProperties_Recovery1, atomikosProperties_Recovery0);
      assertNotNull(atomikosProperties_Recovery1);
      
      String string0 = atomikosProperties0.getLogBaseDir();
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(1, atomikosProperties0.getConsoleFileLimit());
      assertEquals(5, atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals((-348), atomikosProperties0.getConsoleFileCount());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(1, atomikosProperties0.consoleFileLimit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-348), atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(5, atomikosProperties0.maxActives);
      assertNull(string0);
      
      AtomikosLoggingLevel atomikosLoggingLevel0 = AtomikosLoggingLevel.INFO;
      atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel0);
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(1, atomikosProperties0.getConsoleFileLimit());
      assertEquals(5, atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals((-348), atomikosProperties0.getConsoleFileCount());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(1, atomikosProperties0.consoleFileLimit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-348), atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(5, atomikosProperties0.maxActives);
      
      long long2 = 0L;
      atomikosProperties0.recovery.setForgetOrphanedLogEntriesDelay(long2);
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(1, atomikosProperties0.getConsoleFileLimit());
      assertEquals(5, atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals((-348), atomikosProperties0.getConsoleFileCount());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(1, atomikosProperties0.consoleFileLimit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-348), atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(5, atomikosProperties0.maxActives);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      
      long long3 = atomikosProperties0.getMaxTimeout();
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(1, atomikosProperties0.getConsoleFileLimit());
      assertEquals(5, atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals((-348), atomikosProperties0.getConsoleFileCount());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(1, atomikosProperties0.consoleFileLimit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-348), atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(5, atomikosProperties0.maxActives);
      assertEquals(300000L, long3);
      assertFalse(long3 == long2);
      assertFalse(long3 == long1);
      assertFalse(long3 == long0);
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertNotNull(atomikosProperties0);
      
      long long0 = 500L;
      atomikosProperties0.maxTimeout = long0;
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(500L, atomikosProperties0.getMaxTimeout());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      
      String string0 = atomikosProperties0.getService();
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(500L, atomikosProperties0.getMaxTimeout());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.maxTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertNull(string0);
      
      String string1 = atomikosProperties0.getConsoleFileName();
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(500L, atomikosProperties0.getMaxTimeout());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.maxTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals("tm.out", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertNotNull(atomikosProperties0);
      
      AtomikosLoggingLevel atomikosLoggingLevel0 = AtomikosLoggingLevel.INFO;
      atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel0);
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      
      int int0 = atomikosProperties0.getConsoleFileCount();
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(1, int0);
      
      String string0 = "|:";
      atomikosProperties0.setLogBaseDir(string0);
      assertEquals("|:", atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      AtomikosProperties.Recovery atomikosProperties_Recovery0 = new AtomikosProperties.Recovery();
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(5, atomikosProperties_Recovery0.maxRetries);
      assertEquals(86400000L, atomikosProperties_Recovery0.forgetOrphanedLogEntriesDelay);
      assertEquals(10000L, atomikosProperties_Recovery0.delay);
      assertEquals(10000L, atomikosProperties_Recovery0.retryInterval);
      assertNotNull(atomikosProperties_Recovery0);
      
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertNotNull(atomikosProperties0);
      
      String string0 = "";
      atomikosProperties0.setConsoleFileName(string0);
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      
      boolean boolean0 = atomikosProperties0.isSerialJtaTransactions();
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(boolean0);
      
      long long0 = 0L;
      atomikosProperties0.setMaxTimeout(long0);
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(0L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertNotNull(atomikosProperties0);
      
      boolean boolean0 = atomikosProperties0.isForceShutdownOnVmExit();
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(boolean0);
      
      AtomikosProperties.Recovery atomikosProperties_Recovery0 = new AtomikosProperties.Recovery();
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.delay);
      assertEquals(86400000L, atomikosProperties_Recovery0.forgetOrphanedLogEntriesDelay);
      assertEquals(5, atomikosProperties_Recovery0.maxRetries);
      assertEquals(10000L, atomikosProperties_Recovery0.retryInterval);
      assertNotNull(atomikosProperties_Recovery0);
      
      atomikosProperties_Recovery0.delay = (long) atomikosProperties0.consoleFileCount;
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(1L, atomikosProperties_Recovery0.getDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      
      long long0 = atomikosProperties_Recovery0.getRetryInterval();
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(1L, atomikosProperties_Recovery0.getDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(86400000L, atomikosProperties_Recovery0.forgetOrphanedLogEntriesDelay);
      assertEquals(5, atomikosProperties_Recovery0.maxRetries);
      assertEquals(1L, atomikosProperties_Recovery0.delay);
      assertEquals(10000L, atomikosProperties_Recovery0.retryInterval);
      assertEquals(10000L, long0);
      
      Properties properties0 = atomikosProperties0.asProperties();
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(properties0.isEmpty());
      assertEquals(18, properties0.size());
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertNotNull(properties0);
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertNotNull(atomikosProperties0);
      
      AtomikosLoggingLevel atomikosLoggingLevel0 = AtomikosLoggingLevel.WARN;
      atomikosProperties0.consoleLogLevel = atomikosLoggingLevel0;
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      
      String string0 = "call filter {}";
      atomikosProperties0.setService(string0);
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("call filter {}", atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertNotNull(atomikosProperties0);
      
      long long0 = 0L;
      atomikosProperties0.setDefaultJtaTimeout(long0);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(0L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      
      AtomikosProperties atomikosProperties1 = new AtomikosProperties();
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertNull(atomikosProperties1.getService());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertNull(atomikosProperties1.getOutputDir());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertTrue(atomikosProperties1.serialJtaTransactions);
      assertEquals(500L, atomikosProperties1.checkpointInterval);
      assertFalse(atomikosProperties1.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties1.maxActives);
      assertEquals(300000L, atomikosProperties1.maxTimeout);
      assertTrue(atomikosProperties1.allowSubTransactions);
      assertEquals(1, atomikosProperties1.consoleFileCount);
      assertFalse(atomikosProperties1.forceShutdownOnVmExit);
      assertEquals(10000L, atomikosProperties1.defaultJtaTimeout);
      assertTrue(atomikosProperties1.enableLogging);
      assertEquals((-1), atomikosProperties1.consoleFileLimit);
      assertFalse(atomikosProperties1.equals((Object)atomikosProperties0));
      assertNotNull(atomikosProperties1);
      
      AtomikosProperties.Recovery atomikosProperties_Recovery0 = atomikosProperties1.recovery;
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.delay);
      assertEquals(86400000L, atomikosProperties_Recovery0.forgetOrphanedLogEntriesDelay);
      assertEquals(5, atomikosProperties_Recovery0.maxRetries);
      assertEquals(10000L, atomikosProperties_Recovery0.retryInterval);
      assertNotNull(atomikosProperties_Recovery0);
      
      long long1 = 300000L;
      atomikosProperties_Recovery0.setRetryInterval(long1);
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertNull(atomikosProperties1.getService());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertNull(atomikosProperties1.getOutputDir());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(300000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertTrue(atomikosProperties1.serialJtaTransactions);
      assertEquals(500L, atomikosProperties1.checkpointInterval);
      assertFalse(atomikosProperties1.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties1.maxActives);
      assertEquals(300000L, atomikosProperties1.maxTimeout);
      assertTrue(atomikosProperties1.allowSubTransactions);
      assertEquals(1, atomikosProperties1.consoleFileCount);
      assertFalse(atomikosProperties1.forceShutdownOnVmExit);
      assertEquals(10000L, atomikosProperties1.defaultJtaTimeout);
      assertTrue(atomikosProperties1.enableLogging);
      assertEquals((-1), atomikosProperties1.consoleFileLimit);
      assertEquals(10000L, atomikosProperties_Recovery0.delay);
      assertEquals(300000L, atomikosProperties_Recovery0.retryInterval);
      assertEquals(86400000L, atomikosProperties_Recovery0.forgetOrphanedLogEntriesDelay);
      assertEquals(5, atomikosProperties_Recovery0.maxRetries);
      assertNotSame(atomikosProperties1, atomikosProperties0);
      assertFalse(atomikosProperties1.equals((Object)atomikosProperties0));
      assertFalse(long1 == long0);
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertNotNull(atomikosProperties0);
      
      String string0 = "]Z^`t&v|0P";
      atomikosProperties0.setOutputDir(string0);
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("]Z^`t&v|0P", atomikosProperties0.getOutputDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      
      atomikosProperties0.consoleFileName = string0;
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("]Z^`t&v|0P", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("]Z^`t&v|0P", atomikosProperties0.getOutputDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      
      AtomikosLoggingLevel atomikosLoggingLevel0 = atomikosProperties0.getConsoleLogLevel();
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("]Z^`t&v|0P", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("]Z^`t&v|0P", atomikosProperties0.getOutputDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(AtomikosLoggingLevel.WARN, atomikosLoggingLevel0);
      
      AtomikosProperties.Recovery atomikosProperties_Recovery0 = atomikosProperties0.getRecovery();
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("]Z^`t&v|0P", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("]Z^`t&v|0P", atomikosProperties0.getOutputDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(5, atomikosProperties_Recovery0.maxRetries);
      assertEquals(86400000L, atomikosProperties_Recovery0.forgetOrphanedLogEntriesDelay);
      assertEquals(10000L, atomikosProperties_Recovery0.delay);
      assertEquals(10000L, atomikosProperties_Recovery0.retryInterval);
      assertNotNull(atomikosProperties_Recovery0);
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertNotNull(atomikosProperties0);
      
      int int0 = 49154;
      atomikosProperties0.setConsoleFileCount(int0);
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(49154, atomikosProperties0.getConsoleFileCount());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(49154, atomikosProperties0.consoleFileCount);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.maxActives);
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getService());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertNotNull(atomikosProperties0);
      
      AtomikosProperties.Recovery atomikosProperties_Recovery0 = atomikosProperties0.recovery;
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(5, atomikosProperties_Recovery0.maxRetries);
      assertEquals(86400000L, atomikosProperties_Recovery0.forgetOrphanedLogEntriesDelay);
      assertEquals(10000L, atomikosProperties_Recovery0.delay);
      assertEquals(10000L, atomikosProperties_Recovery0.retryInterval);
      assertNotNull(atomikosProperties_Recovery0);
      
      long long0 = atomikosProperties_Recovery0.getRetryInterval();
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getService());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals(5, atomikosProperties_Recovery0.maxRetries);
      assertEquals(86400000L, atomikosProperties_Recovery0.forgetOrphanedLogEntriesDelay);
      assertEquals(10000L, atomikosProperties_Recovery0.delay);
      assertEquals(10000L, atomikosProperties_Recovery0.retryInterval);
      assertEquals(10000L, long0);
      
      String string0 = "(Hs^LBEK8<ca";
      atomikosProperties0.setTransactionManagerUniqueName(string0);
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getService());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("(Hs^LBEK8<ca", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      
      String string1 = atomikosProperties0.getService();
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getService());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("(Hs^LBEK8<ca", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertNull(string1);
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertNotNull(atomikosProperties0);
      
      String string0 = "'!";
      atomikosProperties0.setOutputDir(string0);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("'!", atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      
      String string1 = atomikosProperties0.getService();
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("'!", atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertNull(string1);
      
      String string2 = "K_";
      atomikosProperties0.setConsoleFileName(string2);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("K_", atomikosProperties0.getConsoleFileName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("'!", atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertNotSame(string2, string0);
      assertFalse(string2.equals((Object)string0));
      
      int int0 = (-1146);
      atomikosProperties0.setConsoleFileCount(int0);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("K_", atomikosProperties0.getConsoleFileName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals((-1146), atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("'!", atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals((-1146), atomikosProperties0.consoleFileCount);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertNotNull(atomikosProperties0);
      
      AtomikosLoggingLevel atomikosLoggingLevel0 = atomikosProperties0.getConsoleLogLevel();
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(AtomikosLoggingLevel.WARN, atomikosLoggingLevel0);
      
      String string0 = "B#";
      atomikosProperties0.logBaseDir = string0;
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals("B#", atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      
      boolean boolean0 = true;
      atomikosProperties0.setAllowSubTransactions(boolean0);
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals("B#", atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      
      atomikosProperties0.setSerialJtaTransactions(boolean0);
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals("B#", atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      
      atomikosProperties0.setSerialJtaTransactions(boolean0);
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals("B#", atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      
      AtomikosProperties.Recovery atomikosProperties_Recovery0 = new AtomikosProperties.Recovery();
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.delay);
      assertEquals(86400000L, atomikosProperties_Recovery0.forgetOrphanedLogEntriesDelay);
      assertEquals(10000L, atomikosProperties_Recovery0.retryInterval);
      assertEquals(5, atomikosProperties_Recovery0.maxRetries);
      assertNotNull(atomikosProperties_Recovery0);
      
      long long0 = atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay();
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.delay);
      assertEquals(86400000L, atomikosProperties_Recovery0.forgetOrphanedLogEntriesDelay);
      assertEquals(10000L, atomikosProperties_Recovery0.retryInterval);
      assertEquals(5, atomikosProperties_Recovery0.maxRetries);
      assertEquals(86400000L, long0);
      
      boolean boolean1 = atomikosProperties0.isEnableLogging();
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals("B#", atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Properties properties0 = atomikosProperties0.asProperties();
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals("B#", atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(properties0.isEmpty());
      assertEquals(19, properties0.size());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertNotNull(properties0);
      
      String string1 = atomikosProperties0.getLogBaseDir();
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals("B#", atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals("B#", string1);
      assertSame(string1, string0);
      assertNotNull(string1);
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(50, atomikosProperties0.maxActives);
      assertNotNull(atomikosProperties0);
      
      String string0 = "    </multipart-config>\n";
      atomikosProperties0.setTransactionManagerUniqueName(string0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("    </multipart-config>\n", atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(50, atomikosProperties0.maxActives);
      
      boolean boolean0 = false;
      atomikosProperties0.serialJtaTransactions = boolean0;
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("    </multipart-config>\n", atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      
      String string1 = atomikosProperties0.getTransactionManagerUniqueName();
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("    </multipart-config>\n", atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.serialJtaTransactions);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals("    </multipart-config>\n", string1);
      assertSame(string1, string0);
      assertNotNull(string1);
      
      boolean boolean1 = true;
      atomikosProperties0.setForceShutdownOnVmExit(boolean1);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("    </multipart-config>\n", atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.serialJtaTransactions);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertNotNull(atomikosProperties0);
      
      long long0 = (-1340L);
      atomikosProperties0.setMaxTimeout(long0);
      assertEquals((-1340L), atomikosProperties0.getMaxTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals((-1340L), atomikosProperties0.maxTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      
      AtomikosProperties.Recovery atomikosProperties_Recovery0 = atomikosProperties0.getRecovery();
      assertEquals((-1340L), atomikosProperties0.getMaxTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals((-1340L), atomikosProperties0.maxTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(10000L, atomikosProperties_Recovery0.retryInterval);
      assertEquals(10000L, atomikosProperties_Recovery0.delay);
      assertEquals(86400000L, atomikosProperties_Recovery0.forgetOrphanedLogEntriesDelay);
      assertEquals(5, atomikosProperties_Recovery0.maxRetries);
      assertNotNull(atomikosProperties_Recovery0);
      
      long long1 = 1281L;
      long long2 = 0L;
      atomikosProperties_Recovery0.setRetryInterval(long2);
      assertEquals((-1340L), atomikosProperties0.getMaxTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(0L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals((-1340L), atomikosProperties0.maxTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(10000L, atomikosProperties_Recovery0.delay);
      assertEquals(86400000L, atomikosProperties_Recovery0.forgetOrphanedLogEntriesDelay);
      assertEquals(5, atomikosProperties_Recovery0.maxRetries);
      assertEquals(0L, atomikosProperties_Recovery0.retryInterval);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      
      atomikosProperties_Recovery0.delay = long1;
      assertEquals((-1340L), atomikosProperties0.getMaxTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(0L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(1281L, atomikosProperties_Recovery0.getDelay());
      
      atomikosProperties_Recovery0.maxRetries = atomikosProperties0.maxActives;
      assertEquals((-1340L), atomikosProperties0.getMaxTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(0L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(50, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(1281L, atomikosProperties_Recovery0.getDelay());
      
      atomikosProperties_Recovery0.maxRetries = atomikosProperties0.consoleFileLimit;
      assertEquals((-1340L), atomikosProperties0.getMaxTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(0L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals((-1), atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(1281L, atomikosProperties_Recovery0.getDelay());
      
      int int0 = atomikosProperties_Recovery0.getMaxRetries();
      assertEquals((-1340L), atomikosProperties0.getMaxTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(0L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals((-1), atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(1281L, atomikosProperties_Recovery0.getDelay());
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals((-1340L), atomikosProperties0.maxTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals((-1), atomikosProperties_Recovery0.maxRetries);
      assertEquals(1281L, atomikosProperties_Recovery0.delay);
      assertEquals(86400000L, atomikosProperties_Recovery0.forgetOrphanedLogEntriesDelay);
      assertEquals(0L, atomikosProperties_Recovery0.retryInterval);
      assertEquals((-1), int0);
      
      String string0 = "1gK_1s[Y_Ru";
      atomikosProperties0.setOutputDir(string0);
      assertEquals((-1340L), atomikosProperties0.getMaxTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("1gK_1s[Y_Ru", atomikosProperties0.getOutputDir());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals((-1340L), atomikosProperties0.maxTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      
      atomikosProperties_Recovery0.setMaxRetries(int0);
      assertEquals((-1340L), atomikosProperties0.getMaxTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("1gK_1s[Y_Ru", atomikosProperties0.getOutputDir());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(0L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals((-1), atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(1281L, atomikosProperties_Recovery0.getDelay());
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals((-1340L), atomikosProperties0.maxTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals((-1), atomikosProperties_Recovery0.maxRetries);
      assertEquals(1281L, atomikosProperties_Recovery0.delay);
      assertEquals(86400000L, atomikosProperties_Recovery0.forgetOrphanedLogEntriesDelay);
      assertEquals(0L, atomikosProperties_Recovery0.retryInterval);
      
      String string1 = atomikosProperties0.getOutputDir();
      assertEquals((-1340L), atomikosProperties0.getMaxTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("1gK_1s[Y_Ru", atomikosProperties0.getOutputDir());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals((-1340L), atomikosProperties0.maxTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals("1gK_1s[Y_Ru", string1);
      assertSame(string1, string0);
      assertNotNull(string1);
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertNotNull(atomikosProperties0);
      
      int int0 = 0;
      atomikosProperties0.setMaxActives(int0);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(0, atomikosProperties0.maxActives);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      
      int int1 = atomikosProperties0.getConsoleFileLimit();
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(0, atomikosProperties0.maxActives);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertNotNull(atomikosProperties0);
      
      boolean boolean0 = true;
      XMLDSigRI xMLDSigRI0 = new XMLDSigRI();
      assertEquals("XMLDSig (DOM XMLSignatureFactory; DOM KeyInfoFactory; C14N 1.0, C14N 1.1, Exclusive C14N, Base64, Enveloped, XPath, XPath2, XSLT TransformServices)", xMLDSigRI0.getInfo());
      assertEquals("XMLDSig version 1.8", xMLDSigRI0.toString());
      assertEquals(37, xMLDSigRI0.size());
      assertEquals("XMLDSig", xMLDSigRI0.getName());
      assertFalse(xMLDSigRI0.isEmpty());
      assertEquals(1.8, xMLDSigRI0.getVersion(), 0.01);
      assertNotNull(xMLDSigRI0);
      
      String string0 = "";
      atomikosProperties0.set(xMLDSigRI0, string0, string0);
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("XMLDSig (DOM XMLSignatureFactory; DOM KeyInfoFactory; C14N 1.0, C14N 1.1, Exclusive C14N, Base64, Enveloped, XPath, XPath2, XSLT TransformServices)", xMLDSigRI0.getInfo());
      assertEquals("XMLDSig version 1.8", xMLDSigRI0.toString());
      assertEquals(38, xMLDSigRI0.size());
      assertEquals("XMLDSig", xMLDSigRI0.getName());
      assertFalse(xMLDSigRI0.isEmpty());
      assertEquals(1.8, xMLDSigRI0.getVersion(), 0.01);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      
      atomikosProperties0.forceShutdownOnVmExit = boolean0;
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      
      boolean boolean1 = atomikosProperties0.isThreadedTwoPhaseCommit();
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertNotNull(atomikosProperties0);
      
      long long0 = atomikosProperties0.getDefaultJtaTimeout();
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, long0);
      
      int int0 = 0;
      atomikosProperties0.setConsoleFileLimit(int0);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(0, atomikosProperties0.consoleFileLimit);
      assertEquals(50, atomikosProperties0.maxActives);
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertNotNull(atomikosProperties0);
      
      String string0 = atomikosProperties0.getLogBaseName();
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals("tmlog", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertNotNull(atomikosProperties0);
      
      long long0 = atomikosProperties0.getCheckpointInterval();
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(500L, long0);
      
      AtomikosProperties.Recovery atomikosProperties_Recovery0 = atomikosProperties0.recovery;
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(5, atomikosProperties_Recovery0.maxRetries);
      assertEquals(86400000L, atomikosProperties_Recovery0.forgetOrphanedLogEntriesDelay);
      assertEquals(10000L, atomikosProperties_Recovery0.delay);
      assertEquals(10000L, atomikosProperties_Recovery0.retryInterval);
      assertNotNull(atomikosProperties_Recovery0);
      
      atomikosProperties_Recovery0.delay = (long) atomikosProperties0.consoleFileLimit;
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals((-1L), atomikosProperties_Recovery0.getDelay());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      
      int int0 = 0;
      atomikosProperties_Recovery0.setMaxRetries(int0);
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(0, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals((-1L), atomikosProperties_Recovery0.getDelay());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(86400000L, atomikosProperties_Recovery0.forgetOrphanedLogEntriesDelay);
      assertEquals(10000L, atomikosProperties_Recovery0.retryInterval);
      assertEquals((-1L), atomikosProperties_Recovery0.delay);
      assertEquals(0, atomikosProperties_Recovery0.maxRetries);
      
      atomikosProperties_Recovery0.forgetOrphanedLogEntriesDelay = (long) int0;
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(0, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals((-1L), atomikosProperties_Recovery0.getDelay());
      assertEquals(0L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      
      atomikosProperties_Recovery0.forgetOrphanedLogEntriesDelay = atomikosProperties0.checkpointInterval;
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(0, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals((-1L), atomikosProperties_Recovery0.getDelay());
      assertEquals(500L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      
      long long1 = 0L;
      atomikosProperties_Recovery0.forgetOrphanedLogEntriesDelay = long1;
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(0, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals((-1L), atomikosProperties_Recovery0.getDelay());
      assertEquals(0L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      
      atomikosProperties_Recovery0.setForgetOrphanedLogEntriesDelay(long0);
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(0, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals((-1L), atomikosProperties_Recovery0.getDelay());
      assertEquals(500L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(500L, atomikosProperties_Recovery0.forgetOrphanedLogEntriesDelay);
      assertEquals(10000L, atomikosProperties_Recovery0.retryInterval);
      assertEquals((-1L), atomikosProperties_Recovery0.delay);
      assertEquals(0, atomikosProperties_Recovery0.maxRetries);
      assertFalse(long0 == long1);
      
      boolean boolean0 = atomikosProperties0.isThreadedTwoPhaseCommit();
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertFalse(boolean0);
      
      int int1 = atomikosProperties0.getMaxActives();
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, int1);
      assertFalse(int1 == int0);
      
      boolean boolean1 = atomikosProperties0.isAllowSubTransactions();
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string0 = " nonce:";
      atomikosProperties0.setOutputDir(string0);
      assertEquals(" nonce:", atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      
      atomikosProperties0.setLogBaseDir(string0);
      assertEquals(" nonce:", atomikosProperties0.getOutputDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(" nonce:", atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      
      boolean boolean2 = false;
      atomikosProperties0.setAllowSubTransactions(boolean2);
      assertEquals(" nonce:", atomikosProperties0.getOutputDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(" nonce:", atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      atomikosProperties0.setTransactionManagerUniqueName(string0);
      assertEquals(" nonce:", atomikosProperties0.getOutputDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(" nonce:", atomikosProperties0.getLogBaseDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(" nonce:", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      
      atomikosProperties0.setSerialJtaTransactions(boolean1);
      assertEquals(" nonce:", atomikosProperties0.getOutputDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(" nonce:", atomikosProperties0.getLogBaseDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(" nonce:", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1 == boolean2);
      
      long long2 = atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay();
      assertEquals(" nonce:", atomikosProperties0.getOutputDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(" nonce:", atomikosProperties0.getLogBaseDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(" nonce:", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(0, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals((-1L), atomikosProperties_Recovery0.getDelay());
      assertEquals(500L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(500L, atomikosProperties_Recovery0.forgetOrphanedLogEntriesDelay);
      assertEquals(10000L, atomikosProperties_Recovery0.retryInterval);
      assertEquals((-1L), atomikosProperties_Recovery0.delay);
      assertEquals(0, atomikosProperties_Recovery0.maxRetries);
      assertEquals(500L, long2);
      assertTrue(long2 == long0);
      assertFalse(long2 == long1);
      
      String string1 = atomikosProperties0.getLogBaseDir();
      assertEquals(" nonce:", atomikosProperties0.getOutputDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(" nonce:", atomikosProperties0.getLogBaseDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(" nonce:", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(" nonce:", string1);
      assertSame(string1, string0);
      assertNotNull(string1);
      
      int int2 = atomikosProperties0.getConsoleFileCount();
      assertEquals(" nonce:", atomikosProperties0.getOutputDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(" nonce:", atomikosProperties0.getLogBaseDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(" nonce:", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      atomikosProperties0.setCheckpointInterval(int0);
      assertEquals(" nonce:", atomikosProperties0.getOutputDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(" nonce:", atomikosProperties0.getLogBaseDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(" nonce:", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(0L, atomikosProperties0.checkpointInterval);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      
      int int3 = atomikosProperties_Recovery0.getMaxRetries();
      assertEquals(" nonce:", atomikosProperties0.getOutputDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(" nonce:", atomikosProperties0.getLogBaseDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(" nonce:", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(0, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals((-1L), atomikosProperties_Recovery0.getDelay());
      assertEquals(500L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(0L, atomikosProperties0.checkpointInterval);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(500L, atomikosProperties_Recovery0.forgetOrphanedLogEntriesDelay);
      assertEquals(10000L, atomikosProperties_Recovery0.retryInterval);
      assertEquals((-1L), atomikosProperties_Recovery0.delay);
      assertEquals(0, atomikosProperties_Recovery0.maxRetries);
      assertEquals(0, int3);
      assertFalse(int3 == int1);
      assertTrue(int3 == int0);
      assertFalse(int3 == int2);
      
      AtomikosProperties.Recovery atomikosProperties_Recovery1 = atomikosProperties0.getRecovery();
      assertEquals(" nonce:", atomikosProperties0.getOutputDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(" nonce:", atomikosProperties0.getLogBaseDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(" nonce:", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(10000L, atomikosProperties_Recovery1.getRetryInterval());
      assertEquals(0, atomikosProperties_Recovery1.getMaxRetries());
      assertEquals(500L, atomikosProperties_Recovery1.getForgetOrphanedLogEntriesDelay());
      assertEquals((-1L), atomikosProperties_Recovery1.getDelay());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(0L, atomikosProperties0.checkpointInterval);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals((-1L), atomikosProperties_Recovery1.delay);
      assertEquals(500L, atomikosProperties_Recovery1.forgetOrphanedLogEntriesDelay);
      assertEquals(10000L, atomikosProperties_Recovery1.retryInterval);
      assertEquals(0, atomikosProperties_Recovery1.maxRetries);
      assertSame(atomikosProperties_Recovery1, atomikosProperties_Recovery0);
      assertNotNull(atomikosProperties_Recovery1);
      
      long long3 = atomikosProperties0.recovery.getRetryInterval();
      assertEquals(" nonce:", atomikosProperties0.getOutputDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(" nonce:", atomikosProperties0.getLogBaseDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(" nonce:", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(0L, atomikosProperties0.checkpointInterval);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(10000L, long3);
      assertFalse(long3 == long1);
      assertFalse(long3 == long0);
      assertFalse(long3 == long2);
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(50, atomikosProperties0.maxActives);
      assertNotNull(atomikosProperties0);
      
      String string0 = "";
      atomikosProperties0.consoleFileName = string0;
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      
      Properties properties0 = atomikosProperties0.asProperties();
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(18, properties0.size());
      assertFalse(properties0.isEmpty());
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(50, atomikosProperties0.maxActives);
      assertNotNull(properties0);
      
      boolean boolean0 = atomikosProperties0.isForceShutdownOnVmExit();
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(boolean0);
      
      AtomikosProperties.Recovery atomikosProperties_Recovery0 = atomikosProperties0.getRecovery();
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties_Recovery0.delay);
      assertEquals(86400000L, atomikosProperties_Recovery0.forgetOrphanedLogEntriesDelay);
      assertEquals(10000L, atomikosProperties_Recovery0.retryInterval);
      assertEquals(5, atomikosProperties_Recovery0.maxRetries);
      assertNotNull(atomikosProperties_Recovery0);
      
      boolean boolean1 = false;
      atomikosProperties0.setForceShutdownOnVmExit(boolean1);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getService());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertNotNull(atomikosProperties0);
      
      boolean boolean0 = false;
      atomikosProperties0.serialJtaTransactions = boolean0;
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getService());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      
      String string0 = "D:c6e";
      atomikosProperties0.setService(string0);
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("D:c6e", atomikosProperties0.getService());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.serialJtaTransactions);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      
      AtomikosProperties atomikosProperties1 = new AtomikosProperties();
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertNull(atomikosProperties1.getOutputDir());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties1.getService());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertFalse(atomikosProperties1.forceShutdownOnVmExit);
      assertTrue(atomikosProperties1.serialJtaTransactions);
      assertEquals((-1), atomikosProperties1.consoleFileLimit);
      assertTrue(atomikosProperties1.enableLogging);
      assertEquals(300000L, atomikosProperties1.maxTimeout);
      assertEquals(10000L, atomikosProperties1.defaultJtaTimeout);
      assertTrue(atomikosProperties1.allowSubTransactions);
      assertEquals(500L, atomikosProperties1.checkpointInterval);
      assertEquals(1, atomikosProperties1.consoleFileCount);
      assertFalse(atomikosProperties1.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties1.maxActives);
      assertFalse(atomikosProperties1.equals((Object)atomikosProperties0));
      assertNotNull(atomikosProperties1);
      
      AtomikosProperties.Recovery atomikosProperties_Recovery0 = atomikosProperties1.recovery;
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.retryInterval);
      assertEquals(86400000L, atomikosProperties_Recovery0.forgetOrphanedLogEntriesDelay);
      assertEquals(5, atomikosProperties_Recovery0.maxRetries);
      assertEquals(10000L, atomikosProperties_Recovery0.delay);
      assertNotNull(atomikosProperties_Recovery0);
      
      atomikosProperties1.setThreadedTwoPhaseCommit(atomikosProperties0.enableLogging);
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("D:c6e", atomikosProperties0.getService());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertTrue(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties1.getOutputDir());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertNull(atomikosProperties1.getService());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertFalse(atomikosProperties0.serialJtaTransactions);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties1.forceShutdownOnVmExit);
      assertTrue(atomikosProperties1.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties1.serialJtaTransactions);
      assertEquals((-1), atomikosProperties1.consoleFileLimit);
      assertTrue(atomikosProperties1.enableLogging);
      assertEquals(300000L, atomikosProperties1.maxTimeout);
      assertEquals(10000L, atomikosProperties1.defaultJtaTimeout);
      assertTrue(atomikosProperties1.allowSubTransactions);
      assertEquals(500L, atomikosProperties1.checkpointInterval);
      assertEquals(1, atomikosProperties1.consoleFileCount);
      assertEquals(50, atomikosProperties1.maxActives);
      assertNotSame(atomikosProperties0, atomikosProperties1);
      assertNotSame(atomikosProperties1, atomikosProperties0);
      assertFalse(atomikosProperties0.equals((Object)atomikosProperties1));
      assertFalse(atomikosProperties1.equals((Object)atomikosProperties0));
      
      atomikosProperties_Recovery0.maxRetries = atomikosProperties0.consoleFileLimit;
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("D:c6e", atomikosProperties0.getService());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertTrue(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties1.getOutputDir());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertNull(atomikosProperties1.getService());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals((-1), atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      
      long long0 = atomikosProperties_Recovery0.getRetryInterval();
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertTrue(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties1.getOutputDir());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertNull(atomikosProperties1.getService());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals((-1), atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertFalse(atomikosProperties1.forceShutdownOnVmExit);
      assertTrue(atomikosProperties1.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties1.serialJtaTransactions);
      assertEquals((-1), atomikosProperties1.consoleFileLimit);
      assertTrue(atomikosProperties1.enableLogging);
      assertEquals(300000L, atomikosProperties1.maxTimeout);
      assertEquals(10000L, atomikosProperties1.defaultJtaTimeout);
      assertTrue(atomikosProperties1.allowSubTransactions);
      assertEquals(500L, atomikosProperties1.checkpointInterval);
      assertEquals(1, atomikosProperties1.consoleFileCount);
      assertEquals(50, atomikosProperties1.maxActives);
      assertEquals(10000L, atomikosProperties_Recovery0.retryInterval);
      assertEquals(86400000L, atomikosProperties_Recovery0.forgetOrphanedLogEntriesDelay);
      assertEquals((-1), atomikosProperties_Recovery0.maxRetries);
      assertEquals(10000L, atomikosProperties_Recovery0.delay);
      assertEquals(10000L, long0);
      assertNotSame(atomikosProperties1, atomikosProperties0);
      assertFalse(atomikosProperties1.equals((Object)atomikosProperties0));
      
      String string1 = atomikosProperties0.getTransactionManagerUniqueName();
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("D:c6e", atomikosProperties0.getService());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.serialJtaTransactions);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertNotSame(atomikosProperties0, atomikosProperties1);
      assertFalse(atomikosProperties0.equals((Object)atomikosProperties1));
      assertNull(string1);
      
      atomikosProperties1.setOutputDir(atomikosProperties0.logBaseName);
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("D:c6e", atomikosProperties0.getService());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertTrue(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertEquals("tmlog", atomikosProperties1.getOutputDir());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertNull(atomikosProperties1.getService());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertFalse(atomikosProperties0.serialJtaTransactions);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties1.forceShutdownOnVmExit);
      assertTrue(atomikosProperties1.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties1.serialJtaTransactions);
      assertEquals((-1), atomikosProperties1.consoleFileLimit);
      assertTrue(atomikosProperties1.enableLogging);
      assertEquals(300000L, atomikosProperties1.maxTimeout);
      assertEquals(10000L, atomikosProperties1.defaultJtaTimeout);
      assertTrue(atomikosProperties1.allowSubTransactions);
      assertEquals(500L, atomikosProperties1.checkpointInterval);
      assertEquals(1, atomikosProperties1.consoleFileCount);
      assertEquals(50, atomikosProperties1.maxActives);
      assertNotSame(atomikosProperties0, atomikosProperties1);
      assertNotSame(atomikosProperties1, atomikosProperties0);
      assertFalse(atomikosProperties0.equals((Object)atomikosProperties1));
      assertFalse(atomikosProperties1.equals((Object)atomikosProperties0));
      
      long long1 = atomikosProperties0.getMaxTimeout();
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("D:c6e", atomikosProperties0.getService());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.serialJtaTransactions);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(300000L, long1);
      assertNotSame(atomikosProperties0, atomikosProperties1);
      assertFalse(atomikosProperties0.equals((Object)atomikosProperties1));
      assertFalse(long1 == long0);
      
      String string2 = atomikosProperties0.getService();
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("D:c6e", atomikosProperties0.getService());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.serialJtaTransactions);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals("D:c6e", string2);
      assertNotSame(atomikosProperties0, atomikosProperties1);
      assertSame(string2, string0);
      assertFalse(atomikosProperties0.equals((Object)atomikosProperties1));
      assertNotNull(string2);
      
      atomikosProperties0.setMaxActives(atomikosProperties1.consoleFileCount);
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("D:c6e", atomikosProperties0.getService());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertTrue(atomikosProperties1.isAllowSubTransactions());
      assertEquals(1, atomikosProperties1.getConsoleFileCount());
      assertTrue(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties1.getConsoleFileLimit());
      assertEquals("tmlog", atomikosProperties1.getOutputDir());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertEquals("tm.out", atomikosProperties1.getConsoleFileName());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertNull(atomikosProperties1.getService());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties1.getConsoleLogLevel());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertEquals(1, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.serialJtaTransactions);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties1.forceShutdownOnVmExit);
      assertTrue(atomikosProperties1.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties1.serialJtaTransactions);
      assertEquals((-1), atomikosProperties1.consoleFileLimit);
      assertTrue(atomikosProperties1.enableLogging);
      assertEquals(300000L, atomikosProperties1.maxTimeout);
      assertEquals(10000L, atomikosProperties1.defaultJtaTimeout);
      assertTrue(atomikosProperties1.allowSubTransactions);
      assertEquals(500L, atomikosProperties1.checkpointInterval);
      assertEquals(1, atomikosProperties1.consoleFileCount);
      assertEquals(50, atomikosProperties1.maxActives);
      assertNotSame(atomikosProperties0, atomikosProperties1);
      assertNotSame(atomikosProperties1, atomikosProperties0);
      assertFalse(atomikosProperties0.equals((Object)atomikosProperties1));
      assertFalse(atomikosProperties1.equals((Object)atomikosProperties0));
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertNotNull(atomikosProperties0);
      
      String string0 = "]lgKe1T}";
      atomikosProperties0.transactionManagerUniqueName = string0;
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("]lgKe1T}", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      
      long long0 = 2997L;
      atomikosProperties0.setCheckpointInterval(long0);
      assertEquals(2997L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("]lgKe1T}", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(2997L, atomikosProperties0.checkpointInterval);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      AtomikosProperties.Recovery atomikosProperties_Recovery0 = new AtomikosProperties.Recovery();
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(5, atomikosProperties_Recovery0.maxRetries);
      assertEquals(86400000L, atomikosProperties_Recovery0.forgetOrphanedLogEntriesDelay);
      assertEquals(10000L, atomikosProperties_Recovery0.delay);
      assertEquals(10000L, atomikosProperties_Recovery0.retryInterval);
      assertNotNull(atomikosProperties_Recovery0);
      
      long long0 = 0L;
      atomikosProperties_Recovery0.retryInterval = long0;
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(0L, atomikosProperties_Recovery0.getRetryInterval());
      
      long long1 = atomikosProperties_Recovery0.getDelay();
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(0L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(5, atomikosProperties_Recovery0.maxRetries);
      assertEquals(0L, atomikosProperties_Recovery0.retryInterval);
      assertEquals(86400000L, atomikosProperties_Recovery0.forgetOrphanedLogEntriesDelay);
      assertEquals(10000L, atomikosProperties_Recovery0.delay);
      assertEquals(10000L, long1);
      assertFalse(long1 == long0);
      
      int int0 = atomikosProperties_Recovery0.getMaxRetries();
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(0L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(5, atomikosProperties_Recovery0.maxRetries);
      assertEquals(0L, atomikosProperties_Recovery0.retryInterval);
      assertEquals(86400000L, atomikosProperties_Recovery0.forgetOrphanedLogEntriesDelay);
      assertEquals(10000L, atomikosProperties_Recovery0.delay);
      assertEquals(5, int0);
      
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertNotNull(atomikosProperties0);
      
      boolean boolean0 = atomikosProperties0.isForceShutdownOnVmExit();
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(boolean0);
      
      int int1 = 77;
      atomikosProperties0.setConsoleFileCount(int1);
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(77, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(77, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(int1 == int0);
      
      long long2 = 0L;
      atomikosProperties0.recovery.setForgetOrphanedLogEntriesDelay(long2);
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(77, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(77, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(long2 == long1);
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertNotNull(atomikosProperties0);
      
      long long0 = 0L;
      atomikosProperties0.setCheckpointInterval(long0);
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(0L, atomikosProperties0.checkpointInterval);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      
      boolean boolean0 = true;
      atomikosProperties0.setEnableLogging(boolean0);
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(0L, atomikosProperties0.checkpointInterval);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      
      int int0 = atomikosProperties0.getConsoleFileCount();
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(0L, atomikosProperties0.checkpointInterval);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(1, int0);
      
      long long1 = atomikosProperties0.getMaxTimeout();
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(0L, atomikosProperties0.checkpointInterval);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(300000L, long1);
      assertFalse(long1 == long0);
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertNotNull(atomikosProperties0);
      
      boolean boolean0 = true;
      atomikosProperties0.setSerialJtaTransactions(boolean0);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      
      boolean boolean1 = false;
      atomikosProperties0.setEnableLogging(boolean1);
      assertFalse(atomikosProperties0.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.enableLogging);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = true;
      atomikosProperties0.setAllowSubTransactions(boolean2);
      assertFalse(atomikosProperties0.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.enableLogging);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(boolean2 == boolean1);
      
      String string0 = atomikosProperties0.getService();
      assertFalse(atomikosProperties0.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.enableLogging);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertNull(string0);
      
      AtomikosProperties.Recovery atomikosProperties_Recovery0 = atomikosProperties0.getRecovery();
      assertFalse(atomikosProperties0.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertFalse(atomikosProperties0.enableLogging);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(10000L, atomikosProperties_Recovery0.retryInterval);
      assertEquals(5, atomikosProperties_Recovery0.maxRetries);
      assertEquals(86400000L, atomikosProperties_Recovery0.forgetOrphanedLogEntriesDelay);
      assertEquals(10000L, atomikosProperties_Recovery0.delay);
      assertNotNull(atomikosProperties_Recovery0);
      
      String string1 = atomikosProperties0.getConsoleFileName();
      assertFalse(atomikosProperties0.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.enableLogging);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals("tm.out", string1);
      assertNotNull(string1);
      
      long long0 = 0L;
      System.setCurrentTimeMillis(long0);
      Properties properties0 = atomikosProperties0.asProperties();
      assertFalse(atomikosProperties0.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(properties0.isEmpty());
      assertEquals(18, properties0.size());
      assertFalse(atomikosProperties0.enableLogging);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertNotNull(properties0);
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertNotNull(atomikosProperties0);
      
      boolean boolean0 = false;
      atomikosProperties0.serialJtaTransactions = boolean0;
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getService());
      
      boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int0 = atomikosProperties0.getConsoleFileLimit();
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals((-1), int0);
      
      AtomikosProperties.Recovery atomikosProperties_Recovery0 = atomikosProperties0.recovery;
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.retryInterval);
      assertEquals(5, atomikosProperties_Recovery0.maxRetries);
      assertEquals(86400000L, atomikosProperties_Recovery0.forgetOrphanedLogEntriesDelay);
      assertEquals(10000L, atomikosProperties_Recovery0.delay);
      assertNotNull(atomikosProperties_Recovery0);
      
      long long0 = (-1299L);
      atomikosProperties_Recovery0.setForgetOrphanedLogEntriesDelay(long0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getService());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals((-1299L), atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals(10000L, atomikosProperties_Recovery0.retryInterval);
      assertEquals((-1299L), atomikosProperties_Recovery0.forgetOrphanedLogEntriesDelay);
      assertEquals(5, atomikosProperties_Recovery0.maxRetries);
      assertEquals(10000L, atomikosProperties_Recovery0.delay);
      
      int int1 = 324;
      atomikosProperties0.setConsoleFileCount(int1);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(324, atomikosProperties0.getConsoleFileCount());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties0.serialJtaTransactions);
      assertEquals(324, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(int1 == int0);
      
      String string0 = "run-as";
      atomikosProperties0.setLogBaseName(string0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(324, atomikosProperties0.getConsoleFileCount());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("run-as", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties0.serialJtaTransactions);
      assertEquals(324, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertNotNull(atomikosProperties0);
      
      String string0 = "";
      atomikosProperties0.transactionManagerUniqueName = string0;
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      
      boolean boolean0 = false;
      atomikosProperties0.setAllowSubTransactions(boolean0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertFalse(atomikosProperties0.allowSubTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.maxActives);
      
      AtomikosProperties.Recovery atomikosProperties_Recovery0 = atomikosProperties0.getRecovery();
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertFalse(atomikosProperties0.allowSubTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties_Recovery0.retryInterval);
      assertEquals(86400000L, atomikosProperties_Recovery0.forgetOrphanedLogEntriesDelay);
      assertEquals(10000L, atomikosProperties_Recovery0.delay);
      assertEquals(5, atomikosProperties_Recovery0.maxRetries);
      assertNotNull(atomikosProperties_Recovery0);
      
      boolean boolean1 = atomikosProperties0.isForceShutdownOnVmExit();
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertFalse(atomikosProperties0.allowSubTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertNotNull(atomikosProperties0);
      
      boolean boolean0 = false;
      atomikosProperties0.setAllowSubTransactions(boolean0);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertFalse(atomikosProperties0.allowSubTransactions);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      
      atomikosProperties0.threadedTwoPhaseCommit = boolean0;
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      
      boolean boolean1 = true;
      atomikosProperties0.setSerialJtaTransactions(boolean1);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertFalse(atomikosProperties0.allowSubTransactions);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = atomikosProperties0.isAllowSubTransactions();
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertFalse(atomikosProperties0.allowSubTransactions);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      String string0 = "|";
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(50, atomikosProperties0.maxActives);
      assertNotNull(atomikosProperties0);
      
      int int0 = atomikosProperties0.getMaxActives();
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(50, int0);
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertNotNull(atomikosProperties0);
      
      boolean boolean0 = false;
      atomikosProperties0.setForceShutdownOnVmExit(boolean0);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      
      String string0 = "M;b[\\cK;\"9S";
      String string1 = "G";
      atomikosProperties0.setLogBaseDir(string1);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("G", atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      
      atomikosProperties0.transactionManagerUniqueName = string0;
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("G", atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("M;b[\\cK;\"9S", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      
      String string2 = atomikosProperties0.getTransactionManagerUniqueName();
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("G", atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("M;b[\\cK;\"9S", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals("M;b[\\cK;\"9S", string2);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      long long0 = 0L;
      atomikosProperties0.checkpointInterval = long0;
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("G", atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("M;b[\\cK;\"9S", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      
      atomikosProperties0.setTransactionManagerUniqueName(string0);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("G", atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("M;b[\\cK;\"9S", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(0L, atomikosProperties0.checkpointInterval);
      assertEquals(50, atomikosProperties0.maxActives);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
      
      long long1 = atomikosProperties0.getCheckpointInterval();
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("G", atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("M;b[\\cK;\"9S", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(0L, atomikosProperties0.checkpointInterval);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(0L, long1);
      assertTrue(long1 == long0);
      
      boolean boolean1 = atomikosProperties0.isAllowSubTransactions();
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("G", atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("M;b[\\cK;\"9S", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(0L, atomikosProperties0.checkpointInterval);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string3 = atomikosProperties0.getLogBaseDir();
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("G", atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("M;b[\\cK;\"9S", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(0L, atomikosProperties0.checkpointInterval);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals("G", string3);
      assertNotSame(string3, string2);
      assertSame(string3, string1);
      assertNotSame(string3, string0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      long long2 = atomikosProperties0.getDefaultJtaTimeout();
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("G", atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("M;b[\\cK;\"9S", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(0L, atomikosProperties0.checkpointInterval);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, long2);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      
      String string4 = "7 a#vX^I";
      atomikosProperties0.setOutputDir(string4);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("G", atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("7 a#vX^I", atomikosProperties0.getOutputDir());
      assertEquals("M;b[\\cK;\"9S", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(0L, atomikosProperties0.checkpointInterval);
      assertEquals(50, atomikosProperties0.maxActives);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = "service";
      atomikosProperties0.setConsoleFileName(string5);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("service", atomikosProperties0.getConsoleFileName());
      assertEquals("G", atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("7 a#vX^I", atomikosProperties0.getOutputDir());
      assertEquals("M;b[\\cK;\"9S", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(0L, atomikosProperties0.checkpointInterval);
      assertEquals(50, atomikosProperties0.maxActives);
      assertNotSame(string5, string3);
      assertNotSame(string5, string1);
      assertNotSame(string5, string4);
      assertNotSame(string5, string0);
      assertNotSame(string5, string2);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      
      AtomikosProperties.Recovery atomikosProperties_Recovery0 = new AtomikosProperties.Recovery();
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.retryInterval);
      assertEquals(86400000L, atomikosProperties_Recovery0.forgetOrphanedLogEntriesDelay);
      assertEquals(10000L, atomikosProperties_Recovery0.delay);
      assertEquals(5, atomikosProperties_Recovery0.maxRetries);
      assertNotNull(atomikosProperties_Recovery0);
      
      long long3 = atomikosProperties_Recovery0.getDelay();
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.retryInterval);
      assertEquals(86400000L, atomikosProperties_Recovery0.forgetOrphanedLogEntriesDelay);
      assertEquals(10000L, atomikosProperties_Recovery0.delay);
      assertEquals(5, atomikosProperties_Recovery0.maxRetries);
      assertEquals(10000L, long3);
      assertFalse(long3 == long0);
      assertFalse(long3 == long1);
      assertTrue(long3 == long2);
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertNotNull(atomikosProperties0);
      
      boolean boolean0 = true;
      atomikosProperties0.allowSubTransactions = boolean0;
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      
      String string0 = "";
      atomikosProperties0.setLogBaseDir(string0);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      
      atomikosProperties0.setTransactionManagerUniqueName(string0);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      
      boolean boolean1 = true;
      atomikosProperties0.forceShutdownOnVmExit = boolean1;
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      
      AtomikosLoggingLevel atomikosLoggingLevel0 = AtomikosLoggingLevel.DEBUG;
      atomikosProperties0.consoleLogLevel = atomikosLoggingLevel0;
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.DEBUG, atomikosProperties0.getConsoleLogLevel());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      
      atomikosProperties0.setEnableLogging(boolean1);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.DEBUG, atomikosProperties0.getConsoleLogLevel());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      
      atomikosProperties0.setEnableLogging(boolean1);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.DEBUG, atomikosProperties0.getConsoleLogLevel());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      
      atomikosProperties0.setSerialJtaTransactions(boolean1);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.DEBUG, atomikosProperties0.getConsoleLogLevel());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      
      int int0 = (-1419);
      atomikosProperties0.setConsoleFileLimit(int0);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.DEBUG, atomikosProperties0.getConsoleLogLevel());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals((-1419), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals((-1419), atomikosProperties0.consoleFileLimit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      
      atomikosProperties0.setConsoleFileLimit(int0);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.DEBUG, atomikosProperties0.getConsoleLogLevel());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals((-1419), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals((-1419), atomikosProperties0.consoleFileLimit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      
      int int1 = 3436;
      atomikosProperties0.setMaxActives(int1);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.DEBUG, atomikosProperties0.getConsoleLogLevel());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(3436, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals((-1419), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals((-1419), atomikosProperties0.consoleFileLimit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(3436, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(int1 == int0);
      
      AtomikosLoggingLevel atomikosLoggingLevel1 = AtomikosLoggingLevel.WARN;
      atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel1);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(3436, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals((-1419), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals((-1419), atomikosProperties0.consoleFileLimit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(3436, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertNotSame(atomikosLoggingLevel1, atomikosLoggingLevel0);
      assertFalse(atomikosLoggingLevel1.equals((Object)atomikosLoggingLevel0));
      
      atomikosProperties0.setConsoleFileLimit(int0);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(3436, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals((-1419), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals((-1419), atomikosProperties0.consoleFileLimit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(3436, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(int0 == int1);
      
      boolean boolean2 = true;
      atomikosProperties0.setAllowSubTransactions(boolean2);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(3436, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals((-1419), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals((-1419), atomikosProperties0.consoleFileLimit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(3436, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      
      atomikosProperties0.setMaxActives(int0);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals((-1419), atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals((-1419), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals((-1419), atomikosProperties0.consoleFileLimit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1419), atomikosProperties0.maxActives);
      assertFalse(int0 == int1);
      
      String string1 = atomikosProperties0.getLogBaseDir();
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals((-1419), atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals((-1419), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals((-1419), atomikosProperties0.consoleFileLimit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1419), atomikosProperties0.maxActives);
      assertEquals("", string1);
      assertSame(string1, string0);
      assertNotNull(string1);
      
      AtomikosProperties.Recovery atomikosProperties_Recovery0 = atomikosProperties0.getRecovery();
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals((-1419), atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals((-1419), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals((-1419), atomikosProperties0.consoleFileLimit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1419), atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties_Recovery0.delay);
      assertEquals(86400000L, atomikosProperties_Recovery0.forgetOrphanedLogEntriesDelay);
      assertEquals(5, atomikosProperties_Recovery0.maxRetries);
      assertEquals(10000L, atomikosProperties_Recovery0.retryInterval);
      assertNotNull(atomikosProperties_Recovery0);
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertNotNull(atomikosProperties0);
      
      AtomikosProperties.Recovery atomikosProperties_Recovery0 = atomikosProperties0.recovery;
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(5, atomikosProperties_Recovery0.maxRetries);
      assertEquals(86400000L, atomikosProperties_Recovery0.forgetOrphanedLogEntriesDelay);
      assertEquals(10000L, atomikosProperties_Recovery0.delay);
      assertEquals(10000L, atomikosProperties_Recovery0.retryInterval);
      assertNotNull(atomikosProperties_Recovery0);
      
      atomikosProperties_Recovery0.setDelay(atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(1L, atomikosProperties_Recovery0.getDelay());
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(5, atomikosProperties_Recovery0.maxRetries);
      assertEquals(86400000L, atomikosProperties_Recovery0.forgetOrphanedLogEntriesDelay);
      assertEquals(10000L, atomikosProperties_Recovery0.retryInterval);
      assertEquals(1L, atomikosProperties_Recovery0.delay);
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getService());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertNotNull(atomikosProperties0);
      
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      String string0 = "+H)E'][z5;lP7DQQ";
      atomikosProperties0.set(properties0, string0, properties0);
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getService());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      
      AtomikosProperties.Recovery atomikosProperties_Recovery0 = atomikosProperties0.recovery;
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.retryInterval);
      assertEquals(86400000L, atomikosProperties_Recovery0.forgetOrphanedLogEntriesDelay);
      assertEquals(5, atomikosProperties_Recovery0.maxRetries);
      assertEquals(10000L, atomikosProperties_Recovery0.delay);
      assertNotNull(atomikosProperties_Recovery0);
      
      long long0 = 1L;
      atomikosProperties_Recovery0.setRetryInterval(long0);
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getService());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(1L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals(86400000L, atomikosProperties_Recovery0.forgetOrphanedLogEntriesDelay);
      assertEquals(1L, atomikosProperties_Recovery0.retryInterval);
      assertEquals(5, atomikosProperties_Recovery0.maxRetries);
      assertEquals(10000L, atomikosProperties_Recovery0.delay);
      
      int int0 = 1800;
      atomikosProperties_Recovery0.setMaxRetries(int0);
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getService());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(1800, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(1L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals(1800, atomikosProperties_Recovery0.maxRetries);
      assertEquals(86400000L, atomikosProperties_Recovery0.forgetOrphanedLogEntriesDelay);
      assertEquals(1L, atomikosProperties_Recovery0.retryInterval);
      assertEquals(10000L, atomikosProperties_Recovery0.delay);
      
      boolean boolean0 = true;
      atomikosProperties0.setSerialJtaTransactions(boolean0);
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getService());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertNotNull(atomikosProperties0);
      
      int int0 = (-838);
      String string0 = "j7Zd`";
      atomikosProperties0.setConsoleFileName(string0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals("j7Zd`", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.allowSubTransactions);
      
      atomikosProperties0.consoleFileCount = int0;
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals((-838), atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals("j7Zd`", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      
      String string1 = atomikosProperties0.getLogBaseDir();
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals((-838), atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals("j7Zd`", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals((-838), atomikosProperties0.consoleFileCount);
      assertNull(string1);
      
      boolean boolean0 = false;
      atomikosProperties0.enableLogging = boolean0;
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals((-838), atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals("j7Zd`", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      
      long long0 = atomikosProperties0.getDefaultJtaTimeout();
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals((-838), atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals("j7Zd`", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.enableLogging);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals((-838), atomikosProperties0.consoleFileCount);
      assertEquals(10000L, long0);
      
      AtomikosProperties.Recovery atomikosProperties_Recovery0 = atomikosProperties0.getRecovery();
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals((-838), atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals("j7Zd`", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.enableLogging);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals((-838), atomikosProperties0.consoleFileCount);
      assertEquals(10000L, atomikosProperties_Recovery0.retryInterval);
      assertEquals(5, atomikosProperties_Recovery0.maxRetries);
      assertEquals(86400000L, atomikosProperties_Recovery0.forgetOrphanedLogEntriesDelay);
      assertEquals(10000L, atomikosProperties_Recovery0.delay);
      assertNotNull(atomikosProperties_Recovery0);
      
      atomikosProperties0.setConsoleFileLimit(atomikosProperties_Recovery0.maxRetries);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals((-838), atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals("j7Zd`", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(5, atomikosProperties0.getConsoleFileLimit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.enableLogging);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(5, atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals((-838), atomikosProperties0.consoleFileCount);
      assertEquals(10000L, atomikosProperties_Recovery0.retryInterval);
      assertEquals(5, atomikosProperties_Recovery0.maxRetries);
      assertEquals(86400000L, atomikosProperties_Recovery0.forgetOrphanedLogEntriesDelay);
      assertEquals(10000L, atomikosProperties_Recovery0.delay);
      
      int int1 = atomikosProperties0.getConsoleFileCount();
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals((-838), atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals("j7Zd`", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(5, atomikosProperties0.getConsoleFileLimit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.enableLogging);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(5, atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals((-838), atomikosProperties0.consoleFileCount);
      assertEquals((-838), int1);
      assertTrue(int1 == int0);
      
      String string2 = atomikosProperties0.getOutputDir();
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals((-838), atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals("j7Zd`", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(5, atomikosProperties0.getConsoleFileLimit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.enableLogging);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(5, atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals((-838), atomikosProperties0.consoleFileCount);
      assertNull(string2);
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertNotNull(atomikosProperties0);
      
      AtomikosLoggingLevel atomikosLoggingLevel0 = AtomikosLoggingLevel.INFO;
      atomikosProperties0.consoleLogLevel = atomikosLoggingLevel0;
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      
      long long0 = 439L;
      atomikosProperties0.setMaxTimeout(long0);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(439L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals(439L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      
      boolean boolean0 = false;
      atomikosProperties0.setForceShutdownOnVmExit(boolean0);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(439L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals(439L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      
      atomikosProperties0.setThreadedTwoPhaseCommit(boolean0);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(439L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals(439L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      
      int int0 = 0;
      atomikosProperties0.setMaxActives(int0);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(439L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(0, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals(439L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      AtomikosProperties.Recovery atomikosProperties_Recovery0 = new AtomikosProperties.Recovery();
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.delay);
      assertEquals(86400000L, atomikosProperties_Recovery0.forgetOrphanedLogEntriesDelay);
      assertEquals(10000L, atomikosProperties_Recovery0.retryInterval);
      assertEquals(5, atomikosProperties_Recovery0.maxRetries);
      assertNotNull(atomikosProperties_Recovery0);
      
      long long0 = 0L;
      atomikosProperties_Recovery0.delay = long0;
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(0L, atomikosProperties_Recovery0.getDelay());
      
      long long1 = 0L;
      atomikosProperties_Recovery0.setRetryInterval(long1);
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(0L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(0L, atomikosProperties_Recovery0.getDelay());
      assertEquals(86400000L, atomikosProperties_Recovery0.forgetOrphanedLogEntriesDelay);
      assertEquals(0L, atomikosProperties_Recovery0.delay);
      assertEquals(5, atomikosProperties_Recovery0.maxRetries);
      assertEquals(0L, atomikosProperties_Recovery0.retryInterval);
      
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertNotNull(atomikosProperties0);
      
      long long2 = (-930L);
      atomikosProperties_Recovery0.forgetOrphanedLogEntriesDelay = long2;
      assertEquals((-930L), atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(0L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(0L, atomikosProperties_Recovery0.getDelay());
      
      XMLDSigRI xMLDSigRI0 = new XMLDSigRI();
      assertFalse(xMLDSigRI0.isEmpty());
      assertEquals(1.8, xMLDSigRI0.getVersion(), 0.01);
      assertEquals("XMLDSig version 1.8", xMLDSigRI0.toString());
      assertEquals("XMLDSig", xMLDSigRI0.getName());
      assertEquals(37, xMLDSigRI0.size());
      assertEquals("XMLDSig (DOM XMLSignatureFactory; DOM KeyInfoFactory; C14N 1.0, C14N 1.1, Exclusive C14N, Base64, Enveloped, XPath, XPath2, XSLT TransformServices)", xMLDSigRI0.getInfo());
      assertNotNull(xMLDSigRI0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      long long3 = (-3072L);
      atomikosProperties_Recovery0.delay = long3;
      assertEquals((-930L), atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals((-3072L), atomikosProperties_Recovery0.getDelay());
      assertEquals(0L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      
      Object object1 = xMLDSigRI0.put(atomikosProperties_Recovery0, object0);
      assertEquals((-930L), atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals((-3072L), atomikosProperties_Recovery0.getDelay());
      assertEquals(0L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertFalse(xMLDSigRI0.isEmpty());
      assertEquals(1.8, xMLDSigRI0.getVersion(), 0.01);
      assertEquals("XMLDSig version 1.8", xMLDSigRI0.toString());
      assertEquals("XMLDSig", xMLDSigRI0.getName());
      assertEquals("XMLDSig (DOM XMLSignatureFactory; DOM KeyInfoFactory; C14N 1.0, C14N 1.1, Exclusive C14N, Base64, Enveloped, XPath, XPath2, XSLT TransformServices)", xMLDSigRI0.getInfo());
      assertEquals(38, xMLDSigRI0.size());
      assertEquals((-3072L), atomikosProperties_Recovery0.delay);
      assertEquals((-930L), atomikosProperties_Recovery0.forgetOrphanedLogEntriesDelay);
      assertEquals(5, atomikosProperties_Recovery0.maxRetries);
      assertEquals(0L, atomikosProperties_Recovery0.retryInterval);
      assertNull(object1);
      
      String string0 = "enable_logging";
      atomikosProperties0.set(xMLDSigRI0, string0, xMLDSigRI0);
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(xMLDSigRI0.isEmpty());
      assertEquals(1.8, xMLDSigRI0.getVersion(), 0.01);
      assertEquals(39, xMLDSigRI0.size());
      assertEquals("XMLDSig version 1.8", xMLDSigRI0.toString());
      assertEquals("XMLDSig", xMLDSigRI0.getName());
      assertEquals("XMLDSig (DOM XMLSignatureFactory; DOM KeyInfoFactory; C14N 1.0, C14N 1.1, Exclusive C14N, Base64, Enveloped, XPath, XPath2, XSLT TransformServices)", xMLDSigRI0.getInfo());
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      
      atomikosProperties0.maxActives = atomikosProperties_Recovery0.maxRetries;
      assertEquals((-930L), atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals((-3072L), atomikosProperties_Recovery0.getDelay());
      assertEquals(0L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(5, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      
      atomikosProperties0.consoleFileLimit = atomikosProperties_Recovery0.maxRetries;
      assertEquals((-930L), atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals((-3072L), atomikosProperties_Recovery0.getDelay());
      assertEquals(0L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getService());
      assertEquals(5, atomikosProperties0.getConsoleFileLimit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(5, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      
      int int0 = 126;
      atomikosProperties0.setConsoleFileCount(int0);
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getService());
      assertEquals(5, atomikosProperties0.getConsoleFileLimit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(126, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(5, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(5, atomikosProperties0.maxActives);
      assertEquals(126, atomikosProperties0.consoleFileCount);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(5, atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      
      atomikosProperties0.recovery.setDelay(atomikosProperties_Recovery0.maxRetries);
      assertEquals((-930L), atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals((-3072L), atomikosProperties_Recovery0.getDelay());
      assertEquals(0L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getService());
      assertEquals(5, atomikosProperties0.getConsoleFileLimit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(126, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(5, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals((-3072L), atomikosProperties_Recovery0.delay);
      assertEquals((-930L), atomikosProperties_Recovery0.forgetOrphanedLogEntriesDelay);
      assertEquals(5, atomikosProperties_Recovery0.maxRetries);
      assertEquals(0L, atomikosProperties_Recovery0.retryInterval);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(5, atomikosProperties0.maxActives);
      assertEquals(126, atomikosProperties0.consoleFileCount);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(5, atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      
      int int1 = atomikosProperties0.getConsoleFileLimit();
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getService());
      assertEquals(5, atomikosProperties0.getConsoleFileLimit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(126, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(5, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(5, atomikosProperties0.maxActives);
      assertEquals(126, atomikosProperties0.consoleFileCount);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(5, atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(5, int1);
      assertFalse(int1 == int0);
      
      boolean boolean0 = true;
      atomikosProperties0.setSerialJtaTransactions(boolean0);
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getService());
      assertEquals(5, atomikosProperties0.getConsoleFileLimit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(126, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(5, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(5, atomikosProperties0.maxActives);
      assertEquals(126, atomikosProperties0.consoleFileCount);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(5, atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      
      boolean boolean1 = atomikosProperties0.isEnableLogging();
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getService());
      assertEquals(5, atomikosProperties0.getConsoleFileLimit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(126, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(5, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(5, atomikosProperties0.maxActives);
      assertEquals(126, atomikosProperties0.consoleFileCount);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(5, atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int2 = atomikosProperties0.recovery.getMaxRetries();
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getService());
      assertEquals(5, atomikosProperties0.getConsoleFileLimit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(126, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(5, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(5, atomikosProperties0.maxActives);
      assertEquals(126, atomikosProperties0.consoleFileCount);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(5, atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(5, int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      
      int int3 = 0;
      atomikosProperties0.setConsoleFileLimit(int3);
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(126, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(5, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(5, atomikosProperties0.maxActives);
      assertEquals(126, atomikosProperties0.consoleFileCount);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(0, atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertNotNull(atomikosProperties0);
      
      AtomikosProperties.Recovery atomikosProperties_Recovery0 = new AtomikosProperties.Recovery();
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(5, atomikosProperties_Recovery0.maxRetries);
      assertEquals(10000L, atomikosProperties_Recovery0.delay);
      assertEquals(10000L, atomikosProperties_Recovery0.retryInterval);
      assertEquals(86400000L, atomikosProperties_Recovery0.forgetOrphanedLogEntriesDelay);
      assertNotNull(atomikosProperties_Recovery0);
      
      boolean boolean0 = false;
      atomikosProperties0.enableLogging = boolean0;
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      
      atomikosProperties_Recovery0.setMaxRetries(atomikosProperties0.consoleFileCount);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties0.enableLogging);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(1, atomikosProperties_Recovery0.maxRetries);
      assertEquals(10000L, atomikosProperties_Recovery0.delay);
      assertEquals(10000L, atomikosProperties_Recovery0.retryInterval);
      assertEquals(86400000L, atomikosProperties_Recovery0.forgetOrphanedLogEntriesDelay);
      
      int int0 = 112;
      atomikosProperties_Recovery0.setMaxRetries(int0);
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(112, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(112, atomikosProperties_Recovery0.maxRetries);
      assertEquals(10000L, atomikosProperties_Recovery0.delay);
      assertEquals(10000L, atomikosProperties_Recovery0.retryInterval);
      assertEquals(86400000L, atomikosProperties_Recovery0.forgetOrphanedLogEntriesDelay);
      
      atomikosProperties_Recovery0.maxRetries = atomikosProperties0.consoleFileCount;
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      
      int int1 = atomikosProperties0.getMaxActives();
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties0.enableLogging);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(50, int1);
      assertFalse(int1 == int0);
      
      boolean boolean1 = false;
      atomikosProperties0.setThreadedTwoPhaseCommit(boolean1);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties0.enableLogging);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      
      String string0 = "";
      atomikosProperties0.setTransactionManagerUniqueName(string0);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties0.enableLogging);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      
      long long0 = 2044L;
      atomikosProperties_Recovery0.setRetryInterval(long0);
      assertEquals(1, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(2044L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(1, atomikosProperties_Recovery0.maxRetries);
      assertEquals(10000L, atomikosProperties_Recovery0.delay);
      assertEquals(86400000L, atomikosProperties_Recovery0.forgetOrphanedLogEntriesDelay);
      assertEquals(2044L, atomikosProperties_Recovery0.retryInterval);
      
      String string1 = atomikosProperties0.getTransactionManagerUniqueName();
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties0.enableLogging);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals("", string1);
      assertSame(string1, string0);
      assertNotNull(string1);
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertNotNull(atomikosProperties0);
      
      Properties properties0 = atomikosProperties0.asProperties();
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(properties0.isEmpty());
      assertEquals(18, properties0.size());
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertNotNull(properties0);
      
      String string0 = "cYv} []}";
      atomikosProperties0.setConsoleFileName(string0);
      assertEquals("cYv} []}", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      
      long long0 = (-1143L);
      atomikosProperties0.setCheckpointInterval(long0);
      assertEquals("cYv} []}", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals((-1143L), atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals((-1143L), atomikosProperties0.checkpointInterval);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      
      AtomikosLoggingLevel atomikosLoggingLevel0 = atomikosProperties0.getConsoleLogLevel();
      assertEquals("cYv} []}", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals((-1143L), atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals((-1143L), atomikosProperties0.checkpointInterval);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(AtomikosLoggingLevel.WARN, atomikosLoggingLevel0);
      
      int int0 = atomikosProperties0.getConsoleFileLimit();
      assertEquals("cYv} []}", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals((-1143L), atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals((-1143L), atomikosProperties0.checkpointInterval);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals((-1), int0);
      
      long long1 = atomikosProperties0.getCheckpointInterval();
      assertEquals("cYv} []}", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals((-1143L), atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals((-1143L), atomikosProperties0.checkpointInterval);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals((-1143L), long1);
      assertTrue(long1 == long0);
      
      boolean boolean0 = atomikosProperties0.isEnableLogging();
      assertEquals("cYv} []}", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals((-1143L), atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals((-1143L), atomikosProperties0.checkpointInterval);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertTrue(boolean0);
      
      AtomikosLoggingLevel atomikosLoggingLevel1 = atomikosProperties0.getConsoleLogLevel();
      assertEquals("cYv} []}", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals((-1143L), atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals((-1143L), atomikosProperties0.checkpointInterval);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(AtomikosLoggingLevel.WARN, atomikosLoggingLevel1);
      assertSame(atomikosLoggingLevel1, atomikosLoggingLevel0);
      
      boolean boolean1 = atomikosProperties0.isAllowSubTransactions();
      assertEquals("cYv} []}", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals((-1143L), atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals((-1143L), atomikosProperties0.checkpointInterval);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int1 = 16777215;
      atomikosProperties0.setConsoleFileCount(int1);
      assertEquals("cYv} []}", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(16777215, atomikosProperties0.getConsoleFileCount());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals((-1143L), atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals((-1143L), atomikosProperties0.checkpointInterval);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(16777215, atomikosProperties0.consoleFileCount);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(int1 == int0);
      
      String string1 = atomikosProperties0.getService();
      assertEquals("cYv} []}", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(16777215, atomikosProperties0.getConsoleFileCount());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals((-1143L), atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals((-1143L), atomikosProperties0.checkpointInterval);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(16777215, atomikosProperties0.consoleFileCount);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertNull(string1);
      
      atomikosProperties0.setLogBaseName(string0);
      assertEquals("cYv} []}", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(16777215, atomikosProperties0.getConsoleFileCount());
      assertEquals((-1143L), atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("cYv} []}", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals((-1143L), atomikosProperties0.checkpointInterval);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(16777215, atomikosProperties0.consoleFileCount);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      
      int int2 = 0;
      atomikosProperties0.consoleFileCount = int2;
      assertEquals("cYv} []}", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(0, atomikosProperties0.getConsoleFileCount());
      assertEquals((-1143L), atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("cYv} []}", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      
      atomikosProperties0.setAllowSubTransactions(boolean0);
      assertEquals("cYv} []}", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(0, atomikosProperties0.getConsoleFileCount());
      assertEquals((-1143L), atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("cYv} []}", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(0, atomikosProperties0.consoleFileCount);
      assertEquals((-1143L), atomikosProperties0.checkpointInterval);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertTrue(boolean0 == boolean1);
      
      String string2 = "maxInstances";
      atomikosProperties0.setService(string2);
      assertEquals("cYv} []}", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(0, atomikosProperties0.getConsoleFileCount());
      assertEquals((-1143L), atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("cYv} []}", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("maxInstances", atomikosProperties0.getService());
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(0, atomikosProperties0.consoleFileCount);
      assertEquals((-1143L), atomikosProperties0.checkpointInterval);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertNotSame(string2, string0);
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertNotNull(atomikosProperties0);
      
      boolean boolean0 = false;
      atomikosProperties0.setSerialJtaTransactions(boolean0);
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      
      boolean boolean1 = true;
      atomikosProperties0.enableLogging = boolean1;
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getService());
      
      String string0 = atomikosProperties0.getConsoleFileName();
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals("tm.out", string0);
      assertNotNull(string0);
      
      boolean boolean2 = atomikosProperties0.isThreadedTwoPhaseCommit();
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      boolean boolean3 = atomikosProperties0.isThreadedTwoPhaseCommit();
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
  }

  @Test(timeout = 11000)
  public void test44()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getService());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertNotNull(atomikosProperties0);
      
      AtomikosProperties.Recovery atomikosProperties_Recovery0 = atomikosProperties0.recovery;
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(86400000L, atomikosProperties_Recovery0.forgetOrphanedLogEntriesDelay);
      assertEquals(10000L, atomikosProperties_Recovery0.delay);
      assertEquals(10000L, atomikosProperties_Recovery0.retryInterval);
      assertEquals(5, atomikosProperties_Recovery0.maxRetries);
      assertNotNull(atomikosProperties_Recovery0);
      
      long long0 = 315L;
      atomikosProperties_Recovery0.setRetryInterval(long0);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getService());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(315L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals(315L, atomikosProperties_Recovery0.retryInterval);
      assertEquals(86400000L, atomikosProperties_Recovery0.forgetOrphanedLogEntriesDelay);
      assertEquals(10000L, atomikosProperties_Recovery0.delay);
      assertEquals(5, atomikosProperties_Recovery0.maxRetries);
      
      long long1 = 0L;
      atomikosProperties_Recovery0.setRetryInterval(long1);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getService());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(0L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals(86400000L, atomikosProperties_Recovery0.forgetOrphanedLogEntriesDelay);
      assertEquals(10000L, atomikosProperties_Recovery0.delay);
      assertEquals(5, atomikosProperties_Recovery0.maxRetries);
      assertEquals(0L, atomikosProperties_Recovery0.retryInterval);
      assertFalse(long1 == long0);
      
      String string0 = "";
      atomikosProperties0.setLogBaseDir(string0);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getService());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      
      boolean boolean0 = true;
      boolean boolean1 = true;
      atomikosProperties0.setSerialJtaTransactions(boolean1);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getService());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      
      String string1 = "/security-constraint/web-resource-collection/http-method";
      atomikosProperties0.transactionManagerUniqueName = string1;
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals("/security-constraint/web-resource-collection/http-method", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getService());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      
      atomikosProperties0.setEnableLogging(boolean0);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals("/security-constraint/web-resource-collection/http-method", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getService());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      
      AtomikosProperties.Recovery atomikosProperties_Recovery1 = atomikosProperties0.getRecovery();
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals("/security-constraint/web-resource-collection/http-method", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getService());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(0L, atomikosProperties_Recovery1.getRetryInterval());
      assertEquals(86400000L, atomikosProperties_Recovery1.getForgetOrphanedLogEntriesDelay());
      assertEquals(5, atomikosProperties_Recovery1.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery1.getDelay());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals(86400000L, atomikosProperties_Recovery1.forgetOrphanedLogEntriesDelay);
      assertEquals(10000L, atomikosProperties_Recovery1.delay);
      assertEquals(5, atomikosProperties_Recovery1.maxRetries);
      assertEquals(0L, atomikosProperties_Recovery1.retryInterval);
      assertSame(atomikosProperties_Recovery1, atomikosProperties_Recovery0);
      assertNotNull(atomikosProperties_Recovery1);
      
      int int0 = atomikosProperties0.getConsoleFileCount();
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals("/security-constraint/web-resource-collection/http-method", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getService());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals(1, int0);
  }

  @Test(timeout = 11000)
  public void test45()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertNotNull(atomikosProperties0);
      
      AtomikosProperties.Recovery atomikosProperties_Recovery0 = atomikosProperties0.getRecovery();
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(5, atomikosProperties_Recovery0.maxRetries);
      assertEquals(10000L, atomikosProperties_Recovery0.delay);
      assertEquals(86400000L, atomikosProperties_Recovery0.forgetOrphanedLogEntriesDelay);
      assertEquals(10000L, atomikosProperties_Recovery0.retryInterval);
      assertNotNull(atomikosProperties_Recovery0);
      
      atomikosProperties_Recovery0.setForgetOrphanedLogEntriesDelay(atomikosProperties0.consoleFileLimit);
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals((-1L), atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(5, atomikosProperties_Recovery0.maxRetries);
      assertEquals(10000L, atomikosProperties_Recovery0.delay);
      assertEquals((-1L), atomikosProperties_Recovery0.forgetOrphanedLogEntriesDelay);
      assertEquals(10000L, atomikosProperties_Recovery0.retryInterval);
      
      String string0 = "oltp_max_retries";
      atomikosProperties0.setLogBaseDir(string0);
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("oltp_max_retries", atomikosProperties0.getLogBaseDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      
      boolean boolean0 = true;
      atomikosProperties0.setForceShutdownOnVmExit(boolean0);
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("oltp_max_retries", atomikosProperties0.getLogBaseDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      
      boolean boolean1 = true;
      atomikosProperties0.setThreadedTwoPhaseCommit(boolean1);
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("oltp_max_retries", atomikosProperties0.getLogBaseDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      
      long long0 = 0L;
      atomikosProperties_Recovery0.retryInterval = long0;
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("oltp_max_retries", atomikosProperties0.getLogBaseDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(0L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals((-1L), atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      
      long long1 = (-43L);
      atomikosProperties0.setMaxActives(atomikosProperties_Recovery0.maxRetries);
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(5, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("oltp_max_retries", atomikosProperties0.getLogBaseDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(0L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals((-1L), atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(5, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(5, atomikosProperties_Recovery0.maxRetries);
      assertEquals(0L, atomikosProperties_Recovery0.retryInterval);
      assertEquals(10000L, atomikosProperties_Recovery0.delay);
      assertEquals((-1L), atomikosProperties_Recovery0.forgetOrphanedLogEntriesDelay);
      
      int int0 = 0;
      atomikosProperties0.setMaxActives(int0);
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("oltp_max_retries", atomikosProperties0.getLogBaseDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(0, atomikosProperties0.maxActives);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      
      atomikosProperties_Recovery0.delay = long1;
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("oltp_max_retries", atomikosProperties0.getLogBaseDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-43L), atomikosProperties_Recovery0.getDelay());
      assertEquals(0L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals((-1L), atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      
      int int1 = atomikosProperties_Recovery0.getMaxRetries();
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("oltp_max_retries", atomikosProperties0.getLogBaseDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-43L), atomikosProperties_Recovery0.getDelay());
      assertEquals(0L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals((-1L), atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(0, atomikosProperties0.maxActives);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(5, atomikosProperties_Recovery0.maxRetries);
      assertEquals(0L, atomikosProperties_Recovery0.retryInterval);
      assertEquals((-43L), atomikosProperties_Recovery0.delay);
      assertEquals((-1L), atomikosProperties_Recovery0.forgetOrphanedLogEntriesDelay);
      assertEquals(5, int1);
      assertFalse(int1 == int0);
      
      String string1 = "";
      atomikosProperties0.setConsoleFileName(string1);
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("oltp_max_retries", atomikosProperties0.getLogBaseDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(0, atomikosProperties0.maxActives);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      
      long long2 = (-46L);
      atomikosProperties0.setDefaultJtaTimeout(long2);
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("oltp_max_retries", atomikosProperties0.getLogBaseDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals((-46L), atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(0, atomikosProperties0.maxActives);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals((-46L), atomikosProperties0.defaultJtaTimeout);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      
      atomikosProperties_Recovery0.forgetOrphanedLogEntriesDelay = long1;
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("oltp_max_retries", atomikosProperties0.getLogBaseDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals((-46L), atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-43L), atomikosProperties_Recovery0.getDelay());
      assertEquals((-43L), atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(0L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      
      long long3 = (-1283L);
      atomikosProperties0.consoleFileLimit = atomikosProperties_Recovery0.maxRetries;
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("oltp_max_retries", atomikosProperties0.getLogBaseDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals((-46L), atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals(5, atomikosProperties0.getConsoleFileLimit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-43L), atomikosProperties_Recovery0.getDelay());
      assertEquals((-43L), atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(0L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      
      atomikosProperties0.setMaxTimeout(long3);
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("oltp_max_retries", atomikosProperties0.getLogBaseDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals((-46L), atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals(5, atomikosProperties0.getConsoleFileLimit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals((-1283L), atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(5, atomikosProperties0.consoleFileLimit);
      assertEquals((-1283L), atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(0, atomikosProperties0.maxActives);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals((-46L), atomikosProperties0.defaultJtaTimeout);
      assertFalse(long3 == long0);
      assertFalse(long3 == long2);
      assertFalse(long3 == long1);
      
      atomikosProperties0.checkpointInterval = (long) atomikosProperties_Recovery0.maxRetries;
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(5L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("oltp_max_retries", atomikosProperties0.getLogBaseDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals((-46L), atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals(5, atomikosProperties0.getConsoleFileLimit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals((-1283L), atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-43L), atomikosProperties_Recovery0.getDelay());
      assertEquals((-43L), atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(0L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      
      atomikosProperties0.setConsoleFileName(string1);
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(5L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("oltp_max_retries", atomikosProperties0.getLogBaseDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals((-46L), atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals(5, atomikosProperties0.getConsoleFileLimit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals((-1283L), atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(5, atomikosProperties0.consoleFileLimit);
      assertEquals((-1283L), atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(0, atomikosProperties0.maxActives);
      assertEquals(5L, atomikosProperties0.checkpointInterval);
      assertEquals((-46L), atomikosProperties0.defaultJtaTimeout);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = atomikosProperties0.getLogBaseDir();
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(5L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("oltp_max_retries", atomikosProperties0.getLogBaseDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals((-46L), atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals(5, atomikosProperties0.getConsoleFileLimit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals((-1283L), atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(5, atomikosProperties0.consoleFileLimit);
      assertEquals((-1283L), atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(0, atomikosProperties0.maxActives);
      assertEquals(5L, atomikosProperties0.checkpointInterval);
      assertEquals((-46L), atomikosProperties0.defaultJtaTimeout);
      assertEquals("oltp_max_retries", string2);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      AtomikosLoggingLevel atomikosLoggingLevel0 = atomikosProperties0.getConsoleLogLevel();
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(5L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("oltp_max_retries", atomikosProperties0.getLogBaseDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals((-46L), atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals(5, atomikosProperties0.getConsoleFileLimit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals((-1283L), atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(5, atomikosProperties0.consoleFileLimit);
      assertEquals((-1283L), atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(0, atomikosProperties0.maxActives);
      assertEquals(5L, atomikosProperties0.checkpointInterval);
      assertEquals((-46L), atomikosProperties0.defaultJtaTimeout);
      assertEquals(AtomikosLoggingLevel.WARN, atomikosLoggingLevel0);
      
      boolean boolean2 = atomikosProperties0.isForceShutdownOnVmExit();
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(5L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("oltp_max_retries", atomikosProperties0.getLogBaseDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals((-46L), atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals(5, atomikosProperties0.getConsoleFileLimit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals((-1283L), atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(5, atomikosProperties0.consoleFileLimit);
      assertEquals((-1283L), atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(0, atomikosProperties0.maxActives);
      assertEquals(5L, atomikosProperties0.checkpointInterval);
      assertEquals((-46L), atomikosProperties0.defaultJtaTimeout);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      int int2 = atomikosProperties0.getConsoleFileCount();
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(5L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("oltp_max_retries", atomikosProperties0.getLogBaseDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals((-46L), atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals(5, atomikosProperties0.getConsoleFileLimit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals((-1283L), atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(5, atomikosProperties0.consoleFileLimit);
      assertEquals((-1283L), atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(0, atomikosProperties0.maxActives);
      assertEquals(5L, atomikosProperties0.checkpointInterval);
      assertEquals((-46L), atomikosProperties0.defaultJtaTimeout);
      assertEquals(1, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      atomikosProperties0.setForceShutdownOnVmExit(boolean2);
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(5L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("oltp_max_retries", atomikosProperties0.getLogBaseDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals((-46L), atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals(5, atomikosProperties0.getConsoleFileLimit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals((-1283L), atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(5, atomikosProperties0.consoleFileLimit);
      assertEquals((-1283L), atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(0, atomikosProperties0.maxActives);
      assertEquals(5L, atomikosProperties0.checkpointInterval);
      assertEquals((-46L), atomikosProperties0.defaultJtaTimeout);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string3 = atomikosProperties0.getLogBaseDir();
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(5L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("oltp_max_retries", atomikosProperties0.getLogBaseDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals((-46L), atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals(5, atomikosProperties0.getConsoleFileLimit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals((-1283L), atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(5, atomikosProperties0.consoleFileLimit);
      assertEquals((-1283L), atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(0, atomikosProperties0.maxActives);
      assertEquals(5L, atomikosProperties0.checkpointInterval);
      assertEquals((-46L), atomikosProperties0.defaultJtaTimeout);
      assertEquals("oltp_max_retries", string3);
      assertNotSame(string3, string1);
      assertSame(string3, string2);
      assertSame(string3, string0);
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      atomikosProperties0.setThreadedTwoPhaseCommit(boolean1);
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(5L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("oltp_max_retries", atomikosProperties0.getLogBaseDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals((-46L), atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals(5, atomikosProperties0.getConsoleFileLimit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals((-1283L), atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(5, atomikosProperties0.consoleFileLimit);
      assertEquals((-1283L), atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(0, atomikosProperties0.maxActives);
      assertEquals(5L, atomikosProperties0.checkpointInterval);
      assertEquals((-46L), atomikosProperties0.defaultJtaTimeout);
      assertTrue(boolean1 == boolean2);
      
      AtomikosProperties.Recovery atomikosProperties_Recovery1 = atomikosProperties0.getRecovery();
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(5L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("oltp_max_retries", atomikosProperties0.getLogBaseDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals((-46L), atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals(5, atomikosProperties0.getConsoleFileLimit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals((-1283L), atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(0L, atomikosProperties_Recovery1.getRetryInterval());
      assertEquals(5, atomikosProperties_Recovery1.getMaxRetries());
      assertEquals((-43L), atomikosProperties_Recovery1.getDelay());
      assertEquals((-43L), atomikosProperties_Recovery1.getForgetOrphanedLogEntriesDelay());
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(5, atomikosProperties0.consoleFileLimit);
      assertEquals((-1283L), atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(0, atomikosProperties0.maxActives);
      assertEquals(5L, atomikosProperties0.checkpointInterval);
      assertEquals((-46L), atomikosProperties0.defaultJtaTimeout);
      assertEquals(5, atomikosProperties_Recovery1.maxRetries);
      assertEquals(0L, atomikosProperties_Recovery1.retryInterval);
      assertEquals((-43L), atomikosProperties_Recovery1.forgetOrphanedLogEntriesDelay);
      assertEquals((-43L), atomikosProperties_Recovery1.delay);
      assertSame(atomikosProperties_Recovery1, atomikosProperties_Recovery0);
      assertNotNull(atomikosProperties_Recovery1);
  }

  @Test(timeout = 11000)
  public void test46()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertNotNull(atomikosProperties0);
      
      long long0 = 2756L;
      atomikosProperties0.checkpointInterval = long0;
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(2756L, atomikosProperties0.getCheckpointInterval());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      
      String string0 = "_?&C x|m(Ey[|D<A)2a";
      atomikosProperties0.setOutputDir(string0);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(2756L, atomikosProperties0.getCheckpointInterval());
      assertEquals("_?&C x|m(Ey[|D<A)2a", atomikosProperties0.getOutputDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(2756L, atomikosProperties0.checkpointInterval);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      
      String string1 = atomikosProperties0.getOutputDir();
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(2756L, atomikosProperties0.getCheckpointInterval());
      assertEquals("_?&C x|m(Ey[|D<A)2a", atomikosProperties0.getOutputDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(2756L, atomikosProperties0.checkpointInterval);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals("_?&C x|m(Ey[|D<A)2a", string1);
      assertSame(string1, string0);
      assertNotNull(string1);
      
      AtomikosProperties.Recovery atomikosProperties_Recovery0 = atomikosProperties0.getRecovery();
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(2756L, atomikosProperties0.getCheckpointInterval());
      assertEquals("_?&C x|m(Ey[|D<A)2a", atomikosProperties0.getOutputDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(2756L, atomikosProperties0.checkpointInterval);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(86400000L, atomikosProperties_Recovery0.forgetOrphanedLogEntriesDelay);
      assertEquals(10000L, atomikosProperties_Recovery0.delay);
      assertEquals(5, atomikosProperties_Recovery0.maxRetries);
      assertEquals(10000L, atomikosProperties_Recovery0.retryInterval);
      assertNotNull(atomikosProperties_Recovery0);
      
      atomikosProperties0.setConsoleFileLimit(atomikosProperties_Recovery0.maxRetries);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(2756L, atomikosProperties0.getCheckpointInterval());
      assertEquals("_?&C x|m(Ey[|D<A)2a", atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals(5, atomikosProperties0.getConsoleFileLimit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(5, atomikosProperties0.consoleFileLimit);
      assertEquals(2756L, atomikosProperties0.checkpointInterval);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals(86400000L, atomikosProperties_Recovery0.forgetOrphanedLogEntriesDelay);
      assertEquals(10000L, atomikosProperties_Recovery0.delay);
      assertEquals(5, atomikosProperties_Recovery0.maxRetries);
      assertEquals(10000L, atomikosProperties_Recovery0.retryInterval);
      
      atomikosProperties_Recovery0.setDelay(atomikosProperties0.checkpointInterval);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(2756L, atomikosProperties0.getCheckpointInterval());
      assertEquals("_?&C x|m(Ey[|D<A)2a", atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals(5, atomikosProperties0.getConsoleFileLimit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(2756L, atomikosProperties_Recovery0.getDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(5, atomikosProperties0.consoleFileLimit);
      assertEquals(2756L, atomikosProperties0.checkpointInterval);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals(86400000L, atomikosProperties_Recovery0.forgetOrphanedLogEntriesDelay);
      assertEquals(5, atomikosProperties_Recovery0.maxRetries);
      assertEquals(10000L, atomikosProperties_Recovery0.retryInterval);
      assertEquals(2756L, atomikosProperties_Recovery0.delay);
      assertTrue(atomikosProperties0.checkpointInterval == long0);
      
      long long1 = 0L;
      boolean boolean0 = false;
      int int0 = 1273;
      atomikosProperties_Recovery0.maxRetries = int0;
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(2756L, atomikosProperties0.getCheckpointInterval());
      assertEquals("_?&C x|m(Ey[|D<A)2a", atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals(5, atomikosProperties0.getConsoleFileLimit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(1273, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(2756L, atomikosProperties_Recovery0.getDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      
      atomikosProperties0.serialJtaTransactions = boolean0;
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(2756L, atomikosProperties0.getCheckpointInterval());
      assertEquals("_?&C x|m(Ey[|D<A)2a", atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals(5, atomikosProperties0.getConsoleFileLimit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      
      atomikosProperties_Recovery0.setForgetOrphanedLogEntriesDelay(long1);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(2756L, atomikosProperties0.getCheckpointInterval());
      assertEquals("_?&C x|m(Ey[|D<A)2a", atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals(5, atomikosProperties0.getConsoleFileLimit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1273, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(2756L, atomikosProperties_Recovery0.getDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(0L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(5, atomikosProperties0.consoleFileLimit);
      assertEquals(2756L, atomikosProperties0.checkpointInterval);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals(1273, atomikosProperties_Recovery0.maxRetries);
      assertEquals(0L, atomikosProperties_Recovery0.forgetOrphanedLogEntriesDelay);
      assertEquals(10000L, atomikosProperties_Recovery0.retryInterval);
      assertEquals(2756L, atomikosProperties_Recovery0.delay);
      assertFalse(long1 == long0);
      
      AtomikosProperties.Recovery atomikosProperties_Recovery1 = atomikosProperties0.getRecovery();
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(2756L, atomikosProperties0.getCheckpointInterval());
      assertEquals("_?&C x|m(Ey[|D<A)2a", atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals(5, atomikosProperties0.getConsoleFileLimit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1273, atomikosProperties_Recovery1.getMaxRetries());
      assertEquals(2756L, atomikosProperties_Recovery1.getDelay());
      assertEquals(0L, atomikosProperties_Recovery1.getForgetOrphanedLogEntriesDelay());
      assertEquals(10000L, atomikosProperties_Recovery1.getRetryInterval());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(5, atomikosProperties0.consoleFileLimit);
      assertEquals(2756L, atomikosProperties0.checkpointInterval);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals(0L, atomikosProperties_Recovery1.forgetOrphanedLogEntriesDelay);
      assertEquals(1273, atomikosProperties_Recovery1.maxRetries);
      assertEquals(2756L, atomikosProperties_Recovery1.delay);
      assertEquals(10000L, atomikosProperties_Recovery1.retryInterval);
      assertSame(atomikosProperties_Recovery1, atomikosProperties_Recovery0);
      assertNotNull(atomikosProperties_Recovery1);
      
      atomikosProperties_Recovery0.delay = long0;
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(2756L, atomikosProperties0.getCheckpointInterval());
      assertEquals("_?&C x|m(Ey[|D<A)2a", atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals(5, atomikosProperties0.getConsoleFileLimit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1273, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(2756L, atomikosProperties_Recovery0.getDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(0L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      
      atomikosProperties0.recovery.setForgetOrphanedLogEntriesDelay(atomikosProperties_Recovery0.retryInterval);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(2756L, atomikosProperties0.getCheckpointInterval());
      assertEquals("_?&C x|m(Ey[|D<A)2a", atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals(5, atomikosProperties0.getConsoleFileLimit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1273, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(2756L, atomikosProperties_Recovery0.getDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(5, atomikosProperties0.consoleFileLimit);
      assertEquals(2756L, atomikosProperties0.checkpointInterval);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals(1273, atomikosProperties_Recovery0.maxRetries);
      assertEquals(10000L, atomikosProperties_Recovery0.forgetOrphanedLogEntriesDelay);
      assertEquals(10000L, atomikosProperties_Recovery0.retryInterval);
      assertEquals(2756L, atomikosProperties_Recovery0.delay);
      assertSame(atomikosProperties_Recovery0, atomikosProperties_Recovery1);
      
      int int1 = 2812;
      atomikosProperties0.setConsoleFileLimit(int1);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(2756L, atomikosProperties0.getCheckpointInterval());
      assertEquals("_?&C x|m(Ey[|D<A)2a", atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(2812, atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(2756L, atomikosProperties0.checkpointInterval);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(2812, atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(int1 == int0);
      
      String string2 = atomikosProperties0.getTransactionManagerUniqueName();
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(2756L, atomikosProperties0.getCheckpointInterval());
      assertEquals("_?&C x|m(Ey[|D<A)2a", atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(2812, atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(2756L, atomikosProperties0.checkpointInterval);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(2812, atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertNull(string2);
      
      atomikosProperties_Recovery0.setMaxRetries(int1);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(2756L, atomikosProperties0.getCheckpointInterval());
      assertEquals("_?&C x|m(Ey[|D<A)2a", atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(2812, atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(2812, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(2756L, atomikosProperties_Recovery0.getDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(2756L, atomikosProperties0.checkpointInterval);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(2812, atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals(2812, atomikosProperties_Recovery0.maxRetries);
      assertEquals(10000L, atomikosProperties_Recovery0.forgetOrphanedLogEntriesDelay);
      assertEquals(10000L, atomikosProperties_Recovery0.retryInterval);
      assertEquals(2756L, atomikosProperties_Recovery0.delay);
      assertSame(atomikosProperties_Recovery0, atomikosProperties_Recovery1);
      assertFalse(int1 == int0);
      
      String string3 = atomikosProperties0.getOutputDir();
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(2756L, atomikosProperties0.getCheckpointInterval());
      assertEquals("_?&C x|m(Ey[|D<A)2a", atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(2812, atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(2756L, atomikosProperties0.checkpointInterval);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(2812, atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals("_?&C x|m(Ey[|D<A)2a", string3);
      assertSame(string3, string1);
      assertSame(string3, string0);
      assertNotNull(string3);
      
      atomikosProperties0.setForceShutdownOnVmExit(boolean0);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(2756L, atomikosProperties0.getCheckpointInterval());
      assertEquals("_?&C x|m(Ey[|D<A)2a", atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(2812, atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(2756L, atomikosProperties0.checkpointInterval);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(2812, atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      
      String string4 = atomikosProperties0.getTransactionManagerUniqueName();
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(2756L, atomikosProperties0.getCheckpointInterval());
      assertEquals("_?&C x|m(Ey[|D<A)2a", atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(2812, atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(2756L, atomikosProperties0.checkpointInterval);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(2812, atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertNull(string4);
      
      boolean boolean1 = atomikosProperties0.isThreadedTwoPhaseCommit();
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(2756L, atomikosProperties0.getCheckpointInterval());
      assertEquals("_?&C x|m(Ey[|D<A)2a", atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(2812, atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(2756L, atomikosProperties0.checkpointInterval);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(2812, atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string5 = null;
      atomikosProperties0.setConsoleFileName(string5);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(2756L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getConsoleFileName());
      assertEquals("_?&C x|m(Ey[|D<A)2a", atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(2812, atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(2756L, atomikosProperties0.checkpointInterval);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(2812, atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
  }

  @Test(timeout = 11000)
  public void test47()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertNotNull(atomikosProperties0);
      
      String string0 = "0FjOdC";
      boolean boolean0 = true;
      atomikosProperties0.setSerialJtaTransactions(boolean0);
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      
      atomikosProperties0.outputDir = string0;
      assertEquals("0FjOdC", atomikosProperties0.getOutputDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      
      int int0 = 0;
      Properties properties0 = atomikosProperties0.asProperties();
      assertEquals("0FjOdC", atomikosProperties0.getOutputDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(19, properties0.size());
      assertFalse(properties0.isEmpty());
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertNotNull(properties0);
      
      String string1 = "M@zQ%2Hd^P<HV>B+~I[";
      atomikosProperties0.set(properties0, string1, string1);
      assertEquals("0FjOdC", atomikosProperties0.getOutputDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(20, properties0.size());
      assertFalse(properties0.isEmpty());
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = false;
      atomikosProperties0.setForceShutdownOnVmExit(boolean1);
      assertEquals("0FjOdC", atomikosProperties0.getOutputDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertFalse(boolean1 == boolean0);
      
      Properties properties1 = atomikosProperties0.asProperties();
      assertEquals("0FjOdC", atomikosProperties0.getOutputDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(19, properties1.size());
      assertFalse(properties1.isEmpty());
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertNotSame(properties1, properties0);
      assertFalse(properties1.equals((Object)properties0));
      assertNotNull(properties1);
      
      String string2 = null;
      atomikosProperties0.service = string2;
      assertEquals("0FjOdC", atomikosProperties0.getOutputDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      
      atomikosProperties0.maxActives = int0;
      assertEquals("0FjOdC", atomikosProperties0.getOutputDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(0, atomikosProperties0.getMaxActives());
      
      String string3 = atomikosProperties0.getLogBaseDir();
      assertEquals("0FjOdC", atomikosProperties0.getOutputDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(0, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertNull(string3);
      
      atomikosProperties0.checkpointInterval = (long) int0;
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertEquals("0FjOdC", atomikosProperties0.getOutputDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(0, atomikosProperties0.getMaxActives());
      
      long long0 = atomikosProperties0.getDefaultJtaTimeout();
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertEquals("0FjOdC", atomikosProperties0.getOutputDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(0, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(0L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(10000L, long0);
      
      boolean boolean2 = atomikosProperties0.isEnableLogging();
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertEquals("0FjOdC", atomikosProperties0.getOutputDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(0, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(0L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      atomikosProperties0.setMaxActives(int0);
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertEquals("0FjOdC", atomikosProperties0.getOutputDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(0, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(0L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      
      int int1 = atomikosProperties0.getMaxActives();
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertEquals("0FjOdC", atomikosProperties0.getOutputDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(0, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(0L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      String string4 = atomikosProperties0.getLogBaseDir();
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertEquals("0FjOdC", atomikosProperties0.getOutputDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(0, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(0L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertNull(string4);
      
      String string5 = atomikosProperties0.getLogBaseDir();
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertEquals("0FjOdC", atomikosProperties0.getOutputDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(0, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(0L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertNull(string5);
  }

  @Test(timeout = 11000)
  public void test48()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertNotNull(atomikosProperties0);
      
      long long0 = 0L;
      atomikosProperties0.setDefaultJtaTimeout(long0);
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(0L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      
      String string0 = atomikosProperties0.getLogBaseDir();
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(0L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertNull(string0);
      
      atomikosProperties0.setOutputDir(string0);
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(0L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      
      AtomikosLoggingLevel atomikosLoggingLevel0 = AtomikosLoggingLevel.WARN;
      atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel0);
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(0L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      
      int int0 = 1799;
      atomikosProperties0.maxActives = int0;
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(1799, atomikosProperties0.getMaxActives());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      
      int int1 = atomikosProperties0.getConsoleFileLimit();
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(1799, atomikosProperties0.getMaxActives());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(1799, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(0L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      AtomikosLoggingLevel atomikosLoggingLevel1 = atomikosProperties0.getConsoleLogLevel();
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(1799, atomikosProperties0.getMaxActives());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(1799, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(0L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(AtomikosLoggingLevel.WARN, atomikosLoggingLevel1);
      assertSame(atomikosLoggingLevel1, atomikosLoggingLevel0);
      
      boolean boolean0 = atomikosProperties0.isSerialJtaTransactions();
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(1799, atomikosProperties0.getMaxActives());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(1799, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(0L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(boolean0);
      
      int int2 = atomikosProperties0.getMaxActives();
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(1799, atomikosProperties0.getMaxActives());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(1799, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(0L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(1799, int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      
      boolean boolean1 = atomikosProperties0.isAllowSubTransactions();
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(1799, atomikosProperties0.getMaxActives());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(1799, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(0L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      AtomikosProperties.Recovery atomikosProperties_Recovery0 = atomikosProperties0.getRecovery();
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(1799, atomikosProperties0.getMaxActives());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(1799, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(0L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(86400000L, atomikosProperties_Recovery0.forgetOrphanedLogEntriesDelay);
      assertEquals(10000L, atomikosProperties_Recovery0.delay);
      assertEquals(10000L, atomikosProperties_Recovery0.retryInterval);
      assertEquals(5, atomikosProperties_Recovery0.maxRetries);
      assertNotNull(atomikosProperties_Recovery0);
      
      long long1 = (-532L);
      atomikosProperties_Recovery0.forgetOrphanedLogEntriesDelay = long1;
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(1799, atomikosProperties0.getMaxActives());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals((-532L), atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      
      atomikosProperties_Recovery0.setDelay(atomikosProperties0.consoleFileLimit);
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(1799, atomikosProperties0.getMaxActives());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals((-532L), atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals((-1L), atomikosProperties_Recovery0.getDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(1799, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(0L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1L), atomikosProperties_Recovery0.delay);
      assertEquals((-532L), atomikosProperties_Recovery0.forgetOrphanedLogEntriesDelay);
      assertEquals(10000L, atomikosProperties_Recovery0.retryInterval);
      assertEquals(5, atomikosProperties_Recovery0.maxRetries);
      
      int int3 = atomikosProperties_Recovery0.getMaxRetries();
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(1799, atomikosProperties0.getMaxActives());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals((-532L), atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals((-1L), atomikosProperties_Recovery0.getDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(1799, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(0L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1L), atomikosProperties_Recovery0.delay);
      assertEquals((-532L), atomikosProperties_Recovery0.forgetOrphanedLogEntriesDelay);
      assertEquals(10000L, atomikosProperties_Recovery0.retryInterval);
      assertEquals(5, atomikosProperties_Recovery0.maxRetries);
      assertEquals(5, int3);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      
      long long2 = atomikosProperties_Recovery0.getRetryInterval();
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(1799, atomikosProperties0.getMaxActives());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals((-532L), atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals((-1L), atomikosProperties_Recovery0.getDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(1799, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(0L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1L), atomikosProperties_Recovery0.delay);
      assertEquals((-532L), atomikosProperties_Recovery0.forgetOrphanedLogEntriesDelay);
      assertEquals(10000L, atomikosProperties_Recovery0.retryInterval);
      assertEquals(5, atomikosProperties_Recovery0.maxRetries);
      assertEquals(10000L, long2);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      
      atomikosProperties0.setLogBaseName(string0);
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(1799, atomikosProperties0.getMaxActives());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(1799, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(0L, atomikosProperties0.defaultJtaTimeout);
      
      String string1 = atomikosProperties0.getLogBaseName();
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(1799, atomikosProperties0.getMaxActives());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(1799, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(0L, atomikosProperties0.defaultJtaTimeout);
      assertNull(string1);
      
      long long3 = 48L;
      atomikosProperties_Recovery0.setForgetOrphanedLogEntriesDelay(long3);
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(1799, atomikosProperties0.getMaxActives());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(48L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals((-1L), atomikosProperties_Recovery0.getDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(1799, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(0L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(48L, atomikosProperties_Recovery0.forgetOrphanedLogEntriesDelay);
      assertEquals((-1L), atomikosProperties_Recovery0.delay);
      assertEquals(10000L, atomikosProperties_Recovery0.retryInterval);
      assertEquals(5, atomikosProperties_Recovery0.maxRetries);
      assertFalse(long3 == long1);
      assertFalse(long3 == long2);
      assertFalse(long3 == long0);
      
      atomikosProperties0.setForceShutdownOnVmExit(boolean1);
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(1799, atomikosProperties0.getMaxActives());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(1799, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals(0L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(boolean1 == boolean0);
      
      long long4 = 0L;
      atomikosProperties0.recovery.setForgetOrphanedLogEntriesDelay(long4);
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(1799, atomikosProperties0.getMaxActives());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(1799, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals(0L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(long4 == long1);
      assertFalse(long4 == long3);
      assertFalse(long4 == long2);
  }

  @Test(timeout = 11000)
  public void test49()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertNotNull(atomikosProperties0);
      
      String string0 = "checkpoint_interval";
      String string1 = "output_dir";
      atomikosProperties0.setOutputDir(string1);
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("output_dir", atomikosProperties0.getOutputDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      
      atomikosProperties0.logBaseName = string0;
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("output_dir", atomikosProperties0.getOutputDir());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("checkpoint_interval", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      
      long long0 = 0L;
      atomikosProperties0.setMaxTimeout(long0);
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals("output_dir", atomikosProperties0.getOutputDir());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("checkpoint_interval", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(0L, atomikosProperties0.maxTimeout);
      
      atomikosProperties0.logBaseDir = string0;
      assertNull(atomikosProperties0.getService());
      assertEquals("checkpoint_interval", atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals("output_dir", atomikosProperties0.getOutputDir());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("checkpoint_interval", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      
      boolean boolean0 = false;
      atomikosProperties0.setAllowSubTransactions(boolean0);
      assertNull(atomikosProperties0.getService());
      assertEquals("checkpoint_interval", atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertEquals("output_dir", atomikosProperties0.getOutputDir());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("checkpoint_interval", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertFalse(atomikosProperties0.allowSubTransactions);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(0L, atomikosProperties0.maxTimeout);
      
      String string2 = "v`x])TrAUl";
      atomikosProperties0.logBaseDir = string2;
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertEquals("output_dir", atomikosProperties0.getOutputDir());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("v`x])TrAUl", atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("checkpoint_interval", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      
      int int0 = (-1143);
      atomikosProperties0.maxActives = int0;
      assertEquals((-1143), atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertEquals("output_dir", atomikosProperties0.getOutputDir());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("v`x])TrAUl", atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("checkpoint_interval", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      
      long long1 = atomikosProperties0.getMaxTimeout();
      assertEquals((-1143), atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertEquals("output_dir", atomikosProperties0.getOutputDir());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("v`x])TrAUl", atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("checkpoint_interval", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals((-1143), atomikosProperties0.maxActives);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertFalse(atomikosProperties0.allowSubTransactions);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(0L, atomikosProperties0.maxTimeout);
      assertEquals(0L, long1);
      assertTrue(long1 == long0);
      
      boolean boolean1 = atomikosProperties0.isForceShutdownOnVmExit();
      assertEquals((-1143), atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertEquals("output_dir", atomikosProperties0.getOutputDir());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("v`x])TrAUl", atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("checkpoint_interval", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals((-1143), atomikosProperties0.maxActives);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertFalse(atomikosProperties0.allowSubTransactions);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(0L, atomikosProperties0.maxTimeout);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = true;
      atomikosProperties0.setEnableLogging(boolean2);
      assertEquals((-1143), atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertEquals("output_dir", atomikosProperties0.getOutputDir());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("v`x])TrAUl", atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("checkpoint_interval", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals((-1143), atomikosProperties0.maxActives);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertFalse(atomikosProperties0.allowSubTransactions);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(0L, atomikosProperties0.maxTimeout);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      boolean boolean3 = atomikosProperties0.isSerialJtaTransactions();
      assertEquals((-1143), atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertEquals("output_dir", atomikosProperties0.getOutputDir());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("v`x])TrAUl", atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("checkpoint_interval", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals((-1143), atomikosProperties0.maxActives);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertFalse(atomikosProperties0.allowSubTransactions);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(0L, atomikosProperties0.maxTimeout);
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      
      String string3 = atomikosProperties0.getConsoleFileName();
      assertEquals((-1143), atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertEquals("output_dir", atomikosProperties0.getOutputDir());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("v`x])TrAUl", atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("checkpoint_interval", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals((-1143), atomikosProperties0.maxActives);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertFalse(atomikosProperties0.allowSubTransactions);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(0L, atomikosProperties0.maxTimeout);
      assertEquals("tm.out", string3);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      atomikosProperties0.setService(string2);
      assertEquals((-1143), atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertEquals("output_dir", atomikosProperties0.getOutputDir());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("v`x])TrAUl", atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("checkpoint_interval", atomikosProperties0.getLogBaseName());
      assertEquals("v`x])TrAUl", atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals((-1143), atomikosProperties0.maxActives);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertFalse(atomikosProperties0.allowSubTransactions);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(0L, atomikosProperties0.maxTimeout);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      
      String string4 = atomikosProperties0.getTransactionManagerUniqueName();
      assertEquals((-1143), atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertEquals("output_dir", atomikosProperties0.getOutputDir());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("v`x])TrAUl", atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("checkpoint_interval", atomikosProperties0.getLogBaseName());
      assertEquals("v`x])TrAUl", atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals((-1143), atomikosProperties0.maxActives);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertFalse(atomikosProperties0.allowSubTransactions);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(0L, atomikosProperties0.maxTimeout);
      assertNull(string4);
      
      boolean boolean4 = atomikosProperties0.isThreadedTwoPhaseCommit();
      assertEquals((-1143), atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertEquals("output_dir", atomikosProperties0.getOutputDir());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("v`x])TrAUl", atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("checkpoint_interval", atomikosProperties0.getLogBaseName());
      assertEquals("v`x])TrAUl", atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals((-1143), atomikosProperties0.maxActives);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertFalse(atomikosProperties0.allowSubTransactions);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(0L, atomikosProperties0.maxTimeout);
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      
      String string5 = null;
      atomikosProperties0.setOutputDir(string5);
      assertEquals((-1143), atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("v`x])TrAUl", atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("checkpoint_interval", atomikosProperties0.getLogBaseName());
      assertEquals("v`x])TrAUl", atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals((-1143), atomikosProperties0.maxActives);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertFalse(atomikosProperties0.allowSubTransactions);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(0L, atomikosProperties0.maxTimeout);
  }

  @Test(timeout = 11000)
  public void test50()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertNotNull(atomikosProperties0);
      
      boolean boolean0 = false;
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      String string0 = "";
      atomikosProperties0.set(properties0, string0, string0);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      
      atomikosProperties0.setThreadedTwoPhaseCommit(boolean0);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      
      String string1 = "console_file_limit";
      atomikosProperties0.setLogBaseName(string1);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("console_file_limit", atomikosProperties0.getLogBaseName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      
      long long0 = (-1L);
      int int0 = (-4174);
      atomikosProperties0.setMaxActives(int0);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals((-4174), atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("console_file_limit", atomikosProperties0.getLogBaseName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals((-4174), atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      
      long long1 = 0L;
      atomikosProperties0.defaultJtaTimeout = long1;
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals((-4174), atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("console_file_limit", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      
      atomikosProperties0.setMaxTimeout(long0);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals((-4174), atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals((-1L), atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("console_file_limit", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(0L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals((-1L), atomikosProperties0.maxTimeout);
      assertEquals((-4174), atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertFalse(long0 == long1);
      
      AtomikosLoggingLevel atomikosLoggingLevel0 = AtomikosLoggingLevel.INFO;
      atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel0);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals((-4174), atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertEquals((-1L), atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("console_file_limit", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(0L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals((-1L), atomikosProperties0.maxTimeout);
      assertEquals((-4174), atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      
      String string2 = atomikosProperties0.getConsoleFileName();
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals((-4174), atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertEquals((-1L), atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("console_file_limit", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(0L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals((-1L), atomikosProperties0.maxTimeout);
      assertEquals((-4174), atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals("tm.out", string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      AtomikosLoggingLevel atomikosLoggingLevel1 = AtomikosLoggingLevel.INFO;
      atomikosProperties0.consoleLogLevel = atomikosLoggingLevel1;
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals((-4174), atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertEquals((-1L), atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("console_file_limit", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      
      long long2 = atomikosProperties0.getDefaultJtaTimeout();
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals((-4174), atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertEquals((-1L), atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("console_file_limit", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(0L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals((-1L), atomikosProperties0.maxTimeout);
      assertEquals((-4174), atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(0L, long2);
      assertFalse(long2 == long0);
      assertTrue(long2 == long1);
      
      AtomikosLoggingLevel atomikosLoggingLevel2 = AtomikosLoggingLevel.INFO;
      atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel2);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals((-4174), atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertEquals((-1L), atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("console_file_limit", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(0L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals((-1L), atomikosProperties0.maxTimeout);
      assertEquals((-4174), atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertSame(atomikosLoggingLevel2, atomikosLoggingLevel1);
      assertSame(atomikosLoggingLevel2, atomikosLoggingLevel0);
      
      atomikosProperties0.setOutputDir(string2);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tm.out", atomikosProperties0.getOutputDir());
      assertEquals((-4174), atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertEquals((-1L), atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("console_file_limit", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(0L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals((-1L), atomikosProperties0.maxTimeout);
      assertEquals((-4174), atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 11000)
  public void test51()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getService());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertNotNull(atomikosProperties0);
      
      boolean boolean0 = true;
      atomikosProperties0.setEnableLogging(boolean0);
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getService());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.allowSubTransactions);
      
      boolean boolean1 = true;
      atomikosProperties0.setThreadedTwoPhaseCommit(boolean1);
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getService());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.allowSubTransactions);
      
      boolean boolean2 = false;
      long long0 = 0L;
      atomikosProperties0.setDefaultJtaTimeout(long0);
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getService());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(0L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.allowSubTransactions);
      
      atomikosProperties0.setForceShutdownOnVmExit(boolean2);
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getService());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(0L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      long long1 = (-991L);
      atomikosProperties0.setMaxTimeout(long1);
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getService());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-991L), atomikosProperties0.getMaxTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals((-991L), atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(0L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertFalse(long1 == long0);
      
      boolean boolean3 = atomikosProperties0.isThreadedTwoPhaseCommit();
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getService());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-991L), atomikosProperties0.getMaxTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals((-991L), atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(0L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      
      atomikosProperties0.setSerialJtaTransactions(boolean1);
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getService());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-991L), atomikosProperties0.getMaxTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals((-991L), atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(0L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(boolean1 == boolean3);
      assertFalse(boolean1 == boolean2);
  }

  @Test(timeout = 11000)
  public void test52()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertNotNull(atomikosProperties0);
      
      String string0 = "vrE";
      atomikosProperties0.setConsoleFileName(string0);
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("vrE", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      
      String string1 = null;
      atomikosProperties0.setConsoleFileName(string1);
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      
      boolean boolean0 = atomikosProperties0.isEnableLogging();
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(boolean0);
      
      String string2 = atomikosProperties0.getLogBaseDir();
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertNull(string2);
      
      String string3 = "io.undertow.servlet.api.ErrorPage";
      atomikosProperties0.outputDir = string3;
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("io.undertow.servlet.api.ErrorPage", atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      
      String string4 = "";
      atomikosProperties0.setService(string4);
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("", atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("io.undertow.servlet.api.ErrorPage", atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      
      atomikosProperties0.setLogBaseName(string2);
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseName());
      assertEquals("", atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("io.undertow.servlet.api.ErrorPage", atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      
      atomikosProperties0.setLogBaseDir(string1);
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseName());
      assertEquals("", atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("io.undertow.servlet.api.ErrorPage", atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      
      int int0 = 138;
      atomikosProperties0.setMaxActives(int0);
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getConsoleFileName());
      assertEquals(138, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseName());
      assertEquals("", atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("io.undertow.servlet.api.ErrorPage", atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(138, atomikosProperties0.maxActives);
      
      long long0 = atomikosProperties0.getDefaultJtaTimeout();
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getConsoleFileName());
      assertEquals(138, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseName());
      assertEquals("", atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("io.undertow.servlet.api.ErrorPage", atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(138, atomikosProperties0.maxActives);
      assertEquals(10000L, long0);
      
      AtomikosLoggingLevel atomikosLoggingLevel0 = atomikosProperties0.getConsoleLogLevel();
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getConsoleFileName());
      assertEquals(138, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseName());
      assertEquals("", atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("io.undertow.servlet.api.ErrorPage", atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(138, atomikosProperties0.maxActives);
      assertEquals(AtomikosLoggingLevel.WARN, atomikosLoggingLevel0);
      
      AtomikosProperties.Recovery atomikosProperties_Recovery0 = atomikosProperties0.getRecovery();
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getConsoleFileName());
      assertEquals(138, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseName());
      assertEquals("", atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("io.undertow.servlet.api.ErrorPage", atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(138, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties_Recovery0.delay);
      assertEquals(86400000L, atomikosProperties_Recovery0.forgetOrphanedLogEntriesDelay);
      assertEquals(5, atomikosProperties_Recovery0.maxRetries);
      assertEquals(10000L, atomikosProperties_Recovery0.retryInterval);
      assertNotNull(atomikosProperties_Recovery0);
      
      long long1 = 0L;
      atomikosProperties_Recovery0.setDelay(long1);
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getConsoleFileName());
      assertEquals(138, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseName());
      assertEquals("", atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("io.undertow.servlet.api.ErrorPage", atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(0L, atomikosProperties_Recovery0.getDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(138, atomikosProperties0.maxActives);
      assertEquals(86400000L, atomikosProperties_Recovery0.forgetOrphanedLogEntriesDelay);
      assertEquals(5, atomikosProperties_Recovery0.maxRetries);
      assertEquals(0L, atomikosProperties_Recovery0.delay);
      assertEquals(10000L, atomikosProperties_Recovery0.retryInterval);
      assertFalse(long1 == long0);
      
      long long2 = 2725L;
      atomikosProperties_Recovery0.retryInterval = long2;
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getConsoleFileName());
      assertEquals(138, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseName());
      assertEquals("", atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("io.undertow.servlet.api.ErrorPage", atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(2725L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(0L, atomikosProperties_Recovery0.getDelay());
      
      long long3 = (-2467L);
      atomikosProperties_Recovery0.retryInterval = long3;
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getConsoleFileName());
      assertEquals(138, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseName());
      assertEquals("", atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("io.undertow.servlet.api.ErrorPage", atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals((-2467L), atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(0L, atomikosProperties_Recovery0.getDelay());
      
      atomikosProperties_Recovery0.setMaxRetries(atomikosProperties0.maxActives);
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getConsoleFileName());
      assertEquals(138, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseName());
      assertEquals("", atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("io.undertow.servlet.api.ErrorPage", atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(138, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals((-2467L), atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(0L, atomikosProperties_Recovery0.getDelay());
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(138, atomikosProperties0.maxActives);
      assertEquals(86400000L, atomikosProperties_Recovery0.forgetOrphanedLogEntriesDelay);
      assertEquals((-2467L), atomikosProperties_Recovery0.retryInterval);
      assertEquals(0L, atomikosProperties_Recovery0.delay);
      assertEquals(138, atomikosProperties_Recovery0.maxRetries);
      
      atomikosProperties0.setOutputDir(string4);
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getConsoleFileName());
      assertEquals(138, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseName());
      assertEquals("", atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals("", atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(138, atomikosProperties0.maxActives);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      
      long long4 = (-2071L);
      atomikosProperties_Recovery0.forgetOrphanedLogEntriesDelay = long4;
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getConsoleFileName());
      assertEquals(138, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseName());
      assertEquals("", atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals("", atomikosProperties0.getOutputDir());
      assertEquals(138, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals((-2071L), atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals((-2467L), atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(0L, atomikosProperties_Recovery0.getDelay());
      
      String string5 = atomikosProperties0.getOutputDir();
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getConsoleFileName());
      assertEquals(138, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseName());
      assertEquals("", atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals("", atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(138, atomikosProperties0.maxActives);
      assertEquals("", string5);
      assertNotSame(string5, string0);
      assertSame(string5, string4);
      assertNotSame(string5, string3);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      atomikosProperties0.setSerialJtaTransactions(boolean0);
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getConsoleFileName());
      assertEquals(138, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseName());
      assertEquals("", atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals("", atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(138, atomikosProperties0.maxActives);
      
      atomikosProperties0.setDefaultJtaTimeout(atomikosProperties_Recovery0.maxRetries);
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getConsoleFileName());
      assertEquals(138, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseName());
      assertEquals("", atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(138L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals("", atomikosProperties0.getOutputDir());
      assertEquals(138, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals((-2071L), atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals((-2467L), atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(0L, atomikosProperties_Recovery0.getDelay());
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(138L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(138, atomikosProperties0.maxActives);
      assertEquals((-2071L), atomikosProperties_Recovery0.forgetOrphanedLogEntriesDelay);
      assertEquals((-2467L), atomikosProperties_Recovery0.retryInterval);
      assertEquals(0L, atomikosProperties_Recovery0.delay);
      assertEquals(138, atomikosProperties_Recovery0.maxRetries);
      
      atomikosProperties0.setConsoleFileName(string3);
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(138, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("io.undertow.servlet.api.ErrorPage", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseName());
      assertEquals("", atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(138L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals("", atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(138L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(138, atomikosProperties0.maxActives);
      assertNotSame(string3, string4);
      assertNotSame(string3, string5);
      assertNotSame(string3, string0);
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string0));
      
      String string6 = atomikosProperties0.getLogBaseName();
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(138, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("io.undertow.servlet.api.ErrorPage", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseName());
      assertEquals("", atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(138L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals("", atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(138L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(138, atomikosProperties0.maxActives);
      assertNull(string6);
      
      boolean boolean1 = atomikosProperties0.isThreadedTwoPhaseCommit();
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(138, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("io.undertow.servlet.api.ErrorPage", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseName());
      assertEquals("", atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(138L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals("", atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(138L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(138, atomikosProperties0.maxActives);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string7 = atomikosProperties0.getConsoleFileName();
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(138, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("io.undertow.servlet.api.ErrorPage", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseName());
      assertEquals("", atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(138L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals("", atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(138L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(138, atomikosProperties0.maxActives);
      assertEquals("io.undertow.servlet.api.ErrorPage", string7);
      assertNotSame(string7, string0);
      assertNotSame(string7, string4);
      assertNotSame(string7, string5);
      assertSame(string7, string3);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertNotNull(string7);
  }

  @Test(timeout = 11000)
  public void test53()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertNotNull(atomikosProperties0);
      
      Properties properties0 = atomikosProperties0.asProperties();
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(18, properties0.size());
      assertFalse(properties0.isEmpty());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertNotNull(properties0);
      
      String string0 = "";
      atomikosProperties0.set(properties0, string0, properties0);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(properties0.isEmpty());
      assertEquals(19, properties0.size());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      
      String string1 = "TDi',";
      int int0 = 0;
      atomikosProperties0.setConsoleFileLimit(int0);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(0, atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      
      boolean boolean0 = false;
      atomikosProperties0.forceShutdownOnVmExit = boolean0;
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      
      atomikosProperties0.setLogBaseDir(string1);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("TDi',", atomikosProperties0.getLogBaseDir());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(0, atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = "maxSavePostSize";
      Properties properties1 = atomikosProperties0.asProperties();
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("TDi',", atomikosProperties0.getLogBaseDir());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(19, properties1.size());
      assertFalse(properties1.isEmpty());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(0, atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertNotSame(properties1, properties0);
      assertFalse(properties1.equals((Object)properties0));
      assertNotNull(properties1);
      
      Object object0 = properties1.put(string2, atomikosProperties0);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("TDi',", atomikosProperties0.getLogBaseDir());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(20, properties1.size());
      assertFalse(properties1.isEmpty());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(0, atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(properties1, properties0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(properties1.equals((Object)properties0));
      assertNull(object0);
      
      String string3 = "oltp_max_retries";
      atomikosProperties0.set(properties1, string3, string2);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("TDi',", atomikosProperties0.getLogBaseDir());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(20, properties1.size());
      assertFalse(properties1.isEmpty());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(0, atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(properties1, properties0);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(properties1.equals((Object)properties0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      atomikosProperties0.setTransactionManagerUniqueName(string2);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("maxSavePostSize", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("TDi',", atomikosProperties0.getLogBaseDir());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(0, atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      
      boolean boolean1 = atomikosProperties0.isForceShutdownOnVmExit();
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("maxSavePostSize", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("TDi',", atomikosProperties0.getLogBaseDir());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(0, atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      long long0 = atomikosProperties0.getMaxTimeout();
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("maxSavePostSize", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("TDi',", atomikosProperties0.getLogBaseDir());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(0, atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(300000L, long0);
  }

  @Test(timeout = 11000)
  public void test54()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getService());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertNotNull(atomikosProperties0);
      
      AtomikosLoggingLevel atomikosLoggingLevel0 = AtomikosLoggingLevel.WARN;
      atomikosProperties0.consoleLogLevel = atomikosLoggingLevel0;
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getService());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      
      long long0 = 2000L;
      atomikosProperties0.setCheckpointInterval(long0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(2000L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(2000L, atomikosProperties0.checkpointInterval);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      
      boolean boolean0 = true;
      atomikosProperties0.setAllowSubTransactions(boolean0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(2000L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(2000L, atomikosProperties0.checkpointInterval);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      
      int int0 = atomikosProperties0.getMaxActives();
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(2000L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(2000L, atomikosProperties0.checkpointInterval);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, int0);
      
      String string0 = null;
      atomikosProperties0.setLogBaseDir(string0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(2000L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(2000L, atomikosProperties0.checkpointInterval);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      
      AtomikosProperties.Recovery atomikosProperties_Recovery0 = atomikosProperties0.getRecovery();
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(2000L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(2000L, atomikosProperties0.checkpointInterval);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(10000L, atomikosProperties_Recovery0.delay);
      assertEquals(5, atomikosProperties_Recovery0.maxRetries);
      assertEquals(86400000L, atomikosProperties_Recovery0.forgetOrphanedLogEntriesDelay);
      assertEquals(10000L, atomikosProperties_Recovery0.retryInterval);
      assertNotNull(atomikosProperties_Recovery0);
      
      Properties properties0 = atomikosProperties0.asProperties();
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(2000L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(18, properties0.size());
      assertFalse(properties0.isEmpty());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(2000L, atomikosProperties0.checkpointInterval);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertNotNull(properties0);
      
      atomikosProperties0.setThreadedTwoPhaseCommit(boolean0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(2000L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(2000L, atomikosProperties0.checkpointInterval);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.threadedTwoPhaseCommit);
      
      String string1 = "74Wcex%o4Mz)";
      atomikosProperties0.setLogBaseDir(string1);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(2000L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("74Wcex%o4Mz)", atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(2000L, atomikosProperties0.checkpointInterval);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.threadedTwoPhaseCommit);
      
      int int1 = 351608024;
      atomikosProperties0.setConsoleFileCount(int1);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(2000L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("74Wcex%o4Mz)", atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(351608024, atomikosProperties0.getConsoleFileCount());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(351608024, atomikosProperties0.consoleFileCount);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(2000L, atomikosProperties0.checkpointInterval);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.threadedTwoPhaseCommit);
      assertFalse(int1 == int0);
      
      System.setCurrentTimeMillis(atomikosProperties0.defaultJtaTimeout);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(2000L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("74Wcex%o4Mz)", atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(351608024, atomikosProperties0.getConsoleFileCount());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(351608024, atomikosProperties0.consoleFileCount);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(2000L, atomikosProperties0.checkpointInterval);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.threadedTwoPhaseCommit);
      
      AtomikosLoggingLevel atomikosLoggingLevel1 = atomikosProperties0.getConsoleLogLevel();
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(2000L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("74Wcex%o4Mz)", atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(351608024, atomikosProperties0.getConsoleFileCount());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(351608024, atomikosProperties0.consoleFileCount);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(2000L, atomikosProperties0.checkpointInterval);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(AtomikosLoggingLevel.WARN, atomikosLoggingLevel1);
      assertSame(atomikosLoggingLevel1, atomikosLoggingLevel0);
      
      Properties properties1 = atomikosProperties0.asProperties();
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(2000L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("74Wcex%o4Mz)", atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(351608024, atomikosProperties0.getConsoleFileCount());
      assertFalse(properties1.isEmpty());
      assertEquals(19, properties1.size());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(351608024, atomikosProperties0.consoleFileCount);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(2000L, atomikosProperties0.checkpointInterval);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.threadedTwoPhaseCommit);
      assertNotSame(properties1, properties0);
      assertFalse(properties1.equals((Object)properties0));
      assertNotNull(properties1);
      
      AtomikosLoggingLevel atomikosLoggingLevel2 = atomikosProperties0.getConsoleLogLevel();
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(2000L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("74Wcex%o4Mz)", atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(351608024, atomikosProperties0.getConsoleFileCount());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(351608024, atomikosProperties0.consoleFileCount);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(2000L, atomikosProperties0.checkpointInterval);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(AtomikosLoggingLevel.WARN, atomikosLoggingLevel2);
      assertSame(atomikosLoggingLevel2, atomikosLoggingLevel0);
      assertSame(atomikosLoggingLevel2, atomikosLoggingLevel1);
      
      AtomikosProperties.Recovery atomikosProperties_Recovery1 = atomikosProperties0.getRecovery();
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(2000L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("74Wcex%o4Mz)", atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(351608024, atomikosProperties0.getConsoleFileCount());
      assertEquals(5, atomikosProperties_Recovery1.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery1.getDelay());
      assertEquals(86400000L, atomikosProperties_Recovery1.getForgetOrphanedLogEntriesDelay());
      assertEquals(10000L, atomikosProperties_Recovery1.getRetryInterval());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(351608024, atomikosProperties0.consoleFileCount);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(2000L, atomikosProperties0.checkpointInterval);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(10000L, atomikosProperties_Recovery1.delay);
      assertEquals(86400000L, atomikosProperties_Recovery1.forgetOrphanedLogEntriesDelay);
      assertEquals(10000L, atomikosProperties_Recovery1.retryInterval);
      assertEquals(5, atomikosProperties_Recovery1.maxRetries);
      assertSame(atomikosProperties_Recovery1, atomikosProperties_Recovery0);
      assertNotNull(atomikosProperties_Recovery1);
      
      String string2 = atomikosProperties0.getService();
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(2000L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("74Wcex%o4Mz)", atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(351608024, atomikosProperties0.getConsoleFileCount());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(351608024, atomikosProperties0.consoleFileCount);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(2000L, atomikosProperties0.checkpointInterval);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.threadedTwoPhaseCommit);
      assertNull(string2);
      
      String string3 = atomikosProperties0.getService();
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(2000L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("74Wcex%o4Mz)", atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(351608024, atomikosProperties0.getConsoleFileCount());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(351608024, atomikosProperties0.consoleFileCount);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(2000L, atomikosProperties0.checkpointInterval);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.threadedTwoPhaseCommit);
      assertNull(string3);
  }

  @Test(timeout = 11000)
  public void test55()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getService());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertNotNull(atomikosProperties0);
      
      String string0 = null;
      atomikosProperties0.setTransactionManagerUniqueName(string0);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getService());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      
      boolean boolean0 = true;
      long long0 = (-1119L);
      atomikosProperties0.setDefaultJtaTimeout(long0);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals((-1119L), atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getService());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals((-1119L), atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.enableLogging);
      
      atomikosProperties0.setForceShutdownOnVmExit(boolean0);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals((-1119L), atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getService());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals((-1119L), atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.enableLogging);
      
      AtomikosLoggingLevel atomikosLoggingLevel0 = AtomikosLoggingLevel.WARN;
      atomikosProperties0.consoleLogLevel = atomikosLoggingLevel0;
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals((-1119L), atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getService());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      
      boolean boolean1 = false;
      String string1 = "";
      atomikosProperties0.logBaseDir = string1;
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals((-1119L), atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getService());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      
      atomikosProperties0.forceShutdownOnVmExit = boolean1;
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals((-1119L), atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getService());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      
      atomikosProperties0.serialJtaTransactions = boolean1;
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals((-1119L), atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      
      int int0 = 0;
      atomikosProperties0.consoleFileLimit = int0;
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertEquals((-1119L), atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      
      boolean boolean2 = atomikosProperties0.isThreadedTwoPhaseCommit();
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertEquals((-1119L), atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(0, atomikosProperties0.consoleFileLimit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals((-1119L), atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.serialJtaTransactions);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      boolean boolean3 = atomikosProperties0.isThreadedTwoPhaseCommit();
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertEquals((-1119L), atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(0, atomikosProperties0.consoleFileLimit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals((-1119L), atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.serialJtaTransactions);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      
      long long1 = atomikosProperties0.getDefaultJtaTimeout();
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertEquals((-1119L), atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(0, atomikosProperties0.consoleFileLimit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals((-1119L), atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.serialJtaTransactions);
      assertEquals((-1119L), long1);
      assertTrue(long1 == long0);
      
      boolean boolean4 = false;
      atomikosProperties0.setForceShutdownOnVmExit(boolean4);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertEquals((-1119L), atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(0, atomikosProperties0.consoleFileLimit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals((-1119L), atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.serialJtaTransactions);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
  }

  @Test(timeout = 11000)
  public void test56()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals(50, atomikosProperties0.maxActives);
      assertNotNull(atomikosProperties0);
      
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      String string0 = "X2~6A>(}V{SVTRhFAP";
      Object object0 = null;
      atomikosProperties0.set(properties0, string0, object0);
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals(50, atomikosProperties0.maxActives);
      
      AtomikosProperties.Recovery atomikosProperties_Recovery0 = atomikosProperties0.getRecovery();
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties_Recovery0.delay);
      assertEquals(86400000L, atomikosProperties_Recovery0.forgetOrphanedLogEntriesDelay);
      assertEquals(5, atomikosProperties_Recovery0.maxRetries);
      assertEquals(10000L, atomikosProperties_Recovery0.retryInterval);
      assertNotNull(atomikosProperties_Recovery0);
      
      boolean boolean0 = true;
      atomikosProperties0.enableLogging = boolean0;
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      
      long long0 = 446L;
      atomikosProperties_Recovery0.setDelay(long0);
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(446L, atomikosProperties_Recovery0.getDelay());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(446L, atomikosProperties_Recovery0.delay);
      assertEquals(86400000L, atomikosProperties_Recovery0.forgetOrphanedLogEntriesDelay);
      assertEquals(5, atomikosProperties_Recovery0.maxRetries);
      assertEquals(10000L, atomikosProperties_Recovery0.retryInterval);
      
      String string1 = atomikosProperties0.getLogBaseName();
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals("tmlog", string1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 11000)
  public void test57()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(50, atomikosProperties0.maxActives);
      assertNotNull(atomikosProperties0);
      
      boolean boolean0 = false;
      String string0 = "(}";
      atomikosProperties0.setLogBaseDir(string0);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("(}", atomikosProperties0.getLogBaseDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(50, atomikosProperties0.maxActives);
      
      atomikosProperties0.enableLogging = boolean0;
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("(}", atomikosProperties0.getLogBaseDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      
      boolean boolean1 = false;
      String string1 = "Introspecting ";
      atomikosProperties0.service = string1;
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("(}", atomikosProperties0.getLogBaseDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("Introspecting ", atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      
      atomikosProperties0.setEnableLogging(boolean1);
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("(}", atomikosProperties0.getLogBaseDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("Introspecting ", atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertFalse(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(50, atomikosProperties0.maxActives);
      
      long long0 = 0L;
      atomikosProperties0.checkpointInterval = long0;
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("(}", atomikosProperties0.getLogBaseDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("Introspecting ", atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      
      boolean boolean2 = false;
      boolean boolean3 = false;
      atomikosProperties0.allowSubTransactions = boolean3;
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("(}", atomikosProperties0.getLogBaseDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("Introspecting ", atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      
      atomikosProperties0.enableLogging = boolean2;
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("(}", atomikosProperties0.getLogBaseDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("Introspecting ", atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      
      String string2 = "xn1";
      atomikosProperties0.serialJtaTransactions = boolean1;
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("(}", atomikosProperties0.getLogBaseDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("Introspecting ", atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      
      atomikosProperties0.logBaseName = string2;
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("(}", atomikosProperties0.getLogBaseDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("Introspecting ", atomikosProperties0.getService());
      assertEquals("xn1", atomikosProperties0.getLogBaseName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      
      String string3 = atomikosProperties0.getLogBaseDir();
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("(}", atomikosProperties0.getLogBaseDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("Introspecting ", atomikosProperties0.getService());
      assertEquals("xn1", atomikosProperties0.getLogBaseName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertFalse(atomikosProperties0.serialJtaTransactions);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(0L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.enableLogging);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals("(}", string3);
      assertSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      atomikosProperties0.setEnableLogging(boolean0);
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("(}", atomikosProperties0.getLogBaseDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("Introspecting ", atomikosProperties0.getService());
      assertEquals("xn1", atomikosProperties0.getLogBaseName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertFalse(atomikosProperties0.serialJtaTransactions);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(0L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.enableLogging);
      assertEquals(50, atomikosProperties0.maxActives);
      
      atomikosProperties0.setEnableLogging(boolean1);
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("(}", atomikosProperties0.getLogBaseDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("Introspecting ", atomikosProperties0.getService());
      assertEquals("xn1", atomikosProperties0.getLogBaseName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertFalse(atomikosProperties0.serialJtaTransactions);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(0L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.enableLogging);
      assertEquals(50, atomikosProperties0.maxActives);
      
      AtomikosProperties.Recovery atomikosProperties_Recovery0 = atomikosProperties0.getRecovery();
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("(}", atomikosProperties0.getLogBaseDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("Introspecting ", atomikosProperties0.getService());
      assertEquals("xn1", atomikosProperties0.getLogBaseName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertFalse(atomikosProperties0.serialJtaTransactions);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(0L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.enableLogging);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(5, atomikosProperties_Recovery0.maxRetries);
      assertEquals(10000L, atomikosProperties_Recovery0.retryInterval);
      assertEquals(86400000L, atomikosProperties_Recovery0.forgetOrphanedLogEntriesDelay);
      assertEquals(10000L, atomikosProperties_Recovery0.delay);
      assertNotNull(atomikosProperties_Recovery0);
      
      atomikosProperties_Recovery0.setRetryInterval(atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("(}", atomikosProperties0.getLogBaseDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("Introspecting ", atomikosProperties0.getService());
      assertEquals("xn1", atomikosProperties0.getLogBaseName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(300000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertFalse(atomikosProperties0.serialJtaTransactions);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(0L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.enableLogging);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(5, atomikosProperties_Recovery0.maxRetries);
      assertEquals(300000L, atomikosProperties_Recovery0.retryInterval);
      assertEquals(86400000L, atomikosProperties_Recovery0.forgetOrphanedLogEntriesDelay);
      assertEquals(10000L, atomikosProperties_Recovery0.delay);
      
      long long1 = atomikosProperties_Recovery0.getDelay();
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("(}", atomikosProperties0.getLogBaseDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("Introspecting ", atomikosProperties0.getService());
      assertEquals("xn1", atomikosProperties0.getLogBaseName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(300000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertFalse(atomikosProperties0.serialJtaTransactions);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(0L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.enableLogging);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(5, atomikosProperties_Recovery0.maxRetries);
      assertEquals(300000L, atomikosProperties_Recovery0.retryInterval);
      assertEquals(86400000L, atomikosProperties_Recovery0.forgetOrphanedLogEntriesDelay);
      assertEquals(10000L, atomikosProperties_Recovery0.delay);
      assertEquals(10000L, long1);
      assertFalse(long1 == long0);
      
      boolean boolean4 = atomikosProperties0.isSerialJtaTransactions();
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("(}", atomikosProperties0.getLogBaseDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("Introspecting ", atomikosProperties0.getService());
      assertEquals("xn1", atomikosProperties0.getLogBaseName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertFalse(atomikosProperties0.serialJtaTransactions);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(0L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.enableLogging);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      
      long long2 = atomikosProperties0.getDefaultJtaTimeout();
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("(}", atomikosProperties0.getLogBaseDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("Introspecting ", atomikosProperties0.getService());
      assertEquals("xn1", atomikosProperties0.getLogBaseName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertFalse(atomikosProperties0.serialJtaTransactions);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(0L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.enableLogging);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, long2);
      assertTrue(long2 == long1);
      assertFalse(long2 == long0);
      
      String string4 = atomikosProperties0.getOutputDir();
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("(}", atomikosProperties0.getLogBaseDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("Introspecting ", atomikosProperties0.getService());
      assertEquals("xn1", atomikosProperties0.getLogBaseName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertFalse(atomikosProperties0.serialJtaTransactions);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(0L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.enableLogging);
      assertEquals(50, atomikosProperties0.maxActives);
      assertNull(string4);
      
      atomikosProperties0.setLogBaseName(string0);
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("(}", atomikosProperties0.getLogBaseDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertEquals("(}", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("Introspecting ", atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertFalse(atomikosProperties0.serialJtaTransactions);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(0L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.enableLogging);
      assertEquals(50, atomikosProperties0.maxActives);
      assertNotSame(string0, string2);
      assertSame(string0, string3);
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      
      atomikosProperties0.setCheckpointInterval(long2);
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("(}", atomikosProperties0.getLogBaseDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertEquals("(}", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("Introspecting ", atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertFalse(atomikosProperties0.serialJtaTransactions);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertFalse(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.checkpointInterval);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(long2 == long1);
      assertFalse(long2 == long0);
      
      boolean boolean5 = atomikosProperties0.isEnableLogging();
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("(}", atomikosProperties0.getLogBaseDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertEquals("(}", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals("Introspecting ", atomikosProperties0.getService());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertFalse(atomikosProperties0.serialJtaTransactions);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertFalse(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.checkpointInterval);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(boolean5);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean1);
  }

  @Test(timeout = 11000)
  public void test58()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertNotNull(atomikosProperties0);
      
      int int0 = 2520;
      boolean boolean0 = true;
      atomikosProperties0.serialJtaTransactions = boolean0;
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      
      String string0 = "07~D;zo9}*5u-";
      long long0 = 2603L;
      atomikosProperties0.setDefaultJtaTimeout(long0);
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(2603L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(2603L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      
      AtomikosLoggingLevel atomikosLoggingLevel0 = AtomikosLoggingLevel.WARN;
      atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel0);
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(2603L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(2603L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      
      atomikosProperties0.service = string0;
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(2603L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("07~D;zo9}*5u-", atomikosProperties0.getService());
      
      atomikosProperties0.setForceShutdownOnVmExit(boolean0);
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(2603L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("07~D;zo9}*5u-", atomikosProperties0.getService());
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(2603L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      
      atomikosProperties0.setConsoleFileCount(int0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(2520, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(2603L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("07~D;zo9}*5u-", atomikosProperties0.getService());
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(2603L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(2520, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      
      String string1 = "Cj]R`-34hcJx[rS+:|I";
      atomikosProperties0.setService(string1);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(2520, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("Cj]R`-34hcJx[rS+:|I", atomikosProperties0.getService());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(2603L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(2603L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(2520, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      
      AtomikosLoggingLevel atomikosLoggingLevel1 = AtomikosLoggingLevel.DEBUG;
      atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel1);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(2520, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("Cj]R`-34hcJx[rS+:|I", atomikosProperties0.getService());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.DEBUG, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(2603L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(2603L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(2520, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertNotSame(atomikosLoggingLevel1, atomikosLoggingLevel0);
      assertFalse(atomikosLoggingLevel1.equals((Object)atomikosLoggingLevel0));
      
      Properties properties0 = atomikosProperties0.asProperties();
      assertEquals(19, properties0.size());
      assertFalse(properties0.isEmpty());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(2520, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("Cj]R`-34hcJx[rS+:|I", atomikosProperties0.getService());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.DEBUG, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(2603L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(2603L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(2520, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertNotNull(properties0);
      
      Properties properties1 = null;
      // Undeclared exception!
      try { 
        atomikosProperties0.set(properties1, string1, string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.jta.atomikos.AtomikosProperties", e);
      }
  }

  @Test(timeout = 11000)
  public void test59()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals(50, atomikosProperties0.maxActives);
      assertNotNull(atomikosProperties0);
      
      boolean boolean0 = true;
      atomikosProperties0.setThreadedTwoPhaseCommit(boolean0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals(50, atomikosProperties0.maxActives);
      
      boolean boolean1 = false;
      atomikosProperties0.setSerialJtaTransactions(boolean1);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.serialJtaTransactions);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(boolean1 == boolean0);
      
      int int0 = 0;
      String string0 = "Wj";
      atomikosProperties0.outputDir = string0;
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals("Wj", atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getService());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      
      atomikosProperties0.consoleFileCount = int0;
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals("Wj", atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getService());
      assertEquals(0, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      
      atomikosProperties0.consoleFileName = string0;
      assertEquals("Wj", atomikosProperties0.getConsoleFileName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals("Wj", atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getService());
      assertEquals(0, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      
      String string1 = "";
      atomikosProperties0.setLogBaseName(string1);
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertEquals("Wj", atomikosProperties0.getConsoleFileName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals("Wj", atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getService());
      assertEquals(0, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.serialJtaTransactions);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(0, atomikosProperties0.consoleFileCount);
      assertEquals(50, atomikosProperties0.maxActives);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      
      atomikosProperties0.setConsoleFileLimit(int0);
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertEquals("Wj", atomikosProperties0.getConsoleFileName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals("Wj", atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getService());
      assertEquals(0, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(0, atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.serialJtaTransactions);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(0, atomikosProperties0.consoleFileCount);
      assertEquals(50, atomikosProperties0.maxActives);
      
      boolean boolean2 = atomikosProperties0.isAllowSubTransactions();
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertEquals("Wj", atomikosProperties0.getConsoleFileName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals("Wj", atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getService());
      assertEquals(0, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(0, atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.serialJtaTransactions);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(0, atomikosProperties0.consoleFileCount);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      atomikosProperties0.setSerialJtaTransactions(boolean0);
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertEquals("Wj", atomikosProperties0.getConsoleFileName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals("Wj", atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(0, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(0, atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(0, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(boolean0 == boolean2);
      assertFalse(boolean0 == boolean1);
      
      atomikosProperties0.setEnableLogging(boolean2);
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertEquals("Wj", atomikosProperties0.getConsoleFileName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals("Wj", atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(0, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(0, atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(0, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      int int1 = atomikosProperties0.getConsoleFileCount();
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertEquals("Wj", atomikosProperties0.getConsoleFileName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals("Wj", atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(0, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(0, atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(0, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      atomikosProperties0.setMaxTimeout(int1);
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertEquals("Wj", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals("Wj", atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(0, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(0, atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(0, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(0L, atomikosProperties0.maxTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(int1 == int0);
      
      atomikosProperties0.setTransactionManagerUniqueName(string0);
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertEquals("Wj", atomikosProperties0.getConsoleFileName());
      assertEquals("Wj", atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals("Wj", atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(0, atomikosProperties0.getConsoleFileCount());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(0, atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(0, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(0L, atomikosProperties0.maxTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
      
      long long0 = 0L;
      atomikosProperties0.setMaxTimeout(long0);
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertEquals("Wj", atomikosProperties0.getConsoleFileName());
      assertEquals("Wj", atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals("Wj", atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(0, atomikosProperties0.getConsoleFileCount());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(0, atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(0, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(0L, atomikosProperties0.maxTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      
      atomikosProperties0.setLogBaseDir(string0);
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertEquals("Wj", atomikosProperties0.getLogBaseDir());
      assertEquals("Wj", atomikosProperties0.getConsoleFileName());
      assertEquals("Wj", atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals("Wj", atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(0, atomikosProperties0.getConsoleFileCount());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(0, atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(0, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(0L, atomikosProperties0.maxTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
      
      AtomikosProperties.Recovery atomikosProperties_Recovery0 = atomikosProperties0.recovery;
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(5, atomikosProperties_Recovery0.maxRetries);
      assertEquals(10000L, atomikosProperties_Recovery0.delay);
      assertEquals(86400000L, atomikosProperties_Recovery0.forgetOrphanedLogEntriesDelay);
      assertEquals(10000L, atomikosProperties_Recovery0.retryInterval);
      assertNotNull(atomikosProperties_Recovery0);
      
      long long1 = atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay();
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertEquals("Wj", atomikosProperties0.getLogBaseDir());
      assertEquals("Wj", atomikosProperties0.getConsoleFileName());
      assertEquals("Wj", atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals("Wj", atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(0, atomikosProperties0.getConsoleFileCount());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(0, atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(0, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(0L, atomikosProperties0.maxTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(5, atomikosProperties_Recovery0.maxRetries);
      assertEquals(10000L, atomikosProperties_Recovery0.delay);
      assertEquals(86400000L, atomikosProperties_Recovery0.forgetOrphanedLogEntriesDelay);
      assertEquals(10000L, atomikosProperties_Recovery0.retryInterval);
      assertEquals(86400000L, long1);
      assertFalse(long1 == long0);
      
      String string2 = null;
      atomikosProperties0.setService(string2);
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertEquals("Wj", atomikosProperties0.getLogBaseDir());
      assertEquals("Wj", atomikosProperties0.getConsoleFileName());
      assertEquals("Wj", atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals("Wj", atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(0, atomikosProperties0.getConsoleFileCount());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(0, atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(0, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(0L, atomikosProperties0.maxTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
  }

  @Test(timeout = 11000)
  public void test60()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertNotNull(atomikosProperties0);
      
      String string0 = "^wKz9";
      boolean boolean0 = false;
      atomikosProperties0.setSerialJtaTransactions(boolean0);
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.serialJtaTransactions);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      
      atomikosProperties0.logBaseName = string0;
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("^wKz9", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      
      String string1 = " ";
      atomikosProperties0.setTransactionManagerUniqueName(string1);
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(" ", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("^wKz9", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.serialJtaTransactions);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = 0;
      atomikosProperties0.consoleFileLimit = int0;
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(" ", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("^wKz9", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      
      boolean boolean1 = false;
      String string2 = null;
      atomikosProperties0.logBaseName = string2;
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(" ", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      
      long long0 = (-5191L);
      atomikosProperties0.maxTimeout = long0;
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(" ", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals((-5191L), atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      
      atomikosProperties0.outputDir = string1;
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getService());
      assertEquals(" ", atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(" ", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals((-5191L), atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      
      AtomikosLoggingLevel atomikosLoggingLevel0 = AtomikosLoggingLevel.INFO;
      atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel0);
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getService());
      assertEquals(" ", atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(" ", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals((-5191L), atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(0, atomikosProperties0.consoleFileLimit);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.serialJtaTransactions);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals((-5191L), atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      
      atomikosProperties0.setSerialJtaTransactions(boolean1);
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getService());
      assertEquals(" ", atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(" ", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals((-5191L), atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(0, atomikosProperties0.consoleFileLimit);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.serialJtaTransactions);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals((-5191L), atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      
      int int1 = atomikosProperties0.getConsoleFileLimit();
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getService());
      assertEquals(" ", atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(" ", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals((-5191L), atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(0, atomikosProperties0.consoleFileLimit);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.serialJtaTransactions);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals((-5191L), atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      long long1 = atomikosProperties0.getDefaultJtaTimeout();
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getService());
      assertEquals(" ", atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(" ", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals((-5191L), atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(0, atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(0, atomikosProperties0.consoleFileLimit);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.serialJtaTransactions);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals((-5191L), atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(10000L, long1);
      assertFalse(long1 == long0);
      
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      Response response0 = new Response();
      assertFalse(response0.isErrorReportRequired());
      assertFalse(response0.isError());
      assertNotNull(response0);
      
      // Undeclared exception!
      try { 
        response0.getWriter();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.catalina.connector.Response", e);
      }
  }

  @Test(timeout = 11000)
  public void test61()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertNotNull(atomikosProperties0);
      
      Properties properties0 = atomikosProperties0.asProperties();
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(18, properties0.size());
      assertFalse(properties0.isEmpty());
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertNotNull(properties0);
      
      long long0 = (-76L);
      atomikosProperties0.maxTimeout = long0;
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals((-76L), atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      
      String string0 = "c54;oKy[R";
      String string1 = ",YP*88kT%-ypF[B>Z";
      atomikosProperties0.consoleFileName = string1;
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(",YP*88kT%-ypF[B>Z", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals((-76L), atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      
      atomikosProperties0.setLogBaseDir(string0);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(",YP*88kT%-ypF[B>Z", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals((-76L), atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("c54;oKy[R", atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals((-76L), atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
      
      int int0 = 65536;
      AtomikosLoggingLevel atomikosLoggingLevel0 = AtomikosLoggingLevel.INFO;
      atomikosProperties0.logBaseName = string0;
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(",YP*88kT%-ypF[B>Z", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals((-76L), atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("c54;oKy[R", atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("c54;oKy[R", atomikosProperties0.getLogBaseName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      
      atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel0);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertEquals(",YP*88kT%-ypF[B>Z", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals((-76L), atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("c54;oKy[R", atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("c54;oKy[R", atomikosProperties0.getLogBaseName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals((-76L), atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      
      atomikosProperties0.setConsoleFileLimit(int0);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertEquals(",YP*88kT%-ypF[B>Z", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals((-76L), atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("c54;oKy[R", atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(65536, atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("c54;oKy[R", atomikosProperties0.getLogBaseName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals((-76L), atomikosProperties0.maxTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(65536, atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      
      atomikosProperties0.setConsoleFileName(string0);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals((-76L), atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("c54;oKy[R", atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(65536, atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals("c54;oKy[R", atomikosProperties0.getConsoleFileName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("c54;oKy[R", atomikosProperties0.getLogBaseName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals((-76L), atomikosProperties0.maxTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(65536, atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
      
      boolean boolean0 = atomikosProperties0.isAllowSubTransactions();
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals((-76L), atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("c54;oKy[R", atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(65536, atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals("c54;oKy[R", atomikosProperties0.getConsoleFileName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("c54;oKy[R", atomikosProperties0.getLogBaseName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals((-76L), atomikosProperties0.maxTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(65536, atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(boolean0);
      
      int int1 = 1600;
      atomikosProperties0.outputDir = string0;
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals((-76L), atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("c54;oKy[R", atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(65536, atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("c54;oKy[R", atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals("c54;oKy[R", atomikosProperties0.getConsoleFileName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("c54;oKy[R", atomikosProperties0.getLogBaseName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      
      long long1 = (-1234L);
      atomikosProperties0.setMaxTimeout(long1);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals((-1234L), atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("c54;oKy[R", atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(65536, atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("c54;oKy[R", atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals("c54;oKy[R", atomikosProperties0.getConsoleFileName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("c54;oKy[R", atomikosProperties0.getLogBaseName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(65536, atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals((-1234L), atomikosProperties0.maxTimeout);
      assertFalse(long1 == long0);
      
      atomikosProperties0.setMaxActives(int1);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertEquals(1600, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals((-1234L), atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("c54;oKy[R", atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(65536, atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("c54;oKy[R", atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals("c54;oKy[R", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("c54;oKy[R", atomikosProperties0.getLogBaseName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(1600, atomikosProperties0.maxActives);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(65536, atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals((-1234L), atomikosProperties0.maxTimeout);
      assertFalse(int1 == int0);
      
      atomikosProperties0.setMaxTimeout(long1);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertEquals(1600, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals((-1234L), atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("c54;oKy[R", atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(65536, atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("c54;oKy[R", atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals("c54;oKy[R", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("c54;oKy[R", atomikosProperties0.getLogBaseName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(1600, atomikosProperties0.maxActives);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(65536, atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals((-1234L), atomikosProperties0.maxTimeout);
      assertFalse(long1 == long0);
      
      long long2 = 0L;
      atomikosProperties0.checkpointInterval = long2;
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertEquals(1600, atomikosProperties0.getMaxActives());
      assertEquals((-1234L), atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("c54;oKy[R", atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(65536, atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("c54;oKy[R", atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals("c54;oKy[R", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("c54;oKy[R", atomikosProperties0.getLogBaseName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      
      atomikosProperties0.setThreadedTwoPhaseCommit(boolean0);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertEquals(1600, atomikosProperties0.getMaxActives());
      assertEquals((-1234L), atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("c54;oKy[R", atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(65536, atomikosProperties0.getConsoleFileLimit());
      assertEquals("c54;oKy[R", atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals("c54;oKy[R", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("c54;oKy[R", atomikosProperties0.getLogBaseName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(1600, atomikosProperties0.maxActives);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(65536, atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals((-1234L), atomikosProperties0.maxTimeout);
      assertEquals(0L, atomikosProperties0.checkpointInterval);
      
      long long3 = atomikosProperties0.getMaxTimeout();
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertEquals(1600, atomikosProperties0.getMaxActives());
      assertEquals((-1234L), atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("c54;oKy[R", atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(65536, atomikosProperties0.getConsoleFileLimit());
      assertEquals("c54;oKy[R", atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals("c54;oKy[R", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("c54;oKy[R", atomikosProperties0.getLogBaseName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(1600, atomikosProperties0.maxActives);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(65536, atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals((-1234L), atomikosProperties0.maxTimeout);
      assertEquals(0L, atomikosProperties0.checkpointInterval);
      assertEquals((-1234L), long3);
      assertTrue(long3 == long1);
      assertFalse(long3 == long0);
      assertFalse(long3 == long2);
      
      atomikosProperties0.maxTimeout = long1;
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertEquals(1600, atomikosProperties0.getMaxActives());
      assertEquals((-1234L), atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("c54;oKy[R", atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(65536, atomikosProperties0.getConsoleFileLimit());
      assertEquals("c54;oKy[R", atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals("c54;oKy[R", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("c54;oKy[R", atomikosProperties0.getLogBaseName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      
      String string2 = null;
      int int2 = 2327;
      atomikosProperties0.consoleFileLimit = int2;
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertEquals(1600, atomikosProperties0.getMaxActives());
      assertEquals((-1234L), atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("c54;oKy[R", atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals("c54;oKy[R", atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals("c54;oKy[R", atomikosProperties0.getConsoleFileName());
      assertEquals(2327, atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("c54;oKy[R", atomikosProperties0.getLogBaseName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      
      atomikosProperties0.setLogBaseDir(string2);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertEquals(1600, atomikosProperties0.getMaxActives());
      assertEquals((-1234L), atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getService());
      assertEquals("c54;oKy[R", atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals("c54;oKy[R", atomikosProperties0.getConsoleFileName());
      assertEquals(2327, atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("c54;oKy[R", atomikosProperties0.getLogBaseName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(2327, atomikosProperties0.consoleFileLimit);
      assertEquals(1600, atomikosProperties0.maxActives);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals((-1234L), atomikosProperties0.maxTimeout);
      assertEquals(0L, atomikosProperties0.checkpointInterval);
      
      int int3 = atomikosProperties0.getMaxActives();
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertEquals(1600, atomikosProperties0.getMaxActives());
      assertEquals((-1234L), atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getService());
      assertEquals("c54;oKy[R", atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals("c54;oKy[R", atomikosProperties0.getConsoleFileName());
      assertEquals(2327, atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("c54;oKy[R", atomikosProperties0.getLogBaseName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(2327, atomikosProperties0.consoleFileLimit);
      assertEquals(1600, atomikosProperties0.maxActives);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals((-1234L), atomikosProperties0.maxTimeout);
      assertEquals(0L, atomikosProperties0.checkpointInterval);
      assertEquals(1600, int3);
      assertFalse(int3 == int0);
      assertTrue(int3 == int1);
      assertFalse(int3 == int2);
      
      boolean boolean1 = atomikosProperties0.isThreadedTwoPhaseCommit();
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertEquals(1600, atomikosProperties0.getMaxActives());
      assertEquals((-1234L), atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getService());
      assertEquals("c54;oKy[R", atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals("c54;oKy[R", atomikosProperties0.getConsoleFileName());
      assertEquals(2327, atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("c54;oKy[R", atomikosProperties0.getLogBaseName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(2327, atomikosProperties0.consoleFileLimit);
      assertEquals(1600, atomikosProperties0.maxActives);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals((-1234L), atomikosProperties0.maxTimeout);
      assertEquals(0L, atomikosProperties0.checkpointInterval);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = true;
      atomikosProperties0.setThreadedTwoPhaseCommit(boolean2);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertEquals(1600, atomikosProperties0.getMaxActives());
      assertEquals((-1234L), atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getService());
      assertEquals("c54;oKy[R", atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals("c54;oKy[R", atomikosProperties0.getConsoleFileName());
      assertEquals(2327, atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("c54;oKy[R", atomikosProperties0.getLogBaseName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(2327, atomikosProperties0.consoleFileLimit);
      assertEquals(1600, atomikosProperties0.maxActives);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals((-1234L), atomikosProperties0.maxTimeout);
      assertEquals(0L, atomikosProperties0.checkpointInterval);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      long long4 = atomikosProperties0.getDefaultJtaTimeout();
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertEquals(1600, atomikosProperties0.getMaxActives());
      assertEquals((-1234L), atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getService());
      assertEquals("c54;oKy[R", atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals("c54;oKy[R", atomikosProperties0.getConsoleFileName());
      assertEquals(2327, atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("c54;oKy[R", atomikosProperties0.getLogBaseName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(2327, atomikosProperties0.consoleFileLimit);
      assertEquals(1600, atomikosProperties0.maxActives);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals((-1234L), atomikosProperties0.maxTimeout);
      assertEquals(0L, atomikosProperties0.checkpointInterval);
      assertEquals(10000L, long4);
      assertFalse(long4 == long0);
      assertFalse(long4 == long2);
      assertFalse(long4 == long1);
      assertFalse(long4 == long3);
  }

  @Test(timeout = 11000)
  public void test62()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getService());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertNotNull(atomikosProperties0);
      
      String string0 = "";
      atomikosProperties0.consoleFileName = string0;
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getService());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      
      long long0 = 0L;
      atomikosProperties0.maxTimeout = long0;
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      
      long long1 = 227L;
      atomikosProperties0.checkpointInterval = long1;
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals(227L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      
      String string1 = "";
      AtomikosLoggingLevel atomikosLoggingLevel0 = AtomikosLoggingLevel.DEBUG;
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = properties0.put(string1, object0);
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertSame(string1, string0);
      assertNull(object1);
      
      String string2 = null;
      atomikosProperties0.set(properties0, string2, atomikosProperties0.transactionManagerUniqueName);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals(227L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(0L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals(227L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      
      atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel0);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(AtomikosLoggingLevel.DEBUG, atomikosProperties0.getConsoleLogLevel());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals(227L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(0L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals(227L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      
      atomikosProperties0.logBaseName = string1;
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(AtomikosLoggingLevel.DEBUG, atomikosProperties0.getConsoleLogLevel());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getService());
      assertEquals(227L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      
      boolean boolean0 = true;
      atomikosProperties0.forceShutdownOnVmExit = boolean0;
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(AtomikosLoggingLevel.DEBUG, atomikosProperties0.getConsoleLogLevel());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getService());
      assertEquals(227L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      
      long long2 = 0L;
      atomikosProperties0.setDefaultJtaTimeout(long2);
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(AtomikosLoggingLevel.DEBUG, atomikosProperties0.getConsoleLogLevel());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getService());
      assertEquals(227L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(0L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(0L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals(227L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(long2 == long1);
      
      int int0 = atomikosProperties0.getMaxActives();
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(AtomikosLoggingLevel.DEBUG, atomikosProperties0.getConsoleLogLevel());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getService());
      assertEquals(227L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(0L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(0L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals(227L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(50, int0);
      
      AtomikosLoggingLevel atomikosLoggingLevel1 = AtomikosLoggingLevel.INFO;
      atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel1);
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getService());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertEquals(227L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(0L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(0L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals(227L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertNotSame(atomikosLoggingLevel1, atomikosLoggingLevel0);
      assertFalse(atomikosLoggingLevel1.equals((Object)atomikosLoggingLevel0));
      
      long long3 = (-801L);
      atomikosProperties0.setDefaultJtaTimeout(long3);
      assertEquals((-801L), atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getService());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertEquals(227L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals((-801L), atomikosProperties0.defaultJtaTimeout);
      assertEquals(0L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals(227L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(long3 == long1);
      assertFalse(long3 == long2);
      assertFalse(long3 == long0);
      
      String string3 = atomikosProperties0.getService();
      assertEquals((-801L), atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getService());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertEquals(227L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals((-801L), atomikosProperties0.defaultJtaTimeout);
      assertEquals(0L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals(227L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertNull(string3);
      
      String string4 = atomikosProperties0.getLogBaseName();
      assertEquals((-801L), atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getService());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertEquals(227L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals((-801L), atomikosProperties0.defaultJtaTimeout);
      assertEquals(0L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertEquals(227L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals("", string4);
      assertSame(string4, string1);
      assertSame(string4, string0);
      assertNotNull(string4);
      
      int int1 = 772;
      atomikosProperties0.setConsoleFileCount(int1);
      assertEquals((-801L), atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getService());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertEquals(227L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(772, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(772, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals((-801L), atomikosProperties0.defaultJtaTimeout);
      assertEquals(0L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(227L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(int1 == int0);
      
      long long4 = (-191L);
      atomikosProperties0.setCheckpointInterval(long4);
      assertEquals((-801L), atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getService());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(772, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals((-191L), atomikosProperties0.getCheckpointInterval());
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(772, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals((-801L), atomikosProperties0.defaultJtaTimeout);
      assertEquals(0L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals((-191L), atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(long4 == long1);
      assertFalse(long4 == long0);
      assertFalse(long4 == long3);
      assertFalse(long4 == long2);
      
      boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
      assertEquals((-801L), atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getService());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(772, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals((-191L), atomikosProperties0.getCheckpointInterval());
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(772, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals((-801L), atomikosProperties0.defaultJtaTimeout);
      assertEquals(0L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals((-191L), atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      atomikosProperties0.setMaxActives(int0);
      assertEquals((-801L), atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getService());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(772, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals((-191L), atomikosProperties0.getCheckpointInterval());
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(772, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals((-801L), atomikosProperties0.defaultJtaTimeout);
      assertEquals(0L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals((-191L), atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(int0 == int1);
      
      atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel0);
      assertEquals((-801L), atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(AtomikosLoggingLevel.DEBUG, atomikosProperties0.getConsoleLogLevel());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(772, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals((-191L), atomikosProperties0.getCheckpointInterval());
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(772, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals((-801L), atomikosProperties0.defaultJtaTimeout);
      assertEquals(0L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals((-191L), atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertNotSame(atomikosLoggingLevel0, atomikosLoggingLevel1);
      assertFalse(atomikosLoggingLevel0.equals((Object)atomikosLoggingLevel1));
  }

  @Test(timeout = 11000)
  public void test63()  throws Throwable  {
      long long0 = 600000L;
      System.setCurrentTimeMillis(long0);
      long long1 = 1L;
      System.setCurrentTimeMillis(long1);
      assertFalse(long1 == long0);
      
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertNotNull(atomikosProperties0);
      
      String string0 = "";
      boolean boolean0 = true;
      atomikosProperties0.setForceShutdownOnVmExit(boolean0);
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      
      atomikosProperties0.setConsoleFileName(string0);
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      
      boolean boolean1 = false;
      atomikosProperties0.allowSubTransactions = boolean1;
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      
      String string1 = null;
      atomikosProperties0.setTransactionManagerUniqueName(string1);
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isAllowSubTransactions());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertFalse(atomikosProperties0.allowSubTransactions);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      
      boolean boolean2 = true;
      atomikosProperties0.setAllowSubTransactions(boolean2);
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertFalse(boolean2 == boolean1);
      
      AtomikosProperties.Recovery atomikosProperties_Recovery0 = atomikosProperties0.getRecovery();
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(5, atomikosProperties_Recovery0.maxRetries);
      assertEquals(86400000L, atomikosProperties_Recovery0.forgetOrphanedLogEntriesDelay);
      assertEquals(10000L, atomikosProperties_Recovery0.retryInterval);
      assertEquals(10000L, atomikosProperties_Recovery0.delay);
      assertNotNull(atomikosProperties_Recovery0);
      
      String string2 = atomikosProperties0.getConsoleFileName();
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals("", string2);
      assertSame(string2, string0);
      assertNotNull(string2);
      
      atomikosProperties0.transactionManagerUniqueName = string0;
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      
      atomikosProperties0.transactionManagerUniqueName = string0;
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      
      AtomikosLoggingLevel atomikosLoggingLevel0 = AtomikosLoggingLevel.DEBUG;
      atomikosProperties0.consoleLogLevel = atomikosLoggingLevel0;
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.DEBUG, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      
      long long2 = 0L;
      System.setCurrentTimeMillis(long2);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      
      String string3 = atomikosProperties0.getConsoleFileName();
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.DEBUG, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals("", string3);
      assertSame(string3, string0);
      assertSame(string3, string2);
      assertNotNull(string3);
      
      int int0 = atomikosProperties0.getMaxActives();
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.DEBUG, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, int0);
      
      String string4 = atomikosProperties0.getConsoleFileName();
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.DEBUG, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals("", string4);
      assertSame(string4, string0);
      assertSame(string4, string2);
      assertSame(string4, string3);
      assertNotNull(string4);
      
      String string5 = atomikosProperties0.getService();
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.DEBUG, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertNull(string5);
      
      System.setCurrentTimeMillis(atomikosProperties_Recovery0.maxRetries);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(AtomikosLoggingLevel.DEBUG, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(5, atomikosProperties_Recovery0.maxRetries);
      assertEquals(86400000L, atomikosProperties_Recovery0.forgetOrphanedLogEntriesDelay);
      assertEquals(10000L, atomikosProperties_Recovery0.retryInterval);
      assertEquals(10000L, atomikosProperties_Recovery0.delay);
  }

  @Test(timeout = 11000)
  public void test64()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertNotNull(atomikosProperties0);
      
      long long0 = 1042L;
      int int0 = 2008;
      atomikosProperties0.setConsoleFileCount(int0);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(2008, atomikosProperties0.getConsoleFileCount());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(2008, atomikosProperties0.consoleFileCount);
      assertEquals(50, atomikosProperties0.maxActives);
      
      atomikosProperties0.maxTimeout = long0;
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(2008, atomikosProperties0.getConsoleFileCount());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(1042L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      
      boolean boolean0 = false;
      atomikosProperties0.setEnableLogging(boolean0);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(2008, atomikosProperties0.getConsoleFileCount());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(1042L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1042L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertFalse(atomikosProperties0.enableLogging);
      assertEquals(2008, atomikosProperties0.consoleFileCount);
      assertEquals(50, atomikosProperties0.maxActives);
      
      String string0 = "";
      atomikosProperties0.setConsoleFileName(string0);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(2008, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(1042L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1042L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertFalse(atomikosProperties0.enableLogging);
      assertEquals(2008, atomikosProperties0.consoleFileCount);
      assertEquals(50, atomikosProperties0.maxActives);
      
      int int1 = 0;
      atomikosProperties0.consoleFileCount = int1;
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(0, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(1042L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      
      String string1 = "";
      atomikosProperties0.setOutputDir(string1);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(0, atomikosProperties0.getConsoleFileCount());
      assertEquals("", atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(1042L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(0, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1042L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertFalse(atomikosProperties0.enableLogging);
      assertEquals(50, atomikosProperties0.maxActives);
      assertSame(string1, string0);
      
      AtomikosProperties.Recovery atomikosProperties_Recovery0 = atomikosProperties0.recovery;
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.retryInterval);
      assertEquals(86400000L, atomikosProperties_Recovery0.forgetOrphanedLogEntriesDelay);
      assertEquals(10000L, atomikosProperties_Recovery0.delay);
      assertEquals(5, atomikosProperties_Recovery0.maxRetries);
      assertNotNull(atomikosProperties_Recovery0);
      
      atomikosProperties_Recovery0.setDelay(atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(0, atomikosProperties0.getConsoleFileCount());
      assertEquals("", atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(1042L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(0L, atomikosProperties_Recovery0.getDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(0, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1042L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertFalse(atomikosProperties0.enableLogging);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties_Recovery0.retryInterval);
      assertEquals(86400000L, atomikosProperties_Recovery0.forgetOrphanedLogEntriesDelay);
      assertEquals(5, atomikosProperties_Recovery0.maxRetries);
      assertEquals(0L, atomikosProperties_Recovery0.delay);
      
      atomikosProperties_Recovery0.setDelay(atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(0, atomikosProperties0.getConsoleFileCount());
      assertEquals("", atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(1042L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(0L, atomikosProperties_Recovery0.getDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(0, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1042L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertFalse(atomikosProperties0.enableLogging);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties_Recovery0.retryInterval);
      assertEquals(86400000L, atomikosProperties_Recovery0.forgetOrphanedLogEntriesDelay);
      assertEquals(5, atomikosProperties_Recovery0.maxRetries);
      assertEquals(0L, atomikosProperties_Recovery0.delay);
      
      long long1 = atomikosProperties_Recovery0.getRetryInterval();
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(0, atomikosProperties0.getConsoleFileCount());
      assertEquals("", atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(1042L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(0L, atomikosProperties_Recovery0.getDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(0, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1042L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertFalse(atomikosProperties0.enableLogging);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties_Recovery0.retryInterval);
      assertEquals(86400000L, atomikosProperties_Recovery0.forgetOrphanedLogEntriesDelay);
      assertEquals(5, atomikosProperties_Recovery0.maxRetries);
      assertEquals(0L, atomikosProperties_Recovery0.delay);
      assertEquals(10000L, long1);
      assertFalse(long1 == long0);
      
      long long2 = atomikosProperties0.recovery.getForgetOrphanedLogEntriesDelay();
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(0, atomikosProperties0.getConsoleFileCount());
      assertEquals("", atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(1042L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(0, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1042L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertFalse(atomikosProperties0.enableLogging);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(86400000L, long2);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      
      boolean boolean1 = atomikosProperties0.isForceShutdownOnVmExit();
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(0, atomikosProperties0.getConsoleFileCount());
      assertEquals("", atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(1042L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(0, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1042L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertFalse(atomikosProperties0.enableLogging);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      long long3 = atomikosProperties0.getDefaultJtaTimeout();
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(0, atomikosProperties0.getConsoleFileCount());
      assertEquals("", atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(1042L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(0, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1042L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertFalse(atomikosProperties0.enableLogging);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, long3);
      assertTrue(long3 == long1);
      assertFalse(long3 == long2);
      assertFalse(long3 == long0);
      
      atomikosProperties0.setThreadedTwoPhaseCommit(boolean1);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(0, atomikosProperties0.getConsoleFileCount());
      assertEquals("", atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(1042L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(0, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1042L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertFalse(atomikosProperties0.enableLogging);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = atomikosProperties0.isSerialJtaTransactions();
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(0, atomikosProperties0.getConsoleFileCount());
      assertEquals("", atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(1042L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(0, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1042L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertFalse(atomikosProperties0.enableLogging);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      boolean boolean3 = atomikosProperties0.isThreadedTwoPhaseCommit();
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(0, atomikosProperties0.getConsoleFileCount());
      assertEquals("", atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(1042L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(0, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1042L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertFalse(atomikosProperties0.enableLogging);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      
      String string2 = atomikosProperties0.getLogBaseDir();
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(0, atomikosProperties0.getConsoleFileCount());
      assertEquals("", atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(1042L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(0, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1042L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertFalse(atomikosProperties0.enableLogging);
      assertEquals(50, atomikosProperties0.maxActives);
      assertNull(string2);
      
      AtomikosProperties.Recovery atomikosProperties_Recovery1 = atomikosProperties0.getRecovery();
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(0, atomikosProperties0.getConsoleFileCount());
      assertEquals("", atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(1042L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("", atomikosProperties0.getConsoleFileName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(86400000L, atomikosProperties_Recovery1.getForgetOrphanedLogEntriesDelay());
      assertEquals(0L, atomikosProperties_Recovery1.getDelay());
      assertEquals(10000L, atomikosProperties_Recovery1.getRetryInterval());
      assertEquals(5, atomikosProperties_Recovery1.getMaxRetries());
      assertEquals(0, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(1042L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertFalse(atomikosProperties0.enableLogging);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(86400000L, atomikosProperties_Recovery1.forgetOrphanedLogEntriesDelay);
      assertEquals(0L, atomikosProperties_Recovery1.delay);
      assertEquals(10000L, atomikosProperties_Recovery1.retryInterval);
      assertEquals(5, atomikosProperties_Recovery1.maxRetries);
      assertSame(atomikosProperties_Recovery1, atomikosProperties_Recovery0);
      assertNotNull(atomikosProperties_Recovery1);
  }

  @Test(timeout = 11000)
  public void test65()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertNotNull(atomikosProperties0);
      
      long long0 = 0L;
      int int0 = (-913);
      atomikosProperties0.setConsoleFileCount(int0);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-913), atomikosProperties0.getConsoleFileCount());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals((-913), atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      
      boolean boolean0 = true;
      atomikosProperties0.setForceShutdownOnVmExit(boolean0);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-913), atomikosProperties0.getConsoleFileCount());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals((-913), atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      
      atomikosProperties0.defaultJtaTimeout = long0;
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-913), atomikosProperties0.getConsoleFileCount());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      
      int int1 = 5;
      int int2 = (-1184);
      atomikosProperties0.maxActives = int2;
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals((-1184), atomikosProperties0.getMaxActives());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-913), atomikosProperties0.getConsoleFileCount());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      
      atomikosProperties0.setConsoleFileCount(int1);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(5, atomikosProperties0.getConsoleFileCount());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals((-1184), atomikosProperties0.getMaxActives());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals((-1184), atomikosProperties0.maxActives);
      assertEquals(5, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(0L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      
      String string0 = atomikosProperties0.getService();
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(5, atomikosProperties0.getConsoleFileCount());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals((-1184), atomikosProperties0.getMaxActives());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals((-1184), atomikosProperties0.maxActives);
      assertEquals(5, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(0L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertNull(string0);
      
      int int3 = atomikosProperties0.getMaxActives();
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertNull(atomikosProperties0.getOutputDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(5, atomikosProperties0.getConsoleFileCount());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals((-1184), atomikosProperties0.getMaxActives());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertEquals((-1184), atomikosProperties0.maxActives);
      assertEquals(5, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(0L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals((-1184), int3);
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
  }

  @Test(timeout = 11000)
  public void test66()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertNotNull(atomikosProperties0);
      
      boolean boolean0 = false;
      atomikosProperties0.setThreadedTwoPhaseCommit(boolean0);
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      
      boolean boolean1 = false;
      long long0 = 2000L;
      atomikosProperties0.checkpointInterval = long0;
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals(2000L, atomikosProperties0.getCheckpointInterval());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      
      atomikosProperties0.enableLogging = boolean1;
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals(2000L, atomikosProperties0.getCheckpointInterval());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      
      String string0 = "force_shutdown_on_vm_exit";
      atomikosProperties0.transactionManagerUniqueName = string0;
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("force_shutdown_on_vm_exit", atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getService());
      assertEquals(2000L, atomikosProperties0.getCheckpointInterval());
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      
      int int0 = (-2006);
      atomikosProperties0.setConsoleFileCount(int0);
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("force_shutdown_on_vm_exit", atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getService());
      assertEquals(2000L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals((-2006), atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals((-2006), atomikosProperties0.consoleFileCount);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(2000L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      
      AtomikosLoggingLevel atomikosLoggingLevel0 = AtomikosLoggingLevel.INFO;
      String string1 = "";
      atomikosProperties0.transactionManagerUniqueName = string1;
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals(2000L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-2006), atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      
      String string2 = "-8\\nD9~),=g(";
      atomikosProperties0.setConsoleFileName(string2);
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("-8\\nD9~),=g(", atomikosProperties0.getConsoleFileName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals(2000L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-2006), atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals((-2006), atomikosProperties0.consoleFileCount);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(2000L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel0);
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("-8\\nD9~),=g(", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getService());
      assertEquals(2000L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-2006), atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals((-2006), atomikosProperties0.consoleFileCount);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(2000L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      
      String string3 = atomikosProperties0.getConsoleFileName();
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("-8\\nD9~),=g(", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertNull(atomikosProperties0.getService());
      assertEquals(2000L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-2006), atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals((-2006), atomikosProperties0.consoleFileCount);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(2000L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals("-8\\nD9~),=g(", string3);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertSame(string3, string2);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      atomikosProperties0.setService(string1);
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("-8\\nD9~),=g(", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertEquals("", atomikosProperties0.getService());
      assertEquals(2000L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-2006), atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals((-2006), atomikosProperties0.consoleFileCount);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(2000L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      
      long long1 = 0L;
      System.setCurrentTimeMillis(long1);
      assertFalse(long1 == long0);
      
      AtomikosLoggingLevel atomikosLoggingLevel1 = atomikosProperties0.getConsoleLogLevel();
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("-8\\nD9~),=g(", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertEquals("", atomikosProperties0.getService());
      assertEquals(2000L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-2006), atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals((-2006), atomikosProperties0.consoleFileCount);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(2000L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(AtomikosLoggingLevel.INFO, atomikosLoggingLevel1);
      assertSame(atomikosLoggingLevel1, atomikosLoggingLevel0);
      
      atomikosProperties0.setDefaultJtaTimeout(long1);
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("-8\\nD9~),=g(", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertEquals("", atomikosProperties0.getService());
      assertEquals(2000L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-2006), atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals((-2006), atomikosProperties0.consoleFileCount);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(2000L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(0L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertFalse(long1 == long0);
      
      String string4 = atomikosProperties0.getConsoleFileName();
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("-8\\nD9~),=g(", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertEquals("", atomikosProperties0.getService());
      assertEquals(2000L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-2006), atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals((-2006), atomikosProperties0.consoleFileCount);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(2000L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(0L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals("-8\\nD9~),=g(", string4);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertSame(string4, string2);
      assertSame(string4, string3);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String string5 = atomikosProperties0.getService();
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("-8\\nD9~),=g(", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertEquals("", atomikosProperties0.getService());
      assertEquals(2000L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-2006), atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals((-2006), atomikosProperties0.consoleFileCount);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(2000L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(0L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals("", string5);
      assertNotSame(string5, string2);
      assertNotSame(string5, string4);
      assertNotSame(string5, string3);
      assertNotSame(string5, string0);
      assertSame(string5, string1);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      String string6 = atomikosProperties0.getService();
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("-8\\nD9~),=g(", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertEquals("", atomikosProperties0.getService());
      assertEquals(2000L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-2006), atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals((-2006), atomikosProperties0.consoleFileCount);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(2000L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(0L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals("", string6);
      assertNotSame(string6, string3);
      assertNotSame(string6, string4);
      assertSame(string6, string5);
      assertSame(string6, string1);
      assertNotSame(string6, string0);
      assertNotSame(string6, string2);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      
      AtomikosProperties.Recovery atomikosProperties_Recovery0 = atomikosProperties0.getRecovery();
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("-8\\nD9~),=g(", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertEquals("", atomikosProperties0.getService());
      assertEquals(2000L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-2006), atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(86400000L, atomikosProperties_Recovery0.getForgetOrphanedLogEntriesDelay());
      assertEquals(10000L, atomikosProperties_Recovery0.getRetryInterval());
      assertEquals(5, atomikosProperties_Recovery0.getMaxRetries());
      assertEquals(10000L, atomikosProperties_Recovery0.getDelay());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals((-2006), atomikosProperties0.consoleFileCount);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(2000L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(0L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals(5, atomikosProperties_Recovery0.maxRetries);
      assertEquals(86400000L, atomikosProperties_Recovery0.forgetOrphanedLogEntriesDelay);
      assertEquals(10000L, atomikosProperties_Recovery0.delay);
      assertEquals(10000L, atomikosProperties_Recovery0.retryInterval);
      assertNotNull(atomikosProperties_Recovery0);
      
      String string7 = atomikosProperties0.getConsoleFileName();
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("-8\\nD9~),=g(", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertEquals("", atomikosProperties0.getService());
      assertEquals(2000L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-2006), atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals((-2006), atomikosProperties0.consoleFileCount);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(2000L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(0L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals("-8\\nD9~),=g(", string7);
      assertSame(string7, string2);
      assertSame(string7, string4);
      assertNotSame(string7, string1);
      assertNotSame(string7, string6);
      assertNotSame(string7, string5);
      assertSame(string7, string3);
      assertNotSame(string7, string0);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertNotNull(string7);
      
      String string8 = atomikosProperties0.getService();
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("-8\\nD9~),=g(", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertEquals("", atomikosProperties0.getService());
      assertEquals(2000L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-2006), atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals((-2006), atomikosProperties0.consoleFileCount);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(2000L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(0L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals("", string8);
      assertNotSame(string8, string7);
      assertNotSame(string8, string4);
      assertNotSame(string8, string3);
      assertSame(string8, string6);
      assertNotSame(string8, string0);
      assertSame(string8, string1);
      assertSame(string8, string5);
      assertNotSame(string8, string2);
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertNotNull(string8);
      
      String string9 = atomikosProperties0.getConsoleFileName();
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("-8\\nD9~),=g(", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertEquals("", atomikosProperties0.getService());
      assertEquals(2000L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-2006), atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals((-2006), atomikosProperties0.consoleFileCount);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(2000L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(0L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals("-8\\nD9~),=g(", string9);
      assertSame(string9, string2);
      assertSame(string9, string3);
      assertNotSame(string9, string8);
      assertNotSame(string9, string1);
      assertSame(string9, string7);
      assertNotSame(string9, string0);
      assertNotSame(string9, string6);
      assertNotSame(string9, string5);
      assertSame(string9, string4);
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string5));
      assertNotNull(string9);
      
      System.setCurrentTimeMillis(atomikosProperties0.maxActives);
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("-8\\nD9~),=g(", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertEquals("", atomikosProperties0.getService());
      assertEquals(2000L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-2006), atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals((-2006), atomikosProperties0.consoleFileCount);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(2000L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(0L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      
      String string10 = atomikosProperties0.getConsoleFileName();
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("-8\\nD9~),=g(", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertEquals("", atomikosProperties0.getService());
      assertEquals(2000L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-2006), atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals((-2006), atomikosProperties0.consoleFileCount);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(2000L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(0L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertEquals("-8\\nD9~),=g(", string10);
      assertSame(string10, string7);
      assertNotSame(string10, string0);
      assertNotSame(string10, string6);
      assertSame(string10, string4);
      assertNotSame(string10, string5);
      assertSame(string10, string9);
      assertSame(string10, string2);
      assertSame(string10, string3);
      assertNotSame(string10, string8);
      assertNotSame(string10, string1);
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string1));
      assertNotNull(string10);
  }

  @Test(timeout = 11000)
  public void test67()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertNotNull(atomikosProperties0);
      
      String string0 = atomikosProperties0.getTransactionManagerUniqueName();
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(1, atomikosProperties0.consoleFileCount);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertNull(string0);
      
      String string1 = "";
      atomikosProperties0.transactionManagerUniqueName = string1;
      assertEquals(1, atomikosProperties0.getConsoleFileCount());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      
      int int0 = 5;
      atomikosProperties0.consoleFileCount = int0;
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals(5, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      
      AtomikosLoggingLevel atomikosLoggingLevel0 = AtomikosLoggingLevel.INFO;
      atomikosProperties0.setOutputDir(string0);
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals(5, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(5, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      
      long long0 = 59L;
      atomikosProperties0.setCheckpointInterval(long0);
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals(5, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(59L, atomikosProperties0.getCheckpointInterval());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tm.out", atomikosProperties0.getConsoleFileName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(59L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(5, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      
      String string2 = "j4l).Pl";
      atomikosProperties0.setConsoleFileName(string2);
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals(5, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(59L, atomikosProperties0.getCheckpointInterval());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals("j4l).Pl", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(59L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(5, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertNotSame(string2, string1);
      assertFalse(string2.equals((Object)string1));
      
      AtomikosLoggingLevel atomikosLoggingLevel1 = AtomikosLoggingLevel.WARN;
      atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel1);
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals(5, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(59L, atomikosProperties0.getCheckpointInterval());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(AtomikosLoggingLevel.WARN, atomikosProperties0.getConsoleLogLevel());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals("j4l).Pl", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(59L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(5, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertNotSame(atomikosLoggingLevel1, atomikosLoggingLevel0);
      assertFalse(atomikosLoggingLevel1.equals((Object)atomikosLoggingLevel0));
      
      atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel0);
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals(5, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(59L, atomikosProperties0.getCheckpointInterval());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals("j4l).Pl", atomikosProperties0.getConsoleFileName());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(59L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(5, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertNotSame(atomikosLoggingLevel0, atomikosLoggingLevel1);
      assertFalse(atomikosLoggingLevel0.equals((Object)atomikosLoggingLevel1));
      
      atomikosProperties0.setConsoleFileName(string0);
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals(5, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(59L, atomikosProperties0.getCheckpointInterval());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getConsoleFileName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(59L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(5, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      
      long long1 = 0L;
      atomikosProperties0.setDefaultJtaTimeout(long1);
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals(5, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(59L, atomikosProperties0.getCheckpointInterval());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getConsoleFileName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(59L, atomikosProperties0.checkpointInterval);
      assertEquals(0L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(5, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertFalse(long1 == long0);
      
      int int1 = atomikosProperties0.getMaxActives();
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals(5, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(59L, atomikosProperties0.getCheckpointInterval());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getConsoleFileName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(59L, atomikosProperties0.checkpointInterval);
      assertEquals(0L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(5, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, int1);
      assertFalse(int1 == int0);
      
      String string3 = atomikosProperties0.getService();
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals(5, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(59L, atomikosProperties0.getCheckpointInterval());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getConsoleFileName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(59L, atomikosProperties0.checkpointInterval);
      assertEquals(0L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(5, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertNull(string3);
      
      String string4 = atomikosProperties0.getConsoleFileName();
      assertEquals(AtomikosLoggingLevel.INFO, atomikosProperties0.getConsoleLogLevel());
      assertTrue(atomikosProperties0.isAllowSubTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals(5, atomikosProperties0.getConsoleFileCount());
      assertNull(atomikosProperties0.getOutputDir());
      assertEquals(59L, atomikosProperties0.getCheckpointInterval());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getConsoleFileName());
      assertEquals((-1), atomikosProperties0.getConsoleFileLimit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals((-1), atomikosProperties0.consoleFileLimit);
      assertTrue(atomikosProperties0.allowSubTransactions);
      assertEquals(59L, atomikosProperties0.checkpointInterval);
      assertEquals(0L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(5, atomikosProperties0.consoleFileCount);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertNull(string4);
  }
}
