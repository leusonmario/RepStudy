import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest8 {

    public static boolean debug = false;

    @Test
    public void test04001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04001");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        atomikosProperties0.setLogBaseDir("{}");
        java.lang.String str7 = atomikosProperties0.getOutputDir();
        atomikosProperties0.setLogBaseName("hi!");
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.logBaseDir = "";
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel14 = null;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel14;
        boolean boolean16 = atomikosProperties0.isThreadedTwoPhaseCommit();
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test04002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04002");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        long long5 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.logBaseName = "tmlog";
        long long8 = atomikosProperties0.getMaxTimeout();
        long long9 = atomikosProperties0.getDefaultJtaTimeout();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 10000L + "'", long5 == 10000L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 300000L + "'", long8 == 300000L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10000L + "'", long9 == 10000L);
    }

    @Test
    public void test04003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04003");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.enableLogging = true;
        int int3 = atomikosProperties0.consoleFileLimit;
        atomikosProperties0.logBaseName = "hi!";
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int7 = atomikosProperties6.getConsoleFileCount();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties8.logBaseDir = "";
        atomikosProperties8.setConsoleFileCount((int) (short) 10);
        atomikosProperties8.setCheckpointInterval(10000L);
        long long15 = atomikosProperties8.maxTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel16 = org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO;
        atomikosProperties8.consoleLogLevel = atomikosLoggingLevel16;
        atomikosProperties6.consoleLogLevel = atomikosLoggingLevel16;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel16;
        atomikosProperties0.logBaseDir = "{}";
        java.util.Properties properties22 = atomikosProperties0.asProperties();
        java.util.Properties properties23 = new java.util.Properties();
        java.util.Properties properties24 = new java.util.Properties(properties23);
        java.util.Collection<java.lang.Object> objCollection25 = properties23.values();
        int int26 = properties23.size();
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties23.elements();
        java.util.Properties properties28 = new java.util.Properties(properties23);
        java.lang.String str30 = properties28.getProperty("{{}=tmlog}");
        java.util.Set<java.lang.String> strSet31 = properties28.stringPropertyNames();
        java.util.Enumeration<?> wildcardEnumeration32 = properties28.propertyNames();
        properties22.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties28);
        java.util.Properties properties34 = new java.util.Properties(properties22);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 300000L + "'", long15 == 300000L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel16 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO + "'", atomikosLoggingLevel16.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO));
        org.junit.Assert.assertNotNull(properties22);
        org.junit.Assert.assertNotNull(objCollection25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertNotNull(wildcardEnumeration32);
    }

    @Test
    public void test04004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04004");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.enableLogging = true;
        long long3 = atomikosProperties0.getCheckpointInterval();
        atomikosProperties0.setService("tmlog");
        atomikosProperties0.setCheckpointInterval((long) (short) 0);
        long long8 = atomikosProperties0.getCheckpointInterval();
        java.lang.String str9 = atomikosProperties0.getService();
        java.lang.String str10 = atomikosProperties0.getTransactionManagerUniqueName();
        java.util.Properties properties11 = atomikosProperties0.asProperties();
        long long12 = atomikosProperties0.checkpointInterval;
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 500L + "'", long3 == 500L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tmlog" + "'", str9, "tmlog");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test04005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04005");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int1 = atomikosProperties0.getConsoleFileCount();
        int int2 = atomikosProperties0.maxActives;
        atomikosProperties0.setConsoleFileName("");
        java.lang.String str5 = atomikosProperties0.getOutputDir();
        atomikosProperties0.setConsoleFileName("");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery8 = atomikosProperties0.recovery;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel9 = atomikosProperties0.consoleLogLevel;
        java.lang.String str10 = atomikosProperties0.consoleFileName;
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 50 + "'", int2 == 50);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(recovery8);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel9 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel9.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test04006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04006");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Collection<java.lang.Object> objCollection2 = properties0.values();
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties0.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int5 = atomikosProperties4.getConsoleFileCount();
        int int6 = atomikosProperties4.maxActives;
        java.lang.String str7 = atomikosProperties4.getService();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties8.logBaseDir = "";
        atomikosProperties8.setConsoleFileCount((int) (short) 10);
        atomikosProperties8.setCheckpointInterval(10000L);
        long long15 = atomikosProperties8.maxTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel16 = atomikosProperties8.getConsoleLogLevel();
        atomikosProperties4.consoleLogLevel = atomikosLoggingLevel16;
        java.util.Properties properties18 = atomikosProperties4.asProperties();
        java.lang.String str19 = atomikosProperties4.getConsoleFileName();
        boolean boolean20 = properties0.containsValue((java.lang.Object) atomikosProperties4);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties21.logBaseDir = "";
        atomikosProperties21.setConsoleFileCount((int) (short) 10);
        long long26 = atomikosProperties21.getMaxTimeout();
        atomikosProperties21.service = "";
        java.lang.String str29 = atomikosProperties21.logBaseDir;
        atomikosProperties21.logBaseName = "tmlog";
        atomikosProperties21.transactionManagerUniqueName = "{}";
        boolean boolean34 = atomikosProperties21.isForceShutdownOnVmExit();
        java.util.Properties properties35 = atomikosProperties21.asProperties();
        java.lang.Object obj36 = properties0.remove((java.lang.Object) atomikosProperties21);
        java.util.Enumeration<java.lang.Object> objEnumeration37 = properties0.elements();
        boolean boolean38 = properties0.isEmpty();
        org.junit.Assert.assertNotNull(objCollection2);
        org.junit.Assert.assertNotNull(objEnumeration3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 50 + "'", int6 == 50);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 300000L + "'", long15 == 300000L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel16 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel16.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "tm.out" + "'", str19, "tm.out");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 300000L + "'", long26 == 300000L);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(properties35);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNotNull(objEnumeration37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test04007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04007");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        boolean boolean3 = atomikosProperties0.isForceShutdownOnVmExit();
        int int4 = atomikosProperties0.consoleFileLimit;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = atomikosProperties0.getConsoleLogLevel();
        atomikosProperties0.consoleFileLimit = ' ';
        atomikosProperties0.setAllowSubTransactions(false);
        int int10 = atomikosProperties0.consoleFileCount;
        long long11 = atomikosProperties0.checkpointInterval;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel5 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel5.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 500L + "'", long11 == 500L);
    }

    @Test
    public void test04008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04008");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.enableLogging = true;
        long long3 = atomikosProperties0.getCheckpointInterval();
        atomikosProperties0.setService("tmlog");
        java.util.Properties properties6 = atomikosProperties0.asProperties();
        atomikosProperties0.setEnableLogging(false);
        long long9 = atomikosProperties0.maxTimeout;
        long long10 = atomikosProperties0.getMaxTimeout();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 500L + "'", long3 == 500L);
        org.junit.Assert.assertNotNull(properties6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 300000L + "'", long9 == 300000L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 300000L + "'", long10 == 300000L);
    }

    @Test
    public void test04009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04009");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int1 = atomikosProperties0.getConsoleFileCount();
        int int2 = atomikosProperties0.maxActives;
        java.util.Properties properties3 = new java.util.Properties();
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Collection<java.lang.Object> objCollection5 = properties4.values();
        java.lang.Object obj8 = properties4.setProperty("hi!", "{}");
        java.lang.String str10 = properties4.getProperty("tmlog");
        properties4.clear();
        java.lang.Object obj12 = properties4.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties14.logBaseDir = "";
        atomikosProperties14.setConsoleFileCount((int) (short) 10);
        atomikosProperties14.setLogBaseDir("{}");
        java.util.Properties properties21 = atomikosProperties14.asProperties();
        atomikosProperties14.service = "";
        atomikosProperties14.setTransactionManagerUniqueName("{}");
        atomikosProperties14.enableLogging = false;
        atomikosProperties0.set(properties4, "", (java.lang.Object) atomikosProperties14);
        java.lang.Object obj29 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean30 = properties4.containsValue(obj29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 50 + "'", int2 == 50);
        org.junit.Assert.assertNotNull(objCollection5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "{}");
        org.junit.Assert.assertNotNull(properties21);
    }

    @Test
    public void test04010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04010");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        java.lang.String str5 = atomikosProperties0.logBaseName;
        atomikosProperties0.outputDir = "";
        java.util.Properties properties8 = atomikosProperties0.asProperties();
        java.util.Set<java.lang.String> strSet9 = properties8.stringPropertyNames();
        boolean boolean11 = properties8.contains((java.lang.Object) false);
        properties8.clear();
        java.util.Collection<java.lang.Object> objCollection13 = properties8.values();
        java.util.Enumeration<java.lang.Object> objEnumeration14 = properties8.keys();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tmlog" + "'", str5, "tmlog");
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(objCollection13);
        org.junit.Assert.assertNotNull(objEnumeration14);
    }

    @Test
    public void test04011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04011");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        long long5 = atomikosProperties0.getMaxTimeout();
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet7 = properties6.keySet();
        atomikosProperties0.set(properties6, "hi!", (java.lang.Object) (-1.0f));
        java.lang.String str11 = atomikosProperties0.logBaseDir;
        atomikosProperties0.outputDir = "hi!";
        java.lang.String str14 = atomikosProperties0.logBaseDir;
        int int15 = atomikosProperties0.consoleFileLimit;
        atomikosProperties0.enableLogging = false;
        atomikosProperties0.setMaxActives((int) (byte) -1);
        boolean boolean20 = atomikosProperties0.enableLogging;
        java.util.Properties properties21 = atomikosProperties0.asProperties();
        java.lang.String str24 = properties21.getProperty("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=10, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir={}, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}", "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.output_dir=, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=10, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=-1}");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertNotNull(objSet7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(properties21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.output_dir=, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=10, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=-1}" + "'", str24, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.output_dir=, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=10, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=-1}");
    }

    @Test
    public void test04012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04012");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.enableLogging = true;
        int int3 = atomikosProperties0.consoleFileLimit;
        atomikosProperties0.service = "hi!";
        atomikosProperties0.consoleFileLimit = 5;
        long long8 = atomikosProperties0.getDefaultJtaTimeout();
        boolean boolean9 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.allowSubTransactions = false;
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 10000L + "'", long8 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test04013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04013");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Collection<java.lang.Object> objCollection2 = properties1.values();
        java.lang.Object obj5 = properties1.setProperty("hi!", "{}");
        java.lang.String str7 = properties1.getProperty("tmlog");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties8.enableLogging = true;
        int int11 = atomikosProperties8.consoleFileLimit;
        atomikosProperties8.logBaseName = "hi!";
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long15 = atomikosProperties14.defaultJtaTimeout;
        java.lang.String str16 = atomikosProperties14.getLogBaseName();
        atomikosProperties14.allowSubTransactions = true;
        boolean boolean19 = atomikosProperties14.enableLogging;
        java.lang.Object obj20 = properties1.getOrDefault((java.lang.Object) "hi!", (java.lang.Object) boolean19);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties21.logBaseDir = "";
        atomikosProperties21.setConsoleFileCount((int) (short) 10);
        atomikosProperties21.setLogBaseDir("{}");
        java.lang.String str28 = atomikosProperties21.getOutputDir();
        atomikosProperties21.setLogBaseName("hi!");
        boolean boolean31 = atomikosProperties21.isAllowSubTransactions();
        boolean boolean32 = atomikosProperties21.isThreadedTwoPhaseCommit();
        boolean boolean33 = atomikosProperties21.forceShutdownOnVmExit;
        boolean boolean34 = properties1.containsValue((java.lang.Object) atomikosProperties21);
        java.io.Writer writer35 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.store(writer35, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection2);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10000L + "'", long15 == 10000L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tmlog" + "'", str16, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertEquals("'" + obj20 + "' != '" + "{}" + "'", obj20, "{}");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test04014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04014");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int1 = atomikosProperties0.getConsoleFileCount();
        int int2 = atomikosProperties0.maxActives;
        int int3 = atomikosProperties0.getMaxActives();
        atomikosProperties0.forceShutdownOnVmExit = false;
        java.lang.String str6 = atomikosProperties0.getLogBaseName();
        atomikosProperties0.setForceShutdownOnVmExit(false);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel9 = atomikosProperties0.consoleLogLevel;
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 50 + "'", int2 == 50);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 50 + "'", int3 == 50);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel9 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel9.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
    }

    @Test
    public void test04015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04015");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        long long5 = atomikosProperties0.getMaxTimeout();
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet7 = properties6.keySet();
        atomikosProperties0.set(properties6, "hi!", (java.lang.Object) (-1.0f));
        java.util.Properties properties11 = new java.util.Properties();
        java.lang.Object obj13 = properties11.get((java.lang.Object) 0.0d);
        java.lang.Object obj14 = properties11.clone();
        java.lang.String str15 = properties11.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties16.logBaseDir = "";
        atomikosProperties16.setConsoleFileCount((int) (short) 10);
        long long21 = atomikosProperties16.getMaxTimeout();
        java.util.Properties properties22 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet23 = properties22.keySet();
        atomikosProperties16.set(properties22, "hi!", (java.lang.Object) (-1.0f));
        java.lang.Object obj29 = properties22.setProperty("", "hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties30.setDefaultJtaTimeout((-1L));
        java.util.Properties properties33 = new java.util.Properties();
        java.lang.Object obj35 = properties33.get((java.lang.Object) 0.0d);
        java.lang.Object obj36 = properties33.clone();
        boolean boolean38 = properties22.replace((java.lang.Object) (-1L), obj36, (java.lang.Object) 100.0d);
        java.util.Properties properties39 = new java.util.Properties();
        java.util.Properties properties40 = new java.util.Properties(properties39);
        properties40.clear();
        properties22.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties40);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties43 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties43.logBaseDir = "";
        atomikosProperties43.setConsoleFileCount((int) (short) 10);
        long long48 = atomikosProperties43.getMaxTimeout();
        java.util.Properties properties49 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet50 = properties49.keySet();
        atomikosProperties43.set(properties49, "hi!", (java.lang.Object) (-1.0f));
        java.lang.String str54 = atomikosProperties43.logBaseDir;
        java.lang.String str55 = atomikosProperties43.logBaseDir;
        java.util.Properties properties56 = atomikosProperties43.asProperties();
        java.lang.Object obj57 = properties11.replace((java.lang.Object) properties40, (java.lang.Object) atomikosProperties43);
        boolean boolean58 = properties6.contains((java.lang.Object) atomikosProperties43);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel59 = atomikosProperties43.consoleLogLevel;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery60 = atomikosProperties43.recovery;
        atomikosProperties43.outputDir = "{com.atomikos.icatch.hi!=-1.0}";
        long long63 = atomikosProperties43.maxTimeout;
        int int64 = atomikosProperties43.getConsoleFileCount();
        atomikosProperties43.setService("{hi!={}}");
        atomikosProperties43.setMaxActives((int) (byte) 100);
        atomikosProperties43.logBaseName = "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=-1, 0=INFO}";
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertNotNull(objSet7);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "{}");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{}" + "'", str15, "{}");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 300000L + "'", long21 == 300000L);
        org.junit.Assert.assertNotNull(objSet23);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "{}");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 300000L + "'", long48 == 300000L);
        org.junit.Assert.assertNotNull(objSet50);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(properties56);
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel59 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel59.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(recovery60);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 300000L + "'", long63 == 300000L);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 10 + "'", int64 == 10);
    }

    @Test
    public void test04016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04016");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setDefaultJtaTimeout((-1L));
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel3 = null;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel3;
        atomikosProperties0.outputDir = "";
        atomikosProperties0.allowSubTransactions = true;
        boolean boolean9 = atomikosProperties0.isThreadedTwoPhaseCommit();
        long long10 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.enableLogging = false;
        atomikosProperties0.setConsoleFileName("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=-1}");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 300000L + "'", long10 == 300000L);
    }

    @Test
    public void test04017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04017");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.checkpointInterval = 0;
        boolean boolean5 = atomikosProperties0.isThreadedTwoPhaseCommit();
        atomikosProperties0.setSerialJtaTransactions(false);
        java.util.Properties properties8 = new java.util.Properties();
        java.util.Properties properties9 = new java.util.Properties(properties8);
        java.util.Properties properties10 = new java.util.Properties();
        java.util.Properties properties11 = new java.util.Properties(properties10);
        java.util.Properties properties13 = new java.util.Properties();
        java.lang.Object obj15 = properties13.get((java.lang.Object) 0.0d);
        java.lang.Object obj16 = properties13.clone();
        java.lang.String str17 = properties13.toString();
        boolean boolean20 = properties13.remove((java.lang.Object) 0, (java.lang.Object) 'a');
        java.lang.Object obj21 = properties11.replace((java.lang.Object) 10.0d, (java.lang.Object) properties13);
        java.lang.String str22 = properties13.toString();
        java.util.Properties properties23 = new java.util.Properties(properties13);
        java.util.Properties properties24 = new java.util.Properties();
        java.util.Properties properties25 = new java.util.Properties(properties24);
        java.util.Properties properties27 = new java.util.Properties();
        java.lang.Object obj29 = properties27.get((java.lang.Object) 0.0d);
        java.lang.Object obj30 = properties27.clone();
        java.lang.String str31 = properties27.toString();
        boolean boolean34 = properties27.remove((java.lang.Object) 0, (java.lang.Object) 'a');
        java.lang.Object obj35 = properties25.replace((java.lang.Object) 10.0d, (java.lang.Object) properties27);
        java.util.Properties properties36 = new java.util.Properties(properties25);
        properties23.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties36);
        boolean boolean38 = properties8.contains((java.lang.Object) properties23);
        boolean boolean39 = properties23.isEmpty();
        java.util.Properties properties40 = new java.util.Properties();
        java.util.Properties properties41 = new java.util.Properties(properties40);
        java.util.Collection<java.lang.Object> objCollection42 = properties41.values();
        java.lang.Object obj45 = properties41.setProperty("hi!", "{}");
        java.lang.String str47 = properties41.getProperty("tmlog");
        properties41.clear();
        java.util.Set<java.lang.String> strSet49 = properties41.stringPropertyNames();
        properties23.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties41);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties52 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties52.enableLogging = true;
        int int55 = atomikosProperties52.consoleFileLimit;
        atomikosProperties52.logBaseName = "hi!";
        atomikosProperties52.enableLogging = false;
        atomikosProperties52.setMaxTimeout((long) '4');
        atomikosProperties52.setMaxTimeout((long) 1);
        atomikosProperties0.set(properties23, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=-1, 0=INFO}", (java.lang.Object) 1);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties65 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties65.setDefaultJtaTimeout((-1L));
        long long68 = atomikosProperties65.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties69 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int70 = atomikosProperties69.getConsoleFileCount();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties71 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties71.logBaseDir = "";
        atomikosProperties71.setConsoleFileCount((int) (short) 10);
        atomikosProperties71.setCheckpointInterval(10000L);
        long long78 = atomikosProperties71.maxTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel79 = org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO;
        atomikosProperties71.consoleLogLevel = atomikosLoggingLevel79;
        atomikosProperties69.consoleLogLevel = atomikosLoggingLevel79;
        atomikosProperties65.consoleLogLevel = atomikosLoggingLevel79;
        atomikosProperties65.forceShutdownOnVmExit = false;
        atomikosProperties65.checkpointInterval = (short) 1;
        atomikosProperties65.consoleFileCount = 0;
        atomikosProperties65.maxActives = (short) 1;
        atomikosProperties65.setTransactionManagerUniqueName("");
        java.lang.Object obj93 = properties23.remove((java.lang.Object) atomikosProperties65);
        atomikosProperties65.setEnableLogging(false);
        java.lang.String str96 = atomikosProperties65.getService();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "{}");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "{}" + "'", str17, "{}");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{}" + "'", str22, "{}");
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "{}");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "{}" + "'", str31, "{}");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(objCollection42);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 500L + "'", long68 == 500L);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 300000L + "'", long78 == 300000L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel79 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO + "'", atomikosLoggingLevel79.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO));
        org.junit.Assert.assertNull(obj93);
        org.junit.Assert.assertNull(str96);
    }

    @Test
    public void test04018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04018");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        boolean boolean3 = atomikosProperties0.isForceShutdownOnVmExit();
        boolean boolean4 = atomikosProperties0.allowSubTransactions;
        boolean boolean5 = atomikosProperties0.threadedTwoPhaseCommit;
        atomikosProperties0.setForceShutdownOnVmExit(false);
        int int8 = atomikosProperties0.getMaxActives();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 50 + "'", int8 == 50);
    }

    @Test
    public void test04019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04019");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        long long5 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.service = "";
        java.lang.String str8 = atomikosProperties0.logBaseDir;
        boolean boolean9 = atomikosProperties0.threadedTwoPhaseCommit;
        java.lang.String str10 = atomikosProperties0.getService();
        java.lang.String str11 = atomikosProperties0.consoleFileName;
        java.lang.String str12 = atomikosProperties0.service;
        atomikosProperties0.setMaxTimeout((long) 35);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel15 = atomikosProperties0.getConsoleLogLevel();
        atomikosProperties0.setLogBaseDir("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.output_dir=, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=10, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=-1}");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "tm.out" + "'", str11, "tm.out");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel15 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel15.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
    }

    @Test
    public void test04020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04020");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setDefaultJtaTimeout((-1L));
        int int3 = atomikosProperties0.getConsoleFileLimit();
        java.util.Properties properties4 = atomikosProperties0.asProperties();
        atomikosProperties0.setAllowSubTransactions(false);
        java.util.Properties properties7 = atomikosProperties0.asProperties();
        properties7.clear();
        java.util.Properties properties9 = new java.util.Properties();
        java.util.Properties properties10 = new java.util.Properties(properties9);
        java.util.Collection<java.lang.Object> objCollection11 = properties9.values();
        int int12 = properties9.size();
        java.util.Enumeration<java.lang.Object> objEnumeration13 = properties9.elements();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel15 = org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN;
        java.util.Properties properties16 = new java.util.Properties();
        java.util.Properties properties17 = new java.util.Properties(properties16);
        java.util.Collection<java.lang.Object> objCollection18 = properties17.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.enableLogging = true;
        long long22 = atomikosProperties19.getCheckpointInterval();
        boolean boolean24 = properties17.remove((java.lang.Object) long22, (java.lang.Object) (byte) 100);
        java.lang.String str25 = properties17.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties26.logBaseDir = "";
        atomikosProperties26.setConsoleFileCount((int) (short) 10);
        long long31 = atomikosProperties26.getMaxTimeout();
        java.util.Properties properties32 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet33 = properties32.keySet();
        atomikosProperties26.set(properties32, "hi!", (java.lang.Object) (-1.0f));
        java.util.Properties properties37 = new java.util.Properties();
        java.lang.Object obj39 = properties37.get((java.lang.Object) 0.0d);
        java.lang.Object obj40 = properties37.clone();
        java.lang.String str41 = properties37.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties42.logBaseDir = "";
        atomikosProperties42.setConsoleFileCount((int) (short) 10);
        long long47 = atomikosProperties42.getMaxTimeout();
        java.util.Properties properties48 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet49 = properties48.keySet();
        atomikosProperties42.set(properties48, "hi!", (java.lang.Object) (-1.0f));
        java.lang.Object obj55 = properties48.setProperty("", "hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties56 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties56.setDefaultJtaTimeout((-1L));
        java.util.Properties properties59 = new java.util.Properties();
        java.lang.Object obj61 = properties59.get((java.lang.Object) 0.0d);
        java.lang.Object obj62 = properties59.clone();
        boolean boolean64 = properties48.replace((java.lang.Object) (-1L), obj62, (java.lang.Object) 100.0d);
        java.util.Properties properties65 = new java.util.Properties();
        java.util.Properties properties66 = new java.util.Properties(properties65);
        properties66.clear();
        properties48.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties66);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties69 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties69.logBaseDir = "";
        atomikosProperties69.setConsoleFileCount((int) (short) 10);
        long long74 = atomikosProperties69.getMaxTimeout();
        java.util.Properties properties75 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet76 = properties75.keySet();
        atomikosProperties69.set(properties75, "hi!", (java.lang.Object) (-1.0f));
        java.lang.String str80 = atomikosProperties69.logBaseDir;
        java.lang.String str81 = atomikosProperties69.logBaseDir;
        java.util.Properties properties82 = atomikosProperties69.asProperties();
        java.lang.Object obj83 = properties37.replace((java.lang.Object) properties66, (java.lang.Object) atomikosProperties69);
        boolean boolean84 = properties32.contains((java.lang.Object) atomikosProperties69);
        boolean boolean85 = properties17.containsValue((java.lang.Object) properties32);
        boolean boolean86 = properties9.replace((java.lang.Object) 500L, (java.lang.Object) atomikosLoggingLevel15, (java.lang.Object) boolean85);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet87 = properties9.entrySet();
        java.lang.Object obj88 = properties7.remove((java.lang.Object) properties9);
        java.io.PrintStream printStream89 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties7.list(printStream89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(properties4);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objEnumeration13);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel15 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel15.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(objCollection18);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 500L + "'", long22 == 500L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "{}" + "'", str25, "{}");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 300000L + "'", long31 == 300000L);
        org.junit.Assert.assertNotNull(objSet33);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertEquals(obj40.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "{}");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "{}" + "'", str41, "{}");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 300000L + "'", long47 == 300000L);
        org.junit.Assert.assertNotNull(objSet49);
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertNull(obj61);
        org.junit.Assert.assertNotNull(obj62);
        org.junit.Assert.assertEquals(obj62.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj62), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj62), "{}");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 300000L + "'", long74 == 300000L);
        org.junit.Assert.assertNotNull(objSet76);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNotNull(properties82);
        org.junit.Assert.assertNull(obj83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(objEntrySet87);
        org.junit.Assert.assertNull(obj88);
    }

    @Test
    public void test04021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04021");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.get((java.lang.Object) 0.0d);
        java.lang.Object obj3 = properties0.clone();
        java.lang.String str4 = properties0.toString();
        boolean boolean7 = properties0.remove((java.lang.Object) 0, (java.lang.Object) 'a');
        java.lang.Object obj8 = null;
        boolean boolean9 = properties0.equals(obj8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.logBaseDir = "";
        atomikosProperties10.setConsoleFileCount((int) (short) 10);
        java.lang.String str15 = atomikosProperties10.logBaseName;
        atomikosProperties10.outputDir = "";
        java.util.Properties properties18 = atomikosProperties10.asProperties();
        java.util.Properties properties19 = atomikosProperties10.asProperties();
        long long20 = atomikosProperties10.defaultJtaTimeout;
        boolean boolean21 = atomikosProperties10.isAllowSubTransactions();
        java.lang.String str22 = atomikosProperties10.getConsoleFileName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties23.setDefaultJtaTimeout((-1L));
        int int26 = atomikosProperties23.getConsoleFileLimit();
        atomikosProperties23.setCheckpointInterval((long) '#');
        java.lang.String str29 = atomikosProperties23.logBaseName;
        java.lang.String str30 = atomikosProperties23.outputDir;
        java.lang.Object obj31 = properties0.put((java.lang.Object) str22, (java.lang.Object) atomikosProperties23);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties32.logBaseDir = "";
        atomikosProperties32.setConsoleFileCount((int) (short) 10);
        java.lang.String str37 = atomikosProperties32.logBaseName;
        atomikosProperties32.outputDir = "";
        java.util.Properties properties40 = atomikosProperties32.asProperties();
        boolean boolean41 = atomikosProperties32.serialJtaTransactions;
        int int42 = atomikosProperties32.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery43 = atomikosProperties32.recovery;
        java.util.Properties properties44 = new java.util.Properties();
        java.util.Properties properties45 = new java.util.Properties(properties44);
        java.util.Collection<java.lang.Object> objCollection46 = properties45.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties47 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties47.enableLogging = true;
        long long50 = atomikosProperties47.getCheckpointInterval();
        boolean boolean52 = properties45.remove((java.lang.Object) long50, (java.lang.Object) (byte) 100);
        boolean boolean54 = properties45.equals((java.lang.Object) (short) 1);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet55 = properties45.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties56 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties56.setDefaultJtaTimeout((-1L));
        long long59 = atomikosProperties56.checkpointInterval;
        boolean boolean60 = atomikosProperties56.forceShutdownOnVmExit;
        atomikosProperties56.setThreadedTwoPhaseCommit(true);
        boolean boolean63 = properties45.contains((java.lang.Object) true);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties64 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties64.logBaseDir = "";
        atomikosProperties64.setConsoleFileCount((int) (short) 10);
        long long69 = atomikosProperties64.getMaxTimeout();
        java.util.Properties properties70 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet71 = properties70.keySet();
        atomikosProperties64.set(properties70, "hi!", (java.lang.Object) (-1.0f));
        java.lang.String str75 = atomikosProperties64.logBaseDir;
        java.lang.String str76 = atomikosProperties64.logBaseDir;
        java.lang.String str77 = atomikosProperties64.logBaseDir;
        boolean boolean78 = atomikosProperties64.isEnableLogging();
        boolean boolean79 = atomikosProperties64.forceShutdownOnVmExit;
        boolean boolean80 = properties45.containsValue((java.lang.Object) atomikosProperties64);
        boolean boolean81 = properties45.isEmpty();
        java.lang.Object obj82 = properties0.putIfAbsent((java.lang.Object) recovery43, (java.lang.Object) boolean81);
        recovery43.maxRetries = (short) 10;
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{}" + "'", str4, "{}");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "tmlog" + "'", str15, "tmlog");
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertNotNull(properties19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10000L + "'", long20 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "tm.out" + "'", str22, "tm.out");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "tmlog" + "'", str29, "tmlog");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "tmlog" + "'", str37, "tmlog");
        org.junit.Assert.assertNotNull(properties40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(recovery43);
        org.junit.Assert.assertNotNull(objCollection46);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 500L + "'", long50 == 500L);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(objEntrySet55);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 500L + "'", long59 == 500L);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 300000L + "'", long69 == 300000L);
        org.junit.Assert.assertNotNull(objSet71);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNull(obj82);
    }

    @Test
    public void test04022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04022");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        atomikosProperties0.setLogBaseDir("{}");
        java.util.Properties properties7 = atomikosProperties0.asProperties();
        java.util.Set<java.lang.String> strSet8 = properties7.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int10 = atomikosProperties9.getConsoleFileCount();
        int int11 = atomikosProperties9.maxActives;
        atomikosProperties9.setConsoleFileName("");
        atomikosProperties9.transactionManagerUniqueName = "{}";
        java.util.Properties properties16 = atomikosProperties9.asProperties();
        boolean boolean17 = atomikosProperties9.threadedTwoPhaseCommit;
        atomikosProperties9.enableLogging = true;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int21 = atomikosProperties20.getConsoleFileCount();
        int int22 = atomikosProperties20.maxActives;
        atomikosProperties20.setConsoleFileName("");
        atomikosProperties20.transactionManagerUniqueName = "{}";
        atomikosProperties20.setMaxActives(0);
        boolean boolean29 = atomikosProperties20.forceShutdownOnVmExit;
        java.lang.Object obj30 = properties7.put((java.lang.Object) atomikosProperties9, (java.lang.Object) atomikosProperties20);
        atomikosProperties9.setConsoleFileCount((int) '4');
        int int33 = atomikosProperties9.getConsoleFileLimit();
        java.util.Properties properties34 = atomikosProperties9.asProperties();
        java.util.Collection<java.lang.Object> objCollection35 = properties34.values();
        java.util.Properties properties36 = new java.util.Properties(properties34);
        java.lang.String str38 = properties34.getProperty("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.output_dir=, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=10, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=-1}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery39 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery39.maxRetries = (-1);
        recovery39.setDelay((long) (short) 0);
        long long44 = recovery39.forgetOrphanedLogEntriesDelay;
        recovery39.setDelay((long) 1);
        int int47 = recovery39.getMaxRetries();
        recovery39.setMaxRetries((int) '4');
        recovery39.setForgetOrphanedLogEntriesDelay(1L);
        java.util.Properties properties52 = new java.util.Properties();
        java.util.Properties properties53 = new java.util.Properties(properties52);
        java.util.Properties properties55 = new java.util.Properties();
        java.lang.Object obj57 = properties55.get((java.lang.Object) 0.0d);
        java.lang.Object obj58 = properties55.clone();
        java.lang.String str59 = properties55.toString();
        boolean boolean62 = properties55.remove((java.lang.Object) 0, (java.lang.Object) 'a');
        java.lang.Object obj63 = properties53.replace((java.lang.Object) 10.0d, (java.lang.Object) properties55);
        java.lang.String str64 = properties55.toString();
        java.util.Properties properties65 = new java.util.Properties(properties55);
        java.lang.Object obj68 = properties65.getOrDefault((java.lang.Object) (byte) 10, (java.lang.Object) (short) -1);
        java.util.Set<java.lang.String> strSet69 = properties65.stringPropertyNames();
        java.util.Set<java.lang.Object> objSet70 = properties65.keySet();
        java.util.Properties properties71 = new java.util.Properties(properties65);
        java.lang.Object obj72 = properties34.replace((java.lang.Object) 1L, (java.lang.Object) properties71);
        java.lang.Object obj73 = properties34.clone();
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 50 + "'", int11 == 50);
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 50 + "'", int22 == 50);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(properties34);
        org.junit.Assert.assertNotNull(objCollection35);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 86400000L + "'", long44 == 86400000L);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertEquals(obj58.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj58), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj58), "{}");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "{}" + "'", str59, "{}");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "{}" + "'", str64, "{}");
        org.junit.Assert.assertEquals("'" + obj68 + "' != '" + (short) -1 + "'", obj68, (short) -1);
        org.junit.Assert.assertNotNull(strSet69);
        org.junit.Assert.assertNotNull(objSet70);
        org.junit.Assert.assertNull(obj72);
        org.junit.Assert.assertNotNull(obj73);
// flaky:         org.junit.Assert.assertEquals(obj73.toString(), "{com.atomikos.icatch.console_file_name=, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=52, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name={}, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj73), "{com.atomikos.icatch.console_file_name=, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=52, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name={}, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj73), "{com.atomikos.icatch.console_file_name=, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=52, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name={}, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
    }

    @Test
    public void test04023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04023");
        java.util.Properties properties0 = new java.util.Properties();
        int int1 = properties0.size();
        java.util.Properties properties2 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties2.keys();
        properties2.clear();
        java.io.OutputStream outputStream5 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties2.storeToXML(outputStream5, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=10, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir={}, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(objEnumeration3);
    }

    @Test
    public void test04024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04024");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        atomikosProperties0.setLogBaseDir("{}");
        java.lang.String str7 = atomikosProperties0.getOutputDir();
        atomikosProperties0.setLogBaseName("hi!");
        boolean boolean10 = atomikosProperties0.isAllowSubTransactions();
        boolean boolean11 = atomikosProperties0.isThreadedTwoPhaseCommit();
        boolean boolean12 = atomikosProperties0.forceShutdownOnVmExit;
        boolean boolean13 = atomikosProperties0.enableLogging;
        atomikosProperties0.setTransactionManagerUniqueName("");
        atomikosProperties0.checkpointInterval = 19;
        long long18 = atomikosProperties0.defaultJtaTimeout;
        int int19 = atomikosProperties0.getConsoleFileCount();
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10000L + "'", long18 == 10000L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
    }

    @Test
    public void test04025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04025");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        long long5 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.logBaseName = "tmlog";
        atomikosProperties0.logBaseName = "{{}={}}";
        boolean boolean10 = atomikosProperties0.serialJtaTransactions;
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 10000L + "'", long5 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test04026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04026");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.maxRetries = (-1);
        recovery0.retryInterval = 10000L;
        recovery0.setMaxRetries((int) 'a');
        recovery0.maxRetries = 'a';
        recovery0.retryInterval = (byte) -1;
        long long11 = recovery0.getRetryInterval();
        long long12 = recovery0.retryInterval;
        long long13 = recovery0.getRetryInterval();
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
    }

    @Test
    public void test04027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04027");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Collection<java.lang.Object> objCollection2 = properties1.values();
        java.util.Properties properties3 = new java.util.Properties();
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Collection<java.lang.Object> objCollection5 = properties3.values();
        java.util.Enumeration<java.lang.Object> objEnumeration6 = properties3.keys();
        boolean boolean7 = properties1.contains((java.lang.Object) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties8.enableLogging = true;
        long long11 = atomikosProperties8.getCheckpointInterval();
        java.lang.String str12 = atomikosProperties8.getService();
        java.lang.String str13 = atomikosProperties8.logBaseDir;
        atomikosProperties8.setEnableLogging(false);
        atomikosProperties8.consoleFileCount = 0;
        long long18 = atomikosProperties8.getMaxTimeout();
        int int19 = atomikosProperties8.consoleFileLimit;
        java.util.Properties properties20 = atomikosProperties8.asProperties();
        java.util.Properties properties21 = new java.util.Properties(properties20);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int23 = atomikosProperties22.getConsoleFileCount();
        int int24 = atomikosProperties22.maxActives;
        atomikosProperties22.setConsoleFileName("");
        atomikosProperties22.transactionManagerUniqueName = "{}";
        java.util.Properties properties29 = atomikosProperties22.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties30.logBaseDir = "";
        atomikosProperties30.setConsoleFileCount((int) (short) 10);
        long long35 = atomikosProperties30.getMaxTimeout();
        java.util.Properties properties36 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet37 = properties36.keySet();
        atomikosProperties30.set(properties36, "hi!", (java.lang.Object) (-1.0f));
        java.lang.Object obj43 = properties36.setProperty("", "hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties44.setDefaultJtaTimeout((-1L));
        java.util.Properties properties47 = new java.util.Properties();
        java.lang.Object obj49 = properties47.get((java.lang.Object) 0.0d);
        java.lang.Object obj50 = properties47.clone();
        boolean boolean52 = properties36.replace((java.lang.Object) (-1L), obj50, (java.lang.Object) 100.0d);
        java.util.Properties properties53 = new java.util.Properties();
        java.util.Properties properties54 = new java.util.Properties(properties53);
        properties54.clear();
        properties36.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties54);
        java.util.Enumeration<java.lang.Object> objEnumeration57 = properties54.elements();
        java.lang.String str59 = properties54.getProperty("");
        java.util.Properties properties60 = new java.util.Properties(properties54);
        java.util.Enumeration<java.lang.Object> objEnumeration61 = properties60.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties62 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int63 = atomikosProperties62.getConsoleFileCount();
        int int64 = atomikosProperties62.maxActives;
        atomikosProperties62.setEnableLogging(true);
        boolean boolean67 = atomikosProperties62.isThreadedTwoPhaseCommit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel68 = atomikosProperties62.consoleLogLevel;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties69 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties69.logBaseDir = "";
        atomikosProperties69.setConsoleFileCount((int) (short) 10);
        long long74 = atomikosProperties69.getMaxTimeout();
        java.util.Properties properties75 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet76 = properties75.keySet();
        atomikosProperties69.set(properties75, "hi!", (java.lang.Object) (-1.0f));
        java.lang.String str80 = atomikosProperties69.logBaseDir;
        boolean boolean81 = atomikosProperties69.enableLogging;
        java.lang.Object obj82 = properties60.putIfAbsent((java.lang.Object) atomikosLoggingLevel68, (java.lang.Object) atomikosProperties69);
        boolean boolean83 = properties3.replace((java.lang.Object) properties20, (java.lang.Object) atomikosProperties22, (java.lang.Object) atomikosLoggingLevel68);
        atomikosProperties22.threadedTwoPhaseCommit = true;
        boolean boolean86 = atomikosProperties22.isThreadedTwoPhaseCommit();
        long long87 = atomikosProperties22.maxTimeout;
        long long88 = atomikosProperties22.getDefaultJtaTimeout();
        long long89 = atomikosProperties22.maxTimeout;
        atomikosProperties22.setForceShutdownOnVmExit(false);
        org.junit.Assert.assertNotNull(objCollection2);
        org.junit.Assert.assertNotNull(objCollection5);
        org.junit.Assert.assertNotNull(objEnumeration6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 500L + "'", long11 == 500L);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 300000L + "'", long18 == 300000L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(properties20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 50 + "'", int24 == 50);
        org.junit.Assert.assertNotNull(properties29);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 300000L + "'", long35 == 300000L);
        org.junit.Assert.assertNotNull(objSet37);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertEquals(obj50.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj50), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj50), "{}");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objEnumeration57);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(objEnumeration61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 50 + "'", int64 == 50);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel68 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel68.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 300000L + "'", long74 == 300000L);
        org.junit.Assert.assertNotNull(objSet76);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNull(obj82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 300000L + "'", long87 == 300000L);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 10000L + "'", long88 == 10000L);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 300000L + "'", long89 == 300000L);
    }

    @Test
    public void test04028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04028");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties3 = new java.util.Properties();
        java.lang.Object obj5 = properties3.get((java.lang.Object) 0.0d);
        java.lang.Object obj6 = properties3.clone();
        java.lang.String str7 = properties3.toString();
        boolean boolean10 = properties3.remove((java.lang.Object) 0, (java.lang.Object) 'a');
        java.lang.Object obj11 = properties1.replace((java.lang.Object) 10.0d, (java.lang.Object) properties3);
        java.lang.String str12 = properties3.toString();
        java.util.Properties properties13 = new java.util.Properties(properties3);
        java.lang.Object obj16 = properties13.getOrDefault((java.lang.Object) (byte) 10, (java.lang.Object) (short) -1);
        java.io.OutputStream outputStream17 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties13.save(outputStream17, "{hi!={}}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "{}");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "{}" + "'", str7, "{}");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "{}" + "'", str12, "{}");
        org.junit.Assert.assertEquals("'" + obj16 + "' != '" + (short) -1 + "'", obj16, (short) -1);
    }

    @Test
    public void test04029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04029");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Collection<java.lang.Object> objCollection2 = properties1.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties3 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties3.enableLogging = true;
        long long6 = atomikosProperties3.getCheckpointInterval();
        boolean boolean8 = properties1.remove((java.lang.Object) long6, (java.lang.Object) (byte) 100);
        java.lang.String str9 = properties1.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.logBaseDir = "";
        atomikosProperties10.setConsoleFileCount((int) (short) 10);
        long long15 = atomikosProperties10.getMaxTimeout();
        java.util.Properties properties16 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet17 = properties16.keySet();
        atomikosProperties10.set(properties16, "hi!", (java.lang.Object) (-1.0f));
        java.lang.Object obj23 = properties16.setProperty("", "hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties24.setDefaultJtaTimeout((-1L));
        java.util.Properties properties27 = new java.util.Properties();
        java.lang.Object obj29 = properties27.get((java.lang.Object) 0.0d);
        java.lang.Object obj30 = properties27.clone();
        boolean boolean32 = properties16.replace((java.lang.Object) (-1L), obj30, (java.lang.Object) 100.0d);
        java.util.Properties properties33 = new java.util.Properties();
        java.util.Properties properties34 = new java.util.Properties(properties33);
        properties34.clear();
        properties16.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties34);
        java.util.Enumeration<java.lang.Object> objEnumeration37 = properties34.elements();
        java.lang.String str39 = properties34.getProperty("");
        java.util.Properties properties40 = new java.util.Properties(properties34);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery41 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long42 = recovery41.getRetryInterval();
        recovery41.delay = 10L;
        boolean boolean45 = properties1.remove((java.lang.Object) properties40, (java.lang.Object) 10L);
        java.util.Enumeration<java.lang.Object> objEnumeration46 = properties40.keys();
        java.lang.Object obj47 = properties40.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties48 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long49 = atomikosProperties48.defaultJtaTimeout;
        atomikosProperties48.logBaseName = "tm.out";
        boolean boolean52 = properties40.containsKey((java.lang.Object) atomikosProperties48);
        java.lang.String str54 = properties40.getProperty("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=10, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=true, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir=, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        int int55 = properties40.size();
        boolean boolean56 = properties40.isEmpty();
        org.junit.Assert.assertNotNull(objCollection2);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{}" + "'", str9, "{}");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 300000L + "'", long15 == 300000L);
        org.junit.Assert.assertNotNull(objSet17);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "{}");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objEnumeration37);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 10000L + "'", long42 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(objEnumeration46);
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertEquals(obj47.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj47), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj47), "{}");
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 10000L + "'", long49 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
    }

    @Test
    public void test04030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04030");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        long long5 = atomikosProperties0.getMaxTimeout();
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet7 = properties6.keySet();
        atomikosProperties0.set(properties6, "hi!", (java.lang.Object) (-1.0f));
        java.util.Enumeration<java.lang.Object> objEnumeration11 = properties6.keys();
        int int12 = properties6.size();
        java.util.Enumeration<java.lang.Object> objEnumeration13 = properties6.elements();
        properties6.clear();
        java.util.Enumeration<?> wildcardEnumeration15 = properties6.propertyNames();
        java.lang.String str17 = properties6.getProperty("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=-1, 0=INFO}");
        java.util.Properties properties18 = new java.util.Properties(properties6);
        java.io.Writer writer19 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties6.store(writer19, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertNotNull(objSet7);
        org.junit.Assert.assertNotNull(objEnumeration11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(objEnumeration13);
        org.junit.Assert.assertNotNull(wildcardEnumeration15);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test04031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04031");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Collection<java.lang.Object> objCollection2 = properties1.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties3 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties3.enableLogging = true;
        long long6 = atomikosProperties3.getCheckpointInterval();
        boolean boolean8 = properties1.remove((java.lang.Object) long6, (java.lang.Object) (byte) 100);
        java.lang.String str9 = properties1.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.logBaseDir = "";
        atomikosProperties10.setConsoleFileCount((int) (short) 10);
        long long15 = atomikosProperties10.getMaxTimeout();
        java.util.Properties properties16 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet17 = properties16.keySet();
        atomikosProperties10.set(properties16, "hi!", (java.lang.Object) (-1.0f));
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.Object obj23 = properties21.get((java.lang.Object) 0.0d);
        java.lang.Object obj24 = properties21.clone();
        java.lang.String str25 = properties21.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties26.logBaseDir = "";
        atomikosProperties26.setConsoleFileCount((int) (short) 10);
        long long31 = atomikosProperties26.getMaxTimeout();
        java.util.Properties properties32 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet33 = properties32.keySet();
        atomikosProperties26.set(properties32, "hi!", (java.lang.Object) (-1.0f));
        java.lang.Object obj39 = properties32.setProperty("", "hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties40.setDefaultJtaTimeout((-1L));
        java.util.Properties properties43 = new java.util.Properties();
        java.lang.Object obj45 = properties43.get((java.lang.Object) 0.0d);
        java.lang.Object obj46 = properties43.clone();
        boolean boolean48 = properties32.replace((java.lang.Object) (-1L), obj46, (java.lang.Object) 100.0d);
        java.util.Properties properties49 = new java.util.Properties();
        java.util.Properties properties50 = new java.util.Properties(properties49);
        properties50.clear();
        properties32.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties50);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties53 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties53.logBaseDir = "";
        atomikosProperties53.setConsoleFileCount((int) (short) 10);
        long long58 = atomikosProperties53.getMaxTimeout();
        java.util.Properties properties59 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet60 = properties59.keySet();
        atomikosProperties53.set(properties59, "hi!", (java.lang.Object) (-1.0f));
        java.lang.String str64 = atomikosProperties53.logBaseDir;
        java.lang.String str65 = atomikosProperties53.logBaseDir;
        java.util.Properties properties66 = atomikosProperties53.asProperties();
        java.lang.Object obj67 = properties21.replace((java.lang.Object) properties50, (java.lang.Object) atomikosProperties53);
        boolean boolean68 = properties16.contains((java.lang.Object) atomikosProperties53);
        boolean boolean69 = properties1.containsValue((java.lang.Object) properties16);
        java.lang.Object obj70 = properties1.clone();
        java.util.Properties properties71 = new java.util.Properties();
        java.util.Properties properties72 = new java.util.Properties(properties71);
        properties71.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery74 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery74.maxRetries = (-1);
        recovery74.setDelay((long) (short) 0);
        recovery74.maxRetries = 0;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery81 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long82 = recovery81.getRetryInterval();
        long long83 = recovery81.retryInterval;
        boolean boolean84 = properties71.remove((java.lang.Object) 0, (java.lang.Object) long83);
        java.lang.String str85 = properties71.toString();
        java.util.Enumeration<java.lang.Object> objEnumeration86 = properties71.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties87 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties87.logBaseDir = "";
        atomikosProperties87.setConsoleFileCount((int) (short) 10);
        atomikosProperties87.setCheckpointInterval(10000L);
        long long94 = atomikosProperties87.maxTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel95 = atomikosProperties87.getConsoleLogLevel();
        boolean boolean96 = properties1.remove((java.lang.Object) properties71, (java.lang.Object) atomikosProperties87);
        java.util.Properties properties97 = new java.util.Properties(properties71);
        java.io.InputStream inputStream98 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties71.loadFromXML(inputStream98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection2);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{}" + "'", str9, "{}");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 300000L + "'", long15 == 300000L);
        org.junit.Assert.assertNotNull(objSet17);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "{}");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "{}" + "'", str25, "{}");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 300000L + "'", long31 == 300000L);
        org.junit.Assert.assertNotNull(objSet33);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertEquals(obj46.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj46), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj46), "{}");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 300000L + "'", long58 == 300000L);
        org.junit.Assert.assertNotNull(objSet60);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(properties66);
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(obj70);
        org.junit.Assert.assertEquals(obj70.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj70), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj70), "{}");
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 10000L + "'", long82 == 10000L);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 10000L + "'", long83 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "{}" + "'", str85, "{}");
        org.junit.Assert.assertNotNull(objEnumeration86);
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 300000L + "'", long94 == 300000L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel95 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel95.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test04032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04032");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        java.lang.String str5 = atomikosProperties0.logBaseName;
        atomikosProperties0.outputDir = "";
        java.util.Properties properties8 = atomikosProperties0.asProperties();
        boolean boolean9 = atomikosProperties0.serialJtaTransactions;
        int int10 = atomikosProperties0.getConsoleFileLimit();
        atomikosProperties0.setThreadedTwoPhaseCommit(false);
        int int13 = atomikosProperties0.consoleFileCount;
        atomikosProperties0.setDefaultJtaTimeout(86400000L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tmlog" + "'", str5, "tmlog");
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
    }

    @Test
    public void test04033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04033");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setDefaultJtaTimeout((-1L));
        long long3 = atomikosProperties0.checkpointInterval;
        boolean boolean4 = atomikosProperties0.isEnableLogging();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 500L + "'", long3 == 500L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test04034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04034");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setDefaultJtaTimeout((-1L));
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel3 = null;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel3;
        atomikosProperties0.outputDir = "";
        int int7 = atomikosProperties0.maxActives;
        java.lang.String str8 = atomikosProperties0.logBaseDir;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery9 = atomikosProperties0.getRecovery();
        long long10 = recovery9.getForgetOrphanedLogEntriesDelay();
        long long11 = recovery9.forgetOrphanedLogEntriesDelay;
        int int12 = recovery9.maxRetries;
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(recovery9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 86400000L + "'", long10 == 86400000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 86400000L + "'", long11 == 86400000L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 5 + "'", int12 == 5);
    }

    @Test
    public void test04035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04035");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        java.lang.String str5 = atomikosProperties0.logBaseName;
        atomikosProperties0.outputDir = "";
        java.util.Properties properties8 = atomikosProperties0.asProperties();
        java.util.Properties properties9 = new java.util.Properties(properties8);
        java.util.Properties properties10 = new java.util.Properties();
        java.util.Properties properties11 = new java.util.Properties(properties10);
        java.util.Collection<java.lang.Object> objCollection12 = properties10.values();
        int int13 = properties10.size();
        java.util.Enumeration<java.lang.Object> objEnumeration14 = properties10.elements();
        java.util.Properties properties15 = new java.util.Properties(properties10);
        boolean boolean16 = properties8.containsKey((java.lang.Object) properties10);
        properties8.clear();
        java.util.Properties properties18 = new java.util.Properties(properties8);
        java.io.PrintStream printStream19 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties8.list(printStream19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tmlog" + "'", str5, "tmlog");
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertNotNull(objCollection12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(objEnumeration14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test04036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04036");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        long long5 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.service = "";
        boolean boolean8 = atomikosProperties0.isSerialJtaTransactions();
        boolean boolean9 = atomikosProperties0.enableLogging;
        atomikosProperties0.setOutputDir("{com.atomikos.icatch.hi!=-1.0}");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test04037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04037");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Collection<java.lang.Object> objCollection2 = properties1.values();
        java.util.Properties properties3 = new java.util.Properties();
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Collection<java.lang.Object> objCollection5 = properties3.values();
        java.util.Enumeration<java.lang.Object> objEnumeration6 = properties3.keys();
        boolean boolean7 = properties1.contains((java.lang.Object) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties8.enableLogging = true;
        long long11 = atomikosProperties8.getCheckpointInterval();
        java.lang.String str12 = atomikosProperties8.getService();
        java.lang.String str13 = atomikosProperties8.logBaseDir;
        atomikosProperties8.setEnableLogging(false);
        atomikosProperties8.consoleFileCount = 0;
        long long18 = atomikosProperties8.getMaxTimeout();
        int int19 = atomikosProperties8.consoleFileLimit;
        java.util.Properties properties20 = atomikosProperties8.asProperties();
        java.util.Properties properties21 = new java.util.Properties(properties20);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int23 = atomikosProperties22.getConsoleFileCount();
        int int24 = atomikosProperties22.maxActives;
        atomikosProperties22.setConsoleFileName("");
        atomikosProperties22.transactionManagerUniqueName = "{}";
        java.util.Properties properties29 = atomikosProperties22.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties30.logBaseDir = "";
        atomikosProperties30.setConsoleFileCount((int) (short) 10);
        long long35 = atomikosProperties30.getMaxTimeout();
        java.util.Properties properties36 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet37 = properties36.keySet();
        atomikosProperties30.set(properties36, "hi!", (java.lang.Object) (-1.0f));
        java.lang.Object obj43 = properties36.setProperty("", "hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties44.setDefaultJtaTimeout((-1L));
        java.util.Properties properties47 = new java.util.Properties();
        java.lang.Object obj49 = properties47.get((java.lang.Object) 0.0d);
        java.lang.Object obj50 = properties47.clone();
        boolean boolean52 = properties36.replace((java.lang.Object) (-1L), obj50, (java.lang.Object) 100.0d);
        java.util.Properties properties53 = new java.util.Properties();
        java.util.Properties properties54 = new java.util.Properties(properties53);
        properties54.clear();
        properties36.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties54);
        java.util.Enumeration<java.lang.Object> objEnumeration57 = properties54.elements();
        java.lang.String str59 = properties54.getProperty("");
        java.util.Properties properties60 = new java.util.Properties(properties54);
        java.util.Enumeration<java.lang.Object> objEnumeration61 = properties60.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties62 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int63 = atomikosProperties62.getConsoleFileCount();
        int int64 = atomikosProperties62.maxActives;
        atomikosProperties62.setEnableLogging(true);
        boolean boolean67 = atomikosProperties62.isThreadedTwoPhaseCommit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel68 = atomikosProperties62.consoleLogLevel;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties69 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties69.logBaseDir = "";
        atomikosProperties69.setConsoleFileCount((int) (short) 10);
        long long74 = atomikosProperties69.getMaxTimeout();
        java.util.Properties properties75 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet76 = properties75.keySet();
        atomikosProperties69.set(properties75, "hi!", (java.lang.Object) (-1.0f));
        java.lang.String str80 = atomikosProperties69.logBaseDir;
        boolean boolean81 = atomikosProperties69.enableLogging;
        java.lang.Object obj82 = properties60.putIfAbsent((java.lang.Object) atomikosLoggingLevel68, (java.lang.Object) atomikosProperties69);
        boolean boolean83 = properties3.replace((java.lang.Object) properties20, (java.lang.Object) atomikosProperties22, (java.lang.Object) atomikosLoggingLevel68);
        atomikosProperties22.threadedTwoPhaseCommit = true;
        boolean boolean86 = atomikosProperties22.isThreadedTwoPhaseCommit();
        long long87 = atomikosProperties22.maxTimeout;
        java.lang.String str88 = atomikosProperties22.logBaseDir;
        org.junit.Assert.assertNotNull(objCollection2);
        org.junit.Assert.assertNotNull(objCollection5);
        org.junit.Assert.assertNotNull(objEnumeration6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 500L + "'", long11 == 500L);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 300000L + "'", long18 == 300000L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(properties20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 50 + "'", int24 == 50);
        org.junit.Assert.assertNotNull(properties29);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 300000L + "'", long35 == 300000L);
        org.junit.Assert.assertNotNull(objSet37);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertEquals(obj50.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj50), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj50), "{}");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objEnumeration57);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(objEnumeration61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 50 + "'", int64 == 50);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel68 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel68.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 300000L + "'", long74 == 300000L);
        org.junit.Assert.assertNotNull(objSet76);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNull(obj82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 300000L + "'", long87 == 300000L);
        org.junit.Assert.assertNull(str88);
    }

    @Test
    public void test04038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04038");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setDefaultJtaTimeout((-1L));
        int int3 = atomikosProperties0.getConsoleFileLimit();
        int int4 = atomikosProperties0.maxActives;
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        java.lang.String str7 = properties5.getProperty("hi!");
        java.util.Properties properties8 = new java.util.Properties(properties5);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery9 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long10 = recovery9.getRetryInterval();
        long long11 = recovery9.getDelay();
        long long12 = recovery9.retryInterval;
        recovery9.forgetOrphanedLogEntriesDelay = 100L;
        long long15 = recovery9.getForgetOrphanedLogEntriesDelay();
        boolean boolean16 = properties5.contains((java.lang.Object) recovery9);
        int int17 = recovery9.maxRetries;
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10000L + "'", long11 == 10000L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10000L + "'", long12 == 10000L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 100L + "'", long15 == 100L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
    }

    @Test
    public void test04039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04039");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        long long5 = atomikosProperties0.getMaxTimeout();
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet7 = properties6.keySet();
        atomikosProperties0.set(properties6, "hi!", (java.lang.Object) (-1.0f));
        java.lang.String str11 = atomikosProperties0.service;
        java.lang.String str12 = atomikosProperties0.getService();
        boolean boolean13 = atomikosProperties0.enableLogging;
        atomikosProperties0.setLogBaseDir("{com.atomikos.icatch.hi!=-1.0}");
        atomikosProperties0.setConsoleFileCount(0);
        java.util.Properties properties18 = new java.util.Properties();
        java.util.Properties properties19 = new java.util.Properties(properties18);
        java.util.Collection<java.lang.Object> objCollection20 = properties19.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties21.enableLogging = true;
        long long24 = atomikosProperties21.getCheckpointInterval();
        boolean boolean26 = properties19.remove((java.lang.Object) long24, (java.lang.Object) (byte) 100);
        boolean boolean28 = properties19.equals((java.lang.Object) (short) 1);
        java.util.Properties properties29 = new java.util.Properties(properties19);
        properties19.clear();
        java.util.Properties properties31 = new java.util.Properties();
        java.util.Properties properties32 = new java.util.Properties(properties31);
        java.util.Collection<java.lang.Object> objCollection33 = properties31.values();
        java.util.Properties properties34 = new java.util.Properties(properties31);
        java.util.Properties properties35 = new java.util.Properties();
        java.util.Properties properties36 = new java.util.Properties(properties35);
        java.util.Collection<java.lang.Object> objCollection37 = properties36.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties38.enableLogging = true;
        long long41 = atomikosProperties38.getCheckpointInterval();
        boolean boolean43 = properties36.remove((java.lang.Object) long41, (java.lang.Object) (byte) 100);
        boolean boolean45 = properties36.equals((java.lang.Object) (short) 1);
        java.util.Properties properties46 = new java.util.Properties(properties36);
        java.util.Set<java.lang.String> strSet47 = properties46.stringPropertyNames();
        java.lang.Object obj48 = properties34.remove((java.lang.Object) strSet47);
        properties19.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties34);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties51 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties51.enableLogging = true;
        int int54 = atomikosProperties51.consoleFileLimit;
        atomikosProperties51.logBaseName = "hi!";
        atomikosProperties51.setEnableLogging(false);
        atomikosProperties51.setTransactionManagerUniqueName("");
        atomikosProperties51.forceShutdownOnVmExit = true;
        atomikosProperties51.setLogBaseName("hi!");
        atomikosProperties51.setLogBaseName("{{}=tmlog}");
        atomikosProperties0.set(properties34, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=10, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir=, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}", (java.lang.Object) atomikosProperties51);
        boolean boolean68 = atomikosProperties51.forceShutdownOnVmExit;
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertNotNull(objSet7);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objCollection20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 500L + "'", long24 == 500L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(objCollection33);
        org.junit.Assert.assertNotNull(objCollection37);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 500L + "'", long41 == 500L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
    }

    @Test
    public void test04040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04040");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        long long5 = atomikosProperties0.getMaxTimeout();
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet7 = properties6.keySet();
        atomikosProperties0.set(properties6, "hi!", (java.lang.Object) (-1.0f));
        java.util.Enumeration<java.lang.Object> objEnumeration11 = properties6.keys();
        int int12 = properties6.size();
        java.util.Enumeration<java.lang.Object> objEnumeration13 = properties6.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties14.logBaseDir = "";
        boolean boolean17 = atomikosProperties14.isForceShutdownOnVmExit();
        int int18 = atomikosProperties14.consoleFileLimit;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel19 = atomikosProperties14.getConsoleLogLevel();
        java.lang.Object obj20 = properties6.get((java.lang.Object) atomikosProperties14);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery21 = atomikosProperties14.recovery;
        recovery21.delay = (-1L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertNotNull(objSet7);
        org.junit.Assert.assertNotNull(objEnumeration11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(objEnumeration13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel19 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel19.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNotNull(recovery21);
    }

    @Test
    public void test04041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04041");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.enableLogging = true;
        long long3 = atomikosProperties0.getCheckpointInterval();
        atomikosProperties0.setSerialJtaTransactions(false);
        atomikosProperties0.consoleFileLimit = 'a';
        boolean boolean8 = atomikosProperties0.isThreadedTwoPhaseCommit();
        java.lang.String str9 = atomikosProperties0.getTransactionManagerUniqueName();
        java.lang.String str10 = atomikosProperties0.getOutputDir();
        atomikosProperties0.setMaxActives((int) '4');
        atomikosProperties0.outputDir = "";
        int int15 = atomikosProperties0.consoleFileCount;
        boolean boolean16 = atomikosProperties0.allowSubTransactions;
        boolean boolean17 = atomikosProperties0.isSerialJtaTransactions();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 500L + "'", long3 == 500L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test04042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04042");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.maxRetries = (-1);
        recovery0.retryInterval = 10000L;
        long long5 = recovery0.getRetryInterval();
        long long6 = recovery0.forgetOrphanedLogEntriesDelay;
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 10000L + "'", long5 == 10000L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 86400000L + "'", long6 == 86400000L);
    }

    @Test
    public void test04043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04043");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        atomikosProperties0.setLogBaseDir("{}");
        java.lang.String str7 = atomikosProperties0.getOutputDir();
        atomikosProperties0.setLogBaseName("hi!");
        boolean boolean10 = atomikosProperties0.isAllowSubTransactions();
        int int11 = atomikosProperties0.getConsoleFileCount();
        java.util.Properties properties12 = atomikosProperties0.asProperties();
        java.lang.String str13 = atomikosProperties0.getLogBaseName();
        atomikosProperties0.setCheckpointInterval(10L);
        atomikosProperties0.setConsoleFileLimit(22);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertNotNull(properties12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
    }

    @Test
    public void test04044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04044");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        atomikosProperties0.setLogBaseDir("{}");
        boolean boolean7 = atomikosProperties0.isSerialJtaTransactions();
        boolean boolean8 = atomikosProperties0.allowSubTransactions;
        boolean boolean9 = atomikosProperties0.serialJtaTransactions;
        atomikosProperties0.service = "tmlog";
        java.lang.String str12 = atomikosProperties0.outputDir;
        int int13 = atomikosProperties0.maxActives;
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 50 + "'", int13 == 50);
    }

    @Test
    public void test04045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04045");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        long long5 = atomikosProperties0.getMaxTimeout();
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet7 = properties6.keySet();
        atomikosProperties0.set(properties6, "hi!", (java.lang.Object) (-1.0f));
        java.lang.String str11 = atomikosProperties0.logBaseDir;
        java.lang.String str12 = atomikosProperties0.logBaseDir;
        java.lang.String str13 = atomikosProperties0.logBaseDir;
        boolean boolean14 = atomikosProperties0.isEnableLogging();
        long long15 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.setOutputDir("hi!");
        java.lang.String str18 = atomikosProperties0.outputDir;
        atomikosProperties0.allowSubTransactions = true;
        long long21 = atomikosProperties0.getCheckpointInterval();
        boolean boolean22 = atomikosProperties0.isThreadedTwoPhaseCommit();
        atomikosProperties0.defaultJtaTimeout = 97;
        java.lang.String str25 = atomikosProperties0.getTransactionManagerUniqueName();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertNotNull(objSet7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 500L + "'", long15 == 500L);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 500L + "'", long21 == 500L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(str25);
    }

    @Test
    public void test04046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04046");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties3 = new java.util.Properties();
        java.lang.Object obj5 = properties3.get((java.lang.Object) 0.0d);
        java.lang.Object obj6 = properties3.clone();
        java.lang.String str7 = properties3.toString();
        boolean boolean10 = properties3.remove((java.lang.Object) 0, (java.lang.Object) 'a');
        java.lang.Object obj11 = properties1.replace((java.lang.Object) 10.0d, (java.lang.Object) properties3);
        java.lang.String str12 = properties3.toString();
        java.util.Properties properties13 = new java.util.Properties(properties3);
        java.lang.Object obj16 = properties13.getOrDefault((java.lang.Object) (byte) 10, (java.lang.Object) (short) -1);
        java.util.Set<java.lang.String> strSet17 = properties13.stringPropertyNames();
        java.util.Set<java.lang.Object> objSet18 = properties13.keySet();
        boolean boolean19 = properties13.isEmpty();
        java.util.Enumeration<?> wildcardEnumeration20 = properties13.propertyNames();
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "{}");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "{}" + "'", str7, "{}");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "{}" + "'", str12, "{}");
        org.junit.Assert.assertEquals("'" + obj16 + "' != '" + (short) -1 + "'", obj16, (short) -1);
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(objSet18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(wildcardEnumeration20);
    }

    @Test
    public void test04047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04047");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Collection<java.lang.Object> objCollection2 = properties1.values();
        boolean boolean3 = properties1.isEmpty();
        boolean boolean4 = properties1.isEmpty();
        java.util.Properties properties5 = new java.util.Properties(properties1);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties6.logBaseDir = "";
        atomikosProperties6.setConsoleFileCount((int) (short) 10);
        atomikosProperties6.setCheckpointInterval(10000L);
        long long13 = atomikosProperties6.maxTimeout;
        int int14 = atomikosProperties6.maxActives;
        atomikosProperties6.setCheckpointInterval((long) 0);
        java.util.Properties properties17 = atomikosProperties6.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties18.logBaseDir = "";
        atomikosProperties18.setConsoleFileCount((int) (short) 10);
        atomikosProperties18.setLogBaseDir("{}");
        java.util.Properties properties25 = atomikosProperties18.asProperties();
        atomikosProperties18.service = "";
        boolean boolean28 = atomikosProperties18.isEnableLogging();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties29.enableLogging = true;
        long long32 = atomikosProperties29.getCheckpointInterval();
        java.lang.String str33 = atomikosProperties29.getService();
        java.lang.String str34 = atomikosProperties29.logBaseDir;
        atomikosProperties29.setEnableLogging(false);
        atomikosProperties29.consoleFileCount = 0;
        long long39 = atomikosProperties29.getMaxTimeout();
        boolean boolean40 = atomikosProperties29.isEnableLogging();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel41 = atomikosProperties29.consoleLogLevel;
        atomikosProperties18.consoleLogLevel = atomikosLoggingLevel41;
        atomikosProperties6.setConsoleLogLevel(atomikosLoggingLevel41);
        atomikosProperties6.consoleFileLimit = 5;
        boolean boolean46 = atomikosProperties6.isThreadedTwoPhaseCommit();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery47 = atomikosProperties6.recovery;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties48 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties48.logBaseDir = "";
        atomikosProperties48.setConsoleFileCount((int) (short) 10);
        atomikosProperties48.setCheckpointInterval(10000L);
        atomikosProperties48.checkpointInterval = 100;
        atomikosProperties48.allowSubTransactions = true;
        int int59 = atomikosProperties48.consoleFileLimit;
        java.lang.Object obj60 = properties1.put((java.lang.Object) atomikosProperties6, (java.lang.Object) atomikosProperties48);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet61 = properties1.entrySet();
        org.junit.Assert.assertNotNull(objCollection2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 300000L + "'", long13 == 300000L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 50 + "'", int14 == 50);
        org.junit.Assert.assertNotNull(properties17);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 500L + "'", long32 == 500L);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 300000L + "'", long39 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel41 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel41.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(recovery47);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertNotNull(objEntrySet61);
    }

    @Test
    public void test04048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04048");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        long long5 = atomikosProperties0.getMaxTimeout();
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet7 = properties6.keySet();
        atomikosProperties0.set(properties6, "hi!", (java.lang.Object) (-1.0f));
        atomikosProperties0.setConsoleFileLimit((int) (short) 100);
        atomikosProperties0.setForceShutdownOnVmExit(false);
        java.lang.String str15 = atomikosProperties0.logBaseName;
        atomikosProperties0.transactionManagerUniqueName = "hi!";
        boolean boolean18 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.service = "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=10, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=true, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir=, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}";
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertNotNull(objSet7);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "tmlog" + "'", str15, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test04049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04049");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties0.isEmpty();
        java.lang.String str3 = properties0.toString();
        java.util.Properties properties4 = new java.util.Properties();
        java.lang.Object obj6 = properties4.get((java.lang.Object) 0.0d);
        java.lang.Object obj7 = properties4.clone();
        java.lang.String str8 = properties4.toString();
        java.util.Properties properties9 = new java.util.Properties(properties4);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet10 = properties4.entrySet();
        java.util.Set<java.lang.String> strSet11 = properties4.stringPropertyNames();
        boolean boolean12 = properties0.containsKey((java.lang.Object) strSet11);
        java.util.Properties properties13 = new java.util.Properties(properties0);
        int int14 = properties13.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties15.logBaseDir = "";
        atomikosProperties15.setConsoleFileCount((int) (short) 10);
        long long20 = atomikosProperties15.getMaxTimeout();
        java.util.Properties properties21 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet22 = properties21.keySet();
        atomikosProperties15.set(properties21, "hi!", (java.lang.Object) (-1.0f));
        java.lang.String str26 = atomikosProperties15.logBaseDir;
        boolean boolean27 = atomikosProperties15.enableLogging;
        atomikosProperties15.setLogBaseDir("");
        atomikosProperties15.logBaseName = "{com.atomikos.icatch.hi!=-1.0}";
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel32 = atomikosProperties15.getConsoleLogLevel();
        long long33 = atomikosProperties15.getCheckpointInterval();
        atomikosProperties15.setThreadedTwoPhaseCommit(false);
        int int36 = atomikosProperties15.consoleFileLimit;
        atomikosProperties15.logBaseDir = "";
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties39 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties39.logBaseDir = "";
        atomikosProperties39.setConsoleFileCount((int) (short) 10);
        java.lang.String str44 = atomikosProperties39.logBaseName;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel45 = org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN;
        atomikosProperties39.consoleLogLevel = atomikosLoggingLevel45;
        boolean boolean47 = atomikosProperties39.enableLogging;
        boolean boolean48 = atomikosProperties39.allowSubTransactions;
        java.lang.Object obj49 = properties13.replace((java.lang.Object) atomikosProperties15, (java.lang.Object) atomikosProperties39);
        java.util.Properties properties50 = new java.util.Properties(properties13);
        java.io.OutputStream outputStream51 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties13.storeToXML(outputStream51, "{com.atomikos.icatch.hi!=-1.0}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "{}" + "'", str3, "{}");
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{}");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{}" + "'", str8, "{}");
        org.junit.Assert.assertNotNull(objEntrySet10);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 300000L + "'", long20 == 300000L);
        org.junit.Assert.assertNotNull(objSet22);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel32 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel32.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 500L + "'", long33 == 500L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "tmlog" + "'", str44, "tmlog");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel45 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel45.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNull(obj49);
    }

    @Test
    public void test04050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04050");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        atomikosProperties0.setLogBaseDir("{}");
        boolean boolean7 = atomikosProperties0.isSerialJtaTransactions();
        boolean boolean8 = atomikosProperties0.allowSubTransactions;
        atomikosProperties0.defaultJtaTimeout = (byte) -1;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties11.logBaseDir = "";
        atomikosProperties11.setConsoleFileCount((int) (short) 10);
        atomikosProperties11.setLogBaseDir("{}");
        java.util.Properties properties18 = atomikosProperties11.asProperties();
        atomikosProperties11.service = "";
        boolean boolean21 = atomikosProperties11.isEnableLogging();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties22.enableLogging = true;
        long long25 = atomikosProperties22.getCheckpointInterval();
        java.lang.String str26 = atomikosProperties22.getService();
        java.lang.String str27 = atomikosProperties22.logBaseDir;
        atomikosProperties22.setEnableLogging(false);
        atomikosProperties22.consoleFileCount = 0;
        long long32 = atomikosProperties22.getMaxTimeout();
        boolean boolean33 = atomikosProperties22.isEnableLogging();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel34 = atomikosProperties22.consoleLogLevel;
        atomikosProperties11.consoleLogLevel = atomikosLoggingLevel34;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel34;
        atomikosProperties0.serialJtaTransactions = true;
        atomikosProperties0.setMaxTimeout((long) 10);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 500L + "'", long25 == 500L);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 300000L + "'", long32 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel34 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel34.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
    }

    @Test
    public void test04051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04051");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.get((java.lang.Object) 0.0d);
        java.lang.Object obj3 = properties0.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties4.enableLogging = true;
        long long7 = atomikosProperties4.getCheckpointInterval();
        java.lang.String str8 = atomikosProperties4.getService();
        java.lang.String str9 = atomikosProperties4.logBaseDir;
        atomikosProperties4.setEnableLogging(false);
        boolean boolean12 = atomikosProperties4.isEnableLogging();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties13.enableLogging = true;
        long long16 = atomikosProperties13.getCheckpointInterval();
        atomikosProperties13.setService("tmlog");
        atomikosProperties13.setConsoleFileName("{}");
        java.util.Properties properties21 = atomikosProperties13.asProperties();
        atomikosProperties13.setCheckpointInterval((long) (short) 10);
        atomikosProperties13.logBaseName = "";
        java.lang.Object obj26 = properties0.put((java.lang.Object) boolean12, (java.lang.Object) atomikosProperties13);
        int int27 = properties0.size();
        java.util.Set<java.lang.Object> objSet28 = properties0.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery29 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery29.maxRetries = (-1);
        recovery29.setDelay((long) (short) 0);
        long long34 = recovery29.forgetOrphanedLogEntriesDelay;
        recovery29.retryInterval = 500L;
        recovery29.setRetryInterval((long) 5);
        boolean boolean39 = properties0.containsValue((java.lang.Object) 5);
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 500L + "'", long16 == 500L);
        org.junit.Assert.assertNotNull(properties21);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(objSet28);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 86400000L + "'", long34 == 86400000L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test04052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04052");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.get((java.lang.Object) 0.0d);
        java.lang.Object obj3 = properties0.clone();
        java.lang.String str4 = properties0.toString();
        java.util.Properties properties5 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties6.setDefaultJtaTimeout((-1L));
        int int9 = atomikosProperties6.getConsoleFileLimit();
        java.util.Properties properties10 = atomikosProperties6.asProperties();
        java.util.Properties properties11 = new java.util.Properties(properties10);
        java.util.Properties properties12 = new java.util.Properties();
        java.util.Properties properties13 = new java.util.Properties(properties12);
        java.util.Collection<java.lang.Object> objCollection14 = properties13.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties15.enableLogging = true;
        long long18 = atomikosProperties15.getCheckpointInterval();
        boolean boolean20 = properties13.remove((java.lang.Object) long18, (java.lang.Object) (byte) 100);
        boolean boolean22 = properties13.equals((java.lang.Object) (short) 1);
        java.util.Properties properties23 = new java.util.Properties(properties13);
        java.lang.Class<?> wildcardClass24 = properties23.getClass();
        java.lang.Object obj25 = properties0.put((java.lang.Object) properties10, (java.lang.Object) wildcardClass24);
        java.util.Properties properties26 = new java.util.Properties(properties10);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int28 = atomikosProperties27.getConsoleFileCount();
        int int29 = atomikosProperties27.maxActives;
        java.lang.String str30 = atomikosProperties27.getService();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties31.logBaseDir = "";
        atomikosProperties31.setConsoleFileCount((int) (short) 10);
        atomikosProperties31.setCheckpointInterval(10000L);
        long long38 = atomikosProperties31.maxTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel39 = atomikosProperties31.getConsoleLogLevel();
        atomikosProperties27.consoleLogLevel = atomikosLoggingLevel39;
        java.lang.String str41 = atomikosProperties27.consoleFileName;
        atomikosProperties27.setCheckpointInterval((long) (short) 10);
        atomikosProperties27.consoleFileLimit = 35;
        boolean boolean46 = properties10.equals((java.lang.Object) atomikosProperties27);
        java.util.Properties properties47 = new java.util.Properties(properties10);
        java.util.Collection<java.lang.Object> objCollection48 = properties10.values();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{}" + "'", str4, "{}");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertNotNull(objCollection14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 500L + "'", long18 == 500L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 50 + "'", int29 == 50);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 300000L + "'", long38 == 300000L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel39 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel39.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "tm.out" + "'", str41, "tm.out");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(objCollection48);
    }

    @Test
    public void test04053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04053");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Collection<java.lang.Object> objCollection2 = properties0.values();
        int int3 = properties0.size();
        int int4 = properties0.size();
        int int5 = properties0.size();
        java.lang.String str7 = properties0.getProperty("{{}={}}");
        java.util.Collection<java.lang.Object> objCollection8 = properties0.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int10 = atomikosProperties9.getConsoleFileCount();
        int int11 = atomikosProperties9.maxActives;
        atomikosProperties9.setConsoleFileName("");
        atomikosProperties9.transactionManagerUniqueName = "{}";
        java.util.Properties properties16 = atomikosProperties9.asProperties();
        atomikosProperties9.setDefaultJtaTimeout((long) 0);
        atomikosProperties9.setMaxActives(35);
        boolean boolean21 = properties0.contains((java.lang.Object) atomikosProperties9);
        boolean boolean22 = properties0.isEmpty();
        java.util.Collection<java.lang.Object> objCollection23 = properties0.values();
        java.util.Properties properties24 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long26 = atomikosProperties25.defaultJtaTimeout;
        atomikosProperties25.logBaseName = "tm.out";
        java.lang.String str29 = atomikosProperties25.consoleFileName;
        atomikosProperties25.consoleFileLimit = (short) 0;
        boolean boolean32 = properties0.containsKey((java.lang.Object) atomikosProperties25);
        int int33 = atomikosProperties25.getConsoleFileCount();
        org.junit.Assert.assertNotNull(objCollection2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(objCollection8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 50 + "'", int11 == 50);
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objCollection23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 10000L + "'", long26 == 10000L);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "tm.out" + "'", str29, "tm.out");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
    }

    @Test
    public void test04054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04054");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        long long5 = atomikosProperties0.getMaxTimeout();
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet7 = properties6.keySet();
        atomikosProperties0.set(properties6, "hi!", (java.lang.Object) (-1.0f));
        java.util.Enumeration<java.lang.Object> objEnumeration11 = properties6.keys();
        java.util.Properties properties12 = new java.util.Properties(properties6);
        java.io.Writer writer13 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties12.store(writer13, "{com.atomikos.icatch.console_file_name={}, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=10, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service=tmlog, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertNotNull(objSet7);
        org.junit.Assert.assertNotNull(objEnumeration11);
    }

    @Test
    public void test04055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04055");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.maxRetries = (-1);
        recovery0.setDelay((long) (short) 0);
        long long5 = recovery0.forgetOrphanedLogEntriesDelay;
        recovery0.setDelay((long) 1);
        long long8 = recovery0.getDelay();
        recovery0.maxRetries = 0;
        long long11 = recovery0.getRetryInterval();
        long long12 = recovery0.delay;
        recovery0.setDelay((long) (short) 1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 86400000L + "'", long5 == 86400000L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10000L + "'", long11 == 10000L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
    }

    @Test
    public void test04056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04056");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int1 = atomikosProperties0.getConsoleFileCount();
        int int2 = atomikosProperties0.maxActives;
        java.lang.String str3 = atomikosProperties0.getService();
        atomikosProperties0.setConsoleFileLimit((int) (short) 0);
        java.util.Properties properties6 = atomikosProperties0.asProperties();
        java.util.Enumeration<java.lang.Object> objEnumeration7 = properties6.keys();
        java.io.Reader reader8 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties6.load(reader8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 50 + "'", int2 == 50);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(properties6);
        org.junit.Assert.assertNotNull(objEnumeration7);
    }

    @Test
    public void test04057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04057");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.enableLogging = true;
        long long3 = atomikosProperties0.getCheckpointInterval();
        atomikosProperties0.setService("tmlog");
        atomikosProperties0.setConsoleFileName("{}");
        java.util.Properties properties8 = atomikosProperties0.asProperties();
        atomikosProperties0.setCheckpointInterval((long) (short) 10);
        atomikosProperties0.logBaseName = "";
        atomikosProperties0.logBaseName = "{true=10000}";
        java.lang.String str15 = atomikosProperties0.logBaseName;
        boolean boolean16 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.consoleFileName = "{true=10000}";
        atomikosProperties0.transactionManagerUniqueName = "";
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 500L + "'", long3 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{true=10000}" + "'", str15, "{true=10000}");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test04058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04058");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        boolean boolean3 = atomikosProperties0.isForceShutdownOnVmExit();
        int int4 = atomikosProperties0.consoleFileLimit;
        atomikosProperties0.consoleFileCount = 100;
        boolean boolean7 = atomikosProperties0.threadedTwoPhaseCommit;
        atomikosProperties0.setLogBaseName("tmlog");
        atomikosProperties0.enableLogging = false;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test04059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04059");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Collection<java.lang.Object> objCollection2 = properties0.values();
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties0.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int5 = atomikosProperties4.getConsoleFileCount();
        int int6 = atomikosProperties4.maxActives;
        java.lang.String str7 = atomikosProperties4.getService();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties8.logBaseDir = "";
        atomikosProperties8.setConsoleFileCount((int) (short) 10);
        atomikosProperties8.setCheckpointInterval(10000L);
        long long15 = atomikosProperties8.maxTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel16 = atomikosProperties8.getConsoleLogLevel();
        atomikosProperties4.consoleLogLevel = atomikosLoggingLevel16;
        java.util.Properties properties18 = atomikosProperties4.asProperties();
        java.lang.String str19 = atomikosProperties4.getConsoleFileName();
        boolean boolean20 = properties0.containsValue((java.lang.Object) atomikosProperties4);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties21.logBaseDir = "";
        atomikosProperties21.setConsoleFileCount((int) (short) 10);
        long long26 = atomikosProperties21.getMaxTimeout();
        atomikosProperties21.service = "";
        java.lang.String str29 = atomikosProperties21.logBaseDir;
        atomikosProperties21.logBaseName = "tmlog";
        atomikosProperties21.transactionManagerUniqueName = "{}";
        boolean boolean34 = atomikosProperties21.isForceShutdownOnVmExit();
        java.util.Properties properties35 = atomikosProperties21.asProperties();
        java.lang.Object obj36 = properties0.remove((java.lang.Object) atomikosProperties21);
        java.util.Enumeration<java.lang.Object> objEnumeration37 = properties0.elements();
        java.util.Properties properties38 = new java.util.Properties(properties0);
        boolean boolean39 = properties0.isEmpty();
        java.lang.String str40 = properties0.toString();
        org.junit.Assert.assertNotNull(objCollection2);
        org.junit.Assert.assertNotNull(objEnumeration3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 50 + "'", int6 == 50);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 300000L + "'", long15 == 300000L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel16 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel16.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "tm.out" + "'", str19, "tm.out");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 300000L + "'", long26 == 300000L);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(properties35);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNotNull(objEnumeration37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "{}" + "'", str40, "{}");
    }

    @Test
    public void test04060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04060");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.enableLogging = true;
        long long3 = atomikosProperties0.getCheckpointInterval();
        atomikosProperties0.setSerialJtaTransactions(false);
        atomikosProperties0.consoleFileLimit = 'a';
        boolean boolean8 = atomikosProperties0.isThreadedTwoPhaseCommit();
        java.lang.String str9 = atomikosProperties0.getTransactionManagerUniqueName();
        java.lang.String str10 = atomikosProperties0.getOutputDir();
        atomikosProperties0.setMaxActives((int) '4');
        atomikosProperties0.outputDir = "";
        int int15 = atomikosProperties0.consoleFileCount;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties16.enableLogging = true;
        long long19 = atomikosProperties16.getCheckpointInterval();
        java.lang.String str20 = atomikosProperties16.getService();
        java.lang.String str21 = atomikosProperties16.logBaseDir;
        atomikosProperties16.setEnableLogging(false);
        boolean boolean24 = atomikosProperties16.isEnableLogging();
        atomikosProperties16.setConsoleFileCount(10);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties27.enableLogging = true;
        long long30 = atomikosProperties27.getCheckpointInterval();
        atomikosProperties27.setSerialJtaTransactions(false);
        atomikosProperties27.consoleFileLimit = 'a';
        boolean boolean35 = atomikosProperties27.isThreadedTwoPhaseCommit();
        java.lang.String str36 = atomikosProperties27.getTransactionManagerUniqueName();
        java.lang.String str37 = atomikosProperties27.getOutputDir();
        atomikosProperties27.setMaxActives((int) '4');
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel40 = atomikosProperties27.consoleLogLevel;
        atomikosProperties16.consoleLogLevel = atomikosLoggingLevel40;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel40);
        boolean boolean43 = atomikosProperties0.serialJtaTransactions;
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 500L + "'", long3 == 500L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 500L + "'", long19 == 500L);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 500L + "'", long30 == 500L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel40 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel40.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test04061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04061");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.setLogBaseDir("{}");
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel4 = org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.DEBUG;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel4);
        atomikosProperties0.setThreadedTwoPhaseCommit(false);
        int int8 = atomikosProperties0.maxActives;
        atomikosProperties0.setSerialJtaTransactions(false);
        int int11 = atomikosProperties0.getConsoleFileCount();
        long long12 = atomikosProperties0.checkpointInterval;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel4 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.DEBUG + "'", atomikosLoggingLevel4.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.DEBUG));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 50 + "'", int8 == 50);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 500L + "'", long12 == 500L);
    }

    @Test
    public void test04062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04062");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        long long5 = atomikosProperties0.getMaxTimeout();
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet7 = properties6.keySet();
        atomikosProperties0.set(properties6, "hi!", (java.lang.Object) (-1.0f));
        java.lang.String str11 = atomikosProperties0.service;
        java.lang.String str12 = atomikosProperties0.outputDir;
        atomikosProperties0.setConsoleFileLimit(35);
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        atomikosProperties0.setEnableLogging(true);
        java.lang.String str19 = atomikosProperties0.getOutputDir();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertNotNull(objSet7);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test04063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04063");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int1 = atomikosProperties0.getConsoleFileCount();
        int int2 = atomikosProperties0.maxActives;
        java.lang.String str3 = atomikosProperties0.getService();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties4.logBaseDir = "";
        atomikosProperties4.setConsoleFileCount((int) (short) 10);
        atomikosProperties4.setCheckpointInterval(10000L);
        long long11 = atomikosProperties4.maxTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel12 = atomikosProperties4.getConsoleLogLevel();
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel12;
        java.lang.String str14 = atomikosProperties0.consoleFileName;
        boolean boolean15 = atomikosProperties0.allowSubTransactions;
        atomikosProperties0.maxActives = 10;
        java.lang.String str18 = atomikosProperties0.getOutputDir();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 50 + "'", int2 == 50);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 300000L + "'", long11 == 300000L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel12 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel12.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "tm.out" + "'", str14, "tm.out");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test04064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04064");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        java.lang.String str5 = atomikosProperties0.logBaseName;
        java.lang.String str6 = atomikosProperties0.logBaseDir;
        long long7 = atomikosProperties0.defaultJtaTimeout;
        java.util.Properties properties8 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery9 = atomikosProperties0.getRecovery();
        boolean boolean10 = atomikosProperties0.isSerialJtaTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery11 = atomikosProperties0.getRecovery();
        recovery11.setMaxRetries(35);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tmlog" + "'", str5, "tmlog");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertNotNull(recovery9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(recovery11);
    }

    @Test
    public void test04065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04065");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Collection<java.lang.Object> objCollection2 = properties1.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties3 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties3.enableLogging = true;
        long long6 = atomikosProperties3.getCheckpointInterval();
        boolean boolean8 = properties1.remove((java.lang.Object) long6, (java.lang.Object) (byte) 100);
        java.lang.String str9 = properties1.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.logBaseDir = "";
        atomikosProperties10.setConsoleFileCount((int) (short) 10);
        long long15 = atomikosProperties10.getMaxTimeout();
        java.util.Properties properties16 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet17 = properties16.keySet();
        atomikosProperties10.set(properties16, "hi!", (java.lang.Object) (-1.0f));
        java.lang.Object obj23 = properties16.setProperty("", "hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties24.setDefaultJtaTimeout((-1L));
        java.util.Properties properties27 = new java.util.Properties();
        java.lang.Object obj29 = properties27.get((java.lang.Object) 0.0d);
        java.lang.Object obj30 = properties27.clone();
        boolean boolean32 = properties16.replace((java.lang.Object) (-1L), obj30, (java.lang.Object) 100.0d);
        java.util.Properties properties33 = new java.util.Properties();
        java.util.Properties properties34 = new java.util.Properties(properties33);
        properties34.clear();
        properties16.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties34);
        java.util.Enumeration<java.lang.Object> objEnumeration37 = properties34.elements();
        java.lang.String str39 = properties34.getProperty("");
        java.util.Properties properties40 = new java.util.Properties(properties34);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery41 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long42 = recovery41.getRetryInterval();
        recovery41.delay = 10L;
        boolean boolean45 = properties1.remove((java.lang.Object) properties40, (java.lang.Object) 10L);
        java.util.Enumeration<java.lang.Object> objEnumeration46 = properties40.keys();
        java.util.Properties properties47 = new java.util.Properties(properties40);
        java.util.Properties properties48 = new java.util.Properties(properties47);
        java.util.Properties properties49 = new java.util.Properties(properties47);
        java.util.Properties properties50 = new java.util.Properties(properties49);
        java.util.Properties properties51 = new java.util.Properties(properties50);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties52 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties52.setDefaultJtaTimeout((-1L));
        int int55 = atomikosProperties52.getConsoleFileLimit();
        java.util.Properties properties56 = atomikosProperties52.asProperties();
        java.util.Properties properties57 = new java.util.Properties(properties56);
        boolean boolean58 = properties57.isEmpty();
        boolean boolean59 = properties50.contains((java.lang.Object) properties57);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties60 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties60.setDefaultJtaTimeout((-1L));
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel63 = null;
        atomikosProperties60.consoleLogLevel = atomikosLoggingLevel63;
        boolean boolean65 = atomikosProperties60.enableLogging;
        atomikosProperties60.maxTimeout = ' ';
        boolean boolean68 = properties50.containsKey((java.lang.Object) ' ');
        java.util.Properties properties69 = new java.util.Properties(properties50);
        java.io.Reader reader70 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties50.load(reader70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection2);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{}" + "'", str9, "{}");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 300000L + "'", long15 == 300000L);
        org.junit.Assert.assertNotNull(objSet17);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "{}");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objEnumeration37);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 10000L + "'", long42 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(objEnumeration46);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(properties56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test04066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04066");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.defaultJtaTimeout;
        atomikosProperties0.logBaseName = "tm.out";
        java.lang.String str4 = atomikosProperties0.consoleFileName;
        atomikosProperties0.consoleFileLimit = (short) 0;
        atomikosProperties0.setMaxTimeout((long) '4');
        atomikosProperties0.threadedTwoPhaseCommit = false;
        java.lang.String str11 = atomikosProperties0.logBaseDir;
        java.util.Properties properties12 = new java.util.Properties();
        java.util.Properties properties13 = new java.util.Properties(properties12);
        java.util.Properties properties15 = new java.util.Properties();
        java.lang.Object obj17 = properties15.get((java.lang.Object) 0.0d);
        java.lang.Object obj18 = properties15.clone();
        java.lang.String str19 = properties15.toString();
        boolean boolean22 = properties15.remove((java.lang.Object) 0, (java.lang.Object) 'a');
        java.lang.Object obj23 = properties13.replace((java.lang.Object) 10.0d, (java.lang.Object) properties15);
        java.lang.String str24 = properties15.toString();
        java.util.Properties properties25 = new java.util.Properties(properties15);
        java.lang.Object obj28 = properties15.setProperty("", "");
        java.util.Properties properties29 = new java.util.Properties(properties15);
        properties15.clear();
        java.util.Properties properties31 = new java.util.Properties();
        java.lang.Object obj33 = properties31.get((java.lang.Object) 0.0d);
        java.lang.Object obj34 = properties31.clone();
        java.lang.String str35 = properties31.toString();
        java.util.Properties properties36 = new java.util.Properties(properties31);
        java.util.Enumeration<java.lang.Object> objEnumeration37 = properties36.keys();
        java.util.Collection<java.lang.Object> objCollection38 = properties36.values();
        java.util.Properties properties39 = new java.util.Properties();
        java.util.Properties properties40 = new java.util.Properties(properties39);
        java.util.Collection<java.lang.Object> objCollection41 = properties39.values();
        int int42 = properties39.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery43 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery43.maxRetries = (-1);
        recovery43.setDelay((long) (short) 0);
        recovery43.maxRetries = 0;
        boolean boolean51 = properties39.remove((java.lang.Object) 0, (java.lang.Object) (-1));
        java.util.Enumeration<?> wildcardEnumeration52 = properties39.propertyNames();
        java.lang.Object obj53 = properties36.get((java.lang.Object) properties39);
        properties15.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties36);
        java.util.Properties properties55 = new java.util.Properties(properties36);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties57 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int58 = atomikosProperties57.getConsoleFileCount();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties59 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties59.logBaseDir = "";
        atomikosProperties59.setConsoleFileCount((int) (short) 10);
        atomikosProperties59.setCheckpointInterval(10000L);
        long long66 = atomikosProperties59.maxTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel67 = org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO;
        atomikosProperties59.consoleLogLevel = atomikosLoggingLevel67;
        atomikosProperties57.consoleLogLevel = atomikosLoggingLevel67;
        java.lang.String str70 = atomikosProperties57.getService();
        atomikosProperties57.setThreadedTwoPhaseCommit(false);
        boolean boolean73 = atomikosProperties57.isEnableLogging();
        boolean boolean74 = atomikosProperties57.isThreadedTwoPhaseCommit();
        atomikosProperties0.set(properties55, "{{{}={}}={com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=-1, 0=INFO}}", (java.lang.Object) atomikosProperties57);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 10000L + "'", long1 == 10000L);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tm.out" + "'", str4, "tm.out");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "{}");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "{}" + "'", str19, "{}");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "{}" + "'", str24, "{}");
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "{}");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "{}" + "'", str35, "{}");
        org.junit.Assert.assertNotNull(objEnumeration37);
        org.junit.Assert.assertNotNull(objCollection38);
        org.junit.Assert.assertNotNull(objCollection41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(wildcardEnumeration52);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 300000L + "'", long66 == 300000L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel67 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO + "'", atomikosLoggingLevel67.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO));
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test04067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04067");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        atomikosProperties0.setLogBaseDir("{}");
        java.lang.String str7 = atomikosProperties0.getOutputDir();
        atomikosProperties0.outputDir = "tmlog";
        java.lang.String str10 = atomikosProperties0.logBaseName;
        long long11 = atomikosProperties0.maxTimeout;
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "tmlog" + "'", str10, "tmlog");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 300000L + "'", long11 == 300000L);
    }

    @Test
    public void test04068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04068");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setDefaultJtaTimeout((-1L));
        int int3 = atomikosProperties0.getConsoleFileLimit();
        java.util.Properties properties4 = atomikosProperties0.asProperties();
        boolean boolean5 = atomikosProperties0.forceShutdownOnVmExit;
        boolean boolean6 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.setOutputDir("tmlog");
        long long9 = atomikosProperties0.maxTimeout;
        java.lang.String str10 = atomikosProperties0.service;
        atomikosProperties0.checkpointInterval = (short) 0;
        atomikosProperties0.setMaxTimeout((long) (byte) -1);
        long long15 = atomikosProperties0.checkpointInterval;
        boolean boolean16 = atomikosProperties0.isAllowSubTransactions();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(properties4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 300000L + "'", long9 == 300000L);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test04069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04069");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setDefaultJtaTimeout((-1L));
        atomikosProperties0.setConsoleFileLimit((int) (short) 0);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery5 = atomikosProperties0.recovery;
        int int6 = recovery5.maxRetries;
        org.junit.Assert.assertNotNull(recovery5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
    }

    @Test
    public void test04070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04070");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        long long5 = atomikosProperties0.getMaxTimeout();
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet7 = properties6.keySet();
        atomikosProperties0.set(properties6, "hi!", (java.lang.Object) (-1.0f));
        java.lang.Object obj13 = properties6.setProperty("", "hi!");
        java.util.Properties properties14 = new java.util.Properties();
        java.util.Properties properties15 = new java.util.Properties(properties14);
        java.util.Properties properties17 = new java.util.Properties();
        java.lang.Object obj19 = properties17.get((java.lang.Object) 0.0d);
        java.lang.Object obj20 = properties17.clone();
        java.lang.String str21 = properties17.toString();
        boolean boolean24 = properties17.remove((java.lang.Object) 0, (java.lang.Object) 'a');
        java.lang.Object obj25 = properties15.replace((java.lang.Object) 10.0d, (java.lang.Object) properties17);
        java.lang.String str26 = properties17.toString();
        java.util.Properties properties27 = new java.util.Properties(properties17);
        java.lang.Object obj30 = properties17.setProperty("", "");
        java.util.Properties properties31 = new java.util.Properties(properties17);
        java.util.Set<java.lang.Object> objSet32 = properties31.keySet();
        java.util.Properties properties33 = new java.util.Properties(properties31);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery34 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery34.maxRetries = (-1);
        recovery34.setDelay((long) (short) 0);
        recovery34.maxRetries = 0;
        recovery34.setMaxRetries((int) '#');
        int int43 = recovery34.maxRetries;
        int int44 = recovery34.getMaxRetries();
        long long45 = recovery34.getForgetOrphanedLogEntriesDelay();
        long long46 = recovery34.retryInterval;
        java.lang.Object obj47 = properties6.putIfAbsent((java.lang.Object) properties33, (java.lang.Object) recovery34);
        java.util.Properties properties48 = new java.util.Properties(properties33);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties49.logBaseDir = "";
        atomikosProperties49.setConsoleFileCount((int) (short) 10);
        java.lang.String str54 = atomikosProperties49.logBaseName;
        atomikosProperties49.outputDir = "";
        java.util.Properties properties57 = atomikosProperties49.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties58 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties58.logBaseDir = "";
        atomikosProperties58.setConsoleFileCount((int) (short) 10);
        long long63 = atomikosProperties58.getMaxTimeout();
        java.util.Properties properties64 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet65 = properties64.keySet();
        atomikosProperties58.set(properties64, "hi!", (java.lang.Object) (-1.0f));
        java.lang.Object obj71 = properties64.setProperty("", "hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties73 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties73.logBaseDir = "";
        atomikosProperties73.setConsoleFileCount((int) (short) 10);
        atomikosProperties73.setLogBaseDir("{}");
        java.lang.String str80 = atomikosProperties73.getOutputDir();
        atomikosProperties49.set(properties64, "{}", (java.lang.Object) atomikosProperties73);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel82 = atomikosProperties49.consoleLogLevel;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel83 = atomikosProperties49.consoleLogLevel;
        java.lang.String str84 = atomikosProperties49.getTransactionManagerUniqueName();
        java.lang.String str85 = atomikosProperties49.getTransactionManagerUniqueName();
        boolean boolean86 = properties48.equals((java.lang.Object) atomikosProperties49);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertNotNull(objSet7);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{}");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "{}" + "'", str21, "{}");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "{}" + "'", str26, "{}");
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNotNull(objSet32);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 35 + "'", int43 == 35);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 35 + "'", int44 == 35);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 86400000L + "'", long45 == 86400000L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 10000L + "'", long46 == 10000L);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "tmlog" + "'", str54, "tmlog");
        org.junit.Assert.assertNotNull(properties57);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 300000L + "'", long63 == 300000L);
        org.junit.Assert.assertNotNull(objSet65);
        org.junit.Assert.assertNull(obj71);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel82 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel82.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel83 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel83.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test04071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04071");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        atomikosProperties0.setService("");
        atomikosProperties0.service = "tmlog";
        java.util.Properties properties9 = atomikosProperties0.asProperties();
        atomikosProperties0.setCheckpointInterval((long) 19);
        atomikosProperties0.setForceShutdownOnVmExit(true);
        org.junit.Assert.assertNotNull(properties9);
    }

    @Test
    public void test04072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04072");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties5 = new java.util.Properties();
        java.lang.Object obj7 = properties5.get((java.lang.Object) 0.0d);
        java.lang.Object obj8 = properties5.clone();
        java.lang.String str9 = properties5.toString();
        boolean boolean12 = properties5.remove((java.lang.Object) 0, (java.lang.Object) 'a');
        java.lang.Object obj13 = properties3.replace((java.lang.Object) 10.0d, (java.lang.Object) properties5);
        java.lang.String str14 = properties5.toString();
        java.util.Properties properties15 = new java.util.Properties(properties5);
        java.util.Properties properties16 = new java.util.Properties();
        java.util.Properties properties17 = new java.util.Properties(properties16);
        java.util.Properties properties19 = new java.util.Properties();
        java.lang.Object obj21 = properties19.get((java.lang.Object) 0.0d);
        java.lang.Object obj22 = properties19.clone();
        java.lang.String str23 = properties19.toString();
        boolean boolean26 = properties19.remove((java.lang.Object) 0, (java.lang.Object) 'a');
        java.lang.Object obj27 = properties17.replace((java.lang.Object) 10.0d, (java.lang.Object) properties19);
        java.util.Properties properties28 = new java.util.Properties(properties17);
        properties15.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties28);
        boolean boolean30 = properties0.contains((java.lang.Object) properties15);
        boolean boolean31 = properties15.isEmpty();
        java.util.Properties properties32 = new java.util.Properties();
        java.util.Properties properties33 = new java.util.Properties(properties32);
        java.util.Collection<java.lang.Object> objCollection34 = properties33.values();
        java.lang.Object obj37 = properties33.setProperty("hi!", "{}");
        java.lang.String str39 = properties33.getProperty("tmlog");
        properties33.clear();
        java.util.Set<java.lang.String> strSet41 = properties33.stringPropertyNames();
        properties15.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties33);
        java.io.InputStream inputStream43 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties33.load(inputStream43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "{}");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{}" + "'", str9, "{}");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "{}" + "'", str14, "{}");
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "{}");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "{}" + "'", str23, "{}");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objCollection34);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(strSet41);
    }

    @Test
    public void test04073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04073");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Collection<java.lang.Object> objCollection2 = properties1.values();
        java.util.Properties properties3 = new java.util.Properties();
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Collection<java.lang.Object> objCollection5 = properties3.values();
        java.util.Enumeration<java.lang.Object> objEnumeration6 = properties3.keys();
        boolean boolean7 = properties1.contains((java.lang.Object) properties3);
        boolean boolean8 = properties1.isEmpty();
        boolean boolean9 = properties1.isEmpty();
        java.util.Properties properties10 = new java.util.Properties();
        java.util.Properties properties11 = new java.util.Properties(properties10);
        java.util.Collection<java.lang.Object> objCollection12 = properties11.values();
        boolean boolean13 = properties11.isEmpty();
        java.util.Set<java.lang.String> strSet14 = properties11.stringPropertyNames();
        java.lang.String str16 = properties11.getProperty("");
        java.util.Properties properties17 = new java.util.Properties();
        java.lang.Object obj19 = properties17.get((java.lang.Object) 0.0d);
        java.lang.Object obj20 = properties17.clone();
        java.lang.String str21 = properties17.toString();
        boolean boolean24 = properties17.remove((java.lang.Object) 0, (java.lang.Object) 'a');
        java.lang.Object obj25 = null;
        boolean boolean26 = properties17.equals(obj25);
        java.util.Set<java.lang.Object> objSet27 = properties17.keySet();
        boolean boolean28 = properties11.contains((java.lang.Object) properties17);
        java.lang.Object obj29 = properties1.remove((java.lang.Object) properties17);
        java.util.Properties properties30 = new java.util.Properties(properties17);
        java.util.Properties properties31 = new java.util.Properties(properties17);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties32.logBaseDir = "";
        atomikosProperties32.setConsoleFileCount((int) (short) 10);
        java.lang.String str37 = atomikosProperties32.transactionManagerUniqueName;
        atomikosProperties32.maxActives = (-1);
        boolean boolean40 = properties17.equals((java.lang.Object) (-1));
        java.util.Enumeration<?> wildcardEnumeration41 = properties17.propertyNames();
        org.junit.Assert.assertNotNull(objCollection2);
        org.junit.Assert.assertNotNull(objCollection5);
        org.junit.Assert.assertNotNull(objEnumeration6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(objCollection12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{}");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "{}" + "'", str21, "{}");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(objSet27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(wildcardEnumeration41);
    }

    @Test
    public void test04074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04074");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        atomikosProperties0.setLogBaseDir("{}");
        java.lang.String str7 = atomikosProperties0.getOutputDir();
        atomikosProperties0.setLogBaseName("hi!");
        boolean boolean10 = atomikosProperties0.isAllowSubTransactions();
        int int11 = atomikosProperties0.getConsoleFileCount();
        java.util.Properties properties12 = atomikosProperties0.asProperties();
        int int13 = atomikosProperties0.getMaxActives();
        boolean boolean14 = atomikosProperties0.enableLogging;
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertNotNull(properties12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 50 + "'", int13 == 50);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test04075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04075");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        long long5 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.service = "";
        java.lang.String str8 = atomikosProperties0.logBaseDir;
        atomikosProperties0.logBaseName = "tmlog";
        atomikosProperties0.transactionManagerUniqueName = "{}";
        boolean boolean13 = atomikosProperties0.isForceShutdownOnVmExit();
        boolean boolean14 = atomikosProperties0.threadedTwoPhaseCommit;
        atomikosProperties0.allowSubTransactions = true;
        atomikosProperties0.maxTimeout = (byte) 100;
        atomikosProperties0.threadedTwoPhaseCommit = true;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties21.logBaseDir = "";
        atomikosProperties21.setConsoleFileCount((int) (short) 10);
        java.lang.String str26 = atomikosProperties21.logBaseName;
        atomikosProperties21.outputDir = "";
        java.util.Properties properties29 = atomikosProperties21.asProperties();
        java.util.Set<java.lang.String> strSet30 = properties29.stringPropertyNames();
        boolean boolean32 = properties29.contains((java.lang.Object) false);
        java.util.Properties properties33 = new java.util.Properties(properties29);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet34 = properties29.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties36.logBaseDir = "";
        boolean boolean39 = atomikosProperties36.isForceShutdownOnVmExit();
        atomikosProperties36.allowSubTransactions = false;
        atomikosProperties0.set(properties29, "{com.atomikos.icatch.tmlog=-1}", (java.lang.Object) false);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "tmlog" + "'", str26, "tmlog");
        org.junit.Assert.assertNotNull(properties29);
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objEntrySet34);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test04076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04076");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int1 = atomikosProperties0.getConsoleFileCount();
        int int2 = atomikosProperties0.maxActives;
        atomikosProperties0.setConsoleFileName("");
        atomikosProperties0.transactionManagerUniqueName = "{}";
        java.lang.String str7 = atomikosProperties0.logBaseDir;
        atomikosProperties0.consoleFileLimit = 50;
        boolean boolean10 = atomikosProperties0.threadedTwoPhaseCommit;
        java.util.Properties properties11 = atomikosProperties0.asProperties();
        atomikosProperties0.serialJtaTransactions = false;
        boolean boolean14 = atomikosProperties0.serialJtaTransactions;
        atomikosProperties0.maxActives = 35;
        boolean boolean17 = atomikosProperties0.threadedTwoPhaseCommit;
        atomikosProperties0.service = "{{{}={}}={com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=-1, 0=INFO}}";
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 50 + "'", int2 == 50);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test04077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04077");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.get((java.lang.Object) 0.0d);
        java.lang.Object obj3 = properties0.clone();
        java.lang.String str4 = properties0.toString();
        java.util.Properties properties5 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties6.setDefaultJtaTimeout((-1L));
        int int9 = atomikosProperties6.getConsoleFileLimit();
        java.util.Properties properties10 = atomikosProperties6.asProperties();
        java.util.Properties properties11 = new java.util.Properties(properties10);
        java.util.Properties properties12 = new java.util.Properties();
        java.util.Properties properties13 = new java.util.Properties(properties12);
        java.util.Collection<java.lang.Object> objCollection14 = properties13.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties15.enableLogging = true;
        long long18 = atomikosProperties15.getCheckpointInterval();
        boolean boolean20 = properties13.remove((java.lang.Object) long18, (java.lang.Object) (byte) 100);
        boolean boolean22 = properties13.equals((java.lang.Object) (short) 1);
        java.util.Properties properties23 = new java.util.Properties(properties13);
        java.lang.Class<?> wildcardClass24 = properties23.getClass();
        java.lang.Object obj25 = properties0.put((java.lang.Object) properties10, (java.lang.Object) wildcardClass24);
        java.util.Properties properties26 = new java.util.Properties(properties10);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int28 = atomikosProperties27.getConsoleFileCount();
        int int29 = atomikosProperties27.maxActives;
        java.lang.String str30 = atomikosProperties27.getService();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties31.logBaseDir = "";
        atomikosProperties31.setConsoleFileCount((int) (short) 10);
        atomikosProperties31.setCheckpointInterval(10000L);
        long long38 = atomikosProperties31.maxTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel39 = atomikosProperties31.getConsoleLogLevel();
        atomikosProperties27.consoleLogLevel = atomikosLoggingLevel39;
        java.lang.String str41 = atomikosProperties27.consoleFileName;
        atomikosProperties27.setCheckpointInterval((long) (short) 10);
        atomikosProperties27.consoleFileLimit = 35;
        boolean boolean46 = properties10.equals((java.lang.Object) atomikosProperties27);
        atomikosProperties27.consoleFileCount = 35;
        atomikosProperties27.setEnableLogging(true);
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{}" + "'", str4, "{}");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertNotNull(objCollection14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 500L + "'", long18 == 500L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 50 + "'", int29 == 50);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 300000L + "'", long38 == 300000L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel39 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel39.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "tm.out" + "'", str41, "tm.out");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test04078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04078");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        long long5 = atomikosProperties0.getMaxTimeout();
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet7 = properties6.keySet();
        atomikosProperties0.set(properties6, "hi!", (java.lang.Object) (-1.0f));
        java.lang.Object obj13 = properties6.setProperty("", "hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties14.setDefaultJtaTimeout((-1L));
        java.util.Properties properties17 = new java.util.Properties();
        java.lang.Object obj19 = properties17.get((java.lang.Object) 0.0d);
        java.lang.Object obj20 = properties17.clone();
        boolean boolean22 = properties6.replace((java.lang.Object) (-1L), obj20, (java.lang.Object) 100.0d);
        java.util.Properties properties23 = new java.util.Properties();
        java.util.Properties properties24 = new java.util.Properties(properties23);
        properties24.clear();
        properties6.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties24);
        java.util.Properties properties27 = new java.util.Properties(properties6);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int29 = atomikosProperties28.getConsoleFileCount();
        int int30 = atomikosProperties28.maxActives;
        atomikosProperties28.setConsoleFileName("");
        atomikosProperties28.transactionManagerUniqueName = "{}";
        java.util.Properties properties35 = atomikosProperties28.asProperties();
        java.util.Properties properties36 = new java.util.Properties(properties35);
        java.util.Enumeration<java.lang.Object> objEnumeration37 = properties36.keys();
        boolean boolean38 = properties27.equals((java.lang.Object) properties36);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties39 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties39.logBaseDir = "";
        atomikosProperties39.setConsoleFileCount((int) (short) 10);
        java.lang.String str44 = atomikosProperties39.logBaseName;
        atomikosProperties39.outputDir = "";
        java.util.Properties properties47 = atomikosProperties39.asProperties();
        java.util.Properties properties48 = new java.util.Properties(properties47);
        properties27.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties48);
        java.util.Properties properties50 = new java.util.Properties(properties27);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties51 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties51.enableLogging = true;
        long long54 = atomikosProperties51.getCheckpointInterval();
        java.lang.String str55 = atomikosProperties51.getService();
        java.lang.String str56 = atomikosProperties51.logBaseDir;
        atomikosProperties51.setEnableLogging(false);
        atomikosProperties51.consoleFileCount = 0;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties61 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int62 = atomikosProperties61.getConsoleFileCount();
        int int63 = atomikosProperties61.maxActives;
        java.lang.String str64 = atomikosProperties61.getService();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties65 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties65.logBaseDir = "";
        atomikosProperties65.setConsoleFileCount((int) (short) 10);
        atomikosProperties65.setCheckpointInterval(10000L);
        long long72 = atomikosProperties65.maxTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel73 = atomikosProperties65.getConsoleLogLevel();
        atomikosProperties61.consoleLogLevel = atomikosLoggingLevel73;
        java.util.Properties properties75 = atomikosProperties61.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel76 = atomikosProperties61.getConsoleLogLevel();
        atomikosProperties51.setConsoleLogLevel(atomikosLoggingLevel76);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties78 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties78.logBaseDir = "";
        atomikosProperties78.setConsoleFileCount((int) (short) 10);
        long long83 = atomikosProperties78.getMaxTimeout();
        java.util.Properties properties84 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet85 = properties84.keySet();
        atomikosProperties78.set(properties84, "hi!", (java.lang.Object) (-1.0f));
        atomikosProperties78.setConsoleFileLimit((int) (short) 100);
        atomikosProperties78.setForceShutdownOnVmExit(false);
        java.lang.String str93 = atomikosProperties78.logBaseName;
        java.lang.String str94 = atomikosProperties78.outputDir;
        boolean boolean95 = properties27.remove((java.lang.Object) atomikosLoggingLevel76, (java.lang.Object) atomikosProperties78);
        atomikosProperties78.setConsoleFileName("{com.atomikos.icatch.hi!=-1.0, =hi!}");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertNotNull(objSet7);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{}");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 50 + "'", int30 == 50);
        org.junit.Assert.assertNotNull(properties35);
        org.junit.Assert.assertNotNull(objEnumeration37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "tmlog" + "'", str44, "tmlog");
        org.junit.Assert.assertNotNull(properties47);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 500L + "'", long54 == 500L);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 50 + "'", int63 == 50);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 300000L + "'", long72 == 300000L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel73 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel73.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(properties75);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel76 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel76.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 300000L + "'", long83 == 300000L);
        org.junit.Assert.assertNotNull(objSet85);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "tmlog" + "'", str93, "tmlog");
        org.junit.Assert.assertNull(str94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test04079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04079");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setDefaultJtaTimeout((-1L));
        int int3 = atomikosProperties0.getConsoleFileLimit();
        int int4 = atomikosProperties0.maxActives;
        atomikosProperties0.setDefaultJtaTimeout(500L);
        int int7 = atomikosProperties0.getConsoleFileLimit();
        long long8 = atomikosProperties0.getCheckpointInterval();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int10 = atomikosProperties9.getConsoleFileCount();
        int int11 = atomikosProperties9.maxActives;
        atomikosProperties9.setConsoleFileName("");
        atomikosProperties9.transactionManagerUniqueName = "{}";
        java.util.Properties properties16 = atomikosProperties9.asProperties();
        atomikosProperties9.setConsoleFileLimit((int) (short) -1);
        atomikosProperties9.consoleFileLimit = (byte) 10;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel21 = atomikosProperties9.consoleLogLevel;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel21;
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 50 + "'", int11 == 50);
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel21 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel21.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
    }

    @Test
    public void test04080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04080");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int1 = atomikosProperties0.getConsoleFileCount();
        int int2 = atomikosProperties0.maxActives;
        atomikosProperties0.setConsoleFileName("");
        atomikosProperties0.transactionManagerUniqueName = "{}";
        java.util.Properties properties7 = atomikosProperties0.asProperties();
        java.util.Properties properties8 = new java.util.Properties(properties7);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int10 = atomikosProperties9.getConsoleFileCount();
        int int11 = atomikosProperties9.maxActives;
        atomikosProperties9.setConsoleFileName("");
        atomikosProperties9.transactionManagerUniqueName = "{}";
        java.util.Properties properties16 = atomikosProperties9.asProperties();
        java.util.Properties properties17 = new java.util.Properties(properties16);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties18.setDefaultJtaTimeout((-1L));
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel21 = null;
        atomikosProperties18.consoleLogLevel = atomikosLoggingLevel21;
        long long23 = atomikosProperties18.checkpointInterval;
        atomikosProperties18.setOutputDir("");
        atomikosProperties18.setCheckpointInterval((long) ' ');
        long long28 = atomikosProperties18.checkpointInterval;
        atomikosProperties18.setMaxActives(50);
        atomikosProperties18.logBaseName = "";
        java.lang.Object obj33 = properties16.remove((java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties34 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties34.logBaseDir = "";
        atomikosProperties34.setConsoleFileCount((int) (short) 10);
        long long39 = atomikosProperties34.getMaxTimeout();
        java.util.Properties properties40 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet41 = properties40.keySet();
        atomikosProperties34.set(properties40, "hi!", (java.lang.Object) (-1.0f));
        java.lang.Object obj47 = properties40.setProperty("", "hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties48 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties48.setDefaultJtaTimeout((-1L));
        java.util.Properties properties51 = new java.util.Properties();
        java.lang.Object obj53 = properties51.get((java.lang.Object) 0.0d);
        java.lang.Object obj54 = properties51.clone();
        boolean boolean56 = properties40.replace((java.lang.Object) (-1L), obj54, (java.lang.Object) 100.0d);
        java.util.Properties properties57 = new java.util.Properties();
        java.util.Properties properties58 = new java.util.Properties(properties57);
        properties58.clear();
        properties40.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties58);
        java.util.Properties properties61 = new java.util.Properties(properties40);
        java.lang.Object obj62 = properties7.getOrDefault((java.lang.Object) "", (java.lang.Object) properties61);
        java.lang.Object obj65 = properties7.setProperty("{{}={}}", "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=10, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=true, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir=, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        java.lang.String str68 = properties7.getProperty("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=10, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir={}, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=hi!, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}", "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=-1, 0=INFO}");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 50 + "'", int2 == 50);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 50 + "'", int11 == 50);
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 500L + "'", long23 == 500L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 32L + "'", long28 == 32L);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 300000L + "'", long39 == 300000L);
        org.junit.Assert.assertNotNull(objSet41);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertEquals(obj54.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj54), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj54), "{}");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(obj62);
        org.junit.Assert.assertEquals(obj62.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj62), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj62), "{}");
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=-1, 0=INFO}" + "'", str68, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=-1, 0=INFO}");
    }

    @Test
    public void test04081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04081");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long1 = recovery0.getRetryInterval();
        recovery0.setForgetOrphanedLogEntriesDelay((-1L));
        long long4 = recovery0.delay;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 10000L + "'", long1 == 10000L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
    }

    @Test
    public void test04082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04082");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.defaultJtaTimeout;
        java.lang.String str2 = atomikosProperties0.getLogBaseName();
        atomikosProperties0.allowSubTransactions = true;
        boolean boolean5 = atomikosProperties0.enableLogging;
        int int6 = atomikosProperties0.getConsoleFileLimit();
        int int7 = atomikosProperties0.maxActives;
        atomikosProperties0.setLogBaseDir("{true=10000}");
        boolean boolean10 = atomikosProperties0.enableLogging;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 10000L + "'", long1 == 10000L);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test04083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04083");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        long long5 = atomikosProperties0.getMaxTimeout();
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet7 = properties6.keySet();
        atomikosProperties0.set(properties6, "hi!", (java.lang.Object) (-1.0f));
        java.lang.String str11 = atomikosProperties0.logBaseDir;
        boolean boolean12 = atomikosProperties0.enableLogging;
        int int13 = atomikosProperties0.maxActives;
        boolean boolean14 = atomikosProperties0.isForceShutdownOnVmExit();
        long long15 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.consoleFileLimit = (short) 0;
        atomikosProperties0.setLogBaseName("{{}={}}");
        java.util.Properties properties20 = atomikosProperties0.asProperties();
        atomikosProperties0.consoleFileCount = (short) -1;
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertNotNull(objSet7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 50 + "'", int13 == 50);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10000L + "'", long15 == 10000L);
        org.junit.Assert.assertNotNull(properties20);
    }

    @Test
    public void test04084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04084");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.maxRetries = (-1);
        recovery0.setDelay((long) (short) 1);
        long long5 = recovery0.getForgetOrphanedLogEntriesDelay();
        int int6 = recovery0.maxRetries;
        recovery0.setRetryInterval((long) (byte) 100);
        recovery0.setRetryInterval((long) 35);
        recovery0.delay = 18L;
        recovery0.delay = (short) -1;
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 86400000L + "'", long5 == 86400000L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
    }

    @Test
    public void test04085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04085");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int1 = atomikosProperties0.getConsoleFileCount();
        int int2 = atomikosProperties0.maxActives;
        atomikosProperties0.setConsoleFileName("");
        java.lang.String str5 = atomikosProperties0.getOutputDir();
        atomikosProperties0.setConsoleFileName("");
        atomikosProperties0.serialJtaTransactions = true;
        atomikosProperties0.enableLogging = false;
        java.util.Properties properties12 = atomikosProperties0.asProperties();
        atomikosProperties0.defaultJtaTimeout = (byte) 1;
        long long15 = atomikosProperties0.checkpointInterval;
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 50 + "'", int2 == 50);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(properties12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 500L + "'", long15 == 500L);
    }

    @Test
    public void test04086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04086");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setDefaultJtaTimeout((-1L));
        int int3 = atomikosProperties0.getConsoleFileLimit();
        java.util.Properties properties4 = atomikosProperties0.asProperties();
        boolean boolean5 = atomikosProperties0.forceShutdownOnVmExit;
        boolean boolean6 = atomikosProperties0.forceShutdownOnVmExit;
        java.lang.String str7 = atomikosProperties0.service;
        java.lang.String str8 = atomikosProperties0.logBaseName;
        atomikosProperties0.logBaseDir = "{true=10000}";
        atomikosProperties0.allowSubTransactions = true;
        long long13 = atomikosProperties0.defaultJtaTimeout;
        boolean boolean14 = atomikosProperties0.isThreadedTwoPhaseCommit();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(properties4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "tmlog" + "'", str8, "tmlog");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test04087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04087");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.enableLogging = true;
        int int3 = atomikosProperties0.consoleFileLimit;
        atomikosProperties0.logBaseName = "hi!";
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery6 = atomikosProperties0.getRecovery();
        atomikosProperties0.checkpointInterval = (byte) 100;
        java.lang.String str9 = atomikosProperties0.getTransactionManagerUniqueName();
        java.util.Properties properties10 = atomikosProperties0.asProperties();
        atomikosProperties0.setForceShutdownOnVmExit(true);
        atomikosProperties0.setLogBaseDir("{true=10000}");
        boolean boolean15 = atomikosProperties0.isSerialJtaTransactions();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(recovery6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test04088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04088");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Collection<java.lang.Object> objCollection2 = properties1.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties3 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties3.enableLogging = true;
        long long6 = atomikosProperties3.getCheckpointInterval();
        boolean boolean8 = properties1.remove((java.lang.Object) long6, (java.lang.Object) (byte) 100);
        boolean boolean10 = properties1.equals((java.lang.Object) (short) 1);
        java.lang.Object obj13 = properties1.setProperty("{}", "tmlog");
        java.util.Enumeration<java.lang.Object> objEnumeration14 = properties1.keys();
        java.util.Properties properties15 = new java.util.Properties(properties1);
        java.io.PrintStream printStream16 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties15.list(printStream16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection2);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNotNull(objEnumeration14);
    }

    @Test
    public void test04089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04089");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setDefaultJtaTimeout((-1L));
        int int3 = atomikosProperties0.getConsoleFileLimit();
        int int4 = atomikosProperties0.maxActives;
        atomikosProperties0.setDefaultJtaTimeout(500L);
        int int7 = atomikosProperties0.getConsoleFileLimit();
        long long8 = atomikosProperties0.getCheckpointInterval();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int10 = atomikosProperties9.getConsoleFileCount();
        int int11 = atomikosProperties9.maxActives;
        atomikosProperties9.setConsoleFileName("");
        atomikosProperties9.transactionManagerUniqueName = "{}";
        java.util.Properties properties16 = atomikosProperties9.asProperties();
        atomikosProperties9.setConsoleFileLimit((int) (short) -1);
        atomikosProperties9.consoleFileLimit = (byte) 10;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel21 = atomikosProperties9.consoleLogLevel;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel21;
        java.util.Properties properties23 = atomikosProperties0.asProperties();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 50 + "'", int11 == 50);
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel21 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel21.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(properties23);
    }

    @Test
    public void test04090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04090");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        java.lang.String str5 = atomikosProperties0.logBaseName;
        atomikosProperties0.outputDir = "";
        java.util.Properties properties8 = atomikosProperties0.asProperties();
        java.util.Properties properties9 = new java.util.Properties(properties8);
        java.util.Properties properties10 = new java.util.Properties();
        java.util.Properties properties11 = new java.util.Properties(properties10);
        java.util.Collection<java.lang.Object> objCollection12 = properties10.values();
        int int13 = properties10.size();
        java.util.Enumeration<java.lang.Object> objEnumeration14 = properties10.elements();
        java.util.Properties properties15 = new java.util.Properties(properties10);
        boolean boolean16 = properties8.containsKey((java.lang.Object) properties10);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery17 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery17.maxRetries = (-1);
        recovery17.setDelay((long) (short) 0);
        recovery17.maxRetries = 0;
        recovery17.setMaxRetries((int) '#');
        recovery17.setMaxRetries((int) '#');
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery28 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery28.maxRetries = (-1);
        recovery28.setDelay((long) (short) 0);
        long long33 = recovery28.forgetOrphanedLogEntriesDelay;
        recovery28.retryInterval = 500L;
        long long36 = recovery28.delay;
        recovery28.setRetryInterval(10000L);
        java.lang.Object obj39 = properties10.put((java.lang.Object) recovery17, (java.lang.Object) 10000L);
        recovery17.setDelay((long) (byte) 0);
        recovery17.forgetOrphanedLogEntriesDelay = 35;
        long long44 = recovery17.retryInterval;
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tmlog" + "'", str5, "tmlog");
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertNotNull(objCollection12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(objEnumeration14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 86400000L + "'", long33 == 86400000L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 10000L + "'", long44 == 10000L);
    }

    @Test
    public void test04091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04091");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        atomikosProperties0.setLogBaseDir("{}");
        java.util.Properties properties7 = atomikosProperties0.asProperties();
        java.util.Set<java.lang.String> strSet8 = properties7.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int10 = atomikosProperties9.getConsoleFileCount();
        int int11 = atomikosProperties9.maxActives;
        atomikosProperties9.setConsoleFileName("");
        atomikosProperties9.transactionManagerUniqueName = "{}";
        java.util.Properties properties16 = atomikosProperties9.asProperties();
        boolean boolean17 = atomikosProperties9.threadedTwoPhaseCommit;
        atomikosProperties9.enableLogging = true;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int21 = atomikosProperties20.getConsoleFileCount();
        int int22 = atomikosProperties20.maxActives;
        atomikosProperties20.setConsoleFileName("");
        atomikosProperties20.transactionManagerUniqueName = "{}";
        atomikosProperties20.setMaxActives(0);
        boolean boolean29 = atomikosProperties20.forceShutdownOnVmExit;
        java.lang.Object obj30 = properties7.put((java.lang.Object) atomikosProperties9, (java.lang.Object) atomikosProperties20);
        atomikosProperties9.setConsoleFileCount((int) '4');
        int int33 = atomikosProperties9.getConsoleFileLimit();
        java.util.Properties properties34 = atomikosProperties9.asProperties();
        java.util.Collection<java.lang.Object> objCollection35 = properties34.values();
        java.util.Properties properties36 = new java.util.Properties(properties34);
        java.lang.String str38 = properties34.getProperty("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.output_dir=, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=10, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=-1}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery39 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery39.maxRetries = (-1);
        recovery39.setDelay((long) (short) 0);
        long long44 = recovery39.forgetOrphanedLogEntriesDelay;
        recovery39.setDelay((long) 1);
        int int47 = recovery39.getMaxRetries();
        recovery39.setMaxRetries((int) '4');
        recovery39.setForgetOrphanedLogEntriesDelay(1L);
        java.util.Properties properties52 = new java.util.Properties();
        java.util.Properties properties53 = new java.util.Properties(properties52);
        java.util.Properties properties55 = new java.util.Properties();
        java.lang.Object obj57 = properties55.get((java.lang.Object) 0.0d);
        java.lang.Object obj58 = properties55.clone();
        java.lang.String str59 = properties55.toString();
        boolean boolean62 = properties55.remove((java.lang.Object) 0, (java.lang.Object) 'a');
        java.lang.Object obj63 = properties53.replace((java.lang.Object) 10.0d, (java.lang.Object) properties55);
        java.lang.String str64 = properties55.toString();
        java.util.Properties properties65 = new java.util.Properties(properties55);
        java.lang.Object obj68 = properties65.getOrDefault((java.lang.Object) (byte) 10, (java.lang.Object) (short) -1);
        java.util.Set<java.lang.String> strSet69 = properties65.stringPropertyNames();
        java.util.Set<java.lang.Object> objSet70 = properties65.keySet();
        java.util.Properties properties71 = new java.util.Properties(properties65);
        java.lang.Object obj72 = properties34.replace((java.lang.Object) 1L, (java.lang.Object) properties71);
        java.io.OutputStream outputStream73 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties34.storeToXML(outputStream73, "{{{}={}}={com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=-1, 0=INFO}}", "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=INFO, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=35, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=hi!, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 50 + "'", int11 == 50);
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 50 + "'", int22 == 50);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(properties34);
        org.junit.Assert.assertNotNull(objCollection35);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 86400000L + "'", long44 == 86400000L);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertEquals(obj58.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj58), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj58), "{}");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "{}" + "'", str59, "{}");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "{}" + "'", str64, "{}");
        org.junit.Assert.assertEquals("'" + obj68 + "' != '" + (short) -1 + "'", obj68, (short) -1);
        org.junit.Assert.assertNotNull(strSet69);
        org.junit.Assert.assertNotNull(objSet70);
        org.junit.Assert.assertNull(obj72);
    }

    @Test
    public void test04092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04092");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        java.lang.String str5 = atomikosProperties0.logBaseName;
        atomikosProperties0.outputDir = "";
        java.util.Properties properties8 = atomikosProperties0.asProperties();
        java.util.Properties properties9 = atomikosProperties0.asProperties();
        long long10 = atomikosProperties0.defaultJtaTimeout;
        atomikosProperties0.serialJtaTransactions = true;
        boolean boolean13 = atomikosProperties0.isAllowSubTransactions();
        atomikosProperties0.maxTimeout = 50;
        long long16 = atomikosProperties0.getMaxTimeout();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tmlog" + "'", str5, "tmlog");
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 50L + "'", long16 == 50L);
    }

    @Test
    public void test04093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04093");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int1 = atomikosProperties0.getConsoleFileCount();
        int int2 = atomikosProperties0.maxActives;
        atomikosProperties0.setConsoleFileName("");
        atomikosProperties0.transactionManagerUniqueName = "{}";
        java.util.Properties properties7 = atomikosProperties0.asProperties();
        boolean boolean8 = atomikosProperties0.threadedTwoPhaseCommit;
        long long9 = atomikosProperties0.checkpointInterval;
        java.lang.String str10 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.setOutputDir("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=-1, 0=INFO}");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 50 + "'", int2 == 50);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 500L + "'", long9 == 500L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "{}" + "'", str10, "{}");
    }

    @Test
    public void test04094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04094");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Collection<java.lang.Object> objCollection2 = properties0.values();
        int int3 = properties0.size();
        boolean boolean4 = properties0.isEmpty();
        java.lang.Object obj5 = properties0.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery6 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery6.maxRetries = (-1);
        recovery6.setDelay((long) (short) 0);
        long long11 = recovery6.forgetOrphanedLogEntriesDelay;
        recovery6.setDelay((long) 1);
        int int14 = recovery6.getMaxRetries();
        long long15 = recovery6.retryInterval;
        long long16 = recovery6.getDelay();
        boolean boolean17 = properties0.containsKey((java.lang.Object) recovery6);
        recovery6.setDelay((long) 50);
        org.junit.Assert.assertNotNull(objCollection2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 86400000L + "'", long11 == 86400000L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10000L + "'", long15 == 10000L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test04095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04095");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        long long5 = atomikosProperties0.getMaxTimeout();
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet7 = properties6.keySet();
        atomikosProperties0.set(properties6, "hi!", (java.lang.Object) (-1.0f));
        java.lang.String str11 = atomikosProperties0.logBaseDir;
        java.lang.String str12 = atomikosProperties0.logBaseDir;
        java.lang.String str13 = atomikosProperties0.logBaseDir;
        boolean boolean14 = atomikosProperties0.isEnableLogging();
        java.lang.String str15 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.threadedTwoPhaseCommit = true;
        boolean boolean18 = atomikosProperties0.serialJtaTransactions;
        atomikosProperties0.forceShutdownOnVmExit = false;
        int int21 = atomikosProperties0.consoleFileCount;
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertNotNull(objSet7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
    }

    @Test
    public void test04096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04096");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int1 = atomikosProperties0.getConsoleFileCount();
        int int2 = atomikosProperties0.maxActives;
        java.lang.String str3 = atomikosProperties0.getService();
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        boolean boolean5 = atomikosProperties0.isEnableLogging();
        java.util.Properties properties6 = atomikosProperties0.asProperties();
        java.util.Properties properties7 = new java.util.Properties(properties6);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 50 + "'", int2 == 50);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(properties6);
    }

    @Test
    public void test04097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04097");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        atomikosProperties0.setCheckpointInterval(10000L);
        long long7 = atomikosProperties0.maxTimeout;
        int int8 = atomikosProperties0.maxActives;
        atomikosProperties0.setCheckpointInterval((long) 0);
        java.util.Properties properties11 = atomikosProperties0.asProperties();
        java.util.Properties properties12 = atomikosProperties0.asProperties();
        int int13 = atomikosProperties0.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties14.logBaseDir = "";
        atomikosProperties14.setConsoleFileCount((int) (short) 10);
        long long19 = atomikosProperties14.getMaxTimeout();
        java.util.Properties properties20 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet21 = properties20.keySet();
        atomikosProperties14.set(properties20, "hi!", (java.lang.Object) (-1.0f));
        java.util.Enumeration<java.lang.Object> objEnumeration25 = properties20.keys();
        int int26 = properties20.size();
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties20.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int30 = atomikosProperties29.getConsoleFileCount();
        int int31 = atomikosProperties29.maxActives;
        java.lang.String str32 = atomikosProperties29.getService();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties33.logBaseDir = "";
        atomikosProperties33.setConsoleFileCount((int) (short) 10);
        atomikosProperties33.setCheckpointInterval(10000L);
        long long40 = atomikosProperties33.maxTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel41 = atomikosProperties33.getConsoleLogLevel();
        atomikosProperties29.consoleLogLevel = atomikosLoggingLevel41;
        atomikosProperties0.set(properties20, "tmlog", (java.lang.Object) atomikosLoggingLevel41);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties44.logBaseDir = "";
        atomikosProperties44.setConsoleFileCount((int) (short) 10);
        java.lang.String str49 = atomikosProperties44.logBaseName;
        atomikosProperties44.outputDir = "";
        java.util.Properties properties52 = atomikosProperties44.asProperties();
        java.util.Properties properties53 = atomikosProperties44.asProperties();
        long long54 = atomikosProperties44.defaultJtaTimeout;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties55 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties55.logBaseDir = "";
        atomikosProperties55.setConsoleFileCount((int) (short) 10);
        long long60 = atomikosProperties55.getMaxTimeout();
        java.util.Properties properties61 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet62 = properties61.keySet();
        atomikosProperties55.set(properties61, "hi!", (java.lang.Object) (-1.0f));
        java.lang.String str66 = atomikosProperties55.logBaseDir;
        java.lang.String str67 = atomikosProperties55.logBaseDir;
        java.lang.String str68 = atomikosProperties55.logBaseDir;
        boolean boolean69 = atomikosProperties55.isEnableLogging();
        long long70 = atomikosProperties55.checkpointInterval;
        atomikosProperties55.setOutputDir("hi!");
        long long73 = atomikosProperties55.maxTimeout;
        java.lang.String str74 = atomikosProperties55.logBaseName;
        java.util.Properties properties75 = atomikosProperties55.asProperties();
        java.lang.Object obj76 = properties20.putIfAbsent((java.lang.Object) atomikosProperties44, (java.lang.Object) properties75);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties77 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties77.logBaseDir = "";
        atomikosProperties77.setConsoleFileCount((int) (short) 10);
        java.lang.String str82 = atomikosProperties77.transactionManagerUniqueName;
        long long83 = atomikosProperties77.getDefaultJtaTimeout();
        long long84 = atomikosProperties77.checkpointInterval;
        atomikosProperties77.setConsoleFileName("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=10, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir=, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        atomikosProperties77.allowSubTransactions = true;
        java.lang.Object obj89 = properties75.get((java.lang.Object) true);
        java.util.Enumeration<?> wildcardEnumeration90 = properties75.propertyNames();
        java.util.Set<java.lang.Object> objSet91 = properties75.keySet();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 50 + "'", int8 == 50);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNotNull(properties12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 300000L + "'", long19 == 300000L);
        org.junit.Assert.assertNotNull(objSet21);
        org.junit.Assert.assertNotNull(objEnumeration25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 50 + "'", int31 == 50);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 300000L + "'", long40 == 300000L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel41 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel41.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "tmlog" + "'", str49, "tmlog");
        org.junit.Assert.assertNotNull(properties52);
        org.junit.Assert.assertNotNull(properties53);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 10000L + "'", long54 == 10000L);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 300000L + "'", long60 == 300000L);
        org.junit.Assert.assertNotNull(objSet62);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 500L + "'", long70 == 500L);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 300000L + "'", long73 == 300000L);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "tmlog" + "'", str74, "tmlog");
        org.junit.Assert.assertNotNull(properties75);
        org.junit.Assert.assertNull(obj76);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 10000L + "'", long83 == 10000L);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 500L + "'", long84 == 500L);
        org.junit.Assert.assertNull(obj89);
        org.junit.Assert.assertNotNull(wildcardEnumeration90);
        org.junit.Assert.assertNotNull(objSet91);
    }

    @Test
    public void test04098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04098");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.enableLogging = true;
        int int3 = atomikosProperties0.consoleFileLimit;
        atomikosProperties0.logBaseName = "hi!";
        atomikosProperties0.setEnableLogging(false);
        atomikosProperties0.setTransactionManagerUniqueName("");
        atomikosProperties0.consoleFileName = "hi!";
        int int12 = atomikosProperties0.getMaxActives();
        java.lang.Class<?> wildcardClass13 = atomikosProperties0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 50 + "'", int12 == 50);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test04099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04099");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.setMaxRetries((int) (short) -1);
        long long3 = recovery0.retryInterval;
        recovery0.setRetryInterval(0L);
        long long6 = recovery0.retryInterval;
        recovery0.setMaxRetries((int) (byte) -1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 10000L + "'", long3 == 10000L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
    }

    @Test
    public void test04100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04100");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties3 = new java.util.Properties();
        java.lang.Object obj5 = properties3.get((java.lang.Object) 0.0d);
        java.lang.Object obj6 = properties3.clone();
        java.lang.String str7 = properties3.toString();
        boolean boolean10 = properties3.remove((java.lang.Object) 0, (java.lang.Object) 'a');
        java.lang.Object obj11 = properties1.replace((java.lang.Object) 10.0d, (java.lang.Object) properties3);
        java.lang.String str12 = properties3.toString();
        java.util.Properties properties13 = new java.util.Properties(properties3);
        java.lang.Object obj16 = properties3.setProperty("", "");
        java.util.Properties properties17 = new java.util.Properties(properties3);
        properties3.clear();
        java.util.Properties properties19 = new java.util.Properties();
        java.lang.Object obj21 = properties19.get((java.lang.Object) 0.0d);
        java.lang.Object obj22 = properties19.clone();
        java.lang.String str23 = properties19.toString();
        java.util.Properties properties24 = new java.util.Properties(properties19);
        java.util.Enumeration<java.lang.Object> objEnumeration25 = properties24.keys();
        java.util.Collection<java.lang.Object> objCollection26 = properties24.values();
        java.util.Properties properties27 = new java.util.Properties();
        java.util.Properties properties28 = new java.util.Properties(properties27);
        java.util.Collection<java.lang.Object> objCollection29 = properties27.values();
        int int30 = properties27.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery31 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery31.maxRetries = (-1);
        recovery31.setDelay((long) (short) 0);
        recovery31.maxRetries = 0;
        boolean boolean39 = properties27.remove((java.lang.Object) 0, (java.lang.Object) (-1));
        java.util.Enumeration<?> wildcardEnumeration40 = properties27.propertyNames();
        java.lang.Object obj41 = properties24.get((java.lang.Object) properties27);
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties24);
        java.util.Properties properties43 = new java.util.Properties();
        java.util.Properties properties44 = new java.util.Properties(properties43);
        java.util.Collection<java.lang.Object> objCollection45 = properties44.values();
        java.util.Properties properties46 = new java.util.Properties();
        java.util.Properties properties47 = new java.util.Properties(properties46);
        java.util.Collection<java.lang.Object> objCollection48 = properties46.values();
        java.util.Enumeration<java.lang.Object> objEnumeration49 = properties46.keys();
        boolean boolean50 = properties44.contains((java.lang.Object) properties46);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties52 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties52.logBaseDir = "";
        atomikosProperties52.setConsoleFileCount((int) (short) 10);
        java.lang.String str57 = atomikosProperties52.logBaseName;
        atomikosProperties52.outputDir = "";
        java.util.Properties properties60 = atomikosProperties52.asProperties();
        java.util.Properties properties61 = atomikosProperties52.asProperties();
        boolean boolean62 = properties44.remove((java.lang.Object) (byte) 10, (java.lang.Object) atomikosProperties52);
        atomikosProperties52.setSerialJtaTransactions(false);
        atomikosProperties52.setOutputDir("{{}={}}");
        java.lang.String str67 = atomikosProperties52.getLogBaseDir();
        java.util.Properties properties68 = atomikosProperties52.asProperties();
        java.util.Properties properties69 = new java.util.Properties(properties68);
        properties24.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties69);
        java.util.Set<java.lang.String> strSet71 = properties69.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties72 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties72.logBaseDir = "";
        atomikosProperties72.setConsoleFileCount((int) (short) 10);
        java.lang.String str77 = atomikosProperties72.logBaseName;
        long long78 = atomikosProperties72.getMaxTimeout();
        boolean boolean79 = atomikosProperties72.isAllowSubTransactions();
        java.lang.String str80 = atomikosProperties72.logBaseName;
        atomikosProperties72.setMaxTimeout(52L);
        atomikosProperties72.setForceShutdownOnVmExit(true);
        boolean boolean85 = properties69.equals((java.lang.Object) atomikosProperties72);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "{}");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "{}" + "'", str7, "{}");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "{}" + "'", str12, "{}");
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "{}");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "{}" + "'", str23, "{}");
        org.junit.Assert.assertNotNull(objEnumeration25);
        org.junit.Assert.assertNotNull(objCollection26);
        org.junit.Assert.assertNotNull(objCollection29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(wildcardEnumeration40);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertNotNull(objCollection45);
        org.junit.Assert.assertNotNull(objCollection48);
        org.junit.Assert.assertNotNull(objEnumeration49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "tmlog" + "'", str57, "tmlog");
        org.junit.Assert.assertNotNull(properties60);
        org.junit.Assert.assertNotNull(properties61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(properties68);
        org.junit.Assert.assertNotNull(strSet71);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "tmlog" + "'", str77, "tmlog");
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 300000L + "'", long78 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "tmlog" + "'", str80, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test04101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04101");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        java.lang.String str5 = atomikosProperties0.logBaseName;
        atomikosProperties0.outputDir = "";
        java.util.Properties properties8 = atomikosProperties0.asProperties();
        java.util.Properties properties9 = atomikosProperties0.asProperties();
        java.util.Properties properties10 = new java.util.Properties(properties9);
        java.util.Properties properties11 = new java.util.Properties(properties9);
        java.io.OutputStream outputStream12 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties11.storeToXML(outputStream12, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.output_dir=, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=10, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=-1}", "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=10, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=true, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir=, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tmlog" + "'", str5, "tmlog");
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertNotNull(properties9);
    }

    @Test
    public void test04102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04102");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Collection<java.lang.Object> objCollection2 = properties0.values();
        int int3 = properties0.size();
        java.util.Enumeration<java.lang.Object> objEnumeration4 = properties0.elements();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel6 = org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN;
        java.util.Properties properties7 = new java.util.Properties();
        java.util.Properties properties8 = new java.util.Properties(properties7);
        java.util.Collection<java.lang.Object> objCollection9 = properties8.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.enableLogging = true;
        long long13 = atomikosProperties10.getCheckpointInterval();
        boolean boolean15 = properties8.remove((java.lang.Object) long13, (java.lang.Object) (byte) 100);
        java.lang.String str16 = properties8.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties17.logBaseDir = "";
        atomikosProperties17.setConsoleFileCount((int) (short) 10);
        long long22 = atomikosProperties17.getMaxTimeout();
        java.util.Properties properties23 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet24 = properties23.keySet();
        atomikosProperties17.set(properties23, "hi!", (java.lang.Object) (-1.0f));
        java.util.Properties properties28 = new java.util.Properties();
        java.lang.Object obj30 = properties28.get((java.lang.Object) 0.0d);
        java.lang.Object obj31 = properties28.clone();
        java.lang.String str32 = properties28.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties33.logBaseDir = "";
        atomikosProperties33.setConsoleFileCount((int) (short) 10);
        long long38 = atomikosProperties33.getMaxTimeout();
        java.util.Properties properties39 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet40 = properties39.keySet();
        atomikosProperties33.set(properties39, "hi!", (java.lang.Object) (-1.0f));
        java.lang.Object obj46 = properties39.setProperty("", "hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties47 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties47.setDefaultJtaTimeout((-1L));
        java.util.Properties properties50 = new java.util.Properties();
        java.lang.Object obj52 = properties50.get((java.lang.Object) 0.0d);
        java.lang.Object obj53 = properties50.clone();
        boolean boolean55 = properties39.replace((java.lang.Object) (-1L), obj53, (java.lang.Object) 100.0d);
        java.util.Properties properties56 = new java.util.Properties();
        java.util.Properties properties57 = new java.util.Properties(properties56);
        properties57.clear();
        properties39.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties57);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties60 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties60.logBaseDir = "";
        atomikosProperties60.setConsoleFileCount((int) (short) 10);
        long long65 = atomikosProperties60.getMaxTimeout();
        java.util.Properties properties66 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet67 = properties66.keySet();
        atomikosProperties60.set(properties66, "hi!", (java.lang.Object) (-1.0f));
        java.lang.String str71 = atomikosProperties60.logBaseDir;
        java.lang.String str72 = atomikosProperties60.logBaseDir;
        java.util.Properties properties73 = atomikosProperties60.asProperties();
        java.lang.Object obj74 = properties28.replace((java.lang.Object) properties57, (java.lang.Object) atomikosProperties60);
        boolean boolean75 = properties23.contains((java.lang.Object) atomikosProperties60);
        boolean boolean76 = properties8.containsValue((java.lang.Object) properties23);
        boolean boolean77 = properties0.replace((java.lang.Object) 500L, (java.lang.Object) atomikosLoggingLevel6, (java.lang.Object) boolean76);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet78 = properties0.entrySet();
        java.io.OutputStream outputStream79 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.save(outputStream79, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=10, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=true, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir=, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(objEnumeration4);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel6 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel6.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(objCollection9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 500L + "'", long13 == 500L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{}" + "'", str16, "{}");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 300000L + "'", long22 == 300000L);
        org.junit.Assert.assertNotNull(objSet24);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertEquals(obj31.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "{}");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "{}" + "'", str32, "{}");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 300000L + "'", long38 == 300000L);
        org.junit.Assert.assertNotNull(objSet40);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertEquals(obj53.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj53), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj53), "{}");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 300000L + "'", long65 == 300000L);
        org.junit.Assert.assertNotNull(objSet67);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(properties73);
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(objEntrySet78);
    }

    @Test
    public void test04103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04103");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        atomikosProperties0.setLogBaseDir("{}");
        java.lang.String str7 = atomikosProperties0.getOutputDir();
        boolean boolean8 = atomikosProperties0.isAllowSubTransactions();
        int int9 = atomikosProperties0.consoleFileLimit;
        boolean boolean10 = atomikosProperties0.forceShutdownOnVmExit;
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test04104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04104");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        java.lang.String str5 = atomikosProperties0.logBaseName;
        java.lang.String str6 = atomikosProperties0.logBaseDir;
        long long7 = atomikosProperties0.defaultJtaTimeout;
        boolean boolean8 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.logBaseName = "{com.atomikos.icatch.console_file_name=, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name={}, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}";
        atomikosProperties0.forceShutdownOnVmExit = true;
        java.util.Properties properties13 = new java.util.Properties();
        java.util.Properties properties14 = new java.util.Properties(properties13);
        java.util.Collection<java.lang.Object> objCollection15 = properties14.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties16.enableLogging = true;
        long long19 = atomikosProperties16.getCheckpointInterval();
        boolean boolean21 = properties14.remove((java.lang.Object) long19, (java.lang.Object) (byte) 100);
        boolean boolean23 = properties14.equals((java.lang.Object) (short) 1);
        java.lang.Object obj26 = properties14.setProperty("{}", "tmlog");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties28.logBaseDir = "";
        atomikosProperties28.setConsoleFileCount((int) (short) 10);
        long long33 = atomikosProperties28.getMaxTimeout();
        atomikosProperties28.service = "";
        java.lang.String str36 = atomikosProperties28.logBaseDir;
        boolean boolean37 = atomikosProperties28.threadedTwoPhaseCommit;
        java.lang.String str38 = atomikosProperties28.getService();
        atomikosProperties28.setOutputDir("tmlog");
        atomikosProperties28.setEnableLogging(false);
        atomikosProperties28.setSerialJtaTransactions(true);
        boolean boolean45 = atomikosProperties28.isSerialJtaTransactions();
        atomikosProperties28.maxTimeout = 2;
        atomikosProperties0.set(properties14, "tmlog", (java.lang.Object) 2);
        atomikosProperties0.maxActives = 20;
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tmlog" + "'", str5, "tmlog");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objCollection15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 500L + "'", long19 == 500L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 300000L + "'", long33 == 300000L);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    }

    @Test
    public void test04105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04105");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        long long5 = atomikosProperties0.getMaxTimeout();
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet7 = properties6.keySet();
        atomikosProperties0.set(properties6, "hi!", (java.lang.Object) (-1.0f));
        java.lang.String str11 = atomikosProperties0.logBaseDir;
        java.lang.String str12 = atomikosProperties0.logBaseDir;
        java.lang.String str13 = atomikosProperties0.logBaseDir;
        boolean boolean14 = atomikosProperties0.isEnableLogging();
        long long15 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.setOutputDir("hi!");
        long long18 = atomikosProperties0.maxTimeout;
        atomikosProperties0.outputDir = "tmlog";
        java.lang.String str21 = atomikosProperties0.logBaseDir;
        int int22 = atomikosProperties0.maxActives;
        atomikosProperties0.transactionManagerUniqueName = "{}";
        atomikosProperties0.setOutputDir("{com.atomikos.icatch.hi!=-1.0}");
        atomikosProperties0.setSerialJtaTransactions(true);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertNotNull(objSet7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 500L + "'", long15 == 500L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 300000L + "'", long18 == 300000L);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 50 + "'", int22 == 50);
    }

    @Test
    public void test04106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04106");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        long long5 = atomikosProperties0.getMaxTimeout();
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet7 = properties6.keySet();
        atomikosProperties0.set(properties6, "hi!", (java.lang.Object) (-1.0f));
        java.lang.String str11 = atomikosProperties0.logBaseDir;
        java.lang.String str12 = atomikosProperties0.logBaseDir;
        java.lang.String str13 = atomikosProperties0.logBaseDir;
        boolean boolean14 = atomikosProperties0.isAllowSubTransactions();
        java.lang.String str15 = atomikosProperties0.logBaseDir;
        java.lang.String str16 = atomikosProperties0.outputDir;
        int int17 = atomikosProperties0.getMaxActives();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertNotNull(objSet7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 50 + "'", int17 == 50);
    }

    @Test
    public void test04107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04107");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Collection<java.lang.Object> objCollection2 = properties0.values();
        java.util.Enumeration<java.lang.Object> objEnumeration3 = properties0.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int5 = atomikosProperties4.getConsoleFileCount();
        int int6 = atomikosProperties4.maxActives;
        java.lang.String str7 = atomikosProperties4.getService();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties8.logBaseDir = "";
        atomikosProperties8.setConsoleFileCount((int) (short) 10);
        atomikosProperties8.setCheckpointInterval(10000L);
        long long15 = atomikosProperties8.maxTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel16 = atomikosProperties8.getConsoleLogLevel();
        atomikosProperties4.consoleLogLevel = atomikosLoggingLevel16;
        java.util.Properties properties18 = atomikosProperties4.asProperties();
        java.lang.String str19 = atomikosProperties4.getConsoleFileName();
        boolean boolean20 = properties0.containsValue((java.lang.Object) atomikosProperties4);
        java.util.Enumeration<?> wildcardEnumeration21 = properties0.propertyNames();
        org.junit.Assert.assertNotNull(objCollection2);
        org.junit.Assert.assertNotNull(objEnumeration3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 50 + "'", int6 == 50);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 300000L + "'", long15 == 300000L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel16 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel16.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "tm.out" + "'", str19, "tm.out");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(wildcardEnumeration21);
    }

    @Test
    public void test04108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04108");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        java.lang.String str5 = atomikosProperties0.logBaseName;
        atomikosProperties0.outputDir = "";
        java.util.Properties properties8 = atomikosProperties0.asProperties();
        int int9 = atomikosProperties0.getConsoleFileLimit();
        java.util.Properties properties10 = atomikosProperties0.asProperties();
        long long11 = atomikosProperties0.getCheckpointInterval();
        java.lang.String str12 = atomikosProperties0.consoleFileName;
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tmlog" + "'", str5, "tmlog");
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 500L + "'", long11 == 500L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "tm.out" + "'", str12, "tm.out");
    }

    @Test
    public void test04109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04109");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        atomikosProperties0.setLogBaseDir("{}");
        java.lang.String str7 = atomikosProperties0.getOutputDir();
        atomikosProperties0.setLogBaseName("hi!");
        boolean boolean10 = atomikosProperties0.isAllowSubTransactions();
        int int11 = atomikosProperties0.getConsoleFileCount();
        java.util.Properties properties12 = atomikosProperties0.asProperties();
        atomikosProperties0.setAllowSubTransactions(true);
        java.util.Properties properties15 = atomikosProperties0.asProperties();
        atomikosProperties0.setCheckpointInterval((long) (byte) 10);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertNotNull(properties12);
        org.junit.Assert.assertNotNull(properties15);
    }

    @Test
    public void test04110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04110");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setDefaultJtaTimeout((-1L));
        int int3 = atomikosProperties0.getConsoleFileLimit();
        java.util.Properties properties4 = atomikosProperties0.asProperties();
        atomikosProperties0.setAllowSubTransactions(false);
        java.util.Properties properties7 = atomikosProperties0.asProperties();
        java.lang.String str8 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setCheckpointInterval((long) 97);
        atomikosProperties0.maxTimeout = 20;
        java.lang.String str13 = atomikosProperties0.getOutputDir();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(properties4);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test04111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04111");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        atomikosProperties0.setLogBaseDir("{}");
        java.lang.String str7 = atomikosProperties0.getOutputDir();
        atomikosProperties0.setLogBaseName("hi!");
        boolean boolean10 = atomikosProperties0.isAllowSubTransactions();
        boolean boolean11 = atomikosProperties0.isSerialJtaTransactions();
        java.util.Properties properties12 = new java.util.Properties();
        java.util.Properties properties13 = new java.util.Properties(properties12);
        java.util.Properties properties15 = new java.util.Properties();
        java.lang.Object obj17 = properties15.get((java.lang.Object) 0.0d);
        java.lang.Object obj18 = properties15.clone();
        java.lang.String str19 = properties15.toString();
        boolean boolean22 = properties15.remove((java.lang.Object) 0, (java.lang.Object) 'a');
        java.lang.Object obj23 = properties13.replace((java.lang.Object) 10.0d, (java.lang.Object) properties15);
        java.lang.String str24 = properties15.toString();
        java.util.Properties properties25 = new java.util.Properties(properties15);
        java.util.Properties properties26 = new java.util.Properties();
        java.util.Properties properties27 = new java.util.Properties(properties26);
        java.util.Properties properties29 = new java.util.Properties();
        java.lang.Object obj31 = properties29.get((java.lang.Object) 0.0d);
        java.lang.Object obj32 = properties29.clone();
        java.lang.String str33 = properties29.toString();
        boolean boolean36 = properties29.remove((java.lang.Object) 0, (java.lang.Object) 'a');
        java.lang.Object obj37 = properties27.replace((java.lang.Object) 10.0d, (java.lang.Object) properties29);
        java.util.Properties properties38 = new java.util.Properties(properties27);
        properties25.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties38);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties41.logBaseDir = "";
        atomikosProperties41.setConsoleFileCount((int) (short) 10);
        atomikosProperties41.setLogBaseDir("{}");
        java.lang.String str48 = atomikosProperties41.getOutputDir();
        atomikosProperties41.setLogBaseName("hi!");
        boolean boolean51 = atomikosProperties41.isAllowSubTransactions();
        int int52 = atomikosProperties41.consoleFileCount;
        atomikosProperties0.set(properties25, "{{}=tmlog}", (java.lang.Object) atomikosProperties41);
        java.util.Properties properties54 = new java.util.Properties(properties25);
        java.io.InputStream inputStream55 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties54.loadFromXML(inputStream55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "{}");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "{}" + "'", str19, "{}");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "{}" + "'", str24, "{}");
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "{}");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "{}" + "'", str33, "{}");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 10 + "'", int52 == 10);
    }

    @Test
    public void test04112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04112");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        long long5 = atomikosProperties0.getMaxTimeout();
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet7 = properties6.keySet();
        atomikosProperties0.set(properties6, "hi!", (java.lang.Object) (-1.0f));
        atomikosProperties0.setConsoleFileLimit((int) (short) 100);
        atomikosProperties0.setForceShutdownOnVmExit(false);
        java.lang.String str15 = atomikosProperties0.logBaseName;
        atomikosProperties0.checkpointInterval = 50;
        atomikosProperties0.consoleFileLimit = (byte) -1;
        long long20 = atomikosProperties0.getCheckpointInterval();
        java.util.Properties properties21 = atomikosProperties0.asProperties();
        java.util.Enumeration<java.lang.Object> objEnumeration22 = properties21.keys();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertNotNull(objSet7);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "tmlog" + "'", str15, "tmlog");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 50L + "'", long20 == 50L);
        org.junit.Assert.assertNotNull(properties21);
        org.junit.Assert.assertNotNull(objEnumeration22);
    }

    @Test
    public void test04113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04113");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.enableLogging = true;
        int int3 = atomikosProperties0.consoleFileLimit;
        atomikosProperties0.logBaseName = "hi!";
        atomikosProperties0.setEnableLogging(false);
        atomikosProperties0.setTransactionManagerUniqueName("");
        atomikosProperties0.forceShutdownOnVmExit = true;
        atomikosProperties0.setLogBaseName("hi!");
        java.util.Properties properties14 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long16 = atomikosProperties15.defaultJtaTimeout;
        atomikosProperties15.logBaseName = "tm.out";
        java.lang.String str19 = atomikosProperties15.consoleFileName;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel20 = atomikosProperties15.consoleLogLevel;
        java.lang.String str21 = atomikosProperties15.consoleFileName;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties22.logBaseDir = "";
        atomikosProperties22.setConsoleFileCount((int) (short) 10);
        long long27 = atomikosProperties22.getMaxTimeout();
        java.util.Properties properties28 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet29 = properties28.keySet();
        atomikosProperties22.set(properties28, "hi!", (java.lang.Object) (-1.0f));
        java.lang.String str33 = atomikosProperties22.logBaseDir;
        java.lang.String str34 = atomikosProperties22.logBaseDir;
        java.lang.String str35 = atomikosProperties22.logBaseDir;
        java.lang.String str36 = atomikosProperties22.getService();
        java.lang.String str37 = atomikosProperties22.outputDir;
        atomikosProperties22.setSerialJtaTransactions(true);
        java.lang.Object obj40 = properties14.replace((java.lang.Object) atomikosProperties15, (java.lang.Object) atomikosProperties22);
        boolean boolean41 = atomikosProperties22.serialJtaTransactions;
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10000L + "'", long16 == 10000L);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "tm.out" + "'", str19, "tm.out");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel20 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel20.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "tm.out" + "'", str21, "tm.out");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 300000L + "'", long27 == 300000L);
        org.junit.Assert.assertNotNull(objSet29);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test04114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04114");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setDefaultJtaTimeout((-1L));
        long long3 = atomikosProperties0.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int5 = atomikosProperties4.getConsoleFileCount();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties6.logBaseDir = "";
        atomikosProperties6.setConsoleFileCount((int) (short) 10);
        atomikosProperties6.setCheckpointInterval(10000L);
        long long13 = atomikosProperties6.maxTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel14 = org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO;
        atomikosProperties6.consoleLogLevel = atomikosLoggingLevel14;
        atomikosProperties4.consoleLogLevel = atomikosLoggingLevel14;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel14;
        java.lang.String str18 = atomikosProperties0.getTransactionManagerUniqueName();
        java.lang.String str19 = atomikosProperties0.service;
        long long20 = atomikosProperties0.defaultJtaTimeout;
        atomikosProperties0.setConsoleFileLimit(97);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 500L + "'", long3 == 500L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 300000L + "'", long13 == 300000L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel14 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO + "'", atomikosLoggingLevel14.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO));
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
    }

    @Test
    public void test04115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04115");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties3 = new java.util.Properties();
        java.lang.Object obj5 = properties3.get((java.lang.Object) 0.0d);
        java.lang.Object obj6 = properties3.clone();
        java.lang.String str7 = properties3.toString();
        boolean boolean10 = properties3.remove((java.lang.Object) 0, (java.lang.Object) 'a');
        java.lang.Object obj11 = properties1.replace((java.lang.Object) 10.0d, (java.lang.Object) properties3);
        java.lang.String str12 = properties3.toString();
        java.util.Properties properties13 = new java.util.Properties(properties3);
        java.util.Properties properties14 = new java.util.Properties();
        java.util.Properties properties15 = new java.util.Properties(properties14);
        java.util.Properties properties17 = new java.util.Properties();
        java.lang.Object obj19 = properties17.get((java.lang.Object) 0.0d);
        java.lang.Object obj20 = properties17.clone();
        java.lang.String str21 = properties17.toString();
        boolean boolean24 = properties17.remove((java.lang.Object) 0, (java.lang.Object) 'a');
        java.lang.Object obj25 = properties15.replace((java.lang.Object) 10.0d, (java.lang.Object) properties17);
        java.util.Properties properties26 = new java.util.Properties(properties15);
        properties13.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties26);
        java.lang.String str28 = properties26.toString();
        java.io.PrintStream printStream29 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties26.list(printStream29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "{}");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "{}" + "'", str7, "{}");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "{}" + "'", str12, "{}");
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{}");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "{}" + "'", str21, "{}");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "{}" + "'", str28, "{}");
    }

    @Test
    public void test04116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04116");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int1 = atomikosProperties0.getConsoleFileCount();
        int int2 = atomikosProperties0.maxActives;
        java.lang.String str3 = atomikosProperties0.getService();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties4.logBaseDir = "";
        atomikosProperties4.setConsoleFileCount((int) (short) 10);
        atomikosProperties4.setCheckpointInterval(10000L);
        long long11 = atomikosProperties4.maxTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel12 = atomikosProperties4.getConsoleLogLevel();
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel12;
        java.lang.String str14 = atomikosProperties0.consoleFileName;
        atomikosProperties0.forceShutdownOnVmExit = false;
        atomikosProperties0.setConsoleFileLimit((int) (byte) 1);
        atomikosProperties0.allowSubTransactions = false;
        atomikosProperties0.transactionManagerUniqueName = "{com.atomikos.icatch.hi!=-1.0}";
        java.lang.String str23 = atomikosProperties0.getLogBaseName();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 50 + "'", int2 == 50);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 300000L + "'", long11 == 300000L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel12 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel12.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "tm.out" + "'", str14, "tm.out");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "tmlog" + "'", str23, "tmlog");
    }

    @Test
    public void test04117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04117");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.checkpointInterval = 0;
        boolean boolean5 = atomikosProperties0.isThreadedTwoPhaseCommit();
        atomikosProperties0.setSerialJtaTransactions(false);
        java.util.Properties properties8 = new java.util.Properties();
        java.util.Properties properties9 = new java.util.Properties(properties8);
        java.util.Properties properties10 = new java.util.Properties();
        java.util.Properties properties11 = new java.util.Properties(properties10);
        java.util.Properties properties13 = new java.util.Properties();
        java.lang.Object obj15 = properties13.get((java.lang.Object) 0.0d);
        java.lang.Object obj16 = properties13.clone();
        java.lang.String str17 = properties13.toString();
        boolean boolean20 = properties13.remove((java.lang.Object) 0, (java.lang.Object) 'a');
        java.lang.Object obj21 = properties11.replace((java.lang.Object) 10.0d, (java.lang.Object) properties13);
        java.lang.String str22 = properties13.toString();
        java.util.Properties properties23 = new java.util.Properties(properties13);
        java.util.Properties properties24 = new java.util.Properties();
        java.util.Properties properties25 = new java.util.Properties(properties24);
        java.util.Properties properties27 = new java.util.Properties();
        java.lang.Object obj29 = properties27.get((java.lang.Object) 0.0d);
        java.lang.Object obj30 = properties27.clone();
        java.lang.String str31 = properties27.toString();
        boolean boolean34 = properties27.remove((java.lang.Object) 0, (java.lang.Object) 'a');
        java.lang.Object obj35 = properties25.replace((java.lang.Object) 10.0d, (java.lang.Object) properties27);
        java.util.Properties properties36 = new java.util.Properties(properties25);
        properties23.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties36);
        boolean boolean38 = properties8.contains((java.lang.Object) properties23);
        boolean boolean39 = properties23.isEmpty();
        java.util.Properties properties40 = new java.util.Properties();
        java.util.Properties properties41 = new java.util.Properties(properties40);
        java.util.Collection<java.lang.Object> objCollection42 = properties41.values();
        java.lang.Object obj45 = properties41.setProperty("hi!", "{}");
        java.lang.String str47 = properties41.getProperty("tmlog");
        properties41.clear();
        java.util.Set<java.lang.String> strSet49 = properties41.stringPropertyNames();
        properties23.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties41);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties52 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties52.enableLogging = true;
        int int55 = atomikosProperties52.consoleFileLimit;
        atomikosProperties52.logBaseName = "hi!";
        atomikosProperties52.enableLogging = false;
        atomikosProperties52.setMaxTimeout((long) '4');
        atomikosProperties52.setMaxTimeout((long) 1);
        atomikosProperties0.set(properties23, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=-1, 0=INFO}", (java.lang.Object) 1);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties65 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties65.setDefaultJtaTimeout((-1L));
        long long68 = atomikosProperties65.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties69 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int70 = atomikosProperties69.getConsoleFileCount();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties71 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties71.logBaseDir = "";
        atomikosProperties71.setConsoleFileCount((int) (short) 10);
        atomikosProperties71.setCheckpointInterval(10000L);
        long long78 = atomikosProperties71.maxTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel79 = org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO;
        atomikosProperties71.consoleLogLevel = atomikosLoggingLevel79;
        atomikosProperties69.consoleLogLevel = atomikosLoggingLevel79;
        atomikosProperties65.consoleLogLevel = atomikosLoggingLevel79;
        atomikosProperties65.forceShutdownOnVmExit = false;
        atomikosProperties65.checkpointInterval = (short) 1;
        atomikosProperties65.consoleFileCount = 0;
        atomikosProperties65.maxActives = (short) 1;
        atomikosProperties65.setTransactionManagerUniqueName("");
        java.lang.Object obj93 = properties23.remove((java.lang.Object) atomikosProperties65);
        atomikosProperties65.setEnableLogging(false);
        java.util.Properties properties96 = atomikosProperties65.asProperties();
        atomikosProperties65.serialJtaTransactions = true;
        java.lang.String str99 = atomikosProperties65.outputDir;
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "{}");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "{}" + "'", str17, "{}");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{}" + "'", str22, "{}");
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "{}");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "{}" + "'", str31, "{}");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(objCollection42);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 500L + "'", long68 == 500L);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 300000L + "'", long78 == 300000L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel79 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO + "'", atomikosLoggingLevel79.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO));
        org.junit.Assert.assertNull(obj93);
        org.junit.Assert.assertNotNull(properties96);
        org.junit.Assert.assertNull(str99);
    }

    @Test
    public void test04118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04118");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        atomikosProperties0.setLogBaseDir("{}");
        java.lang.String str7 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.forceShutdownOnVmExit = true;
        java.lang.String str10 = atomikosProperties0.consoleFileName;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties11.logBaseDir = "";
        atomikosProperties11.setConsoleFileCount((int) (short) 10);
        long long16 = atomikosProperties11.getMaxTimeout();
        atomikosProperties11.service = "";
        java.lang.String str19 = atomikosProperties11.outputDir;
        atomikosProperties11.setCheckpointInterval(50L);
        int int22 = atomikosProperties11.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel23 = atomikosProperties11.getConsoleLogLevel();
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel23;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int26 = atomikosProperties25.getConsoleFileCount();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties27.logBaseDir = "";
        atomikosProperties27.setConsoleFileCount((int) (short) 10);
        atomikosProperties27.setCheckpointInterval(10000L);
        long long34 = atomikosProperties27.maxTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel35 = org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO;
        atomikosProperties27.consoleLogLevel = atomikosLoggingLevel35;
        atomikosProperties25.consoleLogLevel = atomikosLoggingLevel35;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel35;
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "tm.out" + "'", str10, "tm.out");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 300000L + "'", long16 == 300000L);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 50 + "'", int22 == 50);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel23 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel23.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 300000L + "'", long34 == 300000L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel35 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO + "'", atomikosLoggingLevel35.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO));
    }

    @Test
    public void test04119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04119");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long1 = recovery0.getRetryInterval();
        recovery0.delay = 10L;
        recovery0.setForgetOrphanedLogEntriesDelay(0L);
        long long6 = recovery0.delay;
        recovery0.maxRetries = (byte) 10;
        recovery0.setDelay(50L);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 10000L + "'", long1 == 10000L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
    }

    @Test
    public void test04120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04120");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Collection<java.lang.Object> objCollection2 = properties1.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties3 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties3.enableLogging = true;
        long long6 = atomikosProperties3.getCheckpointInterval();
        boolean boolean8 = properties1.remove((java.lang.Object) long6, (java.lang.Object) (byte) 100);
        boolean boolean10 = properties1.equals((java.lang.Object) (short) 1);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet11 = properties1.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setDefaultJtaTimeout((-1L));
        long long15 = atomikosProperties12.checkpointInterval;
        boolean boolean16 = atomikosProperties12.forceShutdownOnVmExit;
        atomikosProperties12.setThreadedTwoPhaseCommit(true);
        boolean boolean19 = properties1.contains((java.lang.Object) true);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties20.logBaseDir = "";
        atomikosProperties20.setConsoleFileCount((int) (short) 10);
        long long25 = atomikosProperties20.getMaxTimeout();
        java.util.Properties properties26 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet27 = properties26.keySet();
        atomikosProperties20.set(properties26, "hi!", (java.lang.Object) (-1.0f));
        java.lang.String str31 = atomikosProperties20.logBaseDir;
        java.lang.String str32 = atomikosProperties20.logBaseDir;
        java.lang.String str33 = atomikosProperties20.logBaseDir;
        boolean boolean34 = atomikosProperties20.isEnableLogging();
        boolean boolean35 = atomikosProperties20.forceShutdownOnVmExit;
        boolean boolean36 = properties1.containsValue((java.lang.Object) atomikosProperties20);
        boolean boolean37 = properties1.isEmpty();
        java.util.Properties properties38 = new java.util.Properties();
        java.lang.Object obj40 = properties38.get((java.lang.Object) 0.0d);
        java.lang.Object obj41 = properties38.clone();
        java.lang.String str42 = properties38.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties43 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties43.logBaseDir = "";
        atomikosProperties43.setConsoleFileCount((int) (short) 10);
        atomikosProperties43.setLogBaseDir("{}");
        boolean boolean50 = atomikosProperties43.isSerialJtaTransactions();
        java.lang.Object obj52 = properties38.putIfAbsent((java.lang.Object) boolean50, (java.lang.Object) 10000L);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet53 = properties38.entrySet();
        java.lang.String str54 = properties38.toString();
        boolean boolean55 = properties1.containsValue((java.lang.Object) str54);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties56 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties56.logBaseDir = "";
        atomikosProperties56.setConsoleFileCount((int) (short) 10);
        atomikosProperties56.setLogBaseDir("{}");
        java.util.Properties properties63 = atomikosProperties56.asProperties();
        java.util.Set<java.lang.String> strSet64 = properties63.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties65 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int66 = atomikosProperties65.getConsoleFileCount();
        int int67 = atomikosProperties65.maxActives;
        atomikosProperties65.setConsoleFileName("");
        atomikosProperties65.transactionManagerUniqueName = "{}";
        java.util.Properties properties72 = atomikosProperties65.asProperties();
        boolean boolean73 = atomikosProperties65.threadedTwoPhaseCommit;
        atomikosProperties65.enableLogging = true;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties76 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int77 = atomikosProperties76.getConsoleFileCount();
        int int78 = atomikosProperties76.maxActives;
        atomikosProperties76.setConsoleFileName("");
        atomikosProperties76.transactionManagerUniqueName = "{}";
        atomikosProperties76.setMaxActives(0);
        boolean boolean85 = atomikosProperties76.forceShutdownOnVmExit;
        java.lang.Object obj86 = properties63.put((java.lang.Object) atomikosProperties65, (java.lang.Object) atomikosProperties76);
        atomikosProperties65.setConsoleFileCount((int) '4');
        boolean boolean89 = properties1.equals((java.lang.Object) '4');
        java.util.Enumeration<java.lang.Object> objEnumeration90 = properties1.elements();
        int int91 = properties1.size();
        properties1.clear();
        java.util.Properties properties93 = new java.util.Properties(properties1);
        org.junit.Assert.assertNotNull(objCollection2);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(objEntrySet11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 500L + "'", long15 == 500L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 300000L + "'", long25 == 300000L);
        org.junit.Assert.assertNotNull(objSet27);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals(obj41.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "{}");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "{}" + "'", str42, "{}");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertNotNull(objEntrySet53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "{true=10000}" + "'", str54, "{true=10000}");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(properties63);
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 50 + "'", int67 == 50);
        org.junit.Assert.assertNotNull(properties72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 50 + "'", int78 == 50);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNull(obj86);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(objEnumeration90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
    }

    @Test
    public void test04121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04121");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.defaultJtaTimeout;
        int int2 = atomikosProperties0.getConsoleFileCount();
        long long3 = atomikosProperties0.getCheckpointInterval();
        long long4 = atomikosProperties0.getCheckpointInterval();
        boolean boolean5 = atomikosProperties0.serialJtaTransactions;
        atomikosProperties0.enableLogging = true;
        java.lang.String str8 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.checkpointInterval = 52L;
        java.util.Properties properties11 = atomikosProperties0.asProperties();
        java.lang.String str13 = properties11.getProperty("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, tmlog=tmlog, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.output_dir=, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=10, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=-1}");
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 10000L + "'", long1 == 10000L);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 500L + "'", long3 == 500L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 500L + "'", long4 == 500L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test04122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04122");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long1 = recovery0.getRetryInterval();
        long long2 = recovery0.getDelay();
        recovery0.setMaxRetries(35);
        recovery0.setDelay((long) (byte) 1);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 10000L + "'", long1 == 10000L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10000L + "'", long2 == 10000L);
    }

    @Test
    public void test04123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04123");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.enableLogging = true;
        int int3 = atomikosProperties0.consoleFileLimit;
        atomikosProperties0.logBaseName = "hi!";
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int7 = atomikosProperties6.getConsoleFileCount();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties8.logBaseDir = "";
        atomikosProperties8.setConsoleFileCount((int) (short) 10);
        atomikosProperties8.setCheckpointInterval(10000L);
        long long15 = atomikosProperties8.maxTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel16 = org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO;
        atomikosProperties8.consoleLogLevel = atomikosLoggingLevel16;
        atomikosProperties6.consoleLogLevel = atomikosLoggingLevel16;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel16;
        atomikosProperties0.logBaseDir = "{}";
        java.util.Properties properties22 = atomikosProperties0.asProperties();
        java.util.Properties properties23 = new java.util.Properties();
        java.util.Properties properties24 = new java.util.Properties(properties23);
        java.util.Collection<java.lang.Object> objCollection25 = properties23.values();
        int int26 = properties23.size();
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties23.elements();
        java.util.Properties properties28 = new java.util.Properties(properties23);
        java.lang.String str30 = properties28.getProperty("{{}=tmlog}");
        java.util.Set<java.lang.String> strSet31 = properties28.stringPropertyNames();
        java.util.Enumeration<?> wildcardEnumeration32 = properties28.propertyNames();
        properties22.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties28);
        java.util.Properties properties34 = new java.util.Properties(properties28);
        java.util.Collection<java.lang.Object> objCollection35 = properties28.values();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 300000L + "'", long15 == 300000L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel16 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO + "'", atomikosLoggingLevel16.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO));
        org.junit.Assert.assertNotNull(properties22);
        org.junit.Assert.assertNotNull(objCollection25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertNotNull(wildcardEnumeration32);
        org.junit.Assert.assertNotNull(objCollection35);
    }

    @Test
    public void test04124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04124");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setDefaultJtaTimeout((-1L));
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel3 = null;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel3;
        atomikosProperties0.outputDir = "";
        int int7 = atomikosProperties0.maxActives;
        boolean boolean8 = atomikosProperties0.isThreadedTwoPhaseCommit();
        atomikosProperties0.transactionManagerUniqueName = "{true=10000}";
        atomikosProperties0.serialJtaTransactions = true;
        atomikosProperties0.serialJtaTransactions = true;
        atomikosProperties0.setSerialJtaTransactions(false);
        boolean boolean17 = atomikosProperties0.isSerialJtaTransactions();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test04125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04125");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int1 = atomikosProperties0.getConsoleFileCount();
        int int2 = atomikosProperties0.maxActives;
        java.lang.String str3 = atomikosProperties0.getService();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties4.logBaseDir = "";
        atomikosProperties4.setConsoleFileCount((int) (short) 10);
        atomikosProperties4.setCheckpointInterval(10000L);
        long long11 = atomikosProperties4.maxTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel12 = atomikosProperties4.getConsoleLogLevel();
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel12;
        java.lang.String str14 = atomikosProperties0.consoleFileName;
        atomikosProperties0.setCheckpointInterval((long) (short) 10);
        java.util.Properties properties17 = atomikosProperties0.asProperties();
        java.lang.String str18 = atomikosProperties0.getLogBaseDir();
        java.lang.String str19 = atomikosProperties0.transactionManagerUniqueName;
        java.util.Properties properties20 = atomikosProperties0.asProperties();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 50 + "'", int2 == 50);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 300000L + "'", long11 == 300000L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel12 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel12.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "tm.out" + "'", str14, "tm.out");
        org.junit.Assert.assertNotNull(properties17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(properties20);
    }

    @Test
    public void test04126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04126");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.get((java.lang.Object) 0.0d);
        java.lang.Object obj3 = properties0.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties4.enableLogging = true;
        long long7 = atomikosProperties4.getCheckpointInterval();
        java.lang.String str8 = atomikosProperties4.getService();
        java.lang.String str9 = atomikosProperties4.logBaseDir;
        atomikosProperties4.setEnableLogging(false);
        boolean boolean12 = atomikosProperties4.isEnableLogging();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties13.enableLogging = true;
        long long16 = atomikosProperties13.getCheckpointInterval();
        atomikosProperties13.setService("tmlog");
        atomikosProperties13.setConsoleFileName("{}");
        java.util.Properties properties21 = atomikosProperties13.asProperties();
        atomikosProperties13.setCheckpointInterval((long) (short) 10);
        atomikosProperties13.logBaseName = "";
        java.lang.Object obj26 = properties0.put((java.lang.Object) boolean12, (java.lang.Object) atomikosProperties13);
        java.io.OutputStream outputStream27 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.save(outputStream27, "{com.atomikos.icatch.hi!=-1.0, =hi!}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 500L + "'", long16 == 500L);
        org.junit.Assert.assertNotNull(properties21);
        org.junit.Assert.assertNull(obj26);
    }

    @Test
    public void test04127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04127");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int1 = atomikosProperties0.getConsoleFileCount();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties2.logBaseDir = "";
        atomikosProperties2.setConsoleFileCount((int) (short) 10);
        atomikosProperties2.setCheckpointInterval(10000L);
        long long9 = atomikosProperties2.maxTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel10 = org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO;
        atomikosProperties2.consoleLogLevel = atomikosLoggingLevel10;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel10;
        java.lang.String str13 = atomikosProperties0.getService();
        boolean boolean14 = atomikosProperties0.forceShutdownOnVmExit;
        java.lang.String str15 = atomikosProperties0.getService();
        boolean boolean16 = atomikosProperties0.enableLogging;
        atomikosProperties0.transactionManagerUniqueName = "{com.atomikos.icatch.console_file_name={}, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=10, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service=tmlog, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}";
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 300000L + "'", long9 == 300000L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel10 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO + "'", atomikosLoggingLevel10.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO));
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test04128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04128");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int1 = atomikosProperties0.getConsoleFileCount();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties2.logBaseDir = "";
        atomikosProperties2.setConsoleFileCount((int) (short) 10);
        atomikosProperties2.setCheckpointInterval(10000L);
        long long9 = atomikosProperties2.maxTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel10 = org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO;
        atomikosProperties2.consoleLogLevel = atomikosLoggingLevel10;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel10;
        java.lang.String str13 = atomikosProperties0.getService();
        atomikosProperties0.setMaxTimeout(10L);
        atomikosProperties0.setCheckpointInterval((long) 'a');
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel18 = atomikosProperties0.consoleLogLevel;
        java.lang.String str19 = atomikosProperties0.getLogBaseName();
        java.lang.String str20 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setService("{com.atomikos.icatch.hi!=-1.0, =hi!}");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 300000L + "'", long9 == 300000L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel10 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO + "'", atomikosLoggingLevel10.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO));
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel18 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO + "'", atomikosLoggingLevel18.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "tmlog" + "'", str19, "tmlog");
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test04129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04129");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int1 = atomikosProperties0.getConsoleFileCount();
        int int2 = atomikosProperties0.maxActives;
        atomikosProperties0.setConsoleFileName("");
        java.lang.String str5 = atomikosProperties0.getOutputDir();
        atomikosProperties0.setConsoleFileName("");
        atomikosProperties0.serialJtaTransactions = true;
        atomikosProperties0.enableLogging = false;
        java.util.Properties properties12 = atomikosProperties0.asProperties();
        java.util.Properties properties13 = new java.util.Properties(properties12);
        java.io.OutputStream outputStream14 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties12.storeToXML(outputStream14, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=-1}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 50 + "'", int2 == 50);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(properties12);
    }

    @Test
    public void test04130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04130");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setDefaultJtaTimeout((-1L));
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel3 = null;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel3;
        atomikosProperties0.outputDir = "";
        atomikosProperties0.maxActives = (short) 100;
        atomikosProperties0.maxActives = 100;
        java.util.Properties properties11 = atomikosProperties0.asProperties();
        int int12 = properties11.size();
        java.util.Properties properties13 = new java.util.Properties();
        java.util.Properties properties14 = new java.util.Properties(properties13);
        java.util.Properties properties16 = new java.util.Properties();
        java.lang.Object obj18 = properties16.get((java.lang.Object) 0.0d);
        java.lang.Object obj19 = properties16.clone();
        java.lang.String str20 = properties16.toString();
        boolean boolean23 = properties16.remove((java.lang.Object) 0, (java.lang.Object) 'a');
        java.lang.Object obj24 = properties14.replace((java.lang.Object) 10.0d, (java.lang.Object) properties16);
        java.util.Properties properties25 = new java.util.Properties(properties16);
        java.util.Properties properties26 = new java.util.Properties(properties25);
        java.util.Properties properties27 = new java.util.Properties(properties25);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int29 = atomikosProperties28.getConsoleFileCount();
        int int30 = atomikosProperties28.maxActives;
        atomikosProperties28.setConsoleFileName("");
        java.lang.String str33 = atomikosProperties28.getOutputDir();
        int int34 = atomikosProperties28.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery35 = atomikosProperties28.getRecovery();
        boolean boolean36 = properties25.containsKey((java.lang.Object) recovery35);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties37.setDefaultJtaTimeout((-1L));
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel40 = null;
        atomikosProperties37.consoleLogLevel = atomikosLoggingLevel40;
        atomikosProperties37.outputDir = "";
        int int44 = atomikosProperties37.maxActives;
        boolean boolean45 = atomikosProperties37.isThreadedTwoPhaseCommit();
        java.util.Properties properties46 = atomikosProperties37.asProperties();
        java.lang.Object obj47 = properties11.putIfAbsent((java.lang.Object) recovery35, (java.lang.Object) atomikosProperties37);
        atomikosProperties37.setLogBaseName("{com.atomikos.icatch.hi!=-1.0}");
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 18 + "'", int12 == 18);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "{}");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{}" + "'", str20, "{}");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 50 + "'", int30 == 50);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(recovery35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 50 + "'", int44 == 50);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(properties46);
        org.junit.Assert.assertNull(obj47);
    }

    @Test
    public void test04131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04131");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        java.lang.String str5 = atomikosProperties0.logBaseName;
        java.lang.String str6 = atomikosProperties0.logBaseDir;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties7.enableLogging = true;
        int int10 = atomikosProperties7.consoleFileLimit;
        atomikosProperties7.logBaseName = "hi!";
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int14 = atomikosProperties13.getConsoleFileCount();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties15.logBaseDir = "";
        atomikosProperties15.setConsoleFileCount((int) (short) 10);
        atomikosProperties15.setCheckpointInterval(10000L);
        long long22 = atomikosProperties15.maxTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel23 = org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO;
        atomikosProperties15.consoleLogLevel = atomikosLoggingLevel23;
        atomikosProperties13.consoleLogLevel = atomikosLoggingLevel23;
        atomikosProperties7.consoleLogLevel = atomikosLoggingLevel23;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel23;
        atomikosProperties0.forceShutdownOnVmExit = true;
        boolean boolean30 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.setThreadedTwoPhaseCommit(false);
        atomikosProperties0.serialJtaTransactions = true;
        atomikosProperties0.setAllowSubTransactions(false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tmlog" + "'", str5, "tmlog");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 300000L + "'", long22 == 300000L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel23 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO + "'", atomikosLoggingLevel23.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test04132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04132");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties3 = new java.util.Properties();
        java.lang.Object obj5 = properties3.get((java.lang.Object) 0.0d);
        java.lang.Object obj6 = properties3.clone();
        java.lang.String str7 = properties3.toString();
        boolean boolean10 = properties3.remove((java.lang.Object) 0, (java.lang.Object) 'a');
        java.lang.Object obj11 = properties1.replace((java.lang.Object) 10.0d, (java.lang.Object) properties3);
        java.lang.String str12 = properties3.toString();
        java.util.Properties properties13 = new java.util.Properties(properties3);
        java.util.Properties properties14 = new java.util.Properties();
        java.util.Properties properties15 = new java.util.Properties(properties14);
        java.util.Properties properties17 = new java.util.Properties();
        java.lang.Object obj19 = properties17.get((java.lang.Object) 0.0d);
        java.lang.Object obj20 = properties17.clone();
        java.lang.String str21 = properties17.toString();
        boolean boolean24 = properties17.remove((java.lang.Object) 0, (java.lang.Object) 'a');
        java.lang.Object obj25 = properties15.replace((java.lang.Object) 10.0d, (java.lang.Object) properties17);
        java.util.Properties properties26 = new java.util.Properties(properties15);
        properties13.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties26);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties28.setDefaultJtaTimeout((-1L));
        int int31 = atomikosProperties28.getConsoleFileLimit();
        java.util.Properties properties32 = atomikosProperties28.asProperties();
        java.util.Properties properties33 = new java.util.Properties(properties32);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties34 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties34.logBaseDir = "";
        atomikosProperties34.setConsoleFileCount((int) (short) 10);
        atomikosProperties34.setLogBaseDir("{}");
        java.util.Properties properties41 = atomikosProperties34.asProperties();
        java.util.Set<java.lang.String> strSet42 = properties41.stringPropertyNames();
        boolean boolean43 = properties32.containsValue((java.lang.Object) properties41);
        java.lang.Object obj44 = properties26.get((java.lang.Object) boolean43);
        java.util.Properties properties45 = new java.util.Properties(properties26);
        java.util.Enumeration<java.lang.Object> objEnumeration46 = properties45.keys();
        java.io.OutputStream outputStream47 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties45.storeToXML(outputStream47, "{hi!={}}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "{}");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "{}" + "'", str7, "{}");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "{}" + "'", str12, "{}");
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{}");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "{}" + "'", str21, "{}");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(properties32);
        org.junit.Assert.assertNotNull(properties41);
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNotNull(objEnumeration46);
    }

    @Test
    public void test04133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04133");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        long long5 = atomikosProperties0.getMaxTimeout();
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet7 = properties6.keySet();
        atomikosProperties0.set(properties6, "hi!", (java.lang.Object) (-1.0f));
        java.lang.String str11 = atomikosProperties0.logBaseDir;
        java.lang.String str12 = atomikosProperties0.logBaseDir;
        java.lang.String str13 = atomikosProperties0.logBaseDir;
        boolean boolean14 = atomikosProperties0.isEnableLogging();
        long long15 = atomikosProperties0.checkpointInterval;
        boolean boolean16 = atomikosProperties0.serialJtaTransactions;
        atomikosProperties0.maxActives = (short) 100;
        atomikosProperties0.transactionManagerUniqueName = "{}";
        atomikosProperties0.setEnableLogging(true);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel23 = atomikosProperties0.consoleLogLevel;
        atomikosProperties0.setConsoleFileLimit(100);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertNotNull(objSet7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 500L + "'", long15 == 500L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel23 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel23.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
    }

    @Test
    public void test04134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04134");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        long long5 = atomikosProperties0.getMaxTimeout();
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet7 = properties6.keySet();
        atomikosProperties0.set(properties6, "hi!", (java.lang.Object) (-1.0f));
        java.lang.String str11 = atomikosProperties0.logBaseDir;
        boolean boolean12 = atomikosProperties0.enableLogging;
        atomikosProperties0.setLogBaseDir("");
        atomikosProperties0.setAllowSubTransactions(true);
        int int17 = atomikosProperties0.maxActives;
        java.util.Properties properties18 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties20.logBaseDir = "";
        atomikosProperties20.setConsoleFileCount((int) (short) 10);
        java.lang.String str25 = atomikosProperties20.logBaseName;
        atomikosProperties20.outputDir = "";
        java.util.Properties properties28 = atomikosProperties20.asProperties();
        atomikosProperties20.setConsoleFileLimit(1);
        java.lang.Object obj31 = properties18.put((java.lang.Object) 0L, (java.lang.Object) atomikosProperties20);
        boolean boolean32 = properties18.isEmpty();
        java.io.OutputStream outputStream33 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties18.store(outputStream33, "{}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertNotNull(objSet7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 50 + "'", int17 == 50);
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "tmlog" + "'", str25, "tmlog");
        org.junit.Assert.assertNotNull(properties28);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test04135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04135");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setDefaultJtaTimeout((-1L));
        int int3 = atomikosProperties0.getConsoleFileLimit();
        java.util.Properties properties4 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties5.logBaseDir = "";
        atomikosProperties5.setConsoleFileCount((int) (short) 10);
        long long10 = atomikosProperties5.getMaxTimeout();
        atomikosProperties5.service = "";
        boolean boolean13 = atomikosProperties5.isSerialJtaTransactions();
        atomikosProperties5.setAllowSubTransactions(true);
        java.lang.String str16 = atomikosProperties5.getService();
        java.util.Properties properties17 = new java.util.Properties();
        java.util.Properties properties18 = new java.util.Properties(properties17);
        java.util.Properties properties20 = new java.util.Properties();
        java.lang.Object obj22 = properties20.get((java.lang.Object) 0.0d);
        java.lang.Object obj23 = properties20.clone();
        java.lang.String str24 = properties20.toString();
        boolean boolean27 = properties20.remove((java.lang.Object) 0, (java.lang.Object) 'a');
        java.lang.Object obj28 = properties18.replace((java.lang.Object) 10.0d, (java.lang.Object) properties20);
        java.util.Properties properties29 = new java.util.Properties(properties20);
        java.util.Properties properties30 = new java.util.Properties();
        java.util.Properties properties31 = new java.util.Properties(properties30);
        java.util.Collection<java.lang.Object> objCollection32 = properties30.values();
        int int33 = properties30.size();
        java.util.Enumeration<java.lang.Object> objEnumeration34 = properties30.elements();
        java.util.Properties properties35 = new java.util.Properties(properties30);
        java.lang.Object obj36 = properties35.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int38 = atomikosProperties37.getConsoleFileCount();
        int int39 = atomikosProperties37.maxActives;
        atomikosProperties37.setEnableLogging(false);
        java.util.Properties properties42 = new java.util.Properties();
        java.util.Properties properties43 = new java.util.Properties(properties42);
        java.util.Collection<java.lang.Object> objCollection44 = properties42.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery46 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long47 = recovery46.getRetryInterval();
        recovery46.delay = 10L;
        recovery46.setForgetOrphanedLogEntriesDelay(0L);
        int int52 = recovery46.maxRetries;
        atomikosProperties37.set(properties42, "hi!", (java.lang.Object) recovery46);
        java.util.Set<java.lang.String> strSet54 = properties42.stringPropertyNames();
        boolean boolean55 = properties20.remove(obj36, (java.lang.Object) strSet54);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties56 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties56.logBaseDir = "";
        atomikosProperties56.setConsoleFileCount((int) (short) 10);
        java.lang.String str61 = atomikosProperties56.logBaseName;
        atomikosProperties56.outputDir = "";
        java.util.Properties properties64 = atomikosProperties56.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties65 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties65.logBaseDir = "";
        atomikosProperties65.setConsoleFileCount((int) (short) 10);
        long long70 = atomikosProperties65.getMaxTimeout();
        java.util.Properties properties71 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet72 = properties71.keySet();
        atomikosProperties65.set(properties71, "hi!", (java.lang.Object) (-1.0f));
        java.lang.Object obj78 = properties71.setProperty("", "hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties80 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties80.logBaseDir = "";
        atomikosProperties80.setConsoleFileCount((int) (short) 10);
        atomikosProperties80.setLogBaseDir("{}");
        java.lang.String str87 = atomikosProperties80.getOutputDir();
        atomikosProperties56.set(properties71, "{}", (java.lang.Object) atomikosProperties80);
        java.lang.String str89 = atomikosProperties80.getOutputDir();
        boolean boolean90 = properties4.replace((java.lang.Object) atomikosProperties5, obj36, (java.lang.Object) atomikosProperties80);
        atomikosProperties80.enableLogging = true;
        long long93 = atomikosProperties80.maxTimeout;
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(properties4);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 300000L + "'", long10 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "{}");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "{}" + "'", str24, "{}");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNotNull(objCollection32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(objEnumeration34);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "{}");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 50 + "'", int39 == 50);
        org.junit.Assert.assertNotNull(objCollection44);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 10000L + "'", long47 == 10000L);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 5 + "'", int52 == 5);
        org.junit.Assert.assertNotNull(strSet54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "tmlog" + "'", str61, "tmlog");
        org.junit.Assert.assertNotNull(properties64);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 300000L + "'", long70 == 300000L);
        org.junit.Assert.assertNotNull(objSet72);
        org.junit.Assert.assertNull(obj78);
        org.junit.Assert.assertNull(str87);
        org.junit.Assert.assertNull(str89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 300000L + "'", long93 == 300000L);
    }

    @Test
    public void test04136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04136");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setDefaultJtaTimeout((-1L));
        long long3 = atomikosProperties0.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int5 = atomikosProperties4.getConsoleFileCount();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties6.logBaseDir = "";
        atomikosProperties6.setConsoleFileCount((int) (short) 10);
        atomikosProperties6.setCheckpointInterval(10000L);
        long long13 = atomikosProperties6.maxTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel14 = org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO;
        atomikosProperties6.consoleLogLevel = atomikosLoggingLevel14;
        atomikosProperties4.consoleLogLevel = atomikosLoggingLevel14;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel14;
        java.util.Properties properties18 = new java.util.Properties();
        java.util.Properties properties19 = new java.util.Properties(properties18);
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.Object obj23 = properties21.get((java.lang.Object) 0.0d);
        java.lang.Object obj24 = properties21.clone();
        java.lang.String str25 = properties21.toString();
        boolean boolean28 = properties21.remove((java.lang.Object) 0, (java.lang.Object) 'a');
        java.lang.Object obj29 = properties19.replace((java.lang.Object) 10.0d, (java.lang.Object) properties21);
        java.util.Properties properties30 = new java.util.Properties(properties19);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties32.setDefaultJtaTimeout((-1L));
        int int35 = atomikosProperties32.getConsoleFileLimit();
        java.util.Properties properties36 = atomikosProperties32.asProperties();
        java.util.Properties properties37 = new java.util.Properties(properties36);
        atomikosProperties0.set(properties30, "hi!", (java.lang.Object) properties36);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties39 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties39.enableLogging = true;
        long long42 = atomikosProperties39.getCheckpointInterval();
        atomikosProperties39.setService("tmlog");
        atomikosProperties39.setCheckpointInterval((long) (short) 0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties47 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties47.logBaseDir = "";
        atomikosProperties47.setConsoleFileCount((int) (short) 10);
        atomikosProperties47.setCheckpointInterval(10000L);
        long long54 = atomikosProperties47.maxTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel55 = org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO;
        atomikosProperties47.consoleLogLevel = atomikosLoggingLevel55;
        java.lang.Object obj57 = properties36.put((java.lang.Object) (short) 0, (java.lang.Object) atomikosLoggingLevel55);
        int int58 = properties36.size();
        java.io.InputStream inputStream59 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties36.load(inputStream59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 500L + "'", long3 == 500L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 300000L + "'", long13 == 300000L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel14 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO + "'", atomikosLoggingLevel14.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO));
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "{}");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "{}" + "'", str25, "{}");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(properties36);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 500L + "'", long42 == 500L);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 300000L + "'", long54 == 300000L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel55 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO + "'", atomikosLoggingLevel55.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO));
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 19 + "'", int58 == 19);
    }

    @Test
    public void test04137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04137");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long1 = recovery0.getRetryInterval();
        recovery0.delay = 10L;
        recovery0.setDelay((long) 100);
        recovery0.forgetOrphanedLogEntriesDelay = (short) 0;
        long long8 = recovery0.getDelay();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 10000L + "'", long1 == 10000L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
    }

    @Test
    public void test04138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04138");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Collection<java.lang.Object> objCollection2 = properties1.values();
        java.util.Properties properties3 = new java.util.Properties();
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Collection<java.lang.Object> objCollection5 = properties3.values();
        java.util.Enumeration<java.lang.Object> objEnumeration6 = properties3.keys();
        boolean boolean7 = properties1.contains((java.lang.Object) properties3);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet8 = properties1.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int10 = atomikosProperties9.getConsoleFileCount();
        int int11 = atomikosProperties9.maxActives;
        atomikosProperties9.setConsoleFileName("");
        java.lang.String str14 = atomikosProperties9.getOutputDir();
        atomikosProperties9.service = "tmlog";
        java.lang.String str17 = atomikosProperties9.transactionManagerUniqueName;
        atomikosProperties9.allowSubTransactions = true;
        java.util.Properties properties20 = atomikosProperties9.asProperties();
        java.lang.String str21 = atomikosProperties9.transactionManagerUniqueName;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery22 = atomikosProperties9.recovery;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties23.logBaseDir = "";
        atomikosProperties23.setConsoleFileCount((int) (short) 10);
        java.lang.String str28 = atomikosProperties23.transactionManagerUniqueName;
        atomikosProperties23.setService("{}");
        atomikosProperties23.consoleFileName = "tm.out";
        atomikosProperties23.service = "{com.atomikos.icatch.hi!=-1.0, =hi!}";
        atomikosProperties23.setLogBaseDir("{{{}={}}={com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=-1, 0=INFO}}");
        java.lang.Object obj37 = properties1.put((java.lang.Object) recovery22, (java.lang.Object) atomikosProperties23);
        recovery22.setMaxRetries(19);
        org.junit.Assert.assertNotNull(objCollection2);
        org.junit.Assert.assertNotNull(objCollection5);
        org.junit.Assert.assertNotNull(objEnumeration6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objEntrySet8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 50 + "'", int11 == 50);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(properties20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(recovery22);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(obj37);
    }

    @Test
    public void test04139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04139");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        long long5 = atomikosProperties0.getMaxTimeout();
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet7 = properties6.keySet();
        atomikosProperties0.set(properties6, "hi!", (java.lang.Object) (-1.0f));
        java.lang.Object obj13 = properties6.setProperty("", "hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties14.setDefaultJtaTimeout((-1L));
        java.util.Properties properties17 = new java.util.Properties();
        java.lang.Object obj19 = properties17.get((java.lang.Object) 0.0d);
        java.lang.Object obj20 = properties17.clone();
        boolean boolean22 = properties6.replace((java.lang.Object) (-1L), obj20, (java.lang.Object) 100.0d);
        java.util.Properties properties23 = new java.util.Properties();
        java.util.Properties properties24 = new java.util.Properties(properties23);
        properties24.clear();
        properties6.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties24);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int28 = atomikosProperties27.getConsoleFileCount();
        int int29 = atomikosProperties27.maxActives;
        atomikosProperties27.setConsoleFileName("");
        boolean boolean32 = atomikosProperties27.forceShutdownOnVmExit;
        atomikosProperties27.service = "{}";
        boolean boolean35 = properties6.containsValue((java.lang.Object) "{}");
        java.io.OutputStream outputStream36 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties6.store(outputStream36, "{true=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertNotNull(objSet7);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{}");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 50 + "'", int29 == 50);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test04140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04140");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setDefaultJtaTimeout((-1L));
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel3 = null;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel3;
        atomikosProperties0.outputDir = "";
        int int7 = atomikosProperties0.maxActives;
        boolean boolean8 = atomikosProperties0.isThreadedTwoPhaseCommit();
        atomikosProperties0.consoleFileLimit = (short) 10;
        atomikosProperties0.setLogBaseDir("tm.out");
        atomikosProperties0.enableLogging = false;
        long long15 = atomikosProperties0.defaultJtaTimeout;
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
    }

    @Test
    public void test04141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04141");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int1 = atomikosProperties0.getConsoleFileCount();
        int int2 = atomikosProperties0.maxActives;
        atomikosProperties0.setConsoleFileName("");
        atomikosProperties0.transactionManagerUniqueName = "{}";
        java.util.Properties properties7 = atomikosProperties0.asProperties();
        boolean boolean8 = atomikosProperties0.threadedTwoPhaseCommit;
        long long9 = atomikosProperties0.checkpointInterval;
        java.lang.String str10 = atomikosProperties0.logBaseName;
        int int11 = atomikosProperties0.consoleFileCount;
        atomikosProperties0.serialJtaTransactions = true;
        atomikosProperties0.setTransactionManagerUniqueName("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=10, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=true, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir=, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 50 + "'", int2 == 50);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 500L + "'", long9 == 500L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "tmlog" + "'", str10, "tmlog");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
    }

    @Test
    public void test04142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04142");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int1 = atomikosProperties0.getConsoleFileCount();
        int int2 = atomikosProperties0.maxActives;
        atomikosProperties0.setEnableLogging(true);
        boolean boolean5 = atomikosProperties0.isThreadedTwoPhaseCommit();
        atomikosProperties0.setLogBaseName("");
        java.lang.String str8 = atomikosProperties0.service;
        int int9 = atomikosProperties0.getMaxActives();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.logBaseDir = "";
        atomikosProperties10.setConsoleFileCount((int) (short) 10);
        java.lang.String str15 = atomikosProperties10.logBaseName;
        atomikosProperties10.outputDir = "";
        java.util.Properties properties18 = atomikosProperties10.asProperties();
        java.util.Properties properties19 = new java.util.Properties(properties18);
        java.util.Properties properties20 = new java.util.Properties();
        java.util.Properties properties21 = new java.util.Properties(properties20);
        java.util.Collection<java.lang.Object> objCollection22 = properties20.values();
        int int23 = properties20.size();
        java.util.Enumeration<java.lang.Object> objEnumeration24 = properties20.elements();
        java.util.Properties properties25 = new java.util.Properties(properties20);
        boolean boolean26 = properties18.containsKey((java.lang.Object) properties20);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties28.enableLogging = true;
        long long31 = atomikosProperties28.getCheckpointInterval();
        atomikosProperties28.setService("tmlog");
        atomikosProperties28.setConsoleFileName("{}");
        java.util.Properties properties36 = atomikosProperties28.asProperties();
        atomikosProperties0.set(properties18, "tm.out", (java.lang.Object) properties36);
        atomikosProperties0.setOutputDir("{{}={}}");
        atomikosProperties0.threadedTwoPhaseCommit = false;
        java.lang.String str42 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.consoleFileCount = 1;
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 50 + "'", int2 == 50);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "tmlog" + "'", str15, "tmlog");
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertNotNull(objCollection22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(objEnumeration24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 500L + "'", long31 == 500L);
        org.junit.Assert.assertNotNull(properties36);
        org.junit.Assert.assertNull(str42);
    }

    @Test
    public void test04143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04143");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long1 = recovery0.getRetryInterval();
        int int2 = recovery0.maxRetries;
        recovery0.forgetOrphanedLogEntriesDelay = 52;
        recovery0.setMaxRetries(21);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 10000L + "'", long1 == 10000L);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 5 + "'", int2 == 5);
    }

    @Test
    public void test04144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04144");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.get((java.lang.Object) 0.0d);
        java.lang.Object obj3 = properties0.clone();
        java.lang.String str4 = properties0.toString();
        boolean boolean7 = properties0.remove((java.lang.Object) 0, (java.lang.Object) 'a');
        java.lang.Object obj8 = null;
        boolean boolean9 = properties0.equals(obj8);
        java.util.Properties properties10 = new java.util.Properties();
        java.lang.Object obj12 = properties10.get((java.lang.Object) 0.0d);
        java.lang.Object obj13 = properties10.clone();
        java.lang.Object obj16 = properties10.setProperty("{}", "{}");
        int int17 = properties10.size();
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        java.util.Set<java.lang.Object> objSet19 = properties10.keySet();
        java.io.OutputStream outputStream20 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties10.save(outputStream20, "{{}={}}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{}" + "'", str4, "{}");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{}");
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(objSet19);
    }

    @Test
    public void test04145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04145");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        long long5 = atomikosProperties0.getMaxTimeout();
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet7 = properties6.keySet();
        atomikosProperties0.set(properties6, "hi!", (java.lang.Object) (-1.0f));
        java.util.Properties properties11 = new java.util.Properties();
        java.lang.Object obj13 = properties11.get((java.lang.Object) 0.0d);
        java.lang.Object obj14 = properties11.clone();
        java.lang.String str15 = properties11.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties16.logBaseDir = "";
        atomikosProperties16.setConsoleFileCount((int) (short) 10);
        long long21 = atomikosProperties16.getMaxTimeout();
        java.util.Properties properties22 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet23 = properties22.keySet();
        atomikosProperties16.set(properties22, "hi!", (java.lang.Object) (-1.0f));
        java.lang.Object obj29 = properties22.setProperty("", "hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties30.setDefaultJtaTimeout((-1L));
        java.util.Properties properties33 = new java.util.Properties();
        java.lang.Object obj35 = properties33.get((java.lang.Object) 0.0d);
        java.lang.Object obj36 = properties33.clone();
        boolean boolean38 = properties22.replace((java.lang.Object) (-1L), obj36, (java.lang.Object) 100.0d);
        java.util.Properties properties39 = new java.util.Properties();
        java.util.Properties properties40 = new java.util.Properties(properties39);
        properties40.clear();
        properties22.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties40);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties43 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties43.logBaseDir = "";
        atomikosProperties43.setConsoleFileCount((int) (short) 10);
        long long48 = atomikosProperties43.getMaxTimeout();
        java.util.Properties properties49 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet50 = properties49.keySet();
        atomikosProperties43.set(properties49, "hi!", (java.lang.Object) (-1.0f));
        java.lang.String str54 = atomikosProperties43.logBaseDir;
        java.lang.String str55 = atomikosProperties43.logBaseDir;
        java.util.Properties properties56 = atomikosProperties43.asProperties();
        java.lang.Object obj57 = properties11.replace((java.lang.Object) properties40, (java.lang.Object) atomikosProperties43);
        boolean boolean58 = properties6.contains((java.lang.Object) atomikosProperties43);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel59 = atomikosProperties43.consoleLogLevel;
        long long60 = atomikosProperties43.defaultJtaTimeout;
        boolean boolean61 = atomikosProperties43.allowSubTransactions;
        java.lang.String str62 = atomikosProperties43.service;
        atomikosProperties43.maxTimeout = 50L;
        java.lang.String str65 = atomikosProperties43.getTransactionManagerUniqueName();
        boolean boolean66 = atomikosProperties43.forceShutdownOnVmExit;
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertNotNull(objSet7);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "{}");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{}" + "'", str15, "{}");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 300000L + "'", long21 == 300000L);
        org.junit.Assert.assertNotNull(objSet23);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "{}");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 300000L + "'", long48 == 300000L);
        org.junit.Assert.assertNotNull(objSet50);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(properties56);
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel59 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel59.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 10000L + "'", long60 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test04146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04146");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.enableLogging = true;
        long long3 = atomikosProperties0.getCheckpointInterval();
        java.lang.String str4 = atomikosProperties0.getService();
        java.lang.String str5 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setEnableLogging(false);
        atomikosProperties0.consoleFileCount = 0;
        long long10 = atomikosProperties0.getMaxTimeout();
        int int11 = atomikosProperties0.consoleFileLimit;
        atomikosProperties0.maxActives = 100;
        atomikosProperties0.forceShutdownOnVmExit = true;
        boolean boolean16 = atomikosProperties0.allowSubTransactions;
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 500L + "'", long3 == 500L);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 300000L + "'", long10 == 300000L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test04147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04147");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties3 = new java.util.Properties();
        java.lang.Object obj5 = properties3.get((java.lang.Object) 0.0d);
        java.lang.Object obj6 = properties3.clone();
        java.lang.String str7 = properties3.toString();
        boolean boolean10 = properties3.remove((java.lang.Object) 0, (java.lang.Object) 'a');
        java.lang.Object obj11 = properties1.replace((java.lang.Object) 10.0d, (java.lang.Object) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setDefaultJtaTimeout((-1L));
        int int15 = atomikosProperties12.getConsoleFileLimit();
        java.util.Properties properties16 = atomikosProperties12.asProperties();
        java.util.Properties properties17 = new java.util.Properties();
        java.lang.Object obj19 = properties17.get((java.lang.Object) 0.0d);
        java.lang.Object obj20 = properties17.clone();
        java.lang.String str21 = properties17.toString();
        java.util.Properties properties22 = new java.util.Properties(properties17);
        java.util.Enumeration<java.lang.Object> objEnumeration23 = properties22.keys();
        java.util.Collection<java.lang.Object> objCollection24 = properties22.values();
        boolean boolean25 = properties16.contains((java.lang.Object) objCollection24);
        properties16.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties27.logBaseDir = "";
        atomikosProperties27.setConsoleFileCount((int) (short) 10);
        atomikosProperties27.setLogBaseDir("{}");
        java.util.Properties properties34 = atomikosProperties27.asProperties();
        java.util.Set<java.lang.String> strSet35 = properties34.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties36.setDefaultJtaTimeout((-1L));
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel39 = null;
        atomikosProperties36.consoleLogLevel = atomikosLoggingLevel39;
        atomikosProperties36.outputDir = "";
        int int43 = atomikosProperties36.maxActives;
        boolean boolean44 = atomikosProperties36.isThreadedTwoPhaseCommit();
        atomikosProperties36.consoleFileLimit = (short) 10;
        java.util.Properties properties47 = atomikosProperties36.asProperties();
        java.util.Enumeration<java.lang.Object> objEnumeration48 = properties47.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties49.enableLogging = true;
        long long52 = atomikosProperties49.getCheckpointInterval();
        java.lang.String str53 = atomikosProperties49.getService();
        atomikosProperties49.forceShutdownOnVmExit = false;
        java.lang.Object obj56 = properties34.replace((java.lang.Object) objEnumeration48, (java.lang.Object) atomikosProperties49);
        java.lang.Object obj57 = properties1.putIfAbsent((java.lang.Object) properties16, (java.lang.Object) atomikosProperties49);
        atomikosProperties49.transactionManagerUniqueName = "hi!";
        atomikosProperties49.setForceShutdownOnVmExit(false);
        boolean boolean62 = atomikosProperties49.isAllowSubTransactions();
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "{}");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "{}" + "'", str7, "{}");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{}");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "{}" + "'", str21, "{}");
        org.junit.Assert.assertNotNull(objEnumeration23);
        org.junit.Assert.assertNotNull(objCollection24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(properties34);
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 50 + "'", int43 == 50);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(properties47);
        org.junit.Assert.assertNotNull(objEnumeration48);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 500L + "'", long52 == 500L);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
    }

    @Test
    public void test04148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04148");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.enableLogging = true;
        long long3 = atomikosProperties0.getCheckpointInterval();
        java.lang.String str4 = atomikosProperties0.getOutputDir();
        atomikosProperties0.defaultJtaTimeout = 'a';
        atomikosProperties0.checkpointInterval = 97;
        atomikosProperties0.logBaseName = "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.console_file_count=10, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir={true=10000}, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.output_dir=, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}";
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 500L + "'", long3 == 500L);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test04149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04149");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties3 = new java.util.Properties();
        java.lang.Object obj5 = properties3.get((java.lang.Object) 0.0d);
        java.lang.Object obj6 = properties3.clone();
        java.lang.String str7 = properties3.toString();
        boolean boolean10 = properties3.remove((java.lang.Object) 0, (java.lang.Object) 'a');
        java.lang.Object obj11 = properties1.replace((java.lang.Object) 10.0d, (java.lang.Object) properties3);
        java.lang.String str12 = properties3.toString();
        java.util.Properties properties13 = new java.util.Properties(properties3);
        java.lang.Object obj16 = properties13.getOrDefault((java.lang.Object) (byte) 10, (java.lang.Object) (short) -1);
        boolean boolean17 = properties13.isEmpty();
        boolean boolean18 = properties13.isEmpty();
        java.util.Properties properties19 = new java.util.Properties(properties13);
        int int20 = properties13.size();
        java.util.Enumeration<java.lang.Object> objEnumeration21 = properties13.elements();
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "{}");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "{}" + "'", str7, "{}");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "{}" + "'", str12, "{}");
        org.junit.Assert.assertEquals("'" + obj16 + "' != '" + (short) -1 + "'", obj16, (short) -1);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(objEnumeration21);
    }

    @Test
    public void test04150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04150");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.enableLogging = true;
        long long3 = atomikosProperties0.getCheckpointInterval();
        atomikosProperties0.setService("tmlog");
        atomikosProperties0.setConsoleFileName("{}");
        java.util.Properties properties8 = atomikosProperties0.asProperties();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet9 = properties8.entrySet();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet10 = properties8.entrySet();
        java.util.Set<java.lang.String> strSet11 = properties8.stringPropertyNames();
        properties8.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties13.logBaseDir = "";
        atomikosProperties13.setConsoleFileCount((int) (short) 10);
        java.lang.String str18 = atomikosProperties13.transactionManagerUniqueName;
        atomikosProperties13.defaultJtaTimeout = (byte) -1;
        boolean boolean21 = atomikosProperties13.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery22 = atomikosProperties13.recovery;
        int int23 = recovery22.maxRetries;
        java.util.Properties properties24 = new java.util.Properties();
        java.util.Properties properties25 = new java.util.Properties(properties24);
        java.util.Collection<java.lang.Object> objCollection26 = properties24.values();
        int int27 = properties24.size();
        int int28 = properties24.size();
        java.util.Set<java.lang.Object> objSet29 = properties24.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties30.logBaseDir = "";
        atomikosProperties30.setConsoleFileCount((int) (short) 10);
        long long35 = atomikosProperties30.getMaxTimeout();
        java.util.Properties properties36 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet37 = properties36.keySet();
        atomikosProperties30.set(properties36, "hi!", (java.lang.Object) (-1.0f));
        java.lang.String str41 = atomikosProperties30.logBaseDir;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery42 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery42.maxRetries = (-1);
        recovery42.setDelay((long) (short) 1);
        long long47 = recovery42.getForgetOrphanedLogEntriesDelay();
        long long48 = recovery42.getForgetOrphanedLogEntriesDelay();
        java.lang.Object obj49 = properties24.put((java.lang.Object) atomikosProperties30, (java.lang.Object) long48);
        atomikosProperties30.setForceShutdownOnVmExit(false);
        java.lang.String str52 = atomikosProperties30.getOutputDir();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties53 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int54 = atomikosProperties53.getConsoleFileCount();
        int int55 = atomikosProperties53.maxActives;
        atomikosProperties53.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel58 = org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN;
        atomikosProperties53.consoleLogLevel = atomikosLoggingLevel58;
        atomikosProperties30.setConsoleLogLevel(atomikosLoggingLevel58);
        java.util.Properties properties61 = new java.util.Properties();
        java.lang.Object obj63 = properties61.get((java.lang.Object) 0.0d);
        java.lang.Object obj64 = properties61.clone();
        java.lang.String str65 = properties61.toString();
        java.util.Properties properties66 = new java.util.Properties(properties61);
        java.util.Properties properties67 = new java.util.Properties();
        java.util.Properties properties68 = new java.util.Properties(properties67);
        java.util.Collection<java.lang.Object> objCollection69 = properties67.values();
        int int70 = properties67.size();
        java.util.Enumeration<java.lang.Object> objEnumeration71 = properties67.elements();
        boolean boolean72 = properties66.equals((java.lang.Object) objEnumeration71);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery73 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long74 = recovery73.getRetryInterval();
        long long75 = recovery73.delay;
        boolean boolean76 = properties66.containsValue((java.lang.Object) recovery73);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties77 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int78 = atomikosProperties77.getConsoleFileCount();
        int int79 = atomikosProperties77.maxActives;
        atomikosProperties77.setConsoleFileName("");
        boolean boolean82 = atomikosProperties77.forceShutdownOnVmExit;
        long long83 = atomikosProperties77.maxTimeout;
        int int84 = atomikosProperties77.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties85 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int86 = atomikosProperties85.getConsoleFileCount();
        int int87 = atomikosProperties85.maxActives;
        atomikosProperties85.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel90 = org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN;
        atomikosProperties85.consoleLogLevel = atomikosLoggingLevel90;
        atomikosProperties77.setConsoleLogLevel(atomikosLoggingLevel90);
        java.lang.Object obj93 = properties66.get((java.lang.Object) atomikosLoggingLevel90);
        boolean boolean94 = properties8.replace((java.lang.Object) recovery22, (java.lang.Object) atomikosLoggingLevel58, (java.lang.Object) properties66);
        java.lang.Object obj95 = properties8.clone();
        java.util.Properties properties96 = new java.util.Properties(properties8);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 500L + "'", long3 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertNotNull(objEntrySet9);
        org.junit.Assert.assertNotNull(objEntrySet10);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(recovery22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 5 + "'", int23 == 5);
        org.junit.Assert.assertNotNull(objCollection26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(objSet29);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 300000L + "'", long35 == 300000L);
        org.junit.Assert.assertNotNull(objSet37);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 86400000L + "'", long47 == 86400000L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 86400000L + "'", long48 == 86400000L);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 50 + "'", int55 == 50);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel58 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel58.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertNotNull(obj64);
        org.junit.Assert.assertEquals(obj64.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj64), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj64), "{}");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "{}" + "'", str65, "{}");
        org.junit.Assert.assertNotNull(objCollection69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(objEnumeration71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 10000L + "'", long74 == 10000L);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 10000L + "'", long75 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 50 + "'", int79 == 50);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 300000L + "'", long83 == 300000L);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 50 + "'", int87 == 50);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel90 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel90.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(obj95);
        org.junit.Assert.assertEquals(obj95.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj95), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj95), "{}");
    }

    @Test
    public void test04151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04151");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        long long5 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.service = "";
        java.lang.String str8 = atomikosProperties0.logBaseDir;
        boolean boolean9 = atomikosProperties0.threadedTwoPhaseCommit;
        java.lang.String str10 = atomikosProperties0.getService();
        atomikosProperties0.transactionManagerUniqueName = "tmlog";
        atomikosProperties0.maxActives = 50;
        atomikosProperties0.maxActives = 0;
        atomikosProperties0.setThreadedTwoPhaseCommit(false);
        atomikosProperties0.setMaxActives((int) '4');
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test04152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04152");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        long long5 = atomikosProperties0.getMaxTimeout();
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet7 = properties6.keySet();
        atomikosProperties0.set(properties6, "hi!", (java.lang.Object) (-1.0f));
        java.lang.String str11 = atomikosProperties0.logBaseDir;
        boolean boolean12 = atomikosProperties0.enableLogging;
        atomikosProperties0.setLogBaseDir("");
        atomikosProperties0.setAllowSubTransactions(true);
        java.lang.String str17 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setConsoleFileCount(0);
        int int20 = atomikosProperties0.consoleFileCount;
        long long21 = atomikosProperties0.getMaxTimeout();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertNotNull(objSet7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 300000L + "'", long21 == 300000L);
    }

    @Test
    public void test04153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04153");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        long long5 = atomikosProperties0.getMaxTimeout();
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet7 = properties6.keySet();
        atomikosProperties0.set(properties6, "hi!", (java.lang.Object) (-1.0f));
        java.lang.String str11 = atomikosProperties0.logBaseDir;
        atomikosProperties0.outputDir = "hi!";
        java.lang.String str14 = atomikosProperties0.logBaseDir;
        int int15 = atomikosProperties0.consoleFileLimit;
        boolean boolean16 = atomikosProperties0.allowSubTransactions;
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertNotNull(objSet7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test04154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04154");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long1 = recovery0.getRetryInterval();
        int int2 = recovery0.maxRetries;
        long long3 = recovery0.getForgetOrphanedLogEntriesDelay();
        int int4 = recovery0.maxRetries;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 10000L + "'", long1 == 10000L);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 5 + "'", int2 == 5);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 86400000L + "'", long3 == 86400000L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 5 + "'", int4 == 5);
    }

    @Test
    public void test04155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04155");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        atomikosProperties0.setLogBaseDir("{}");
        java.util.Properties properties7 = atomikosProperties0.asProperties();
        java.util.Properties properties8 = new java.util.Properties(properties7);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties9.logBaseDir = "";
        atomikosProperties9.setConsoleFileCount((int) (short) 10);
        atomikosProperties9.setCheckpointInterval(10000L);
        long long16 = atomikosProperties9.maxTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel17 = atomikosProperties9.getConsoleLogLevel();
        boolean boolean18 = properties8.containsValue((java.lang.Object) atomikosProperties9);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long20 = atomikosProperties19.defaultJtaTimeout;
        int int21 = atomikosProperties19.getConsoleFileCount();
        long long22 = atomikosProperties19.getCheckpointInterval();
        long long23 = atomikosProperties19.getCheckpointInterval();
        boolean boolean24 = atomikosProperties19.serialJtaTransactions;
        java.util.Properties properties25 = atomikosProperties19.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int27 = atomikosProperties26.getConsoleFileCount();
        int int28 = atomikosProperties26.maxActives;
        java.lang.String str29 = atomikosProperties26.getService();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties30.logBaseDir = "";
        atomikosProperties30.setConsoleFileCount((int) (short) 10);
        atomikosProperties30.setCheckpointInterval(10000L);
        long long37 = atomikosProperties30.maxTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel38 = atomikosProperties30.getConsoleLogLevel();
        atomikosProperties26.consoleLogLevel = atomikosLoggingLevel38;
        java.util.Properties properties40 = atomikosProperties26.asProperties();
        atomikosProperties26.allowSubTransactions = false;
        java.lang.Object obj43 = properties8.getOrDefault((java.lang.Object) properties25, (java.lang.Object) false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties44.enableLogging = true;
        long long47 = atomikosProperties44.getCheckpointInterval();
        java.lang.String str48 = atomikosProperties44.getService();
        java.lang.String str49 = atomikosProperties44.logBaseDir;
        atomikosProperties44.setEnableLogging(false);
        atomikosProperties44.consoleFileCount = 0;
        long long54 = atomikosProperties44.getMaxTimeout();
        int int55 = atomikosProperties44.consoleFileLimit;
        atomikosProperties44.maxActives = 100;
        atomikosProperties44.outputDir = "";
        java.lang.Object obj60 = properties8.get((java.lang.Object) atomikosProperties44);
        atomikosProperties44.setConsoleFileLimit((int) (byte) 100);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 300000L + "'", long16 == 300000L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel17 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel17.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10000L + "'", long20 == 10000L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 500L + "'", long22 == 500L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 500L + "'", long23 == 500L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 50 + "'", int28 == 50);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 300000L + "'", long37 == 300000L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel38 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel38.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(properties40);
        org.junit.Assert.assertEquals("'" + obj43 + "' != '" + false + "'", obj43, false);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 500L + "'", long47 == 500L);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 300000L + "'", long54 == 300000L);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNull(obj60);
    }

    @Test
    public void test04156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04156");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int1 = atomikosProperties0.getConsoleFileCount();
        int int2 = atomikosProperties0.maxActives;
        atomikosProperties0.maxActives = 50;
        java.lang.String str5 = atomikosProperties0.transactionManagerUniqueName;
        java.lang.String str6 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.service = "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=-1}";
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 50 + "'", int2 == 50);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test04157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04157");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.enableLogging = true;
        int int3 = atomikosProperties0.consoleFileLimit;
        atomikosProperties0.logBaseName = "hi!";
        atomikosProperties0.enableLogging = false;
        atomikosProperties0.setMaxTimeout((long) '4');
        atomikosProperties0.setMaxTimeout((long) 1);
        long long12 = atomikosProperties0.maxTimeout;
        int int13 = atomikosProperties0.maxActives;
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 50 + "'", int13 == 50);
    }

    @Test
    public void test04158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04158");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Collection<java.lang.Object> objCollection2 = properties1.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties3 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties3.enableLogging = true;
        long long6 = atomikosProperties3.getCheckpointInterval();
        boolean boolean8 = properties1.remove((java.lang.Object) long6, (java.lang.Object) (byte) 100);
        java.lang.String str9 = properties1.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.logBaseDir = "";
        atomikosProperties10.setConsoleFileCount((int) (short) 10);
        long long15 = atomikosProperties10.getMaxTimeout();
        java.util.Properties properties16 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet17 = properties16.keySet();
        atomikosProperties10.set(properties16, "hi!", (java.lang.Object) (-1.0f));
        java.lang.Object obj23 = properties16.setProperty("", "hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties24.setDefaultJtaTimeout((-1L));
        java.util.Properties properties27 = new java.util.Properties();
        java.lang.Object obj29 = properties27.get((java.lang.Object) 0.0d);
        java.lang.Object obj30 = properties27.clone();
        boolean boolean32 = properties16.replace((java.lang.Object) (-1L), obj30, (java.lang.Object) 100.0d);
        java.util.Properties properties33 = new java.util.Properties();
        java.util.Properties properties34 = new java.util.Properties(properties33);
        properties34.clear();
        properties16.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties34);
        java.util.Enumeration<java.lang.Object> objEnumeration37 = properties34.elements();
        java.lang.String str39 = properties34.getProperty("");
        java.util.Properties properties40 = new java.util.Properties(properties34);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery41 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long42 = recovery41.getRetryInterval();
        recovery41.delay = 10L;
        boolean boolean45 = properties1.remove((java.lang.Object) properties40, (java.lang.Object) 10L);
        java.util.Enumeration<java.lang.Object> objEnumeration46 = properties40.keys();
        java.lang.Object obj47 = properties40.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties48 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long49 = atomikosProperties48.defaultJtaTimeout;
        atomikosProperties48.logBaseName = "tm.out";
        boolean boolean52 = properties40.containsKey((java.lang.Object) atomikosProperties48);
        java.lang.String str54 = properties40.getProperty("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=10, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=true, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir=, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        java.lang.Class<?> wildcardClass55 = properties40.getClass();
        org.junit.Assert.assertNotNull(objCollection2);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{}" + "'", str9, "{}");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 300000L + "'", long15 == 300000L);
        org.junit.Assert.assertNotNull(objSet17);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "{}");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objEnumeration37);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 10000L + "'", long42 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(objEnumeration46);
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertEquals(obj47.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj47), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj47), "{}");
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 10000L + "'", long49 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test04159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04159");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        long long5 = atomikosProperties0.getMaxTimeout();
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet7 = properties6.keySet();
        atomikosProperties0.set(properties6, "hi!", (java.lang.Object) (-1.0f));
        java.lang.String str11 = atomikosProperties0.logBaseDir;
        java.lang.String str12 = atomikosProperties0.logBaseDir;
        java.lang.String str13 = atomikosProperties0.logBaseDir;
        boolean boolean14 = atomikosProperties0.isEnableLogging();
        boolean boolean15 = atomikosProperties0.threadedTwoPhaseCommit;
        atomikosProperties0.setLogBaseDir("{}");
        java.lang.String str18 = atomikosProperties0.consoleFileName;
        atomikosProperties0.setEnableLogging(true);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertNotNull(objSet7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "tm.out" + "'", str18, "tm.out");
    }

    @Test
    public void test04160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04160");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        java.lang.String str5 = atomikosProperties0.logBaseName;
        atomikosProperties0.outputDir = "";
        java.util.Properties properties8 = atomikosProperties0.asProperties();
        java.util.Properties properties9 = atomikosProperties0.asProperties();
        long long10 = atomikosProperties0.defaultJtaTimeout;
        long long11 = atomikosProperties0.maxTimeout;
        java.lang.String str12 = atomikosProperties0.getTransactionManagerUniqueName();
        boolean boolean13 = atomikosProperties0.forceShutdownOnVmExit;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel14 = atomikosProperties0.consoleLogLevel;
        boolean boolean15 = atomikosProperties0.enableLogging;
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tmlog" + "'", str5, "tmlog");
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 300000L + "'", long11 == 300000L);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel14 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel14.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test04161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04161");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.defaultJtaTimeout;
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        properties2.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties6.logBaseDir = "";
        atomikosProperties6.setConsoleFileCount((int) (short) 10);
        long long11 = atomikosProperties6.getMaxTimeout();
        java.util.Properties properties12 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet13 = properties12.keySet();
        atomikosProperties6.set(properties12, "hi!", (java.lang.Object) (-1.0f));
        java.lang.String str17 = atomikosProperties6.logBaseDir;
        atomikosProperties6.outputDir = "hi!";
        java.lang.String str20 = atomikosProperties6.logBaseDir;
        atomikosProperties0.set(properties2, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=10, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir=, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}", (java.lang.Object) str20);
        java.util.Properties properties22 = new java.util.Properties();
        java.util.Properties properties23 = new java.util.Properties(properties22);
        java.util.Collection<java.lang.Object> objCollection24 = properties23.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties25.enableLogging = true;
        long long28 = atomikosProperties25.getCheckpointInterval();
        boolean boolean30 = properties23.remove((java.lang.Object) long28, (java.lang.Object) (byte) 100);
        boolean boolean32 = properties23.equals((java.lang.Object) (short) 1);
        java.util.Set<java.lang.String> strSet33 = properties23.stringPropertyNames();
        boolean boolean34 = properties2.equals((java.lang.Object) properties23);
        java.io.OutputStream outputStream35 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties2.storeToXML(outputStream35, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=10, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir=, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}", "{com.atomikos.icatch.{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=10, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir={}, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=hi!, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}=10}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 10000L + "'", long1 == 10000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 300000L + "'", long11 == 300000L);
        org.junit.Assert.assertNotNull(objSet13);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(objCollection24);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 500L + "'", long28 == 500L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test04162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04162");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        long long5 = atomikosProperties0.getMaxTimeout();
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet7 = properties6.keySet();
        atomikosProperties0.set(properties6, "hi!", (java.lang.Object) (-1.0f));
        java.lang.String str11 = atomikosProperties0.logBaseDir;
        java.lang.String str12 = atomikosProperties0.logBaseDir;
        java.lang.String str13 = atomikosProperties0.logBaseDir;
        java.lang.String str14 = atomikosProperties0.getService();
        atomikosProperties0.checkpointInterval = 100L;
        java.lang.String str17 = atomikosProperties0.getTransactionManagerUniqueName();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertNotNull(objSet7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test04163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04163");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.maxRetries = (-1);
        recovery0.retryInterval = 10000L;
        recovery0.setMaxRetries((int) 'a');
        recovery0.maxRetries = 'a';
        long long9 = recovery0.getRetryInterval();
        recovery0.setForgetOrphanedLogEntriesDelay(18L);
        recovery0.delay = 0;
        long long14 = recovery0.forgetOrphanedLogEntriesDelay;
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10000L + "'", long9 == 10000L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 18L + "'", long14 == 18L);
    }

    @Test
    public void test04164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04164");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties3 = new java.util.Properties();
        java.lang.Object obj5 = properties3.get((java.lang.Object) 0.0d);
        java.lang.Object obj6 = properties3.clone();
        java.lang.String str7 = properties3.toString();
        boolean boolean10 = properties3.remove((java.lang.Object) 0, (java.lang.Object) 'a');
        java.lang.Object obj11 = properties1.replace((java.lang.Object) 10.0d, (java.lang.Object) properties3);
        java.util.Properties properties12 = new java.util.Properties(properties3);
        java.util.Properties properties13 = new java.util.Properties(properties12);
        java.util.Properties properties14 = new java.util.Properties(properties12);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties15.setDefaultJtaTimeout((-1L));
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel18 = null;
        atomikosProperties15.consoleLogLevel = atomikosLoggingLevel18;
        atomikosProperties15.outputDir = "";
        int int22 = atomikosProperties15.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties23.logBaseDir = "";
        atomikosProperties23.setConsoleFileCount((int) (short) 10);
        long long28 = atomikosProperties23.getMaxTimeout();
        atomikosProperties23.service = "";
        java.lang.String str31 = atomikosProperties23.logBaseDir;
        boolean boolean32 = atomikosProperties23.threadedTwoPhaseCommit;
        long long33 = atomikosProperties23.checkpointInterval;
        boolean boolean34 = properties12.remove((java.lang.Object) int22, (java.lang.Object) atomikosProperties23);
        java.lang.String str35 = atomikosProperties23.consoleFileName;
        atomikosProperties23.logBaseDir = "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=10, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir=, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}";
        atomikosProperties23.setDefaultJtaTimeout(500L);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "{}");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "{}" + "'", str7, "{}");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 50 + "'", int22 == 50);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 300000L + "'", long28 == 300000L);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 500L + "'", long33 == 500L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "tm.out" + "'", str35, "tm.out");
    }

    @Test
    public void test04165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04165");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        long long5 = atomikosProperties0.getMaxTimeout();
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet7 = properties6.keySet();
        atomikosProperties0.set(properties6, "hi!", (java.lang.Object) (-1.0f));
        java.lang.String str11 = atomikosProperties0.logBaseDir;
        java.lang.String str12 = atomikosProperties0.logBaseDir;
        java.lang.String str13 = atomikosProperties0.logBaseDir;
        boolean boolean14 = atomikosProperties0.isEnableLogging();
        java.lang.String str15 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.threadedTwoPhaseCommit = true;
        boolean boolean18 = atomikosProperties0.serialJtaTransactions;
        atomikosProperties0.forceShutdownOnVmExit = false;
        java.util.Properties properties21 = atomikosProperties0.asProperties();
        java.lang.String str22 = properties21.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties23.logBaseDir = "";
        atomikosProperties23.setConsoleFileCount((int) (short) 10);
        java.lang.String str28 = atomikosProperties23.logBaseName;
        atomikosProperties23.outputDir = "";
        java.util.Properties properties31 = atomikosProperties23.asProperties();
        int int32 = atomikosProperties23.getConsoleFileLimit();
        java.util.Properties properties33 = atomikosProperties23.asProperties();
        int int34 = properties33.size();
        properties21.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties33);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties36.logBaseDir = "";
        atomikosProperties36.setConsoleFileCount((int) (short) 10);
        long long41 = atomikosProperties36.getMaxTimeout();
        java.util.Properties properties42 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet43 = properties42.keySet();
        atomikosProperties36.set(properties42, "hi!", (java.lang.Object) (-1.0f));
        java.lang.String str47 = atomikosProperties36.service;
        java.lang.String str48 = atomikosProperties36.outputDir;
        java.util.Properties properties49 = atomikosProperties36.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int51 = atomikosProperties50.getMaxActives();
        int int52 = atomikosProperties50.consoleFileCount;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel53 = atomikosProperties50.consoleLogLevel;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties54 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties54.logBaseDir = "";
        atomikosProperties54.setConsoleFileCount((int) (short) 10);
        long long59 = atomikosProperties54.getMaxTimeout();
        atomikosProperties54.service = "";
        java.lang.String str62 = atomikosProperties54.logBaseDir;
        java.lang.String str63 = atomikosProperties54.getOutputDir();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel64 = atomikosProperties54.getConsoleLogLevel();
        java.util.Properties properties65 = atomikosProperties54.asProperties();
        boolean boolean66 = properties33.replace((java.lang.Object) properties49, (java.lang.Object) atomikosLoggingLevel53, (java.lang.Object) properties65);
        java.lang.String str68 = properties49.getProperty("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, tmlog=tmlog, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.output_dir=, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=10, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=-1}");
        java.io.PrintStream printStream69 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties49.list(printStream69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertNotNull(objSet7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(properties21);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=10, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=true, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir=, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}" + "'", str22, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=10, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=true, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir=, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "tmlog" + "'", str28, "tmlog");
        org.junit.Assert.assertNotNull(properties31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(properties33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 20 + "'", int34 == 20);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 300000L + "'", long41 == 300000L);
        org.junit.Assert.assertNotNull(objSet43);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(properties49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 50 + "'", int51 == 50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel53 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel53.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 300000L + "'", long59 == 300000L);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel64 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel64.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(properties65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(str68);
    }

    @Test
    public void test04166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04166");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.enableLogging = true;
        long long3 = atomikosProperties0.getCheckpointInterval();
        java.lang.String str4 = atomikosProperties0.getService();
        java.lang.String str5 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setEnableLogging(false);
        atomikosProperties0.consoleFileCount = 0;
        long long10 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.setMaxTimeout((long) (byte) 10);
        atomikosProperties0.setLogBaseDir("{{}=tmlog}");
        long long15 = atomikosProperties0.getCheckpointInterval();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 500L + "'", long3 == 500L);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 300000L + "'", long10 == 300000L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 500L + "'", long15 == 500L);
    }

    @Test
    public void test04167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04167");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties3 = new java.util.Properties();
        java.lang.Object obj5 = properties3.get((java.lang.Object) 0.0d);
        java.lang.Object obj6 = properties3.clone();
        java.lang.String str7 = properties3.toString();
        boolean boolean10 = properties3.remove((java.lang.Object) 0, (java.lang.Object) 'a');
        java.lang.Object obj11 = properties1.replace((java.lang.Object) 10.0d, (java.lang.Object) properties3);
        java.util.Properties properties12 = new java.util.Properties(properties1);
        java.util.Properties properties13 = new java.util.Properties();
        java.lang.Object obj15 = properties13.get((java.lang.Object) 0.0d);
        java.lang.Object obj16 = properties13.clone();
        java.lang.String str17 = properties13.toString();
        boolean boolean20 = properties13.remove((java.lang.Object) 0, (java.lang.Object) 'a');
        properties13.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int23 = atomikosProperties22.getConsoleFileCount();
        int int24 = atomikosProperties22.maxActives;
        atomikosProperties22.maxActives = 50;
        java.util.Properties properties27 = new java.util.Properties();
        java.util.Properties properties28 = new java.util.Properties(properties27);
        java.util.Collection<java.lang.Object> objCollection29 = properties27.values();
        java.util.Properties properties30 = new java.util.Properties();
        java.util.Properties properties31 = new java.util.Properties(properties30);
        java.util.Collection<java.lang.Object> objCollection32 = properties31.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties33.enableLogging = true;
        long long36 = atomikosProperties33.getCheckpointInterval();
        boolean boolean38 = properties31.remove((java.lang.Object) long36, (java.lang.Object) (byte) 100);
        boolean boolean40 = properties31.equals((java.lang.Object) (short) 1);
        java.lang.Object obj43 = properties31.setProperty("{}", "tmlog");
        java.util.Enumeration<java.lang.Object> objEnumeration44 = properties31.keys();
        java.util.Properties properties45 = new java.util.Properties();
        java.util.Properties properties46 = new java.util.Properties(properties45);
        boolean boolean47 = properties45.isEmpty();
        boolean boolean48 = properties27.remove((java.lang.Object) objEnumeration44, (java.lang.Object) properties45);
        boolean boolean49 = properties13.remove((java.lang.Object) 50, (java.lang.Object) properties45);
        java.lang.String str50 = properties45.toString();
        java.util.Properties properties51 = new java.util.Properties(properties45);
        boolean boolean52 = properties1.contains((java.lang.Object) properties51);
        boolean boolean54 = properties1.containsKey((java.lang.Object) 0);
        java.io.Writer writer55 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.store(writer55, "{{{}={}}={com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=-1, 0=INFO}}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "{}");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "{}" + "'", str7, "{}");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "{}");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "{}" + "'", str17, "{}");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 50 + "'", int24 == 50);
        org.junit.Assert.assertNotNull(objCollection29);
        org.junit.Assert.assertNotNull(objCollection32);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 500L + "'", long36 == 500L);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNotNull(objEnumeration44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "{}" + "'", str50, "{}");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test04168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04168");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        atomikosProperties0.setCheckpointInterval(10000L);
        long long7 = atomikosProperties0.maxTimeout;
        int int8 = atomikosProperties0.maxActives;
        long long9 = atomikosProperties0.getCheckpointInterval();
        atomikosProperties0.setMaxTimeout(10L);
        java.util.Properties properties12 = atomikosProperties0.asProperties();
        java.util.Properties properties13 = new java.util.Properties();
        java.util.Properties properties14 = new java.util.Properties(properties13);
        java.util.Collection<java.lang.Object> objCollection15 = properties14.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties16.enableLogging = true;
        long long19 = atomikosProperties16.getCheckpointInterval();
        boolean boolean21 = properties14.remove((java.lang.Object) long19, (java.lang.Object) (byte) 100);
        boolean boolean23 = properties14.equals((java.lang.Object) (short) 1);
        java.util.Properties properties24 = new java.util.Properties(properties14);
        java.lang.Class<?> wildcardClass25 = properties24.getClass();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties26.enableLogging = true;
        long long29 = atomikosProperties26.getCheckpointInterval();
        atomikosProperties26.setService("tmlog");
        atomikosProperties26.setConsoleFileName("{}");
        java.util.Properties properties34 = atomikosProperties26.asProperties();
        atomikosProperties26.setCheckpointInterval((long) (short) 10);
        atomikosProperties26.logBaseName = "";
        int int39 = atomikosProperties26.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long41 = atomikosProperties40.defaultJtaTimeout;
        atomikosProperties40.logBaseName = "tm.out";
        java.lang.String str44 = atomikosProperties40.consoleFileName;
        java.lang.String str45 = atomikosProperties40.logBaseName;
        long long46 = atomikosProperties40.getMaxTimeout();
        boolean boolean47 = properties12.replace((java.lang.Object) properties24, (java.lang.Object) atomikosProperties26, (java.lang.Object) long46);
        java.util.Enumeration<java.lang.Object> objEnumeration48 = properties12.keys();
        java.util.Properties properties49 = new java.util.Properties(properties12);
        java.util.Enumeration<java.lang.Object> objEnumeration50 = properties49.keys();
        java.io.Reader reader51 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties49.load(reader51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 50 + "'", int8 == 50);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10000L + "'", long9 == 10000L);
        org.junit.Assert.assertNotNull(properties12);
        org.junit.Assert.assertNotNull(objCollection15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 500L + "'", long19 == 500L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 500L + "'", long29 == 500L);
        org.junit.Assert.assertNotNull(properties34);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 10000L + "'", long41 == 10000L);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "tm.out" + "'", str44, "tm.out");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "tm.out" + "'", str45, "tm.out");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 300000L + "'", long46 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(objEnumeration48);
        org.junit.Assert.assertNotNull(objEnumeration50);
    }

    @Test
    public void test04169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04169");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Collection<java.lang.Object> objCollection2 = properties1.values();
        java.util.Properties properties3 = new java.util.Properties();
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Collection<java.lang.Object> objCollection5 = properties3.values();
        java.util.Enumeration<java.lang.Object> objEnumeration6 = properties3.keys();
        boolean boolean7 = properties1.contains((java.lang.Object) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties9.logBaseDir = "";
        atomikosProperties9.setConsoleFileCount((int) (short) 10);
        java.lang.String str14 = atomikosProperties9.logBaseName;
        atomikosProperties9.outputDir = "";
        java.util.Properties properties17 = atomikosProperties9.asProperties();
        java.util.Properties properties18 = atomikosProperties9.asProperties();
        boolean boolean19 = properties1.remove((java.lang.Object) (byte) 10, (java.lang.Object) atomikosProperties9);
        atomikosProperties9.setSerialJtaTransactions(false);
        atomikosProperties9.setOutputDir("{{}={}}");
        java.lang.String str24 = atomikosProperties9.outputDir;
        boolean boolean25 = atomikosProperties9.isEnableLogging();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties26.logBaseDir = "";
        atomikosProperties26.setConsoleFileCount((int) (short) 10);
        long long31 = atomikosProperties26.getMaxTimeout();
        atomikosProperties26.service = "";
        java.lang.String str34 = atomikosProperties26.logBaseDir;
        boolean boolean35 = atomikosProperties26.threadedTwoPhaseCommit;
        java.lang.String str36 = atomikosProperties26.getService();
        java.lang.String str37 = atomikosProperties26.consoleFileName;
        java.lang.String str38 = atomikosProperties26.service;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel39 = atomikosProperties26.getConsoleLogLevel();
        atomikosProperties9.consoleLogLevel = atomikosLoggingLevel39;
        long long41 = atomikosProperties9.checkpointInterval;
        org.junit.Assert.assertNotNull(objCollection2);
        org.junit.Assert.assertNotNull(objCollection5);
        org.junit.Assert.assertNotNull(objEnumeration6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "tmlog" + "'", str14, "tmlog");
        org.junit.Assert.assertNotNull(properties17);
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "{{}={}}" + "'", str24, "{{}={}}");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 300000L + "'", long31 == 300000L);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "tm.out" + "'", str37, "tm.out");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel39 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel39.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 500L + "'", long41 == 500L);
    }

    @Test
    public void test04170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04170");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.defaultJtaTimeout;
        int int2 = atomikosProperties0.getConsoleFileCount();
        atomikosProperties0.setSerialJtaTransactions(false);
        atomikosProperties0.setCheckpointInterval((long) (byte) 10);
        boolean boolean7 = atomikosProperties0.isAllowSubTransactions();
        java.lang.String str8 = atomikosProperties0.consoleFileName;
        atomikosProperties0.forceShutdownOnVmExit = true;
        atomikosProperties0.setConsoleFileName("{com.atomikos.icatch.hi!=-1.0, =hi!}");
        atomikosProperties0.logBaseName = "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=10, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir={}, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}";
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 10000L + "'", long1 == 10000L);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "tm.out" + "'", str8, "tm.out");
    }

    @Test
    public void test04171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04171");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setDefaultJtaTimeout((-1L));
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel3 = null;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel3;
        boolean boolean5 = atomikosProperties0.enableLogging;
        atomikosProperties0.consoleFileLimit = 21;
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test04172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04172");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setDefaultJtaTimeout((-1L));
        long long3 = atomikosProperties0.checkpointInterval;
        boolean boolean4 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        atomikosProperties0.setOutputDir("");
        atomikosProperties0.setConsoleFileName("hi!");
        atomikosProperties0.setDefaultJtaTimeout((long) (byte) 1);
        boolean boolean13 = atomikosProperties0.allowSubTransactions;
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 500L + "'", long3 == 500L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test04173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04173");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int1 = atomikosProperties0.getConsoleFileCount();
        int int2 = atomikosProperties0.maxActives;
        atomikosProperties0.setConsoleFileName("");
        atomikosProperties0.transactionManagerUniqueName = "{}";
        java.util.Properties properties7 = atomikosProperties0.asProperties();
        boolean boolean8 = atomikosProperties0.threadedTwoPhaseCommit;
        long long9 = atomikosProperties0.checkpointInterval;
        java.lang.String str10 = atomikosProperties0.logBaseName;
        int int11 = atomikosProperties0.consoleFileCount;
        java.lang.String str12 = atomikosProperties0.consoleFileName;
        java.util.Properties properties13 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties14.logBaseDir = "";
        atomikosProperties14.setConsoleFileCount((int) (short) 10);
        java.lang.String str19 = atomikosProperties14.logBaseName;
        atomikosProperties14.outputDir = "";
        java.util.Properties properties22 = atomikosProperties14.asProperties();
        boolean boolean23 = atomikosProperties14.serialJtaTransactions;
        boolean boolean24 = atomikosProperties14.serialJtaTransactions;
        atomikosProperties14.serialJtaTransactions = false;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int28 = atomikosProperties27.getConsoleFileCount();
        int int29 = atomikosProperties27.maxActives;
        int int30 = atomikosProperties27.getMaxActives();
        java.lang.String str31 = atomikosProperties27.getLogBaseName();
        java.lang.String str32 = atomikosProperties27.getService();
        atomikosProperties27.allowSubTransactions = false;
        atomikosProperties27.consoleFileCount = 50;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties37.enableLogging = true;
        long long40 = atomikosProperties37.getCheckpointInterval();
        java.lang.String str41 = atomikosProperties37.getOutputDir();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel42 = atomikosProperties37.getConsoleLogLevel();
        atomikosProperties27.consoleLogLevel = atomikosLoggingLevel42;
        atomikosProperties14.setConsoleLogLevel(atomikosLoggingLevel42);
        boolean boolean45 = properties13.contains((java.lang.Object) atomikosProperties14);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 50 + "'", int2 == 50);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 500L + "'", long9 == 500L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "tmlog" + "'", str10, "tmlog");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(properties13);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "tmlog" + "'", str19, "tmlog");
        org.junit.Assert.assertNotNull(properties22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 50 + "'", int29 == 50);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 50 + "'", int30 == 50);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "tmlog" + "'", str31, "tmlog");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 500L + "'", long40 == 500L);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel42 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel42.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test04174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04174");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Collection<java.lang.Object> objCollection2 = properties1.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties3 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties3.enableLogging = true;
        long long6 = atomikosProperties3.getCheckpointInterval();
        boolean boolean8 = properties1.remove((java.lang.Object) long6, (java.lang.Object) (byte) 100);
        java.lang.String str9 = properties1.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.logBaseDir = "";
        atomikosProperties10.setConsoleFileCount((int) (short) 10);
        long long15 = atomikosProperties10.getMaxTimeout();
        java.util.Properties properties16 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet17 = properties16.keySet();
        atomikosProperties10.set(properties16, "hi!", (java.lang.Object) (-1.0f));
        java.lang.Object obj23 = properties16.setProperty("", "hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties24.setDefaultJtaTimeout((-1L));
        java.util.Properties properties27 = new java.util.Properties();
        java.lang.Object obj29 = properties27.get((java.lang.Object) 0.0d);
        java.lang.Object obj30 = properties27.clone();
        boolean boolean32 = properties16.replace((java.lang.Object) (-1L), obj30, (java.lang.Object) 100.0d);
        java.util.Properties properties33 = new java.util.Properties();
        java.util.Properties properties34 = new java.util.Properties(properties33);
        properties34.clear();
        properties16.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties34);
        java.util.Enumeration<java.lang.Object> objEnumeration37 = properties34.elements();
        java.lang.String str39 = properties34.getProperty("");
        java.util.Properties properties40 = new java.util.Properties(properties34);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery41 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long42 = recovery41.getRetryInterval();
        recovery41.delay = 10L;
        boolean boolean45 = properties1.remove((java.lang.Object) properties40, (java.lang.Object) 10L);
        java.util.Enumeration<java.lang.Object> objEnumeration46 = properties40.keys();
        java.lang.Object obj47 = properties40.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties48 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long49 = atomikosProperties48.defaultJtaTimeout;
        atomikosProperties48.logBaseName = "tm.out";
        boolean boolean52 = properties40.containsKey((java.lang.Object) atomikosProperties48);
        java.lang.String str53 = atomikosProperties48.getService();
        org.junit.Assert.assertNotNull(objCollection2);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{}" + "'", str9, "{}");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 300000L + "'", long15 == 300000L);
        org.junit.Assert.assertNotNull(objSet17);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "{}");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objEnumeration37);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 10000L + "'", long42 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(objEnumeration46);
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertEquals(obj47.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj47), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj47), "{}");
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 10000L + "'", long49 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(str53);
    }

    @Test
    public void test04175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04175");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        atomikosProperties0.setLogBaseDir("{}");
        java.lang.String str7 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.forceShutdownOnVmExit = true;
        java.lang.String str10 = atomikosProperties0.consoleFileName;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties11.logBaseDir = "";
        atomikosProperties11.setConsoleFileCount((int) (short) 10);
        long long16 = atomikosProperties11.getMaxTimeout();
        atomikosProperties11.service = "";
        java.lang.String str19 = atomikosProperties11.outputDir;
        atomikosProperties11.setCheckpointInterval(50L);
        int int22 = atomikosProperties11.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel23 = atomikosProperties11.getConsoleLogLevel();
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel23;
        java.util.Properties properties25 = atomikosProperties0.asProperties();
        boolean boolean26 = properties25.isEmpty();
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "tm.out" + "'", str10, "tm.out");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 300000L + "'", long16 == 300000L);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 50 + "'", int22 == 50);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel23 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel23.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test04176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04176");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.defaultJtaTimeout;
        atomikosProperties0.logBaseName = "tm.out";
        java.lang.String str4 = atomikosProperties0.consoleFileName;
        atomikosProperties0.allowSubTransactions = true;
        java.lang.String str7 = atomikosProperties0.transactionManagerUniqueName;
        int int8 = atomikosProperties0.consoleFileLimit;
        java.lang.String str9 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.setThreadedTwoPhaseCommit(false);
        java.lang.String str12 = atomikosProperties0.getLogBaseDir();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 10000L + "'", long1 == 10000L);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tm.out" + "'", str4, "tm.out");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test04177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04177");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.checkpointInterval = 0;
        boolean boolean5 = atomikosProperties0.isThreadedTwoPhaseCommit();
        atomikosProperties0.setSerialJtaTransactions(false);
        java.util.Properties properties8 = new java.util.Properties();
        java.util.Properties properties9 = new java.util.Properties(properties8);
        java.util.Properties properties10 = new java.util.Properties();
        java.util.Properties properties11 = new java.util.Properties(properties10);
        java.util.Properties properties13 = new java.util.Properties();
        java.lang.Object obj15 = properties13.get((java.lang.Object) 0.0d);
        java.lang.Object obj16 = properties13.clone();
        java.lang.String str17 = properties13.toString();
        boolean boolean20 = properties13.remove((java.lang.Object) 0, (java.lang.Object) 'a');
        java.lang.Object obj21 = properties11.replace((java.lang.Object) 10.0d, (java.lang.Object) properties13);
        java.lang.String str22 = properties13.toString();
        java.util.Properties properties23 = new java.util.Properties(properties13);
        java.util.Properties properties24 = new java.util.Properties();
        java.util.Properties properties25 = new java.util.Properties(properties24);
        java.util.Properties properties27 = new java.util.Properties();
        java.lang.Object obj29 = properties27.get((java.lang.Object) 0.0d);
        java.lang.Object obj30 = properties27.clone();
        java.lang.String str31 = properties27.toString();
        boolean boolean34 = properties27.remove((java.lang.Object) 0, (java.lang.Object) 'a');
        java.lang.Object obj35 = properties25.replace((java.lang.Object) 10.0d, (java.lang.Object) properties27);
        java.util.Properties properties36 = new java.util.Properties(properties25);
        properties23.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties36);
        boolean boolean38 = properties8.contains((java.lang.Object) properties23);
        boolean boolean39 = properties23.isEmpty();
        java.util.Properties properties40 = new java.util.Properties();
        java.util.Properties properties41 = new java.util.Properties(properties40);
        java.util.Collection<java.lang.Object> objCollection42 = properties41.values();
        java.lang.Object obj45 = properties41.setProperty("hi!", "{}");
        java.lang.String str47 = properties41.getProperty("tmlog");
        properties41.clear();
        java.util.Set<java.lang.String> strSet49 = properties41.stringPropertyNames();
        properties23.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties41);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties52 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties52.enableLogging = true;
        int int55 = atomikosProperties52.consoleFileLimit;
        atomikosProperties52.logBaseName = "hi!";
        atomikosProperties52.enableLogging = false;
        atomikosProperties52.setMaxTimeout((long) '4');
        atomikosProperties52.setMaxTimeout((long) 1);
        atomikosProperties0.set(properties23, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=-1, 0=INFO}", (java.lang.Object) 1);
        atomikosProperties0.setConsoleFileLimit(10);
        int int67 = atomikosProperties0.getConsoleFileLimit();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "{}");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "{}" + "'", str17, "{}");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{}" + "'", str22, "{}");
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "{}");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "{}" + "'", str31, "{}");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(objCollection42);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 10 + "'", int67 == 10);
    }

    @Test
    public void test04178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04178");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        atomikosProperties0.setLogBaseDir("{}");
        java.util.Properties properties7 = atomikosProperties0.asProperties();
        java.util.Set<java.lang.String> strSet8 = properties7.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int10 = atomikosProperties9.getConsoleFileCount();
        int int11 = atomikosProperties9.maxActives;
        atomikosProperties9.setConsoleFileName("");
        atomikosProperties9.transactionManagerUniqueName = "{}";
        java.util.Properties properties16 = atomikosProperties9.asProperties();
        boolean boolean17 = atomikosProperties9.threadedTwoPhaseCommit;
        atomikosProperties9.enableLogging = true;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int21 = atomikosProperties20.getConsoleFileCount();
        int int22 = atomikosProperties20.maxActives;
        atomikosProperties20.setConsoleFileName("");
        atomikosProperties20.transactionManagerUniqueName = "{}";
        atomikosProperties20.setMaxActives(0);
        boolean boolean29 = atomikosProperties20.forceShutdownOnVmExit;
        java.lang.Object obj30 = properties7.put((java.lang.Object) atomikosProperties9, (java.lang.Object) atomikosProperties20);
        atomikosProperties9.setConsoleFileCount((int) '4');
        java.lang.String str33 = atomikosProperties9.getTransactionManagerUniqueName();
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 50 + "'", int11 == 50);
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 50 + "'", int22 == 50);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "{}" + "'", str33, "{}");
    }

    @Test
    public void test04179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04179");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        atomikosProperties0.setService("");
        atomikosProperties0.service = "tmlog";
        atomikosProperties0.setService("tmlog");
        atomikosProperties0.setService("{}");
        atomikosProperties0.enableLogging = true;
        boolean boolean15 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.setTransactionManagerUniqueName("tm.out");
        atomikosProperties0.setForceShutdownOnVmExit(false);
        int int20 = atomikosProperties0.getMaxActives();
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 50 + "'", int20 == 50);
    }

    @Test
    public void test04180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04180");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        atomikosProperties0.setCheckpointInterval(10000L);
        long long7 = atomikosProperties0.maxTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel8 = org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel8;
        atomikosProperties0.setMaxActives((int) (byte) 1);
        int int12 = atomikosProperties0.consoleFileCount;
        atomikosProperties0.checkpointInterval = 500L;
        int int15 = atomikosProperties0.getConsoleFileCount();
        atomikosProperties0.logBaseName = "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.console_file_count=10, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir={true=10000}, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.output_dir=, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}";
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel8 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO + "'", atomikosLoggingLevel8.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
    }

    @Test
    public void test04181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04181");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.defaultJtaTimeout;
        java.lang.String str2 = atomikosProperties0.getLogBaseName();
        atomikosProperties0.allowSubTransactions = true;
        boolean boolean5 = atomikosProperties0.enableLogging;
        atomikosProperties0.service = "";
        atomikosProperties0.setMaxActives((int) '#');
        atomikosProperties0.setAllowSubTransactions(false);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 10000L + "'", long1 == 10000L);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test04182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04182");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        boolean boolean3 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.allowSubTransactions = false;
        boolean boolean6 = atomikosProperties0.serialJtaTransactions;
        atomikosProperties0.consoleFileName = "{true=10000}";
        java.lang.String str9 = atomikosProperties0.consoleFileName;
        atomikosProperties0.maxActives = 'a';
        atomikosProperties0.checkpointInterval = (byte) 1;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{true=10000}" + "'", str9, "{true=10000}");
    }

    @Test
    public void test04183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04183");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.maxRetries = (-1);
        recovery0.setDelay((long) (short) 0);
        long long5 = recovery0.forgetOrphanedLogEntriesDelay;
        recovery0.retryInterval = 500L;
        recovery0.retryInterval = '4';
        long long10 = recovery0.getRetryInterval();
        long long11 = recovery0.getForgetOrphanedLogEntriesDelay();
        long long12 = recovery0.getDelay();
        recovery0.setDelay((long) '#');
        int int15 = recovery0.maxRetries;
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 86400000L + "'", long5 == 86400000L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 52L + "'", long10 == 52L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 86400000L + "'", long11 == 86400000L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
    }

    @Test
    public void test04184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04184");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        atomikosProperties0.setLogBaseDir("{}");
        java.lang.String str7 = atomikosProperties0.getOutputDir();
        atomikosProperties0.setLogBaseName("hi!");
        atomikosProperties0.setThreadedTwoPhaseCommit(false);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel12 = atomikosProperties0.consoleLogLevel;
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel12 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel12.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
    }

    @Test
    public void test04185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04185");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        long long5 = atomikosProperties0.getMaxTimeout();
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet7 = properties6.keySet();
        atomikosProperties0.set(properties6, "hi!", (java.lang.Object) (-1.0f));
        java.lang.String str11 = atomikosProperties0.logBaseDir;
        atomikosProperties0.outputDir = "hi!";
        java.lang.String str14 = atomikosProperties0.logBaseDir;
        int int15 = atomikosProperties0.consoleFileLimit;
        atomikosProperties0.setTransactionManagerUniqueName("tm.out");
        boolean boolean18 = atomikosProperties0.threadedTwoPhaseCommit;
        atomikosProperties0.setAllowSubTransactions(true);
        boolean boolean21 = atomikosProperties0.forceShutdownOnVmExit;
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertNotNull(objSet7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test04186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04186");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        atomikosProperties0.setCheckpointInterval(10000L);
        long long7 = atomikosProperties0.maxTimeout;
        int int8 = atomikosProperties0.maxActives;
        atomikosProperties0.setCheckpointInterval((long) 0);
        java.util.Properties properties11 = atomikosProperties0.asProperties();
        java.util.Properties properties12 = atomikosProperties0.asProperties();
        int int13 = atomikosProperties0.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties14.logBaseDir = "";
        atomikosProperties14.setConsoleFileCount((int) (short) 10);
        long long19 = atomikosProperties14.getMaxTimeout();
        java.util.Properties properties20 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet21 = properties20.keySet();
        atomikosProperties14.set(properties20, "hi!", (java.lang.Object) (-1.0f));
        java.util.Enumeration<java.lang.Object> objEnumeration25 = properties20.keys();
        int int26 = properties20.size();
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties20.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int30 = atomikosProperties29.getConsoleFileCount();
        int int31 = atomikosProperties29.maxActives;
        java.lang.String str32 = atomikosProperties29.getService();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties33.logBaseDir = "";
        atomikosProperties33.setConsoleFileCount((int) (short) 10);
        atomikosProperties33.setCheckpointInterval(10000L);
        long long40 = atomikosProperties33.maxTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel41 = atomikosProperties33.getConsoleLogLevel();
        atomikosProperties29.consoleLogLevel = atomikosLoggingLevel41;
        atomikosProperties0.set(properties20, "tmlog", (java.lang.Object) atomikosLoggingLevel41);
        java.util.Properties properties44 = atomikosProperties0.asProperties();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 50 + "'", int8 == 50);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNotNull(properties12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 300000L + "'", long19 == 300000L);
        org.junit.Assert.assertNotNull(objSet21);
        org.junit.Assert.assertNotNull(objEnumeration25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 50 + "'", int31 == 50);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 300000L + "'", long40 == 300000L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel41 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel41.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(properties44);
    }

    @Test
    public void test04187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04187");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        long long5 = atomikosProperties0.getMaxTimeout();
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet7 = properties6.keySet();
        atomikosProperties0.set(properties6, "hi!", (java.lang.Object) (-1.0f));
        java.lang.String str11 = atomikosProperties0.logBaseDir;
        java.lang.String str12 = atomikosProperties0.logBaseDir;
        java.lang.String str13 = atomikosProperties0.logBaseDir;
        java.lang.String str14 = atomikosProperties0.getService();
        atomikosProperties0.checkpointInterval = 100L;
        atomikosProperties0.threadedTwoPhaseCommit = false;
        java.lang.String str19 = atomikosProperties0.getService();
        java.lang.String str20 = atomikosProperties0.service;
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        atomikosProperties0.setMaxActives((int) (short) 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertNotNull(objSet7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test04188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04188");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setDefaultJtaTimeout((-1L));
        int int3 = atomikosProperties0.getConsoleFileLimit();
        java.util.Properties properties4 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties5.logBaseDir = "";
        atomikosProperties5.setConsoleFileCount((int) (short) 10);
        long long10 = atomikosProperties5.getMaxTimeout();
        atomikosProperties5.service = "";
        boolean boolean13 = atomikosProperties5.isSerialJtaTransactions();
        atomikosProperties5.setAllowSubTransactions(true);
        java.lang.String str16 = atomikosProperties5.getService();
        java.util.Properties properties17 = new java.util.Properties();
        java.util.Properties properties18 = new java.util.Properties(properties17);
        java.util.Properties properties20 = new java.util.Properties();
        java.lang.Object obj22 = properties20.get((java.lang.Object) 0.0d);
        java.lang.Object obj23 = properties20.clone();
        java.lang.String str24 = properties20.toString();
        boolean boolean27 = properties20.remove((java.lang.Object) 0, (java.lang.Object) 'a');
        java.lang.Object obj28 = properties18.replace((java.lang.Object) 10.0d, (java.lang.Object) properties20);
        java.util.Properties properties29 = new java.util.Properties(properties20);
        java.util.Properties properties30 = new java.util.Properties();
        java.util.Properties properties31 = new java.util.Properties(properties30);
        java.util.Collection<java.lang.Object> objCollection32 = properties30.values();
        int int33 = properties30.size();
        java.util.Enumeration<java.lang.Object> objEnumeration34 = properties30.elements();
        java.util.Properties properties35 = new java.util.Properties(properties30);
        java.lang.Object obj36 = properties35.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int38 = atomikosProperties37.getConsoleFileCount();
        int int39 = atomikosProperties37.maxActives;
        atomikosProperties37.setEnableLogging(false);
        java.util.Properties properties42 = new java.util.Properties();
        java.util.Properties properties43 = new java.util.Properties(properties42);
        java.util.Collection<java.lang.Object> objCollection44 = properties42.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery46 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long47 = recovery46.getRetryInterval();
        recovery46.delay = 10L;
        recovery46.setForgetOrphanedLogEntriesDelay(0L);
        int int52 = recovery46.maxRetries;
        atomikosProperties37.set(properties42, "hi!", (java.lang.Object) recovery46);
        java.util.Set<java.lang.String> strSet54 = properties42.stringPropertyNames();
        boolean boolean55 = properties20.remove(obj36, (java.lang.Object) strSet54);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties56 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties56.logBaseDir = "";
        atomikosProperties56.setConsoleFileCount((int) (short) 10);
        java.lang.String str61 = atomikosProperties56.logBaseName;
        atomikosProperties56.outputDir = "";
        java.util.Properties properties64 = atomikosProperties56.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties65 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties65.logBaseDir = "";
        atomikosProperties65.setConsoleFileCount((int) (short) 10);
        long long70 = atomikosProperties65.getMaxTimeout();
        java.util.Properties properties71 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet72 = properties71.keySet();
        atomikosProperties65.set(properties71, "hi!", (java.lang.Object) (-1.0f));
        java.lang.Object obj78 = properties71.setProperty("", "hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties80 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties80.logBaseDir = "";
        atomikosProperties80.setConsoleFileCount((int) (short) 10);
        atomikosProperties80.setLogBaseDir("{}");
        java.lang.String str87 = atomikosProperties80.getOutputDir();
        atomikosProperties56.set(properties71, "{}", (java.lang.Object) atomikosProperties80);
        java.lang.String str89 = atomikosProperties80.getOutputDir();
        boolean boolean90 = properties4.replace((java.lang.Object) atomikosProperties5, obj36, (java.lang.Object) atomikosProperties80);
        atomikosProperties80.service = "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=10, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=true, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir=, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}";
        java.lang.String str93 = atomikosProperties80.logBaseDir;
        boolean boolean94 = atomikosProperties80.forceShutdownOnVmExit;
        java.lang.String str95 = atomikosProperties80.getLogBaseDir();
        long long96 = atomikosProperties80.getMaxTimeout();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(properties4);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 300000L + "'", long10 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "{}");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "{}" + "'", str24, "{}");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNotNull(objCollection32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(objEnumeration34);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "{}");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 50 + "'", int39 == 50);
        org.junit.Assert.assertNotNull(objCollection44);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 10000L + "'", long47 == 10000L);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 5 + "'", int52 == 5);
        org.junit.Assert.assertNotNull(strSet54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "tmlog" + "'", str61, "tmlog");
        org.junit.Assert.assertNotNull(properties64);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 300000L + "'", long70 == 300000L);
        org.junit.Assert.assertNotNull(objSet72);
        org.junit.Assert.assertNull(obj78);
        org.junit.Assert.assertNull(str87);
        org.junit.Assert.assertNull(str89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "{}" + "'", str93, "{}");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "{}" + "'", str95, "{}");
        org.junit.Assert.assertTrue("'" + long96 + "' != '" + 300000L + "'", long96 == 300000L);
    }

    @Test
    public void test04189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04189");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.enableLogging = true;
        int int3 = atomikosProperties0.consoleFileLimit;
        atomikosProperties0.logBaseName = "hi!";
        boolean boolean6 = atomikosProperties0.isThreadedTwoPhaseCommit();
        boolean boolean7 = atomikosProperties0.enableLogging;
        java.util.Properties properties8 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int10 = atomikosProperties9.getConsoleFileCount();
        int int11 = atomikosProperties9.maxActives;
        java.lang.String str12 = atomikosProperties9.getService();
        int int13 = atomikosProperties9.getConsoleFileCount();
        java.util.Properties properties14 = new java.util.Properties();
        java.util.Properties properties15 = new java.util.Properties(properties14);
        java.util.Collection<java.lang.Object> objCollection16 = properties15.values();
        java.lang.Object obj19 = properties15.setProperty("hi!", "{}");
        java.lang.String str21 = properties15.getProperty("tmlog");
        properties15.clear();
        java.lang.Object obj23 = properties15.clone();
        java.util.Properties properties24 = new java.util.Properties();
        java.util.Properties properties25 = new java.util.Properties(properties24);
        java.util.Collection<java.lang.Object> objCollection26 = properties24.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties27.logBaseDir = "";
        atomikosProperties27.setConsoleFileCount((int) (short) 10);
        atomikosProperties27.setLogBaseDir("{}");
        java.util.Properties properties34 = atomikosProperties27.asProperties();
        atomikosProperties27.service = "";
        atomikosProperties27.setTransactionManagerUniqueName("{}");
        boolean boolean39 = properties24.equals((java.lang.Object) "{}");
        boolean boolean40 = properties8.replace((java.lang.Object) atomikosProperties9, obj23, (java.lang.Object) boolean39);
        java.lang.Object obj41 = properties8.clone();
        java.util.Properties properties42 = new java.util.Properties(properties8);
        java.util.Properties properties43 = new java.util.Properties(properties8);
        java.util.Set<java.lang.Object> objSet44 = properties8.keySet();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 50 + "'", int11 == 50);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(objCollection16);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "{}");
        org.junit.Assert.assertNotNull(objCollection26);
        org.junit.Assert.assertNotNull(properties34);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(obj41);
// flaky:         org.junit.Assert.assertEquals(obj41.toString(), "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=hi!, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=hi!, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=hi!, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        org.junit.Assert.assertNotNull(objSet44);
    }

    @Test
    public void test04190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04190");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setDefaultJtaTimeout((-1L));
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel3 = null;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel3;
        atomikosProperties0.outputDir = "";
        atomikosProperties0.allowSubTransactions = true;
        boolean boolean9 = atomikosProperties0.isThreadedTwoPhaseCommit();
        atomikosProperties0.checkpointInterval = 300000L;
        long long12 = atomikosProperties0.maxTimeout;
        atomikosProperties0.logBaseDir = "hi!";
        java.lang.String str15 = atomikosProperties0.consoleFileName;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery16 = atomikosProperties0.recovery;
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 300000L + "'", long12 == 300000L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "tm.out" + "'", str15, "tm.out");
        org.junit.Assert.assertNotNull(recovery16);
    }

    @Test
    public void test04191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04191");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setDefaultJtaTimeout((-1L));
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel3 = null;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel3;
        atomikosProperties0.outputDir = "";
        java.lang.String str7 = atomikosProperties0.logBaseName;
        atomikosProperties0.setForceShutdownOnVmExit(true);
        boolean boolean10 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.defaultJtaTimeout = 50L;
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "tmlog" + "'", str7, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test04192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04192");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.enableLogging = true;
        long long3 = atomikosProperties0.getCheckpointInterval();
        java.lang.String str4 = atomikosProperties0.getOutputDir();
        java.lang.String str5 = atomikosProperties0.service;
        atomikosProperties0.maxTimeout = 100;
        java.lang.String str8 = atomikosProperties0.outputDir;
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 500L + "'", long3 == 500L);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test04193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04193");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.maxRetries = (-1);
        recovery0.setDelay((long) (short) 0);
        long long5 = recovery0.forgetOrphanedLogEntriesDelay;
        recovery0.retryInterval = 500L;
        recovery0.retryInterval = '4';
        long long10 = recovery0.getRetryInterval();
        long long11 = recovery0.getForgetOrphanedLogEntriesDelay();
        recovery0.retryInterval = 100L;
        recovery0.setDelay((long) (byte) 10);
        long long16 = recovery0.getDelay();
        long long17 = recovery0.delay;
        recovery0.setRetryInterval(21L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 86400000L + "'", long5 == 86400000L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 52L + "'", long10 == 52L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 86400000L + "'", long11 == 86400000L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10L + "'", long16 == 10L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10L + "'", long17 == 10L);
    }

    @Test
    public void test04194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04194");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setDefaultJtaTimeout((-1L));
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel3 = null;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel3;
        atomikosProperties0.outputDir = "";
        int int7 = atomikosProperties0.maxActives;
        boolean boolean8 = atomikosProperties0.isThreadedTwoPhaseCommit();
        atomikosProperties0.consoleFileLimit = (short) 10;
        java.util.Properties properties11 = atomikosProperties0.asProperties();
        java.util.Properties properties12 = new java.util.Properties(properties11);
        java.util.Properties properties13 = new java.util.Properties(properties12);
        java.util.Properties properties14 = new java.util.Properties();
        java.lang.Object obj16 = properties14.get((java.lang.Object) 0.0d);
        java.lang.Object obj17 = properties14.clone();
        java.lang.String str18 = properties14.toString();
        java.util.Properties properties19 = new java.util.Properties(properties14);
        java.util.Enumeration<java.lang.Object> objEnumeration20 = properties19.keys();
        java.util.Collection<java.lang.Object> objCollection21 = properties19.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties22.setDefaultJtaTimeout((-1L));
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel25 = null;
        atomikosProperties22.consoleLogLevel = atomikosLoggingLevel25;
        boolean boolean27 = atomikosProperties22.enableLogging;
        atomikosProperties22.logBaseDir = "{}";
        atomikosProperties22.setSerialJtaTransactions(false);
        boolean boolean32 = atomikosProperties22.isSerialJtaTransactions();
        java.lang.Object obj33 = properties13.putIfAbsent((java.lang.Object) properties19, (java.lang.Object) atomikosProperties22);
        java.util.Properties properties34 = new java.util.Properties();
        java.util.Properties properties35 = new java.util.Properties(properties34);
        java.util.Collection<java.lang.Object> objCollection36 = properties35.values();
        java.util.Properties properties37 = new java.util.Properties();
        java.util.Properties properties38 = new java.util.Properties(properties37);
        java.util.Collection<java.lang.Object> objCollection39 = properties37.values();
        java.util.Enumeration<java.lang.Object> objEnumeration40 = properties37.keys();
        boolean boolean41 = properties35.contains((java.lang.Object) properties37);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties42.enableLogging = true;
        long long45 = atomikosProperties42.getCheckpointInterval();
        java.lang.String str46 = atomikosProperties42.getOutputDir();
        java.lang.String str47 = atomikosProperties42.service;
        java.lang.String str48 = atomikosProperties42.service;
        atomikosProperties42.serialJtaTransactions = false;
        boolean boolean51 = atomikosProperties42.serialJtaTransactions;
        long long52 = atomikosProperties42.getCheckpointInterval();
        long long53 = atomikosProperties42.defaultJtaTimeout;
        boolean boolean54 = atomikosProperties42.threadedTwoPhaseCommit;
        java.lang.Object obj55 = properties19.getOrDefault((java.lang.Object) properties35, (java.lang.Object) atomikosProperties42);
        java.lang.String str56 = atomikosProperties42.getLogBaseName();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "{}");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "{}" + "'", str18, "{}");
        org.junit.Assert.assertNotNull(objEnumeration20);
        org.junit.Assert.assertNotNull(objCollection21);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNotNull(objCollection36);
        org.junit.Assert.assertNotNull(objCollection39);
        org.junit.Assert.assertNotNull(objEnumeration40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 500L + "'", long45 == 500L);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 500L + "'", long52 == 500L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 10000L + "'", long53 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "tmlog" + "'", str56, "tmlog");
    }

    @Test
    public void test04195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04195");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        java.lang.String str5 = atomikosProperties0.logBaseName;
        atomikosProperties0.outputDir = "";
        java.util.Properties properties8 = atomikosProperties0.asProperties();
        java.util.Properties properties9 = atomikosProperties0.asProperties();
        long long10 = atomikosProperties0.defaultJtaTimeout;
        java.lang.String str11 = atomikosProperties0.logBaseName;
        java.lang.String str12 = atomikosProperties0.logBaseName;
        java.util.Properties properties13 = atomikosProperties0.asProperties();
        java.util.Properties properties14 = new java.util.Properties(properties13);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tmlog" + "'", str5, "tmlog");
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "tmlog" + "'", str11, "tmlog");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "tmlog" + "'", str12, "tmlog");
        org.junit.Assert.assertNotNull(properties13);
    }

    @Test
    public void test04196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04196");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.get((java.lang.Object) 0.0d);
        java.lang.Object obj3 = properties0.clone();
        java.lang.String str4 = properties0.toString();
        boolean boolean7 = properties0.remove((java.lang.Object) 0, (java.lang.Object) 'a');
        properties0.clear();
        java.util.Properties properties9 = new java.util.Properties(properties0);
        java.util.Properties properties10 = new java.util.Properties();
        java.util.Properties properties11 = new java.util.Properties(properties10);
        java.util.Collection<java.lang.Object> objCollection12 = properties11.values();
        java.util.Properties properties13 = new java.util.Properties();
        java.util.Properties properties14 = new java.util.Properties(properties13);
        java.util.Collection<java.lang.Object> objCollection15 = properties13.values();
        java.util.Enumeration<java.lang.Object> objEnumeration16 = properties13.keys();
        boolean boolean17 = properties11.contains((java.lang.Object) properties13);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties13);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.enableLogging = true;
        long long22 = atomikosProperties19.getCheckpointInterval();
        atomikosProperties19.setService("tmlog");
        atomikosProperties19.setCheckpointInterval((long) (short) 0);
        long long27 = atomikosProperties19.getCheckpointInterval();
        java.lang.String str28 = atomikosProperties19.getService();
        atomikosProperties19.setMaxActives((int) (short) 100);
        atomikosProperties19.setCheckpointInterval((long) (short) 10);
        java.util.Properties properties33 = new java.util.Properties();
        java.util.Properties properties34 = new java.util.Properties(properties33);
        java.util.Collection<java.lang.Object> objCollection35 = properties34.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties36.enableLogging = true;
        long long39 = atomikosProperties36.getCheckpointInterval();
        boolean boolean41 = properties34.remove((java.lang.Object) long39, (java.lang.Object) (byte) 100);
        boolean boolean43 = properties34.equals((java.lang.Object) (short) 1);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet44 = properties34.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties45 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties45.setDefaultJtaTimeout((-1L));
        long long48 = atomikosProperties45.checkpointInterval;
        boolean boolean49 = atomikosProperties45.forceShutdownOnVmExit;
        atomikosProperties45.setThreadedTwoPhaseCommit(true);
        boolean boolean52 = properties34.contains((java.lang.Object) true);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties53 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties53.logBaseDir = "";
        atomikosProperties53.setConsoleFileCount((int) (short) 10);
        long long58 = atomikosProperties53.getMaxTimeout();
        java.util.Properties properties59 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet60 = properties59.keySet();
        atomikosProperties53.set(properties59, "hi!", (java.lang.Object) (-1.0f));
        java.lang.String str64 = atomikosProperties53.logBaseDir;
        java.lang.String str65 = atomikosProperties53.logBaseDir;
        java.lang.String str66 = atomikosProperties53.logBaseDir;
        boolean boolean67 = atomikosProperties53.isEnableLogging();
        boolean boolean68 = atomikosProperties53.forceShutdownOnVmExit;
        boolean boolean69 = properties34.containsValue((java.lang.Object) atomikosProperties53);
        atomikosProperties53.consoleFileName = "";
        int int72 = atomikosProperties53.maxActives;
        atomikosProperties53.serialJtaTransactions = false;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery75 = atomikosProperties53.recovery;
        java.lang.Object obj76 = properties13.put((java.lang.Object) (short) 10, (java.lang.Object) recovery75);
        java.lang.Object obj79 = properties13.setProperty("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=10, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=true, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir=, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}", "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=10, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir=, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{}" + "'", str4, "{}");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objCollection12);
        org.junit.Assert.assertNotNull(objCollection15);
        org.junit.Assert.assertNotNull(objEnumeration16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 500L + "'", long22 == 500L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "tmlog" + "'", str28, "tmlog");
        org.junit.Assert.assertNotNull(objCollection35);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 500L + "'", long39 == 500L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(objEntrySet44);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 500L + "'", long48 == 500L);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 300000L + "'", long58 == 300000L);
        org.junit.Assert.assertNotNull(objSet60);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 50 + "'", int72 == 50);
        org.junit.Assert.assertNotNull(recovery75);
        org.junit.Assert.assertNull(obj76);
        org.junit.Assert.assertNull(obj79);
    }

    @Test
    public void test04197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04197");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.enableLogging = true;
        int int3 = atomikosProperties0.consoleFileLimit;
        atomikosProperties0.logBaseName = "hi!";
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery6 = atomikosProperties0.getRecovery();
        atomikosProperties0.checkpointInterval = (byte) 100;
        java.lang.String str9 = atomikosProperties0.getTransactionManagerUniqueName();
        java.util.Properties properties10 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties11.logBaseDir = "";
        atomikosProperties11.setConsoleFileCount((int) (short) 10);
        long long16 = atomikosProperties11.getMaxTimeout();
        java.util.Properties properties17 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet18 = properties17.keySet();
        atomikosProperties11.set(properties17, "hi!", (java.lang.Object) (-1.0f));
        java.util.Properties properties22 = new java.util.Properties();
        java.lang.Object obj24 = properties22.get((java.lang.Object) 0.0d);
        java.lang.Object obj25 = properties22.clone();
        java.lang.String str26 = properties22.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties27.logBaseDir = "";
        atomikosProperties27.setConsoleFileCount((int) (short) 10);
        long long32 = atomikosProperties27.getMaxTimeout();
        java.util.Properties properties33 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet34 = properties33.keySet();
        atomikosProperties27.set(properties33, "hi!", (java.lang.Object) (-1.0f));
        java.lang.Object obj40 = properties33.setProperty("", "hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties41.setDefaultJtaTimeout((-1L));
        java.util.Properties properties44 = new java.util.Properties();
        java.lang.Object obj46 = properties44.get((java.lang.Object) 0.0d);
        java.lang.Object obj47 = properties44.clone();
        boolean boolean49 = properties33.replace((java.lang.Object) (-1L), obj47, (java.lang.Object) 100.0d);
        java.util.Properties properties50 = new java.util.Properties();
        java.util.Properties properties51 = new java.util.Properties(properties50);
        properties51.clear();
        properties33.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties51);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties54 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties54.logBaseDir = "";
        atomikosProperties54.setConsoleFileCount((int) (short) 10);
        long long59 = atomikosProperties54.getMaxTimeout();
        java.util.Properties properties60 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet61 = properties60.keySet();
        atomikosProperties54.set(properties60, "hi!", (java.lang.Object) (-1.0f));
        java.lang.String str65 = atomikosProperties54.logBaseDir;
        java.lang.String str66 = atomikosProperties54.logBaseDir;
        java.util.Properties properties67 = atomikosProperties54.asProperties();
        java.lang.Object obj68 = properties22.replace((java.lang.Object) properties51, (java.lang.Object) atomikosProperties54);
        boolean boolean69 = properties17.contains((java.lang.Object) atomikosProperties54);
        java.util.Properties properties70 = new java.util.Properties(properties17);
        java.lang.Object obj73 = properties17.setProperty("tm.out", "{com.atomikos.icatch.hi!=-1.0}");
        boolean boolean74 = properties10.containsValue((java.lang.Object) "{com.atomikos.icatch.hi!=-1.0}");
        java.util.Enumeration<java.lang.Object> objEnumeration75 = properties10.elements();
        java.util.Set<java.lang.Object> objSet76 = properties10.keySet();
        java.util.Collection<java.lang.Object> objCollection77 = properties10.values();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(recovery6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 300000L + "'", long16 == 300000L);
        org.junit.Assert.assertNotNull(objSet18);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "{}");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "{}" + "'", str26, "{}");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 300000L + "'", long32 == 300000L);
        org.junit.Assert.assertNotNull(objSet34);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertEquals(obj47.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj47), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj47), "{}");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 300000L + "'", long59 == 300000L);
        org.junit.Assert.assertNotNull(objSet61);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(properties67);
        org.junit.Assert.assertNull(obj68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(obj73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(objEnumeration75);
        org.junit.Assert.assertNotNull(objSet76);
        org.junit.Assert.assertNotNull(objCollection77);
    }

    @Test
    public void test04198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04198");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        atomikosProperties0.setLogBaseDir("{}");
        java.util.Properties properties7 = atomikosProperties0.asProperties();
        java.util.Set<java.lang.String> strSet8 = properties7.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int10 = atomikosProperties9.getConsoleFileCount();
        int int11 = atomikosProperties9.maxActives;
        atomikosProperties9.setConsoleFileName("");
        atomikosProperties9.transactionManagerUniqueName = "{}";
        java.util.Properties properties16 = atomikosProperties9.asProperties();
        boolean boolean17 = atomikosProperties9.threadedTwoPhaseCommit;
        atomikosProperties9.enableLogging = true;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int21 = atomikosProperties20.getConsoleFileCount();
        int int22 = atomikosProperties20.maxActives;
        atomikosProperties20.setConsoleFileName("");
        atomikosProperties20.transactionManagerUniqueName = "{}";
        atomikosProperties20.setMaxActives(0);
        boolean boolean29 = atomikosProperties20.forceShutdownOnVmExit;
        java.lang.Object obj30 = properties7.put((java.lang.Object) atomikosProperties9, (java.lang.Object) atomikosProperties20);
        java.lang.String str31 = atomikosProperties20.logBaseName;
        atomikosProperties20.logBaseDir = "{com.atomikos.icatch.hi!=-1.0}";
        java.util.Properties properties34 = atomikosProperties20.asProperties();
        boolean boolean35 = atomikosProperties20.serialJtaTransactions;
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 50 + "'", int11 == 50);
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 50 + "'", int22 == 50);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "tmlog" + "'", str31, "tmlog");
        org.junit.Assert.assertNotNull(properties34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test04199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04199");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setDefaultJtaTimeout((-1L));
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel3 = null;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel3;
        long long5 = atomikosProperties0.checkpointInterval;
        java.lang.String str6 = atomikosProperties0.getLogBaseName();
        atomikosProperties0.consoleFileName = "hi!";
        atomikosProperties0.consoleFileCount = (short) 10;
        long long11 = atomikosProperties0.defaultJtaTimeout;
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 500L + "'", long5 == 500L);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
    }

    @Test
    public void test04200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04200");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int1 = atomikosProperties0.getConsoleFileCount();
        int int2 = atomikosProperties0.maxActives;
        atomikosProperties0.setConsoleFileName("");
        atomikosProperties0.transactionManagerUniqueName = "{}";
        java.lang.String str7 = atomikosProperties0.logBaseDir;
        atomikosProperties0.consoleFileLimit = 50;
        boolean boolean10 = atomikosProperties0.threadedTwoPhaseCommit;
        boolean boolean11 = atomikosProperties0.isEnableLogging();
        long long12 = atomikosProperties0.getCheckpointInterval();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 50 + "'", int2 == 50);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 500L + "'", long12 == 500L);
    }

    @Test
    public void test04201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04201");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        atomikosProperties0.setLogBaseDir("{}");
        java.util.Properties properties7 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "";
        boolean boolean10 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.maxActives = (byte) 1;
        java.util.Properties properties13 = atomikosProperties0.asProperties();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet14 = properties13.entrySet();
        java.util.Set<java.lang.Object> objSet15 = properties13.keySet();
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(properties13);
        org.junit.Assert.assertNotNull(objEntrySet14);
        org.junit.Assert.assertNotNull(objSet15);
    }

    @Test
    public void test04202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04202");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet1 = properties0.keySet();
        properties0.clear();
        java.util.Properties properties3 = new java.util.Properties();
        java.lang.Object obj5 = properties3.get((java.lang.Object) 0.0d);
        java.lang.Object obj6 = properties3.clone();
        java.lang.String str7 = properties3.toString();
        boolean boolean10 = properties3.remove((java.lang.Object) 0, (java.lang.Object) 'a');
        properties3.clear();
        java.util.Properties properties12 = new java.util.Properties(properties3);
        java.lang.Object obj13 = properties0.get((java.lang.Object) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties14.logBaseDir = "";
        atomikosProperties14.setConsoleFileCount((int) (short) 10);
        long long19 = atomikosProperties14.getMaxTimeout();
        atomikosProperties14.service = "";
        java.lang.String str22 = atomikosProperties14.logBaseDir;
        atomikosProperties14.logBaseName = "tmlog";
        atomikosProperties14.transactionManagerUniqueName = "{}";
        boolean boolean27 = atomikosProperties14.isForceShutdownOnVmExit();
        java.util.Properties properties28 = atomikosProperties14.asProperties();
        java.util.Properties properties29 = new java.util.Properties(properties28);
        java.util.Enumeration<java.lang.Object> objEnumeration30 = properties29.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties31.enableLogging = true;
        long long34 = atomikosProperties31.getCheckpointInterval();
        java.lang.String str35 = atomikosProperties31.getService();
        java.lang.String str36 = atomikosProperties31.logBaseDir;
        atomikosProperties31.setEnableLogging(false);
        atomikosProperties31.consoleFileCount = 0;
        long long41 = atomikosProperties31.getMaxTimeout();
        int int42 = atomikosProperties31.consoleFileLimit;
        atomikosProperties31.maxActives = 100;
        java.lang.Object obj45 = properties0.putIfAbsent((java.lang.Object) objEnumeration30, (java.lang.Object) 100);
        java.lang.String str46 = properties0.toString();
        java.util.Set<java.lang.String> strSet47 = properties0.stringPropertyNames();
        org.junit.Assert.assertNotNull(objSet1);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "{}");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "{}" + "'", str7, "{}");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 300000L + "'", long19 == 300000L);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(properties28);
        org.junit.Assert.assertNotNull(objEnumeration30);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 500L + "'", long34 == 500L);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 300000L + "'", long41 == 300000L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertNotNull(strSet47);
    }

    @Test
    public void test04203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04203");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long1 = recovery0.getRetryInterval();
        recovery0.delay = 10L;
        recovery0.setForgetOrphanedLogEntriesDelay(0L);
        long long6 = recovery0.getRetryInterval();
        recovery0.delay = 19;
        int int9 = recovery0.maxRetries;
        long long10 = recovery0.delay;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 10000L + "'", long1 == 10000L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5 + "'", int9 == 5);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 19L + "'", long10 == 19L);
    }

    @Test
    public void test04204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04204");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Collection<java.lang.Object> objCollection2 = properties1.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties3 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties3.enableLogging = true;
        long long6 = atomikosProperties3.getCheckpointInterval();
        boolean boolean8 = properties1.remove((java.lang.Object) long6, (java.lang.Object) (byte) 100);
        boolean boolean10 = properties1.equals((java.lang.Object) (short) 1);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet11 = properties1.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setDefaultJtaTimeout((-1L));
        long long15 = atomikosProperties12.checkpointInterval;
        boolean boolean16 = atomikosProperties12.forceShutdownOnVmExit;
        atomikosProperties12.setThreadedTwoPhaseCommit(true);
        boolean boolean19 = properties1.contains((java.lang.Object) true);
        java.util.Properties properties20 = new java.util.Properties(properties1);
        java.util.Properties properties21 = new java.util.Properties(properties1);
        properties21.clear();
        java.util.Properties properties23 = new java.util.Properties();
        java.util.Properties properties24 = new java.util.Properties(properties23);
        java.util.Collection<java.lang.Object> objCollection25 = properties24.values();
        boolean boolean26 = properties24.isEmpty();
        java.util.Set<java.lang.String> strSet27 = properties24.stringPropertyNames();
        java.lang.String str29 = properties24.getProperty("");
        java.util.Properties properties30 = new java.util.Properties();
        java.lang.Object obj32 = properties30.get((java.lang.Object) 0.0d);
        java.lang.Object obj33 = properties30.clone();
        java.lang.String str34 = properties30.toString();
        boolean boolean37 = properties30.remove((java.lang.Object) 0, (java.lang.Object) 'a');
        java.lang.Object obj38 = null;
        boolean boolean39 = properties30.equals(obj38);
        java.util.Set<java.lang.Object> objSet40 = properties30.keySet();
        boolean boolean41 = properties24.contains((java.lang.Object) properties30);
        java.util.Set<java.lang.Object> objSet42 = properties24.keySet();
        java.lang.Class<?> wildcardClass43 = properties24.getClass();
        java.util.Properties properties44 = new java.util.Properties();
        java.util.Properties properties45 = new java.util.Properties(properties44);
        java.util.Properties properties47 = new java.util.Properties();
        java.lang.Object obj49 = properties47.get((java.lang.Object) 0.0d);
        java.lang.Object obj50 = properties47.clone();
        java.lang.String str51 = properties47.toString();
        boolean boolean54 = properties47.remove((java.lang.Object) 0, (java.lang.Object) 'a');
        java.lang.Object obj55 = properties45.replace((java.lang.Object) 10.0d, (java.lang.Object) properties47);
        java.lang.String str56 = properties47.toString();
        java.util.Properties properties57 = new java.util.Properties(properties47);
        java.util.Properties properties58 = new java.util.Properties();
        java.util.Properties properties59 = new java.util.Properties(properties58);
        java.util.Properties properties61 = new java.util.Properties();
        java.lang.Object obj63 = properties61.get((java.lang.Object) 0.0d);
        java.lang.Object obj64 = properties61.clone();
        java.lang.String str65 = properties61.toString();
        boolean boolean68 = properties61.remove((java.lang.Object) 0, (java.lang.Object) 'a');
        java.lang.Object obj69 = properties59.replace((java.lang.Object) 10.0d, (java.lang.Object) properties61);
        java.util.Properties properties70 = new java.util.Properties(properties59);
        properties57.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties70);
        java.util.Properties properties72 = new java.util.Properties(properties70);
        java.lang.Object obj73 = properties21.getOrDefault((java.lang.Object) properties24, (java.lang.Object) properties70);
        org.junit.Assert.assertNotNull(objCollection2);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(objEntrySet11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 500L + "'", long15 == 500L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objCollection25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "{}");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "{}" + "'", str34, "{}");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(objSet40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(objSet42);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertEquals(obj50.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj50), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj50), "{}");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "{}" + "'", str51, "{}");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "{}" + "'", str56, "{}");
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertNotNull(obj64);
        org.junit.Assert.assertEquals(obj64.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj64), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj64), "{}");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "{}" + "'", str65, "{}");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(obj69);
        org.junit.Assert.assertNotNull(obj73);
        org.junit.Assert.assertEquals(obj73.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj73), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj73), "{}");
    }

    @Test
    public void test04205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04205");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties3 = new java.util.Properties();
        java.lang.Object obj5 = properties3.get((java.lang.Object) 0.0d);
        java.lang.Object obj6 = properties3.clone();
        java.lang.String str7 = properties3.toString();
        boolean boolean10 = properties3.remove((java.lang.Object) 0, (java.lang.Object) 'a');
        java.lang.Object obj11 = properties1.replace((java.lang.Object) 10.0d, (java.lang.Object) properties3);
        java.util.Properties properties12 = new java.util.Properties(properties1);
        java.util.Properties properties13 = new java.util.Properties();
        java.util.Properties properties14 = new java.util.Properties(properties13);
        java.util.Collection<java.lang.Object> objCollection15 = properties14.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties16.enableLogging = true;
        long long19 = atomikosProperties16.getCheckpointInterval();
        boolean boolean21 = properties14.remove((java.lang.Object) long19, (java.lang.Object) (byte) 100);
        boolean boolean23 = properties14.equals((java.lang.Object) (short) 1);
        java.util.Properties properties24 = new java.util.Properties(properties14);
        java.lang.Object obj25 = properties12.remove((java.lang.Object) properties24);
        java.lang.Object obj28 = properties24.setProperty("{true=10000}", "{true=10000}");
        java.util.Properties properties29 = new java.util.Properties(properties24);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet30 = properties24.entrySet();
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "{}");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "{}" + "'", str7, "{}");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNotNull(objCollection15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 500L + "'", long19 == 500L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNotNull(objEntrySet30);
    }

    @Test
    public void test04206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04206");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.get((java.lang.Object) 0.0d);
        java.lang.Object obj3 = properties0.clone();
        java.lang.String str4 = properties0.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties5.logBaseDir = "";
        atomikosProperties5.setConsoleFileCount((int) (short) 10);
        long long10 = atomikosProperties5.getMaxTimeout();
        java.util.Properties properties11 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet12 = properties11.keySet();
        atomikosProperties5.set(properties11, "hi!", (java.lang.Object) (-1.0f));
        java.lang.Object obj18 = properties11.setProperty("", "hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setDefaultJtaTimeout((-1L));
        java.util.Properties properties22 = new java.util.Properties();
        java.lang.Object obj24 = properties22.get((java.lang.Object) 0.0d);
        java.lang.Object obj25 = properties22.clone();
        boolean boolean27 = properties11.replace((java.lang.Object) (-1L), obj25, (java.lang.Object) 100.0d);
        java.util.Properties properties28 = new java.util.Properties();
        java.util.Properties properties29 = new java.util.Properties(properties28);
        properties29.clear();
        properties11.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties29);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties32.logBaseDir = "";
        atomikosProperties32.setConsoleFileCount((int) (short) 10);
        long long37 = atomikosProperties32.getMaxTimeout();
        java.util.Properties properties38 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet39 = properties38.keySet();
        atomikosProperties32.set(properties38, "hi!", (java.lang.Object) (-1.0f));
        java.lang.String str43 = atomikosProperties32.logBaseDir;
        java.lang.String str44 = atomikosProperties32.logBaseDir;
        java.util.Properties properties45 = atomikosProperties32.asProperties();
        java.lang.Object obj46 = properties0.replace((java.lang.Object) properties29, (java.lang.Object) atomikosProperties32);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties47 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties47.logBaseDir = "";
        atomikosProperties47.setConsoleFileCount((int) (short) 10);
        long long52 = atomikosProperties47.getMaxTimeout();
        atomikosProperties47.service = "";
        java.lang.String str55 = atomikosProperties47.logBaseDir;
        boolean boolean56 = atomikosProperties47.threadedTwoPhaseCommit;
        java.lang.String str57 = atomikosProperties47.getTransactionManagerUniqueName();
        atomikosProperties47.logBaseName = "tm.out";
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties60 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int61 = atomikosProperties60.getConsoleFileCount();
        int int62 = atomikosProperties60.maxActives;
        atomikosProperties60.setConsoleFileName("");
        boolean boolean65 = atomikosProperties60.forceShutdownOnVmExit;
        long long66 = atomikosProperties60.maxTimeout;
        int int67 = atomikosProperties60.getConsoleFileLimit();
        boolean boolean68 = atomikosProperties60.isAllowSubTransactions();
        boolean boolean69 = properties0.remove((java.lang.Object) "tm.out", (java.lang.Object) atomikosProperties60);
        atomikosProperties60.setForceShutdownOnVmExit(false);
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{}" + "'", str4, "{}");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 300000L + "'", long10 == 300000L);
        org.junit.Assert.assertNotNull(objSet12);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "{}");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 300000L + "'", long37 == 300000L);
        org.junit.Assert.assertNotNull(objSet39);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(properties45);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 300000L + "'", long52 == 300000L);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 50 + "'", int62 == 50);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 300000L + "'", long66 == 300000L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test04207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04207");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.maxRetries = (-1);
        recovery0.setDelay((long) (short) 1);
        long long5 = recovery0.getForgetOrphanedLogEntriesDelay();
        int int6 = recovery0.maxRetries;
        recovery0.setRetryInterval((long) (byte) 100);
        long long9 = recovery0.getDelay();
        recovery0.retryInterval = 5;
        long long12 = recovery0.getRetryInterval();
        recovery0.delay = 20;
        int int15 = recovery0.getMaxRetries();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 86400000L + "'", long5 == 86400000L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 5L + "'", long12 == 5L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
    }

    @Test
    public void test04208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04208");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        long long5 = atomikosProperties0.getMaxTimeout();
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet7 = properties6.keySet();
        atomikosProperties0.set(properties6, "hi!", (java.lang.Object) (-1.0f));
        atomikosProperties0.setConsoleFileLimit((int) (short) 100);
        atomikosProperties0.setForceShutdownOnVmExit(false);
        java.lang.String str15 = atomikosProperties0.logBaseName;
        atomikosProperties0.transactionManagerUniqueName = "hi!";
        boolean boolean18 = atomikosProperties0.isEnableLogging();
        java.lang.String str19 = atomikosProperties0.logBaseDir;
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertNotNull(objSet7);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "tmlog" + "'", str15, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test04209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04209");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long1 = recovery0.getRetryInterval();
        recovery0.delay = 10L;
        recovery0.setForgetOrphanedLogEntriesDelay(0L);
        long long6 = recovery0.getDelay();
        long long7 = recovery0.delay;
        int int8 = recovery0.getMaxRetries();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 10000L + "'", long1 == 10000L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10L + "'", long7 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 5 + "'", int8 == 5);
    }

    @Test
    public void test04210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04210");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setDefaultJtaTimeout((-1L));
        int int3 = atomikosProperties0.getConsoleFileLimit();
        atomikosProperties0.setCheckpointInterval((long) '#');
        java.lang.String str6 = atomikosProperties0.logBaseName;
        java.lang.String str7 = atomikosProperties0.getOutputDir();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test04211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04211");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int1 = atomikosProperties0.getConsoleFileCount();
        int int2 = atomikosProperties0.maxActives;
        atomikosProperties0.setConsoleFileName("");
        java.lang.String str5 = atomikosProperties0.getOutputDir();
        atomikosProperties0.setConsoleFileName("");
        atomikosProperties0.serialJtaTransactions = true;
        atomikosProperties0.enableLogging = false;
        java.util.Properties properties12 = atomikosProperties0.asProperties();
        atomikosProperties0.defaultJtaTimeout = (byte) 1;
        atomikosProperties0.outputDir = "hi!";
        java.lang.String str17 = atomikosProperties0.service;
        int int18 = atomikosProperties0.getConsoleFileLimit();
        atomikosProperties0.outputDir = "{true=10000}";
        java.lang.String str21 = atomikosProperties0.getLogBaseDir();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 50 + "'", int2 == 50);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(properties12);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test04212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04212");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        atomikosProperties0.setLogBaseDir("{}");
        java.util.Properties properties7 = atomikosProperties0.asProperties();
        java.util.Set<java.lang.String> strSet8 = properties7.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int10 = atomikosProperties9.getConsoleFileCount();
        int int11 = atomikosProperties9.maxActives;
        atomikosProperties9.setConsoleFileName("");
        atomikosProperties9.transactionManagerUniqueName = "{}";
        java.util.Properties properties16 = atomikosProperties9.asProperties();
        boolean boolean17 = atomikosProperties9.threadedTwoPhaseCommit;
        atomikosProperties9.enableLogging = true;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int21 = atomikosProperties20.getConsoleFileCount();
        int int22 = atomikosProperties20.maxActives;
        atomikosProperties20.setConsoleFileName("");
        atomikosProperties20.transactionManagerUniqueName = "{}";
        atomikosProperties20.setMaxActives(0);
        boolean boolean29 = atomikosProperties20.forceShutdownOnVmExit;
        java.lang.Object obj30 = properties7.put((java.lang.Object) atomikosProperties9, (java.lang.Object) atomikosProperties20);
        atomikosProperties20.logBaseName = "{com.atomikos.icatch.hi!=-1.0}";
        atomikosProperties20.serialJtaTransactions = true;
        atomikosProperties20.setConsoleFileLimit((int) (short) 10);
        atomikosProperties20.setConsoleFileCount((int) '4');
        boolean boolean39 = atomikosProperties20.isAllowSubTransactions();
        atomikosProperties20.setLogBaseDir("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=10, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir=, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        java.lang.String str42 = atomikosProperties20.consoleFileName;
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 50 + "'", int11 == 50);
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 50 + "'", int22 == 50);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
    }

    @Test
    public void test04213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04213");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties3 = new java.util.Properties();
        java.lang.Object obj5 = properties3.get((java.lang.Object) 0.0d);
        java.lang.Object obj6 = properties3.clone();
        java.lang.String str7 = properties3.toString();
        boolean boolean10 = properties3.remove((java.lang.Object) 0, (java.lang.Object) 'a');
        java.lang.Object obj11 = properties1.replace((java.lang.Object) 10.0d, (java.lang.Object) properties3);
        java.util.Properties properties12 = new java.util.Properties(properties3);
        java.util.Properties properties13 = new java.util.Properties(properties12);
        java.util.Properties properties14 = new java.util.Properties(properties12);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int16 = atomikosProperties15.getConsoleFileCount();
        int int17 = atomikosProperties15.maxActives;
        atomikosProperties15.setConsoleFileName("");
        java.lang.String str20 = atomikosProperties15.getOutputDir();
        int int21 = atomikosProperties15.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery22 = atomikosProperties15.getRecovery();
        boolean boolean23 = properties12.containsKey((java.lang.Object) recovery22);
        recovery22.maxRetries = 1;
        long long26 = recovery22.getForgetOrphanedLogEntriesDelay();
        long long27 = recovery22.getForgetOrphanedLogEntriesDelay();
        int int28 = recovery22.getMaxRetries();
        recovery22.setMaxRetries(97);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "{}");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "{}" + "'", str7, "{}");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 50 + "'", int17 == 50);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(recovery22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 86400000L + "'", long26 == 86400000L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 86400000L + "'", long27 == 86400000L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
    }

    @Test
    public void test04214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04214");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        java.lang.String str5 = atomikosProperties0.logBaseName;
        atomikosProperties0.outputDir = "";
        java.util.Properties properties8 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties9.logBaseDir = "";
        atomikosProperties9.setConsoleFileCount((int) (short) 10);
        long long14 = atomikosProperties9.getMaxTimeout();
        atomikosProperties9.setSerialJtaTransactions(true);
        java.util.Properties properties17 = atomikosProperties9.asProperties();
        int int18 = atomikosProperties9.getConsoleFileLimit();
        java.lang.Object obj19 = properties8.get((java.lang.Object) int18);
        java.util.Properties properties20 = new java.util.Properties(properties8);
        java.lang.Object obj21 = properties8.clone();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tmlog" + "'", str5, "tmlog");
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 300000L + "'", long14 == 300000L);
        org.junit.Assert.assertNotNull(properties17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNotNull(obj21);
// flaky:         org.junit.Assert.assertEquals(obj21.toString(), "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.console_file_count=10, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir=, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.output_dir=, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.console_file_count=10, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir=, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.output_dir=, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.console_file_count=10, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir=, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.output_dir=, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
    }

    @Test
    public void test04215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04215");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Collection<java.lang.Object> objCollection2 = properties1.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties3 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties3.enableLogging = true;
        long long6 = atomikosProperties3.getCheckpointInterval();
        boolean boolean8 = properties1.remove((java.lang.Object) long6, (java.lang.Object) (byte) 100);
        boolean boolean10 = properties1.equals((java.lang.Object) (short) 1);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet11 = properties1.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setDefaultJtaTimeout((-1L));
        long long15 = atomikosProperties12.checkpointInterval;
        boolean boolean16 = atomikosProperties12.forceShutdownOnVmExit;
        atomikosProperties12.setThreadedTwoPhaseCommit(true);
        boolean boolean19 = properties1.contains((java.lang.Object) true);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties20.logBaseDir = "";
        atomikosProperties20.setConsoleFileCount((int) (short) 10);
        long long25 = atomikosProperties20.getMaxTimeout();
        java.util.Properties properties26 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet27 = properties26.keySet();
        atomikosProperties20.set(properties26, "hi!", (java.lang.Object) (-1.0f));
        java.lang.String str31 = atomikosProperties20.logBaseDir;
        java.lang.String str32 = atomikosProperties20.logBaseDir;
        java.lang.String str33 = atomikosProperties20.logBaseDir;
        boolean boolean34 = atomikosProperties20.isEnableLogging();
        boolean boolean35 = atomikosProperties20.forceShutdownOnVmExit;
        boolean boolean36 = properties1.containsValue((java.lang.Object) atomikosProperties20);
        boolean boolean37 = properties1.isEmpty();
        java.util.Properties properties38 = new java.util.Properties(properties1);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties39 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties39.logBaseDir = "";
        atomikosProperties39.setConsoleFileCount((int) (short) 10);
        long long44 = atomikosProperties39.getMaxTimeout();
        java.util.Properties properties45 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet46 = properties45.keySet();
        atomikosProperties39.set(properties45, "hi!", (java.lang.Object) (-1.0f));
        java.util.Enumeration<java.lang.Object> objEnumeration50 = properties45.keys();
        java.util.Properties properties51 = new java.util.Properties(properties45);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties52 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties52.logBaseDir = "";
        atomikosProperties52.setConsoleFileCount((int) (short) 10);
        atomikosProperties52.setLogBaseDir("{}");
        java.lang.String str59 = atomikosProperties52.getOutputDir();
        atomikosProperties52.setLogBaseName("hi!");
        boolean boolean62 = atomikosProperties52.isAllowSubTransactions();
        int int63 = atomikosProperties52.consoleFileCount;
        atomikosProperties52.setLogBaseDir("tm.out");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties66 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties66.logBaseDir = "";
        atomikosProperties66.setConsoleFileCount((int) (short) 10);
        long long71 = atomikosProperties66.getMaxTimeout();
        boolean boolean72 = atomikosProperties66.enableLogging;
        java.lang.String str73 = atomikosProperties66.logBaseDir;
        boolean boolean74 = properties1.replace((java.lang.Object) properties45, (java.lang.Object) "tm.out", (java.lang.Object) str73);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet75 = properties45.entrySet();
        java.io.InputStream inputStream76 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties45.load(inputStream76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection2);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(objEntrySet11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 500L + "'", long15 == 500L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 300000L + "'", long25 == 300000L);
        org.junit.Assert.assertNotNull(objSet27);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 300000L + "'", long44 == 300000L);
        org.junit.Assert.assertNotNull(objSet46);
        org.junit.Assert.assertNotNull(objEnumeration50);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 300000L + "'", long71 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(objEntrySet75);
    }

    @Test
    public void test04216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04216");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        long long5 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.service = "";
        java.lang.String str8 = atomikosProperties0.logBaseDir;
        atomikosProperties0.logBaseName = "tmlog";
        atomikosProperties0.transactionManagerUniqueName = "{}";
        boolean boolean13 = atomikosProperties0.isForceShutdownOnVmExit();
        java.util.Properties properties14 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties15.logBaseDir = "";
        atomikosProperties15.setConsoleFileCount((int) (short) 10);
        long long20 = atomikosProperties15.getMaxTimeout();
        java.util.Properties properties21 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet22 = properties21.keySet();
        atomikosProperties15.set(properties21, "hi!", (java.lang.Object) (-1.0f));
        java.util.Enumeration<java.lang.Object> objEnumeration26 = properties21.keys();
        int int27 = properties21.size();
        java.util.Enumeration<java.lang.Object> objEnumeration28 = properties21.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery30 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery30.maxRetries = (-1);
        recovery30.setDelay((long) (short) 0);
        recovery30.maxRetries = 0;
        atomikosProperties0.set(properties21, "tmlog", (java.lang.Object) recovery30);
        atomikosProperties0.setAllowSubTransactions(false);
        atomikosProperties0.setLogBaseName("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=10, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir=, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery42 = atomikosProperties0.getRecovery();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 300000L + "'", long20 == 300000L);
        org.junit.Assert.assertNotNull(objSet22);
        org.junit.Assert.assertNotNull(objEnumeration26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(objEnumeration28);
        org.junit.Assert.assertNotNull(recovery42);
    }

    @Test
    public void test04217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04217");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.get((java.lang.Object) 0.0d);
        java.lang.Object obj3 = properties0.clone();
        java.lang.Object obj6 = properties0.setProperty("{}", "{}");
        java.lang.Object obj9 = properties0.setProperty("{com.atomikos.icatch.hi!=-1.0}", "");
        java.util.Properties properties10 = new java.util.Properties(properties0);
        java.io.InputStream inputStream11 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.loadFromXML(inputStream11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj9);
    }

    @Test
    public void test04218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04218");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Collection<java.lang.Object> objCollection2 = properties1.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties3 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties3.enableLogging = true;
        long long6 = atomikosProperties3.getCheckpointInterval();
        boolean boolean8 = properties1.remove((java.lang.Object) long6, (java.lang.Object) (byte) 100);
        boolean boolean10 = properties1.equals((java.lang.Object) (short) 1);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet11 = properties1.entrySet();
        java.lang.Object obj12 = properties1.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties13.logBaseDir = "";
        atomikosProperties13.setConsoleFileCount((int) (short) 10);
        long long18 = atomikosProperties13.getMaxTimeout();
        java.util.Properties properties19 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet20 = properties19.keySet();
        atomikosProperties13.set(properties19, "hi!", (java.lang.Object) (-1.0f));
        java.lang.String str24 = atomikosProperties13.logBaseDir;
        boolean boolean25 = atomikosProperties13.enableLogging;
        int int26 = atomikosProperties13.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties28.logBaseDir = "";
        atomikosProperties28.setConsoleFileCount((int) (short) 10);
        java.lang.String str33 = atomikosProperties28.logBaseName;
        atomikosProperties28.outputDir = "";
        java.util.Properties properties36 = atomikosProperties28.asProperties();
        atomikosProperties28.setConsoleFileLimit(1);
        boolean boolean39 = properties1.replace((java.lang.Object) int26, (java.lang.Object) 100.0f, (java.lang.Object) 1);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties40.logBaseDir = "";
        atomikosProperties40.setConsoleFileCount((int) (short) 10);
        atomikosProperties40.setLogBaseDir("{}");
        boolean boolean47 = atomikosProperties40.isSerialJtaTransactions();
        boolean boolean48 = atomikosProperties40.allowSubTransactions;
        atomikosProperties40.consoleFileLimit = 50;
        atomikosProperties40.maxActives = (-1);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel53 = atomikosProperties40.consoleLogLevel;
        boolean boolean54 = properties1.equals((java.lang.Object) atomikosProperties40);
        java.lang.String str55 = properties1.toString();
        org.junit.Assert.assertNotNull(objCollection2);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(objEntrySet11);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "{}");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 300000L + "'", long18 == 300000L);
        org.junit.Assert.assertNotNull(objSet20);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 50 + "'", int26 == 50);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "tmlog" + "'", str33, "tmlog");
        org.junit.Assert.assertNotNull(properties36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel53 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel53.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "{}" + "'", str55, "{}");
    }

    @Test
    public void test04219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04219");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        java.lang.String str5 = atomikosProperties0.logBaseName;
        atomikosProperties0.outputDir = "";
        java.util.Properties properties8 = atomikosProperties0.asProperties();
        long long9 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = atomikosProperties0.recovery;
        recovery10.setMaxRetries((int) (short) -1);
        int int13 = recovery10.maxRetries;
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tmlog" + "'", str5, "tmlog");
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10000L + "'", long9 == 10000L);
        org.junit.Assert.assertNotNull(recovery10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
    }

    @Test
    public void test04220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04220");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setDefaultJtaTimeout((-1L));
        int int3 = atomikosProperties0.getConsoleFileLimit();
        java.util.Properties properties4 = atomikosProperties0.asProperties();
        boolean boolean5 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.setCheckpointInterval(10000L);
        atomikosProperties0.maxActives = 50;
        atomikosProperties0.setEnableLogging(false);
        atomikosProperties0.setOutputDir("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=-1, 0=INFO}");
        long long14 = atomikosProperties0.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery15 = atomikosProperties0.recovery;
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(properties4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10000L + "'", long14 == 10000L);
        org.junit.Assert.assertNotNull(recovery15);
    }

    @Test
    public void test04221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04221");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.enableLogging = true;
        int int3 = atomikosProperties0.consoleFileLimit;
        atomikosProperties0.logBaseName = "hi!";
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int7 = atomikosProperties6.getConsoleFileCount();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties8.logBaseDir = "";
        atomikosProperties8.setConsoleFileCount((int) (short) 10);
        atomikosProperties8.setCheckpointInterval(10000L);
        long long15 = atomikosProperties8.maxTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel16 = org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO;
        atomikosProperties8.consoleLogLevel = atomikosLoggingLevel16;
        atomikosProperties6.consoleLogLevel = atomikosLoggingLevel16;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel16;
        atomikosProperties0.checkpointInterval = 35;
        boolean boolean22 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.setLogBaseDir("{com.atomikos.icatch.console_file_name=, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name={}, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 300000L + "'", long15 == 300000L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel16 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO + "'", atomikosLoggingLevel16.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test04222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04222");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        boolean boolean3 = atomikosProperties0.isForceShutdownOnVmExit();
        int int4 = atomikosProperties0.consoleFileLimit;
        atomikosProperties0.consoleFileCount = 100;
        boolean boolean7 = atomikosProperties0.threadedTwoPhaseCommit;
        atomikosProperties0.enableLogging = true;
        long long10 = atomikosProperties0.checkpointInterval;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 500L + "'", long10 == 500L);
    }

    @Test
    public void test04223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04223");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        atomikosProperties0.setLogBaseDir("{}");
        java.lang.String str7 = atomikosProperties0.getOutputDir();
        atomikosProperties0.setLogBaseName("hi!");
        boolean boolean10 = atomikosProperties0.isAllowSubTransactions();
        boolean boolean11 = atomikosProperties0.isThreadedTwoPhaseCommit();
        boolean boolean12 = atomikosProperties0.forceShutdownOnVmExit;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery13 = atomikosProperties0.getRecovery();
        long long14 = recovery13.getForgetOrphanedLogEntriesDelay();
        long long15 = recovery13.getRetryInterval();
        recovery13.maxRetries = (short) 10;
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(recovery13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 86400000L + "'", long14 == 86400000L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10000L + "'", long15 == 10000L);
    }

    @Test
    public void test04224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04224");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Collection<java.lang.Object> objCollection2 = properties0.values();
        int int3 = properties0.size();
        boolean boolean4 = properties0.isEmpty();
        java.lang.Object obj5 = properties0.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties6.enableLogging = true;
        int int9 = atomikosProperties6.consoleFileLimit;
        atomikosProperties6.logBaseName = "hi!";
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery12 = atomikosProperties6.getRecovery();
        recovery12.setDelay((long) (byte) -1);
        long long15 = recovery12.retryInterval;
        long long16 = recovery12.forgetOrphanedLogEntriesDelay;
        boolean boolean17 = properties0.contains((java.lang.Object) recovery12);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery18 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery18.maxRetries = (-1);
        recovery18.retryInterval = 10000L;
        recovery18.setMaxRetries((int) 'a');
        boolean boolean25 = properties0.containsValue((java.lang.Object) 'a');
        java.io.OutputStream outputStream26 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.save(outputStream26, "{{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=10, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir=, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}={com.atomikos.icatch.hi!=-1.0, =hi!}}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(recovery12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10000L + "'", long15 == 10000L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 86400000L + "'", long16 == 86400000L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test04225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04225");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setDefaultJtaTimeout((-1L));
        int int3 = atomikosProperties0.getConsoleFileLimit();
        java.util.Properties properties4 = atomikosProperties0.asProperties();
        java.lang.String str5 = atomikosProperties0.getService();
        long long6 = atomikosProperties0.getDefaultJtaTimeout();
        java.util.Properties properties7 = atomikosProperties0.asProperties();
        atomikosProperties0.setCheckpointInterval((long) ' ');
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(properties4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(properties7);
    }

    @Test
    public void test04226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04226");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setDefaultJtaTimeout((-1L));
        long long3 = atomikosProperties0.checkpointInterval;
        java.lang.String str4 = atomikosProperties0.getLogBaseName();
        atomikosProperties0.consoleFileLimit = (short) 10;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties7.logBaseDir = "";
        atomikosProperties7.setConsoleFileCount((int) (short) 10);
        atomikosProperties7.setLogBaseDir("{}");
        java.util.Properties properties14 = atomikosProperties7.asProperties();
        atomikosProperties7.service = "";
        atomikosProperties7.setTransactionManagerUniqueName("{}");
        atomikosProperties7.enableLogging = false;
        long long21 = atomikosProperties7.getMaxTimeout();
        atomikosProperties7.setCheckpointInterval(0L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties24.logBaseDir = "";
        atomikosProperties24.setConsoleFileCount((int) (short) 10);
        atomikosProperties24.setLogBaseDir("{}");
        boolean boolean31 = atomikosProperties24.isSerialJtaTransactions();
        boolean boolean32 = atomikosProperties24.allowSubTransactions;
        atomikosProperties24.consoleFileLimit = 50;
        atomikosProperties24.maxActives = (-1);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel37 = atomikosProperties24.getConsoleLogLevel();
        atomikosProperties7.consoleLogLevel = atomikosLoggingLevel37;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel37;
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 500L + "'", long3 == 500L);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tmlog" + "'", str4, "tmlog");
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 300000L + "'", long21 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel37 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel37.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
    }

    @Test
    public void test04227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04227");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.enableLogging = true;
        int int3 = atomikosProperties0.consoleFileLimit;
        atomikosProperties0.logBaseName = "hi!";
        boolean boolean6 = atomikosProperties0.isThreadedTwoPhaseCommit();
        boolean boolean7 = atomikosProperties0.enableLogging;
        java.util.Properties properties8 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int10 = atomikosProperties9.getConsoleFileCount();
        int int11 = atomikosProperties9.maxActives;
        java.lang.String str12 = atomikosProperties9.getService();
        int int13 = atomikosProperties9.getConsoleFileCount();
        java.util.Properties properties14 = new java.util.Properties();
        java.util.Properties properties15 = new java.util.Properties(properties14);
        java.util.Collection<java.lang.Object> objCollection16 = properties15.values();
        java.lang.Object obj19 = properties15.setProperty("hi!", "{}");
        java.lang.String str21 = properties15.getProperty("tmlog");
        properties15.clear();
        java.lang.Object obj23 = properties15.clone();
        java.util.Properties properties24 = new java.util.Properties();
        java.util.Properties properties25 = new java.util.Properties(properties24);
        java.util.Collection<java.lang.Object> objCollection26 = properties24.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties27.logBaseDir = "";
        atomikosProperties27.setConsoleFileCount((int) (short) 10);
        atomikosProperties27.setLogBaseDir("{}");
        java.util.Properties properties34 = atomikosProperties27.asProperties();
        atomikosProperties27.service = "";
        atomikosProperties27.setTransactionManagerUniqueName("{}");
        boolean boolean39 = properties24.equals((java.lang.Object) "{}");
        boolean boolean40 = properties8.replace((java.lang.Object) atomikosProperties9, obj23, (java.lang.Object) boolean39);
        atomikosProperties9.service = "tm.out";
        boolean boolean43 = atomikosProperties9.serialJtaTransactions;
        long long44 = atomikosProperties9.defaultJtaTimeout;
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 50 + "'", int11 == 50);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(objCollection16);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "{}");
        org.junit.Assert.assertNotNull(objCollection26);
        org.junit.Assert.assertNotNull(properties34);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 10000L + "'", long44 == 10000L);
    }

    @Test
    public void test04228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04228");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int1 = atomikosProperties0.getConsoleFileCount();
        int int2 = atomikosProperties0.maxActives;
        atomikosProperties0.setConsoleFileName("");
        atomikosProperties0.transactionManagerUniqueName = "{}";
        java.util.Properties properties7 = atomikosProperties0.asProperties();
        atomikosProperties0.setConsoleFileLimit((int) (short) -1);
        java.lang.String str10 = atomikosProperties0.outputDir;
        java.util.Properties properties11 = atomikosProperties0.asProperties();
        java.io.InputStream inputStream12 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties11.load(inputStream12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 50 + "'", int2 == 50);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(properties11);
    }

    @Test
    public void test04229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04229");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.enableLogging = true;
        long long3 = atomikosProperties0.getCheckpointInterval();
        atomikosProperties0.setService("tmlog");
        atomikosProperties0.setConsoleFileName("{}");
        java.lang.String str8 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.transactionManagerUniqueName = "{com.atomikos.icatch.hi!=-1.0}";
        boolean boolean11 = atomikosProperties0.threadedTwoPhaseCommit;
        atomikosProperties0.setLogBaseDir("tmlog");
        int int14 = atomikosProperties0.consoleFileCount;
        boolean boolean15 = atomikosProperties0.isSerialJtaTransactions();
        java.lang.String str16 = atomikosProperties0.getService();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 500L + "'", long3 == 500L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{}" + "'", str8, "{}");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tmlog" + "'", str16, "tmlog");
    }

    @Test
    public void test04230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04230");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        long long5 = atomikosProperties0.getMaxTimeout();
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet7 = properties6.keySet();
        atomikosProperties0.set(properties6, "hi!", (java.lang.Object) (-1.0f));
        java.lang.Object obj13 = properties6.setProperty("", "hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties14.setDefaultJtaTimeout((-1L));
        java.util.Properties properties17 = new java.util.Properties();
        java.lang.Object obj19 = properties17.get((java.lang.Object) 0.0d);
        java.lang.Object obj20 = properties17.clone();
        boolean boolean22 = properties6.replace((java.lang.Object) (-1L), obj20, (java.lang.Object) 100.0d);
        java.util.Properties properties23 = new java.util.Properties();
        java.util.Properties properties24 = new java.util.Properties(properties23);
        properties24.clear();
        properties6.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties24);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties24.elements();
        java.lang.String str29 = properties24.getProperty("");
        java.util.Properties properties30 = new java.util.Properties();
        java.lang.Object obj32 = properties30.get((java.lang.Object) 0.0d);
        java.lang.Object obj33 = properties30.clone();
        java.lang.String str34 = properties30.toString();
        boolean boolean36 = properties24.remove((java.lang.Object) properties30, (java.lang.Object) 0);
        java.util.Enumeration<?> wildcardEnumeration37 = properties24.propertyNames();
        java.util.Properties properties38 = new java.util.Properties(properties24);
        java.util.Properties properties39 = new java.util.Properties(properties24);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties40.logBaseDir = "";
        atomikosProperties40.setConsoleFileCount((int) (short) 10);
        long long45 = atomikosProperties40.getMaxTimeout();
        java.util.Properties properties46 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet47 = properties46.keySet();
        atomikosProperties40.set(properties46, "hi!", (java.lang.Object) (-1.0f));
        java.lang.String str51 = atomikosProperties40.service;
        atomikosProperties40.setSerialJtaTransactions(false);
        int int54 = atomikosProperties40.consoleFileLimit;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties55 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties55.logBaseDir = "";
        atomikosProperties55.setConsoleFileCount((int) (short) 10);
        java.lang.String str60 = atomikosProperties55.transactionManagerUniqueName;
        long long61 = atomikosProperties55.getDefaultJtaTimeout();
        long long62 = atomikosProperties55.checkpointInterval;
        int int63 = atomikosProperties55.getConsoleFileCount();
        java.lang.Object obj64 = properties39.put((java.lang.Object) atomikosProperties40, (java.lang.Object) atomikosProperties55);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel65 = atomikosProperties40.getConsoleLogLevel();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery66 = atomikosProperties40.getRecovery();
        atomikosProperties40.setOutputDir("{}");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertNotNull(objSet7);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{}");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "{}");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "{}" + "'", str34, "{}");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(wildcardEnumeration37);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 300000L + "'", long45 == 300000L);
        org.junit.Assert.assertNotNull(objSet47);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 10000L + "'", long61 == 10000L);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 500L + "'", long62 == 500L);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
        org.junit.Assert.assertNull(obj64);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel65 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel65.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(recovery66);
    }

    @Test
    public void test04231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04231");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.enableLogging = true;
        int int3 = atomikosProperties0.consoleFileLimit;
        atomikosProperties0.logBaseName = "hi!";
        atomikosProperties0.setEnableLogging(false);
        atomikosProperties0.setTransactionManagerUniqueName("");
        atomikosProperties0.forceShutdownOnVmExit = true;
        java.lang.String str12 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.maxActives = (byte) 1;
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "tm.out" + "'", str12, "tm.out");
    }

    @Test
    public void test04232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04232");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.enableLogging = true;
        long long3 = atomikosProperties0.getCheckpointInterval();
        java.lang.String str4 = atomikosProperties0.getService();
        java.lang.String str5 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setEnableLogging(false);
        atomikosProperties0.consoleFileCount = 0;
        long long10 = atomikosProperties0.getMaxTimeout();
        boolean boolean11 = atomikosProperties0.isEnableLogging();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel12 = atomikosProperties0.consoleLogLevel;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel13 = atomikosProperties0.getConsoleLogLevel();
        atomikosProperties0.defaultJtaTimeout = 1L;
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 500L + "'", long3 == 500L);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 300000L + "'", long10 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel12 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel12.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel13 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel13.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
    }

    @Test
    public void test04233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04233");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int1 = atomikosProperties0.getConsoleFileCount();
        int int2 = atomikosProperties0.maxActives;
        atomikosProperties0.setEnableLogging(false);
        atomikosProperties0.threadedTwoPhaseCommit = true;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties7.enableLogging = true;
        long long10 = atomikosProperties7.getCheckpointInterval();
        java.lang.String str11 = atomikosProperties7.getService();
        java.lang.String str12 = atomikosProperties7.logBaseDir;
        atomikosProperties7.setEnableLogging(false);
        atomikosProperties7.consoleFileCount = 0;
        long long17 = atomikosProperties7.getMaxTimeout();
        boolean boolean18 = atomikosProperties7.isEnableLogging();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel19 = atomikosProperties7.consoleLogLevel;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel19;
        int int21 = atomikosProperties0.consoleFileLimit;
        atomikosProperties0.consoleFileLimit = (byte) 10;
        long long24 = atomikosProperties0.getDefaultJtaTimeout();
        int int25 = atomikosProperties0.maxActives;
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 50 + "'", int2 == 50);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 500L + "'", long10 == 500L);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 300000L + "'", long17 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel19 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel19.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 10000L + "'", long24 == 10000L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 50 + "'", int25 == 50);
    }

    @Test
    public void test04234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04234");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        long long5 = atomikosProperties0.getMaxTimeout();
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet7 = properties6.keySet();
        atomikosProperties0.set(properties6, "hi!", (java.lang.Object) (-1.0f));
        java.lang.String str11 = atomikosProperties0.service;
        java.lang.String str12 = atomikosProperties0.outputDir;
        atomikosProperties0.setConsoleFileLimit(19);
        atomikosProperties0.forceShutdownOnVmExit = true;
        atomikosProperties0.setCheckpointInterval(0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertNotNull(objSet7);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test04235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04235");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.get((java.lang.Object) 0.0d);
        java.lang.Object obj3 = properties0.clone();
        java.lang.String str4 = properties0.toString();
        boolean boolean7 = properties0.remove((java.lang.Object) 0, (java.lang.Object) 'a');
        java.lang.Object obj8 = null;
        boolean boolean9 = properties0.equals(obj8);
        java.util.Set<java.lang.Object> objSet10 = properties0.keySet();
        java.util.Properties properties11 = new java.util.Properties(properties0);
        java.util.Properties properties12 = new java.util.Properties();
        java.util.Properties properties13 = new java.util.Properties(properties12);
        java.util.Collection<java.lang.Object> objCollection14 = properties13.values();
        java.util.Properties properties15 = new java.util.Properties();
        java.util.Properties properties16 = new java.util.Properties(properties15);
        java.util.Collection<java.lang.Object> objCollection17 = properties15.values();
        java.util.Enumeration<java.lang.Object> objEnumeration18 = properties15.keys();
        boolean boolean19 = properties13.contains((java.lang.Object) properties15);
        boolean boolean20 = properties13.isEmpty();
        boolean boolean21 = properties13.isEmpty();
        java.util.Properties properties22 = new java.util.Properties();
        java.util.Properties properties23 = new java.util.Properties(properties22);
        java.util.Collection<java.lang.Object> objCollection24 = properties23.values();
        boolean boolean25 = properties23.isEmpty();
        java.util.Set<java.lang.String> strSet26 = properties23.stringPropertyNames();
        java.lang.String str28 = properties23.getProperty("");
        java.util.Properties properties29 = new java.util.Properties();
        java.lang.Object obj31 = properties29.get((java.lang.Object) 0.0d);
        java.lang.Object obj32 = properties29.clone();
        java.lang.String str33 = properties29.toString();
        boolean boolean36 = properties29.remove((java.lang.Object) 0, (java.lang.Object) 'a');
        java.lang.Object obj37 = null;
        boolean boolean38 = properties29.equals(obj37);
        java.util.Set<java.lang.Object> objSet39 = properties29.keySet();
        boolean boolean40 = properties23.contains((java.lang.Object) properties29);
        java.lang.Object obj41 = properties13.remove((java.lang.Object) properties29);
        java.util.Properties properties42 = new java.util.Properties(properties29);
        java.util.Properties properties43 = new java.util.Properties(properties29);
        java.util.Properties properties44 = new java.util.Properties(properties29);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties45 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties45.logBaseDir = "";
        boolean boolean48 = atomikosProperties45.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery49 = atomikosProperties45.getRecovery();
        int int50 = recovery49.getMaxRetries();
        int int51 = recovery49.maxRetries;
        recovery49.delay = '4';
        java.lang.Object obj54 = properties0.getOrDefault((java.lang.Object) properties44, (java.lang.Object) recovery49);
        java.io.Reader reader55 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.load(reader55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{}" + "'", str4, "{}");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(objSet10);
        org.junit.Assert.assertNotNull(objCollection14);
        org.junit.Assert.assertNotNull(objCollection17);
        org.junit.Assert.assertNotNull(objEnumeration18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(objCollection24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "{}");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "{}" + "'", str33, "{}");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSet39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(recovery49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 5 + "'", int50 == 5);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 5 + "'", int51 == 5);
        org.junit.Assert.assertNotNull(obj54);
    }

    @Test
    public void test04236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04236");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties3 = new java.util.Properties();
        java.lang.Object obj5 = properties3.get((java.lang.Object) 0.0d);
        java.lang.Object obj6 = properties3.clone();
        java.lang.String str7 = properties3.toString();
        boolean boolean10 = properties3.remove((java.lang.Object) 0, (java.lang.Object) 'a');
        java.lang.Object obj11 = properties1.replace((java.lang.Object) 10.0d, (java.lang.Object) properties3);
        java.lang.String str12 = properties3.toString();
        java.util.Properties properties13 = new java.util.Properties(properties3);
        java.util.Properties properties14 = new java.util.Properties();
        java.util.Properties properties15 = new java.util.Properties(properties14);
        java.util.Collection<java.lang.Object> objCollection16 = properties15.values();
        boolean boolean17 = properties15.isEmpty();
        boolean boolean18 = properties3.equals((java.lang.Object) boolean17);
        java.util.Properties properties19 = new java.util.Properties(properties3);
        java.util.Properties properties20 = new java.util.Properties();
        int int21 = properties20.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery22 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long23 = recovery22.getRetryInterval();
        long long24 = recovery22.getDelay();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties25.setDefaultJtaTimeout((-1L));
        int int28 = atomikosProperties25.getConsoleFileLimit();
        java.util.Properties properties29 = atomikosProperties25.asProperties();
        boolean boolean30 = atomikosProperties25.forceShutdownOnVmExit;
        long long31 = atomikosProperties25.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long33 = atomikosProperties32.defaultJtaTimeout;
        atomikosProperties32.logBaseName = "tm.out";
        boolean boolean36 = properties20.replace((java.lang.Object) recovery22, (java.lang.Object) long31, (java.lang.Object) atomikosProperties32);
        java.lang.Object obj39 = properties20.setProperty("tm.out", "{{}={}}");
        int int40 = properties20.size();
        java.util.Properties properties41 = new java.util.Properties(properties20);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties42.logBaseDir = "";
        boolean boolean45 = atomikosProperties42.isForceShutdownOnVmExit();
        atomikosProperties42.outputDir = "hi!";
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery48 = atomikosProperties42.getRecovery();
        java.lang.String str49 = atomikosProperties42.getLogBaseName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int51 = atomikosProperties50.getConsoleFileCount();
        int int52 = atomikosProperties50.maxActives;
        atomikosProperties50.setConsoleFileName("");
        atomikosProperties50.transactionManagerUniqueName = "{}";
        java.lang.String str57 = atomikosProperties50.logBaseDir;
        atomikosProperties50.logBaseDir = "{{}={}}";
        atomikosProperties50.setTransactionManagerUniqueName("{{}=tmlog}");
        java.lang.String str62 = atomikosProperties50.getService();
        boolean boolean63 = properties3.replace((java.lang.Object) properties41, (java.lang.Object) atomikosProperties42, (java.lang.Object) atomikosProperties50);
        java.lang.Object obj64 = properties41.clone();
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "{}");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "{}" + "'", str7, "{}");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "{}" + "'", str12, "{}");
        org.junit.Assert.assertNotNull(objCollection16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 10000L + "'", long23 == 10000L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 10000L + "'", long24 == 10000L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(properties29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 10000L + "'", long33 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(recovery48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "tmlog" + "'", str49, "tmlog");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 50 + "'", int52 == 50);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(obj64);
        org.junit.Assert.assertEquals(obj64.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj64), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj64), "{}");
    }

    @Test
    public void test04237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04237");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        long long5 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.service = "";
        atomikosProperties0.setCheckpointInterval(50L);
        boolean boolean10 = atomikosProperties0.isAllowSubTransactions();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test04238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04238");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Collection<java.lang.Object> objCollection2 = properties1.values();
        java.lang.Object obj5 = properties1.setProperty("hi!", "{}");
        java.lang.String str7 = properties1.getProperty("tmlog");
        properties1.clear();
        java.lang.Object obj9 = properties1.clone();
        java.util.Properties properties10 = new java.util.Properties();
        java.util.Properties properties11 = new java.util.Properties(properties10);
        java.util.Collection<java.lang.Object> objCollection12 = properties10.values();
        java.util.Properties properties13 = new java.util.Properties(properties10);
        java.lang.Object obj14 = properties1.remove((java.lang.Object) properties10);
        java.util.Set<java.lang.Object> objSet15 = properties10.keySet();
        java.util.Properties properties16 = new java.util.Properties();
        java.lang.Object obj18 = properties16.get((java.lang.Object) 0.0d);
        java.lang.Object obj19 = properties16.clone();
        java.lang.String str20 = properties16.toString();
        java.util.Properties properties21 = new java.util.Properties(properties16);
        java.util.Enumeration<java.lang.Object> objEnumeration22 = properties21.keys();
        java.util.Collection<java.lang.Object> objCollection23 = properties21.values();
        java.util.Properties properties24 = new java.util.Properties();
        java.util.Properties properties25 = new java.util.Properties(properties24);
        java.util.Collection<java.lang.Object> objCollection26 = properties24.values();
        int int27 = properties24.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery28 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery28.maxRetries = (-1);
        recovery28.setDelay((long) (short) 0);
        recovery28.maxRetries = 0;
        boolean boolean36 = properties24.remove((java.lang.Object) 0, (java.lang.Object) (-1));
        java.util.Enumeration<?> wildcardEnumeration37 = properties24.propertyNames();
        java.lang.Object obj38 = properties21.get((java.lang.Object) properties24);
        java.lang.Object obj39 = properties10.get((java.lang.Object) properties24);
        java.util.Set<java.lang.Object> objSet40 = properties24.keySet();
        org.junit.Assert.assertNotNull(objCollection2);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "{}");
        org.junit.Assert.assertNotNull(objCollection12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(objSet15);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "{}");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{}" + "'", str20, "{}");
        org.junit.Assert.assertNotNull(objEnumeration22);
        org.junit.Assert.assertNotNull(objCollection23);
        org.junit.Assert.assertNotNull(objCollection26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(wildcardEnumeration37);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNotNull(objSet40);
    }

    @Test
    public void test04239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04239");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        long long5 = atomikosProperties0.getMaxTimeout();
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet7 = properties6.keySet();
        atomikosProperties0.set(properties6, "hi!", (java.lang.Object) (-1.0f));
        java.lang.Object obj13 = properties6.setProperty("", "hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties14.setDefaultJtaTimeout((-1L));
        java.util.Properties properties17 = new java.util.Properties();
        java.lang.Object obj19 = properties17.get((java.lang.Object) 0.0d);
        java.lang.Object obj20 = properties17.clone();
        boolean boolean22 = properties6.replace((java.lang.Object) (-1L), obj20, (java.lang.Object) 100.0d);
        java.util.Properties properties23 = new java.util.Properties();
        java.util.Properties properties24 = new java.util.Properties(properties23);
        properties24.clear();
        properties6.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties24);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties24.elements();
        java.lang.String str29 = properties24.getProperty("");
        java.util.Properties properties30 = new java.util.Properties(properties24);
        java.util.Enumeration<java.lang.Object> objEnumeration31 = properties30.elements();
        java.util.Set<java.lang.String> strSet32 = properties30.stringPropertyNames();
        boolean boolean33 = properties30.isEmpty();
        java.util.Properties properties34 = new java.util.Properties(properties30);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties35.setDefaultJtaTimeout((-1L));
        long long38 = atomikosProperties35.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties39 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int40 = atomikosProperties39.getConsoleFileCount();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties41.logBaseDir = "";
        atomikosProperties41.setConsoleFileCount((int) (short) 10);
        atomikosProperties41.setCheckpointInterval(10000L);
        long long48 = atomikosProperties41.maxTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel49 = org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO;
        atomikosProperties41.consoleLogLevel = atomikosLoggingLevel49;
        atomikosProperties39.consoleLogLevel = atomikosLoggingLevel49;
        atomikosProperties35.consoleLogLevel = atomikosLoggingLevel49;
        java.util.Properties properties53 = new java.util.Properties();
        java.util.Properties properties54 = new java.util.Properties(properties53);
        java.util.Properties properties56 = new java.util.Properties();
        java.lang.Object obj58 = properties56.get((java.lang.Object) 0.0d);
        java.lang.Object obj59 = properties56.clone();
        java.lang.String str60 = properties56.toString();
        boolean boolean63 = properties56.remove((java.lang.Object) 0, (java.lang.Object) 'a');
        java.lang.Object obj64 = properties54.replace((java.lang.Object) 10.0d, (java.lang.Object) properties56);
        java.util.Properties properties65 = new java.util.Properties(properties54);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties67 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties67.setDefaultJtaTimeout((-1L));
        int int70 = atomikosProperties67.getConsoleFileLimit();
        java.util.Properties properties71 = atomikosProperties67.asProperties();
        java.util.Properties properties72 = new java.util.Properties(properties71);
        atomikosProperties35.set(properties65, "hi!", (java.lang.Object) properties71);
        atomikosProperties35.setConsoleFileCount((int) '4');
        atomikosProperties35.enableLogging = false;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties78 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties78.setDefaultJtaTimeout((-1L));
        int int81 = atomikosProperties78.getConsoleFileLimit();
        java.util.Properties properties82 = atomikosProperties78.asProperties();
        boolean boolean83 = atomikosProperties78.forceShutdownOnVmExit;
        boolean boolean84 = atomikosProperties78.forceShutdownOnVmExit;
        atomikosProperties78.setForceShutdownOnVmExit(false);
        boolean boolean87 = properties30.remove((java.lang.Object) atomikosProperties35, (java.lang.Object) atomikosProperties78);
        atomikosProperties78.setDefaultJtaTimeout((long) (short) -1);
        atomikosProperties78.logBaseName = "{hi!={}}";
        boolean boolean92 = atomikosProperties78.serialJtaTransactions;
        java.util.Properties properties93 = atomikosProperties78.asProperties();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertNotNull(objSet7);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{}");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(objEnumeration31);
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 500L + "'", long38 == 500L);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 300000L + "'", long48 == 300000L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel49 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO + "'", atomikosLoggingLevel49.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO));
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertNotNull(obj59);
        org.junit.Assert.assertEquals(obj59.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj59), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj59), "{}");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "{}" + "'", str60, "{}");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(obj64);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNotNull(properties71);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertNotNull(properties82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(properties93);
    }

    @Test
    public void test04240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04240");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        java.lang.String str5 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.setService("{}");
        atomikosProperties0.consoleFileName = "tm.out";
        atomikosProperties0.service = "{com.atomikos.icatch.hi!=-1.0, =hi!}";
        atomikosProperties0.setLogBaseDir("{{{}={}}={com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=-1, 0=INFO}}");
        java.util.Properties properties14 = atomikosProperties0.asProperties();
        java.io.PrintWriter printWriter15 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties14.list(printWriter15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(properties14);
    }

    @Test
    public void test04241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04241");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setDefaultJtaTimeout((-1L));
        int int3 = atomikosProperties0.getConsoleFileLimit();
        atomikosProperties0.setConsoleFileName("{}");
        long long6 = atomikosProperties0.checkpointInterval;
        long long7 = atomikosProperties0.maxTimeout;
        java.util.Properties properties8 = atomikosProperties0.asProperties();
        atomikosProperties0.setSerialJtaTransactions(true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertNotNull(properties8);
    }

    @Test
    public void test04242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04242");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.get((java.lang.Object) 0.0d);
        java.lang.Object obj3 = properties0.clone();
        java.lang.String str4 = properties0.toString();
        java.util.Properties properties5 = new java.util.Properties(properties0);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet6 = properties0.entrySet();
        java.util.Enumeration<java.lang.Object> objEnumeration7 = properties0.elements();
        java.util.Properties properties8 = new java.util.Properties();
        java.lang.Object obj10 = properties8.get((java.lang.Object) 0.0d);
        java.lang.Object obj11 = properties8.clone();
        java.lang.String str12 = properties8.toString();
        java.util.Properties properties13 = new java.util.Properties(properties8);
        java.util.Enumeration<java.lang.Object> objEnumeration14 = properties13.keys();
        java.util.Collection<java.lang.Object> objCollection15 = properties13.values();
        java.lang.String str16 = properties13.toString();
        java.util.Properties properties17 = new java.util.Properties();
        java.util.Properties properties18 = new java.util.Properties(properties17);
        java.util.Properties properties20 = new java.util.Properties();
        java.lang.Object obj22 = properties20.get((java.lang.Object) 0.0d);
        java.lang.Object obj23 = properties20.clone();
        java.lang.String str24 = properties20.toString();
        boolean boolean27 = properties20.remove((java.lang.Object) 0, (java.lang.Object) 'a');
        java.lang.Object obj28 = properties18.replace((java.lang.Object) 10.0d, (java.lang.Object) properties20);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties29.setDefaultJtaTimeout((-1L));
        int int32 = atomikosProperties29.getConsoleFileLimit();
        java.util.Properties properties33 = atomikosProperties29.asProperties();
        java.util.Properties properties34 = new java.util.Properties();
        java.lang.Object obj36 = properties34.get((java.lang.Object) 0.0d);
        java.lang.Object obj37 = properties34.clone();
        java.lang.String str38 = properties34.toString();
        java.util.Properties properties39 = new java.util.Properties(properties34);
        java.util.Enumeration<java.lang.Object> objEnumeration40 = properties39.keys();
        java.util.Collection<java.lang.Object> objCollection41 = properties39.values();
        boolean boolean42 = properties33.contains((java.lang.Object) objCollection41);
        properties33.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties44.logBaseDir = "";
        atomikosProperties44.setConsoleFileCount((int) (short) 10);
        atomikosProperties44.setLogBaseDir("{}");
        java.util.Properties properties51 = atomikosProperties44.asProperties();
        java.util.Set<java.lang.String> strSet52 = properties51.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties53 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties53.setDefaultJtaTimeout((-1L));
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel56 = null;
        atomikosProperties53.consoleLogLevel = atomikosLoggingLevel56;
        atomikosProperties53.outputDir = "";
        int int60 = atomikosProperties53.maxActives;
        boolean boolean61 = atomikosProperties53.isThreadedTwoPhaseCommit();
        atomikosProperties53.consoleFileLimit = (short) 10;
        java.util.Properties properties64 = atomikosProperties53.asProperties();
        java.util.Enumeration<java.lang.Object> objEnumeration65 = properties64.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties66 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties66.enableLogging = true;
        long long69 = atomikosProperties66.getCheckpointInterval();
        java.lang.String str70 = atomikosProperties66.getService();
        atomikosProperties66.forceShutdownOnVmExit = false;
        java.lang.Object obj73 = properties51.replace((java.lang.Object) objEnumeration65, (java.lang.Object) atomikosProperties66);
        java.lang.Object obj74 = properties18.putIfAbsent((java.lang.Object) properties33, (java.lang.Object) atomikosProperties66);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties75 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties75.enableLogging = true;
        long long78 = atomikosProperties75.getCheckpointInterval();
        java.lang.String str79 = atomikosProperties75.getService();
        java.lang.String str80 = atomikosProperties75.logBaseDir;
        atomikosProperties75.setEnableLogging(false);
        atomikosProperties75.consoleFileCount = 0;
        long long85 = atomikosProperties75.getMaxTimeout();
        boolean boolean86 = atomikosProperties75.isEnableLogging();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel87 = atomikosProperties75.consoleLogLevel;
        boolean boolean88 = properties33.containsValue((java.lang.Object) atomikosLoggingLevel87);
        java.lang.Object obj89 = properties0.putIfAbsent((java.lang.Object) properties13, (java.lang.Object) properties33);
        java.util.Properties properties90 = new java.util.Properties(properties33);
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{}" + "'", str4, "{}");
        org.junit.Assert.assertNotNull(objEntrySet6);
        org.junit.Assert.assertNotNull(objEnumeration7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "{}");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "{}" + "'", str12, "{}");
        org.junit.Assert.assertNotNull(objEnumeration14);
        org.junit.Assert.assertNotNull(objCollection15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{}" + "'", str16, "{}");
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "{}");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "{}" + "'", str24, "{}");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(properties33);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertEquals(obj37.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "{}");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "{}" + "'", str38, "{}");
        org.junit.Assert.assertNotNull(objEnumeration40);
        org.junit.Assert.assertNotNull(objCollection41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(properties51);
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 50 + "'", int60 == 50);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(properties64);
        org.junit.Assert.assertNotNull(objEnumeration65);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 500L + "'", long69 == 500L);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNull(obj73);
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 500L + "'", long78 == 500L);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 300000L + "'", long85 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel87 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel87.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNull(obj89);
    }

    @Test
    public void test04243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04243");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int1 = atomikosProperties0.getConsoleFileCount();
        int int2 = atomikosProperties0.maxActives;
        int int3 = atomikosProperties0.getMaxActives();
        java.lang.String str4 = atomikosProperties0.getLogBaseName();
        java.lang.String str5 = atomikosProperties0.getService();
        atomikosProperties0.allowSubTransactions = false;
        boolean boolean8 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.setConsoleFileLimit(18);
        long long11 = atomikosProperties0.defaultJtaTimeout;
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 50 + "'", int2 == 50);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 50 + "'", int3 == 50);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tmlog" + "'", str4, "tmlog");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10000L + "'", long11 == 10000L);
    }

    @Test
    public void test04244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04244");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        long long5 = atomikosProperties0.getMaxTimeout();
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet7 = properties6.keySet();
        atomikosProperties0.set(properties6, "hi!", (java.lang.Object) (-1.0f));
        java.lang.String str11 = atomikosProperties0.logBaseDir;
        java.lang.String str12 = atomikosProperties0.logBaseDir;
        java.lang.String str13 = atomikosProperties0.logBaseDir;
        java.lang.String str14 = atomikosProperties0.getService();
        atomikosProperties0.checkpointInterval = 100L;
        int int17 = atomikosProperties0.getConsoleFileCount();
        long long18 = atomikosProperties0.getDefaultJtaTimeout();
        long long19 = atomikosProperties0.getCheckpointInterval();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertNotNull(objSet7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10000L + "'", long18 == 10000L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 100L + "'", long19 == 100L);
    }

    @Test
    public void test04245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04245");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.enableLogging = true;
        long long3 = atomikosProperties0.getCheckpointInterval();
        java.lang.String str4 = atomikosProperties0.getOutputDir();
        atomikosProperties0.setForceShutdownOnVmExit(false);
        boolean boolean7 = atomikosProperties0.isForceShutdownOnVmExit();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 500L + "'", long3 == 500L);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test04246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04246");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        long long5 = atomikosProperties0.getMaxTimeout();
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet7 = properties6.keySet();
        atomikosProperties0.set(properties6, "hi!", (java.lang.Object) (-1.0f));
        java.lang.Object obj13 = properties6.setProperty("", "hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties14.setDefaultJtaTimeout((-1L));
        java.util.Properties properties17 = new java.util.Properties();
        java.lang.Object obj19 = properties17.get((java.lang.Object) 0.0d);
        java.lang.Object obj20 = properties17.clone();
        boolean boolean22 = properties6.replace((java.lang.Object) (-1L), obj20, (java.lang.Object) 100.0d);
        java.util.Properties properties23 = new java.util.Properties();
        java.util.Properties properties24 = new java.util.Properties(properties23);
        properties24.clear();
        properties6.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties24);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet27 = properties6.entrySet();
        java.util.Properties properties28 = new java.util.Properties(properties6);
        java.io.OutputStream outputStream29 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties6.store(outputStream29, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=10, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir={}, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertNotNull(objSet7);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{}");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objEntrySet27);
    }

    @Test
    public void test04247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04247");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        java.lang.String str5 = atomikosProperties0.logBaseName;
        atomikosProperties0.outputDir = "";
        java.util.Properties properties8 = atomikosProperties0.asProperties();
        long long9 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.logBaseDir = "{true=10000}";
        java.util.Properties properties12 = atomikosProperties0.asProperties();
        long long13 = atomikosProperties0.defaultJtaTimeout;
        atomikosProperties0.checkpointInterval = 86400000L;
        atomikosProperties0.setService("hi!");
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tmlog" + "'", str5, "tmlog");
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10000L + "'", long9 == 10000L);
        org.junit.Assert.assertNotNull(properties12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10000L + "'", long13 == 10000L);
    }

    @Test
    public void test04248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04248");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int1 = atomikosProperties0.getConsoleFileCount();
        int int2 = atomikosProperties0.maxActives;
        int int3 = atomikosProperties0.getMaxActives();
        atomikosProperties0.forceShutdownOnVmExit = false;
        atomikosProperties0.forceShutdownOnVmExit = true;
        java.lang.String str8 = atomikosProperties0.service;
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 50 + "'", int2 == 50);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 50 + "'", int3 == 50);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test04249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04249");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        atomikosProperties0.setLogBaseDir("{}");
        java.lang.String str7 = atomikosProperties0.getOutputDir();
        atomikosProperties0.maxActives = 35;
        java.util.Properties properties10 = atomikosProperties0.asProperties();
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(properties10);
    }

    @Test
    public void test04250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04250");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        long long5 = atomikosProperties0.getMaxTimeout();
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet7 = properties6.keySet();
        atomikosProperties0.set(properties6, "hi!", (java.lang.Object) (-1.0f));
        java.lang.String str11 = atomikosProperties0.logBaseDir;
        java.lang.String str12 = atomikosProperties0.logBaseDir;
        java.lang.String str13 = atomikosProperties0.logBaseDir;
        boolean boolean14 = atomikosProperties0.isEnableLogging();
        long long15 = atomikosProperties0.checkpointInterval;
        boolean boolean16 = atomikosProperties0.forceShutdownOnVmExit;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery17 = atomikosProperties0.recovery;
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertNotNull(objSet7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 500L + "'", long15 == 500L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(recovery17);
    }

    @Test
    public void test04251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04251");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.maxRetries = (-1);
        recovery0.setDelay((long) (short) 0);
        long long5 = recovery0.forgetOrphanedLogEntriesDelay;
        recovery0.retryInterval = 500L;
        recovery0.retryInterval = '4';
        long long10 = recovery0.getRetryInterval();
        long long11 = recovery0.getForgetOrphanedLogEntriesDelay();
        recovery0.setRetryInterval(0L);
        long long14 = recovery0.delay;
        long long15 = recovery0.getRetryInterval();
        long long16 = recovery0.getForgetOrphanedLogEntriesDelay();
        long long17 = recovery0.getDelay();
        recovery0.setDelay((long) (short) -1);
        recovery0.maxRetries = 97;
        recovery0.setForgetOrphanedLogEntriesDelay((long) 2);
        recovery0.retryInterval = 32L;
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 86400000L + "'", long5 == 86400000L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 52L + "'", long10 == 52L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 86400000L + "'", long11 == 86400000L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 86400000L + "'", long16 == 86400000L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
    }

    @Test
    public void test04252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04252");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.defaultJtaTimeout;
        atomikosProperties0.logBaseName = "tm.out";
        java.lang.String str4 = atomikosProperties0.consoleFileName;
        atomikosProperties0.consoleFileLimit = (short) 0;
        atomikosProperties0.setMaxTimeout((long) '4');
        java.lang.String str9 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.outputDir = "{}";
        boolean boolean12 = atomikosProperties0.serialJtaTransactions;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 10000L + "'", long1 == 10000L);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tm.out" + "'", str4, "tm.out");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tm.out" + "'", str9, "tm.out");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test04253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04253");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties3 = new java.util.Properties();
        java.lang.Object obj5 = properties3.get((java.lang.Object) 0.0d);
        java.lang.Object obj6 = properties3.clone();
        java.lang.String str7 = properties3.toString();
        boolean boolean10 = properties3.remove((java.lang.Object) 0, (java.lang.Object) 'a');
        java.lang.Object obj11 = properties1.replace((java.lang.Object) 10.0d, (java.lang.Object) properties3);
        java.lang.String str12 = properties3.toString();
        java.util.Properties properties13 = new java.util.Properties(properties3);
        java.lang.Object obj16 = properties13.getOrDefault((java.lang.Object) (byte) 10, (java.lang.Object) (short) -1);
        boolean boolean17 = properties13.isEmpty();
        java.util.Set<java.lang.Object> objSet18 = properties13.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setDefaultJtaTimeout((-1L));
        atomikosProperties19.allowSubTransactions = true;
        boolean boolean24 = properties13.containsValue((java.lang.Object) true);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties25.logBaseDir = "";
        atomikosProperties25.setConsoleFileCount((int) (short) 10);
        java.lang.String str30 = atomikosProperties25.logBaseName;
        atomikosProperties25.outputDir = "";
        java.util.Properties properties33 = atomikosProperties25.asProperties();
        java.util.Properties properties34 = atomikosProperties25.asProperties();
        long long35 = atomikosProperties25.defaultJtaTimeout;
        atomikosProperties25.serialJtaTransactions = true;
        atomikosProperties25.service = "";
        boolean boolean40 = properties13.equals((java.lang.Object) atomikosProperties25);
        boolean boolean41 = atomikosProperties25.isEnableLogging();
        atomikosProperties25.setLogBaseDir("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=10, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir=, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        long long44 = atomikosProperties25.checkpointInterval;
        atomikosProperties25.forceShutdownOnVmExit = true;
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "{}");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "{}" + "'", str7, "{}");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "{}" + "'", str12, "{}");
        org.junit.Assert.assertEquals("'" + obj16 + "' != '" + (short) -1 + "'", obj16, (short) -1);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objSet18);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "tmlog" + "'", str30, "tmlog");
        org.junit.Assert.assertNotNull(properties33);
        org.junit.Assert.assertNotNull(properties34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 10000L + "'", long35 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 500L + "'", long44 == 500L);
    }

    @Test
    public void test04254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04254");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        long long5 = atomikosProperties0.getMaxTimeout();
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet7 = properties6.keySet();
        atomikosProperties0.set(properties6, "hi!", (java.lang.Object) (-1.0f));
        java.lang.String str11 = atomikosProperties0.logBaseDir;
        java.lang.String str12 = atomikosProperties0.logBaseDir;
        java.lang.String str13 = atomikosProperties0.logBaseDir;
        atomikosProperties0.outputDir = "{{}={}}";
        atomikosProperties0.setService("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=10, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir=, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        atomikosProperties0.logBaseDir = "{true=10000}";
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertNotNull(objSet7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test04255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04255");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setDefaultJtaTimeout((-1L));
        long long3 = atomikosProperties0.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int5 = atomikosProperties4.getConsoleFileCount();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties6.logBaseDir = "";
        atomikosProperties6.setConsoleFileCount((int) (short) 10);
        atomikosProperties6.setCheckpointInterval(10000L);
        long long13 = atomikosProperties6.maxTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel14 = org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO;
        atomikosProperties6.consoleLogLevel = atomikosLoggingLevel14;
        atomikosProperties4.consoleLogLevel = atomikosLoggingLevel14;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel14;
        java.util.Properties properties18 = new java.util.Properties();
        java.util.Properties properties19 = new java.util.Properties(properties18);
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.Object obj23 = properties21.get((java.lang.Object) 0.0d);
        java.lang.Object obj24 = properties21.clone();
        java.lang.String str25 = properties21.toString();
        boolean boolean28 = properties21.remove((java.lang.Object) 0, (java.lang.Object) 'a');
        java.lang.Object obj29 = properties19.replace((java.lang.Object) 10.0d, (java.lang.Object) properties21);
        java.util.Properties properties30 = new java.util.Properties(properties19);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties32.setDefaultJtaTimeout((-1L));
        int int35 = atomikosProperties32.getConsoleFileLimit();
        java.util.Properties properties36 = atomikosProperties32.asProperties();
        java.util.Properties properties37 = new java.util.Properties(properties36);
        atomikosProperties0.set(properties30, "hi!", (java.lang.Object) properties36);
        java.util.Properties properties39 = new java.util.Properties(properties36);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties40.setDefaultJtaTimeout((-1L));
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel43 = null;
        atomikosProperties40.consoleLogLevel = atomikosLoggingLevel43;
        atomikosProperties40.outputDir = "";
        int int47 = atomikosProperties40.maxActives;
        boolean boolean48 = atomikosProperties40.isThreadedTwoPhaseCommit();
        atomikosProperties40.consoleFileLimit = (short) 10;
        java.util.Properties properties51 = atomikosProperties40.asProperties();
        java.util.Enumeration<java.lang.Object> objEnumeration52 = properties51.keys();
        java.util.Collection<java.lang.Object> objCollection53 = properties51.values();
        boolean boolean54 = properties36.equals((java.lang.Object) objCollection53);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 500L + "'", long3 == 500L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 300000L + "'", long13 == 300000L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel14 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO + "'", atomikosLoggingLevel14.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO));
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "{}");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "{}" + "'", str25, "{}");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(properties36);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 50 + "'", int47 == 50);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(properties51);
        org.junit.Assert.assertNotNull(objEnumeration52);
        org.junit.Assert.assertNotNull(objCollection53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test04256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04256");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setDefaultJtaTimeout((-1L));
        long long3 = atomikosProperties0.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int5 = atomikosProperties4.getConsoleFileCount();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties6.logBaseDir = "";
        atomikosProperties6.setConsoleFileCount((int) (short) 10);
        atomikosProperties6.setCheckpointInterval(10000L);
        long long13 = atomikosProperties6.maxTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel14 = org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO;
        atomikosProperties6.consoleLogLevel = atomikosLoggingLevel14;
        atomikosProperties4.consoleLogLevel = atomikosLoggingLevel14;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel14;
        java.util.Properties properties18 = new java.util.Properties();
        java.util.Properties properties19 = new java.util.Properties(properties18);
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.Object obj23 = properties21.get((java.lang.Object) 0.0d);
        java.lang.Object obj24 = properties21.clone();
        java.lang.String str25 = properties21.toString();
        boolean boolean28 = properties21.remove((java.lang.Object) 0, (java.lang.Object) 'a');
        java.lang.Object obj29 = properties19.replace((java.lang.Object) 10.0d, (java.lang.Object) properties21);
        java.util.Properties properties30 = new java.util.Properties(properties19);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties32.setDefaultJtaTimeout((-1L));
        int int35 = atomikosProperties32.getConsoleFileLimit();
        java.util.Properties properties36 = atomikosProperties32.asProperties();
        java.util.Properties properties37 = new java.util.Properties(properties36);
        atomikosProperties0.set(properties30, "hi!", (java.lang.Object) properties36);
        int int39 = properties36.size();
        int int40 = properties36.size();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 500L + "'", long3 == 500L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 300000L + "'", long13 == 300000L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel14 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO + "'", atomikosLoggingLevel14.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO));
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "{}");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "{}" + "'", str25, "{}");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(properties36);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 18 + "'", int39 == 18);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 18 + "'", int40 == 18);
    }

    @Test
    public void test04257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04257");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        atomikosProperties0.setLogBaseDir("{}");
        java.util.Properties properties7 = atomikosProperties0.asProperties();
        java.util.Set<java.lang.String> strSet8 = properties7.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int10 = atomikosProperties9.getConsoleFileCount();
        int int11 = atomikosProperties9.maxActives;
        atomikosProperties9.setConsoleFileName("");
        atomikosProperties9.transactionManagerUniqueName = "{}";
        java.util.Properties properties16 = atomikosProperties9.asProperties();
        boolean boolean17 = atomikosProperties9.threadedTwoPhaseCommit;
        atomikosProperties9.enableLogging = true;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int21 = atomikosProperties20.getConsoleFileCount();
        int int22 = atomikosProperties20.maxActives;
        atomikosProperties20.setConsoleFileName("");
        atomikosProperties20.transactionManagerUniqueName = "{}";
        atomikosProperties20.setMaxActives(0);
        boolean boolean29 = atomikosProperties20.forceShutdownOnVmExit;
        java.lang.Object obj30 = properties7.put((java.lang.Object) atomikosProperties9, (java.lang.Object) atomikosProperties20);
        atomikosProperties20.logBaseName = "{com.atomikos.icatch.hi!=-1.0}";
        atomikosProperties20.serialJtaTransactions = true;
        atomikosProperties20.setConsoleFileLimit((int) (short) 10);
        java.lang.String str37 = atomikosProperties20.service;
        boolean boolean38 = atomikosProperties20.serialJtaTransactions;
        java.lang.String str39 = atomikosProperties20.consoleFileName;
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 50 + "'", int11 == 50);
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 50 + "'", int22 == 50);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
    }

    @Test
    public void test04258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04258");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        java.lang.String str5 = atomikosProperties0.logBaseName;
        atomikosProperties0.outputDir = "";
        java.util.Properties properties8 = atomikosProperties0.asProperties();
        java.util.Properties properties9 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.enableLogging = true;
        long long13 = atomikosProperties10.getCheckpointInterval();
        atomikosProperties10.setService("tmlog");
        atomikosProperties10.setCheckpointInterval((long) (short) 0);
        long long18 = atomikosProperties10.getCheckpointInterval();
        java.lang.String str19 = atomikosProperties10.getService();
        atomikosProperties10.setMaxActives((int) (short) 100);
        java.lang.Object obj22 = properties9.remove((java.lang.Object) atomikosProperties10);
        atomikosProperties10.maxTimeout = 5;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel25 = atomikosProperties10.getConsoleLogLevel();
        atomikosProperties10.consoleFileLimit = '#';
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int29 = atomikosProperties28.getConsoleFileCount();
        int int30 = atomikosProperties28.maxActives;
        atomikosProperties28.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel33 = atomikosProperties28.getConsoleLogLevel();
        atomikosProperties10.setConsoleLogLevel(atomikosLoggingLevel33);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tmlog" + "'", str5, "tmlog");
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 500L + "'", long13 == 500L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "tmlog" + "'", str19, "tmlog");
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel25 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel25.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 50 + "'", int30 == 50);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel33 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel33.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
    }

    @Test
    public void test04259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04259");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties3 = new java.util.Properties();
        java.lang.Object obj5 = properties3.get((java.lang.Object) 0.0d);
        java.lang.Object obj6 = properties3.clone();
        java.lang.String str7 = properties3.toString();
        boolean boolean10 = properties3.remove((java.lang.Object) 0, (java.lang.Object) 'a');
        java.lang.Object obj11 = properties1.replace((java.lang.Object) 10.0d, (java.lang.Object) properties3);
        java.lang.String str12 = properties3.toString();
        java.util.Properties properties13 = new java.util.Properties(properties3);
        java.lang.Object obj16 = properties13.getOrDefault((java.lang.Object) (byte) 10, (java.lang.Object) (short) -1);
        java.util.Properties properties17 = new java.util.Properties(properties13);
        properties13.clear();
        properties13.clear();
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "{}");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "{}" + "'", str7, "{}");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "{}" + "'", str12, "{}");
        org.junit.Assert.assertEquals("'" + obj16 + "' != '" + (short) -1 + "'", obj16, (short) -1);
    }

    @Test
    public void test04260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04260");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.enableLogging = true;
        int int3 = atomikosProperties0.consoleFileLimit;
        atomikosProperties0.logBaseName = "hi!";
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int7 = atomikosProperties6.getConsoleFileCount();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties8.logBaseDir = "";
        atomikosProperties8.setConsoleFileCount((int) (short) 10);
        atomikosProperties8.setCheckpointInterval(10000L);
        long long15 = atomikosProperties8.maxTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel16 = org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO;
        atomikosProperties8.consoleLogLevel = atomikosLoggingLevel16;
        atomikosProperties6.consoleLogLevel = atomikosLoggingLevel16;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel16;
        atomikosProperties0.checkpointInterval = 35;
        boolean boolean22 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.consoleFileLimit = (short) -1;
        long long25 = atomikosProperties0.maxTimeout;
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 300000L + "'", long15 == 300000L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel16 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO + "'", atomikosLoggingLevel16.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 300000L + "'", long25 == 300000L);
    }

    @Test
    public void test04261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04261");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        long long5 = atomikosProperties0.getMaxTimeout();
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet7 = properties6.keySet();
        atomikosProperties0.set(properties6, "hi!", (java.lang.Object) (-1.0f));
        java.lang.String str11 = atomikosProperties0.logBaseDir;
        java.lang.String str12 = atomikosProperties0.logBaseDir;
        java.lang.String str13 = atomikosProperties0.logBaseDir;
        boolean boolean14 = atomikosProperties0.isEnableLogging();
        java.lang.String str15 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.threadedTwoPhaseCommit = true;
        boolean boolean18 = atomikosProperties0.serialJtaTransactions;
        java.lang.String str19 = atomikosProperties0.getConsoleFileName();
        long long20 = atomikosProperties0.getDefaultJtaTimeout();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertNotNull(objSet7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "tm.out" + "'", str19, "tm.out");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10000L + "'", long20 == 10000L);
    }

    @Test
    public void test04262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04262");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        atomikosProperties0.setLogBaseDir("{}");
        java.lang.String str7 = atomikosProperties0.getOutputDir();
        atomikosProperties0.setLogBaseName("hi!");
        boolean boolean10 = atomikosProperties0.isSerialJtaTransactions();
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test04263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04263");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        long long5 = atomikosProperties0.getMaxTimeout();
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet7 = properties6.keySet();
        atomikosProperties0.set(properties6, "hi!", (java.lang.Object) (-1.0f));
        java.lang.Object obj13 = properties6.setProperty("", "hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties14.setDefaultJtaTimeout((-1L));
        java.util.Properties properties17 = new java.util.Properties();
        java.lang.Object obj19 = properties17.get((java.lang.Object) 0.0d);
        java.lang.Object obj20 = properties17.clone();
        boolean boolean22 = properties6.replace((java.lang.Object) (-1L), obj20, (java.lang.Object) 100.0d);
        java.util.Properties properties23 = new java.util.Properties();
        java.util.Properties properties24 = new java.util.Properties(properties23);
        properties24.clear();
        properties6.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties24);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties24.elements();
        java.lang.String str29 = properties24.getProperty("");
        java.util.Properties properties30 = new java.util.Properties();
        java.lang.Object obj32 = properties30.get((java.lang.Object) 0.0d);
        java.lang.Object obj33 = properties30.clone();
        java.lang.String str34 = properties30.toString();
        boolean boolean36 = properties24.remove((java.lang.Object) properties30, (java.lang.Object) 0);
        java.lang.String str38 = properties30.getProperty("{com.atomikos.icatch.hi!=-1.0}");
        java.lang.Object obj41 = properties30.setProperty("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=10, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=true, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir=, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}", "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=-1, 0=INFO}");
        java.io.OutputStream outputStream42 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties30.save(outputStream42, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=10, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=true, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir=, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertNotNull(objSet7);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{}");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "{}");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "{}" + "'", str34, "{}");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(obj41);
    }

    @Test
    public void test04264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04264");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setDefaultJtaTimeout((-1L));
        int int3 = atomikosProperties0.getConsoleFileLimit();
        atomikosProperties0.setCheckpointInterval((long) '#');
        java.lang.String str6 = atomikosProperties0.logBaseName;
        java.lang.String str7 = atomikosProperties0.outputDir;
        atomikosProperties0.threadedTwoPhaseCommit = true;
        atomikosProperties0.service = "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=INFO, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=35, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=hi!, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}";
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test04265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04265");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        long long5 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.service = "";
        java.lang.String str8 = atomikosProperties0.logBaseDir;
        boolean boolean9 = atomikosProperties0.threadedTwoPhaseCommit;
        java.lang.String str10 = atomikosProperties0.getService();
        atomikosProperties0.transactionManagerUniqueName = "tmlog";
        atomikosProperties0.logBaseDir = "{com.atomikos.icatch.hi!=-1.0}";
        atomikosProperties0.serialJtaTransactions = false;
        boolean boolean17 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.setAllowSubTransactions(true);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test04266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04266");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int1 = atomikosProperties0.getConsoleFileCount();
        int int2 = atomikosProperties0.maxActives;
        atomikosProperties0.setConsoleFileName("");
        boolean boolean5 = atomikosProperties0.forceShutdownOnVmExit;
        long long6 = atomikosProperties0.maxTimeout;
        int int7 = atomikosProperties0.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int9 = atomikosProperties8.getConsoleFileCount();
        int int10 = atomikosProperties8.maxActives;
        atomikosProperties8.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel13 = org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN;
        atomikosProperties8.consoleLogLevel = atomikosLoggingLevel13;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel13);
        boolean boolean16 = atomikosProperties0.forceShutdownOnVmExit;
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 50 + "'", int2 == 50);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 300000L + "'", long6 == 300000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 50 + "'", int10 == 50);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel13 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel13.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test04267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04267");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        java.lang.String str5 = atomikosProperties0.transactionManagerUniqueName;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel6 = atomikosProperties0.getConsoleLogLevel();
        java.lang.String str7 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.consoleFileLimit = (byte) 100;
        long long10 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.defaultJtaTimeout = 1L;
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel6 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel6.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 500L + "'", long10 == 500L);
    }

    @Test
    public void test04268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04268");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setDefaultJtaTimeout((-1L));
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel3 = null;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel3;
        atomikosProperties0.outputDir = "";
        int int7 = atomikosProperties0.maxActives;
        java.lang.String str8 = atomikosProperties0.logBaseDir;
        boolean boolean9 = atomikosProperties0.allowSubTransactions;
        atomikosProperties0.transactionManagerUniqueName = "{true=10000}";
        atomikosProperties0.setForceShutdownOnVmExit(false);
        atomikosProperties0.allowSubTransactions = true;
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test04269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04269");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.enableLogging = true;
        int int3 = atomikosProperties0.consoleFileLimit;
        atomikosProperties0.logBaseName = "hi!";
        atomikosProperties0.enableLogging = false;
        atomikosProperties0.setMaxTimeout((long) '4');
        atomikosProperties0.setCheckpointInterval((long) 'a');
        java.lang.String str12 = atomikosProperties0.getOutputDir();
        atomikosProperties0.setEnableLogging(true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test04270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04270");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.maxRetries = (-1);
        recovery0.setDelay((long) (short) 0);
        recovery0.maxRetries = 0;
        recovery0.setMaxRetries((int) '#');
        int int9 = recovery0.maxRetries;
        int int10 = recovery0.getMaxRetries();
        long long11 = recovery0.getForgetOrphanedLogEntriesDelay();
        int int12 = recovery0.maxRetries;
        long long13 = recovery0.getRetryInterval();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 86400000L + "'", long11 == 86400000L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10000L + "'", long13 == 10000L);
    }

    @Test
    public void test04271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04271");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Collection<java.lang.Object> objCollection2 = properties1.values();
        java.lang.Object obj5 = properties1.setProperty("hi!", "{}");
        java.lang.String str7 = properties1.getProperty("tmlog");
        properties1.clear();
        java.util.Set<java.lang.String> strSet9 = properties1.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int11 = atomikosProperties10.getConsoleFileCount();
        int int12 = atomikosProperties10.maxActives;
        java.lang.String str13 = atomikosProperties10.getService();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties14.logBaseDir = "";
        atomikosProperties14.setConsoleFileCount((int) (short) 10);
        atomikosProperties14.setCheckpointInterval(10000L);
        long long21 = atomikosProperties14.maxTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel22 = atomikosProperties14.getConsoleLogLevel();
        atomikosProperties10.consoleLogLevel = atomikosLoggingLevel22;
        java.lang.String str24 = atomikosProperties10.consoleFileName;
        atomikosProperties10.forceShutdownOnVmExit = false;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int28 = atomikosProperties27.getConsoleFileCount();
        int int29 = atomikosProperties27.maxActives;
        java.util.Properties properties30 = new java.util.Properties();
        java.util.Properties properties31 = new java.util.Properties(properties30);
        java.util.Collection<java.lang.Object> objCollection32 = properties31.values();
        java.lang.Object obj35 = properties31.setProperty("hi!", "{}");
        java.lang.String str37 = properties31.getProperty("tmlog");
        properties31.clear();
        java.lang.Object obj39 = properties31.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties41.logBaseDir = "";
        atomikosProperties41.setConsoleFileCount((int) (short) 10);
        atomikosProperties41.setLogBaseDir("{}");
        java.util.Properties properties48 = atomikosProperties41.asProperties();
        atomikosProperties41.service = "";
        atomikosProperties41.setTransactionManagerUniqueName("{}");
        atomikosProperties41.enableLogging = false;
        atomikosProperties27.set(properties31, "", (java.lang.Object) atomikosProperties41);
        java.lang.Object obj56 = properties1.putIfAbsent((java.lang.Object) atomikosProperties10, (java.lang.Object) properties31);
        java.util.Properties properties57 = new java.util.Properties();
        java.util.Properties properties58 = new java.util.Properties(properties57);
        java.util.Collection<java.lang.Object> objCollection59 = properties58.values();
        java.util.Properties properties60 = new java.util.Properties();
        java.util.Properties properties61 = new java.util.Properties(properties60);
        java.util.Collection<java.lang.Object> objCollection62 = properties60.values();
        java.util.Enumeration<java.lang.Object> objEnumeration63 = properties60.keys();
        boolean boolean64 = properties58.contains((java.lang.Object) properties60);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties66 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties66.logBaseDir = "";
        atomikosProperties66.setConsoleFileCount((int) (short) 10);
        java.lang.String str71 = atomikosProperties66.logBaseName;
        atomikosProperties66.outputDir = "";
        java.util.Properties properties74 = atomikosProperties66.asProperties();
        java.util.Properties properties75 = atomikosProperties66.asProperties();
        boolean boolean76 = properties58.remove((java.lang.Object) (byte) 10, (java.lang.Object) atomikosProperties66);
        atomikosProperties66.setCheckpointInterval((long) (short) -1);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties79 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties79.logBaseDir = "";
        atomikosProperties79.setConsoleFileCount((int) (short) 10);
        atomikosProperties79.setCheckpointInterval(10000L);
        long long86 = atomikosProperties79.maxTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel87 = org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO;
        atomikosProperties79.consoleLogLevel = atomikosLoggingLevel87;
        atomikosProperties79.setMaxActives((int) (byte) 1);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery91 = atomikosProperties79.getRecovery();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel92 = atomikosProperties79.consoleLogLevel;
        java.lang.Object obj93 = properties1.getOrDefault((java.lang.Object) atomikosProperties66, (java.lang.Object) atomikosProperties79);
        atomikosProperties66.setConsoleFileLimit(21);
        atomikosProperties66.consoleFileName = "";
        org.junit.Assert.assertNotNull(objCollection2);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 50 + "'", int12 == 50);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 300000L + "'", long21 == 300000L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel22 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel22.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "tm.out" + "'", str24, "tm.out");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 50 + "'", int29 == 50);
        org.junit.Assert.assertNotNull(objCollection32);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertEquals(obj39.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "{}");
        org.junit.Assert.assertNotNull(properties48);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertNotNull(objCollection59);
        org.junit.Assert.assertNotNull(objCollection62);
        org.junit.Assert.assertNotNull(objEnumeration63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "tmlog" + "'", str71, "tmlog");
        org.junit.Assert.assertNotNull(properties74);
        org.junit.Assert.assertNotNull(properties75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 300000L + "'", long86 == 300000L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel87 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO + "'", atomikosLoggingLevel87.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO));
        org.junit.Assert.assertNotNull(recovery91);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel92 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO + "'", atomikosLoggingLevel92.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO));
        org.junit.Assert.assertNotNull(obj93);
    }

    @Test
    public void test04272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04272");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.enableLogging = true;
        long long3 = atomikosProperties0.getCheckpointInterval();
        atomikosProperties0.setService("tmlog");
        atomikosProperties0.setConsoleFileName("{}");
        java.lang.String str8 = atomikosProperties0.getConsoleFileName();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel9 = atomikosProperties0.getConsoleLogLevel();
        java.lang.String str10 = atomikosProperties0.getService();
        long long11 = atomikosProperties0.maxTimeout;
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 500L + "'", long3 == 500L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{}" + "'", str8, "{}");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel9 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel9.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "tmlog" + "'", str10, "tmlog");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 300000L + "'", long11 == 300000L);
    }

    @Test
    public void test04273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04273");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        boolean boolean3 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.allowSubTransactions = false;
        boolean boolean6 = atomikosProperties0.serialJtaTransactions;
        atomikosProperties0.consoleFileName = "{true=10000}";
        java.lang.String str9 = atomikosProperties0.consoleFileName;
        atomikosProperties0.maxActives = 'a';
        boolean boolean12 = atomikosProperties0.isAllowSubTransactions();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{true=10000}" + "'", str9, "{true=10000}");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test04274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04274");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        java.lang.String str5 = atomikosProperties0.logBaseName;
        atomikosProperties0.outputDir = "";
        java.util.Properties properties8 = atomikosProperties0.asProperties();
        java.util.Properties properties9 = atomikosProperties0.asProperties();
        java.util.Properties properties10 = atomikosProperties0.asProperties();
        boolean boolean11 = atomikosProperties0.threadedTwoPhaseCommit;
        atomikosProperties0.consoleFileCount = 100;
        boolean boolean14 = atomikosProperties0.isForceShutdownOnVmExit();
        java.lang.String str15 = atomikosProperties0.transactionManagerUniqueName;
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tmlog" + "'", str5, "tmlog");
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test04275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04275");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.maxRetries = (-1);
        recovery0.setDelay((long) (short) 0);
        recovery0.maxRetries = 0;
        recovery0.setMaxRetries((int) '#');
        long long9 = recovery0.delay;
        long long10 = recovery0.delay;
        recovery0.setMaxRetries((int) 'a');
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
    }

    @Test
    public void test04276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04276");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        boolean boolean3 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.allowSubTransactions = false;
        boolean boolean6 = atomikosProperties0.serialJtaTransactions;
        atomikosProperties0.consoleFileName = "{true=10000}";
        java.lang.String str9 = atomikosProperties0.consoleFileName;
        atomikosProperties0.forceShutdownOnVmExit = true;
        atomikosProperties0.setSerialJtaTransactions(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{true=10000}" + "'", str9, "{true=10000}");
    }

    @Test
    public void test04277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04277");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.maxRetries = (-1);
        recovery0.setDelay((long) (short) 0);
        recovery0.maxRetries = 0;
        recovery0.forgetOrphanedLogEntriesDelay = 100;
        recovery0.setMaxRetries((int) (byte) -1);
        int int11 = recovery0.getMaxRetries();
        recovery0.setMaxRetries(19);
        long long14 = recovery0.retryInterval;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10000L + "'", long14 == 10000L);
    }

    @Test
    public void test04278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04278");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setDefaultJtaTimeout((-1L));
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel3 = null;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel3;
        atomikosProperties0.outputDir = "";
        int int7 = atomikosProperties0.maxActives;
        boolean boolean8 = atomikosProperties0.isThreadedTwoPhaseCommit();
        atomikosProperties0.consoleFileLimit = (short) 10;
        java.util.Properties properties11 = atomikosProperties0.asProperties();
        java.util.Enumeration<java.lang.Object> objEnumeration12 = properties11.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int14 = atomikosProperties13.getConsoleFileCount();
        int int15 = atomikosProperties13.maxActives;
        atomikosProperties13.setConsoleFileName("");
        java.lang.String str18 = atomikosProperties13.getOutputDir();
        atomikosProperties13.setConsoleFileName("");
        atomikosProperties13.serialJtaTransactions = true;
        atomikosProperties13.enableLogging = false;
        java.util.Properties properties25 = atomikosProperties13.asProperties();
        java.lang.Object obj26 = properties11.get((java.lang.Object) atomikosProperties13);
        java.io.OutputStream outputStream27 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties11.storeToXML(outputStream27, "{com.atomikos.icatch.hi!=-1.0, =hi!}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNotNull(objEnumeration12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 50 + "'", int15 == 50);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertNull(obj26);
    }

    @Test
    public void test04279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04279");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        long long5 = atomikosProperties0.getMaxTimeout();
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet7 = properties6.keySet();
        atomikosProperties0.set(properties6, "hi!", (java.lang.Object) (-1.0f));
        java.lang.Object obj13 = properties6.setProperty("", "hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties14.setDefaultJtaTimeout((-1L));
        java.util.Properties properties17 = new java.util.Properties();
        java.lang.Object obj19 = properties17.get((java.lang.Object) 0.0d);
        java.lang.Object obj20 = properties17.clone();
        boolean boolean22 = properties6.replace((java.lang.Object) (-1L), obj20, (java.lang.Object) 100.0d);
        java.util.Properties properties23 = new java.util.Properties();
        java.util.Properties properties24 = new java.util.Properties(properties23);
        properties24.clear();
        properties6.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties24);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties24.elements();
        java.lang.String str29 = properties24.getProperty("");
        java.util.Properties properties30 = new java.util.Properties();
        java.lang.Object obj32 = properties30.get((java.lang.Object) 0.0d);
        java.lang.Object obj33 = properties30.clone();
        java.lang.String str34 = properties30.toString();
        boolean boolean36 = properties24.remove((java.lang.Object) properties30, (java.lang.Object) 0);
        java.util.Enumeration<?> wildcardEnumeration37 = properties24.propertyNames();
        java.util.Properties properties38 = new java.util.Properties(properties24);
        java.util.Properties properties39 = new java.util.Properties(properties24);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties40.logBaseDir = "";
        atomikosProperties40.setConsoleFileCount((int) (short) 10);
        long long45 = atomikosProperties40.getMaxTimeout();
        java.util.Properties properties46 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet47 = properties46.keySet();
        atomikosProperties40.set(properties46, "hi!", (java.lang.Object) (-1.0f));
        java.lang.String str51 = atomikosProperties40.service;
        atomikosProperties40.setSerialJtaTransactions(false);
        int int54 = atomikosProperties40.consoleFileLimit;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties55 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties55.logBaseDir = "";
        atomikosProperties55.setConsoleFileCount((int) (short) 10);
        java.lang.String str60 = atomikosProperties55.transactionManagerUniqueName;
        long long61 = atomikosProperties55.getDefaultJtaTimeout();
        long long62 = atomikosProperties55.checkpointInterval;
        int int63 = atomikosProperties55.getConsoleFileCount();
        java.lang.Object obj64 = properties39.put((java.lang.Object) atomikosProperties40, (java.lang.Object) atomikosProperties55);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel65 = atomikosProperties40.getConsoleLogLevel();
        java.lang.String str66 = atomikosProperties40.logBaseDir;
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertNotNull(objSet7);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{}");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "{}");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "{}" + "'", str34, "{}");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(wildcardEnumeration37);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 300000L + "'", long45 == 300000L);
        org.junit.Assert.assertNotNull(objSet47);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 10000L + "'", long61 == 10000L);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 500L + "'", long62 == 500L);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
        org.junit.Assert.assertNull(obj64);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel65 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel65.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
    }

    @Test
    public void test04280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04280");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Collection<java.lang.Object> objCollection2 = properties1.values();
        java.lang.Object obj5 = properties1.setProperty("hi!", "{}");
        java.lang.String str7 = properties1.getProperty("tmlog");
        properties1.clear();
        java.lang.Object obj9 = properties1.clone();
        java.util.Properties properties10 = new java.util.Properties();
        java.util.Properties properties11 = new java.util.Properties(properties10);
        java.util.Collection<java.lang.Object> objCollection12 = properties10.values();
        java.util.Properties properties13 = new java.util.Properties(properties10);
        java.lang.Object obj14 = properties1.remove((java.lang.Object) properties10);
        java.util.Set<java.lang.Object> objSet15 = properties10.keySet();
        java.util.Properties properties16 = new java.util.Properties();
        java.lang.Object obj18 = properties16.get((java.lang.Object) 0.0d);
        java.lang.Object obj19 = properties16.clone();
        java.lang.String str20 = properties16.toString();
        java.util.Properties properties21 = new java.util.Properties(properties16);
        java.util.Enumeration<java.lang.Object> objEnumeration22 = properties21.keys();
        java.util.Collection<java.lang.Object> objCollection23 = properties21.values();
        java.util.Properties properties24 = new java.util.Properties();
        java.util.Properties properties25 = new java.util.Properties(properties24);
        java.util.Collection<java.lang.Object> objCollection26 = properties24.values();
        int int27 = properties24.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery28 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery28.maxRetries = (-1);
        recovery28.setDelay((long) (short) 0);
        recovery28.maxRetries = 0;
        boolean boolean36 = properties24.remove((java.lang.Object) 0, (java.lang.Object) (-1));
        java.util.Enumeration<?> wildcardEnumeration37 = properties24.propertyNames();
        java.lang.Object obj38 = properties21.get((java.lang.Object) properties24);
        java.lang.Object obj39 = properties10.get((java.lang.Object) properties24);
        java.util.Enumeration<?> wildcardEnumeration40 = properties10.propertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery41 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long42 = recovery41.getRetryInterval();
        recovery41.delay = 10L;
        recovery41.setForgetOrphanedLogEntriesDelay(0L);
        long long47 = recovery41.getRetryInterval();
        recovery41.maxRetries = 1;
        long long50 = recovery41.forgetOrphanedLogEntriesDelay;
        recovery41.maxRetries = (short) -1;
        long long53 = recovery41.getDelay();
        boolean boolean54 = properties10.containsKey((java.lang.Object) long53);
        java.util.Enumeration<java.lang.Object> objEnumeration55 = properties10.elements();
        org.junit.Assert.assertNotNull(objCollection2);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "{}");
        org.junit.Assert.assertNotNull(objCollection12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(objSet15);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "{}");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{}" + "'", str20, "{}");
        org.junit.Assert.assertNotNull(objEnumeration22);
        org.junit.Assert.assertNotNull(objCollection23);
        org.junit.Assert.assertNotNull(objCollection26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(wildcardEnumeration37);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNotNull(wildcardEnumeration40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 10000L + "'", long42 == 10000L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 10000L + "'", long47 == 10000L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 10L + "'", long53 == 10L);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(objEnumeration55);
    }

    @Test
    public void test04281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04281");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties3 = new java.util.Properties();
        java.lang.Object obj5 = properties3.get((java.lang.Object) 0.0d);
        java.lang.Object obj6 = properties3.clone();
        java.lang.String str7 = properties3.toString();
        boolean boolean10 = properties3.remove((java.lang.Object) 0, (java.lang.Object) 'a');
        java.lang.Object obj11 = properties1.replace((java.lang.Object) 10.0d, (java.lang.Object) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setDefaultJtaTimeout((-1L));
        int int15 = atomikosProperties12.getConsoleFileLimit();
        java.util.Properties properties16 = atomikosProperties12.asProperties();
        java.util.Properties properties17 = new java.util.Properties();
        java.lang.Object obj19 = properties17.get((java.lang.Object) 0.0d);
        java.lang.Object obj20 = properties17.clone();
        java.lang.String str21 = properties17.toString();
        java.util.Properties properties22 = new java.util.Properties(properties17);
        java.util.Enumeration<java.lang.Object> objEnumeration23 = properties22.keys();
        java.util.Collection<java.lang.Object> objCollection24 = properties22.values();
        boolean boolean25 = properties16.contains((java.lang.Object) objCollection24);
        properties16.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties27.logBaseDir = "";
        atomikosProperties27.setConsoleFileCount((int) (short) 10);
        atomikosProperties27.setLogBaseDir("{}");
        java.util.Properties properties34 = atomikosProperties27.asProperties();
        java.util.Set<java.lang.String> strSet35 = properties34.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties36.setDefaultJtaTimeout((-1L));
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel39 = null;
        atomikosProperties36.consoleLogLevel = atomikosLoggingLevel39;
        atomikosProperties36.outputDir = "";
        int int43 = atomikosProperties36.maxActives;
        boolean boolean44 = atomikosProperties36.isThreadedTwoPhaseCommit();
        atomikosProperties36.consoleFileLimit = (short) 10;
        java.util.Properties properties47 = atomikosProperties36.asProperties();
        java.util.Enumeration<java.lang.Object> objEnumeration48 = properties47.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties49.enableLogging = true;
        long long52 = atomikosProperties49.getCheckpointInterval();
        java.lang.String str53 = atomikosProperties49.getService();
        atomikosProperties49.forceShutdownOnVmExit = false;
        java.lang.Object obj56 = properties34.replace((java.lang.Object) objEnumeration48, (java.lang.Object) atomikosProperties49);
        java.lang.Object obj57 = properties1.putIfAbsent((java.lang.Object) properties16, (java.lang.Object) atomikosProperties49);
        atomikosProperties49.transactionManagerUniqueName = "hi!";
        int int60 = atomikosProperties49.consoleFileLimit;
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "{}");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "{}" + "'", str7, "{}");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{}");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "{}" + "'", str21, "{}");
        org.junit.Assert.assertNotNull(objEnumeration23);
        org.junit.Assert.assertNotNull(objCollection24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(properties34);
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 50 + "'", int43 == 50);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(properties47);
        org.junit.Assert.assertNotNull(objEnumeration48);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 500L + "'", long52 == 500L);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
    }

    @Test
    public void test04282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04282");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.get((java.lang.Object) 0.0d);
        java.lang.Object obj3 = properties0.clone();
        java.lang.String str4 = properties0.toString();
        java.util.Properties properties5 = new java.util.Properties(properties0);
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Properties properties7 = new java.util.Properties(properties6);
        java.util.Collection<java.lang.Object> objCollection8 = properties6.values();
        int int9 = properties6.size();
        java.util.Enumeration<java.lang.Object> objEnumeration10 = properties6.elements();
        boolean boolean11 = properties5.equals((java.lang.Object) objEnumeration10);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery12 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long13 = recovery12.getRetryInterval();
        long long14 = recovery12.delay;
        boolean boolean15 = properties5.containsValue((java.lang.Object) recovery12);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int17 = atomikosProperties16.getConsoleFileCount();
        int int18 = atomikosProperties16.maxActives;
        atomikosProperties16.setConsoleFileName("");
        boolean boolean21 = atomikosProperties16.forceShutdownOnVmExit;
        long long22 = atomikosProperties16.maxTimeout;
        int int23 = atomikosProperties16.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int25 = atomikosProperties24.getConsoleFileCount();
        int int26 = atomikosProperties24.maxActives;
        atomikosProperties24.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel29 = org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN;
        atomikosProperties24.consoleLogLevel = atomikosLoggingLevel29;
        atomikosProperties16.setConsoleLogLevel(atomikosLoggingLevel29);
        java.lang.Object obj32 = properties5.get((java.lang.Object) atomikosLoggingLevel29);
        java.io.OutputStream outputStream33 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties5.storeToXML(outputStream33, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.output_dir=, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=10, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=-1}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{}" + "'", str4, "{}");
        org.junit.Assert.assertNotNull(objCollection8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(objEnumeration10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10000L + "'", long13 == 10000L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10000L + "'", long14 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 50 + "'", int18 == 50);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 300000L + "'", long22 == 300000L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 50 + "'", int26 == 50);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel29 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel29.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj32);
    }

    @Test
    public void test04283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04283");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        long long5 = atomikosProperties0.getMaxTimeout();
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet7 = properties6.keySet();
        atomikosProperties0.set(properties6, "hi!", (java.lang.Object) (-1.0f));
        java.lang.String str11 = atomikosProperties0.logBaseDir;
        java.lang.String str12 = atomikosProperties0.logBaseDir;
        java.lang.String str13 = atomikosProperties0.logBaseDir;
        boolean boolean14 = atomikosProperties0.isEnableLogging();
        java.lang.String str15 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.threadedTwoPhaseCommit = true;
        boolean boolean18 = atomikosProperties0.serialJtaTransactions;
        atomikosProperties0.forceShutdownOnVmExit = false;
        boolean boolean21 = atomikosProperties0.enableLogging;
        atomikosProperties0.maxActives = (short) 10;
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertNotNull(objSet7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test04284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04284");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.defaultJtaTimeout;
        java.lang.String str2 = atomikosProperties0.getLogBaseName();
        atomikosProperties0.allowSubTransactions = true;
        boolean boolean5 = atomikosProperties0.enableLogging;
        atomikosProperties0.transactionManagerUniqueName = "{}";
        atomikosProperties0.setCheckpointInterval(52L);
        java.lang.String str10 = atomikosProperties0.getConsoleFileName();
        long long11 = atomikosProperties0.checkpointInterval;
        int int12 = atomikosProperties0.consoleFileCount;
        atomikosProperties0.setDefaultJtaTimeout((long) (short) 0);
        atomikosProperties0.transactionManagerUniqueName = "tmlog";
        atomikosProperties0.transactionManagerUniqueName = "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.console_file_count=10, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir={true=10000}, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.output_dir=, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}";
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 10000L + "'", long1 == 10000L);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "tm.out" + "'", str10, "tm.out");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 52L + "'", long11 == 52L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test04285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04285");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Collection<java.lang.Object> objCollection2 = properties1.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties3 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties3.enableLogging = true;
        long long6 = atomikosProperties3.getCheckpointInterval();
        boolean boolean8 = properties1.remove((java.lang.Object) long6, (java.lang.Object) (byte) 100);
        boolean boolean10 = properties1.equals((java.lang.Object) (short) 1);
        java.util.Set<java.lang.String> strSet11 = properties1.stringPropertyNames();
        java.lang.String str12 = properties1.toString();
        java.util.Properties properties13 = new java.util.Properties(properties1);
        java.io.OutputStream outputStream14 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.storeToXML(outputStream14, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.console_file_count=10, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir={true=10000}, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.output_dir=, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection2);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "{}" + "'", str12, "{}");
    }

    @Test
    public void test04286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04286");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int1 = atomikosProperties0.getConsoleFileCount();
        int int2 = atomikosProperties0.maxActives;
        int int3 = atomikosProperties0.getMaxActives();
        atomikosProperties0.logBaseDir = "hi!";
        atomikosProperties0.allowSubTransactions = false;
        int int8 = atomikosProperties0.getConsoleFileCount();
        atomikosProperties0.serialJtaTransactions = true;
        boolean boolean11 = atomikosProperties0.forceShutdownOnVmExit;
        boolean boolean12 = atomikosProperties0.allowSubTransactions;
        atomikosProperties0.checkpointInterval = 52;
        boolean boolean15 = atomikosProperties0.isForceShutdownOnVmExit();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 50 + "'", int2 == 50);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 50 + "'", int3 == 50);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test04287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04287");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        atomikosProperties0.setLogBaseDir("{}");
        java.util.Properties properties7 = atomikosProperties0.asProperties();
        java.util.Set<java.lang.String> strSet8 = properties7.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int10 = atomikosProperties9.getConsoleFileCount();
        int int11 = atomikosProperties9.maxActives;
        atomikosProperties9.setConsoleFileName("");
        atomikosProperties9.transactionManagerUniqueName = "{}";
        java.util.Properties properties16 = atomikosProperties9.asProperties();
        boolean boolean17 = atomikosProperties9.threadedTwoPhaseCommit;
        atomikosProperties9.enableLogging = true;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int21 = atomikosProperties20.getConsoleFileCount();
        int int22 = atomikosProperties20.maxActives;
        atomikosProperties20.setConsoleFileName("");
        atomikosProperties20.transactionManagerUniqueName = "{}";
        atomikosProperties20.setMaxActives(0);
        boolean boolean29 = atomikosProperties20.forceShutdownOnVmExit;
        java.lang.Object obj30 = properties7.put((java.lang.Object) atomikosProperties9, (java.lang.Object) atomikosProperties20);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties31.logBaseDir = "";
        boolean boolean34 = atomikosProperties31.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery35 = atomikosProperties31.getRecovery();
        boolean boolean36 = properties7.contains((java.lang.Object) atomikosProperties31);
        java.lang.String str38 = properties7.getProperty("{{}={}}");
        java.util.Properties properties39 = new java.util.Properties(properties7);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 50 + "'", int11 == 50);
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 50 + "'", int22 == 50);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(recovery35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(str38);
    }

    @Test
    public void test04288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04288");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        long long5 = atomikosProperties0.getMaxTimeout();
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet7 = properties6.keySet();
        atomikosProperties0.set(properties6, "hi!", (java.lang.Object) (-1.0f));
        java.lang.Object obj13 = properties6.setProperty("", "hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties14.setDefaultJtaTimeout((-1L));
        java.util.Properties properties17 = new java.util.Properties();
        java.lang.Object obj19 = properties17.get((java.lang.Object) 0.0d);
        java.lang.Object obj20 = properties17.clone();
        boolean boolean22 = properties6.replace((java.lang.Object) (-1L), obj20, (java.lang.Object) 100.0d);
        java.util.Properties properties23 = new java.util.Properties();
        java.util.Properties properties24 = new java.util.Properties(properties23);
        properties24.clear();
        properties6.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties24);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties24.elements();
        java.lang.String str29 = properties24.getProperty("");
        java.util.Properties properties30 = new java.util.Properties(properties24);
        java.util.Enumeration<java.lang.Object> objEnumeration31 = properties30.elements();
        java.util.Set<java.lang.String> strSet32 = properties30.stringPropertyNames();
        java.util.Properties properties33 = new java.util.Properties();
        java.util.Properties properties34 = new java.util.Properties(properties33);
        java.util.Collection<java.lang.Object> objCollection35 = properties34.values();
        java.lang.Object obj38 = properties34.setProperty("hi!", "{}");
        java.lang.String str40 = properties34.getProperty("tmlog");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties41.enableLogging = true;
        int int44 = atomikosProperties41.consoleFileLimit;
        atomikosProperties41.logBaseName = "hi!";
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties47 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long48 = atomikosProperties47.defaultJtaTimeout;
        java.lang.String str49 = atomikosProperties47.getLogBaseName();
        atomikosProperties47.allowSubTransactions = true;
        boolean boolean52 = atomikosProperties47.enableLogging;
        java.lang.Object obj53 = properties34.getOrDefault((java.lang.Object) "hi!", (java.lang.Object) boolean52);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties54 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties54.logBaseDir = "";
        atomikosProperties54.setConsoleFileCount((int) (short) 10);
        atomikosProperties54.setLogBaseDir("{}");
        java.lang.String str61 = atomikosProperties54.getOutputDir();
        atomikosProperties54.setLogBaseName("hi!");
        boolean boolean64 = atomikosProperties54.isAllowSubTransactions();
        boolean boolean65 = atomikosProperties54.isThreadedTwoPhaseCommit();
        boolean boolean66 = atomikosProperties54.forceShutdownOnVmExit;
        boolean boolean67 = properties34.containsValue((java.lang.Object) atomikosProperties54);
        java.lang.String str68 = atomikosProperties54.consoleFileName;
        java.lang.Object obj69 = properties30.remove((java.lang.Object) str68);
        java.util.Set<java.lang.Object> objSet70 = properties30.keySet();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertNotNull(objSet7);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{}");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(objEnumeration31);
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNotNull(objCollection35);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 10000L + "'", long48 == 10000L);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "tmlog" + "'", str49, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertEquals("'" + obj53 + "' != '" + "{}" + "'", obj53, "{}");
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "tm.out" + "'", str68, "tm.out");
        org.junit.Assert.assertNull(obj69);
        org.junit.Assert.assertNotNull(objSet70);
    }

    @Test
    public void test04289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04289");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.maxRetries = (-1);
        recovery0.setDelay((long) (short) 0);
        recovery0.maxRetries = 0;
        recovery0.forgetOrphanedLogEntriesDelay = 100;
        recovery0.setMaxRetries((int) (byte) -1);
        recovery0.retryInterval = '4';
        recovery0.setForgetOrphanedLogEntriesDelay((long) '4');
        long long15 = recovery0.forgetOrphanedLogEntriesDelay;
        recovery0.setMaxRetries(5);
        recovery0.delay = 52L;
        recovery0.setDelay(500L);
        recovery0.setDelay((long) 21);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 52L + "'", long15 == 52L);
    }

    @Test
    public void test04290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04290");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        java.lang.String str5 = atomikosProperties0.logBaseName;
        java.lang.String str6 = atomikosProperties0.logBaseDir;
        long long7 = atomikosProperties0.defaultJtaTimeout;
        java.util.Properties properties8 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties9.logBaseDir = "";
        atomikosProperties9.setConsoleFileCount((int) (short) 10);
        long long14 = atomikosProperties9.getMaxTimeout();
        java.util.Properties properties15 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet16 = properties15.keySet();
        atomikosProperties9.set(properties15, "hi!", (java.lang.Object) (-1.0f));
        java.lang.Object obj22 = properties15.setProperty("", "hi!");
        java.util.Set<java.lang.String> strSet23 = properties15.stringPropertyNames();
        properties8.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties15);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties25.logBaseDir = "";
        atomikosProperties25.setConsoleFileCount((int) (short) 10);
        atomikosProperties25.setCheckpointInterval(10000L);
        long long32 = atomikosProperties25.maxTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel33 = org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO;
        atomikosProperties25.consoleLogLevel = atomikosLoggingLevel33;
        atomikosProperties25.consoleFileLimit = (byte) 1;
        boolean boolean37 = atomikosProperties25.isSerialJtaTransactions();
        java.lang.String str38 = atomikosProperties25.getLogBaseDir();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties39 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties39.logBaseDir = "";
        atomikosProperties39.setConsoleFileCount((int) (short) 10);
        java.lang.String str44 = atomikosProperties39.logBaseName;
        java.lang.String str45 = atomikosProperties39.logBaseDir;
        java.lang.String str46 = atomikosProperties39.getOutputDir();
        java.util.Properties properties47 = atomikosProperties39.asProperties();
        java.util.Collection<java.lang.Object> objCollection48 = properties47.values();
        java.lang.String str49 = properties47.toString();
        java.lang.Object obj50 = properties15.put((java.lang.Object) str38, (java.lang.Object) properties47);
        java.io.PrintStream printStream51 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties15.list(printStream51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tmlog" + "'", str5, "tmlog");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 300000L + "'", long14 == 300000L);
        org.junit.Assert.assertNotNull(objSet16);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 300000L + "'", long32 == 300000L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel33 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO + "'", atomikosLoggingLevel33.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "tmlog" + "'", str44, "tmlog");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(properties47);
        org.junit.Assert.assertNotNull(objCollection48);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=10, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir=, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}" + "'", str49, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=10, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir=, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        org.junit.Assert.assertEquals("'" + obj50 + "' != '" + "hi!" + "'", obj50, "hi!");
    }

    @Test
    public void test04291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04291");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Collection<java.lang.Object> objCollection2 = properties1.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties3 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties3.enableLogging = true;
        long long6 = atomikosProperties3.getCheckpointInterval();
        boolean boolean8 = properties1.remove((java.lang.Object) long6, (java.lang.Object) (byte) 100);
        boolean boolean10 = properties1.equals((java.lang.Object) (short) 1);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet11 = properties1.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setDefaultJtaTimeout((-1L));
        long long15 = atomikosProperties12.checkpointInterval;
        boolean boolean16 = atomikosProperties12.forceShutdownOnVmExit;
        atomikosProperties12.setThreadedTwoPhaseCommit(true);
        boolean boolean19 = properties1.contains((java.lang.Object) true);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties20.logBaseDir = "";
        atomikosProperties20.setConsoleFileCount((int) (short) 10);
        long long25 = atomikosProperties20.getMaxTimeout();
        java.util.Properties properties26 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet27 = properties26.keySet();
        atomikosProperties20.set(properties26, "hi!", (java.lang.Object) (-1.0f));
        java.lang.String str31 = atomikosProperties20.logBaseDir;
        java.lang.String str32 = atomikosProperties20.logBaseDir;
        java.lang.String str33 = atomikosProperties20.logBaseDir;
        boolean boolean34 = atomikosProperties20.isEnableLogging();
        boolean boolean35 = atomikosProperties20.forceShutdownOnVmExit;
        boolean boolean36 = properties1.containsValue((java.lang.Object) atomikosProperties20);
        boolean boolean37 = properties1.isEmpty();
        java.util.Properties properties38 = new java.util.Properties();
        java.lang.Object obj40 = properties38.get((java.lang.Object) 0.0d);
        java.lang.Object obj41 = properties38.clone();
        java.lang.String str42 = properties38.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties43 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties43.logBaseDir = "";
        atomikosProperties43.setConsoleFileCount((int) (short) 10);
        atomikosProperties43.setLogBaseDir("{}");
        boolean boolean50 = atomikosProperties43.isSerialJtaTransactions();
        java.lang.Object obj52 = properties38.putIfAbsent((java.lang.Object) boolean50, (java.lang.Object) 10000L);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet53 = properties38.entrySet();
        java.lang.String str54 = properties38.toString();
        boolean boolean55 = properties1.containsValue((java.lang.Object) str54);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties56 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties56.logBaseDir = "";
        atomikosProperties56.setConsoleFileCount((int) (short) 10);
        atomikosProperties56.setLogBaseDir("{}");
        java.util.Properties properties63 = atomikosProperties56.asProperties();
        java.util.Set<java.lang.String> strSet64 = properties63.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties65 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int66 = atomikosProperties65.getConsoleFileCount();
        int int67 = atomikosProperties65.maxActives;
        atomikosProperties65.setConsoleFileName("");
        atomikosProperties65.transactionManagerUniqueName = "{}";
        java.util.Properties properties72 = atomikosProperties65.asProperties();
        boolean boolean73 = atomikosProperties65.threadedTwoPhaseCommit;
        atomikosProperties65.enableLogging = true;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties76 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int77 = atomikosProperties76.getConsoleFileCount();
        int int78 = atomikosProperties76.maxActives;
        atomikosProperties76.setConsoleFileName("");
        atomikosProperties76.transactionManagerUniqueName = "{}";
        atomikosProperties76.setMaxActives(0);
        boolean boolean85 = atomikosProperties76.forceShutdownOnVmExit;
        java.lang.Object obj86 = properties63.put((java.lang.Object) atomikosProperties65, (java.lang.Object) atomikosProperties76);
        atomikosProperties65.setConsoleFileCount((int) '4');
        boolean boolean89 = properties1.equals((java.lang.Object) '4');
        java.util.Enumeration<java.lang.Object> objEnumeration90 = properties1.elements();
        properties1.clear();
        java.util.Properties properties92 = new java.util.Properties(properties1);
        java.util.Set<java.lang.Object> objSet93 = properties1.keySet();
        org.junit.Assert.assertNotNull(objCollection2);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(objEntrySet11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 500L + "'", long15 == 500L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 300000L + "'", long25 == 300000L);
        org.junit.Assert.assertNotNull(objSet27);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals(obj41.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "{}");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "{}" + "'", str42, "{}");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertNotNull(objEntrySet53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "{true=10000}" + "'", str54, "{true=10000}");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(properties63);
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 50 + "'", int67 == 50);
        org.junit.Assert.assertNotNull(properties72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 50 + "'", int78 == 50);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNull(obj86);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(objEnumeration90);
        org.junit.Assert.assertNotNull(objSet93);
    }

    @Test
    public void test04292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04292");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setDefaultJtaTimeout((-1L));
        long long3 = atomikosProperties0.checkpointInterval;
        boolean boolean4 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        int int7 = atomikosProperties0.getMaxActives();
        atomikosProperties0.setConsoleFileName("{com.atomikos.icatch.tmlog=-1}");
        atomikosProperties0.setSerialJtaTransactions(false);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 500L + "'", long3 == 500L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
    }

    @Test
    public void test04293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04293");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties5 = new java.util.Properties();
        java.lang.Object obj7 = properties5.get((java.lang.Object) 0.0d);
        java.lang.Object obj8 = properties5.clone();
        java.lang.String str9 = properties5.toString();
        boolean boolean12 = properties5.remove((java.lang.Object) 0, (java.lang.Object) 'a');
        java.lang.Object obj13 = properties3.replace((java.lang.Object) 10.0d, (java.lang.Object) properties5);
        java.lang.String str14 = properties5.toString();
        java.util.Properties properties15 = new java.util.Properties(properties5);
        java.util.Properties properties16 = new java.util.Properties();
        java.util.Properties properties17 = new java.util.Properties(properties16);
        java.util.Properties properties19 = new java.util.Properties();
        java.lang.Object obj21 = properties19.get((java.lang.Object) 0.0d);
        java.lang.Object obj22 = properties19.clone();
        java.lang.String str23 = properties19.toString();
        boolean boolean26 = properties19.remove((java.lang.Object) 0, (java.lang.Object) 'a');
        java.lang.Object obj27 = properties17.replace((java.lang.Object) 10.0d, (java.lang.Object) properties19);
        java.util.Properties properties28 = new java.util.Properties(properties17);
        properties15.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties28);
        boolean boolean30 = properties0.contains((java.lang.Object) properties15);
        boolean boolean31 = properties15.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery32 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery32.maxRetries = (-1);
        recovery32.setRetryInterval((long) (-1));
        java.lang.Object obj38 = properties15.putIfAbsent((java.lang.Object) (-1), (java.lang.Object) "tmlog");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties39 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties39.setDefaultJtaTimeout((-1L));
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel42 = null;
        atomikosProperties39.consoleLogLevel = atomikosLoggingLevel42;
        atomikosProperties39.outputDir = "";
        int int46 = atomikosProperties39.maxActives;
        boolean boolean47 = atomikosProperties39.isThreadedTwoPhaseCommit();
        atomikosProperties39.consoleFileLimit = (short) 10;
        java.util.Properties properties50 = atomikosProperties39.asProperties();
        java.util.Enumeration<java.lang.Object> objEnumeration51 = properties50.keys();
        boolean boolean52 = properties15.contains((java.lang.Object) properties50);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties53 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties53.logBaseDir = "";
        atomikosProperties53.setConsoleFileCount((int) (short) 10);
        java.lang.String str58 = atomikosProperties53.transactionManagerUniqueName;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel59 = atomikosProperties53.getConsoleLogLevel();
        java.lang.String str60 = atomikosProperties53.transactionManagerUniqueName;
        java.util.Properties properties61 = atomikosProperties53.asProperties();
        int int62 = atomikosProperties53.getConsoleFileCount();
        java.util.Properties properties63 = new java.util.Properties();
        java.util.Properties properties64 = new java.util.Properties(properties63);
        java.util.Collection<java.lang.Object> objCollection65 = properties63.values();
        java.util.Enumeration<java.lang.Object> objEnumeration66 = properties63.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties67 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties67.enableLogging = true;
        int int70 = atomikosProperties67.consoleFileLimit;
        atomikosProperties67.logBaseName = "hi!";
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery73 = atomikosProperties67.getRecovery();
        atomikosProperties67.checkpointInterval = (byte) 100;
        atomikosProperties67.setLogBaseDir("tm.out");
        java.lang.String str78 = atomikosProperties67.getOutputDir();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean79 = properties50.replace((java.lang.Object) int62, (java.lang.Object) objEnumeration66, (java.lang.Object) str78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "{}");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{}" + "'", str9, "{}");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "{}" + "'", str14, "{}");
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "{}");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "{}" + "'", str23, "{}");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 50 + "'", int46 == 50);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(properties50);
        org.junit.Assert.assertNotNull(objEnumeration51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel59 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel59.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(properties61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10 + "'", int62 == 10);
        org.junit.Assert.assertNotNull(objCollection65);
        org.junit.Assert.assertNotNull(objEnumeration66);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNotNull(recovery73);
        org.junit.Assert.assertNull(str78);
    }

    @Test
    public void test04294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04294");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        java.lang.String str5 = atomikosProperties0.logBaseName;
        java.lang.String str6 = atomikosProperties0.logBaseDir;
        int int7 = atomikosProperties0.getConsoleFileLimit();
        int int8 = atomikosProperties0.getConsoleFileCount();
        java.util.Properties properties9 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.logBaseDir = "";
        atomikosProperties10.setConsoleFileCount((int) (short) 10);
        long long15 = atomikosProperties10.getMaxTimeout();
        java.util.Properties properties16 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet17 = properties16.keySet();
        atomikosProperties10.set(properties16, "hi!", (java.lang.Object) (-1.0f));
        java.lang.String str21 = atomikosProperties10.logBaseDir;
        java.lang.String str22 = atomikosProperties10.logBaseDir;
        java.lang.String str23 = atomikosProperties10.logBaseDir;
        boolean boolean24 = atomikosProperties10.isEnableLogging();
        java.lang.String str25 = atomikosProperties10.getTransactionManagerUniqueName();
        atomikosProperties10.enableLogging = false;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery28 = atomikosProperties10.getRecovery();
        java.util.Properties properties29 = new java.util.Properties();
        java.util.Properties properties30 = new java.util.Properties(properties29);
        java.util.Collection<java.lang.Object> objCollection31 = properties29.values();
        java.util.Properties properties32 = new java.util.Properties(properties29);
        java.lang.Object obj35 = properties29.setProperty("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=-1, 0=INFO}", "{{}={}}");
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet36 = properties29.entrySet();
        java.lang.Object obj37 = properties9.replace((java.lang.Object) atomikosProperties10, (java.lang.Object) objEntrySet36);
        atomikosProperties10.forceShutdownOnVmExit = false;
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tmlog" + "'", str5, "tmlog");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 300000L + "'", long15 == 300000L);
        org.junit.Assert.assertNotNull(objSet17);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(recovery28);
        org.junit.Assert.assertNotNull(objCollection31);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNotNull(objEntrySet36);
        org.junit.Assert.assertNull(obj37);
    }

    @Test
    public void test04295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04295");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        long long5 = atomikosProperties0.getMaxTimeout();
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet7 = properties6.keySet();
        atomikosProperties0.set(properties6, "hi!", (java.lang.Object) (-1.0f));
        java.lang.String str11 = atomikosProperties0.logBaseDir;
        atomikosProperties0.outputDir = "hi!";
        java.lang.String str14 = atomikosProperties0.logBaseDir;
        int int15 = atomikosProperties0.consoleFileLimit;
        atomikosProperties0.enableLogging = false;
        atomikosProperties0.setMaxActives((int) (byte) -1);
        boolean boolean20 = atomikosProperties0.enableLogging;
        java.util.Properties properties21 = atomikosProperties0.asProperties();
        atomikosProperties0.logBaseName = "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.console_file_count=10, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir=, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.output_dir=hi!, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}";
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertNotNull(objSet7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(properties21);
    }

    @Test
    public void test04296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04296");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.get((java.lang.Object) 0.0d);
        java.lang.Object obj3 = properties0.clone();
        java.lang.String str4 = properties0.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties5.logBaseDir = "";
        atomikosProperties5.setConsoleFileCount((int) (short) 10);
        long long10 = atomikosProperties5.getMaxTimeout();
        java.util.Properties properties11 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet12 = properties11.keySet();
        atomikosProperties5.set(properties11, "hi!", (java.lang.Object) (-1.0f));
        java.lang.Object obj18 = properties11.setProperty("", "hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setDefaultJtaTimeout((-1L));
        java.util.Properties properties22 = new java.util.Properties();
        java.lang.Object obj24 = properties22.get((java.lang.Object) 0.0d);
        java.lang.Object obj25 = properties22.clone();
        boolean boolean27 = properties11.replace((java.lang.Object) (-1L), obj25, (java.lang.Object) 100.0d);
        java.util.Properties properties28 = new java.util.Properties();
        java.util.Properties properties29 = new java.util.Properties(properties28);
        properties29.clear();
        properties11.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties29);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties32.logBaseDir = "";
        atomikosProperties32.setConsoleFileCount((int) (short) 10);
        long long37 = atomikosProperties32.getMaxTimeout();
        java.util.Properties properties38 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet39 = properties38.keySet();
        atomikosProperties32.set(properties38, "hi!", (java.lang.Object) (-1.0f));
        java.lang.String str43 = atomikosProperties32.logBaseDir;
        java.lang.String str44 = atomikosProperties32.logBaseDir;
        java.util.Properties properties45 = atomikosProperties32.asProperties();
        java.lang.Object obj46 = properties0.replace((java.lang.Object) properties29, (java.lang.Object) atomikosProperties32);
        java.util.Set<java.lang.String> strSet47 = properties29.stringPropertyNames();
        java.util.Properties properties48 = new java.util.Properties(properties29);
        java.util.Properties properties49 = new java.util.Properties(properties29);
        java.lang.Class<?> wildcardClass50 = properties49.getClass();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{}" + "'", str4, "{}");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 300000L + "'", long10 == 300000L);
        org.junit.Assert.assertNotNull(objSet12);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "{}");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 300000L + "'", long37 == 300000L);
        org.junit.Assert.assertNotNull(objSet39);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(properties45);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test04297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04297");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        atomikosProperties0.setLogBaseDir("{}");
        java.util.Properties properties7 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "";
        atomikosProperties0.setTransactionManagerUniqueName("{}");
        long long12 = atomikosProperties0.getMaxTimeout();
        boolean boolean13 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.setThreadedTwoPhaseCommit(false);
        boolean boolean16 = atomikosProperties0.isAllowSubTransactions();
        atomikosProperties0.consoleFileCount = (-1);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 300000L + "'", long12 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test04298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04298");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.maxRetries = (-1);
        recovery0.setDelay((long) (short) 0);
        long long5 = recovery0.forgetOrphanedLogEntriesDelay;
        recovery0.retryInterval = 500L;
        recovery0.retryInterval = '4';
        long long10 = recovery0.getRetryInterval();
        int int11 = recovery0.getMaxRetries();
        recovery0.setRetryInterval((long) 50);
        recovery0.setMaxRetries(19);
        recovery0.maxRetries = 19;
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 86400000L + "'", long5 == 86400000L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 52L + "'", long10 == 52L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
    }

    @Test
    public void test04299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04299");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.enableLogging = true;
        long long3 = atomikosProperties0.getCheckpointInterval();
        java.lang.String str4 = atomikosProperties0.getService();
        java.lang.String str5 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setEnableLogging(false);
        atomikosProperties0.consoleFileCount = 0;
        long long10 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.setMaxTimeout((long) (byte) 10);
        boolean boolean13 = atomikosProperties0.isSerialJtaTransactions();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 500L + "'", long3 == 500L);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 300000L + "'", long10 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test04300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04300");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        boolean boolean3 = atomikosProperties0.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery4 = atomikosProperties0.getRecovery();
        int int5 = recovery4.getMaxRetries();
        int int6 = recovery4.maxRetries;
        recovery4.setDelay(0L);
        recovery4.delay = 21L;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(recovery4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5 + "'", int5 == 5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
    }

    @Test
    public void test04301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04301");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setDefaultJtaTimeout((-1L));
        long long3 = atomikosProperties0.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int5 = atomikosProperties4.getConsoleFileCount();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties6.logBaseDir = "";
        atomikosProperties6.setConsoleFileCount((int) (short) 10);
        atomikosProperties6.setCheckpointInterval(10000L);
        long long13 = atomikosProperties6.maxTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel14 = org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO;
        atomikosProperties6.consoleLogLevel = atomikosLoggingLevel14;
        atomikosProperties4.consoleLogLevel = atomikosLoggingLevel14;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel14;
        atomikosProperties0.forceShutdownOnVmExit = false;
        atomikosProperties0.checkpointInterval = (short) 1;
        int int22 = atomikosProperties0.getConsoleFileCount();
        atomikosProperties0.allowSubTransactions = false;
        atomikosProperties0.threadedTwoPhaseCommit = false;
        java.util.Properties properties27 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties28.logBaseDir = "";
        atomikosProperties28.setConsoleFileCount((int) (short) 10);
        atomikosProperties28.setLogBaseDir("{}");
        java.lang.String str35 = atomikosProperties28.getOutputDir();
        atomikosProperties28.setLogBaseName("hi!");
        boolean boolean38 = atomikosProperties28.isAllowSubTransactions();
        boolean boolean39 = atomikosProperties28.isThreadedTwoPhaseCommit();
        boolean boolean40 = atomikosProperties28.forceShutdownOnVmExit;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery41 = atomikosProperties28.getRecovery();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery42 = atomikosProperties28.recovery;
        recovery42.setMaxRetries(10);
        int int45 = recovery42.maxRetries;
        recovery42.setForgetOrphanedLogEntriesDelay((long) (byte) -1);
        int int48 = recovery42.maxRetries;
        recovery42.retryInterval = 35;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery51 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long52 = recovery51.getRetryInterval();
        long long53 = recovery51.getDelay();
        long long54 = recovery51.retryInterval;
        recovery51.forgetOrphanedLogEntriesDelay = 100L;
        java.lang.Object obj57 = properties27.putIfAbsent((java.lang.Object) recovery42, (java.lang.Object) 100L);
        recovery42.retryInterval = 0;
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 500L + "'", long3 == 500L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 300000L + "'", long13 == 300000L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel14 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO + "'", atomikosLoggingLevel14.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(properties27);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(recovery41);
        org.junit.Assert.assertNotNull(recovery42);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 10 + "'", int48 == 10);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 10000L + "'", long52 == 10000L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 10000L + "'", long53 == 10000L);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 10000L + "'", long54 == 10000L);
        org.junit.Assert.assertNull(obj57);
    }

    @Test
    public void test04302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04302");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Collection<java.lang.Object> objCollection2 = properties0.values();
        int int3 = properties0.size();
        boolean boolean4 = properties0.isEmpty();
        java.lang.Object obj5 = properties0.clone();
        java.lang.Object obj8 = properties0.setProperty("{com.atomikos.icatch.hi!=-1.0, =hi!}", "{com.atomikos.icatch.hi!=-1.0, =hi!}");
        java.util.Properties properties9 = new java.util.Properties();
        java.util.Properties properties10 = new java.util.Properties(properties9);
        java.util.Properties properties12 = new java.util.Properties();
        java.lang.Object obj14 = properties12.get((java.lang.Object) 0.0d);
        java.lang.Object obj15 = properties12.clone();
        java.lang.String str16 = properties12.toString();
        boolean boolean19 = properties12.remove((java.lang.Object) 0, (java.lang.Object) 'a');
        java.lang.Object obj20 = properties10.replace((java.lang.Object) 10.0d, (java.lang.Object) properties12);
        java.util.Properties properties21 = new java.util.Properties(properties12);
        java.util.Properties properties22 = new java.util.Properties(properties21);
        java.util.Properties properties23 = new java.util.Properties(properties21);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties24.setDefaultJtaTimeout((-1L));
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel27 = null;
        atomikosProperties24.consoleLogLevel = atomikosLoggingLevel27;
        atomikosProperties24.outputDir = "";
        int int31 = atomikosProperties24.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties32.logBaseDir = "";
        atomikosProperties32.setConsoleFileCount((int) (short) 10);
        long long37 = atomikosProperties32.getMaxTimeout();
        atomikosProperties32.service = "";
        java.lang.String str40 = atomikosProperties32.logBaseDir;
        boolean boolean41 = atomikosProperties32.threadedTwoPhaseCommit;
        long long42 = atomikosProperties32.checkpointInterval;
        boolean boolean43 = properties21.remove((java.lang.Object) int31, (java.lang.Object) atomikosProperties32);
        java.lang.Object obj46 = properties21.setProperty("{}", "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=10, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=true, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir=, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties47 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties47.setDefaultJtaTimeout((-1L));
        int int50 = atomikosProperties47.getConsoleFileLimit();
        java.util.Properties properties51 = atomikosProperties47.asProperties();
        boolean boolean52 = atomikosProperties47.forceShutdownOnVmExit;
        atomikosProperties47.setCheckpointInterval(10000L);
        atomikosProperties47.maxActives = 50;
        java.lang.Object obj57 = properties0.replace((java.lang.Object) "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=10, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=true, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir=, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}", (java.lang.Object) atomikosProperties47);
        atomikosProperties47.logBaseName = "{com.atomikos.icatch.hi!=-1.0}";
        org.junit.Assert.assertNotNull(objCollection2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "{}");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{}" + "'", str16, "{}");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 50 + "'", int31 == 50);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 300000L + "'", long37 == 300000L);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 500L + "'", long42 == 500L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(properties51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(obj57);
    }

    @Test
    public void test04303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04303");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long1 = recovery0.getRetryInterval();
        recovery0.delay = 10L;
        recovery0.setForgetOrphanedLogEntriesDelay(0L);
        long long6 = recovery0.getRetryInterval();
        recovery0.retryInterval = 5;
        long long9 = recovery0.getDelay();
        recovery0.maxRetries = 0;
        recovery0.retryInterval = 19L;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 10000L + "'", long1 == 10000L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10L + "'", long9 == 10L);
    }

    @Test
    public void test04304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04304");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        long long5 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.setSerialJtaTransactions(true);
        java.util.Properties properties8 = atomikosProperties0.asProperties();
        int int9 = atomikosProperties0.getConsoleFileLimit();
        atomikosProperties0.consoleFileName = "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=10, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir=, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}";
        atomikosProperties0.setForceShutdownOnVmExit(true);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
    }

    @Test
    public void test04305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04305");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.get((java.lang.Object) 0.0d);
        java.lang.Object obj3 = properties0.clone();
        java.lang.String str4 = properties0.toString();
        java.util.Properties properties5 = new java.util.Properties(properties0);
        java.util.Properties properties6 = new java.util.Properties(properties5);
        java.util.Properties properties7 = new java.util.Properties(properties6);
        java.util.Properties properties8 = new java.util.Properties();
        java.util.Properties properties9 = new java.util.Properties(properties8);
        java.util.Properties properties10 = new java.util.Properties();
        java.util.Properties properties11 = new java.util.Properties(properties10);
        java.util.Properties properties13 = new java.util.Properties();
        java.lang.Object obj15 = properties13.get((java.lang.Object) 0.0d);
        java.lang.Object obj16 = properties13.clone();
        java.lang.String str17 = properties13.toString();
        boolean boolean20 = properties13.remove((java.lang.Object) 0, (java.lang.Object) 'a');
        java.lang.Object obj21 = properties11.replace((java.lang.Object) 10.0d, (java.lang.Object) properties13);
        java.lang.String str22 = properties13.toString();
        java.util.Properties properties23 = new java.util.Properties(properties13);
        java.util.Properties properties24 = new java.util.Properties();
        java.util.Properties properties25 = new java.util.Properties(properties24);
        java.util.Properties properties27 = new java.util.Properties();
        java.lang.Object obj29 = properties27.get((java.lang.Object) 0.0d);
        java.lang.Object obj30 = properties27.clone();
        java.lang.String str31 = properties27.toString();
        boolean boolean34 = properties27.remove((java.lang.Object) 0, (java.lang.Object) 'a');
        java.lang.Object obj35 = properties25.replace((java.lang.Object) 10.0d, (java.lang.Object) properties27);
        java.util.Properties properties36 = new java.util.Properties(properties25);
        properties23.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties36);
        boolean boolean38 = properties8.contains((java.lang.Object) properties23);
        boolean boolean39 = properties23.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery40 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery40.maxRetries = (-1);
        recovery40.setRetryInterval((long) (-1));
        java.lang.Object obj46 = properties23.putIfAbsent((java.lang.Object) (-1), (java.lang.Object) "tmlog");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties47 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties47.setDefaultJtaTimeout((-1L));
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel50 = null;
        atomikosProperties47.consoleLogLevel = atomikosLoggingLevel50;
        atomikosProperties47.outputDir = "";
        int int54 = atomikosProperties47.maxActives;
        boolean boolean55 = atomikosProperties47.isThreadedTwoPhaseCommit();
        atomikosProperties47.consoleFileLimit = (short) 10;
        java.util.Properties properties58 = atomikosProperties47.asProperties();
        java.util.Enumeration<java.lang.Object> objEnumeration59 = properties58.keys();
        boolean boolean60 = properties23.contains((java.lang.Object) properties58);
        boolean boolean61 = properties6.equals((java.lang.Object) boolean60);
        java.util.Set<java.lang.Object> objSet62 = properties6.keySet();
        int int63 = properties6.size();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{}" + "'", str4, "{}");
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "{}");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "{}" + "'", str17, "{}");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{}" + "'", str22, "{}");
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "{}");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "{}" + "'", str31, "{}");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 50 + "'", int54 == 50);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(properties58);
        org.junit.Assert.assertNotNull(objEnumeration59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(objSet62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
    }

    @Test
    public void test04306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04306");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        atomikosProperties0.setLogBaseDir("{}");
        java.util.Properties properties7 = atomikosProperties0.asProperties();
        java.util.Set<java.lang.String> strSet8 = properties7.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int10 = atomikosProperties9.getConsoleFileCount();
        int int11 = atomikosProperties9.maxActives;
        atomikosProperties9.setConsoleFileName("");
        atomikosProperties9.transactionManagerUniqueName = "{}";
        java.util.Properties properties16 = atomikosProperties9.asProperties();
        boolean boolean17 = atomikosProperties9.threadedTwoPhaseCommit;
        atomikosProperties9.enableLogging = true;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int21 = atomikosProperties20.getConsoleFileCount();
        int int22 = atomikosProperties20.maxActives;
        atomikosProperties20.setConsoleFileName("");
        atomikosProperties20.transactionManagerUniqueName = "{}";
        atomikosProperties20.setMaxActives(0);
        boolean boolean29 = atomikosProperties20.forceShutdownOnVmExit;
        java.lang.Object obj30 = properties7.put((java.lang.Object) atomikosProperties9, (java.lang.Object) atomikosProperties20);
        atomikosProperties20.logBaseName = "{com.atomikos.icatch.hi!=-1.0}";
        atomikosProperties20.serialJtaTransactions = true;
        boolean boolean35 = atomikosProperties20.isForceShutdownOnVmExit();
        atomikosProperties20.setCheckpointInterval((long) (byte) 1);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 50 + "'", int11 == 50);
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 50 + "'", int22 == 50);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test04307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04307");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Collection<java.lang.Object> objCollection2 = properties0.values();
        java.util.Properties properties3 = new java.util.Properties(properties0);
        java.lang.String str5 = properties0.getProperty("hi!");
        java.lang.Object obj6 = properties0.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration7 = properties0.keys();
        java.util.Collection<java.lang.Object> objCollection8 = properties0.values();
        org.junit.Assert.assertNotNull(objCollection2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "{}");
        org.junit.Assert.assertNotNull(objEnumeration7);
        org.junit.Assert.assertNotNull(objCollection8);
    }

    @Test
    public void test04308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04308");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Collection<java.lang.Object> objCollection2 = properties0.values();
        int int3 = properties0.size();
        java.util.Enumeration<java.lang.Object> objEnumeration4 = properties0.elements();
        java.util.Properties properties5 = new java.util.Properties(properties0);
        java.util.Properties properties6 = new java.util.Properties(properties0);
        java.util.Properties properties7 = new java.util.Properties();
        java.lang.Object obj9 = properties7.get((java.lang.Object) 0.0d);
        java.lang.Object obj10 = properties7.clone();
        java.lang.String str11 = properties7.toString();
        java.util.Properties properties12 = new java.util.Properties(properties7);
        java.util.Enumeration<java.lang.Object> objEnumeration13 = properties12.keys();
        java.util.Collection<java.lang.Object> objCollection14 = properties12.values();
        java.util.Properties properties15 = new java.util.Properties();
        java.util.Properties properties16 = new java.util.Properties(properties15);
        java.util.Properties properties18 = new java.util.Properties();
        java.lang.Object obj20 = properties18.get((java.lang.Object) 0.0d);
        java.lang.Object obj21 = properties18.clone();
        java.lang.String str22 = properties18.toString();
        boolean boolean25 = properties18.remove((java.lang.Object) 0, (java.lang.Object) 'a');
        java.lang.Object obj26 = properties16.replace((java.lang.Object) 10.0d, (java.lang.Object) properties18);
        java.util.Properties properties27 = new java.util.Properties(properties16);
        java.util.Properties properties28 = new java.util.Properties();
        java.lang.Object obj30 = properties28.get((java.lang.Object) 0.0d);
        java.lang.Object obj31 = properties28.clone();
        java.lang.String str32 = properties28.toString();
        boolean boolean35 = properties28.remove((java.lang.Object) 0, (java.lang.Object) 'a');
        properties28.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int38 = atomikosProperties37.getConsoleFileCount();
        int int39 = atomikosProperties37.maxActives;
        atomikosProperties37.maxActives = 50;
        java.util.Properties properties42 = new java.util.Properties();
        java.util.Properties properties43 = new java.util.Properties(properties42);
        java.util.Collection<java.lang.Object> objCollection44 = properties42.values();
        java.util.Properties properties45 = new java.util.Properties();
        java.util.Properties properties46 = new java.util.Properties(properties45);
        java.util.Collection<java.lang.Object> objCollection47 = properties46.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties48 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties48.enableLogging = true;
        long long51 = atomikosProperties48.getCheckpointInterval();
        boolean boolean53 = properties46.remove((java.lang.Object) long51, (java.lang.Object) (byte) 100);
        boolean boolean55 = properties46.equals((java.lang.Object) (short) 1);
        java.lang.Object obj58 = properties46.setProperty("{}", "tmlog");
        java.util.Enumeration<java.lang.Object> objEnumeration59 = properties46.keys();
        java.util.Properties properties60 = new java.util.Properties();
        java.util.Properties properties61 = new java.util.Properties(properties60);
        boolean boolean62 = properties60.isEmpty();
        boolean boolean63 = properties42.remove((java.lang.Object) objEnumeration59, (java.lang.Object) properties60);
        boolean boolean64 = properties28.remove((java.lang.Object) 50, (java.lang.Object) properties60);
        java.lang.String str65 = properties60.toString();
        java.util.Properties properties66 = new java.util.Properties(properties60);
        boolean boolean67 = properties16.contains((java.lang.Object) properties66);
        boolean boolean69 = properties16.containsKey((java.lang.Object) 0);
        java.util.Properties properties70 = new java.util.Properties();
        java.util.Properties properties71 = new java.util.Properties(properties70);
        java.util.Collection<java.lang.Object> objCollection72 = properties71.values();
        java.lang.Object obj75 = properties71.setProperty("hi!", "{}");
        java.lang.String str77 = properties71.getProperty("tmlog");
        java.util.Enumeration<java.lang.Object> objEnumeration78 = properties71.elements();
        java.lang.Object obj79 = properties12.put((java.lang.Object) boolean69, (java.lang.Object) properties71);
        boolean boolean80 = properties0.containsKey((java.lang.Object) properties12);
        java.io.PrintWriter printWriter81 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties12.list(printWriter81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(objEnumeration4);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{}");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "{}" + "'", str11, "{}");
        org.junit.Assert.assertNotNull(objEnumeration13);
        org.junit.Assert.assertNotNull(objCollection14);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "{}");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{}" + "'", str22, "{}");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertEquals(obj31.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "{}");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "{}" + "'", str32, "{}");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 50 + "'", int39 == 50);
        org.junit.Assert.assertNotNull(objCollection44);
        org.junit.Assert.assertNotNull(objCollection47);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 500L + "'", long51 == 500L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertNotNull(objEnumeration59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "{}" + "'", str65, "{}");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(objCollection72);
        org.junit.Assert.assertNull(obj75);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertNotNull(objEnumeration78);
        org.junit.Assert.assertNull(obj79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test04309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04309");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        long long5 = atomikosProperties0.getMaxTimeout();
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet7 = properties6.keySet();
        atomikosProperties0.set(properties6, "hi!", (java.lang.Object) (-1.0f));
        java.lang.String str11 = atomikosProperties0.service;
        java.lang.String str12 = atomikosProperties0.getService();
        boolean boolean13 = atomikosProperties0.enableLogging;
        atomikosProperties0.setLogBaseDir("{com.atomikos.icatch.hi!=-1.0}");
        atomikosProperties0.setConsoleFileCount(0);
        java.util.Properties properties18 = new java.util.Properties();
        java.util.Properties properties19 = new java.util.Properties(properties18);
        java.util.Collection<java.lang.Object> objCollection20 = properties19.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties21.enableLogging = true;
        long long24 = atomikosProperties21.getCheckpointInterval();
        boolean boolean26 = properties19.remove((java.lang.Object) long24, (java.lang.Object) (byte) 100);
        boolean boolean28 = properties19.equals((java.lang.Object) (short) 1);
        java.util.Properties properties29 = new java.util.Properties(properties19);
        properties19.clear();
        java.util.Properties properties31 = new java.util.Properties();
        java.util.Properties properties32 = new java.util.Properties(properties31);
        java.util.Collection<java.lang.Object> objCollection33 = properties31.values();
        java.util.Properties properties34 = new java.util.Properties(properties31);
        java.util.Properties properties35 = new java.util.Properties();
        java.util.Properties properties36 = new java.util.Properties(properties35);
        java.util.Collection<java.lang.Object> objCollection37 = properties36.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties38.enableLogging = true;
        long long41 = atomikosProperties38.getCheckpointInterval();
        boolean boolean43 = properties36.remove((java.lang.Object) long41, (java.lang.Object) (byte) 100);
        boolean boolean45 = properties36.equals((java.lang.Object) (short) 1);
        java.util.Properties properties46 = new java.util.Properties(properties36);
        java.util.Set<java.lang.String> strSet47 = properties46.stringPropertyNames();
        java.lang.Object obj48 = properties34.remove((java.lang.Object) strSet47);
        properties19.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties34);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties51 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties51.enableLogging = true;
        int int54 = atomikosProperties51.consoleFileLimit;
        atomikosProperties51.logBaseName = "hi!";
        atomikosProperties51.setEnableLogging(false);
        atomikosProperties51.setTransactionManagerUniqueName("");
        atomikosProperties51.forceShutdownOnVmExit = true;
        atomikosProperties51.setLogBaseName("hi!");
        atomikosProperties51.setLogBaseName("{{}=tmlog}");
        atomikosProperties0.set(properties34, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=10, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir=, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}", (java.lang.Object) atomikosProperties51);
        int int68 = atomikosProperties0.getConsoleFileCount();
        atomikosProperties0.logBaseName = "{com.atomikos.icatch.console_file_name=, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name={}, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}";
        atomikosProperties0.checkpointInterval = 'a';
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertNotNull(objSet7);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objCollection20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 500L + "'", long24 == 500L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(objCollection33);
        org.junit.Assert.assertNotNull(objCollection37);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 500L + "'", long41 == 500L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
    }

    @Test
    public void test04310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04310");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties3 = new java.util.Properties();
        java.lang.Object obj5 = properties3.get((java.lang.Object) 0.0d);
        java.lang.Object obj6 = properties3.clone();
        java.lang.String str7 = properties3.toString();
        boolean boolean10 = properties3.remove((java.lang.Object) 0, (java.lang.Object) 'a');
        java.lang.Object obj11 = properties1.replace((java.lang.Object) 10.0d, (java.lang.Object) properties3);
        java.util.Properties properties12 = new java.util.Properties(properties3);
        java.util.Properties properties13 = new java.util.Properties(properties12);
        java.util.Properties properties14 = new java.util.Properties(properties12);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties15.enableLogging = true;
        long long18 = atomikosProperties15.getCheckpointInterval();
        java.lang.String str19 = atomikosProperties15.getOutputDir();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel20 = atomikosProperties15.getConsoleLogLevel();
        long long21 = atomikosProperties15.defaultJtaTimeout;
        atomikosProperties15.setForceShutdownOnVmExit(true);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int25 = atomikosProperties24.getConsoleFileCount();
        int int26 = atomikosProperties24.maxActives;
        java.lang.String str27 = atomikosProperties24.getService();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties28.logBaseDir = "";
        atomikosProperties28.setConsoleFileCount((int) (short) 10);
        atomikosProperties28.setCheckpointInterval(10000L);
        long long35 = atomikosProperties28.maxTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel36 = atomikosProperties28.getConsoleLogLevel();
        atomikosProperties24.consoleLogLevel = atomikosLoggingLevel36;
        java.lang.String str38 = atomikosProperties24.consoleFileName;
        atomikosProperties24.setCheckpointInterval((long) (short) 10);
        java.util.Properties properties41 = atomikosProperties24.asProperties();
        java.lang.String str42 = atomikosProperties24.getLogBaseDir();
        atomikosProperties24.consoleFileName = "{{}=tmlog}";
        boolean boolean45 = properties14.remove((java.lang.Object) atomikosProperties15, (java.lang.Object) atomikosProperties24);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "{}");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "{}" + "'", str7, "{}");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 500L + "'", long18 == 500L);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel20 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel20.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10000L + "'", long21 == 10000L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 50 + "'", int26 == 50);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 300000L + "'", long35 == 300000L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel36 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel36.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tm.out" + "'", str38, "tm.out");
        org.junit.Assert.assertNotNull(properties41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test04311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04311");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        atomikosProperties0.setLogBaseDir("{}");
        java.lang.String str7 = atomikosProperties0.getOutputDir();
        atomikosProperties0.setLogBaseName("hi!");
        boolean boolean10 = atomikosProperties0.isAllowSubTransactions();
        boolean boolean11 = atomikosProperties0.isThreadedTwoPhaseCommit();
        boolean boolean12 = atomikosProperties0.forceShutdownOnVmExit;
        boolean boolean13 = atomikosProperties0.enableLogging;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int15 = atomikosProperties14.getConsoleFileCount();
        int int16 = atomikosProperties14.maxActives;
        atomikosProperties14.setConsoleFileName("");
        atomikosProperties14.transactionManagerUniqueName = "{}";
        java.util.Properties properties21 = atomikosProperties14.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties23.logBaseDir = "";
        atomikosProperties23.setConsoleFileCount((int) (short) 10);
        long long28 = atomikosProperties23.getMaxTimeout();
        java.util.Properties properties29 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet30 = properties29.keySet();
        atomikosProperties23.set(properties29, "hi!", (java.lang.Object) (-1.0f));
        java.lang.Object obj36 = properties29.setProperty("", "hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties37.setDefaultJtaTimeout((-1L));
        java.util.Properties properties40 = new java.util.Properties();
        java.lang.Object obj42 = properties40.get((java.lang.Object) 0.0d);
        java.lang.Object obj43 = properties40.clone();
        boolean boolean45 = properties29.replace((java.lang.Object) (-1L), obj43, (java.lang.Object) 100.0d);
        java.util.Properties properties46 = new java.util.Properties();
        java.util.Properties properties47 = new java.util.Properties(properties46);
        properties47.clear();
        properties29.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties47);
        java.util.Enumeration<java.lang.Object> objEnumeration50 = properties47.elements();
        java.lang.String str52 = properties47.getProperty("");
        atomikosProperties0.set(properties21, "{com.atomikos.icatch.hi!=-1.0}", (java.lang.Object) "");
        java.util.Properties properties54 = new java.util.Properties(properties21);
        java.util.Enumeration<?> wildcardEnumeration55 = properties54.propertyNames();
        java.util.Properties properties56 = new java.util.Properties();
        java.lang.Object obj58 = properties56.get((java.lang.Object) 0.0d);
        java.lang.Object obj59 = properties56.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties60 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties60.enableLogging = true;
        long long63 = atomikosProperties60.getCheckpointInterval();
        java.lang.String str64 = atomikosProperties60.getService();
        java.lang.String str65 = atomikosProperties60.logBaseDir;
        atomikosProperties60.setEnableLogging(false);
        boolean boolean68 = atomikosProperties60.isEnableLogging();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties69 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties69.enableLogging = true;
        long long72 = atomikosProperties69.getCheckpointInterval();
        atomikosProperties69.setService("tmlog");
        atomikosProperties69.setConsoleFileName("{}");
        java.util.Properties properties77 = atomikosProperties69.asProperties();
        atomikosProperties69.setCheckpointInterval((long) (short) 10);
        atomikosProperties69.logBaseName = "";
        java.lang.Object obj82 = properties56.put((java.lang.Object) boolean68, (java.lang.Object) atomikosProperties69);
        atomikosProperties69.setForceShutdownOnVmExit(true);
        boolean boolean85 = properties54.equals((java.lang.Object) true);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 50 + "'", int16 == 50);
        org.junit.Assert.assertNotNull(properties21);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 300000L + "'", long28 == 300000L);
        org.junit.Assert.assertNotNull(objSet30);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "{}");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(objEnumeration50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(wildcardEnumeration55);
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertNotNull(obj59);
        org.junit.Assert.assertEquals(obj59.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj59), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj59), "{}");
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 500L + "'", long63 == 500L);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 500L + "'", long72 == 500L);
        org.junit.Assert.assertNotNull(properties77);
        org.junit.Assert.assertNull(obj82);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test04312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04312");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int1 = atomikosProperties0.getConsoleFileCount();
        int int2 = atomikosProperties0.maxActives;
        java.lang.String str3 = atomikosProperties0.getService();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties4.logBaseDir = "";
        atomikosProperties4.setConsoleFileCount((int) (short) 10);
        atomikosProperties4.setCheckpointInterval(10000L);
        long long11 = atomikosProperties4.maxTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel12 = atomikosProperties4.getConsoleLogLevel();
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel12;
        java.util.Properties properties14 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties15.logBaseDir = "";
        atomikosProperties15.setConsoleFileCount((int) (short) 10);
        long long20 = atomikosProperties15.getMaxTimeout();
        java.util.Properties properties21 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet22 = properties21.keySet();
        atomikosProperties15.set(properties21, "hi!", (java.lang.Object) (-1.0f));
        atomikosProperties15.setConsoleFileLimit((int) (short) 100);
        atomikosProperties15.setForceShutdownOnVmExit(false);
        java.lang.String str30 = atomikosProperties15.logBaseName;
        boolean boolean31 = properties14.contains((java.lang.Object) atomikosProperties15);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery32 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery32.maxRetries = (-1);
        recovery32.setDelay((long) (short) 0);
        recovery32.maxRetries = 0;
        recovery32.forgetOrphanedLogEntriesDelay = 100;
        recovery32.setMaxRetries((int) (byte) -1);
        recovery32.retryInterval = '4';
        recovery32.setForgetOrphanedLogEntriesDelay((long) '4');
        long long47 = recovery32.forgetOrphanedLogEntriesDelay;
        recovery32.setMaxRetries(5);
        recovery32.forgetOrphanedLogEntriesDelay = 5L;
        java.lang.Object obj52 = properties14.remove((java.lang.Object) 5L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties53 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties53.logBaseDir = "";
        boolean boolean56 = atomikosProperties53.isForceShutdownOnVmExit();
        atomikosProperties53.outputDir = "hi!";
        java.util.Properties properties59 = new java.util.Properties();
        java.lang.Object obj61 = properties59.get((java.lang.Object) 0.0d);
        java.lang.Object obj62 = properties59.clone();
        java.lang.String str63 = properties59.toString();
        boolean boolean66 = properties59.remove((java.lang.Object) 0, (java.lang.Object) 'a');
        java.util.Properties properties67 = new java.util.Properties(properties59);
        java.lang.Object obj68 = properties14.put((java.lang.Object) atomikosProperties53, (java.lang.Object) properties59);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties69 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties69.enableLogging = true;
        long long72 = atomikosProperties69.getCheckpointInterval();
        atomikosProperties69.setService("tmlog");
        atomikosProperties69.setConsoleFileName("{}");
        java.util.Properties properties77 = atomikosProperties69.asProperties();
        atomikosProperties69.setCheckpointInterval((long) (short) 10);
        atomikosProperties69.logBaseName = "";
        atomikosProperties69.logBaseName = "{true=10000}";
        java.lang.String str84 = atomikosProperties69.logBaseName;
        boolean boolean85 = atomikosProperties69.isSerialJtaTransactions();
        atomikosProperties69.consoleFileName = "{true=10000}";
        atomikosProperties69.setSerialJtaTransactions(false);
        java.lang.Object obj90 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj91 = properties59.putIfAbsent((java.lang.Object) false, obj90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 50 + "'", int2 == 50);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 300000L + "'", long11 == 300000L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel12 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel12.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 300000L + "'", long20 == 300000L);
        org.junit.Assert.assertNotNull(objSet22);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "tmlog" + "'", str30, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 52L + "'", long47 == 52L);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(obj61);
        org.junit.Assert.assertNotNull(obj62);
        org.junit.Assert.assertEquals(obj62.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj62), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj62), "{}");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "{}" + "'", str63, "{}");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(obj68);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 500L + "'", long72 == 500L);
        org.junit.Assert.assertNotNull(properties77);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "{true=10000}" + "'", str84, "{true=10000}");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
    }

    @Test
    public void test04313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04313");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        long long5 = atomikosProperties0.getMaxTimeout();
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet7 = properties6.keySet();
        atomikosProperties0.set(properties6, "hi!", (java.lang.Object) (-1.0f));
        java.lang.String str11 = atomikosProperties0.logBaseDir;
        java.lang.String str12 = atomikosProperties0.logBaseDir;
        java.util.Properties properties13 = atomikosProperties0.asProperties();
        atomikosProperties0.threadedTwoPhaseCommit = true;
        java.util.Properties properties16 = atomikosProperties0.asProperties();
        java.util.Properties properties17 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties18.logBaseDir = "";
        atomikosProperties18.setConsoleFileCount((int) (short) 10);
        atomikosProperties18.setService("");
        atomikosProperties18.service = "tmlog";
        atomikosProperties18.setService("tmlog");
        atomikosProperties18.setService("{}");
        atomikosProperties18.enableLogging = true;
        java.lang.String str33 = atomikosProperties18.getConsoleFileName();
        atomikosProperties18.checkpointInterval = 'a';
        atomikosProperties18.allowSubTransactions = false;
        java.lang.Object obj38 = properties17.get((java.lang.Object) false);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertNotNull(objSet7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(properties13);
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertNotNull(properties17);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "tm.out" + "'", str33, "tm.out");
        org.junit.Assert.assertNull(obj38);
    }

    @Test
    public void test04314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04314");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        atomikosProperties0.setCheckpointInterval(10000L);
        long long7 = atomikosProperties0.maxTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel8 = org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel8;
        atomikosProperties0.consoleFileLimit = (byte) 1;
        boolean boolean12 = atomikosProperties0.isSerialJtaTransactions();
        java.lang.String str13 = atomikosProperties0.getOutputDir();
        long long14 = atomikosProperties0.defaultJtaTimeout;
        int int15 = atomikosProperties0.getConsoleFileLimit();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel8 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO + "'", atomikosLoggingLevel8.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10000L + "'", long14 == 10000L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
    }

    @Test
    public void test04315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04315");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.enableLogging = true;
        long long3 = atomikosProperties0.getCheckpointInterval();
        atomikosProperties0.setService("tmlog");
        atomikosProperties0.setCheckpointInterval((long) (short) 0);
        java.lang.String str8 = atomikosProperties0.service;
        boolean boolean9 = atomikosProperties0.threadedTwoPhaseCommit;
        atomikosProperties0.consoleFileCount = 0;
        boolean boolean12 = atomikosProperties0.isEnableLogging();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 500L + "'", long3 == 500L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "tmlog" + "'", str8, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test04316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04316");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.enableLogging = true;
        int int3 = atomikosProperties0.consoleFileLimit;
        atomikosProperties0.logBaseName = "hi!";
        boolean boolean6 = atomikosProperties0.isThreadedTwoPhaseCommit();
        java.lang.String str7 = atomikosProperties0.service;
        int int8 = atomikosProperties0.getConsoleFileCount();
        atomikosProperties0.setCheckpointInterval((long) 50);
        boolean boolean11 = atomikosProperties0.allowSubTransactions;
        java.lang.String str12 = atomikosProperties0.getConsoleFileName();
        boolean boolean13 = atomikosProperties0.isThreadedTwoPhaseCommit();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "tm.out" + "'", str12, "tm.out");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test04317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04317");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.get((java.lang.Object) 0.0d);
        java.lang.Object obj3 = properties0.clone();
        java.lang.String str4 = properties0.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties5.logBaseDir = "";
        atomikosProperties5.setConsoleFileCount((int) (short) 10);
        atomikosProperties5.setLogBaseDir("{}");
        boolean boolean12 = atomikosProperties5.isSerialJtaTransactions();
        java.lang.Object obj14 = properties0.putIfAbsent((java.lang.Object) boolean12, (java.lang.Object) 10000L);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet15 = properties0.entrySet();
        java.util.Properties properties16 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties17.logBaseDir = "";
        atomikosProperties17.setConsoleFileCount((int) (short) 10);
        atomikosProperties17.setLogBaseDir("{}");
        java.lang.String str24 = atomikosProperties17.getOutputDir();
        atomikosProperties17.setLogBaseName("hi!");
        boolean boolean27 = atomikosProperties17.isAllowSubTransactions();
        boolean boolean28 = atomikosProperties17.isThreadedTwoPhaseCommit();
        boolean boolean29 = atomikosProperties17.forceShutdownOnVmExit;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery30 = atomikosProperties17.getRecovery();
        int int31 = atomikosProperties17.getConsoleFileLimit();
        boolean boolean32 = properties0.containsValue((java.lang.Object) atomikosProperties17);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery33 = atomikosProperties17.getRecovery();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{}" + "'", str4, "{}");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(objEntrySet15);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(recovery30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(recovery33);
    }

    @Test
    public void test04318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04318");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.enableLogging = true;
        long long3 = atomikosProperties0.getCheckpointInterval();
        java.lang.String str4 = atomikosProperties0.getService();
        java.lang.String str5 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setEnableLogging(false);
        atomikosProperties0.consoleFileCount = 0;
        long long10 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.service = "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=-1, 0=INFO}";
        boolean boolean13 = atomikosProperties0.forceShutdownOnVmExit;
        boolean boolean14 = atomikosProperties0.serialJtaTransactions;
        java.lang.String str15 = atomikosProperties0.consoleFileName;
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 500L + "'", long3 == 500L);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 300000L + "'", long10 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "tm.out" + "'", str15, "tm.out");
    }

    @Test
    public void test04319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04319");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        atomikosProperties0.setService("");
        atomikosProperties0.service = "tmlog";
        atomikosProperties0.setService("tmlog");
        atomikosProperties0.setService("{}");
        long long13 = atomikosProperties0.defaultJtaTimeout;
        java.lang.String str14 = atomikosProperties0.getLogBaseDir();
        java.util.Properties properties15 = atomikosProperties0.asProperties();
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10000L + "'", long13 == 10000L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(properties15);
    }

    @Test
    public void test04320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04320");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        long long5 = atomikosProperties0.getMaxTimeout();
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet7 = properties6.keySet();
        atomikosProperties0.set(properties6, "hi!", (java.lang.Object) (-1.0f));
        java.lang.Object obj13 = properties6.setProperty("", "hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties14.setDefaultJtaTimeout((-1L));
        java.util.Properties properties17 = new java.util.Properties();
        java.lang.Object obj19 = properties17.get((java.lang.Object) 0.0d);
        java.lang.Object obj20 = properties17.clone();
        boolean boolean22 = properties6.replace((java.lang.Object) (-1L), obj20, (java.lang.Object) 100.0d);
        java.util.Properties properties23 = new java.util.Properties();
        java.util.Properties properties24 = new java.util.Properties(properties23);
        properties24.clear();
        properties6.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties24);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties24.elements();
        java.lang.String str29 = properties24.getProperty("");
        java.util.Properties properties30 = new java.util.Properties(properties24);
        java.util.Enumeration<java.lang.Object> objEnumeration31 = properties30.elements();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet32 = properties30.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties33.logBaseDir = "";
        atomikosProperties33.setConsoleFileCount((int) (short) 10);
        java.lang.String str38 = atomikosProperties33.logBaseName;
        java.lang.String str39 = atomikosProperties33.logBaseDir;
        long long40 = atomikosProperties33.defaultJtaTimeout;
        java.util.Properties properties41 = atomikosProperties33.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties42.logBaseDir = "";
        atomikosProperties42.setConsoleFileCount((int) (short) 10);
        long long47 = atomikosProperties42.getMaxTimeout();
        java.util.Properties properties48 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet49 = properties48.keySet();
        atomikosProperties42.set(properties48, "hi!", (java.lang.Object) (-1.0f));
        java.lang.Object obj55 = properties48.setProperty("", "hi!");
        java.util.Set<java.lang.String> strSet56 = properties48.stringPropertyNames();
        properties41.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties48);
        java.util.Set<java.lang.Object> objSet58 = properties41.keySet();
        java.util.Set<java.lang.Object> objSet59 = properties41.keySet();
        boolean boolean60 = properties30.contains((java.lang.Object) objSet59);
        java.io.PrintWriter printWriter61 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties30.list(printWriter61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertNotNull(objSet7);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{}");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(objEnumeration31);
        org.junit.Assert.assertNotNull(objEntrySet32);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 10000L + "'", long40 == 10000L);
        org.junit.Assert.assertNotNull(properties41);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 300000L + "'", long47 == 300000L);
        org.junit.Assert.assertNotNull(objSet49);
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertNotNull(objSet58);
        org.junit.Assert.assertNotNull(objSet59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test04321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04321");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        java.lang.String str5 = atomikosProperties0.logBaseName;
        atomikosProperties0.outputDir = "";
        java.util.Properties properties8 = atomikosProperties0.asProperties();
        java.util.Set<java.lang.String> strSet9 = properties8.stringPropertyNames();
        java.util.Enumeration<java.lang.Object> objEnumeration10 = properties8.elements();
        java.util.Properties properties11 = new java.util.Properties(properties8);
        java.util.Set<java.lang.String> strSet12 = properties11.stringPropertyNames();
        java.util.Properties properties13 = new java.util.Properties(properties11);
        java.util.Properties properties14 = new java.util.Properties(properties13);
        java.util.Properties properties15 = new java.util.Properties(properties14);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tmlog" + "'", str5, "tmlog");
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNotNull(objEnumeration10);
        org.junit.Assert.assertNotNull(strSet12);
    }

    @Test
    public void test04322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04322");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        properties0.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery3 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery3.maxRetries = (-1);
        recovery3.setDelay((long) (short) 0);
        recovery3.maxRetries = 0;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery10 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long11 = recovery10.getRetryInterval();
        long long12 = recovery10.retryInterval;
        boolean boolean13 = properties0.remove((java.lang.Object) 0, (java.lang.Object) long12);
        java.lang.String str14 = properties0.toString();
        java.util.Enumeration<java.lang.Object> objEnumeration15 = properties0.elements();
        java.util.Set<java.lang.String> strSet16 = properties0.stringPropertyNames();
        java.util.Properties properties17 = new java.util.Properties(properties0);
        java.util.Properties properties18 = new java.util.Properties(properties17);
        properties18.clear();
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10000L + "'", long11 == 10000L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10000L + "'", long12 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "{}" + "'", str14, "{}");
        org.junit.Assert.assertNotNull(objEnumeration15);
        org.junit.Assert.assertNotNull(strSet16);
    }

    @Test
    public void test04323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04323");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.defaultJtaTimeout;
        atomikosProperties0.logBaseName = "tm.out";
        java.lang.String str4 = atomikosProperties0.consoleFileName;
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        java.lang.String str7 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.logBaseDir = "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=hi!, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}";
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 10000L + "'", long1 == 10000L);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tm.out" + "'", str4, "tm.out");
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test04324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04324");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        java.lang.String str5 = atomikosProperties0.logBaseName;
        atomikosProperties0.outputDir = "";
        java.util.Properties properties8 = atomikosProperties0.asProperties();
        int int9 = atomikosProperties0.getConsoleFileLimit();
        atomikosProperties0.setConsoleFileName("{true=10000}");
        atomikosProperties0.setTransactionManagerUniqueName("hi!");
        boolean boolean14 = atomikosProperties0.isAllowSubTransactions();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tmlog" + "'", str5, "tmlog");
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test04325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04325");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.maxRetries = (-1);
        recovery0.setDelay((long) (short) 0);
        long long5 = recovery0.forgetOrphanedLogEntriesDelay;
        recovery0.retryInterval = 500L;
        recovery0.retryInterval = '4';
        long long10 = recovery0.getRetryInterval();
        long long11 = recovery0.getForgetOrphanedLogEntriesDelay();
        int int12 = recovery0.getMaxRetries();
        recovery0.maxRetries = 21;
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 86400000L + "'", long5 == 86400000L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 52L + "'", long10 == 52L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 86400000L + "'", long11 == 86400000L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test04326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04326");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        long long5 = atomikosProperties0.getMaxTimeout();
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet7 = properties6.keySet();
        atomikosProperties0.set(properties6, "hi!", (java.lang.Object) (-1.0f));
        java.lang.String str11 = atomikosProperties0.logBaseDir;
        boolean boolean12 = atomikosProperties0.enableLogging;
        atomikosProperties0.setLogBaseDir("");
        atomikosProperties0.setAllowSubTransactions(true);
        int int17 = atomikosProperties0.maxActives;
        java.util.Properties properties18 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties20.logBaseDir = "";
        atomikosProperties20.setConsoleFileCount((int) (short) 10);
        java.lang.String str25 = atomikosProperties20.logBaseName;
        atomikosProperties20.outputDir = "";
        java.util.Properties properties28 = atomikosProperties20.asProperties();
        atomikosProperties20.setConsoleFileLimit(1);
        java.lang.Object obj31 = properties18.put((java.lang.Object) 0L, (java.lang.Object) atomikosProperties20);
        int int32 = atomikosProperties20.consoleFileLimit;
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertNotNull(objSet7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 50 + "'", int17 == 50);
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "tmlog" + "'", str25, "tmlog");
        org.junit.Assert.assertNotNull(properties28);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
    }

    @Test
    public void test04327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04327");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.enableLogging = true;
        int int3 = atomikosProperties0.consoleFileLimit;
        atomikosProperties0.logBaseName = "hi!";
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int7 = atomikosProperties6.getConsoleFileCount();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties8.logBaseDir = "";
        atomikosProperties8.setConsoleFileCount((int) (short) 10);
        atomikosProperties8.setCheckpointInterval(10000L);
        long long15 = atomikosProperties8.maxTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel16 = org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO;
        atomikosProperties8.consoleLogLevel = atomikosLoggingLevel16;
        atomikosProperties6.consoleLogLevel = atomikosLoggingLevel16;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel16;
        java.lang.String str20 = atomikosProperties0.consoleFileName;
        java.lang.String str21 = atomikosProperties0.logBaseName;
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 300000L + "'", long15 == 300000L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel16 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO + "'", atomikosLoggingLevel16.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "tm.out" + "'", str20, "tm.out");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
    }

    @Test
    public void test04328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04328");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Collection<java.lang.Object> objCollection2 = properties1.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties3 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties3.enableLogging = true;
        long long6 = atomikosProperties3.getCheckpointInterval();
        boolean boolean8 = properties1.remove((java.lang.Object) long6, (java.lang.Object) (byte) 100);
        boolean boolean10 = properties1.equals((java.lang.Object) (short) 1);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet11 = properties1.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setDefaultJtaTimeout((-1L));
        long long15 = atomikosProperties12.checkpointInterval;
        boolean boolean16 = atomikosProperties12.forceShutdownOnVmExit;
        atomikosProperties12.setThreadedTwoPhaseCommit(true);
        boolean boolean19 = properties1.contains((java.lang.Object) true);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties20.logBaseDir = "";
        atomikosProperties20.setConsoleFileCount((int) (short) 10);
        long long25 = atomikosProperties20.getMaxTimeout();
        java.util.Properties properties26 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet27 = properties26.keySet();
        atomikosProperties20.set(properties26, "hi!", (java.lang.Object) (-1.0f));
        java.lang.String str31 = atomikosProperties20.logBaseDir;
        java.lang.String str32 = atomikosProperties20.logBaseDir;
        java.lang.String str33 = atomikosProperties20.logBaseDir;
        boolean boolean34 = atomikosProperties20.isEnableLogging();
        boolean boolean35 = atomikosProperties20.forceShutdownOnVmExit;
        boolean boolean36 = properties1.containsValue((java.lang.Object) atomikosProperties20);
        atomikosProperties20.consoleFileName = "";
        int int39 = atomikosProperties20.maxActives;
        java.util.Properties properties40 = atomikosProperties20.asProperties();
        java.util.Set<java.lang.Object> objSet41 = properties40.keySet();
        org.junit.Assert.assertNotNull(objCollection2);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(objEntrySet11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 500L + "'", long15 == 500L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 300000L + "'", long25 == 300000L);
        org.junit.Assert.assertNotNull(objSet27);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 50 + "'", int39 == 50);
        org.junit.Assert.assertNotNull(properties40);
        org.junit.Assert.assertNotNull(objSet41);
    }

    @Test
    public void test04329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04329");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        long long5 = atomikosProperties0.getMaxTimeout();
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet7 = properties6.keySet();
        atomikosProperties0.set(properties6, "hi!", (java.lang.Object) (-1.0f));
        java.lang.String str11 = atomikosProperties0.logBaseDir;
        boolean boolean12 = atomikosProperties0.enableLogging;
        int int13 = atomikosProperties0.maxActives;
        boolean boolean14 = atomikosProperties0.isForceShutdownOnVmExit();
        long long15 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.consoleFileLimit = (short) 0;
        atomikosProperties0.setOutputDir("");
        boolean boolean20 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.allowSubTransactions = false;
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertNotNull(objSet7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 50 + "'", int13 == 50);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10000L + "'", long15 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test04330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04330");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Set<java.lang.String> strSet2 = properties1.stringPropertyNames();
        java.util.Properties properties3 = new java.util.Properties();
        java.util.Properties properties4 = new java.util.Properties(properties3);
        properties3.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery6 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery6.maxRetries = (-1);
        recovery6.setDelay((long) (short) 0);
        recovery6.maxRetries = 0;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery13 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long14 = recovery13.getRetryInterval();
        long long15 = recovery13.retryInterval;
        boolean boolean16 = properties3.remove((java.lang.Object) 0, (java.lang.Object) long15);
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<?> wildcardEnumeration18 = properties3.propertyNames();
        java.lang.String str21 = properties3.getProperty("{{{}={}}={com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=-1, 0=INFO}}", "{com.atomikos.icatch.console_file_name=, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name={}, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10000L + "'", long14 == 10000L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10000L + "'", long15 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(wildcardEnumeration18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "{com.atomikos.icatch.console_file_name=, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name={}, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}" + "'", str21, "{com.atomikos.icatch.console_file_name=, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name={}, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
    }

    @Test
    public void test04331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04331");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        java.lang.String str5 = atomikosProperties0.logBaseName;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel6 = org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel6;
        boolean boolean8 = atomikosProperties0.enableLogging;
        boolean boolean9 = atomikosProperties0.allowSubTransactions;
        atomikosProperties0.serialJtaTransactions = false;
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tmlog" + "'", str5, "tmlog");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel6 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel6.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test04332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04332");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        boolean boolean3 = atomikosProperties0.isForceShutdownOnVmExit();
        int int4 = atomikosProperties0.consoleFileLimit;
        atomikosProperties0.consoleFileCount = 100;
        boolean boolean7 = atomikosProperties0.threadedTwoPhaseCommit;
        atomikosProperties0.enableLogging = true;
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        java.lang.String str12 = atomikosProperties0.getService();
        int int13 = atomikosProperties0.consoleFileLimit;
        java.lang.String str14 = atomikosProperties0.getLogBaseName();
        java.lang.String str15 = atomikosProperties0.getOutputDir();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "tmlog" + "'", str14, "tmlog");
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test04333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04333");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int1 = atomikosProperties0.getConsoleFileCount();
        int int2 = atomikosProperties0.maxActives;
        atomikosProperties0.setConsoleFileName("");
        atomikosProperties0.transactionManagerUniqueName = "{}";
        java.util.Properties properties7 = atomikosProperties0.asProperties();
        atomikosProperties0.setConsoleFileLimit((int) (short) -1);
        java.lang.String str10 = atomikosProperties0.outputDir;
        java.util.Properties properties11 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel12 = atomikosProperties0.getConsoleLogLevel();
        atomikosProperties0.service = "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=10, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir=, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}";
        boolean boolean15 = atomikosProperties0.isThreadedTwoPhaseCommit();
        java.lang.String str16 = atomikosProperties0.logBaseName;
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 50 + "'", int2 == 50);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel12 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel12.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tmlog" + "'", str16, "tmlog");
    }

    @Test
    public void test04334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04334");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        long long5 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.service = "";
        java.lang.String str8 = atomikosProperties0.logBaseDir;
        atomikosProperties0.logBaseName = "tmlog";
        atomikosProperties0.consoleFileName = "{true=10000}";
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery13 = atomikosProperties0.recovery;
        int int14 = atomikosProperties0.maxActives;
        atomikosProperties0.logBaseDir = "{com.atomikos.icatch.console_file_name={}, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=10, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.service=tmlog, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}";
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(recovery13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 50 + "'", int14 == 50);
    }

    @Test
    public void test04335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04335");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        long long5 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.service = "";
        java.lang.String str8 = atomikosProperties0.logBaseDir;
        atomikosProperties0.logBaseName = "tmlog";
        atomikosProperties0.consoleFileName = "{true=10000}";
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery13 = atomikosProperties0.recovery;
        long long14 = recovery13.getForgetOrphanedLogEntriesDelay();
        recovery13.setRetryInterval(300000L);
        int int17 = recovery13.maxRetries;
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(recovery13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 86400000L + "'", long14 == 86400000L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
    }

    @Test
    public void test04336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04336");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        atomikosProperties0.setLogBaseDir("{}");
        java.util.Properties properties7 = atomikosProperties0.asProperties();
        java.util.Set<java.lang.String> strSet8 = properties7.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int10 = atomikosProperties9.getConsoleFileCount();
        int int11 = atomikosProperties9.maxActives;
        atomikosProperties9.setConsoleFileName("");
        atomikosProperties9.transactionManagerUniqueName = "{}";
        java.util.Properties properties16 = atomikosProperties9.asProperties();
        boolean boolean17 = atomikosProperties9.threadedTwoPhaseCommit;
        atomikosProperties9.enableLogging = true;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int21 = atomikosProperties20.getConsoleFileCount();
        int int22 = atomikosProperties20.maxActives;
        atomikosProperties20.setConsoleFileName("");
        atomikosProperties20.transactionManagerUniqueName = "{}";
        atomikosProperties20.setMaxActives(0);
        boolean boolean29 = atomikosProperties20.forceShutdownOnVmExit;
        java.lang.Object obj30 = properties7.put((java.lang.Object) atomikosProperties9, (java.lang.Object) atomikosProperties20);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties31.logBaseDir = "";
        boolean boolean34 = atomikosProperties31.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery35 = atomikosProperties31.getRecovery();
        boolean boolean36 = properties7.contains((java.lang.Object) atomikosProperties31);
        java.lang.String str37 = atomikosProperties31.logBaseName;
        int int38 = atomikosProperties31.getConsoleFileCount();
        atomikosProperties31.setForceShutdownOnVmExit(true);
        boolean boolean41 = atomikosProperties31.isEnableLogging();
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 50 + "'", int11 == 50);
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 50 + "'", int22 == 50);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(recovery35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "tmlog" + "'", str37, "tmlog");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test04337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04337");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.enableLogging = true;
        int int3 = atomikosProperties0.consoleFileLimit;
        atomikosProperties0.logBaseName = "hi!";
        boolean boolean6 = atomikosProperties0.isThreadedTwoPhaseCommit();
        boolean boolean7 = atomikosProperties0.enableLogging;
        java.util.Properties properties8 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int10 = atomikosProperties9.getConsoleFileCount();
        int int11 = atomikosProperties9.maxActives;
        java.lang.String str12 = atomikosProperties9.getService();
        int int13 = atomikosProperties9.getConsoleFileCount();
        java.util.Properties properties14 = new java.util.Properties();
        java.util.Properties properties15 = new java.util.Properties(properties14);
        java.util.Collection<java.lang.Object> objCollection16 = properties15.values();
        java.lang.Object obj19 = properties15.setProperty("hi!", "{}");
        java.lang.String str21 = properties15.getProperty("tmlog");
        properties15.clear();
        java.lang.Object obj23 = properties15.clone();
        java.util.Properties properties24 = new java.util.Properties();
        java.util.Properties properties25 = new java.util.Properties(properties24);
        java.util.Collection<java.lang.Object> objCollection26 = properties24.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties27.logBaseDir = "";
        atomikosProperties27.setConsoleFileCount((int) (short) 10);
        atomikosProperties27.setLogBaseDir("{}");
        java.util.Properties properties34 = atomikosProperties27.asProperties();
        atomikosProperties27.service = "";
        atomikosProperties27.setTransactionManagerUniqueName("{}");
        boolean boolean39 = properties24.equals((java.lang.Object) "{}");
        boolean boolean40 = properties8.replace((java.lang.Object) atomikosProperties9, obj23, (java.lang.Object) boolean39);
        java.lang.Object obj41 = properties8.clone();
        java.util.Properties properties42 = new java.util.Properties(properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties43 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties43.enableLogging = true;
        long long46 = atomikosProperties43.getCheckpointInterval();
        boolean boolean47 = atomikosProperties43.isThreadedTwoPhaseCommit();
        long long48 = atomikosProperties43.defaultJtaTimeout;
        java.util.Properties properties49 = new java.util.Properties();
        java.util.Properties properties50 = new java.util.Properties(properties49);
        java.util.Collection<java.lang.Object> objCollection51 = properties50.values();
        boolean boolean52 = properties50.isEmpty();
        boolean boolean53 = properties50.isEmpty();
        java.util.Set<java.lang.String> strSet54 = properties50.stringPropertyNames();
        java.lang.Object obj55 = properties8.getOrDefault((java.lang.Object) long48, (java.lang.Object) strSet54);
        java.lang.Object obj56 = null;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties57 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties57.setDefaultJtaTimeout((-1L));
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel60 = null;
        atomikosProperties57.consoleLogLevel = atomikosLoggingLevel60;
        atomikosProperties57.outputDir = "";
        boolean boolean64 = atomikosProperties57.allowSubTransactions;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj65 = properties8.put(obj56, (java.lang.Object) atomikosProperties57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 50 + "'", int11 == 50);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(objCollection16);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "{}");
        org.junit.Assert.assertNotNull(objCollection26);
        org.junit.Assert.assertNotNull(properties34);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(obj41);
// flaky:         org.junit.Assert.assertEquals(obj41.toString(), "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=hi!, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=hi!, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=hi!, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 500L + "'", long46 == 500L);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 10000L + "'", long48 == 10000L);
        org.junit.Assert.assertNotNull(objCollection51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(strSet54);
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertEquals(obj55.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj55), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj55), "[]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
    }

    @Test
    public void test04338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04338");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        atomikosProperties0.setLogBaseDir("{}");
        boolean boolean7 = atomikosProperties0.isSerialJtaTransactions();
        boolean boolean8 = atomikosProperties0.allowSubTransactions;
        atomikosProperties0.consoleFileLimit = 50;
        atomikosProperties0.allowSubTransactions = true;
        java.lang.String str13 = atomikosProperties0.getOutputDir();
        boolean boolean14 = atomikosProperties0.forceShutdownOnVmExit;
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test04339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04339");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        java.lang.String str5 = atomikosProperties0.logBaseName;
        atomikosProperties0.outputDir = "";
        java.util.Properties properties8 = atomikosProperties0.asProperties();
        int int9 = atomikosProperties0.getConsoleFileLimit();
        java.util.Properties properties10 = atomikosProperties0.asProperties();
        boolean boolean11 = atomikosProperties0.isSerialJtaTransactions();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tmlog" + "'", str5, "tmlog");
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test04340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04340");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        long long5 = atomikosProperties0.getMaxTimeout();
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet7 = properties6.keySet();
        atomikosProperties0.set(properties6, "hi!", (java.lang.Object) (-1.0f));
        java.lang.String str11 = atomikosProperties0.logBaseDir;
        java.lang.String str12 = atomikosProperties0.logBaseDir;
        java.util.Properties properties13 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel14 = atomikosProperties0.getConsoleLogLevel();
        boolean boolean15 = atomikosProperties0.isAllowSubTransactions();
        atomikosProperties0.logBaseDir = "{}";
        long long18 = atomikosProperties0.defaultJtaTimeout;
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertNotNull(objSet7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(properties13);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel14 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel14.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10000L + "'", long18 == 10000L);
    }

    @Test
    public void test04341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04341");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int1 = atomikosProperties0.getConsoleFileCount();
        int int2 = atomikosProperties0.maxActives;
        java.lang.String str3 = atomikosProperties0.getService();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties4.logBaseDir = "";
        atomikosProperties4.setConsoleFileCount((int) (short) 10);
        atomikosProperties4.setCheckpointInterval(10000L);
        long long11 = atomikosProperties4.maxTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel12 = atomikosProperties4.getConsoleLogLevel();
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel12;
        java.lang.String str14 = atomikosProperties0.consoleFileName;
        atomikosProperties0.setCheckpointInterval((long) (short) 10);
        atomikosProperties0.setLogBaseName("tm.out");
        atomikosProperties0.setConsoleFileCount((int) (byte) -1);
        java.util.Properties properties21 = atomikosProperties0.asProperties();
        java.io.OutputStream outputStream22 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties21.storeToXML(outputStream22, "", "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=-1, 0=INFO}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 50 + "'", int2 == 50);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 300000L + "'", long11 == 300000L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel12 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel12.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "tm.out" + "'", str14, "tm.out");
        org.junit.Assert.assertNotNull(properties21);
    }

    @Test
    public void test04342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04342");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int1 = atomikosProperties0.getConsoleFileCount();
        int int2 = atomikosProperties0.maxActives;
        atomikosProperties0.setConsoleFileName("");
        java.lang.String str5 = atomikosProperties0.getOutputDir();
        atomikosProperties0.service = "tmlog";
        java.lang.String str8 = atomikosProperties0.transactionManagerUniqueName;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties9.setDefaultJtaTimeout((-1L));
        long long12 = atomikosProperties9.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int14 = atomikosProperties13.getConsoleFileCount();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties15.logBaseDir = "";
        atomikosProperties15.setConsoleFileCount((int) (short) 10);
        atomikosProperties15.setCheckpointInterval(10000L);
        long long22 = atomikosProperties15.maxTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel23 = org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO;
        atomikosProperties15.consoleLogLevel = atomikosLoggingLevel23;
        atomikosProperties13.consoleLogLevel = atomikosLoggingLevel23;
        atomikosProperties9.consoleLogLevel = atomikosLoggingLevel23;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel23);
        atomikosProperties0.logBaseName = "{com.atomikos.icatch.hi!=-1.0}";
        atomikosProperties0.setLogBaseDir("tm.out");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 50 + "'", int2 == 50);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 500L + "'", long12 == 500L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 300000L + "'", long22 == 300000L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel23 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO + "'", atomikosLoggingLevel23.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO));
    }

    @Test
    public void test04343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04343");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        atomikosProperties0.setLogBaseDir("{}");
        java.util.Properties properties7 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "";
        atomikosProperties0.setTransactionManagerUniqueName("{}");
        atomikosProperties0.setTransactionManagerUniqueName("{}");
        atomikosProperties0.checkpointInterval = (-1L);
        boolean boolean16 = atomikosProperties0.enableLogging;
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test04344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04344");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long1 = recovery0.getRetryInterval();
        recovery0.delay = 10L;
        recovery0.setForgetOrphanedLogEntriesDelay(0L);
        long long6 = recovery0.getRetryInterval();
        recovery0.maxRetries = 1;
        long long9 = recovery0.getRetryInterval();
        recovery0.setForgetOrphanedLogEntriesDelay(500L);
        long long12 = recovery0.getForgetOrphanedLogEntriesDelay();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 10000L + "'", long1 == 10000L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10000L + "'", long9 == 10000L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 500L + "'", long12 == 500L);
    }

    @Test
    public void test04345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04345");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        long long5 = atomikosProperties0.getMaxTimeout();
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet7 = properties6.keySet();
        atomikosProperties0.set(properties6, "hi!", (java.lang.Object) (-1.0f));
        java.lang.Object obj13 = properties6.setProperty("", "hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties14.setDefaultJtaTimeout((-1L));
        java.util.Properties properties17 = new java.util.Properties();
        java.lang.Object obj19 = properties17.get((java.lang.Object) 0.0d);
        java.lang.Object obj20 = properties17.clone();
        boolean boolean22 = properties6.replace((java.lang.Object) (-1L), obj20, (java.lang.Object) 100.0d);
        java.util.Properties properties23 = new java.util.Properties();
        java.util.Properties properties24 = new java.util.Properties(properties23);
        properties24.clear();
        properties6.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties24);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet27 = properties6.entrySet();
        java.lang.String str28 = properties6.toString();
        java.util.Enumeration<java.lang.Object> objEnumeration29 = properties6.keys();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertNotNull(objSet7);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{}");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objEntrySet27);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "{com.atomikos.icatch.hi!=-1.0, =hi!}" + "'", str28, "{com.atomikos.icatch.hi!=-1.0, =hi!}");
        org.junit.Assert.assertNotNull(objEnumeration29);
    }

    @Test
    public void test04346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04346");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.defaultJtaTimeout;
        java.lang.String str2 = atomikosProperties0.getLogBaseName();
        atomikosProperties0.allowSubTransactions = true;
        boolean boolean5 = atomikosProperties0.isAllowSubTransactions();
        boolean boolean6 = atomikosProperties0.isThreadedTwoPhaseCommit();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 10000L + "'", long1 == 10000L);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test04347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04347");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        long long5 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.service = "";
        java.lang.String str8 = atomikosProperties0.logBaseDir;
        atomikosProperties0.logBaseName = "tmlog";
        atomikosProperties0.transactionManagerUniqueName = "{}";
        boolean boolean13 = atomikosProperties0.isForceShutdownOnVmExit();
        java.util.Properties properties14 = atomikosProperties0.asProperties();
        java.util.Collection<java.lang.Object> objCollection15 = properties14.values();
        int int16 = properties14.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties17.logBaseDir = "";
        atomikosProperties17.setConsoleFileCount((int) (short) 10);
        long long22 = atomikosProperties17.getMaxTimeout();
        java.util.Properties properties23 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet24 = properties23.keySet();
        atomikosProperties17.set(properties23, "hi!", (java.lang.Object) (-1.0f));
        java.lang.String str28 = atomikosProperties17.logBaseDir;
        java.lang.String str29 = atomikosProperties17.logBaseDir;
        java.lang.String str30 = atomikosProperties17.logBaseDir;
        java.lang.String str31 = atomikosProperties17.getService();
        atomikosProperties17.checkpointInterval = 100L;
        atomikosProperties17.setService("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=-1, 0=INFO}");
        boolean boolean36 = properties14.contains((java.lang.Object) "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=-1, 0=INFO}");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertNotNull(objCollection15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 21 + "'", int16 == 21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 300000L + "'", long22 == 300000L);
        org.junit.Assert.assertNotNull(objSet24);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test04348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04348");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.enableLogging = true;
        long long3 = atomikosProperties0.getCheckpointInterval();
        atomikosProperties0.setSerialJtaTransactions(false);
        boolean boolean6 = atomikosProperties0.enableLogging;
        atomikosProperties0.setEnableLogging(false);
        atomikosProperties0.setMaxTimeout((long) (byte) 1);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery11 = atomikosProperties0.getRecovery();
        boolean boolean12 = atomikosProperties0.threadedTwoPhaseCommit;
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 500L + "'", long3 == 500L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(recovery11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test04349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04349");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.checkpointInterval = 0;
        boolean boolean5 = atomikosProperties0.isThreadedTwoPhaseCommit();
        atomikosProperties0.setSerialJtaTransactions(false);
        long long8 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.setSerialJtaTransactions(true);
        long long11 = atomikosProperties0.maxTimeout;
        boolean boolean12 = atomikosProperties0.serialJtaTransactions;
        atomikosProperties0.setService("hi!");
        atomikosProperties0.setForceShutdownOnVmExit(false);
        atomikosProperties0.setDefaultJtaTimeout((long) 2);
        long long19 = atomikosProperties0.getCheckpointInterval();
        atomikosProperties0.setThreadedTwoPhaseCommit(false);
        java.lang.String str22 = atomikosProperties0.transactionManagerUniqueName;
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 300000L + "'", long8 == 300000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 300000L + "'", long11 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test04350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04350");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setDefaultJtaTimeout((-1L));
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel3 = null;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel3;
        boolean boolean5 = atomikosProperties0.enableLogging;
        atomikosProperties0.logBaseDir = "{}";
        atomikosProperties0.setSerialJtaTransactions(false);
        boolean boolean10 = atomikosProperties0.isSerialJtaTransactions();
        int int11 = atomikosProperties0.getMaxActives();
        java.lang.String str12 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.setTransactionManagerUniqueName("");
        java.util.Properties properties15 = atomikosProperties0.asProperties();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 50 + "'", int11 == 50);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(properties15);
    }

    @Test
    public void test04351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04351");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        java.lang.String str5 = atomikosProperties0.logBaseName;
        java.lang.String str6 = atomikosProperties0.logBaseDir;
        long long7 = atomikosProperties0.defaultJtaTimeout;
        java.util.Properties properties8 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery9 = atomikosProperties0.getRecovery();
        recovery9.maxRetries = (short) 10;
        recovery9.setDelay((long) 18);
        long long14 = recovery9.delay;
        recovery9.maxRetries = 1;
        recovery9.setDelay(97L);
        recovery9.retryInterval = 20L;
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tmlog" + "'", str5, "tmlog");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertNotNull(recovery9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 18L + "'", long14 == 18L);
    }

    @Test
    public void test04352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04352");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        java.lang.String str5 = atomikosProperties0.logBaseName;
        atomikosProperties0.outputDir = "";
        java.util.Properties properties8 = atomikosProperties0.asProperties();
        java.util.Properties properties9 = atomikosProperties0.asProperties();
        long long10 = atomikosProperties0.defaultJtaTimeout;
        long long11 = atomikosProperties0.maxTimeout;
        java.lang.String str12 = atomikosProperties0.getTransactionManagerUniqueName();
        boolean boolean13 = atomikosProperties0.forceShutdownOnVmExit;
        long long14 = atomikosProperties0.getMaxTimeout();
        long long15 = atomikosProperties0.getDefaultJtaTimeout();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tmlog" + "'", str5, "tmlog");
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 300000L + "'", long11 == 300000L);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 300000L + "'", long14 == 300000L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10000L + "'", long15 == 10000L);
    }

    @Test
    public void test04353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04353");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Collection<java.lang.Object> objCollection2 = properties1.values();
        java.util.Properties properties3 = new java.util.Properties();
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Collection<java.lang.Object> objCollection5 = properties3.values();
        java.util.Enumeration<java.lang.Object> objEnumeration6 = properties3.keys();
        boolean boolean7 = properties1.contains((java.lang.Object) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties8.enableLogging = true;
        long long11 = atomikosProperties8.getCheckpointInterval();
        java.lang.String str12 = atomikosProperties8.getService();
        java.lang.String str13 = atomikosProperties8.logBaseDir;
        atomikosProperties8.setEnableLogging(false);
        atomikosProperties8.consoleFileCount = 0;
        long long18 = atomikosProperties8.getMaxTimeout();
        int int19 = atomikosProperties8.consoleFileLimit;
        java.util.Properties properties20 = atomikosProperties8.asProperties();
        java.util.Properties properties21 = new java.util.Properties(properties20);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int23 = atomikosProperties22.getConsoleFileCount();
        int int24 = atomikosProperties22.maxActives;
        atomikosProperties22.setConsoleFileName("");
        atomikosProperties22.transactionManagerUniqueName = "{}";
        java.util.Properties properties29 = atomikosProperties22.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties30.logBaseDir = "";
        atomikosProperties30.setConsoleFileCount((int) (short) 10);
        long long35 = atomikosProperties30.getMaxTimeout();
        java.util.Properties properties36 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet37 = properties36.keySet();
        atomikosProperties30.set(properties36, "hi!", (java.lang.Object) (-1.0f));
        java.lang.Object obj43 = properties36.setProperty("", "hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties44.setDefaultJtaTimeout((-1L));
        java.util.Properties properties47 = new java.util.Properties();
        java.lang.Object obj49 = properties47.get((java.lang.Object) 0.0d);
        java.lang.Object obj50 = properties47.clone();
        boolean boolean52 = properties36.replace((java.lang.Object) (-1L), obj50, (java.lang.Object) 100.0d);
        java.util.Properties properties53 = new java.util.Properties();
        java.util.Properties properties54 = new java.util.Properties(properties53);
        properties54.clear();
        properties36.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties54);
        java.util.Enumeration<java.lang.Object> objEnumeration57 = properties54.elements();
        java.lang.String str59 = properties54.getProperty("");
        java.util.Properties properties60 = new java.util.Properties(properties54);
        java.util.Enumeration<java.lang.Object> objEnumeration61 = properties60.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties62 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int63 = atomikosProperties62.getConsoleFileCount();
        int int64 = atomikosProperties62.maxActives;
        atomikosProperties62.setEnableLogging(true);
        boolean boolean67 = atomikosProperties62.isThreadedTwoPhaseCommit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel68 = atomikosProperties62.consoleLogLevel;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties69 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties69.logBaseDir = "";
        atomikosProperties69.setConsoleFileCount((int) (short) 10);
        long long74 = atomikosProperties69.getMaxTimeout();
        java.util.Properties properties75 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet76 = properties75.keySet();
        atomikosProperties69.set(properties75, "hi!", (java.lang.Object) (-1.0f));
        java.lang.String str80 = atomikosProperties69.logBaseDir;
        boolean boolean81 = atomikosProperties69.enableLogging;
        java.lang.Object obj82 = properties60.putIfAbsent((java.lang.Object) atomikosLoggingLevel68, (java.lang.Object) atomikosProperties69);
        boolean boolean83 = properties3.replace((java.lang.Object) properties20, (java.lang.Object) atomikosProperties22, (java.lang.Object) atomikosLoggingLevel68);
        atomikosProperties22.consoleFileLimit = 21;
        atomikosProperties22.maxTimeout = (-1);
        org.junit.Assert.assertNotNull(objCollection2);
        org.junit.Assert.assertNotNull(objCollection5);
        org.junit.Assert.assertNotNull(objEnumeration6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 500L + "'", long11 == 500L);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 300000L + "'", long18 == 300000L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(properties20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 50 + "'", int24 == 50);
        org.junit.Assert.assertNotNull(properties29);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 300000L + "'", long35 == 300000L);
        org.junit.Assert.assertNotNull(objSet37);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertEquals(obj50.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj50), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj50), "{}");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objEnumeration57);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(objEnumeration61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 50 + "'", int64 == 50);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel68 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel68.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 300000L + "'", long74 == 300000L);
        org.junit.Assert.assertNotNull(objSet76);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNull(obj82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test04354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04354");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        long long5 = atomikosProperties0.getMaxTimeout();
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet7 = properties6.keySet();
        atomikosProperties0.set(properties6, "hi!", (java.lang.Object) (-1.0f));
        java.lang.String str11 = atomikosProperties0.logBaseDir;
        java.lang.String str12 = atomikosProperties0.logBaseDir;
        java.lang.String str13 = atomikosProperties0.logBaseDir;
        boolean boolean14 = atomikosProperties0.isAllowSubTransactions();
        atomikosProperties0.setConsoleFileName("{com.atomikos.icatch.hi!=-1.0, =hi!}");
        int int17 = atomikosProperties0.consoleFileLimit;
        atomikosProperties0.setConsoleFileLimit(22);
        atomikosProperties0.setCheckpointInterval((long) 35);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertNotNull(objSet7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
    }

    @Test
    public void test04355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04355");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setDefaultJtaTimeout((-1L));
        long long3 = atomikosProperties0.checkpointInterval;
        java.lang.String str4 = atomikosProperties0.getLogBaseName();
        atomikosProperties0.setDefaultJtaTimeout(300000L);
        atomikosProperties0.maxActives = 0;
        java.lang.String str9 = atomikosProperties0.getService();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 500L + "'", long3 == 500L);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tmlog" + "'", str4, "tmlog");
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test04356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04356");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.enableLogging = true;
        long long3 = atomikosProperties0.getCheckpointInterval();
        atomikosProperties0.setService("tmlog");
        atomikosProperties0.setConsoleFileName("{}");
        java.util.Properties properties8 = atomikosProperties0.asProperties();
        atomikosProperties0.setCheckpointInterval((long) (short) 10);
        boolean boolean11 = atomikosProperties0.isAllowSubTransactions();
        atomikosProperties0.allowSubTransactions = true;
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 500L + "'", long3 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test04357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04357");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.enableLogging = true;
        long long3 = atomikosProperties0.getCheckpointInterval();
        atomikosProperties0.setService("tmlog");
        atomikosProperties0.setConsoleFileLimit((int) (short) 0);
        java.util.Properties properties8 = new java.util.Properties();
        java.util.Properties properties9 = new java.util.Properties(properties8);
        java.util.Collection<java.lang.Object> objCollection10 = properties9.values();
        java.util.Properties properties11 = new java.util.Properties();
        java.util.Properties properties12 = new java.util.Properties(properties11);
        java.util.Collection<java.lang.Object> objCollection13 = properties11.values();
        java.util.Enumeration<java.lang.Object> objEnumeration14 = properties11.keys();
        boolean boolean15 = properties9.contains((java.lang.Object) properties11);
        boolean boolean16 = properties9.isEmpty();
        boolean boolean17 = properties9.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery19 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery19.maxRetries = (-1);
        recovery19.setDelay((long) (short) 0);
        recovery19.maxRetries = (short) -1;
        long long26 = recovery19.retryInterval;
        int int27 = recovery19.getMaxRetries();
        atomikosProperties0.set(properties9, "tmlog", (java.lang.Object) int27);
        boolean boolean29 = atomikosProperties0.forceShutdownOnVmExit;
        boolean boolean30 = atomikosProperties0.allowSubTransactions;
        atomikosProperties0.consoleFileCount = 2;
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 500L + "'", long3 == 500L);
        org.junit.Assert.assertNotNull(objCollection10);
        org.junit.Assert.assertNotNull(objCollection13);
        org.junit.Assert.assertNotNull(objEnumeration14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 10000L + "'", long26 == 10000L);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test04358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04358");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        java.lang.String str5 = atomikosProperties0.logBaseName;
        java.lang.String str6 = atomikosProperties0.logBaseDir;
        long long7 = atomikosProperties0.defaultJtaTimeout;
        java.util.Properties properties8 = atomikosProperties0.asProperties();
        java.util.Properties properties9 = atomikosProperties0.asProperties();
        java.util.Properties properties10 = new java.util.Properties(properties9);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties11.logBaseDir = "";
        atomikosProperties11.setConsoleFileCount((int) (short) 10);
        atomikosProperties11.setService("");
        boolean boolean18 = properties10.equals((java.lang.Object) atomikosProperties11);
        boolean boolean19 = atomikosProperties11.isEnableLogging();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tmlog" + "'", str5, "tmlog");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test04359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04359");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setDefaultJtaTimeout((-1L));
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel3 = null;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel3;
        atomikosProperties0.outputDir = "";
        boolean boolean7 = atomikosProperties0.allowSubTransactions;
        java.lang.String str8 = atomikosProperties0.outputDir;
        java.lang.String str9 = atomikosProperties0.getLogBaseName();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel10 = atomikosProperties0.getConsoleLogLevel();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tmlog" + "'", str9, "tmlog");
        org.junit.Assert.assertNull(atomikosLoggingLevel10);
    }

    @Test
    public void test04360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04360");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.enableLogging = true;
        long long3 = atomikosProperties0.getCheckpointInterval();
        atomikosProperties0.setService("tmlog");
        java.util.Properties properties6 = atomikosProperties0.asProperties();
        int int7 = properties6.size();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet8 = properties6.entrySet();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 500L + "'", long3 == 500L);
        org.junit.Assert.assertNotNull(properties6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 19 + "'", int7 == 19);
        org.junit.Assert.assertNotNull(objEntrySet8);
    }

    @Test
    public void test04361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04361");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int1 = atomikosProperties0.getConsoleFileCount();
        int int2 = atomikosProperties0.maxActives;
        int int3 = atomikosProperties0.getMaxActives();
        java.lang.String str4 = atomikosProperties0.getLogBaseName();
        java.lang.String str5 = atomikosProperties0.getService();
        atomikosProperties0.allowSubTransactions = false;
        boolean boolean8 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.setConsoleFileLimit(18);
        atomikosProperties0.setLogBaseName("{com.atomikos.icatch.hi!=-1.0, =hi!}");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 50 + "'", int2 == 50);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 50 + "'", int3 == 50);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tmlog" + "'", str4, "tmlog");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test04362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04362");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.maxRetries = (-1);
        recovery0.setDelay((long) (short) 0);
        long long5 = recovery0.forgetOrphanedLogEntriesDelay;
        recovery0.setDelay((long) 1);
        int int8 = recovery0.getMaxRetries();
        recovery0.setMaxRetries((int) '4');
        long long11 = recovery0.getDelay();
        long long12 = recovery0.forgetOrphanedLogEntriesDelay;
        recovery0.setDelay((long) (byte) 10);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 86400000L + "'", long5 == 86400000L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 86400000L + "'", long12 == 86400000L);
    }

    @Test
    public void test04363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04363");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Collection<java.lang.Object> objCollection2 = properties0.values();
        int int3 = properties0.size();
        boolean boolean4 = properties0.isEmpty();
        java.util.Properties properties5 = new java.util.Properties(properties0);
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Properties properties7 = new java.util.Properties(properties6);
        java.util.Properties properties9 = new java.util.Properties();
        java.lang.Object obj11 = properties9.get((java.lang.Object) 0.0d);
        java.lang.Object obj12 = properties9.clone();
        java.lang.String str13 = properties9.toString();
        boolean boolean16 = properties9.remove((java.lang.Object) 0, (java.lang.Object) 'a');
        java.lang.Object obj17 = properties7.replace((java.lang.Object) 10.0d, (java.lang.Object) properties9);
        java.lang.String str18 = properties9.toString();
        java.util.Properties properties19 = new java.util.Properties(properties9);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties9);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties21.logBaseDir = "";
        boolean boolean24 = atomikosProperties21.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties25.logBaseDir = "";
        atomikosProperties25.setConsoleFileCount((int) (short) 10);
        long long30 = atomikosProperties25.getMaxTimeout();
        java.util.Properties properties31 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet32 = properties31.keySet();
        atomikosProperties25.set(properties31, "hi!", (java.lang.Object) (-1.0f));
        java.lang.Object obj38 = properties31.setProperty("", "hi!");
        java.util.Properties properties39 = new java.util.Properties();
        java.util.Properties properties40 = new java.util.Properties(properties39);
        java.util.Collection<java.lang.Object> objCollection41 = properties39.values();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel42 = org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO;
        boolean boolean43 = properties31.remove((java.lang.Object) objCollection41, (java.lang.Object) atomikosLoggingLevel42);
        atomikosProperties21.setConsoleLogLevel(atomikosLoggingLevel42);
        boolean boolean45 = properties0.containsKey((java.lang.Object) atomikosProperties21);
        atomikosProperties21.setMaxTimeout((long) 100);
        org.junit.Assert.assertNotNull(objCollection2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "{}");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{}" + "'", str13, "{}");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "{}" + "'", str18, "{}");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 300000L + "'", long30 == 300000L);
        org.junit.Assert.assertNotNull(objSet32);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertNotNull(objCollection41);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel42 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO + "'", atomikosLoggingLevel42.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test04364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04364");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setDefaultJtaTimeout((-1L));
        int int3 = atomikosProperties0.getConsoleFileLimit();
        int int4 = atomikosProperties0.maxActives;
        atomikosProperties0.setConsoleFileLimit(52);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery7 = atomikosProperties0.getRecovery();
        atomikosProperties0.consoleFileName = "hi!";
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        java.lang.String str12 = atomikosProperties0.getLogBaseName();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery7);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "tmlog" + "'", str12, "tmlog");
    }

    @Test
    public void test04365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04365");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Collection<java.lang.Object> objCollection2 = properties1.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties3 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties3.enableLogging = true;
        long long6 = atomikosProperties3.getCheckpointInterval();
        boolean boolean8 = properties1.remove((java.lang.Object) long6, (java.lang.Object) (byte) 100);
        boolean boolean10 = properties1.equals((java.lang.Object) (short) 1);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet11 = properties1.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setDefaultJtaTimeout((-1L));
        long long15 = atomikosProperties12.checkpointInterval;
        boolean boolean16 = atomikosProperties12.forceShutdownOnVmExit;
        atomikosProperties12.setThreadedTwoPhaseCommit(true);
        boolean boolean19 = properties1.contains((java.lang.Object) true);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties20.logBaseDir = "";
        atomikosProperties20.setConsoleFileCount((int) (short) 10);
        long long25 = atomikosProperties20.getMaxTimeout();
        java.util.Properties properties26 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet27 = properties26.keySet();
        atomikosProperties20.set(properties26, "hi!", (java.lang.Object) (-1.0f));
        java.lang.String str31 = atomikosProperties20.logBaseDir;
        java.lang.String str32 = atomikosProperties20.logBaseDir;
        java.lang.String str33 = atomikosProperties20.logBaseDir;
        boolean boolean34 = atomikosProperties20.isEnableLogging();
        boolean boolean35 = atomikosProperties20.forceShutdownOnVmExit;
        boolean boolean36 = properties1.containsValue((java.lang.Object) atomikosProperties20);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties37.logBaseDir = "";
        atomikosProperties37.setConsoleFileCount((int) (short) 10);
        java.lang.String str42 = atomikosProperties37.logBaseName;
        atomikosProperties37.outputDir = "";
        java.util.Properties properties45 = atomikosProperties37.asProperties();
        java.util.Set<java.lang.String> strSet46 = properties45.stringPropertyNames();
        java.lang.Object obj47 = properties1.get((java.lang.Object) properties45);
        java.lang.Object obj48 = properties45.clone();
        org.junit.Assert.assertNotNull(objCollection2);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(objEntrySet11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 500L + "'", long15 == 500L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 300000L + "'", long25 == 300000L);
        org.junit.Assert.assertNotNull(objSet27);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "tmlog" + "'", str42, "tmlog");
        org.junit.Assert.assertNotNull(properties45);
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNotNull(obj48);
// flaky:         org.junit.Assert.assertEquals(obj48.toString(), "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.console_file_count=10, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir=, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.output_dir=, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj48), "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.console_file_count=10, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir=, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.output_dir=, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj48), "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.console_file_count=10, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir=, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.output_dir=, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
    }

    @Test
    public void test04366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04366");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Collection<java.lang.Object> objCollection2 = properties1.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties3 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties3.enableLogging = true;
        long long6 = atomikosProperties3.getCheckpointInterval();
        boolean boolean8 = properties1.remove((java.lang.Object) long6, (java.lang.Object) (byte) 100);
        boolean boolean10 = properties1.equals((java.lang.Object) (short) 1);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet11 = properties1.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setDefaultJtaTimeout((-1L));
        long long15 = atomikosProperties12.checkpointInterval;
        boolean boolean16 = atomikosProperties12.forceShutdownOnVmExit;
        atomikosProperties12.setThreadedTwoPhaseCommit(true);
        boolean boolean19 = properties1.contains((java.lang.Object) true);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties20.logBaseDir = "";
        atomikosProperties20.setConsoleFileCount((int) (short) 10);
        long long25 = atomikosProperties20.getMaxTimeout();
        java.util.Properties properties26 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet27 = properties26.keySet();
        atomikosProperties20.set(properties26, "hi!", (java.lang.Object) (-1.0f));
        java.lang.String str31 = atomikosProperties20.logBaseDir;
        java.lang.String str32 = atomikosProperties20.logBaseDir;
        java.lang.String str33 = atomikosProperties20.logBaseDir;
        boolean boolean34 = atomikosProperties20.isEnableLogging();
        boolean boolean35 = atomikosProperties20.forceShutdownOnVmExit;
        boolean boolean36 = properties1.containsValue((java.lang.Object) atomikosProperties20);
        atomikosProperties20.consoleFileName = "";
        int int39 = atomikosProperties20.maxActives;
        atomikosProperties20.serialJtaTransactions = false;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery42 = atomikosProperties20.recovery;
        java.lang.String str43 = atomikosProperties20.logBaseName;
        org.junit.Assert.assertNotNull(objCollection2);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(objEntrySet11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 500L + "'", long15 == 500L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 300000L + "'", long25 == 300000L);
        org.junit.Assert.assertNotNull(objSet27);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 50 + "'", int39 == 50);
        org.junit.Assert.assertNotNull(recovery42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "tmlog" + "'", str43, "tmlog");
    }

    @Test
    public void test04367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04367");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setDefaultJtaTimeout((-1L));
        long long3 = atomikosProperties0.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int5 = atomikosProperties4.getConsoleFileCount();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties6.logBaseDir = "";
        atomikosProperties6.setConsoleFileCount((int) (short) 10);
        atomikosProperties6.setCheckpointInterval(10000L);
        long long13 = atomikosProperties6.maxTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel14 = org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO;
        atomikosProperties6.consoleLogLevel = atomikosLoggingLevel14;
        atomikosProperties4.consoleLogLevel = atomikosLoggingLevel14;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel14;
        atomikosProperties0.forceShutdownOnVmExit = false;
        atomikosProperties0.checkpointInterval = (short) 1;
        atomikosProperties0.consoleFileCount = 0;
        atomikosProperties0.maxActives = (short) 1;
        atomikosProperties0.service = "tmlog";
        boolean boolean28 = atomikosProperties0.forceShutdownOnVmExit;
        java.util.Properties properties29 = atomikosProperties0.asProperties();
        java.util.Properties properties30 = atomikosProperties0.asProperties();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 500L + "'", long3 == 500L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 300000L + "'", long13 == 300000L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel14 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO + "'", atomikosLoggingLevel14.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(properties29);
        org.junit.Assert.assertNotNull(properties30);
    }

    @Test
    public void test04368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04368");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int1 = atomikosProperties0.getConsoleFileCount();
        int int2 = atomikosProperties0.maxActives;
        atomikosProperties0.setConsoleFileName("");
        java.lang.String str5 = atomikosProperties0.getOutputDir();
        atomikosProperties0.setConsoleFileName("");
        atomikosProperties0.serialJtaTransactions = true;
        atomikosProperties0.enableLogging = false;
        java.util.Properties properties12 = atomikosProperties0.asProperties();
        atomikosProperties0.defaultJtaTimeout = (byte) 1;
        atomikosProperties0.outputDir = "hi!";
        java.lang.String str17 = atomikosProperties0.service;
        int int18 = atomikosProperties0.getConsoleFileLimit();
        atomikosProperties0.setOutputDir("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=10, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir=, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        atomikosProperties0.checkpointInterval = (-1);
        java.util.Properties properties23 = atomikosProperties0.asProperties();
        java.lang.String str25 = properties23.getProperty("{{}=tmlog}");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 50 + "'", int2 == 50);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(properties12);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(properties23);
        org.junit.Assert.assertNull(str25);
    }

    @Test
    public void test04369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04369");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setDefaultJtaTimeout((-1L));
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel3 = null;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel3;
        atomikosProperties0.outputDir = "";
        int int7 = atomikosProperties0.maxActives;
        boolean boolean8 = atomikosProperties0.isThreadedTwoPhaseCommit();
        atomikosProperties0.transactionManagerUniqueName = "{true=10000}";
        atomikosProperties0.serialJtaTransactions = true;
        atomikosProperties0.serialJtaTransactions = true;
        atomikosProperties0.setSerialJtaTransactions(false);
        atomikosProperties0.setOutputDir("{com.atomikos.icatch.console_file_name=, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.tm_unique_name={}, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test04370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04370");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int1 = atomikosProperties0.getConsoleFileCount();
        int int2 = atomikosProperties0.maxActives;
        atomikosProperties0.setConsoleFileName("");
        java.lang.String str5 = atomikosProperties0.getOutputDir();
        atomikosProperties0.setConsoleFileName("");
        atomikosProperties0.forceShutdownOnVmExit = true;
        long long10 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.setConsoleFileLimit(21);
        atomikosProperties0.setSerialJtaTransactions(true);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 50 + "'", int2 == 50);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 500L + "'", long10 == 500L);
    }

    @Test
    public void test04371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04371");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        java.lang.String str5 = atomikosProperties0.logBaseName;
        java.lang.String str6 = atomikosProperties0.logBaseDir;
        java.lang.String str7 = atomikosProperties0.getOutputDir();
        atomikosProperties0.defaultJtaTimeout = 100L;
        int int10 = atomikosProperties0.maxActives;
        atomikosProperties0.enableLogging = false;
        atomikosProperties0.serialJtaTransactions = false;
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tmlog" + "'", str5, "tmlog");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 50 + "'", int10 == 50);
    }

    @Test
    public void test04372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04372");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.maxRetries = (-1);
        recovery0.setDelay((long) (short) 0);
        recovery0.maxRetries = 0;
        recovery0.forgetOrphanedLogEntriesDelay = 100;
        recovery0.setMaxRetries((int) (byte) -1);
        recovery0.retryInterval = '4';
        recovery0.setForgetOrphanedLogEntriesDelay((long) '4');
        long long15 = recovery0.forgetOrphanedLogEntriesDelay;
        int int16 = recovery0.maxRetries;
        int int17 = recovery0.maxRetries;
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 52L + "'", long15 == 52L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
    }

    @Test
    public void test04373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04373");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setDefaultJtaTimeout((-1L));
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel3 = null;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel3;
        atomikosProperties0.outputDir = "";
        int int7 = atomikosProperties0.maxActives;
        java.lang.String str8 = atomikosProperties0.logBaseDir;
        boolean boolean9 = atomikosProperties0.allowSubTransactions;
        atomikosProperties0.setDefaultJtaTimeout((long) (short) -1);
        atomikosProperties0.setConsoleFileLimit(0);
        java.lang.String str14 = atomikosProperties0.getLogBaseName();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "tmlog" + "'", str14, "tmlog");
    }

    @Test
    public void test04374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04374");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.enableLogging = true;
        int int3 = atomikosProperties0.consoleFileLimit;
        atomikosProperties0.logBaseName = "hi!";
        atomikosProperties0.enableLogging = false;
        atomikosProperties0.setMaxTimeout((long) '4');
        atomikosProperties0.setMaxTimeout((long) 1);
        long long12 = atomikosProperties0.maxTimeout;
        boolean boolean13 = atomikosProperties0.isForceShutdownOnVmExit();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test04375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04375");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int1 = atomikosProperties0.getConsoleFileCount();
        int int2 = atomikosProperties0.maxActives;
        atomikosProperties0.setConsoleFileName("");
        atomikosProperties0.transactionManagerUniqueName = "{}";
        java.util.Properties properties7 = atomikosProperties0.asProperties();
        java.util.Set<java.lang.Object> objSet8 = properties7.keySet();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 50 + "'", int2 == 50);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNotNull(objSet8);
    }

    @Test
    public void test04376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04376");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.maxRetries = (-1);
        recovery0.setDelay((long) (short) 0);
        long long5 = recovery0.retryInterval;
        recovery0.maxRetries = (short) -1;
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 10000L + "'", long5 == 10000L);
    }

    @Test
    public void test04377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04377");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.setLogBaseDir("{}");
        boolean boolean4 = atomikosProperties0.isAllowSubTransactions();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test04378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04378");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Collection<java.lang.Object> objCollection2 = properties0.values();
        int int3 = properties0.size();
        boolean boolean4 = properties0.isEmpty();
        java.util.Properties properties5 = new java.util.Properties(properties0);
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Properties properties7 = new java.util.Properties(properties6);
        java.util.Properties properties9 = new java.util.Properties();
        java.lang.Object obj11 = properties9.get((java.lang.Object) 0.0d);
        java.lang.Object obj12 = properties9.clone();
        java.lang.String str13 = properties9.toString();
        boolean boolean16 = properties9.remove((java.lang.Object) 0, (java.lang.Object) 'a');
        java.lang.Object obj17 = properties7.replace((java.lang.Object) 10.0d, (java.lang.Object) properties9);
        java.lang.String str18 = properties9.toString();
        java.util.Properties properties19 = new java.util.Properties(properties9);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties9);
        java.util.Properties properties21 = new java.util.Properties();
        java.util.Properties properties22 = new java.util.Properties(properties21);
        java.util.Collection<java.lang.Object> objCollection23 = properties22.values();
        java.lang.Object obj26 = properties22.setProperty("hi!", "{}");
        java.lang.String str28 = properties22.getProperty("tmlog");
        properties22.clear();
        java.lang.Object obj30 = properties22.clone();
        java.lang.Object obj31 = properties0.get(obj30);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties32.logBaseDir = "";
        atomikosProperties32.setConsoleFileCount((int) (short) 10);
        long long37 = atomikosProperties32.getMaxTimeout();
        java.util.Properties properties38 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet39 = properties38.keySet();
        atomikosProperties32.set(properties38, "hi!", (java.lang.Object) (-1.0f));
        java.util.Properties properties43 = new java.util.Properties();
        java.lang.Object obj45 = properties43.get((java.lang.Object) 0.0d);
        java.lang.Object obj46 = properties43.clone();
        java.lang.String str47 = properties43.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties48 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties48.logBaseDir = "";
        atomikosProperties48.setConsoleFileCount((int) (short) 10);
        long long53 = atomikosProperties48.getMaxTimeout();
        java.util.Properties properties54 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet55 = properties54.keySet();
        atomikosProperties48.set(properties54, "hi!", (java.lang.Object) (-1.0f));
        java.lang.Object obj61 = properties54.setProperty("", "hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties62 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties62.setDefaultJtaTimeout((-1L));
        java.util.Properties properties65 = new java.util.Properties();
        java.lang.Object obj67 = properties65.get((java.lang.Object) 0.0d);
        java.lang.Object obj68 = properties65.clone();
        boolean boolean70 = properties54.replace((java.lang.Object) (-1L), obj68, (java.lang.Object) 100.0d);
        java.util.Properties properties71 = new java.util.Properties();
        java.util.Properties properties72 = new java.util.Properties(properties71);
        properties72.clear();
        properties54.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties72);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties75 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties75.logBaseDir = "";
        atomikosProperties75.setConsoleFileCount((int) (short) 10);
        long long80 = atomikosProperties75.getMaxTimeout();
        java.util.Properties properties81 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet82 = properties81.keySet();
        atomikosProperties75.set(properties81, "hi!", (java.lang.Object) (-1.0f));
        java.lang.String str86 = atomikosProperties75.logBaseDir;
        java.lang.String str87 = atomikosProperties75.logBaseDir;
        java.util.Properties properties88 = atomikosProperties75.asProperties();
        java.lang.Object obj89 = properties43.replace((java.lang.Object) properties72, (java.lang.Object) atomikosProperties75);
        boolean boolean90 = properties38.contains((java.lang.Object) atomikosProperties75);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel91 = atomikosProperties75.consoleLogLevel;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery92 = atomikosProperties75.recovery;
        boolean boolean93 = properties0.containsValue((java.lang.Object) atomikosProperties75);
        java.util.Properties properties94 = atomikosProperties75.asProperties();
        org.junit.Assert.assertNotNull(objCollection2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "{}");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{}" + "'", str13, "{}");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "{}" + "'", str18, "{}");
        org.junit.Assert.assertNotNull(objCollection23);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "{}");
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 300000L + "'", long37 == 300000L);
        org.junit.Assert.assertNotNull(objSet39);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertEquals(obj46.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj46), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj46), "{}");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "{}" + "'", str47, "{}");
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 300000L + "'", long53 == 300000L);
        org.junit.Assert.assertNotNull(objSet55);
        org.junit.Assert.assertNull(obj61);
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertNotNull(obj68);
        org.junit.Assert.assertEquals(obj68.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj68), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj68), "{}");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 300000L + "'", long80 == 300000L);
        org.junit.Assert.assertNotNull(objSet82);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertNotNull(properties88);
        org.junit.Assert.assertNull(obj89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel91 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel91.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(recovery92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(properties94);
    }

    @Test
    public void test04379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04379");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setDefaultJtaTimeout((-1L));
        long long3 = atomikosProperties0.checkpointInterval;
        boolean boolean4 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        atomikosProperties0.setOutputDir("");
        long long9 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.threadedTwoPhaseCommit = true;
        atomikosProperties0.defaultJtaTimeout = 97;
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 500L + "'", long3 == 500L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 300000L + "'", long9 == 300000L);
    }

    @Test
    public void test04380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04380");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setDefaultJtaTimeout((-1L));
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel3 = null;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel3;
        atomikosProperties0.outputDir = "";
        int int7 = atomikosProperties0.maxActives;
        java.lang.String str8 = atomikosProperties0.logBaseDir;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery9 = atomikosProperties0.getRecovery();
        long long10 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.outputDir = "{com.atomikos.icatch.hi!=-1.0, =hi!}";
        atomikosProperties0.setForceShutdownOnVmExit(false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(recovery9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
    }

    @Test
    public void test04381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04381");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int1 = atomikosProperties0.getConsoleFileCount();
        int int2 = atomikosProperties0.maxActives;
        java.lang.String str3 = atomikosProperties0.getService();
        int int4 = atomikosProperties0.consoleFileLimit;
        long long5 = atomikosProperties0.maxTimeout;
        java.lang.String str6 = atomikosProperties0.getService();
        atomikosProperties0.checkpointInterval = 10;
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 50 + "'", int2 == 50);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test04382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04382");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int1 = atomikosProperties0.getConsoleFileCount();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties2.logBaseDir = "";
        atomikosProperties2.setConsoleFileCount((int) (short) 10);
        atomikosProperties2.setCheckpointInterval(10000L);
        long long9 = atomikosProperties2.maxTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel10 = org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO;
        atomikosProperties2.consoleLogLevel = atomikosLoggingLevel10;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel10;
        java.lang.String str13 = atomikosProperties0.getService();
        atomikosProperties0.setMaxTimeout(10L);
        atomikosProperties0.setCheckpointInterval((long) 'a');
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel18 = atomikosProperties0.consoleLogLevel;
        java.lang.String str19 = atomikosProperties0.getLogBaseName();
        java.lang.String str20 = atomikosProperties0.getLogBaseDir();
        boolean boolean21 = atomikosProperties0.allowSubTransactions;
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 300000L + "'", long9 == 300000L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel10 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO + "'", atomikosLoggingLevel10.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO));
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel18 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO + "'", atomikosLoggingLevel18.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "tmlog" + "'", str19, "tmlog");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test04383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04383");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setDefaultJtaTimeout((-1L));
        int int3 = atomikosProperties0.getConsoleFileLimit();
        int int4 = atomikosProperties0.maxActives;
        java.lang.String str5 = atomikosProperties0.logBaseDir;
        atomikosProperties0.enableLogging = false;
        boolean boolean8 = atomikosProperties0.threadedTwoPhaseCommit;
        java.lang.String str9 = atomikosProperties0.getTransactionManagerUniqueName();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test04384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04384");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Collection<java.lang.Object> objCollection2 = properties1.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties3 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties3.enableLogging = true;
        long long6 = atomikosProperties3.getCheckpointInterval();
        boolean boolean8 = properties1.remove((java.lang.Object) long6, (java.lang.Object) (byte) 100);
        boolean boolean10 = properties1.equals((java.lang.Object) (short) 1);
        java.lang.Object obj13 = properties1.setProperty("{}", "tmlog");
        java.util.Enumeration<java.lang.Object> objEnumeration14 = properties1.keys();
        java.util.Enumeration<?> wildcardEnumeration15 = properties1.propertyNames();
        org.junit.Assert.assertNotNull(objCollection2);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNotNull(objEnumeration14);
        org.junit.Assert.assertNotNull(wildcardEnumeration15);
    }

    @Test
    public void test04385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04385");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int1 = atomikosProperties0.getConsoleFileCount();
        int int2 = atomikosProperties0.maxActives;
        atomikosProperties0.setConsoleFileName("");
        java.lang.String str5 = atomikosProperties0.getOutputDir();
        int int6 = atomikosProperties0.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery7 = atomikosProperties0.getRecovery();
        atomikosProperties0.threadedTwoPhaseCommit = false;
        atomikosProperties0.consoleFileLimit = (byte) -1;
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 50 + "'", int2 == 50);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(recovery7);
    }

    @Test
    public void test04386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04386");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setDefaultJtaTimeout((-1L));
        int int3 = atomikosProperties0.getConsoleFileLimit();
        atomikosProperties0.checkpointInterval = 0L;
        atomikosProperties0.setLogBaseName("{com.atomikos.icatch.hi!=-1.0}");
        java.lang.String str8 = atomikosProperties0.consoleFileName;
        atomikosProperties0.setEnableLogging(true);
        atomikosProperties0.forceShutdownOnVmExit = true;
        boolean boolean13 = atomikosProperties0.isForceShutdownOnVmExit();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "tm.out" + "'", str8, "tm.out");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test04387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04387");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.enableLogging = true;
        long long3 = atomikosProperties0.getCheckpointInterval();
        java.lang.String str4 = atomikosProperties0.getOutputDir();
        atomikosProperties0.defaultJtaTimeout = 'a';
        java.lang.String str7 = atomikosProperties0.getOutputDir();
        atomikosProperties0.setSerialJtaTransactions(true);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 500L + "'", long3 == 500L);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test04388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04388");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        long long5 = atomikosProperties0.getMaxTimeout();
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet7 = properties6.keySet();
        atomikosProperties0.set(properties6, "hi!", (java.lang.Object) (-1.0f));
        java.lang.String str11 = atomikosProperties0.logBaseDir;
        atomikosProperties0.outputDir = "hi!";
        boolean boolean14 = atomikosProperties0.isThreadedTwoPhaseCommit();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery15 = atomikosProperties0.recovery;
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertNotNull(objSet7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(recovery15);
    }

    @Test
    public void test04389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04389");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Collection<java.lang.Object> objCollection2 = properties1.values();
        java.lang.Object obj5 = properties1.setProperty("hi!", "{}");
        java.lang.String str7 = properties1.getProperty("tmlog");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties8.enableLogging = true;
        int int11 = atomikosProperties8.consoleFileLimit;
        atomikosProperties8.logBaseName = "hi!";
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long15 = atomikosProperties14.defaultJtaTimeout;
        java.lang.String str16 = atomikosProperties14.getLogBaseName();
        atomikosProperties14.allowSubTransactions = true;
        boolean boolean19 = atomikosProperties14.enableLogging;
        java.lang.Object obj20 = properties1.getOrDefault((java.lang.Object) "hi!", (java.lang.Object) boolean19);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties21.logBaseDir = "";
        atomikosProperties21.setConsoleFileCount((int) (short) 10);
        atomikosProperties21.setLogBaseDir("{}");
        java.lang.String str28 = atomikosProperties21.getOutputDir();
        atomikosProperties21.setLogBaseName("hi!");
        boolean boolean31 = atomikosProperties21.isAllowSubTransactions();
        boolean boolean32 = atomikosProperties21.isThreadedTwoPhaseCommit();
        boolean boolean33 = atomikosProperties21.forceShutdownOnVmExit;
        boolean boolean34 = properties1.containsValue((java.lang.Object) atomikosProperties21);
        java.util.Collection<java.lang.Object> objCollection35 = properties1.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int37 = atomikosProperties36.getConsoleFileCount();
        int int38 = atomikosProperties36.maxActives;
        atomikosProperties36.setConsoleFileName("");
        atomikosProperties36.transactionManagerUniqueName = "{}";
        java.util.Properties properties43 = atomikosProperties36.asProperties();
        atomikosProperties36.consoleFileName = "hi!";
        long long46 = atomikosProperties36.getDefaultJtaTimeout();
        atomikosProperties36.maxActives = (-1);
        boolean boolean49 = atomikosProperties36.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties50.logBaseDir = "";
        boolean boolean53 = atomikosProperties50.isForceShutdownOnVmExit();
        int int54 = atomikosProperties50.consoleFileLimit;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel55 = atomikosProperties50.getConsoleLogLevel();
        atomikosProperties36.setConsoleLogLevel(atomikosLoggingLevel55);
        java.util.Properties properties57 = new java.util.Properties();
        java.util.Properties properties58 = new java.util.Properties(properties57);
        boolean boolean59 = properties57.isEmpty();
        java.util.Set<java.lang.Object> objSet60 = properties57.keySet();
        java.lang.Object obj61 = properties1.put((java.lang.Object) atomikosProperties36, (java.lang.Object) properties57);
        java.io.OutputStream outputStream62 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties57.store(outputStream62, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=10, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir=, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection2);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10000L + "'", long15 == 10000L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tmlog" + "'", str16, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertEquals("'" + obj20 + "' != '" + "{}" + "'", obj20, "{}");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(objCollection35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 50 + "'", int38 == 50);
        org.junit.Assert.assertNotNull(properties43);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 10000L + "'", long46 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel55 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel55.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(objSet60);
        org.junit.Assert.assertNull(obj61);
    }

    @Test
    public void test04390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04390");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Collection<java.lang.Object> objCollection2 = properties1.values();
        java.util.Properties properties3 = new java.util.Properties();
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Collection<java.lang.Object> objCollection5 = properties3.values();
        java.util.Enumeration<java.lang.Object> objEnumeration6 = properties3.keys();
        boolean boolean7 = properties1.contains((java.lang.Object) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties8.enableLogging = true;
        long long11 = atomikosProperties8.getCheckpointInterval();
        java.lang.String str12 = atomikosProperties8.getService();
        java.lang.String str13 = atomikosProperties8.logBaseDir;
        atomikosProperties8.setEnableLogging(false);
        atomikosProperties8.consoleFileCount = 0;
        long long18 = atomikosProperties8.getMaxTimeout();
        int int19 = atomikosProperties8.consoleFileLimit;
        java.util.Properties properties20 = atomikosProperties8.asProperties();
        java.util.Properties properties21 = new java.util.Properties(properties20);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int23 = atomikosProperties22.getConsoleFileCount();
        int int24 = atomikosProperties22.maxActives;
        atomikosProperties22.setConsoleFileName("");
        atomikosProperties22.transactionManagerUniqueName = "{}";
        java.util.Properties properties29 = atomikosProperties22.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties30.logBaseDir = "";
        atomikosProperties30.setConsoleFileCount((int) (short) 10);
        long long35 = atomikosProperties30.getMaxTimeout();
        java.util.Properties properties36 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet37 = properties36.keySet();
        atomikosProperties30.set(properties36, "hi!", (java.lang.Object) (-1.0f));
        java.lang.Object obj43 = properties36.setProperty("", "hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties44.setDefaultJtaTimeout((-1L));
        java.util.Properties properties47 = new java.util.Properties();
        java.lang.Object obj49 = properties47.get((java.lang.Object) 0.0d);
        java.lang.Object obj50 = properties47.clone();
        boolean boolean52 = properties36.replace((java.lang.Object) (-1L), obj50, (java.lang.Object) 100.0d);
        java.util.Properties properties53 = new java.util.Properties();
        java.util.Properties properties54 = new java.util.Properties(properties53);
        properties54.clear();
        properties36.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties54);
        java.util.Enumeration<java.lang.Object> objEnumeration57 = properties54.elements();
        java.lang.String str59 = properties54.getProperty("");
        java.util.Properties properties60 = new java.util.Properties(properties54);
        java.util.Enumeration<java.lang.Object> objEnumeration61 = properties60.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties62 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int63 = atomikosProperties62.getConsoleFileCount();
        int int64 = atomikosProperties62.maxActives;
        atomikosProperties62.setEnableLogging(true);
        boolean boolean67 = atomikosProperties62.isThreadedTwoPhaseCommit();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel68 = atomikosProperties62.consoleLogLevel;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties69 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties69.logBaseDir = "";
        atomikosProperties69.setConsoleFileCount((int) (short) 10);
        long long74 = atomikosProperties69.getMaxTimeout();
        java.util.Properties properties75 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet76 = properties75.keySet();
        atomikosProperties69.set(properties75, "hi!", (java.lang.Object) (-1.0f));
        java.lang.String str80 = atomikosProperties69.logBaseDir;
        boolean boolean81 = atomikosProperties69.enableLogging;
        java.lang.Object obj82 = properties60.putIfAbsent((java.lang.Object) atomikosLoggingLevel68, (java.lang.Object) atomikosProperties69);
        boolean boolean83 = properties3.replace((java.lang.Object) properties20, (java.lang.Object) atomikosProperties22, (java.lang.Object) atomikosLoggingLevel68);
        atomikosProperties22.consoleFileLimit = 21;
        boolean boolean86 = atomikosProperties22.threadedTwoPhaseCommit;
        org.junit.Assert.assertNotNull(objCollection2);
        org.junit.Assert.assertNotNull(objCollection5);
        org.junit.Assert.assertNotNull(objEnumeration6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 500L + "'", long11 == 500L);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 300000L + "'", long18 == 300000L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(properties20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 50 + "'", int24 == 50);
        org.junit.Assert.assertNotNull(properties29);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 300000L + "'", long35 == 300000L);
        org.junit.Assert.assertNotNull(objSet37);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertEquals(obj50.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj50), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj50), "{}");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objEnumeration57);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(objEnumeration61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 50 + "'", int64 == 50);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel68 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel68.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 300000L + "'", long74 == 300000L);
        org.junit.Assert.assertNotNull(objSet76);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNull(obj82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test04391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04391");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        boolean boolean3 = atomikosProperties0.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties4.logBaseDir = "";
        atomikosProperties4.setConsoleFileCount((int) (short) 10);
        long long9 = atomikosProperties4.getMaxTimeout();
        java.util.Properties properties10 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet11 = properties10.keySet();
        atomikosProperties4.set(properties10, "hi!", (java.lang.Object) (-1.0f));
        java.lang.Object obj17 = properties10.setProperty("", "hi!");
        java.util.Properties properties18 = new java.util.Properties();
        java.util.Properties properties19 = new java.util.Properties(properties18);
        java.util.Collection<java.lang.Object> objCollection20 = properties18.values();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel21 = org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO;
        boolean boolean22 = properties10.remove((java.lang.Object) objCollection20, (java.lang.Object) atomikosLoggingLevel21);
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel21);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties24.setDefaultJtaTimeout((-1L));
        int int27 = atomikosProperties24.getConsoleFileLimit();
        atomikosProperties24.serialJtaTransactions = false;
        atomikosProperties24.logBaseName = "{com.atomikos.icatch.hi!=-1.0}";
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel32 = atomikosProperties24.consoleLogLevel;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel32;
        java.lang.String str34 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.consoleFileLimit = (byte) -1;
        java.util.Properties properties37 = atomikosProperties0.asProperties();
        java.lang.String str39 = properties37.getProperty("{}");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 300000L + "'", long9 == 300000L);
        org.junit.Assert.assertNotNull(objSet11);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(objCollection20);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel21 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO + "'", atomikosLoggingLevel21.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel32 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel32.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(properties37);
        org.junit.Assert.assertNull(str39);
    }

    @Test
    public void test04392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04392");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setDefaultJtaTimeout((-1L));
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel3 = null;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel3;
        atomikosProperties0.outputDir = "";
        int int7 = atomikosProperties0.maxActives;
        boolean boolean8 = atomikosProperties0.isThreadedTwoPhaseCommit();
        atomikosProperties0.consoleFileLimit = (short) 10;
        java.util.Properties properties11 = atomikosProperties0.asProperties();
        java.util.Enumeration<java.lang.Object> objEnumeration12 = properties11.keys();
        java.lang.String str14 = properties11.getProperty("{true=10000}");
        java.util.Properties properties15 = new java.util.Properties(properties11);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNotNull(objEnumeration12);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test04393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04393");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setDefaultJtaTimeout((-1L));
        long long3 = atomikosProperties0.checkpointInterval;
        int int4 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel5 = atomikosProperties0.consoleLogLevel;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties6.logBaseDir = "";
        atomikosProperties6.setConsoleFileCount((int) (short) 10);
        java.lang.String str11 = atomikosProperties6.transactionManagerUniqueName;
        atomikosProperties6.maxActives = (-1);
        atomikosProperties6.logBaseDir = "hi!";
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel16 = atomikosProperties6.consoleLogLevel;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel16);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 500L + "'", long3 == 500L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel5 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel5.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel16 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel16.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
    }

    @Test
    public void test04394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04394");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int1 = atomikosProperties0.getConsoleFileCount();
        int int2 = atomikosProperties0.maxActives;
        atomikosProperties0.setConsoleFileName("");
        boolean boolean5 = atomikosProperties0.forceShutdownOnVmExit;
        long long6 = atomikosProperties0.maxTimeout;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery7 = atomikosProperties0.getRecovery();
        atomikosProperties0.setSerialJtaTransactions(true);
        long long10 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.forceShutdownOnVmExit = false;
        atomikosProperties0.defaultJtaTimeout = 500L;
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 50 + "'", int2 == 50);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 300000L + "'", long6 == 300000L);
        org.junit.Assert.assertNotNull(recovery7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
    }

    @Test
    public void test04395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04395");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        atomikosProperties0.setLogBaseDir("{}");
        java.lang.String str7 = atomikosProperties0.getOutputDir();
        atomikosProperties0.setLogBaseName("hi!");
        boolean boolean10 = atomikosProperties0.isAllowSubTransactions();
        boolean boolean11 = atomikosProperties0.isThreadedTwoPhaseCommit();
        boolean boolean12 = atomikosProperties0.isForceShutdownOnVmExit();
        java.lang.String str13 = atomikosProperties0.outputDir;
        int int14 = atomikosProperties0.getConsoleFileCount();
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
    }

    @Test
    public void test04396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04396");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int1 = atomikosProperties0.getConsoleFileCount();
        int int2 = atomikosProperties0.maxActives;
        atomikosProperties0.setConsoleFileName("");
        java.lang.String str5 = atomikosProperties0.getOutputDir();
        atomikosProperties0.service = "tmlog";
        java.lang.String str8 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.allowSubTransactions = true;
        java.util.Properties properties11 = atomikosProperties0.asProperties();
        java.lang.String str12 = atomikosProperties0.transactionManagerUniqueName;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery13 = atomikosProperties0.recovery;
        boolean boolean14 = atomikosProperties0.isForceShutdownOnVmExit();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 50 + "'", int2 == 50);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(recovery13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test04397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04397");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        boolean boolean3 = atomikosProperties0.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery4 = atomikosProperties0.getRecovery();
        int int5 = recovery4.getMaxRetries();
        int int6 = recovery4.maxRetries;
        long long7 = recovery4.delay;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(recovery4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5 + "'", int5 == 5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
    }

    @Test
    public void test04398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04398");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.enableLogging = true;
        int int3 = atomikosProperties0.consoleFileLimit;
        atomikosProperties0.logBaseName = "hi!";
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery6 = atomikosProperties0.getRecovery();
        atomikosProperties0.checkpointInterval = (byte) 100;
        java.lang.String str9 = atomikosProperties0.getTransactionManagerUniqueName();
        java.util.Properties properties10 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties11.logBaseDir = "";
        atomikosProperties11.setConsoleFileCount((int) (short) 10);
        long long16 = atomikosProperties11.getMaxTimeout();
        java.util.Properties properties17 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet18 = properties17.keySet();
        atomikosProperties11.set(properties17, "hi!", (java.lang.Object) (-1.0f));
        java.util.Properties properties22 = new java.util.Properties();
        java.lang.Object obj24 = properties22.get((java.lang.Object) 0.0d);
        java.lang.Object obj25 = properties22.clone();
        java.lang.String str26 = properties22.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties27.logBaseDir = "";
        atomikosProperties27.setConsoleFileCount((int) (short) 10);
        long long32 = atomikosProperties27.getMaxTimeout();
        java.util.Properties properties33 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet34 = properties33.keySet();
        atomikosProperties27.set(properties33, "hi!", (java.lang.Object) (-1.0f));
        java.lang.Object obj40 = properties33.setProperty("", "hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties41.setDefaultJtaTimeout((-1L));
        java.util.Properties properties44 = new java.util.Properties();
        java.lang.Object obj46 = properties44.get((java.lang.Object) 0.0d);
        java.lang.Object obj47 = properties44.clone();
        boolean boolean49 = properties33.replace((java.lang.Object) (-1L), obj47, (java.lang.Object) 100.0d);
        java.util.Properties properties50 = new java.util.Properties();
        java.util.Properties properties51 = new java.util.Properties(properties50);
        properties51.clear();
        properties33.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties51);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties54 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties54.logBaseDir = "";
        atomikosProperties54.setConsoleFileCount((int) (short) 10);
        long long59 = atomikosProperties54.getMaxTimeout();
        java.util.Properties properties60 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet61 = properties60.keySet();
        atomikosProperties54.set(properties60, "hi!", (java.lang.Object) (-1.0f));
        java.lang.String str65 = atomikosProperties54.logBaseDir;
        java.lang.String str66 = atomikosProperties54.logBaseDir;
        java.util.Properties properties67 = atomikosProperties54.asProperties();
        java.lang.Object obj68 = properties22.replace((java.lang.Object) properties51, (java.lang.Object) atomikosProperties54);
        boolean boolean69 = properties17.contains((java.lang.Object) atomikosProperties54);
        java.util.Properties properties70 = new java.util.Properties(properties17);
        java.lang.Object obj73 = properties17.setProperty("tm.out", "{com.atomikos.icatch.hi!=-1.0}");
        boolean boolean74 = properties10.containsValue((java.lang.Object) "{com.atomikos.icatch.hi!=-1.0}");
        java.util.Properties properties75 = new java.util.Properties(properties10);
        java.util.Collection<java.lang.Object> objCollection76 = properties75.values();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(recovery6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 300000L + "'", long16 == 300000L);
        org.junit.Assert.assertNotNull(objSet18);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "{}");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "{}" + "'", str26, "{}");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 300000L + "'", long32 == 300000L);
        org.junit.Assert.assertNotNull(objSet34);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertEquals(obj47.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj47), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj47), "{}");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 300000L + "'", long59 == 300000L);
        org.junit.Assert.assertNotNull(objSet61);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(properties67);
        org.junit.Assert.assertNull(obj68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(obj73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(objCollection76);
    }

    @Test
    public void test04399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04399");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.checkpointInterval = 0;
        boolean boolean5 = atomikosProperties0.isThreadedTwoPhaseCommit();
        atomikosProperties0.setSerialJtaTransactions(false);
        long long8 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.setSerialJtaTransactions(true);
        long long11 = atomikosProperties0.maxTimeout;
        boolean boolean12 = atomikosProperties0.serialJtaTransactions;
        atomikosProperties0.setService("hi!");
        atomikosProperties0.setForceShutdownOnVmExit(false);
        java.lang.String str17 = atomikosProperties0.getLogBaseName();
        int int18 = atomikosProperties0.getConsoleFileCount();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 300000L + "'", long8 == 300000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 300000L + "'", long11 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
    }

    @Test
    public void test04400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04400");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Collection<java.lang.Object> objCollection2 = properties1.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties3 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties3.enableLogging = true;
        long long6 = atomikosProperties3.getCheckpointInterval();
        boolean boolean8 = properties1.remove((java.lang.Object) long6, (java.lang.Object) (byte) 100);
        boolean boolean10 = properties1.equals((java.lang.Object) (short) 1);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet11 = properties1.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setDefaultJtaTimeout((-1L));
        long long15 = atomikosProperties12.checkpointInterval;
        boolean boolean16 = atomikosProperties12.forceShutdownOnVmExit;
        atomikosProperties12.setThreadedTwoPhaseCommit(true);
        boolean boolean19 = properties1.contains((java.lang.Object) true);
        java.util.Properties properties20 = new java.util.Properties(properties1);
        java.util.Properties properties21 = new java.util.Properties();
        java.util.Properties properties22 = new java.util.Properties(properties21);
        java.util.Properties properties24 = new java.util.Properties();
        java.lang.Object obj26 = properties24.get((java.lang.Object) 0.0d);
        java.lang.Object obj27 = properties24.clone();
        java.lang.String str28 = properties24.toString();
        boolean boolean31 = properties24.remove((java.lang.Object) 0, (java.lang.Object) 'a');
        java.lang.Object obj32 = properties22.replace((java.lang.Object) 10.0d, (java.lang.Object) properties24);
        java.lang.String str33 = properties24.toString();
        java.util.Properties properties34 = new java.util.Properties(properties24);
        java.lang.Object obj37 = properties24.setProperty("", "");
        java.util.Properties properties38 = new java.util.Properties(properties24);
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties38);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties40.logBaseDir = "";
        atomikosProperties40.setConsoleFileCount((int) (short) 10);
        java.lang.String str45 = atomikosProperties40.logBaseName;
        atomikosProperties40.outputDir = "";
        java.util.Properties properties48 = atomikosProperties40.asProperties();
        java.util.Properties properties49 = atomikosProperties40.asProperties();
        long long50 = atomikosProperties40.defaultJtaTimeout;
        atomikosProperties40.serialJtaTransactions = true;
        atomikosProperties40.service = "";
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery55 = atomikosProperties40.getRecovery();
        atomikosProperties40.setConsoleFileLimit(0);
        atomikosProperties40.setCheckpointInterval(10000L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties60 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties60.logBaseDir = "";
        atomikosProperties60.setConsoleFileCount((int) (short) 10);
        long long65 = atomikosProperties60.getMaxTimeout();
        atomikosProperties60.service = "";
        java.lang.String str68 = atomikosProperties60.logBaseDir;
        boolean boolean69 = atomikosProperties60.threadedTwoPhaseCommit;
        java.lang.String str70 = atomikosProperties60.getService();
        atomikosProperties60.setLogBaseDir("{}");
        atomikosProperties60.setThreadedTwoPhaseCommit(false);
        atomikosProperties60.setMaxActives((int) (short) 0);
        java.lang.Object obj77 = properties1.putIfAbsent((java.lang.Object) atomikosProperties40, (java.lang.Object) (short) 0);
        java.lang.String str78 = atomikosProperties40.getOutputDir();
        org.junit.Assert.assertNotNull(objCollection2);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(objEntrySet11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 500L + "'", long15 == 500L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "{}");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "{}" + "'", str28, "{}");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "{}" + "'", str33, "{}");
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "tmlog" + "'", str45, "tmlog");
        org.junit.Assert.assertNotNull(properties48);
        org.junit.Assert.assertNotNull(properties49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 10000L + "'", long50 == 10000L);
        org.junit.Assert.assertNotNull(recovery55);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 300000L + "'", long65 == 300000L);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNull(obj77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
    }

    @Test
    public void test04401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04401");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        java.lang.String str5 = atomikosProperties0.logBaseName;
        java.lang.String str6 = atomikosProperties0.service;
        long long7 = atomikosProperties0.defaultJtaTimeout;
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tmlog" + "'", str5, "tmlog");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
    }

    @Test
    public void test04402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04402");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.setMaxRetries((int) (short) -1);
        long long3 = recovery0.retryInterval;
        recovery0.setRetryInterval(0L);
        long long6 = recovery0.retryInterval;
        recovery0.setForgetOrphanedLogEntriesDelay((long) ' ');
        recovery0.retryInterval = (-1);
        recovery0.setForgetOrphanedLogEntriesDelay((long) (short) -1);
        long long13 = recovery0.getRetryInterval();
        recovery0.setForgetOrphanedLogEntriesDelay((long) 'a');
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 10000L + "'", long3 == 10000L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
    }

    @Test
    public void test04403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04403");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        atomikosProperties0.setCheckpointInterval(10000L);
        long long7 = atomikosProperties0.maxTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel8 = org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel8;
        atomikosProperties0.consoleFileLimit = (byte) 1;
        atomikosProperties0.setDefaultJtaTimeout((long) (byte) -1);
        boolean boolean14 = atomikosProperties0.serialJtaTransactions;
        java.lang.String str15 = atomikosProperties0.consoleFileName;
        java.util.Properties properties16 = atomikosProperties0.asProperties();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel8 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO + "'", atomikosLoggingLevel8.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "tm.out" + "'", str15, "tm.out");
        org.junit.Assert.assertNotNull(properties16);
    }

    @Test
    public void test04404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04404");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int1 = atomikosProperties0.getConsoleFileCount();
        int int2 = atomikosProperties0.maxActives;
        int int3 = atomikosProperties0.getMaxActives();
        java.lang.String str4 = atomikosProperties0.getLogBaseName();
        boolean boolean5 = atomikosProperties0.enableLogging;
        int int6 = atomikosProperties0.getConsoleFileCount();
        atomikosProperties0.setForceShutdownOnVmExit(true);
        atomikosProperties0.service = "{{}={}}";
        boolean boolean11 = atomikosProperties0.isAllowSubTransactions();
        atomikosProperties0.setForceShutdownOnVmExit(false);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 50 + "'", int2 == 50);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 50 + "'", int3 == 50);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tmlog" + "'", str4, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test04405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04405");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setDefaultJtaTimeout((-1L));
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel3 = null;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel3;
        atomikosProperties0.outputDir = "";
        int int7 = atomikosProperties0.maxActives;
        boolean boolean8 = atomikosProperties0.isThreadedTwoPhaseCommit();
        atomikosProperties0.consoleFileLimit = (short) 10;
        java.util.Properties properties11 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long13 = atomikosProperties12.defaultJtaTimeout;
        java.lang.String str14 = atomikosProperties12.getLogBaseName();
        java.util.Properties properties15 = atomikosProperties12.asProperties();
        java.util.Properties properties16 = new java.util.Properties(properties15);
        java.lang.Object obj17 = properties11.remove((java.lang.Object) properties16);
        java.io.PrintWriter printWriter18 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties16.list(printWriter18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10000L + "'", long13 == 10000L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "tmlog" + "'", str14, "tmlog");
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertNull(obj17);
    }

    @Test
    public void test04406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04406");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.get((java.lang.Object) 0.0d);
        java.lang.Object obj3 = properties0.clone();
        java.lang.String str4 = properties0.toString();
        boolean boolean7 = properties0.remove((java.lang.Object) 0, (java.lang.Object) 'a');
        java.lang.Object obj8 = null;
        boolean boolean9 = properties0.equals(obj8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.logBaseDir = "";
        atomikosProperties10.setConsoleFileCount((int) (short) 10);
        java.lang.String str15 = atomikosProperties10.logBaseName;
        atomikosProperties10.outputDir = "";
        java.util.Properties properties18 = atomikosProperties10.asProperties();
        java.util.Properties properties19 = atomikosProperties10.asProperties();
        long long20 = atomikosProperties10.defaultJtaTimeout;
        boolean boolean21 = atomikosProperties10.isAllowSubTransactions();
        java.lang.String str22 = atomikosProperties10.getConsoleFileName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties23.setDefaultJtaTimeout((-1L));
        int int26 = atomikosProperties23.getConsoleFileLimit();
        atomikosProperties23.setCheckpointInterval((long) '#');
        java.lang.String str29 = atomikosProperties23.logBaseName;
        java.lang.String str30 = atomikosProperties23.outputDir;
        java.lang.Object obj31 = properties0.put((java.lang.Object) str22, (java.lang.Object) atomikosProperties23);
        atomikosProperties23.logBaseDir = "{com.atomikos.icatch.hi!=-1.0, =hi!}";
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{}" + "'", str4, "{}");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "tmlog" + "'", str15, "tmlog");
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertNotNull(properties19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10000L + "'", long20 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "tm.out" + "'", str22, "tm.out");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "tmlog" + "'", str29, "tmlog");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(obj31);
    }

    @Test
    public void test04407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04407");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.maxRetries = (-1);
        recovery0.setRetryInterval((long) (-1));
        long long5 = recovery0.getForgetOrphanedLogEntriesDelay();
        int int6 = recovery0.maxRetries;
        long long7 = recovery0.getRetryInterval();
        recovery0.setMaxRetries((int) (byte) -1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 86400000L + "'", long5 == 86400000L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
    }

    @Test
    public void test04408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04408");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Collection<java.lang.Object> objCollection2 = properties1.values();
        java.util.Properties properties3 = new java.util.Properties();
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Collection<java.lang.Object> objCollection5 = properties3.values();
        java.util.Enumeration<java.lang.Object> objEnumeration6 = properties3.keys();
        boolean boolean7 = properties1.contains((java.lang.Object) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties9.logBaseDir = "";
        atomikosProperties9.setConsoleFileCount((int) (short) 10);
        java.lang.String str14 = atomikosProperties9.logBaseName;
        atomikosProperties9.outputDir = "";
        java.util.Properties properties17 = atomikosProperties9.asProperties();
        java.util.Properties properties18 = atomikosProperties9.asProperties();
        boolean boolean19 = properties1.remove((java.lang.Object) (byte) 10, (java.lang.Object) atomikosProperties9);
        atomikosProperties9.setSerialJtaTransactions(false);
        atomikosProperties9.setOutputDir("{{}={}}");
        boolean boolean24 = atomikosProperties9.isEnableLogging();
        java.lang.String str25 = atomikosProperties9.getOutputDir();
        java.util.Properties properties26 = new java.util.Properties();
        java.util.Properties properties27 = new java.util.Properties(properties26);
        properties26.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery29 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery29.maxRetries = (-1);
        recovery29.setDelay((long) (short) 0);
        recovery29.maxRetries = 0;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery36 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long37 = recovery36.getRetryInterval();
        long long38 = recovery36.retryInterval;
        boolean boolean39 = properties26.remove((java.lang.Object) 0, (java.lang.Object) long38);
        java.lang.String str40 = properties26.toString();
        boolean boolean41 = properties26.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties43 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties43.logBaseDir = "";
        atomikosProperties43.setConsoleFileCount((int) (short) 10);
        java.lang.String str48 = atomikosProperties43.logBaseName;
        atomikosProperties43.outputDir = "";
        java.util.Properties properties51 = atomikosProperties43.asProperties();
        java.util.Set<java.lang.String> strSet52 = properties51.stringPropertyNames();
        boolean boolean54 = properties51.contains((java.lang.Object) false);
        properties51.clear();
        java.util.Enumeration<java.lang.Object> objEnumeration56 = properties51.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties57 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties57.setDefaultJtaTimeout((-1L));
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel60 = null;
        atomikosProperties57.consoleLogLevel = atomikosLoggingLevel60;
        atomikosProperties57.outputDir = "";
        int int64 = atomikosProperties57.maxActives;
        boolean boolean65 = atomikosProperties57.isThreadedTwoPhaseCommit();
        long long66 = atomikosProperties57.defaultJtaTimeout;
        java.lang.String str67 = atomikosProperties57.logBaseName;
        java.lang.String str68 = atomikosProperties57.consoleFileName;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties69 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int70 = atomikosProperties69.getConsoleFileCount();
        int int71 = atomikosProperties69.maxActives;
        atomikosProperties69.setConsoleFileName("");
        boolean boolean74 = atomikosProperties69.forceShutdownOnVmExit;
        long long75 = atomikosProperties69.maxTimeout;
        int int76 = atomikosProperties69.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties77 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int78 = atomikosProperties77.getConsoleFileCount();
        int int79 = atomikosProperties77.maxActives;
        atomikosProperties77.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel82 = org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN;
        atomikosProperties77.consoleLogLevel = atomikosLoggingLevel82;
        atomikosProperties69.setConsoleLogLevel(atomikosLoggingLevel82);
        java.lang.Object obj85 = properties51.replace((java.lang.Object) atomikosProperties57, (java.lang.Object) atomikosLoggingLevel82);
        atomikosProperties9.set(properties26, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=10, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir=, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}", obj85);
        java.lang.Object obj89 = properties26.setProperty("{hi!={}}", "{com.atomikos.icatch.hi!=-1.0}");
        java.io.InputStream inputStream90 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties26.loadFromXML(inputStream90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection2);
        org.junit.Assert.assertNotNull(objCollection5);
        org.junit.Assert.assertNotNull(objEnumeration6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "tmlog" + "'", str14, "tmlog");
        org.junit.Assert.assertNotNull(properties17);
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "{{}={}}" + "'", str25, "{{}={}}");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 10000L + "'", long37 == 10000L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 10000L + "'", long38 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "{}" + "'", str40, "{}");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "tmlog" + "'", str48, "tmlog");
        org.junit.Assert.assertNotNull(properties51);
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(objEnumeration56);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 50 + "'", int64 == 50);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + (-1L) + "'", long66 == (-1L));
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "tmlog" + "'", str67, "tmlog");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "tm.out" + "'", str68, "tm.out");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 50 + "'", int71 == 50);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 300000L + "'", long75 == 300000L);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 50 + "'", int79 == 50);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel82 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel82.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(obj85);
        org.junit.Assert.assertNull(obj89);
    }

    @Test
    public void test04409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04409");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.maxRetries = (-1);
        recovery0.setDelay((long) (short) 0);
        long long5 = recovery0.forgetOrphanedLogEntriesDelay;
        recovery0.retryInterval = 52L;
        long long8 = recovery0.forgetOrphanedLogEntriesDelay;
        long long9 = recovery0.getForgetOrphanedLogEntriesDelay();
        long long10 = recovery0.delay;
        long long11 = recovery0.getRetryInterval();
        long long12 = recovery0.retryInterval;
        recovery0.setRetryInterval((long) 100);
        recovery0.setMaxRetries(20);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 86400000L + "'", long5 == 86400000L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 86400000L + "'", long8 == 86400000L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 86400000L + "'", long9 == 86400000L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 52L + "'", long11 == 52L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 52L + "'", long12 == 52L);
    }

    @Test
    public void test04410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04410");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties3 = new java.util.Properties();
        java.lang.Object obj5 = properties3.get((java.lang.Object) 0.0d);
        java.lang.Object obj6 = properties3.clone();
        java.lang.String str7 = properties3.toString();
        boolean boolean10 = properties3.remove((java.lang.Object) 0, (java.lang.Object) 'a');
        java.lang.Object obj11 = properties1.replace((java.lang.Object) 10.0d, (java.lang.Object) properties3);
        java.lang.String str12 = properties3.toString();
        java.util.Properties properties13 = new java.util.Properties(properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties14.setDefaultJtaTimeout((-1L));
        int int17 = atomikosProperties14.getConsoleFileLimit();
        atomikosProperties14.checkpointInterval = 0L;
        java.lang.Object obj20 = properties3.remove((java.lang.Object) 0L);
        java.lang.Object obj23 = properties3.setProperty("{com.atomikos.icatch.hi!=-1.0}", "");
        int int24 = properties3.size();
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "{}");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "{}" + "'", str7, "{}");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "{}" + "'", str12, "{}");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
    }

    @Test
    public void test04411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04411");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties0.isEmpty();
        java.lang.String str3 = properties0.toString();
        java.util.Properties properties4 = new java.util.Properties();
        java.lang.Object obj6 = properties4.get((java.lang.Object) 0.0d);
        java.lang.Object obj7 = properties4.clone();
        java.lang.String str8 = properties4.toString();
        java.util.Properties properties9 = new java.util.Properties(properties4);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet10 = properties4.entrySet();
        java.util.Set<java.lang.String> strSet11 = properties4.stringPropertyNames();
        boolean boolean12 = properties0.containsKey((java.lang.Object) strSet11);
        java.util.Properties properties13 = new java.util.Properties(properties0);
        int int14 = properties13.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties15.logBaseDir = "";
        atomikosProperties15.setConsoleFileCount((int) (short) 10);
        long long20 = atomikosProperties15.getMaxTimeout();
        java.util.Properties properties21 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet22 = properties21.keySet();
        atomikosProperties15.set(properties21, "hi!", (java.lang.Object) (-1.0f));
        java.lang.String str26 = atomikosProperties15.logBaseDir;
        boolean boolean27 = atomikosProperties15.enableLogging;
        atomikosProperties15.setLogBaseDir("");
        atomikosProperties15.logBaseName = "{com.atomikos.icatch.hi!=-1.0}";
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel32 = atomikosProperties15.getConsoleLogLevel();
        long long33 = atomikosProperties15.getCheckpointInterval();
        atomikosProperties15.setThreadedTwoPhaseCommit(false);
        int int36 = atomikosProperties15.consoleFileLimit;
        atomikosProperties15.logBaseDir = "";
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties39 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties39.logBaseDir = "";
        atomikosProperties39.setConsoleFileCount((int) (short) 10);
        java.lang.String str44 = atomikosProperties39.logBaseName;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel45 = org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN;
        atomikosProperties39.consoleLogLevel = atomikosLoggingLevel45;
        boolean boolean47 = atomikosProperties39.enableLogging;
        boolean boolean48 = atomikosProperties39.allowSubTransactions;
        java.lang.Object obj49 = properties13.replace((java.lang.Object) atomikosProperties15, (java.lang.Object) atomikosProperties39);
        java.util.Properties properties50 = atomikosProperties15.asProperties();
        java.lang.Object obj51 = properties50.clone();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "{}" + "'", str3, "{}");
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{}");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{}" + "'", str8, "{}");
        org.junit.Assert.assertNotNull(objEntrySet10);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 300000L + "'", long20 == 300000L);
        org.junit.Assert.assertNotNull(objSet22);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel32 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel32.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 500L + "'", long33 == 500L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "tmlog" + "'", str44, "tmlog");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel45 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel45.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertNotNull(properties50);
        org.junit.Assert.assertNotNull(obj51);
// flaky:         org.junit.Assert.assertEquals(obj51.toString(), "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=10, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir=, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name={com.atomikos.icatch.hi!=-1.0}, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj51), "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=10, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir=, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name={com.atomikos.icatch.hi!=-1.0}, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj51), "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=10, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir=, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name={com.atomikos.icatch.hi!=-1.0}, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
    }

    @Test
    public void test04412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04412");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        long long5 = atomikosProperties0.getMaxTimeout();
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet7 = properties6.keySet();
        atomikosProperties0.set(properties6, "hi!", (java.lang.Object) (-1.0f));
        java.lang.String str11 = atomikosProperties0.logBaseDir;
        atomikosProperties0.outputDir = "hi!";
        boolean boolean14 = atomikosProperties0.isThreadedTwoPhaseCommit();
        atomikosProperties0.logBaseName = "{{}={}}";
        atomikosProperties0.setForceShutdownOnVmExit(false);
        atomikosProperties0.setConsoleFileName("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=10, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir=, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        long long21 = atomikosProperties0.getMaxTimeout();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertNotNull(objSet7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 300000L + "'", long21 == 300000L);
    }

    @Test
    public void test04413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04413");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        java.lang.String str5 = atomikosProperties0.logBaseName;
        java.lang.String str6 = atomikosProperties0.logBaseDir;
        long long7 = atomikosProperties0.defaultJtaTimeout;
        java.util.Properties properties8 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery9 = atomikosProperties0.getRecovery();
        boolean boolean10 = atomikosProperties0.isSerialJtaTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery11 = atomikosProperties0.getRecovery();
        recovery11.forgetOrphanedLogEntriesDelay = 18;
        long long14 = recovery11.delay;
        recovery11.setForgetOrphanedLogEntriesDelay((long) 50);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tmlog" + "'", str5, "tmlog");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertNotNull(recovery9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(recovery11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10000L + "'", long14 == 10000L);
    }

    @Test
    public void test04414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04414");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.defaultJtaTimeout;
        int int2 = atomikosProperties0.getConsoleFileCount();
        long long3 = atomikosProperties0.getCheckpointInterval();
        long long4 = atomikosProperties0.getCheckpointInterval();
        boolean boolean5 = atomikosProperties0.threadedTwoPhaseCommit;
        atomikosProperties0.setMaxTimeout((long) 1);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 10000L + "'", long1 == 10000L);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 500L + "'", long3 == 500L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 500L + "'", long4 == 500L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test04415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04415");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.enableLogging = true;
        int int3 = atomikosProperties0.consoleFileLimit;
        atomikosProperties0.logBaseName = "hi!";
        boolean boolean6 = atomikosProperties0.isThreadedTwoPhaseCommit();
        boolean boolean7 = atomikosProperties0.enableLogging;
        java.util.Properties properties8 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int10 = atomikosProperties9.getConsoleFileCount();
        int int11 = atomikosProperties9.maxActives;
        java.lang.String str12 = atomikosProperties9.getService();
        int int13 = atomikosProperties9.getConsoleFileCount();
        java.util.Properties properties14 = new java.util.Properties();
        java.util.Properties properties15 = new java.util.Properties(properties14);
        java.util.Collection<java.lang.Object> objCollection16 = properties15.values();
        java.lang.Object obj19 = properties15.setProperty("hi!", "{}");
        java.lang.String str21 = properties15.getProperty("tmlog");
        properties15.clear();
        java.lang.Object obj23 = properties15.clone();
        java.util.Properties properties24 = new java.util.Properties();
        java.util.Properties properties25 = new java.util.Properties(properties24);
        java.util.Collection<java.lang.Object> objCollection26 = properties24.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties27.logBaseDir = "";
        atomikosProperties27.setConsoleFileCount((int) (short) 10);
        atomikosProperties27.setLogBaseDir("{}");
        java.util.Properties properties34 = atomikosProperties27.asProperties();
        atomikosProperties27.service = "";
        atomikosProperties27.setTransactionManagerUniqueName("{}");
        boolean boolean39 = properties24.equals((java.lang.Object) "{}");
        boolean boolean40 = properties8.replace((java.lang.Object) atomikosProperties9, obj23, (java.lang.Object) boolean39);
        java.lang.Object obj41 = properties8.clone();
        java.util.Properties properties42 = new java.util.Properties(properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties43 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties43.logBaseDir = "";
        atomikosProperties43.setConsoleFileCount((int) (short) 10);
        long long48 = atomikosProperties43.getMaxTimeout();
        atomikosProperties43.service = "";
        java.lang.String str51 = atomikosProperties43.logBaseDir;
        boolean boolean52 = atomikosProperties43.threadedTwoPhaseCommit;
        long long53 = atomikosProperties43.checkpointInterval;
        atomikosProperties43.setTransactionManagerUniqueName("{{}={}}");
        java.util.Properties properties56 = atomikosProperties43.asProperties();
        java.lang.Object obj59 = properties56.setProperty("tm.out", "{com.atomikos.icatch.hi!=-1.0, =hi!}");
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean60 = properties8.containsValue(obj59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 50 + "'", int11 == 50);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(objCollection16);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "{}");
        org.junit.Assert.assertNotNull(objCollection26);
        org.junit.Assert.assertNotNull(properties34);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(obj41);
// flaky:         org.junit.Assert.assertEquals(obj41.toString(), "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=hi!, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=hi!, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=hi!, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 300000L + "'", long48 == 300000L);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 500L + "'", long53 == 500L);
        org.junit.Assert.assertNotNull(properties56);
        org.junit.Assert.assertNull(obj59);
    }

    @Test
    public void test04416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04416");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        long long5 = atomikosProperties0.getMaxTimeout();
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet7 = properties6.keySet();
        atomikosProperties0.set(properties6, "hi!", (java.lang.Object) (-1.0f));
        java.lang.String str11 = atomikosProperties0.logBaseDir;
        java.lang.String str12 = atomikosProperties0.logBaseDir;
        java.lang.String str13 = atomikosProperties0.logBaseDir;
        java.lang.String str14 = atomikosProperties0.getService();
        atomikosProperties0.checkpointInterval = 100L;
        atomikosProperties0.setService("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=-1, 0=INFO}");
        atomikosProperties0.setConsoleFileName("tmlog");
        java.util.Properties properties21 = new java.util.Properties();
        java.util.Properties properties22 = new java.util.Properties(properties21);
        java.util.Collection<java.lang.Object> objCollection23 = properties22.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties24.enableLogging = true;
        long long27 = atomikosProperties24.getCheckpointInterval();
        boolean boolean29 = properties22.remove((java.lang.Object) long27, (java.lang.Object) (byte) 100);
        java.lang.String str30 = properties22.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties31.logBaseDir = "";
        atomikosProperties31.setConsoleFileCount((int) (short) 10);
        long long36 = atomikosProperties31.getMaxTimeout();
        java.util.Properties properties37 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet38 = properties37.keySet();
        atomikosProperties31.set(properties37, "hi!", (java.lang.Object) (-1.0f));
        java.lang.Object obj44 = properties37.setProperty("", "hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties45 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties45.setDefaultJtaTimeout((-1L));
        java.util.Properties properties48 = new java.util.Properties();
        java.lang.Object obj50 = properties48.get((java.lang.Object) 0.0d);
        java.lang.Object obj51 = properties48.clone();
        boolean boolean53 = properties37.replace((java.lang.Object) (-1L), obj51, (java.lang.Object) 100.0d);
        java.util.Properties properties54 = new java.util.Properties();
        java.util.Properties properties55 = new java.util.Properties(properties54);
        properties55.clear();
        properties37.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties55);
        java.util.Enumeration<java.lang.Object> objEnumeration58 = properties55.elements();
        java.lang.String str60 = properties55.getProperty("");
        java.util.Properties properties61 = new java.util.Properties(properties55);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery62 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long63 = recovery62.getRetryInterval();
        recovery62.delay = 10L;
        boolean boolean66 = properties22.remove((java.lang.Object) properties61, (java.lang.Object) 10L);
        java.util.Enumeration<java.lang.Object> objEnumeration67 = properties61.keys();
        java.util.Properties properties68 = new java.util.Properties(properties61);
        java.util.Properties properties69 = new java.util.Properties(properties61);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery70 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery70.maxRetries = (-1);
        recovery70.setDelay((long) (short) 1);
        long long75 = recovery70.getForgetOrphanedLogEntriesDelay();
        int int76 = recovery70.maxRetries;
        recovery70.setRetryInterval((long) (byte) 100);
        long long79 = recovery70.getDelay();
        boolean boolean80 = properties61.contains((java.lang.Object) long79);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties82 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties82.logBaseDir = "";
        atomikosProperties82.setConsoleFileCount((int) (short) 10);
        long long87 = atomikosProperties82.getMaxTimeout();
        atomikosProperties82.service = "";
        java.lang.String str90 = atomikosProperties82.logBaseDir;
        java.lang.String str91 = atomikosProperties82.getLogBaseDir();
        atomikosProperties82.setConsoleFileName("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=10, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir=, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        atomikosProperties0.set(properties61, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=10, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir={}, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}", (java.lang.Object) atomikosProperties82);
        atomikosProperties82.threadedTwoPhaseCommit = false;
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertNotNull(objSet7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(objCollection23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 500L + "'", long27 == 500L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "{}" + "'", str30, "{}");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 300000L + "'", long36 == 300000L);
        org.junit.Assert.assertNotNull(objSet38);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertEquals(obj51.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj51), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj51), "{}");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(objEnumeration58);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 10000L + "'", long63 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(objEnumeration67);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 86400000L + "'", long75 == 86400000L);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 1L + "'", long79 == 1L);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 300000L + "'", long87 == 300000L);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
    }

    @Test
    public void test04417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04417");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        atomikosProperties0.setLogBaseDir("{}");
        java.lang.String str7 = atomikosProperties0.getOutputDir();
        atomikosProperties0.setLogBaseName("hi!");
        boolean boolean10 = atomikosProperties0.isAllowSubTransactions();
        int int11 = atomikosProperties0.getConsoleFileCount();
        java.util.Properties properties12 = atomikosProperties0.asProperties();
        java.util.Properties properties13 = atomikosProperties0.asProperties();
        java.util.Properties properties14 = new java.util.Properties();
        java.util.Properties properties15 = new java.util.Properties(properties14);
        java.util.Properties properties17 = new java.util.Properties();
        java.lang.Object obj19 = properties17.get((java.lang.Object) 0.0d);
        java.lang.Object obj20 = properties17.clone();
        java.lang.String str21 = properties17.toString();
        boolean boolean24 = properties17.remove((java.lang.Object) 0, (java.lang.Object) 'a');
        java.lang.Object obj25 = properties15.replace((java.lang.Object) 10.0d, (java.lang.Object) properties17);
        java.util.Properties properties26 = new java.util.Properties(properties15);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties26.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties28.setDefaultJtaTimeout((-1L));
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel31 = null;
        atomikosProperties28.consoleLogLevel = atomikosLoggingLevel31;
        atomikosProperties28.outputDir = "";
        int int35 = atomikosProperties28.maxActives;
        boolean boolean36 = atomikosProperties28.isThreadedTwoPhaseCommit();
        atomikosProperties28.consoleFileLimit = (short) 10;
        java.util.Properties properties39 = atomikosProperties28.asProperties();
        java.lang.Object obj40 = properties26.get((java.lang.Object) properties39);
        java.util.Properties properties41 = new java.util.Properties(properties39);
        boolean boolean42 = properties13.equals((java.lang.Object) properties39);
        java.util.Collection<java.lang.Object> objCollection43 = properties13.values();
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertNotNull(properties12);
        org.junit.Assert.assertNotNull(properties13);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{}");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "{}" + "'", str21, "{}");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 50 + "'", int35 == 50);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(properties39);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(objCollection43);
    }

    @Test
    public void test04418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04418");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.enableLogging = true;
        int int3 = atomikosProperties0.consoleFileLimit;
        atomikosProperties0.logBaseName = "hi!";
        boolean boolean6 = atomikosProperties0.isThreadedTwoPhaseCommit();
        java.lang.String str7 = atomikosProperties0.service;
        boolean boolean8 = atomikosProperties0.enableLogging;
        java.lang.String str9 = atomikosProperties0.logBaseName;
        int int10 = atomikosProperties0.getMaxActives();
        atomikosProperties0.allowSubTransactions = true;
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 50 + "'", int10 == 50);
    }

    @Test
    public void test04419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04419");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setSerialJtaTransactions(false);
        java.lang.String str5 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.checkpointInterval = (short) 1;
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tm.out" + "'", str5, "tm.out");
    }

    @Test
    public void test04420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04420");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.enableLogging = true;
        long long3 = atomikosProperties0.getCheckpointInterval();
        java.lang.String str4 = atomikosProperties0.getService();
        atomikosProperties0.forceShutdownOnVmExit = false;
        atomikosProperties0.setLogBaseDir("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties9.enableLogging = true;
        long long12 = atomikosProperties9.getCheckpointInterval();
        java.lang.String str13 = atomikosProperties9.getService();
        java.lang.String str14 = atomikosProperties9.logBaseDir;
        atomikosProperties9.setEnableLogging(false);
        atomikosProperties9.maxTimeout = (short) -1;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel19 = atomikosProperties9.consoleLogLevel;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel19);
        java.lang.String str21 = atomikosProperties0.consoleFileName;
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 500L + "'", long3 == 500L);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 500L + "'", long12 == 500L);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel19 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel19.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "tm.out" + "'", str21, "tm.out");
    }

    @Test
    public void test04421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04421");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Collection<java.lang.Object> objCollection2 = properties1.values();
        boolean boolean3 = properties1.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long5 = atomikosProperties4.defaultJtaTimeout;
        java.lang.String str6 = atomikosProperties4.getLogBaseName();
        atomikosProperties4.allowSubTransactions = true;
        boolean boolean9 = atomikosProperties4.enableLogging;
        boolean boolean10 = atomikosProperties4.threadedTwoPhaseCommit;
        java.lang.Object obj11 = properties1.remove((java.lang.Object) boolean10);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int13 = atomikosProperties12.getConsoleFileCount();
        int int14 = atomikosProperties12.maxActives;
        atomikosProperties12.setEnableLogging(true);
        boolean boolean17 = atomikosProperties12.isThreadedTwoPhaseCommit();
        boolean boolean18 = atomikosProperties12.isAllowSubTransactions();
        java.util.Properties properties19 = atomikosProperties12.asProperties();
        boolean boolean20 = properties1.containsKey((java.lang.Object) properties19);
        java.lang.Object obj23 = properties19.setProperty("", "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.console_file_count=10, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir={true=10000}, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.output_dir=, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        org.junit.Assert.assertNotNull(objCollection2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 10000L + "'", long5 == 10000L);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 50 + "'", int14 == 50);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(properties19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(obj23);
    }

    @Test
    public void test04422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04422");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        atomikosProperties0.setLogBaseDir("{}");
        java.lang.String str7 = atomikosProperties0.getOutputDir();
        atomikosProperties0.setLogBaseName("hi!");
        boolean boolean10 = atomikosProperties0.isAllowSubTransactions();
        boolean boolean11 = atomikosProperties0.isThreadedTwoPhaseCommit();
        boolean boolean12 = atomikosProperties0.forceShutdownOnVmExit;
        boolean boolean13 = atomikosProperties0.enableLogging;
        atomikosProperties0.setTransactionManagerUniqueName("");
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        java.lang.String str18 = atomikosProperties0.consoleFileName;
        atomikosProperties0.setLogBaseDir("{{}=tmlog}");
        atomikosProperties0.setEnableLogging(false);
        atomikosProperties0.setAllowSubTransactions(false);
        atomikosProperties0.transactionManagerUniqueName = "{{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=10, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir=, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}={com.atomikos.icatch.hi!=-1.0, =hi!}}";
        java.util.Properties properties27 = atomikosProperties0.asProperties();
        java.util.Set<java.lang.String> strSet28 = properties27.stringPropertyNames();
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "tm.out" + "'", str18, "tm.out");
        org.junit.Assert.assertNotNull(properties27);
        org.junit.Assert.assertNotNull(strSet28);
    }

    @Test
    public void test04423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04423");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.enableLogging = true;
        int int3 = atomikosProperties0.consoleFileLimit;
        atomikosProperties0.logBaseName = "hi!";
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int7 = atomikosProperties6.getConsoleFileCount();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties8.logBaseDir = "";
        atomikosProperties8.setConsoleFileCount((int) (short) 10);
        atomikosProperties8.setCheckpointInterval(10000L);
        long long15 = atomikosProperties8.maxTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel16 = org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO;
        atomikosProperties8.consoleLogLevel = atomikosLoggingLevel16;
        atomikosProperties6.consoleLogLevel = atomikosLoggingLevel16;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel16;
        atomikosProperties0.checkpointInterval = 35;
        boolean boolean22 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.setAllowSubTransactions(true);
        int int25 = atomikosProperties0.consoleFileCount;
        boolean boolean26 = atomikosProperties0.isEnableLogging();
        java.util.Properties properties27 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties28.setDefaultJtaTimeout((-1L));
        int int31 = atomikosProperties28.getConsoleFileLimit();
        java.util.Properties properties32 = atomikosProperties28.asProperties();
        java.util.Properties properties33 = new java.util.Properties();
        java.lang.Object obj35 = properties33.get((java.lang.Object) 0.0d);
        java.lang.Object obj36 = properties33.clone();
        java.lang.String str37 = properties33.toString();
        java.util.Properties properties38 = new java.util.Properties(properties33);
        java.util.Enumeration<java.lang.Object> objEnumeration39 = properties38.keys();
        java.util.Collection<java.lang.Object> objCollection40 = properties38.values();
        boolean boolean41 = properties32.contains((java.lang.Object) objCollection40);
        java.lang.Object obj42 = properties32.clone();
        boolean boolean43 = properties27.containsValue(obj42);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 300000L + "'", long15 == 300000L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel16 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO + "'", atomikosLoggingLevel16.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(properties27);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(properties32);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "{}");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "{}" + "'", str37, "{}");
        org.junit.Assert.assertNotNull(objEnumeration39);
        org.junit.Assert.assertNotNull(objCollection40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(obj42);
// flaky:         org.junit.Assert.assertEquals(obj42.toString(), "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=-1}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=-1}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=-1}");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test04424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04424");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        java.lang.String str5 = atomikosProperties0.logBaseName;
        java.lang.String str6 = atomikosProperties0.logBaseDir;
        java.lang.String str7 = atomikosProperties0.getOutputDir();
        java.util.Properties properties8 = atomikosProperties0.asProperties();
        int int9 = atomikosProperties0.getConsoleFileLimit();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.logBaseDir = "";
        atomikosProperties10.setConsoleFileCount((int) (short) 10);
        long long15 = atomikosProperties10.getMaxTimeout();
        java.util.Properties properties16 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet17 = properties16.keySet();
        atomikosProperties10.set(properties16, "hi!", (java.lang.Object) (-1.0f));
        java.lang.Object obj23 = properties16.setProperty("", "hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties24.setDefaultJtaTimeout((-1L));
        java.util.Properties properties27 = new java.util.Properties();
        java.lang.Object obj29 = properties27.get((java.lang.Object) 0.0d);
        java.lang.Object obj30 = properties27.clone();
        boolean boolean32 = properties16.replace((java.lang.Object) (-1L), obj30, (java.lang.Object) 100.0d);
        java.util.Properties properties33 = new java.util.Properties();
        java.util.Properties properties34 = new java.util.Properties(properties33);
        properties34.clear();
        properties16.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties34);
        java.util.Enumeration<java.lang.Object> objEnumeration37 = properties34.elements();
        java.lang.String str39 = properties34.getProperty("");
        java.util.Properties properties40 = new java.util.Properties();
        java.lang.Object obj42 = properties40.get((java.lang.Object) 0.0d);
        java.lang.Object obj43 = properties40.clone();
        java.lang.String str44 = properties40.toString();
        boolean boolean46 = properties34.remove((java.lang.Object) properties40, (java.lang.Object) 0);
        java.util.Enumeration<?> wildcardEnumeration47 = properties34.propertyNames();
        java.util.Properties properties48 = new java.util.Properties(properties34);
        java.util.Properties properties49 = new java.util.Properties(properties34);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties50.logBaseDir = "";
        atomikosProperties50.setConsoleFileCount((int) (short) 10);
        long long55 = atomikosProperties50.getMaxTimeout();
        java.util.Properties properties56 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet57 = properties56.keySet();
        atomikosProperties50.set(properties56, "hi!", (java.lang.Object) (-1.0f));
        java.lang.String str61 = atomikosProperties50.service;
        atomikosProperties50.setSerialJtaTransactions(false);
        int int64 = atomikosProperties50.consoleFileLimit;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties65 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties65.logBaseDir = "";
        atomikosProperties65.setConsoleFileCount((int) (short) 10);
        java.lang.String str70 = atomikosProperties65.transactionManagerUniqueName;
        long long71 = atomikosProperties65.getDefaultJtaTimeout();
        long long72 = atomikosProperties65.checkpointInterval;
        int int73 = atomikosProperties65.getConsoleFileCount();
        java.lang.Object obj74 = properties49.put((java.lang.Object) atomikosProperties50, (java.lang.Object) atomikosProperties65);
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel75 = atomikosProperties50.getConsoleLogLevel();
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel75);
        atomikosProperties0.consoleFileLimit = '4';
        boolean boolean79 = atomikosProperties0.isAllowSubTransactions();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tmlog" + "'", str5, "tmlog");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 300000L + "'", long15 == 300000L);
        org.junit.Assert.assertNotNull(objSet17);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "{}");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objEnumeration37);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "{}");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "{}" + "'", str44, "{}");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(wildcardEnumeration47);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 300000L + "'", long55 == 300000L);
        org.junit.Assert.assertNotNull(objSet57);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 10000L + "'", long71 == 10000L);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 500L + "'", long72 == 500L);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 10 + "'", int73 == 10);
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel75 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel75.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
    }

    @Test
    public void test04425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04425");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        long long5 = atomikosProperties0.getMaxTimeout();
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet7 = properties6.keySet();
        atomikosProperties0.set(properties6, "hi!", (java.lang.Object) (-1.0f));
        java.lang.String str11 = atomikosProperties0.logBaseDir;
        java.lang.String str12 = atomikosProperties0.logBaseDir;
        java.util.Properties properties13 = atomikosProperties0.asProperties();
        atomikosProperties0.consoleFileLimit = (byte) 10;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties16.logBaseDir = "";
        boolean boolean19 = atomikosProperties16.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties20.logBaseDir = "";
        atomikosProperties20.setConsoleFileCount((int) (short) 10);
        long long25 = atomikosProperties20.getMaxTimeout();
        java.util.Properties properties26 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet27 = properties26.keySet();
        atomikosProperties20.set(properties26, "hi!", (java.lang.Object) (-1.0f));
        java.lang.Object obj33 = properties26.setProperty("", "hi!");
        java.util.Properties properties34 = new java.util.Properties();
        java.util.Properties properties35 = new java.util.Properties(properties34);
        java.util.Collection<java.lang.Object> objCollection36 = properties34.values();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel37 = org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO;
        boolean boolean38 = properties26.remove((java.lang.Object) objCollection36, (java.lang.Object) atomikosLoggingLevel37);
        atomikosProperties16.setConsoleLogLevel(atomikosLoggingLevel37);
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel37);
        atomikosProperties0.logBaseDir = "{hi!={}}";
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertNotNull(objSet7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(properties13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 300000L + "'", long25 == 300000L);
        org.junit.Assert.assertNotNull(objSet27);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNotNull(objCollection36);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel37 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO + "'", atomikosLoggingLevel37.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test04426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04426");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int1 = atomikosProperties0.getConsoleFileCount();
        int int2 = atomikosProperties0.maxActives;
        atomikosProperties0.setConsoleFileName("");
        java.lang.String str5 = atomikosProperties0.getOutputDir();
        atomikosProperties0.service = "tmlog";
        java.util.Properties properties8 = new java.util.Properties();
        java.util.Properties properties9 = new java.util.Properties(properties8);
        java.util.Collection<java.lang.Object> objCollection10 = properties9.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties11.enableLogging = true;
        long long14 = atomikosProperties11.getCheckpointInterval();
        boolean boolean16 = properties9.remove((java.lang.Object) long14, (java.lang.Object) (byte) 100);
        boolean boolean18 = properties9.equals((java.lang.Object) (short) 1);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet19 = properties9.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties20.setDefaultJtaTimeout((-1L));
        long long23 = atomikosProperties20.checkpointInterval;
        boolean boolean24 = atomikosProperties20.forceShutdownOnVmExit;
        atomikosProperties20.setThreadedTwoPhaseCommit(true);
        boolean boolean27 = properties9.contains((java.lang.Object) true);
        java.util.Properties properties28 = new java.util.Properties(properties9);
        boolean boolean30 = properties28.containsValue((java.lang.Object) (short) -1);
        java.util.Properties properties32 = new java.util.Properties();
        java.util.Properties properties33 = new java.util.Properties(properties32);
        java.util.Properties properties35 = new java.util.Properties();
        java.lang.Object obj37 = properties35.get((java.lang.Object) 0.0d);
        java.lang.Object obj38 = properties35.clone();
        java.lang.String str39 = properties35.toString();
        boolean boolean42 = properties35.remove((java.lang.Object) 0, (java.lang.Object) 'a');
        java.lang.Object obj43 = properties33.replace((java.lang.Object) 10.0d, (java.lang.Object) properties35);
        java.lang.String str44 = properties35.toString();
        java.util.Properties properties45 = new java.util.Properties(properties35);
        java.util.Properties properties46 = new java.util.Properties();
        java.util.Properties properties47 = new java.util.Properties(properties46);
        java.util.Properties properties49 = new java.util.Properties();
        java.lang.Object obj51 = properties49.get((java.lang.Object) 0.0d);
        java.lang.Object obj52 = properties49.clone();
        java.lang.String str53 = properties49.toString();
        boolean boolean56 = properties49.remove((java.lang.Object) 0, (java.lang.Object) 'a');
        java.lang.Object obj57 = properties47.replace((java.lang.Object) 10.0d, (java.lang.Object) properties49);
        java.util.Properties properties58 = new java.util.Properties(properties47);
        properties45.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties58);
        atomikosProperties0.set(properties28, "{com.atomikos.icatch.hi!=-1.0}", (java.lang.Object) properties45);
        atomikosProperties0.setForceShutdownOnVmExit(false);
        atomikosProperties0.serialJtaTransactions = false;
        java.lang.String str65 = atomikosProperties0.getService();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 50 + "'", int2 == 50);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(objCollection10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 500L + "'", long14 == 500L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(objEntrySet19);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 500L + "'", long23 == 500L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertEquals(obj38.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "{}");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "{}" + "'", str39, "{}");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "{}" + "'", str44, "{}");
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertEquals(obj52.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj52), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj52), "{}");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "{}" + "'", str53, "{}");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "tmlog" + "'", str65, "tmlog");
    }

    @Test
    public void test04427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04427");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        long long5 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.service = "";
        java.lang.String str8 = atomikosProperties0.logBaseDir;
        boolean boolean9 = atomikosProperties0.threadedTwoPhaseCommit;
        java.lang.String str10 = atomikosProperties0.getService();
        java.lang.String str11 = atomikosProperties0.consoleFileName;
        boolean boolean12 = atomikosProperties0.serialJtaTransactions;
        atomikosProperties0.service = "{com.atomikos.icatch.hi!=-1.0}";
        int int15 = atomikosProperties0.getConsoleFileCount();
        atomikosProperties0.logBaseName = "";
        int int18 = atomikosProperties0.maxActives;
        atomikosProperties0.consoleFileName = "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.output_dir=, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=10, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=-1}";
        atomikosProperties0.consoleFileLimit = (byte) 0;
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "tm.out" + "'", str11, "tm.out");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 50 + "'", int18 == 50);
    }

    @Test
    public void test04428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04428");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        java.lang.String str5 = atomikosProperties0.transactionManagerUniqueName;
        long long6 = atomikosProperties0.getDefaultJtaTimeout();
        long long7 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.setConsoleFileName("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=10, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir=, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        atomikosProperties0.allowSubTransactions = true;
        java.lang.String str12 = atomikosProperties0.getConsoleFileName();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=10, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir=, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}" + "'", str12, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=10, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir=, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
    }

    @Test
    public void test04429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04429");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long1 = recovery0.getRetryInterval();
        recovery0.delay = 10L;
        recovery0.setForgetOrphanedLogEntriesDelay(0L);
        long long6 = recovery0.getRetryInterval();
        recovery0.maxRetries = 1;
        long long9 = recovery0.forgetOrphanedLogEntriesDelay;
        recovery0.retryInterval = 5;
        recovery0.setForgetOrphanedLogEntriesDelay((long) 35);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 10000L + "'", long1 == 10000L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }

    @Test
    public void test04430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04430");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        java.lang.String str5 = atomikosProperties0.logBaseName;
        atomikosProperties0.outputDir = "";
        java.util.Properties properties8 = atomikosProperties0.asProperties();
        java.util.Set<java.lang.String> strSet9 = properties8.stringPropertyNames();
        boolean boolean11 = properties8.contains((java.lang.Object) false);
        java.lang.String str12 = properties8.toString();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tmlog" + "'", str5, "tmlog");
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.console_file_count=10, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir=, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.output_dir=, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}" + "'", str12, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.console_file_count=10, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir=, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.output_dir=, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
    }

    @Test
    public void test04431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04431");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        java.lang.String str5 = atomikosProperties0.logBaseName;
        atomikosProperties0.outputDir = "";
        java.util.Properties properties8 = atomikosProperties0.asProperties();
        java.util.Properties properties9 = atomikosProperties0.asProperties();
        long long10 = atomikosProperties0.defaultJtaTimeout;
        atomikosProperties0.consoleFileLimit = 10;
        java.util.Properties properties13 = atomikosProperties0.asProperties();
        java.lang.String str15 = properties13.getProperty("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=INFO, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=35, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=hi!, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tmlog" + "'", str5, "tmlog");
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
        org.junit.Assert.assertNotNull(properties13);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test04432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04432");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.enableLogging = true;
        int int3 = atomikosProperties0.consoleFileLimit;
        atomikosProperties0.logBaseName = "hi!";
        atomikosProperties0.setEnableLogging(false);
        atomikosProperties0.setTransactionManagerUniqueName("");
        atomikosProperties0.forceShutdownOnVmExit = true;
        atomikosProperties0.setLogBaseName("hi!");
        java.util.Properties properties14 = atomikosProperties0.asProperties();
        java.util.Collection<java.lang.Object> objCollection15 = properties14.values();
        java.util.Properties properties16 = new java.util.Properties(properties14);
        java.util.Set<java.lang.Object> objSet17 = properties16.keySet();
        java.util.Properties properties18 = new java.util.Properties(properties16);
        java.util.Enumeration<java.lang.Object> objEnumeration19 = properties16.elements();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertNotNull(objCollection15);
        org.junit.Assert.assertNotNull(objSet17);
        org.junit.Assert.assertNotNull(objEnumeration19);
    }

    @Test
    public void test04433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04433");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.enableLogging = true;
        long long3 = atomikosProperties0.getCheckpointInterval();
        java.lang.String str4 = atomikosProperties0.getOutputDir();
        java.lang.String str5 = atomikosProperties0.service;
        atomikosProperties0.maxTimeout = 100;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel8 = atomikosProperties0.consoleLogLevel;
        int int9 = atomikosProperties0.maxActives;
        java.lang.String str10 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setLogBaseDir("{com.atomikos.icatch.{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=10, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir={}, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=hi!, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}=10}");
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 500L + "'", long3 == 500L);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel8 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel8.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test04434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04434");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        atomikosProperties0.setLogBaseDir("{}");
        java.util.Properties properties7 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "";
        boolean boolean10 = atomikosProperties0.isEnableLogging();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties11.enableLogging = true;
        long long14 = atomikosProperties11.getCheckpointInterval();
        java.lang.String str15 = atomikosProperties11.getService();
        java.lang.String str16 = atomikosProperties11.logBaseDir;
        atomikosProperties11.setEnableLogging(false);
        atomikosProperties11.consoleFileCount = 0;
        long long21 = atomikosProperties11.getMaxTimeout();
        boolean boolean22 = atomikosProperties11.isEnableLogging();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel23 = atomikosProperties11.consoleLogLevel;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel23;
        atomikosProperties0.setMaxTimeout((long) (byte) 1);
        atomikosProperties0.enableLogging = false;
        int int29 = atomikosProperties0.getConsoleFileLimit();
        boolean boolean30 = atomikosProperties0.isAllowSubTransactions();
        boolean boolean31 = atomikosProperties0.isForceShutdownOnVmExit();
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 500L + "'", long14 == 500L);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 300000L + "'", long21 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel23 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel23.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test04435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04435");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int1 = atomikosProperties0.getConsoleFileCount();
        int int2 = atomikosProperties0.maxActives;
        atomikosProperties0.setEnableLogging(true);
        boolean boolean5 = atomikosProperties0.isThreadedTwoPhaseCommit();
        atomikosProperties0.setMaxTimeout((-1L));
        atomikosProperties0.threadedTwoPhaseCommit = true;
        int int10 = atomikosProperties0.consoleFileLimit;
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 50 + "'", int2 == 50);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test04436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04436");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setDefaultJtaTimeout((-1L));
        java.lang.String str3 = atomikosProperties0.getTransactionManagerUniqueName();
        java.util.Properties properties4 = atomikosProperties0.asProperties();
        java.lang.String str5 = atomikosProperties0.getService();
        boolean boolean6 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.serialJtaTransactions = true;
        atomikosProperties0.setTransactionManagerUniqueName("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=-1}");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(properties4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test04437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04437");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Collection<java.lang.Object> objCollection2 = properties0.values();
        int int3 = properties0.size();
        int int4 = properties0.size();
        java.util.Set<java.lang.Object> objSet5 = properties0.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties6.logBaseDir = "";
        atomikosProperties6.setConsoleFileCount((int) (short) 10);
        long long11 = atomikosProperties6.getMaxTimeout();
        java.util.Properties properties12 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet13 = properties12.keySet();
        atomikosProperties6.set(properties12, "hi!", (java.lang.Object) (-1.0f));
        java.lang.String str17 = atomikosProperties6.logBaseDir;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery18 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery18.maxRetries = (-1);
        recovery18.setDelay((long) (short) 1);
        long long23 = recovery18.getForgetOrphanedLogEntriesDelay();
        long long24 = recovery18.getForgetOrphanedLogEntriesDelay();
        java.lang.Object obj25 = properties0.put((java.lang.Object) atomikosProperties6, (java.lang.Object) long24);
        java.util.Properties properties26 = new java.util.Properties(properties0);
        java.util.Properties properties27 = new java.util.Properties(properties26);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties28.enableLogging = true;
        long long31 = atomikosProperties28.getCheckpointInterval();
        atomikosProperties28.setService("tmlog");
        atomikosProperties28.setCheckpointInterval((long) (short) 0);
        java.lang.String str36 = atomikosProperties28.service;
        boolean boolean37 = atomikosProperties28.threadedTwoPhaseCommit;
        atomikosProperties28.consoleFileCount = 0;
        atomikosProperties28.setSerialJtaTransactions(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties42.logBaseDir = "";
        atomikosProperties42.setConsoleFileCount((int) (short) 10);
        atomikosProperties42.setLogBaseDir("{}");
        java.util.Properties properties49 = atomikosProperties42.asProperties();
        java.util.Set<java.lang.String> strSet50 = properties49.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties51 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int52 = atomikosProperties51.getConsoleFileCount();
        int int53 = atomikosProperties51.maxActives;
        atomikosProperties51.setConsoleFileName("");
        atomikosProperties51.transactionManagerUniqueName = "{}";
        java.util.Properties properties58 = atomikosProperties51.asProperties();
        boolean boolean59 = atomikosProperties51.threadedTwoPhaseCommit;
        atomikosProperties51.enableLogging = true;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties62 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int63 = atomikosProperties62.getConsoleFileCount();
        int int64 = atomikosProperties62.maxActives;
        atomikosProperties62.setConsoleFileName("");
        atomikosProperties62.transactionManagerUniqueName = "{}";
        atomikosProperties62.setMaxActives(0);
        boolean boolean71 = atomikosProperties62.forceShutdownOnVmExit;
        java.lang.Object obj72 = properties49.put((java.lang.Object) atomikosProperties51, (java.lang.Object) atomikosProperties62);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties73 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties73.logBaseDir = "";
        boolean boolean76 = atomikosProperties73.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery77 = atomikosProperties73.getRecovery();
        boolean boolean78 = properties49.contains((java.lang.Object) atomikosProperties73);
        java.lang.Object obj79 = properties27.getOrDefault((java.lang.Object) atomikosProperties28, (java.lang.Object) boolean78);
        int int80 = atomikosProperties28.consoleFileLimit;
        org.junit.Assert.assertNotNull(objCollection2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(objSet5);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 300000L + "'", long11 == 300000L);
        org.junit.Assert.assertNotNull(objSet13);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 86400000L + "'", long23 == 86400000L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 86400000L + "'", long24 == 86400000L);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 500L + "'", long31 == 500L);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "tmlog" + "'", str36, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(properties49);
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 50 + "'", int53 == 50);
        org.junit.Assert.assertNotNull(properties58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 50 + "'", int64 == 50);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(obj72);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(recovery77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertEquals("'" + obj79 + "' != '" + false + "'", obj79, false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
    }

    @Test
    public void test04438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04438");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        long long5 = atomikosProperties0.getMaxTimeout();
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet7 = properties6.keySet();
        atomikosProperties0.set(properties6, "hi!", (java.lang.Object) (-1.0f));
        java.lang.String str11 = atomikosProperties0.logBaseDir;
        boolean boolean12 = atomikosProperties0.enableLogging;
        atomikosProperties0.setLogBaseDir("");
        atomikosProperties0.logBaseName = "{com.atomikos.icatch.hi!=-1.0}";
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel17 = atomikosProperties0.getConsoleLogLevel();
        long long18 = atomikosProperties0.getCheckpointInterval();
        atomikosProperties0.setThreadedTwoPhaseCommit(false);
        int int21 = atomikosProperties0.consoleFileLimit;
        atomikosProperties0.logBaseDir = "";
        java.util.Properties properties24 = atomikosProperties0.asProperties();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertNotNull(objSet7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel17 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel17.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 500L + "'", long18 == 500L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(properties24);
    }

    @Test
    public void test04439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04439");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        long long5 = atomikosProperties0.getMaxTimeout();
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet7 = properties6.keySet();
        atomikosProperties0.set(properties6, "hi!", (java.lang.Object) (-1.0f));
        java.lang.Object obj13 = properties6.setProperty("", "hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties14.setDefaultJtaTimeout((-1L));
        java.util.Properties properties17 = new java.util.Properties();
        java.lang.Object obj19 = properties17.get((java.lang.Object) 0.0d);
        java.lang.Object obj20 = properties17.clone();
        boolean boolean22 = properties6.replace((java.lang.Object) (-1L), obj20, (java.lang.Object) 100.0d);
        java.util.Properties properties23 = new java.util.Properties();
        java.util.Properties properties24 = new java.util.Properties(properties23);
        properties24.clear();
        properties6.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties24);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties24.elements();
        java.lang.String str29 = properties24.getProperty("");
        java.util.Properties properties30 = new java.util.Properties(properties24);
        java.util.Set<java.lang.Object> objSet31 = properties24.keySet();
        java.util.Collection<java.lang.Object> objCollection32 = properties24.values();
        java.lang.String str34 = properties24.getProperty("tm.out");
        properties24.clear();
        java.util.Set<java.lang.Object> objSet36 = properties24.keySet();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertNotNull(objSet7);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{}");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(objSet31);
        org.junit.Assert.assertNotNull(objCollection32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(objSet36);
    }

    @Test
    public void test04440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04440");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties3 = new java.util.Properties();
        java.lang.Object obj5 = properties3.get((java.lang.Object) 0.0d);
        java.lang.Object obj6 = properties3.clone();
        java.lang.String str7 = properties3.toString();
        boolean boolean10 = properties3.remove((java.lang.Object) 0, (java.lang.Object) 'a');
        java.lang.Object obj11 = properties1.replace((java.lang.Object) 10.0d, (java.lang.Object) properties3);
        java.lang.String str12 = properties3.toString();
        java.util.Properties properties13 = new java.util.Properties(properties3);
        java.lang.Object obj16 = properties3.setProperty("", "");
        java.util.Properties properties17 = new java.util.Properties(properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties18.setDefaultJtaTimeout((-1L));
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel21 = null;
        atomikosProperties18.consoleLogLevel = atomikosLoggingLevel21;
        atomikosProperties18.outputDir = "";
        int int25 = atomikosProperties18.maxActives;
        java.lang.String str26 = atomikosProperties18.logBaseDir;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery27 = atomikosProperties18.getRecovery();
        recovery27.setForgetOrphanedLogEntriesDelay(0L);
        long long30 = recovery27.delay;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties31.logBaseDir = "";
        atomikosProperties31.setConsoleFileCount((int) (short) 10);
        java.lang.String str36 = atomikosProperties31.logBaseName;
        java.lang.String str37 = atomikosProperties31.logBaseDir;
        long long38 = atomikosProperties31.defaultJtaTimeout;
        java.util.Properties properties39 = atomikosProperties31.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties40.logBaseDir = "";
        atomikosProperties40.setConsoleFileCount((int) (short) 10);
        long long45 = atomikosProperties40.getMaxTimeout();
        java.util.Properties properties46 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet47 = properties46.keySet();
        atomikosProperties40.set(properties46, "hi!", (java.lang.Object) (-1.0f));
        java.lang.Object obj53 = properties46.setProperty("", "hi!");
        java.util.Set<java.lang.String> strSet54 = properties46.stringPropertyNames();
        properties39.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties46);
        boolean boolean56 = properties3.remove((java.lang.Object) recovery27, (java.lang.Object) properties46);
        recovery27.setForgetOrphanedLogEntriesDelay((long) 50);
        long long59 = recovery27.forgetOrphanedLogEntriesDelay;
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "{}");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "{}" + "'", str7, "{}");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "{}" + "'", str12, "{}");
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 50 + "'", int25 == 50);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(recovery27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 10000L + "'", long30 == 10000L);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "tmlog" + "'", str36, "tmlog");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 10000L + "'", long38 == 10000L);
        org.junit.Assert.assertNotNull(properties39);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 300000L + "'", long45 == 300000L);
        org.junit.Assert.assertNotNull(objSet47);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertNotNull(strSet54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 50L + "'", long59 == 50L);
    }

    @Test
    public void test04441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04441");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int1 = atomikosProperties0.getConsoleFileCount();
        int int2 = atomikosProperties0.maxActives;
        java.lang.String str3 = atomikosProperties0.getService();
        atomikosProperties0.setConsoleFileLimit((int) (short) 0);
        java.util.Properties properties6 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties7.setDefaultJtaTimeout((-1L));
        int int10 = atomikosProperties7.getConsoleFileLimit();
        atomikosProperties7.serialJtaTransactions = false;
        atomikosProperties7.logBaseName = "{com.atomikos.icatch.hi!=-1.0}";
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel15 = atomikosProperties7.consoleLogLevel;
        atomikosProperties7.setEnableLogging(true);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties18.logBaseDir = "";
        atomikosProperties18.setConsoleFileCount((int) (short) 10);
        java.lang.String str23 = atomikosProperties18.logBaseName;
        atomikosProperties18.outputDir = "";
        java.util.Properties properties26 = atomikosProperties18.asProperties();
        long long27 = atomikosProperties18.getDefaultJtaTimeout();
        atomikosProperties18.logBaseDir = "{true=10000}";
        java.util.Properties properties30 = atomikosProperties18.asProperties();
        java.lang.Object obj31 = properties6.putIfAbsent((java.lang.Object) atomikosProperties7, (java.lang.Object) atomikosProperties18);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties32.logBaseDir = "";
        atomikosProperties32.setConsoleFileCount((int) (short) 10);
        atomikosProperties32.setCheckpointInterval(10000L);
        long long39 = atomikosProperties32.maxTimeout;
        int int40 = atomikosProperties32.maxActives;
        atomikosProperties32.setCheckpointInterval((long) 0);
        java.util.Properties properties43 = atomikosProperties32.asProperties();
        java.util.Properties properties44 = atomikosProperties32.asProperties();
        java.util.Properties properties45 = new java.util.Properties();
        java.util.Properties properties46 = new java.util.Properties(properties45);
        java.util.Collection<java.lang.Object> objCollection47 = properties46.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties48 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties48.enableLogging = true;
        long long51 = atomikosProperties48.getCheckpointInterval();
        boolean boolean53 = properties46.remove((java.lang.Object) long51, (java.lang.Object) (byte) 100);
        boolean boolean55 = properties46.equals((java.lang.Object) (short) 1);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet56 = properties46.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties57 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties57.setDefaultJtaTimeout((-1L));
        long long60 = atomikosProperties57.checkpointInterval;
        boolean boolean61 = atomikosProperties57.forceShutdownOnVmExit;
        atomikosProperties57.setThreadedTwoPhaseCommit(true);
        boolean boolean64 = properties46.contains((java.lang.Object) true);
        java.util.Properties properties65 = new java.util.Properties(properties46);
        boolean boolean67 = properties65.containsValue((java.lang.Object) (short) -1);
        java.lang.Object obj68 = properties6.put((java.lang.Object) atomikosProperties32, (java.lang.Object) (short) -1);
        java.util.Set<java.lang.Object> objSet69 = properties6.keySet();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 50 + "'", int2 == 50);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(properties6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel15 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel15.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "tmlog" + "'", str23, "tmlog");
        org.junit.Assert.assertNotNull(properties26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10000L + "'", long27 == 10000L);
        org.junit.Assert.assertNotNull(properties30);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 300000L + "'", long39 == 300000L);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 50 + "'", int40 == 50);
        org.junit.Assert.assertNotNull(properties43);
        org.junit.Assert.assertNotNull(properties44);
        org.junit.Assert.assertNotNull(objCollection47);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 500L + "'", long51 == 500L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(objEntrySet56);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 500L + "'", long60 == 500L);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(obj68);
        org.junit.Assert.assertNotNull(objSet69);
    }

    @Test
    public void test04442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04442");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        atomikosProperties0.setCheckpointInterval(10000L);
        long long7 = atomikosProperties0.maxTimeout;
        int int8 = atomikosProperties0.maxActives;
        atomikosProperties0.setCheckpointInterval((long) 0);
        atomikosProperties0.setTransactionManagerUniqueName("tmlog");
        atomikosProperties0.setCheckpointInterval((long) (short) -1);
        atomikosProperties0.forceShutdownOnVmExit = true;
        java.lang.String str17 = atomikosProperties0.getLogBaseDir();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 50 + "'", int8 == 50);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test04443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04443");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.enableLogging = true;
        long long3 = atomikosProperties0.getCheckpointInterval();
        atomikosProperties0.checkpointInterval = ' ';
        java.lang.String str6 = atomikosProperties0.service;
        boolean boolean7 = atomikosProperties0.serialJtaTransactions;
        boolean boolean8 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.defaultJtaTimeout = 5L;
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 500L + "'", long3 == 500L);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test04444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04444");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties3 = new java.util.Properties();
        java.lang.Object obj5 = properties3.get((java.lang.Object) 0.0d);
        java.lang.Object obj6 = properties3.clone();
        java.lang.String str7 = properties3.toString();
        boolean boolean10 = properties3.remove((java.lang.Object) 0, (java.lang.Object) 'a');
        java.lang.Object obj11 = properties1.replace((java.lang.Object) 10.0d, (java.lang.Object) properties3);
        java.lang.String str12 = properties3.toString();
        java.util.Properties properties13 = new java.util.Properties(properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties14.setDefaultJtaTimeout((-1L));
        int int17 = atomikosProperties14.getConsoleFileLimit();
        atomikosProperties14.checkpointInterval = 0L;
        java.lang.Object obj20 = properties3.remove((java.lang.Object) 0L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties21.logBaseDir = "";
        atomikosProperties21.setConsoleFileCount((int) (short) 10);
        long long26 = atomikosProperties21.getMaxTimeout();
        atomikosProperties21.service = "";
        boolean boolean29 = atomikosProperties21.isSerialJtaTransactions();
        atomikosProperties21.setThreadedTwoPhaseCommit(true);
        java.util.Properties properties32 = atomikosProperties21.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties33.setDefaultJtaTimeout((-1L));
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel36 = null;
        atomikosProperties33.consoleLogLevel = atomikosLoggingLevel36;
        long long38 = atomikosProperties33.checkpointInterval;
        atomikosProperties33.setOutputDir("");
        atomikosProperties33.setCheckpointInterval((long) ' ');
        long long43 = atomikosProperties33.checkpointInterval;
        atomikosProperties33.setForceShutdownOnVmExit(true);
        atomikosProperties33.setSerialJtaTransactions(true);
        java.lang.String str48 = atomikosProperties33.logBaseDir;
        java.lang.Object obj49 = properties3.getOrDefault((java.lang.Object) atomikosProperties21, (java.lang.Object) str48);
        atomikosProperties21.transactionManagerUniqueName = "{}";
        java.lang.String str52 = atomikosProperties21.logBaseDir;
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "{}");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "{}" + "'", str7, "{}");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "{}" + "'", str12, "{}");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 300000L + "'", long26 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(properties32);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 500L + "'", long38 == 500L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 32L + "'", long43 == 32L);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
    }

    @Test
    public void test04445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04445");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.checkpointInterval = 0;
        atomikosProperties0.setDefaultJtaTimeout((long) '#');
        java.lang.String str7 = atomikosProperties0.outputDir;
        long long8 = atomikosProperties0.getDefaultJtaTimeout();
        long long9 = atomikosProperties0.maxTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel10 = atomikosProperties0.getConsoleLogLevel();
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 35L + "'", long8 == 35L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 300000L + "'", long9 == 300000L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel10 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel10.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
    }

    @Test
    public void test04446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04446");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Collection<java.lang.Object> objCollection2 = properties0.values();
        java.util.Properties properties3 = new java.util.Properties(properties0);
        java.lang.Object obj6 = properties0.setProperty("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=-1, 0=INFO}", "{{}={}}");
        java.util.Properties properties7 = new java.util.Properties(properties0);
        java.io.OutputStream outputStream8 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.store(outputStream8, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection2);
        org.junit.Assert.assertNull(obj6);
    }

    @Test
    public void test04447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04447");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Collection<java.lang.Object> objCollection2 = properties0.values();
        java.util.Properties properties3 = new java.util.Properties();
        java.util.Properties properties4 = new java.util.Properties(properties3);
        java.util.Collection<java.lang.Object> objCollection5 = properties4.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties6.enableLogging = true;
        long long9 = atomikosProperties6.getCheckpointInterval();
        boolean boolean11 = properties4.remove((java.lang.Object) long9, (java.lang.Object) (byte) 100);
        boolean boolean13 = properties4.equals((java.lang.Object) (short) 1);
        java.lang.Object obj16 = properties4.setProperty("{}", "tmlog");
        java.util.Enumeration<java.lang.Object> objEnumeration17 = properties4.keys();
        java.util.Properties properties18 = new java.util.Properties();
        java.util.Properties properties19 = new java.util.Properties(properties18);
        boolean boolean20 = properties18.isEmpty();
        boolean boolean21 = properties0.remove((java.lang.Object) objEnumeration17, (java.lang.Object) properties18);
        properties18.clear();
        org.junit.Assert.assertNotNull(objCollection2);
        org.junit.Assert.assertNotNull(objCollection5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 500L + "'", long9 == 500L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(objEnumeration17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test04448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04448");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.enableLogging = true;
        long long3 = atomikosProperties0.getCheckpointInterval();
        java.lang.String str4 = atomikosProperties0.getService();
        java.lang.String str5 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setEnableLogging(false);
        atomikosProperties0.consoleFileCount = 0;
        boolean boolean10 = atomikosProperties0.serialJtaTransactions;
        atomikosProperties0.forceShutdownOnVmExit = true;
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 500L + "'", long3 == 500L);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test04449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04449");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.serialJtaTransactions = false;
        atomikosProperties0.outputDir = "{}";
        atomikosProperties0.maxActives = (byte) -1;
        atomikosProperties0.service = "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.console_file_count=10, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir={true=10000}, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.output_dir=, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}";
    }

    @Test
    public void test04450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04450");
        java.util.Properties properties0 = new java.util.Properties();
        int int1 = properties0.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery2 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long3 = recovery2.getRetryInterval();
        long long4 = recovery2.getDelay();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties5.setDefaultJtaTimeout((-1L));
        int int8 = atomikosProperties5.getConsoleFileLimit();
        java.util.Properties properties9 = atomikosProperties5.asProperties();
        boolean boolean10 = atomikosProperties5.forceShutdownOnVmExit;
        long long11 = atomikosProperties5.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long13 = atomikosProperties12.defaultJtaTimeout;
        atomikosProperties12.logBaseName = "tm.out";
        boolean boolean16 = properties0.replace((java.lang.Object) recovery2, (java.lang.Object) long11, (java.lang.Object) atomikosProperties12);
        int int17 = properties0.size();
        java.lang.String str19 = properties0.getProperty("");
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet20 = properties0.entrySet();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 10000L + "'", long3 == 10000L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10000L + "'", long13 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(objEntrySet20);
    }

    @Test
    public void test04451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04451");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        long long5 = atomikosProperties0.getMaxTimeout();
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet7 = properties6.keySet();
        atomikosProperties0.set(properties6, "hi!", (java.lang.Object) (-1.0f));
        java.lang.String str11 = atomikosProperties0.logBaseDir;
        java.lang.String str12 = atomikosProperties0.logBaseDir;
        java.lang.String str13 = atomikosProperties0.logBaseDir;
        boolean boolean14 = atomikosProperties0.isEnableLogging();
        long long15 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.setOutputDir("hi!");
        java.lang.String str18 = atomikosProperties0.outputDir;
        atomikosProperties0.allowSubTransactions = true;
        long long21 = atomikosProperties0.getCheckpointInterval();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties22.logBaseDir = "";
        atomikosProperties22.setConsoleFileCount((int) (short) 10);
        atomikosProperties22.setLogBaseDir("{}");
        java.util.Properties properties29 = atomikosProperties22.asProperties();
        atomikosProperties22.service = "";
        boolean boolean32 = atomikosProperties22.isEnableLogging();
        atomikosProperties22.maxActives = (byte) 1;
        java.util.Properties properties35 = atomikosProperties22.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties37.logBaseDir = "";
        boolean boolean40 = atomikosProperties37.isForceShutdownOnVmExit();
        int int41 = atomikosProperties37.consoleFileLimit;
        atomikosProperties37.consoleFileCount = 100;
        boolean boolean44 = atomikosProperties37.threadedTwoPhaseCommit;
        atomikosProperties37.enableLogging = true;
        atomikosProperties0.set(properties35, "", (java.lang.Object) true);
        java.util.Properties properties48 = new java.util.Properties(properties35);
        java.io.InputStream inputStream49 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties48.load(inputStream49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertNotNull(objSet7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 500L + "'", long15 == 500L);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 500L + "'", long21 == 500L);
        org.junit.Assert.assertNotNull(properties29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(properties35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test04452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04452");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.maxRetries = (-1);
        recovery0.setDelay((long) (short) 0);
        long long5 = recovery0.forgetOrphanedLogEntriesDelay;
        recovery0.retryInterval = 500L;
        long long8 = recovery0.delay;
        recovery0.setRetryInterval(10000L);
        recovery0.setForgetOrphanedLogEntriesDelay(0L);
        long long13 = recovery0.retryInterval;
        long long14 = recovery0.forgetOrphanedLogEntriesDelay;
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 86400000L + "'", long5 == 86400000L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10000L + "'", long13 == 10000L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
    }

    @Test
    public void test04453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04453");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Collection<java.lang.Object> objCollection2 = properties1.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties3 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties3.enableLogging = true;
        long long6 = atomikosProperties3.getCheckpointInterval();
        boolean boolean8 = properties1.remove((java.lang.Object) long6, (java.lang.Object) (byte) 100);
        boolean boolean10 = properties1.equals((java.lang.Object) (short) 1);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet11 = properties1.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setDefaultJtaTimeout((-1L));
        long long15 = atomikosProperties12.checkpointInterval;
        boolean boolean16 = atomikosProperties12.forceShutdownOnVmExit;
        atomikosProperties12.setThreadedTwoPhaseCommit(true);
        boolean boolean19 = properties1.contains((java.lang.Object) true);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties20.logBaseDir = "";
        atomikosProperties20.setConsoleFileCount((int) (short) 10);
        long long25 = atomikosProperties20.getMaxTimeout();
        java.util.Properties properties26 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet27 = properties26.keySet();
        atomikosProperties20.set(properties26, "hi!", (java.lang.Object) (-1.0f));
        java.lang.String str31 = atomikosProperties20.logBaseDir;
        java.lang.String str32 = atomikosProperties20.logBaseDir;
        java.lang.String str33 = atomikosProperties20.logBaseDir;
        boolean boolean34 = atomikosProperties20.isEnableLogging();
        boolean boolean35 = atomikosProperties20.forceShutdownOnVmExit;
        boolean boolean36 = properties1.containsValue((java.lang.Object) atomikosProperties20);
        boolean boolean37 = properties1.isEmpty();
        java.util.Properties properties38 = new java.util.Properties();
        java.lang.Object obj40 = properties38.get((java.lang.Object) 0.0d);
        java.lang.Object obj41 = properties38.clone();
        java.lang.String str42 = properties38.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties43 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties43.logBaseDir = "";
        atomikosProperties43.setConsoleFileCount((int) (short) 10);
        atomikosProperties43.setLogBaseDir("{}");
        boolean boolean50 = atomikosProperties43.isSerialJtaTransactions();
        java.lang.Object obj52 = properties38.putIfAbsent((java.lang.Object) boolean50, (java.lang.Object) 10000L);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet53 = properties38.entrySet();
        java.lang.String str54 = properties38.toString();
        boolean boolean55 = properties1.containsValue((java.lang.Object) str54);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties56 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties56.logBaseDir = "";
        atomikosProperties56.setConsoleFileCount((int) (short) 10);
        atomikosProperties56.setLogBaseDir("{}");
        java.util.Properties properties63 = atomikosProperties56.asProperties();
        java.util.Set<java.lang.String> strSet64 = properties63.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties65 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int66 = atomikosProperties65.getConsoleFileCount();
        int int67 = atomikosProperties65.maxActives;
        atomikosProperties65.setConsoleFileName("");
        atomikosProperties65.transactionManagerUniqueName = "{}";
        java.util.Properties properties72 = atomikosProperties65.asProperties();
        boolean boolean73 = atomikosProperties65.threadedTwoPhaseCommit;
        atomikosProperties65.enableLogging = true;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties76 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int77 = atomikosProperties76.getConsoleFileCount();
        int int78 = atomikosProperties76.maxActives;
        atomikosProperties76.setConsoleFileName("");
        atomikosProperties76.transactionManagerUniqueName = "{}";
        atomikosProperties76.setMaxActives(0);
        boolean boolean85 = atomikosProperties76.forceShutdownOnVmExit;
        java.lang.Object obj86 = properties63.put((java.lang.Object) atomikosProperties65, (java.lang.Object) atomikosProperties76);
        atomikosProperties65.setConsoleFileCount((int) '4');
        boolean boolean89 = properties1.equals((java.lang.Object) '4');
        java.util.Enumeration<java.lang.Object> objEnumeration90 = properties1.elements();
        properties1.clear();
        java.lang.Object obj94 = properties1.setProperty("{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, tmlog=tmlog, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.output_dir=, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=10, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=-1}", "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, tmlog=tmlog, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.output_dir=, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=10, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=-1}");
        java.util.Enumeration<java.lang.Object> objEnumeration95 = properties1.keys();
        org.junit.Assert.assertNotNull(objCollection2);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(objEntrySet11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 500L + "'", long15 == 500L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 300000L + "'", long25 == 300000L);
        org.junit.Assert.assertNotNull(objSet27);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals(obj41.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "{}");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "{}" + "'", str42, "{}");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertNotNull(objEntrySet53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "{true=10000}" + "'", str54, "{true=10000}");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(properties63);
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 50 + "'", int67 == 50);
        org.junit.Assert.assertNotNull(properties72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 50 + "'", int78 == 50);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNull(obj86);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(objEnumeration90);
        org.junit.Assert.assertNull(obj94);
        org.junit.Assert.assertNotNull(objEnumeration95);
    }

    @Test
    public void test04454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04454");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.enableLogging = true;
        int int3 = atomikosProperties0.consoleFileLimit;
        atomikosProperties0.logBaseName = "hi!";
        atomikosProperties0.setEnableLogging(false);
        atomikosProperties0.setTransactionManagerUniqueName("");
        atomikosProperties0.checkpointInterval = 1;
        int int12 = atomikosProperties0.getMaxActives();
        atomikosProperties0.setConsoleFileLimit((int) (byte) -1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 50 + "'", int12 == 50);
    }

    @Test
    public void test04455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04455");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        atomikosProperties0.setService("");
        atomikosProperties0.service = "tmlog";
        atomikosProperties0.setService("tmlog");
        atomikosProperties0.setService("{}");
        atomikosProperties0.enableLogging = true;
        java.lang.String str15 = atomikosProperties0.getConsoleFileName();
        java.util.Properties properties16 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties17.logBaseDir = "";
        atomikosProperties17.setConsoleFileCount((int) (short) 10);
        java.lang.String str22 = atomikosProperties17.logBaseName;
        atomikosProperties17.outputDir = "";
        java.util.Properties properties25 = atomikosProperties17.asProperties();
        long long26 = atomikosProperties17.getDefaultJtaTimeout();
        atomikosProperties17.logBaseDir = "{true=10000}";
        atomikosProperties17.defaultJtaTimeout = 0L;
        java.lang.String str31 = atomikosProperties17.getConsoleFileName();
        atomikosProperties17.setTransactionManagerUniqueName("{true=10000}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties34 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties34.logBaseDir = "";
        atomikosProperties34.setConsoleFileCount((int) (short) 10);
        long long39 = atomikosProperties34.getMaxTimeout();
        java.util.Properties properties40 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet41 = properties40.keySet();
        atomikosProperties34.set(properties40, "hi!", (java.lang.Object) (-1.0f));
        java.lang.String str45 = atomikosProperties34.service;
        java.lang.String str46 = atomikosProperties34.getService();
        atomikosProperties34.setConsoleFileCount((int) (byte) 1);
        atomikosProperties34.forceShutdownOnVmExit = false;
        boolean boolean51 = atomikosProperties34.isEnableLogging();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel52 = atomikosProperties34.consoleLogLevel;
        atomikosProperties17.consoleLogLevel = atomikosLoggingLevel52;
        boolean boolean54 = properties16.containsValue((java.lang.Object) atomikosLoggingLevel52);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "tm.out" + "'", str15, "tm.out");
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "tmlog" + "'", str22, "tmlog");
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 10000L + "'", long26 == 10000L);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "tm.out" + "'", str31, "tm.out");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 300000L + "'", long39 == 300000L);
        org.junit.Assert.assertNotNull(objSet41);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel52 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel52.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test04456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04456");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        java.lang.String str5 = atomikosProperties0.logBaseName;
        java.lang.String str6 = atomikosProperties0.logBaseDir;
        long long7 = atomikosProperties0.defaultJtaTimeout;
        atomikosProperties0.setDefaultJtaTimeout((long) (byte) 10);
        java.lang.String str10 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.setMaxActives(18);
        java.lang.String str13 = atomikosProperties0.consoleFileName;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties14.enableLogging = true;
        int int17 = atomikosProperties14.consoleFileLimit;
        atomikosProperties14.logBaseName = "hi!";
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery20 = atomikosProperties14.getRecovery();
        atomikosProperties14.checkpointInterval = (byte) 100;
        java.lang.String str23 = atomikosProperties14.getTransactionManagerUniqueName();
        long long24 = atomikosProperties14.maxTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel25 = atomikosProperties14.getConsoleLogLevel();
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel25);
        boolean boolean27 = atomikosProperties0.isEnableLogging();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tmlog" + "'", str5, "tmlog");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "tm.out" + "'", str10, "tm.out");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tm.out" + "'", str13, "tm.out");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(recovery20);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 300000L + "'", long24 == 300000L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel25 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel25.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test04457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04457");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        long long5 = atomikosProperties0.getMaxTimeout();
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet7 = properties6.keySet();
        atomikosProperties0.set(properties6, "hi!", (java.lang.Object) (-1.0f));
        java.lang.String str11 = atomikosProperties0.logBaseDir;
        java.lang.String str12 = atomikosProperties0.logBaseDir;
        java.lang.String str13 = atomikosProperties0.logBaseDir;
        boolean boolean14 = atomikosProperties0.isEnableLogging();
        boolean boolean15 = atomikosProperties0.threadedTwoPhaseCommit;
        atomikosProperties0.setLogBaseDir("{}");
        atomikosProperties0.consoleFileCount = (byte) -1;
        atomikosProperties0.setAllowSubTransactions(true);
        atomikosProperties0.allowSubTransactions = true;
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertNotNull(objSet7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test04458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04458");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Collection<java.lang.Object> objCollection2 = properties0.values();
        int int3 = properties0.size();
        java.util.Enumeration<java.lang.Object> objEnumeration4 = properties0.elements();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel6 = org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN;
        java.util.Properties properties7 = new java.util.Properties();
        java.util.Properties properties8 = new java.util.Properties(properties7);
        java.util.Collection<java.lang.Object> objCollection9 = properties8.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.enableLogging = true;
        long long13 = atomikosProperties10.getCheckpointInterval();
        boolean boolean15 = properties8.remove((java.lang.Object) long13, (java.lang.Object) (byte) 100);
        java.lang.String str16 = properties8.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties17.logBaseDir = "";
        atomikosProperties17.setConsoleFileCount((int) (short) 10);
        long long22 = atomikosProperties17.getMaxTimeout();
        java.util.Properties properties23 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet24 = properties23.keySet();
        atomikosProperties17.set(properties23, "hi!", (java.lang.Object) (-1.0f));
        java.util.Properties properties28 = new java.util.Properties();
        java.lang.Object obj30 = properties28.get((java.lang.Object) 0.0d);
        java.lang.Object obj31 = properties28.clone();
        java.lang.String str32 = properties28.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties33.logBaseDir = "";
        atomikosProperties33.setConsoleFileCount((int) (short) 10);
        long long38 = atomikosProperties33.getMaxTimeout();
        java.util.Properties properties39 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet40 = properties39.keySet();
        atomikosProperties33.set(properties39, "hi!", (java.lang.Object) (-1.0f));
        java.lang.Object obj46 = properties39.setProperty("", "hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties47 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties47.setDefaultJtaTimeout((-1L));
        java.util.Properties properties50 = new java.util.Properties();
        java.lang.Object obj52 = properties50.get((java.lang.Object) 0.0d);
        java.lang.Object obj53 = properties50.clone();
        boolean boolean55 = properties39.replace((java.lang.Object) (-1L), obj53, (java.lang.Object) 100.0d);
        java.util.Properties properties56 = new java.util.Properties();
        java.util.Properties properties57 = new java.util.Properties(properties56);
        properties57.clear();
        properties39.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties57);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties60 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties60.logBaseDir = "";
        atomikosProperties60.setConsoleFileCount((int) (short) 10);
        long long65 = atomikosProperties60.getMaxTimeout();
        java.util.Properties properties66 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet67 = properties66.keySet();
        atomikosProperties60.set(properties66, "hi!", (java.lang.Object) (-1.0f));
        java.lang.String str71 = atomikosProperties60.logBaseDir;
        java.lang.String str72 = atomikosProperties60.logBaseDir;
        java.util.Properties properties73 = atomikosProperties60.asProperties();
        java.lang.Object obj74 = properties28.replace((java.lang.Object) properties57, (java.lang.Object) atomikosProperties60);
        boolean boolean75 = properties23.contains((java.lang.Object) atomikosProperties60);
        boolean boolean76 = properties8.containsValue((java.lang.Object) properties23);
        boolean boolean77 = properties0.replace((java.lang.Object) 500L, (java.lang.Object) atomikosLoggingLevel6, (java.lang.Object) boolean76);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet78 = properties0.entrySet();
        java.lang.Object obj81 = properties0.setProperty("hi!", "tmlog");
        java.util.Enumeration<java.lang.Object> objEnumeration82 = properties0.keys();
        org.junit.Assert.assertNotNull(objCollection2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(objEnumeration4);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel6 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel6.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNotNull(objCollection9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 500L + "'", long13 == 500L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{}" + "'", str16, "{}");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 300000L + "'", long22 == 300000L);
        org.junit.Assert.assertNotNull(objSet24);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertEquals(obj31.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "{}");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "{}" + "'", str32, "{}");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 300000L + "'", long38 == 300000L);
        org.junit.Assert.assertNotNull(objSet40);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertEquals(obj53.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj53), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj53), "{}");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 300000L + "'", long65 == 300000L);
        org.junit.Assert.assertNotNull(objSet67);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(properties73);
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(objEntrySet78);
        org.junit.Assert.assertNull(obj81);
        org.junit.Assert.assertNotNull(objEnumeration82);
    }

    @Test
    public void test04459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04459");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.get((java.lang.Object) 0.0d);
        java.lang.Object obj3 = properties0.clone();
        java.lang.String str4 = properties0.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties5.logBaseDir = "";
        atomikosProperties5.setConsoleFileCount((int) (short) 10);
        long long10 = atomikosProperties5.getMaxTimeout();
        java.util.Properties properties11 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet12 = properties11.keySet();
        atomikosProperties5.set(properties11, "hi!", (java.lang.Object) (-1.0f));
        java.lang.Object obj18 = properties11.setProperty("", "hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setDefaultJtaTimeout((-1L));
        java.util.Properties properties22 = new java.util.Properties();
        java.lang.Object obj24 = properties22.get((java.lang.Object) 0.0d);
        java.lang.Object obj25 = properties22.clone();
        boolean boolean27 = properties11.replace((java.lang.Object) (-1L), obj25, (java.lang.Object) 100.0d);
        java.util.Properties properties28 = new java.util.Properties();
        java.util.Properties properties29 = new java.util.Properties(properties28);
        properties29.clear();
        properties11.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties29);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties32.logBaseDir = "";
        atomikosProperties32.setConsoleFileCount((int) (short) 10);
        long long37 = atomikosProperties32.getMaxTimeout();
        java.util.Properties properties38 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet39 = properties38.keySet();
        atomikosProperties32.set(properties38, "hi!", (java.lang.Object) (-1.0f));
        java.lang.String str43 = atomikosProperties32.logBaseDir;
        java.lang.String str44 = atomikosProperties32.logBaseDir;
        java.util.Properties properties45 = atomikosProperties32.asProperties();
        java.lang.Object obj46 = properties0.replace((java.lang.Object) properties29, (java.lang.Object) atomikosProperties32);
        java.util.Properties properties47 = new java.util.Properties(properties0);
        java.lang.String str48 = properties0.toString();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{}" + "'", str4, "{}");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 300000L + "'", long10 == 300000L);
        org.junit.Assert.assertNotNull(objSet12);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "{}");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 300000L + "'", long37 == 300000L);
        org.junit.Assert.assertNotNull(objSet39);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(properties45);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "{}" + "'", str48, "{}");
    }

    @Test
    public void test04460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04460");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        atomikosProperties0.setCheckpointInterval(10000L);
        java.lang.String str7 = atomikosProperties0.logBaseName;
        atomikosProperties0.maxTimeout = (-1);
        int int10 = atomikosProperties0.getConsoleFileCount();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "tmlog" + "'", str7, "tmlog");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
    }

    @Test
    public void test04461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04461");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setDefaultJtaTimeout((-1L));
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel3 = null;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel3;
        atomikosProperties0.outputDir = "";
        int int7 = atomikosProperties0.maxActives;
        boolean boolean8 = atomikosProperties0.isThreadedTwoPhaseCommit();
        long long9 = atomikosProperties0.defaultJtaTimeout;
        java.lang.String str10 = atomikosProperties0.getService();
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel11 = atomikosProperties0.consoleLogLevel;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.logBaseDir = "";
        atomikosProperties12.setConsoleFileCount((int) (short) 10);
        long long17 = atomikosProperties12.getMaxTimeout();
        java.util.Properties properties18 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet19 = properties18.keySet();
        atomikosProperties12.set(properties18, "hi!", (java.lang.Object) (-1.0f));
        java.util.Enumeration<java.lang.Object> objEnumeration23 = properties18.keys();
        int int24 = properties18.size();
        java.lang.Object obj27 = properties18.setProperty("{true=10000}", "tmlog");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties29.setDefaultJtaTimeout((-1L));
        long long32 = atomikosProperties29.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int34 = atomikosProperties33.getConsoleFileCount();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties35.logBaseDir = "";
        atomikosProperties35.setConsoleFileCount((int) (short) 10);
        atomikosProperties35.setCheckpointInterval(10000L);
        long long42 = atomikosProperties35.maxTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel43 = org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO;
        atomikosProperties35.consoleLogLevel = atomikosLoggingLevel43;
        atomikosProperties33.consoleLogLevel = atomikosLoggingLevel43;
        atomikosProperties29.consoleLogLevel = atomikosLoggingLevel43;
        java.util.Properties properties47 = new java.util.Properties();
        java.util.Properties properties48 = new java.util.Properties(properties47);
        java.util.Properties properties50 = new java.util.Properties();
        java.lang.Object obj52 = properties50.get((java.lang.Object) 0.0d);
        java.lang.Object obj53 = properties50.clone();
        java.lang.String str54 = properties50.toString();
        boolean boolean57 = properties50.remove((java.lang.Object) 0, (java.lang.Object) 'a');
        java.lang.Object obj58 = properties48.replace((java.lang.Object) 10.0d, (java.lang.Object) properties50);
        java.util.Properties properties59 = new java.util.Properties(properties48);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties61 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties61.setDefaultJtaTimeout((-1L));
        int int64 = atomikosProperties61.getConsoleFileLimit();
        java.util.Properties properties65 = atomikosProperties61.asProperties();
        java.util.Properties properties66 = new java.util.Properties(properties65);
        atomikosProperties29.set(properties59, "hi!", (java.lang.Object) properties65);
        atomikosProperties29.setConsoleFileCount((int) '4');
        int int70 = atomikosProperties29.getMaxActives();
        atomikosProperties0.set(properties18, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=1, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=-1, 0=INFO}", (java.lang.Object) int70);
        boolean boolean72 = atomikosProperties0.threadedTwoPhaseCommit;
        atomikosProperties0.setThreadedTwoPhaseCommit(false);
        atomikosProperties0.setConsoleFileCount((int) (short) -1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(atomikosLoggingLevel11);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 300000L + "'", long17 == 300000L);
        org.junit.Assert.assertNotNull(objSet19);
        org.junit.Assert.assertNotNull(objEnumeration23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 500L + "'", long32 == 500L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 300000L + "'", long42 == 300000L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel43 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO + "'", atomikosLoggingLevel43.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO));
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertEquals(obj53.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj53), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj53), "{}");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "{}" + "'", str54, "{}");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(properties65);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 50 + "'", int70 == 50);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test04462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04462");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int1 = atomikosProperties0.getConsoleFileCount();
        int int2 = atomikosProperties0.maxActives;
        atomikosProperties0.setConsoleFileName("");
        java.lang.String str5 = atomikosProperties0.getOutputDir();
        atomikosProperties0.service = "tmlog";
        java.util.Properties properties8 = new java.util.Properties();
        java.util.Properties properties9 = new java.util.Properties(properties8);
        java.util.Collection<java.lang.Object> objCollection10 = properties9.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties11.enableLogging = true;
        long long14 = atomikosProperties11.getCheckpointInterval();
        boolean boolean16 = properties9.remove((java.lang.Object) long14, (java.lang.Object) (byte) 100);
        boolean boolean18 = properties9.equals((java.lang.Object) (short) 1);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet19 = properties9.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties20.setDefaultJtaTimeout((-1L));
        long long23 = atomikosProperties20.checkpointInterval;
        boolean boolean24 = atomikosProperties20.forceShutdownOnVmExit;
        atomikosProperties20.setThreadedTwoPhaseCommit(true);
        boolean boolean27 = properties9.contains((java.lang.Object) true);
        java.util.Properties properties28 = new java.util.Properties(properties9);
        boolean boolean30 = properties28.containsValue((java.lang.Object) (short) -1);
        java.util.Properties properties32 = new java.util.Properties();
        java.util.Properties properties33 = new java.util.Properties(properties32);
        java.util.Properties properties35 = new java.util.Properties();
        java.lang.Object obj37 = properties35.get((java.lang.Object) 0.0d);
        java.lang.Object obj38 = properties35.clone();
        java.lang.String str39 = properties35.toString();
        boolean boolean42 = properties35.remove((java.lang.Object) 0, (java.lang.Object) 'a');
        java.lang.Object obj43 = properties33.replace((java.lang.Object) 10.0d, (java.lang.Object) properties35);
        java.lang.String str44 = properties35.toString();
        java.util.Properties properties45 = new java.util.Properties(properties35);
        java.util.Properties properties46 = new java.util.Properties();
        java.util.Properties properties47 = new java.util.Properties(properties46);
        java.util.Properties properties49 = new java.util.Properties();
        java.lang.Object obj51 = properties49.get((java.lang.Object) 0.0d);
        java.lang.Object obj52 = properties49.clone();
        java.lang.String str53 = properties49.toString();
        boolean boolean56 = properties49.remove((java.lang.Object) 0, (java.lang.Object) 'a');
        java.lang.Object obj57 = properties47.replace((java.lang.Object) 10.0d, (java.lang.Object) properties49);
        java.util.Properties properties58 = new java.util.Properties(properties47);
        properties45.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties58);
        atomikosProperties0.set(properties28, "{com.atomikos.icatch.hi!=-1.0}", (java.lang.Object) properties45);
        java.lang.Object obj61 = properties28.clone();
        boolean boolean63 = properties28.containsValue((java.lang.Object) 5);
        java.io.InputStream inputStream64 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties28.loadFromXML(inputStream64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 50 + "'", int2 == 50);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(objCollection10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 500L + "'", long14 == 500L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(objEntrySet19);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 500L + "'", long23 == 500L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertEquals(obj38.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "{}");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "{}" + "'", str39, "{}");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "{}" + "'", str44, "{}");
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertEquals(obj52.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj52), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj52), "{}");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "{}" + "'", str53, "{}");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertNotNull(obj61);
        org.junit.Assert.assertEquals(obj61.toString(), "{com.atomikos.icatch.{com.atomikos.icatch.hi!=-1.0}={}}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj61), "{com.atomikos.icatch.{com.atomikos.icatch.hi!=-1.0}={}}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj61), "{com.atomikos.icatch.{com.atomikos.icatch.hi!=-1.0}={}}");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test04463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04463");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        long long5 = atomikosProperties0.getMaxTimeout();
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet7 = properties6.keySet();
        atomikosProperties0.set(properties6, "hi!", (java.lang.Object) (-1.0f));
        java.lang.String str11 = atomikosProperties0.logBaseDir;
        boolean boolean12 = atomikosProperties0.enableLogging;
        atomikosProperties0.setLogBaseDir("");
        atomikosProperties0.setAllowSubTransactions(true);
        int int17 = atomikosProperties0.maxActives;
        java.util.Properties properties18 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties20.logBaseDir = "";
        atomikosProperties20.setConsoleFileCount((int) (short) 10);
        java.lang.String str25 = atomikosProperties20.logBaseName;
        atomikosProperties20.outputDir = "";
        java.util.Properties properties28 = atomikosProperties20.asProperties();
        atomikosProperties20.setConsoleFileLimit(1);
        java.lang.Object obj31 = properties18.put((java.lang.Object) 0L, (java.lang.Object) atomikosProperties20);
        atomikosProperties20.setConsoleFileLimit(19);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertNotNull(objSet7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 50 + "'", int17 == 50);
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "tmlog" + "'", str25, "tmlog");
        org.junit.Assert.assertNotNull(properties28);
        org.junit.Assert.assertNull(obj31);
    }

    @Test
    public void test04464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04464");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.get((java.lang.Object) 0.0d);
        java.lang.Object obj3 = properties0.clone();
        java.lang.Object obj6 = properties0.setProperty("{}", "{}");
        java.lang.String str7 = properties0.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties8.logBaseDir = "";
        atomikosProperties8.setConsoleFileCount((int) (short) 10);
        java.lang.String str13 = atomikosProperties8.logBaseName;
        atomikosProperties8.outputDir = "";
        java.util.Properties properties16 = atomikosProperties8.asProperties();
        java.util.Set<java.lang.String> strSet17 = properties16.stringPropertyNames();
        boolean boolean19 = properties16.contains((java.lang.Object) false);
        properties16.clear();
        java.util.Enumeration<java.lang.Object> objEnumeration21 = properties16.keys();
        boolean boolean22 = properties0.containsKey((java.lang.Object) objEnumeration21);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties23.logBaseDir = "";
        atomikosProperties23.setConsoleFileCount((int) (short) 10);
        java.lang.String str28 = atomikosProperties23.logBaseName;
        atomikosProperties23.outputDir = "";
        java.util.Properties properties31 = atomikosProperties23.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties32.logBaseDir = "";
        atomikosProperties32.setConsoleFileCount((int) (short) 10);
        long long37 = atomikosProperties32.getMaxTimeout();
        java.util.Properties properties38 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet39 = properties38.keySet();
        atomikosProperties32.set(properties38, "hi!", (java.lang.Object) (-1.0f));
        java.lang.Object obj45 = properties38.setProperty("", "hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties47 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties47.logBaseDir = "";
        atomikosProperties47.setConsoleFileCount((int) (short) 10);
        atomikosProperties47.setLogBaseDir("{}");
        java.lang.String str54 = atomikosProperties47.getOutputDir();
        atomikosProperties23.set(properties38, "{}", (java.lang.Object) atomikosProperties47);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties56 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties56.logBaseDir = "";
        atomikosProperties56.setConsoleFileCount((int) (short) 10);
        long long61 = atomikosProperties56.getDefaultJtaTimeout();
        atomikosProperties56.logBaseName = "tmlog";
        boolean boolean64 = properties38.contains((java.lang.Object) atomikosProperties56);
        boolean boolean65 = atomikosProperties56.allowSubTransactions;
        boolean boolean66 = properties0.contains((java.lang.Object) atomikosProperties56);
        atomikosProperties56.setMaxActives((int) (byte) 10);
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "{{}={}}" + "'", str7, "{{}={}}");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objEnumeration21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "tmlog" + "'", str28, "tmlog");
        org.junit.Assert.assertNotNull(properties31);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 300000L + "'", long37 == 300000L);
        org.junit.Assert.assertNotNull(objSet39);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 10000L + "'", long61 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test04465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04465");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        java.lang.String str5 = atomikosProperties0.logBaseName;
        java.lang.String str6 = atomikosProperties0.logBaseDir;
        long long7 = atomikosProperties0.defaultJtaTimeout;
        java.util.Properties properties8 = atomikosProperties0.asProperties();
        java.util.Properties properties9 = atomikosProperties0.asProperties();
        java.util.Properties properties10 = atomikosProperties0.asProperties();
        java.lang.String str11 = atomikosProperties0.getLogBaseDir();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tmlog" + "'", str5, "tmlog");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test04466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04466");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setDefaultJtaTimeout((-1L));
        int int3 = atomikosProperties0.getConsoleFileLimit();
        java.util.Properties properties4 = atomikosProperties0.asProperties();
        atomikosProperties0.setAllowSubTransactions(false);
        java.util.Properties properties7 = atomikosProperties0.asProperties();
        java.lang.String str8 = atomikosProperties0.logBaseDir;
        atomikosProperties0.maxActives = (byte) 10;
        atomikosProperties0.threadedTwoPhaseCommit = true;
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(properties4);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test04467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04467");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        atomikosProperties0.setLogBaseDir("{}");
        java.lang.String str7 = atomikosProperties0.getOutputDir();
        atomikosProperties0.setLogBaseName("hi!");
        boolean boolean10 = atomikosProperties0.isAllowSubTransactions();
        boolean boolean11 = atomikosProperties0.isThreadedTwoPhaseCommit();
        boolean boolean12 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.setMaxTimeout((long) 97);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test04468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04468");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Collection<java.lang.Object> objCollection2 = properties1.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties3 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties3.enableLogging = true;
        long long6 = atomikosProperties3.getCheckpointInterval();
        boolean boolean8 = properties1.remove((java.lang.Object) long6, (java.lang.Object) (byte) 100);
        java.lang.String str9 = properties1.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.logBaseDir = "";
        atomikosProperties10.setConsoleFileCount((int) (short) 10);
        long long15 = atomikosProperties10.getMaxTimeout();
        java.util.Properties properties16 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet17 = properties16.keySet();
        atomikosProperties10.set(properties16, "hi!", (java.lang.Object) (-1.0f));
        java.lang.Object obj23 = properties16.setProperty("", "hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties24.setDefaultJtaTimeout((-1L));
        java.util.Properties properties27 = new java.util.Properties();
        java.lang.Object obj29 = properties27.get((java.lang.Object) 0.0d);
        java.lang.Object obj30 = properties27.clone();
        boolean boolean32 = properties16.replace((java.lang.Object) (-1L), obj30, (java.lang.Object) 100.0d);
        java.util.Properties properties33 = new java.util.Properties();
        java.util.Properties properties34 = new java.util.Properties(properties33);
        properties34.clear();
        properties16.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties34);
        java.util.Enumeration<java.lang.Object> objEnumeration37 = properties34.elements();
        java.lang.String str39 = properties34.getProperty("");
        java.util.Properties properties40 = new java.util.Properties(properties34);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery41 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        long long42 = recovery41.getRetryInterval();
        recovery41.delay = 10L;
        boolean boolean45 = properties1.remove((java.lang.Object) properties40, (java.lang.Object) 10L);
        java.util.Enumeration<java.lang.Object> objEnumeration46 = properties40.keys();
        java.lang.Object obj47 = properties40.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties48 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long49 = atomikosProperties48.defaultJtaTimeout;
        atomikosProperties48.logBaseName = "tm.out";
        boolean boolean52 = properties40.containsKey((java.lang.Object) atomikosProperties48);
        java.util.Properties properties53 = atomikosProperties48.asProperties();
        java.io.InputStream inputStream54 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties53.loadFromXML(inputStream54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection2);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{}" + "'", str9, "{}");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 300000L + "'", long15 == 300000L);
        org.junit.Assert.assertNotNull(objSet17);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "{}");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objEnumeration37);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 10000L + "'", long42 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(objEnumeration46);
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertEquals(obj47.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj47), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj47), "{}");
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 10000L + "'", long49 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(properties53);
    }

    @Test
    public void test04469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04469");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        atomikosProperties0.setService("");
        atomikosProperties0.service = "tmlog";
        java.util.Properties properties9 = atomikosProperties0.asProperties();
        java.util.Properties properties10 = new java.util.Properties(properties9);
        java.lang.String str13 = properties9.getProperty("{hi!={}}", "tm.out");
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tm.out" + "'", str13, "tm.out");
    }

    @Test
    public void test04470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04470");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Collection<java.lang.Object> objCollection2 = properties1.values();
        boolean boolean3 = properties1.isEmpty();
        java.util.Set<java.lang.String> strSet4 = properties1.stringPropertyNames();
        java.util.Properties properties5 = new java.util.Properties();
        java.lang.Object obj7 = properties5.get((java.lang.Object) 0.0d);
        java.lang.Object obj8 = properties5.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties9.enableLogging = true;
        long long12 = atomikosProperties9.getCheckpointInterval();
        java.lang.String str13 = atomikosProperties9.getService();
        java.lang.String str14 = atomikosProperties9.logBaseDir;
        atomikosProperties9.setEnableLogging(false);
        boolean boolean17 = atomikosProperties9.isEnableLogging();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties18.enableLogging = true;
        long long21 = atomikosProperties18.getCheckpointInterval();
        atomikosProperties18.setService("tmlog");
        atomikosProperties18.setConsoleFileName("{}");
        java.util.Properties properties26 = atomikosProperties18.asProperties();
        atomikosProperties18.setCheckpointInterval((long) (short) 10);
        atomikosProperties18.logBaseName = "";
        java.lang.Object obj31 = properties5.put((java.lang.Object) boolean17, (java.lang.Object) atomikosProperties18);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long33 = atomikosProperties32.checkpointInterval;
        atomikosProperties32.service = "";
        java.lang.Object obj36 = properties1.putIfAbsent((java.lang.Object) atomikosProperties18, (java.lang.Object) "");
        java.lang.String str37 = atomikosProperties18.transactionManagerUniqueName;
        atomikosProperties18.enableLogging = false;
        java.util.Properties properties40 = atomikosProperties18.asProperties();
        org.junit.Assert.assertNotNull(objCollection2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "{}");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 500L + "'", long12 == 500L);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 500L + "'", long21 == 500L);
        org.junit.Assert.assertNotNull(properties26);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 500L + "'", long33 == 500L);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(properties40);
    }

    @Test
    public void test04471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04471");
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery0 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery0.maxRetries = (-1);
        recovery0.setDelay((long) (short) 1);
        long long5 = recovery0.forgetOrphanedLogEntriesDelay;
        long long6 = recovery0.getDelay();
        recovery0.setMaxRetries(18);
        recovery0.setForgetOrphanedLogEntriesDelay((long) 5);
        int int11 = recovery0.maxRetries;
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 86400000L + "'", long5 == 86400000L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 18 + "'", int11 == 18);
    }

    @Test
    public void test04472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04472");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.enableLogging = true;
        long long3 = atomikosProperties0.getCheckpointInterval();
        java.lang.String str4 = atomikosProperties0.getOutputDir();
        java.lang.String str5 = atomikosProperties0.service;
        atomikosProperties0.maxTimeout = 100;
        boolean boolean8 = atomikosProperties0.enableLogging;
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 500L + "'", long3 == 500L);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test04473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04473");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        long long5 = atomikosProperties0.getMaxTimeout();
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet7 = properties6.keySet();
        atomikosProperties0.set(properties6, "hi!", (java.lang.Object) (-1.0f));
        java.lang.String str11 = atomikosProperties0.logBaseDir;
        boolean boolean12 = atomikosProperties0.enableLogging;
        int int13 = atomikosProperties0.maxActives;
        boolean boolean14 = atomikosProperties0.isForceShutdownOnVmExit();
        int int15 = atomikosProperties0.maxActives;
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertNotNull(objSet7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 50 + "'", int13 == 50);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 50 + "'", int15 == 50);
    }

    @Test
    public void test04474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04474");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        long long5 = atomikosProperties0.getMaxTimeout();
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet7 = properties6.keySet();
        atomikosProperties0.set(properties6, "hi!", (java.lang.Object) (-1.0f));
        java.lang.String str11 = atomikosProperties0.logBaseDir;
        java.lang.String str12 = atomikosProperties0.logBaseDir;
        java.lang.String str13 = atomikosProperties0.logBaseDir;
        java.lang.String str14 = atomikosProperties0.getService();
        java.lang.String str15 = atomikosProperties0.outputDir;
        java.util.Properties properties16 = atomikosProperties0.asProperties();
        java.io.InputStream inputStream17 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties16.load(inputStream17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertNotNull(objSet7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(properties16);
    }

    @Test
    public void test04475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04475");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.enableLogging = true;
        long long3 = atomikosProperties0.getCheckpointInterval();
        atomikosProperties0.setService("tmlog");
        atomikosProperties0.setConsoleFileName("{}");
        java.lang.String str8 = atomikosProperties0.getConsoleFileName();
        atomikosProperties0.transactionManagerUniqueName = "{com.atomikos.icatch.hi!=-1.0}";
        boolean boolean11 = atomikosProperties0.threadedTwoPhaseCommit;
        java.util.Properties properties12 = atomikosProperties0.asProperties();
        java.io.OutputStream outputStream13 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties12.storeToXML(outputStream13, "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=10, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=true, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir=, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 500L + "'", long3 == 500L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{}" + "'", str8, "{}");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(properties12);
    }

    @Test
    public void test04476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04476");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.checkpointInterval = 0;
        boolean boolean5 = atomikosProperties0.isThreadedTwoPhaseCommit();
        atomikosProperties0.setSerialJtaTransactions(false);
        long long8 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.setSerialJtaTransactions(true);
        long long11 = atomikosProperties0.maxTimeout;
        boolean boolean12 = atomikosProperties0.serialJtaTransactions;
        atomikosProperties0.setService("hi!");
        atomikosProperties0.setForceShutdownOnVmExit(false);
        java.lang.String str17 = atomikosProperties0.getLogBaseName();
        long long18 = atomikosProperties0.getMaxTimeout();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 300000L + "'", long8 == 300000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 300000L + "'", long11 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 300000L + "'", long18 == 300000L);
    }

    @Test
    public void test04477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04477");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.enableLogging = true;
        long long3 = atomikosProperties0.getCheckpointInterval();
        atomikosProperties0.setSerialJtaTransactions(false);
        atomikosProperties0.consoleFileLimit = 'a';
        boolean boolean8 = atomikosProperties0.isThreadedTwoPhaseCommit();
        java.lang.String str9 = atomikosProperties0.getTransactionManagerUniqueName();
        java.lang.String str10 = atomikosProperties0.getOutputDir();
        atomikosProperties0.setMaxActives((int) '4');
        atomikosProperties0.outputDir = "";
        int int15 = atomikosProperties0.consoleFileCount;
        java.lang.String str16 = atomikosProperties0.outputDir;
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 500L + "'", long3 == 500L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test04478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04478");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.enableLogging = true;
        int int3 = atomikosProperties0.consoleFileLimit;
        atomikosProperties0.logBaseName = "hi!";
        boolean boolean6 = atomikosProperties0.isThreadedTwoPhaseCommit();
        boolean boolean7 = atomikosProperties0.isEnableLogging();
        java.lang.String str8 = atomikosProperties0.getLogBaseName();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
    }

    @Test
    public void test04479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04479");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setDefaultJtaTimeout((-1L));
        int int3 = atomikosProperties0.getConsoleFileLimit();
        java.util.Properties properties4 = atomikosProperties0.asProperties();
        boolean boolean5 = atomikosProperties0.forceShutdownOnVmExit;
        boolean boolean6 = atomikosProperties0.forceShutdownOnVmExit;
        java.lang.String str7 = atomikosProperties0.service;
        java.lang.String str8 = atomikosProperties0.logBaseName;
        atomikosProperties0.logBaseDir = "{true=10000}";
        java.lang.String str11 = atomikosProperties0.outputDir;
        atomikosProperties0.setLogBaseDir("{{}={}}");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(properties4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "tmlog" + "'", str8, "tmlog");
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test04480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04480");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        java.lang.String str5 = atomikosProperties0.logBaseName;
        atomikosProperties0.outputDir = "";
        java.util.Properties properties8 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties9.logBaseDir = "";
        atomikosProperties9.setConsoleFileCount((int) (short) 10);
        long long14 = atomikosProperties9.getMaxTimeout();
        java.util.Properties properties15 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet16 = properties15.keySet();
        atomikosProperties9.set(properties15, "hi!", (java.lang.Object) (-1.0f));
        java.lang.Object obj22 = properties15.setProperty("", "hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties24.logBaseDir = "";
        atomikosProperties24.setConsoleFileCount((int) (short) 10);
        atomikosProperties24.setLogBaseDir("{}");
        java.lang.String str31 = atomikosProperties24.getOutputDir();
        atomikosProperties0.set(properties15, "{}", (java.lang.Object) atomikosProperties24);
        atomikosProperties0.setService("{true=10000}");
        atomikosProperties0.defaultJtaTimeout = 18L;
        atomikosProperties0.setEnableLogging(true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tmlog" + "'", str5, "tmlog");
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 300000L + "'", long14 == 300000L);
        org.junit.Assert.assertNotNull(objSet16);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNull(str31);
    }

    @Test
    public void test04481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04481");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties();
        java.lang.Object obj4 = properties2.get((java.lang.Object) 0.0d);
        java.lang.Object obj5 = properties2.clone();
        java.lang.String str6 = properties2.toString();
        java.util.Properties properties7 = new java.util.Properties(properties2);
        java.util.Properties properties8 = new java.util.Properties(properties7);
        java.util.Properties properties9 = new java.util.Properties(properties8);
        java.util.Properties properties10 = new java.util.Properties();
        java.util.Properties properties11 = new java.util.Properties(properties10);
        java.util.Properties properties12 = new java.util.Properties();
        java.util.Properties properties13 = new java.util.Properties(properties12);
        java.util.Properties properties15 = new java.util.Properties();
        java.lang.Object obj17 = properties15.get((java.lang.Object) 0.0d);
        java.lang.Object obj18 = properties15.clone();
        java.lang.String str19 = properties15.toString();
        boolean boolean22 = properties15.remove((java.lang.Object) 0, (java.lang.Object) 'a');
        java.lang.Object obj23 = properties13.replace((java.lang.Object) 10.0d, (java.lang.Object) properties15);
        java.lang.String str24 = properties15.toString();
        java.util.Properties properties25 = new java.util.Properties(properties15);
        java.util.Properties properties26 = new java.util.Properties();
        java.util.Properties properties27 = new java.util.Properties(properties26);
        java.util.Properties properties29 = new java.util.Properties();
        java.lang.Object obj31 = properties29.get((java.lang.Object) 0.0d);
        java.lang.Object obj32 = properties29.clone();
        java.lang.String str33 = properties29.toString();
        boolean boolean36 = properties29.remove((java.lang.Object) 0, (java.lang.Object) 'a');
        java.lang.Object obj37 = properties27.replace((java.lang.Object) 10.0d, (java.lang.Object) properties29);
        java.util.Properties properties38 = new java.util.Properties(properties27);
        properties25.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties38);
        boolean boolean40 = properties10.contains((java.lang.Object) properties25);
        boolean boolean41 = properties25.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery42 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery42.maxRetries = (-1);
        recovery42.setRetryInterval((long) (-1));
        java.lang.Object obj48 = properties25.putIfAbsent((java.lang.Object) (-1), (java.lang.Object) "tmlog");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties49.setDefaultJtaTimeout((-1L));
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel52 = null;
        atomikosProperties49.consoleLogLevel = atomikosLoggingLevel52;
        atomikosProperties49.outputDir = "";
        int int56 = atomikosProperties49.maxActives;
        boolean boolean57 = atomikosProperties49.isThreadedTwoPhaseCommit();
        atomikosProperties49.consoleFileLimit = (short) 10;
        java.util.Properties properties60 = atomikosProperties49.asProperties();
        java.util.Enumeration<java.lang.Object> objEnumeration61 = properties60.keys();
        boolean boolean62 = properties25.contains((java.lang.Object) properties60);
        boolean boolean63 = properties8.equals((java.lang.Object) boolean62);
        java.util.Set<java.lang.Object> objSet64 = properties8.keySet();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        java.io.OutputStream outputStream66 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties8.store(outputStream66, "tm.out");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "{}" + "'", str6, "{}");
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "{}");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "{}" + "'", str19, "{}");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "{}" + "'", str24, "{}");
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "{}");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "{}" + "'", str33, "{}");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 50 + "'", int56 == 50);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(properties60);
        org.junit.Assert.assertNotNull(objEnumeration61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(objSet64);
    }

    @Test
    public void test04482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04482");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        long long5 = atomikosProperties0.getMaxTimeout();
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet7 = properties6.keySet();
        atomikosProperties0.set(properties6, "hi!", (java.lang.Object) (-1.0f));
        java.lang.String str11 = atomikosProperties0.logBaseDir;
        java.lang.String str12 = atomikosProperties0.logBaseDir;
        java.lang.String str13 = atomikosProperties0.logBaseDir;
        java.lang.String str14 = atomikosProperties0.getService();
        java.lang.String str15 = atomikosProperties0.outputDir;
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        boolean boolean18 = atomikosProperties0.threadedTwoPhaseCommit;
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertNotNull(objSet7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test04483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04483");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        atomikosProperties0.setLogBaseDir("{}");
        java.lang.String str7 = atomikosProperties0.getOutputDir();
        atomikosProperties0.setLogBaseName("hi!");
        boolean boolean10 = atomikosProperties0.isAllowSubTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int12 = atomikosProperties11.getConsoleFileCount();
        int int13 = atomikosProperties11.maxActives;
        java.lang.String str14 = atomikosProperties11.getService();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties15.logBaseDir = "";
        atomikosProperties15.setConsoleFileCount((int) (short) 10);
        atomikosProperties15.setCheckpointInterval(10000L);
        long long22 = atomikosProperties15.maxTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel23 = atomikosProperties15.getConsoleLogLevel();
        atomikosProperties11.consoleLogLevel = atomikosLoggingLevel23;
        atomikosProperties0.setConsoleLogLevel(atomikosLoggingLevel23);
        java.lang.String str26 = atomikosProperties0.getOutputDir();
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 50 + "'", int13 == 50);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 300000L + "'", long22 == 300000L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel23 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel23.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertNull(str26);
    }

    @Test
    public void test04484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04484");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.get((java.lang.Object) 0.0d);
        java.lang.Object obj3 = properties0.clone();
        java.lang.String str4 = properties0.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties5.logBaseDir = "";
        atomikosProperties5.setConsoleFileCount((int) (short) 10);
        long long10 = atomikosProperties5.getMaxTimeout();
        java.util.Properties properties11 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet12 = properties11.keySet();
        atomikosProperties5.set(properties11, "hi!", (java.lang.Object) (-1.0f));
        java.lang.Object obj18 = properties11.setProperty("", "hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setDefaultJtaTimeout((-1L));
        java.util.Properties properties22 = new java.util.Properties();
        java.lang.Object obj24 = properties22.get((java.lang.Object) 0.0d);
        java.lang.Object obj25 = properties22.clone();
        boolean boolean27 = properties11.replace((java.lang.Object) (-1L), obj25, (java.lang.Object) 100.0d);
        java.util.Properties properties28 = new java.util.Properties();
        java.util.Properties properties29 = new java.util.Properties(properties28);
        properties29.clear();
        properties11.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties29);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties32.logBaseDir = "";
        atomikosProperties32.setConsoleFileCount((int) (short) 10);
        long long37 = atomikosProperties32.getMaxTimeout();
        java.util.Properties properties38 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet39 = properties38.keySet();
        atomikosProperties32.set(properties38, "hi!", (java.lang.Object) (-1.0f));
        java.lang.String str43 = atomikosProperties32.logBaseDir;
        java.lang.String str44 = atomikosProperties32.logBaseDir;
        java.util.Properties properties45 = atomikosProperties32.asProperties();
        java.lang.Object obj46 = properties0.replace((java.lang.Object) properties29, (java.lang.Object) atomikosProperties32);
        atomikosProperties32.serialJtaTransactions = true;
        atomikosProperties32.setMaxTimeout((long) 100);
        java.lang.String str51 = atomikosProperties32.getOutputDir();
        long long52 = atomikosProperties32.defaultJtaTimeout;
        java.lang.String str53 = atomikosProperties32.outputDir;
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{}" + "'", str4, "{}");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 300000L + "'", long10 == 300000L);
        org.junit.Assert.assertNotNull(objSet12);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "{}");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 300000L + "'", long37 == 300000L);
        org.junit.Assert.assertNotNull(objSet39);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(properties45);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 10000L + "'", long52 == 10000L);
        org.junit.Assert.assertNull(str53);
    }

    @Test
    public void test04485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04485");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        long long5 = atomikosProperties0.getMaxTimeout();
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet7 = properties6.keySet();
        atomikosProperties0.set(properties6, "hi!", (java.lang.Object) (-1.0f));
        java.lang.String str11 = atomikosProperties0.logBaseDir;
        java.lang.String str12 = atomikosProperties0.logBaseDir;
        java.lang.String str13 = atomikosProperties0.logBaseDir;
        boolean boolean14 = atomikosProperties0.isEnableLogging();
        long long15 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.setOutputDir("hi!");
        java.lang.String str18 = atomikosProperties0.outputDir;
        atomikosProperties0.allowSubTransactions = true;
        long long21 = atomikosProperties0.getCheckpointInterval();
        boolean boolean22 = atomikosProperties0.isThreadedTwoPhaseCommit();
        atomikosProperties0.defaultJtaTimeout = 0L;
        java.lang.String str25 = atomikosProperties0.getService();
        int int26 = atomikosProperties0.maxActives;
        boolean boolean27 = atomikosProperties0.isAllowSubTransactions();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertNotNull(objSet7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 500L + "'", long15 == 500L);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 500L + "'", long21 == 500L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 50 + "'", int26 == 50);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test04486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04486");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties0.isEmpty();
        java.lang.String str3 = properties0.toString();
        java.util.Properties properties4 = new java.util.Properties();
        java.lang.Object obj6 = properties4.get((java.lang.Object) 0.0d);
        java.lang.Object obj7 = properties4.clone();
        java.lang.String str8 = properties4.toString();
        java.util.Properties properties9 = new java.util.Properties(properties4);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet10 = properties4.entrySet();
        java.util.Set<java.lang.String> strSet11 = properties4.stringPropertyNames();
        boolean boolean12 = properties0.containsKey((java.lang.Object) strSet11);
        java.util.Properties properties13 = new java.util.Properties(properties0);
        int int14 = properties13.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties15.logBaseDir = "";
        atomikosProperties15.setConsoleFileCount((int) (short) 10);
        long long20 = atomikosProperties15.getMaxTimeout();
        java.util.Properties properties21 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet22 = properties21.keySet();
        atomikosProperties15.set(properties21, "hi!", (java.lang.Object) (-1.0f));
        java.lang.String str26 = atomikosProperties15.logBaseDir;
        boolean boolean27 = atomikosProperties15.enableLogging;
        atomikosProperties15.setLogBaseDir("");
        atomikosProperties15.logBaseName = "{com.atomikos.icatch.hi!=-1.0}";
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel32 = atomikosProperties15.getConsoleLogLevel();
        long long33 = atomikosProperties15.getCheckpointInterval();
        atomikosProperties15.setThreadedTwoPhaseCommit(false);
        int int36 = atomikosProperties15.consoleFileLimit;
        atomikosProperties15.logBaseDir = "";
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties39 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties39.logBaseDir = "";
        atomikosProperties39.setConsoleFileCount((int) (short) 10);
        java.lang.String str44 = atomikosProperties39.logBaseName;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel45 = org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN;
        atomikosProperties39.consoleLogLevel = atomikosLoggingLevel45;
        boolean boolean47 = atomikosProperties39.enableLogging;
        boolean boolean48 = atomikosProperties39.allowSubTransactions;
        java.lang.Object obj49 = properties13.replace((java.lang.Object) atomikosProperties15, (java.lang.Object) atomikosProperties39);
        java.util.Properties properties50 = new java.util.Properties(properties13);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet51 = properties50.entrySet();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "{}" + "'", str3, "{}");
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{}");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{}" + "'", str8, "{}");
        org.junit.Assert.assertNotNull(objEntrySet10);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 300000L + "'", long20 == 300000L);
        org.junit.Assert.assertNotNull(objSet22);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel32 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel32.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 500L + "'", long33 == 500L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "tmlog" + "'", str44, "tmlog");
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel45 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel45.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertNotNull(objEntrySet51);
    }

    @Test
    public void test04487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04487");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setDefaultJtaTimeout((-1L));
        int int3 = atomikosProperties0.getConsoleFileLimit();
        java.util.Properties properties4 = atomikosProperties0.asProperties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        boolean boolean6 = properties5.isEmpty();
        int int7 = properties5.size();
        java.lang.Object obj8 = properties5.clone();
        java.util.Set<java.lang.String> strSet9 = properties5.stringPropertyNames();
        java.util.Collection<java.lang.Object> objCollection10 = properties5.values();
        java.util.Set<java.lang.Object> objSet11 = properties5.keySet();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(properties4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "{}");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNotNull(objCollection10);
        org.junit.Assert.assertNotNull(objSet11);
    }

    @Test
    public void test04488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04488");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setDefaultJtaTimeout((-1L));
        int int3 = atomikosProperties0.getConsoleFileLimit();
        int int4 = atomikosProperties0.maxActives;
        atomikosProperties0.setConsoleFileLimit(52);
        atomikosProperties0.forceShutdownOnVmExit = false;
        atomikosProperties0.setService("{}");
        boolean boolean11 = atomikosProperties0.serialJtaTransactions;
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test04489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04489");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Collection<java.lang.Object> objCollection2 = properties0.values();
        int int3 = properties0.size();
        int int4 = properties0.size();
        java.util.Set<java.lang.Object> objSet5 = properties0.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties6.logBaseDir = "";
        atomikosProperties6.setConsoleFileCount((int) (short) 10);
        long long11 = atomikosProperties6.getMaxTimeout();
        java.util.Properties properties12 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet13 = properties12.keySet();
        atomikosProperties6.set(properties12, "hi!", (java.lang.Object) (-1.0f));
        java.lang.String str17 = atomikosProperties6.logBaseDir;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery18 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery18.maxRetries = (-1);
        recovery18.setDelay((long) (short) 1);
        long long23 = recovery18.getForgetOrphanedLogEntriesDelay();
        long long24 = recovery18.getForgetOrphanedLogEntriesDelay();
        java.lang.Object obj25 = properties0.put((java.lang.Object) atomikosProperties6, (java.lang.Object) long24);
        java.util.Properties properties26 = new java.util.Properties(properties0);
        java.util.Properties properties27 = new java.util.Properties(properties26);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties28.enableLogging = true;
        long long31 = atomikosProperties28.getCheckpointInterval();
        atomikosProperties28.setService("tmlog");
        atomikosProperties28.setCheckpointInterval((long) (short) 0);
        java.lang.String str36 = atomikosProperties28.service;
        boolean boolean37 = atomikosProperties28.threadedTwoPhaseCommit;
        atomikosProperties28.consoleFileCount = 0;
        atomikosProperties28.setSerialJtaTransactions(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties42.logBaseDir = "";
        atomikosProperties42.setConsoleFileCount((int) (short) 10);
        atomikosProperties42.setLogBaseDir("{}");
        java.util.Properties properties49 = atomikosProperties42.asProperties();
        java.util.Set<java.lang.String> strSet50 = properties49.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties51 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int52 = atomikosProperties51.getConsoleFileCount();
        int int53 = atomikosProperties51.maxActives;
        atomikosProperties51.setConsoleFileName("");
        atomikosProperties51.transactionManagerUniqueName = "{}";
        java.util.Properties properties58 = atomikosProperties51.asProperties();
        boolean boolean59 = atomikosProperties51.threadedTwoPhaseCommit;
        atomikosProperties51.enableLogging = true;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties62 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int63 = atomikosProperties62.getConsoleFileCount();
        int int64 = atomikosProperties62.maxActives;
        atomikosProperties62.setConsoleFileName("");
        atomikosProperties62.transactionManagerUniqueName = "{}";
        atomikosProperties62.setMaxActives(0);
        boolean boolean71 = atomikosProperties62.forceShutdownOnVmExit;
        java.lang.Object obj72 = properties49.put((java.lang.Object) atomikosProperties51, (java.lang.Object) atomikosProperties62);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties73 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties73.logBaseDir = "";
        boolean boolean76 = atomikosProperties73.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery77 = atomikosProperties73.getRecovery();
        boolean boolean78 = properties49.contains((java.lang.Object) atomikosProperties73);
        java.lang.Object obj79 = properties27.getOrDefault((java.lang.Object) atomikosProperties28, (java.lang.Object) boolean78);
        java.util.Properties properties80 = new java.util.Properties(properties27);
        org.junit.Assert.assertNotNull(objCollection2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(objSet5);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 300000L + "'", long11 == 300000L);
        org.junit.Assert.assertNotNull(objSet13);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 86400000L + "'", long23 == 86400000L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 86400000L + "'", long24 == 86400000L);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 500L + "'", long31 == 500L);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "tmlog" + "'", str36, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(properties49);
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 50 + "'", int53 == 50);
        org.junit.Assert.assertNotNull(properties58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 50 + "'", int64 == 50);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(obj72);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(recovery77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertEquals("'" + obj79 + "' != '" + false + "'", obj79, false);
    }

    @Test
    public void test04490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04490");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        long long5 = atomikosProperties0.getMaxTimeout();
        java.util.Properties properties6 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet7 = properties6.keySet();
        atomikosProperties0.set(properties6, "hi!", (java.lang.Object) (-1.0f));
        java.lang.String str11 = atomikosProperties0.logBaseDir;
        java.lang.String str12 = atomikosProperties0.logBaseDir;
        java.lang.String str13 = atomikosProperties0.logBaseDir;
        boolean boolean14 = atomikosProperties0.isEnableLogging();
        long long15 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.setOutputDir("hi!");
        java.lang.String str18 = atomikosProperties0.outputDir;
        atomikosProperties0.allowSubTransactions = true;
        atomikosProperties0.logBaseName = "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=10, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir=, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}";
        boolean boolean23 = atomikosProperties0.isAllowSubTransactions();
        atomikosProperties0.setSerialJtaTransactions(true);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertNotNull(objSet7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 500L + "'", long15 == 500L);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test04491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04491");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setDefaultJtaTimeout((-1L));
        long long3 = atomikosProperties0.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int5 = atomikosProperties4.getConsoleFileCount();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties6.logBaseDir = "";
        atomikosProperties6.setConsoleFileCount((int) (short) 10);
        atomikosProperties6.setCheckpointInterval(10000L);
        long long13 = atomikosProperties6.maxTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel14 = org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO;
        atomikosProperties6.consoleLogLevel = atomikosLoggingLevel14;
        atomikosProperties4.consoleLogLevel = atomikosLoggingLevel14;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel14;
        atomikosProperties0.forceShutdownOnVmExit = false;
        atomikosProperties0.checkpointInterval = (short) 1;
        int int22 = atomikosProperties0.getConsoleFileCount();
        atomikosProperties0.allowSubTransactions = false;
        atomikosProperties0.threadedTwoPhaseCommit = false;
        java.util.Properties properties27 = atomikosProperties0.asProperties();
        java.util.Properties properties28 = new java.util.Properties(properties27);
        java.io.PrintWriter printWriter29 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties27.list(printWriter29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 500L + "'", long3 == 500L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 300000L + "'", long13 == 300000L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel14 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO + "'", atomikosLoggingLevel14.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(properties27);
    }

    @Test
    public void test04492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04492");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.get((java.lang.Object) 0.0d);
        java.lang.Object obj3 = properties0.clone();
        java.lang.String str4 = properties0.toString();
        java.util.Properties properties5 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration6 = properties5.keys();
        java.util.Collection<java.lang.Object> objCollection7 = properties5.values();
        java.util.Properties properties8 = new java.util.Properties();
        java.util.Properties properties9 = new java.util.Properties(properties8);
        java.util.Collection<java.lang.Object> objCollection10 = properties8.values();
        int int11 = properties8.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery12 = new org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery();
        recovery12.maxRetries = (-1);
        recovery12.setDelay((long) (short) 0);
        recovery12.maxRetries = 0;
        boolean boolean20 = properties8.remove((java.lang.Object) 0, (java.lang.Object) (-1));
        java.util.Enumeration<?> wildcardEnumeration21 = properties8.propertyNames();
        java.lang.Object obj22 = properties5.get((java.lang.Object) properties8);
        java.lang.Object obj23 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj24 = properties5.remove(obj23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{}" + "'", str4, "{}");
        org.junit.Assert.assertNotNull(objEnumeration6);
        org.junit.Assert.assertNotNull(objCollection7);
        org.junit.Assert.assertNotNull(objCollection10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(wildcardEnumeration21);
        org.junit.Assert.assertNull(obj22);
    }

    @Test
    public void test04493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04493");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        atomikosProperties0.setLogBaseDir("{}");
        java.lang.String str7 = atomikosProperties0.getOutputDir();
        atomikosProperties0.setLogBaseName("hi!");
        boolean boolean10 = atomikosProperties0.isAllowSubTransactions();
        atomikosProperties0.service = "{}";
        atomikosProperties0.setTransactionManagerUniqueName("{}");
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        atomikosProperties0.setForceShutdownOnVmExit(false);
        int int19 = atomikosProperties0.consoleFileCount;
        atomikosProperties0.logBaseName = "tmlog";
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
    }

    @Test
    public void test04494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04494");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int1 = atomikosProperties0.getConsoleFileCount();
        int int2 = atomikosProperties0.maxActives;
        atomikosProperties0.setConsoleFileName("");
        atomikosProperties0.transactionManagerUniqueName = "{}";
        java.util.Properties properties7 = atomikosProperties0.asProperties();
        boolean boolean8 = atomikosProperties0.threadedTwoPhaseCommit;
        long long9 = atomikosProperties0.checkpointInterval;
        java.lang.String str10 = atomikosProperties0.logBaseName;
        int int11 = atomikosProperties0.consoleFileCount;
        atomikosProperties0.setConsoleFileCount(35);
        int int14 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery15 = atomikosProperties0.recovery;
        recovery15.forgetOrphanedLogEntriesDelay = 300000L;
        recovery15.forgetOrphanedLogEntriesDelay = 50;
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 50 + "'", int2 == 50);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 500L + "'", long9 == 500L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "tmlog" + "'", str10, "tmlog");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 50 + "'", int14 == 50);
        org.junit.Assert.assertNotNull(recovery15);
    }

    @Test
    public void test04495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04495");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int1 = atomikosProperties0.getConsoleFileCount();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties2.logBaseDir = "";
        atomikosProperties2.setConsoleFileCount((int) (short) 10);
        atomikosProperties2.setCheckpointInterval(10000L);
        long long9 = atomikosProperties2.maxTimeout;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel10 = org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO;
        atomikosProperties2.consoleLogLevel = atomikosLoggingLevel10;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel10;
        java.lang.String str13 = atomikosProperties0.getService();
        atomikosProperties0.setThreadedTwoPhaseCommit(false);
        long long16 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.service = "hi!";
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel19 = atomikosProperties0.getConsoleLogLevel();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 300000L + "'", long9 == 300000L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel10 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO + "'", atomikosLoggingLevel10.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO));
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 300000L + "'", long16 == 300000L);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel19 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO + "'", atomikosLoggingLevel19.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.INFO));
    }

    @Test
    public void test04496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04496");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        int int1 = atomikosProperties0.getConsoleFileCount();
        int int2 = atomikosProperties0.maxActives;
        atomikosProperties0.setConsoleFileName("");
        boolean boolean5 = atomikosProperties0.forceShutdownOnVmExit;
        long long6 = atomikosProperties0.maxTimeout;
        int int7 = atomikosProperties0.getConsoleFileLimit();
        boolean boolean8 = atomikosProperties0.isAllowSubTransactions();
        int int9 = atomikosProperties0.getConsoleFileCount();
        atomikosProperties0.setDefaultJtaTimeout((long) (short) 1);
        atomikosProperties0.setLogBaseName("{tmlog={com.atomikos.icatch.hi!=-1.0}}");
        java.lang.String str14 = atomikosProperties0.getOutputDir();
        atomikosProperties0.setOutputDir("{tmlog={com.atomikos.icatch.hi!=-1.0}}");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 50 + "'", int2 == 50);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 300000L + "'", long6 == 300000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test04497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04497");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj2 = properties0.get((java.lang.Object) 0.0d);
        java.lang.Object obj3 = properties0.clone();
        java.lang.String str4 = properties0.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties5.logBaseDir = "";
        atomikosProperties5.setConsoleFileCount((int) (short) 10);
        long long10 = atomikosProperties5.getMaxTimeout();
        java.util.Properties properties11 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet12 = properties11.keySet();
        atomikosProperties5.set(properties11, "hi!", (java.lang.Object) (-1.0f));
        java.lang.Object obj18 = properties11.setProperty("", "hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setDefaultJtaTimeout((-1L));
        java.util.Properties properties22 = new java.util.Properties();
        java.lang.Object obj24 = properties22.get((java.lang.Object) 0.0d);
        java.lang.Object obj25 = properties22.clone();
        boolean boolean27 = properties11.replace((java.lang.Object) (-1L), obj25, (java.lang.Object) 100.0d);
        java.util.Properties properties28 = new java.util.Properties();
        java.util.Properties properties29 = new java.util.Properties(properties28);
        properties29.clear();
        properties11.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties29);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties32.logBaseDir = "";
        atomikosProperties32.setConsoleFileCount((int) (short) 10);
        long long37 = atomikosProperties32.getMaxTimeout();
        java.util.Properties properties38 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet39 = properties38.keySet();
        atomikosProperties32.set(properties38, "hi!", (java.lang.Object) (-1.0f));
        java.lang.String str43 = atomikosProperties32.logBaseDir;
        java.lang.String str44 = atomikosProperties32.logBaseDir;
        java.util.Properties properties45 = atomikosProperties32.asProperties();
        java.lang.Object obj46 = properties0.replace((java.lang.Object) properties29, (java.lang.Object) atomikosProperties32);
        java.util.Set<java.lang.String> strSet47 = properties29.stringPropertyNames();
        java.lang.Object obj48 = properties29.clone();
        java.lang.Object obj49 = properties29.clone();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{}");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{}" + "'", str4, "{}");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 300000L + "'", long10 == 300000L);
        org.junit.Assert.assertNotNull(objSet12);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "{}");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 300000L + "'", long37 == 300000L);
        org.junit.Assert.assertNotNull(objSet39);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(properties45);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertEquals(obj48.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj48), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj48), "{}");
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "{}");
    }

    @Test
    public void test04498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04498");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.setConsoleFileCount((int) (short) 10);
        atomikosProperties0.setLogBaseDir("{}");
        java.util.Properties properties7 = atomikosProperties0.asProperties();
        java.util.Set<java.lang.String> strSet8 = properties7.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties9.setDefaultJtaTimeout((-1L));
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel12 = null;
        atomikosProperties9.consoleLogLevel = atomikosLoggingLevel12;
        atomikosProperties9.outputDir = "";
        int int16 = atomikosProperties9.maxActives;
        boolean boolean17 = atomikosProperties9.isThreadedTwoPhaseCommit();
        atomikosProperties9.consoleFileLimit = (short) 10;
        java.util.Properties properties20 = atomikosProperties9.asProperties();
        java.util.Enumeration<java.lang.Object> objEnumeration21 = properties20.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties22.enableLogging = true;
        long long25 = atomikosProperties22.getCheckpointInterval();
        java.lang.String str26 = atomikosProperties22.getService();
        atomikosProperties22.forceShutdownOnVmExit = false;
        java.lang.Object obj29 = properties7.replace((java.lang.Object) objEnumeration21, (java.lang.Object) atomikosProperties22);
        atomikosProperties22.setDefaultJtaTimeout(300000L);
        atomikosProperties22.defaultJtaTimeout = (byte) 1;
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel34 = atomikosProperties22.getConsoleLogLevel();
        boolean boolean35 = atomikosProperties22.isAllowSubTransactions();
        int int36 = atomikosProperties22.getMaxActives();
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 50 + "'", int16 == 50);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(properties20);
        org.junit.Assert.assertNotNull(objEnumeration21);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 500L + "'", long25 == 500L);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertTrue("'" + atomikosLoggingLevel34 + "' != '" + org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN + "'", atomikosLoggingLevel34.equals(org.springframework.boot.jta.atomikos.AtomikosLoggingLevel.WARN));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 50 + "'", int36 == 50);
    }

    @Test
    public void test04499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04499");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setDefaultJtaTimeout((-1L));
        int int3 = atomikosProperties0.getConsoleFileLimit();
        int int4 = atomikosProperties0.maxActives;
        atomikosProperties0.setConsoleFileLimit(52);
        org.springframework.boot.jta.atomikos.AtomikosProperties.Recovery recovery7 = atomikosProperties0.getRecovery();
        atomikosProperties0.consoleFileName = "hi!";
        atomikosProperties0.setOutputDir("tm.out");
        boolean boolean12 = atomikosProperties0.allowSubTransactions;
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(recovery7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test04500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04500");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setDefaultJtaTimeout((-1L));
        org.springframework.boot.jta.atomikos.AtomikosLoggingLevel atomikosLoggingLevel3 = null;
        atomikosProperties0.consoleLogLevel = atomikosLoggingLevel3;
        atomikosProperties0.outputDir = "";
        atomikosProperties0.allowSubTransactions = true;
        long long9 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.setAllowSubTransactions(true);
        atomikosProperties0.transactionManagerUniqueName = "{com.atomikos.icatch.console_file_name=tm.out, com.atomikos.icatch.allow_subtransactions=true, com.atomikos.icatch.recovery_delay=10000, com.atomikos.icatch.console_file_count=10, com.atomikos.icatch.oltp_max_retries=5, com.atomikos.icatch.threaded_2pc=true, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.log_base_dir=, com.atomikos.icatch.console_log_level=WARN, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.log_base_name=tmlog, com.atomikos.icatch.console_file_limit=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.forget_orphaned_log_entries_delay=86400000, com.atomikos.icatch.oltp_retry_interval=10000, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.default_jta_timeout=10000}";
        atomikosProperties0.consoleFileCount = 0;
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 300000L + "'", long9 == 300000L);
    }
}
