/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 08 18:50:32 GMT 2021
 */

package org.springframework.boot.jta.atomikos;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.Properties;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.springframework.boot.jta.atomikos.AtomikosProperties;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AtomikosProperties_ESTest extends AtomikosProperties_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNotNull(atomikosProperties0);
      
      boolean boolean0 = true;
      long long0 = 817L;
      atomikosProperties0.setForceShutdownOnVmExit(boolean0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      
      atomikosProperties0.setCheckpointInterval(long0);
      assertEquals(817L, atomikosProperties0.getCheckpointInterval());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      
      atomikosProperties0.setSerialJtaTransactions(boolean0);
      assertEquals(817L, atomikosProperties0.getCheckpointInterval());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      
      atomikosProperties0.setEnableLogging(boolean0);
      assertEquals(817L, atomikosProperties0.getCheckpointInterval());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNotNull(atomikosProperties0);
      
      int int0 = (-48);
      String string0 = "_,9c3aE*S101";
      atomikosProperties0.setService(string0);
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("_,9c3aE*S101", atomikosProperties0.getService());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      
      atomikosProperties0.setMaxActives(int0);
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-48), atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("_,9c3aE*S101", atomikosProperties0.getService());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      
      atomikosProperties0.setLogBaseName(string0);
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-48), atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("_,9c3aE*S101", atomikosProperties0.getService());
      assertEquals("_,9c3aE*S101", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      
      boolean boolean0 = false;
      atomikosProperties0.setThreadedTwoPhaseCommit(boolean0);
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-48), atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("_,9c3aE*S101", atomikosProperties0.getService());
      assertEquals("_,9c3aE*S101", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      
      Properties properties0 = atomikosProperties0.asProperties();
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-48), atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("_,9c3aE*S101", atomikosProperties0.getService());
      assertEquals("_,9c3aE*S101", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(10, properties0.size());
      assertFalse(properties0.isEmpty());
      assertNotNull(properties0);
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNotNull(atomikosProperties0);
      
      String string0 = "Db";
      atomikosProperties0.setTransactionManagerUniqueName(string0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("Db", atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      
      long long0 = (-2L);
      atomikosProperties0.setMaxTimeout(long0);
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals((-2L), atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("Db", atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      
      atomikosProperties0.setLogBaseDir(string0);
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals((-2L), atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("Db", atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("Db", atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      
      atomikosProperties0.setDefaultJtaTimeout(long0);
      assertEquals((-2L), atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals((-2L), atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("Db", atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("Db", atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getService());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNotNull(atomikosProperties0);
      
      long long0 = atomikosProperties0.getCheckpointInterval();
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getService());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(500L, long0);
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNotNull(atomikosProperties0);
      
      String string0 = "";
      atomikosProperties0.setService(string0);
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals("", atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      
      String string1 = "yd*u1+%ijTWtct83f@";
      long long0 = (-1044L);
      atomikosProperties0.setMaxTimeout(long0);
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals((-1044L), atomikosProperties0.getMaxTimeout());
      assertEquals("", atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      
      atomikosProperties0.setTransactionManagerUniqueName(string1);
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("yd*u1+%ijTWtct83f@", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals((-1044L), atomikosProperties0.getMaxTimeout());
      assertEquals("", atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      
      atomikosProperties0.setMaxTimeout(long0);
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("yd*u1+%ijTWtct83f@", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals((-1044L), atomikosProperties0.getMaxTimeout());
      assertEquals("", atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      
      boolean boolean0 = atomikosProperties0.isSerialJtaTransactions();
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("yd*u1+%ijTWtct83f@", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals((-1044L), atomikosProperties0.getMaxTimeout());
      assertEquals("", atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(boolean0);
      
      int int0 = atomikosProperties0.getMaxActives();
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("yd*u1+%ijTWtct83f@", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals((-1044L), atomikosProperties0.getMaxTimeout());
      assertEquals("", atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(50, int0);
      
      boolean boolean1 = false;
      atomikosProperties0.setForceShutdownOnVmExit(boolean1);
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("yd*u1+%ijTWtct83f@", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals((-1044L), atomikosProperties0.getMaxTimeout());
      assertEquals("", atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(boolean1 == boolean0);
      
      String string2 = atomikosProperties0.getTransactionManagerUniqueName();
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("yd*u1+%ijTWtct83f@", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals((-1044L), atomikosProperties0.getMaxTimeout());
      assertEquals("", atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNotNull(string2);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string2.equals((Object)string0));
      assertEquals("yd*u1+%ijTWtct83f@", string2);
      
      long long1 = atomikosProperties0.getDefaultJtaTimeout();
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("yd*u1+%ijTWtct83f@", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals((-1044L), atomikosProperties0.getMaxTimeout());
      assertEquals("", atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(long1 == long0);
      assertEquals(10000L, long1);
      
      String string3 = null;
      atomikosProperties0.setLogBaseDir(string3);
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("yd*u1+%ijTWtct83f@", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals((-1044L), atomikosProperties0.getMaxTimeout());
      assertEquals("", atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNotNull(atomikosProperties0);
      
      String string0 = atomikosProperties0.getService();
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(string0);
      
      atomikosProperties0.setService(string0);
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      
      atomikosProperties0.setLogBaseName(string0);
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      
      int int0 = 0;
      atomikosProperties0.setMaxActives(int0);
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      
      String string1 = atomikosProperties0.getTransactionManagerUniqueName();
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(string1);
      
      boolean boolean0 = true;
      atomikosProperties0.setForceShutdownOnVmExit(boolean0);
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      
      boolean boolean1 = atomikosProperties0.isForceShutdownOnVmExit();
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      long long0 = 300000L;
      atomikosProperties0.setMaxTimeout(long0);
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      
      boolean boolean2 = true;
      atomikosProperties0.setThreadedTwoPhaseCommit(boolean2);
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(boolean2 == boolean1);
      
      long long1 = atomikosProperties0.getMaxTimeout();
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(long1 == long0);
      assertEquals(300000L, long1);
      
      String string2 = "";
      atomikosProperties0.setTransactionManagerUniqueName(string2);
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      
      atomikosProperties0.setService(string2);
      assertEquals("", atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      
      atomikosProperties0.setMaxTimeout(long1);
      assertEquals("", atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(long1 == long0);
      
      Properties properties0 = atomikosProperties0.asProperties();
      assertEquals("", atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(10, properties0.size());
      assertFalse(properties0.isEmpty());
      assertNotNull(properties0);
      
      atomikosProperties0.setLogBaseDir(string2);
      assertEquals("", atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      
      boolean boolean3 = atomikosProperties0.isThreadedTwoPhaseCommit();
      assertEquals("", atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3);
      
      int int1 = atomikosProperties0.getMaxActives();
      assertEquals("", atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      Properties properties1 = atomikosProperties0.asProperties();
      assertEquals("", atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(properties1.isEmpty());
      assertEquals(11, properties1.size());
      assertNotNull(properties1);
      assertNotSame(properties1, properties0);
      assertFalse(properties1.equals((Object)properties0));
      
      long long2 = atomikosProperties0.getCheckpointInterval();
      assertEquals("", atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertEquals(500L, long2);
      
      String string3 = atomikosProperties0.getLogBaseName();
      assertEquals("", atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(string3);
      
      Properties properties2 = atomikosProperties0.asProperties();
      assertEquals("", atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(11, properties2.size());
      assertFalse(properties2.isEmpty());
      assertNotNull(properties2);
      assertNotSame(properties2, properties1);
      assertNotSame(properties2, properties0);
      assertFalse(properties2.equals((Object)properties1));
      assertFalse(properties2.equals((Object)properties0));
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNotNull(atomikosProperties0);
      
      long long0 = 0L;
      atomikosProperties0.setMaxTimeout(long0);
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNotNull(atomikosProperties0);
      
      Properties properties0 = atomikosProperties0.asProperties();
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(9, properties0.size());
      assertFalse(properties0.isEmpty());
      assertNotNull(properties0);
      
      String string0 = "--} =yg3PdG.#*";
      atomikosProperties0.setService(string0);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("--} =yg3PdG.#*", atomikosProperties0.getService());
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNotNull(atomikosProperties0);
      
      long long0 = 0L;
      atomikosProperties0.setDefaultJtaTimeout(long0);
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNotNull(atomikosProperties0);
      
      int int0 = 1;
      atomikosProperties0.setMaxActives(int0);
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(1, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNotNull(atomikosProperties0);
      
      boolean boolean0 = false;
      atomikosProperties0.setForceShutdownOnVmExit(boolean0);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      
      atomikosProperties0.setThreadedTwoPhaseCommit(boolean0);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNotNull(atomikosProperties0);
      
      String string0 = "";
      atomikosProperties0.setLogBaseDir(string0);
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      
      int int0 = (-2202);
      atomikosProperties0.setMaxActives(int0);
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals((-2202), atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      
      long long0 = atomikosProperties0.getMaxTimeout();
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals((-2202), atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, long0);
      
      boolean boolean0 = atomikosProperties0.isEnableLogging();
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals((-2202), atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(boolean0);
      
      int int1 = atomikosProperties0.getMaxActives();
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals((-2202), atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(int1 == int0);
      assertEquals((-2202), int1);
      
      int int2 = atomikosProperties0.getMaxActives();
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals((-2202), atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-2202), int2);
      
      boolean boolean1 = atomikosProperties0.isForceShutdownOnVmExit();
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals((-2202), atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNotNull(atomikosProperties0);
      
      long long0 = 0L;
      atomikosProperties0.setCheckpointInterval(long0);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      
      boolean boolean0 = atomikosProperties0.isEnableLogging();
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(boolean0);
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNotNull(atomikosProperties0);
      
      boolean boolean0 = false;
      atomikosProperties0.setEnableLogging(boolean0);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      
      int int0 = atomikosProperties0.getMaxActives();
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(50, int0);
      
      int int1 = atomikosProperties0.getMaxActives();
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(int1 == int0);
      assertEquals(50, int1);
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNotNull(atomikosProperties0);
      
      String string0 = ";";
      atomikosProperties0.setTransactionManagerUniqueName(string0);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(";", atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNotNull(atomikosProperties0);
      
      boolean boolean0 = false;
      atomikosProperties0.setSerialJtaTransactions(boolean0);
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNotNull(atomikosProperties0);
      
      String string0 = "service";
      atomikosProperties0.setLogBaseName(string0);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("service", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      
      boolean boolean0 = atomikosProperties0.isSerialJtaTransactions();
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("service", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(boolean0);
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getService());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNotNull(atomikosProperties0);
      
      String string0 = "";
      atomikosProperties0.setTransactionManagerUniqueName(string0);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getService());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      
      long long0 = atomikosProperties0.getDefaultJtaTimeout();
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getService());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(10000L, long0);
      
      long long1 = atomikosProperties0.getDefaultJtaTimeout();
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getService());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(long1 == long0);
      assertEquals(10000L, long1);
      
      long long2 = atomikosProperties0.getMaxTimeout();
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getService());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertEquals(300000L, long2);
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNotNull(atomikosProperties0);
      
      boolean boolean0 = true;
      boolean boolean1 = false;
      atomikosProperties0.setThreadedTwoPhaseCommit(boolean1);
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(boolean1 == boolean0);
      
      atomikosProperties0.setThreadedTwoPhaseCommit(boolean0);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(boolean0 == boolean1);
      
      boolean boolean2 = atomikosProperties0.isThreadedTwoPhaseCommit();
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String string0 = "tQ9.dQG<'8[wdtRh ";
      atomikosProperties0.setLogBaseDir(string0);
      assertEquals("tQ9.dQG<'8[wdtRh ", atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNotNull(atomikosProperties0);
      
      boolean boolean0 = atomikosProperties0.isThreadedTwoPhaseCommit();
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(boolean0);
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNotNull(atomikosProperties0);
      
      int int0 = (-1430);
      atomikosProperties0.setMaxActives(int0);
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-1430), atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      
      String string0 = atomikosProperties0.getTransactionManagerUniqueName();
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-1430), atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(string0);
      
      boolean boolean0 = true;
      atomikosProperties0.setSerialJtaTransactions(boolean0);
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-1430), atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      
      boolean boolean1 = true;
      atomikosProperties0.setEnableLogging(boolean1);
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-1430), atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      
      atomikosProperties0.setTransactionManagerUniqueName(string0);
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-1430), atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      
      boolean boolean2 = atomikosProperties0.isThreadedTwoPhaseCommit();
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-1430), atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNotNull(atomikosProperties0);
      
      long long0 = (-2032L);
      atomikosProperties0.setDefaultJtaTimeout(long0);
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals((-2032L), atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      
      int int0 = 1;
      atomikosProperties0.setMaxActives(int0);
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals((-2032L), atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      
      String string0 = atomikosProperties0.getLogBaseDir();
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals((-2032L), atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(1, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(string0);
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNotNull(atomikosProperties0);
      
      Properties properties0 = atomikosProperties0.asProperties();
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(9, properties0.size());
      assertFalse(properties0.isEmpty());
      assertNotNull(properties0);
      
      boolean boolean0 = false;
      atomikosProperties0.setEnableLogging(boolean0);
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      
      long long0 = atomikosProperties0.getDefaultJtaTimeout();
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, long0);
      
      String string0 = atomikosProperties0.getTransactionManagerUniqueName();
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(string0);
      
      atomikosProperties0.setCheckpointInterval(long0);
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      
      boolean boolean1 = true;
      atomikosProperties0.setSerialJtaTransactions(boolean1);
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = atomikosProperties0.isEnableLogging();
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string1 = "{*5*o3SEM;t";
      atomikosProperties0.setService(string1);
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("{*5*o3SEM;t", atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      
      boolean boolean3 = true;
      atomikosProperties0.setThreadedTwoPhaseCommit(boolean3);
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("{*5*o3SEM;t", atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNotNull(atomikosProperties0);
      
      boolean boolean0 = true;
      atomikosProperties0.setThreadedTwoPhaseCommit(boolean0);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      
      String string0 = "";
      atomikosProperties0.setLogBaseName(string0);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      
      String string1 = atomikosProperties0.getLogBaseName();
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNotNull(string1);
      assertSame(string1, string0);
      assertEquals("", string1);
      
      atomikosProperties0.setEnableLogging(boolean0);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      
      long long0 = atomikosProperties0.getMaxTimeout();
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(300000L, long0);
      
      String string2 = "";
      atomikosProperties0.setLogBaseDir(string2);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertSame(string2, string1);
      assertSame(string2, string0);
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNotNull(atomikosProperties0);
      
      String string0 = atomikosProperties0.getLogBaseName();
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNotNull(string0);
      assertEquals("tmlog", string0);
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNotNull(atomikosProperties0);
      
      boolean boolean0 = atomikosProperties0.isSerialJtaTransactions();
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(boolean0);
      
      boolean boolean1 = atomikosProperties0.isForceShutdownOnVmExit();
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNotNull(atomikosProperties0);
      
      String string0 = "";
      atomikosProperties0.setLogBaseDir(string0);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      
      boolean boolean0 = false;
      atomikosProperties0.setSerialJtaTransactions(boolean0);
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      
      long long0 = 138L;
      atomikosProperties0.setSerialJtaTransactions(boolean0);
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      
      atomikosProperties0.setTransactionManagerUniqueName(string0);
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      
      atomikosProperties0.setCheckpointInterval(long0);
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getService());
      assertEquals(138L, atomikosProperties0.getCheckpointInterval());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      
      String string1 = atomikosProperties0.getLogBaseDir();
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getService());
      assertEquals(138L, atomikosProperties0.getCheckpointInterval());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNotNull(string1);
      assertSame(string1, string0);
      assertEquals("", string1);
      
      atomikosProperties0.setService(string1);
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("", atomikosProperties0.getService());
      assertEquals(138L, atomikosProperties0.getCheckpointInterval());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertSame(string1, string0);
      
      long long1 = atomikosProperties0.getCheckpointInterval();
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("", atomikosProperties0.getService());
      assertEquals(138L, atomikosProperties0.getCheckpointInterval());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(long1 == long0);
      assertEquals(138L, long1);
      
      long long2 = atomikosProperties0.getDefaultJtaTimeout();
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("", atomikosProperties0.getService());
      assertEquals(138L, atomikosProperties0.getCheckpointInterval());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertEquals(10000L, long2);
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNotNull(atomikosProperties0);
      
      int int0 = atomikosProperties0.getMaxActives();
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(50, int0);
      
      long long0 = 0L;
      long long1 = 2072L;
      atomikosProperties0.setCheckpointInterval(long1);
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(2072L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(long1 == long0);
      
      Properties properties0 = atomikosProperties0.asProperties();
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(2072L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(properties0.isEmpty());
      assertEquals(9, properties0.size());
      assertNotNull(properties0);
      
      atomikosProperties0.setMaxTimeout(long0);
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(2072L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertFalse(long0 == long1);
      
      Properties properties1 = atomikosProperties0.asProperties();
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(2072L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(9, properties1.size());
      assertFalse(properties1.isEmpty());
      assertNotNull(properties1);
      assertNotSame(properties1, properties0);
      assertFalse(properties1.equals((Object)properties0));
      
      String string0 = "";
      atomikosProperties0.setLogBaseDir(string0);
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertEquals(2072L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      
      Properties properties2 = atomikosProperties0.asProperties();
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertEquals(2072L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(10, properties2.size());
      assertFalse(properties2.isEmpty());
      assertNotNull(properties2);
      assertNotSame(properties2, properties1);
      assertNotSame(properties2, properties0);
      assertFalse(properties2.equals((Object)properties1));
      assertFalse(properties2.equals((Object)properties0));
      
      long long2 = atomikosProperties0.getMaxTimeout();
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertEquals(2072L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertTrue(long2 == long0);
      assertFalse(long2 == long1);
      assertEquals(0L, long2);
      
      long long3 = 0L;
      atomikosProperties0.setDefaultJtaTimeout(long3);
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertEquals(2072L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertTrue(long3 == long2);
      assertFalse(long3 == long1);
      
      atomikosProperties0.setMaxActives(int0);
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertEquals(2072L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      
      long long4 = atomikosProperties0.getCheckpointInterval();
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertEquals(2072L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertFalse(long4 == long2);
      assertFalse(long4 == long3);
      assertTrue(long4 == long1);
      assertFalse(long4 == long0);
      assertEquals(2072L, long4);
      
      String string1 = atomikosProperties0.getService();
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertEquals(2072L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertNull(string1);
      
      boolean boolean0 = false;
      atomikosProperties0.setSerialJtaTransactions(boolean0);
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertEquals(2072L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getService());
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNotNull(atomikosProperties0);
      
      int int0 = 0;
      boolean boolean0 = true;
      atomikosProperties0.setEnableLogging(boolean0);
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      
      atomikosProperties0.setMaxActives(int0);
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      
      boolean boolean1 = atomikosProperties0.isEnableLogging();
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      atomikosProperties0.setEnableLogging(boolean1);
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(boolean1 == boolean0);
      
      int int1 = (-710);
      atomikosProperties0.setMaxActives(int1);
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-710), atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(int1 == int0);
      
      boolean boolean2 = atomikosProperties0.isThreadedTwoPhaseCommit();
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-710), atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      long long0 = 0L;
      atomikosProperties0.setDefaultJtaTimeout(long0);
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-710), atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      
      boolean boolean3 = true;
      atomikosProperties0.setForceShutdownOnVmExit(boolean3);
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-710), atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      
      long long1 = atomikosProperties0.getMaxTimeout();
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-710), atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(long1 == long0);
      assertEquals(300000L, long1);
      
      long long2 = atomikosProperties0.getDefaultJtaTimeout();
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-710), atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(long2 == long0);
      assertFalse(long2 == long1);
      assertEquals(0L, long2);
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNotNull(atomikosProperties0);
      
      String string0 = "";
      atomikosProperties0.setService(string0);
      assertEquals("", atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      
      String string1 = atomikosProperties0.getService();
      assertEquals("", atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNotNull(string1);
      assertSame(string1, string0);
      assertEquals("", string1);
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNotNull(atomikosProperties0);
      
      int int0 = (-948);
      atomikosProperties0.setMaxActives(int0);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-948), atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      
      Properties properties0 = atomikosProperties0.asProperties();
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-948), atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(properties0.isEmpty());
      assertEquals(9, properties0.size());
      assertNotNull(properties0);
      
      long long0 = 0L;
      atomikosProperties0.setMaxTimeout(long0);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-948), atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      
      long long1 = atomikosProperties0.getCheckpointInterval();
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-948), atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(long1 == long0);
      assertEquals(500L, long1);
      
      boolean boolean0 = false;
      String string0 = "";
      atomikosProperties0.setLogBaseDir(string0);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-948), atomikosProperties0.getMaxActives());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      
      atomikosProperties0.setEnableLogging(boolean0);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-948), atomikosProperties0.getMaxActives());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      
      long long2 = (-1217L);
      atomikosProperties0.setCheckpointInterval(long2);
      assertEquals((-1217L), atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-948), atomikosProperties0.getMaxActives());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      
      atomikosProperties0.setCheckpointInterval(int0);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertEquals((-948L), atomikosProperties0.getCheckpointInterval());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-948), atomikosProperties0.getMaxActives());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      
      boolean boolean1 = atomikosProperties0.isThreadedTwoPhaseCommit();
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertEquals((-948L), atomikosProperties0.getCheckpointInterval());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-948), atomikosProperties0.getMaxActives());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = "H#C0+{,QmI/59_Ppb1";
      atomikosProperties0.setService(string1);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertEquals((-948L), atomikosProperties0.getCheckpointInterval());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-948), atomikosProperties0.getMaxActives());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertEquals("H#C0+{,QmI/59_Ppb1", atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      
      long long3 = atomikosProperties0.getCheckpointInterval();
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertEquals((-948L), atomikosProperties0.getCheckpointInterval());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-948), atomikosProperties0.getMaxActives());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertEquals("H#C0+{,QmI/59_Ppb1", atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(long3 == long1);
      assertFalse(long3 == long0);
      assertFalse(long3 == long2);
      assertEquals((-948L), long3);
      
      boolean boolean2 = true;
      atomikosProperties0.setEnableLogging(boolean2);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals((-948L), atomikosProperties0.getCheckpointInterval());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-948), atomikosProperties0.getMaxActives());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertEquals("H#C0+{,QmI/59_Ppb1", atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNotNull(atomikosProperties0);
      
      boolean boolean0 = true;
      String string0 = "";
      atomikosProperties0.setLogBaseName(string0);
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      
      atomikosProperties0.setForceShutdownOnVmExit(boolean0);
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      
      String string1 = "";
      atomikosProperties0.setService(string1);
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("", atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertSame(string1, string0);
      
      String string2 = atomikosProperties0.getService();
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("", atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNotNull(string2);
      assertSame(string2, string0);
      assertSame(string2, string1);
      assertEquals("", string2);
      
      boolean boolean1 = atomikosProperties0.isForceShutdownOnVmExit();
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("", atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      atomikosProperties0.setService(string1);
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("", atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertSame(string1, string0);
      assertSame(string1, string2);
      
      long long0 = 0L;
      atomikosProperties0.setMaxTimeout(long0);
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("", atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNotNull(atomikosProperties0);
      
      int int0 = 0;
      atomikosProperties0.setMaxActives(int0);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      
      boolean boolean0 = false;
      atomikosProperties0.setSerialJtaTransactions(boolean0);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      
      boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = "max_actives";
      atomikosProperties0.setTransactionManagerUniqueName(string0);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals("max_actives", atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      
      Properties properties0 = atomikosProperties0.asProperties();
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals("max_actives", atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10, properties0.size());
      assertFalse(properties0.isEmpty());
      assertNotNull(properties0);
      
      int int1 = atomikosProperties0.getMaxActives();
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals("max_actives", atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNotNull(atomikosProperties0);
      
      String string0 = "org.springframework.boot.jta.atomikos.AtomikosProperties";
      long long0 = (-2332L);
      atomikosProperties0.setMaxTimeout(long0);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals((-2332L), atomikosProperties0.getMaxTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      
      atomikosProperties0.setMaxTimeout(long0);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals((-2332L), atomikosProperties0.getMaxTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      
      atomikosProperties0.setLogBaseName(string0);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getService());
      assertEquals("org.springframework.boot.jta.atomikos.AtomikosProperties", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals((-2332L), atomikosProperties0.getMaxTimeout());
      
      String string1 = atomikosProperties0.getTransactionManagerUniqueName();
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getService());
      assertEquals("org.springframework.boot.jta.atomikos.AtomikosProperties", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals((-2332L), atomikosProperties0.getMaxTimeout());
      assertNull(string1);
      
      Properties properties0 = atomikosProperties0.asProperties();
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getService());
      assertEquals("org.springframework.boot.jta.atomikos.AtomikosProperties", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals((-2332L), atomikosProperties0.getMaxTimeout());
      assertEquals(9, properties0.size());
      assertFalse(properties0.isEmpty());
      assertNotNull(properties0);
      
      boolean boolean0 = atomikosProperties0.isThreadedTwoPhaseCommit();
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getService());
      assertEquals("org.springframework.boot.jta.atomikos.AtomikosProperties", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals((-2332L), atomikosProperties0.getMaxTimeout());
      assertFalse(boolean0);
      
      boolean boolean1 = false;
      atomikosProperties0.setThreadedTwoPhaseCommit(boolean1);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getService());
      assertEquals("org.springframework.boot.jta.atomikos.AtomikosProperties", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals((-2332L), atomikosProperties0.getMaxTimeout());
      assertTrue(boolean1 == boolean0);
      
      long long1 = atomikosProperties0.getMaxTimeout();
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getService());
      assertEquals("org.springframework.boot.jta.atomikos.AtomikosProperties", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals((-2332L), atomikosProperties0.getMaxTimeout());
      assertTrue(long1 == long0);
      assertEquals((-2332L), long1);
      
      boolean boolean2 = atomikosProperties0.isThreadedTwoPhaseCommit();
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getService());
      assertEquals("org.springframework.boot.jta.atomikos.AtomikosProperties", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals((-2332L), atomikosProperties0.getMaxTimeout());
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNotNull(atomikosProperties0);
      
      Properties properties0 = atomikosProperties0.asProperties();
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(9, properties0.size());
      assertFalse(properties0.isEmpty());
      assertNotNull(properties0);
      
      int int0 = 1;
      atomikosProperties0.setMaxActives(int0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(1, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      
      long long0 = (-2818L);
      atomikosProperties0.setCheckpointInterval(long0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals((-2818L), atomikosProperties0.getCheckpointInterval());
      assertEquals(1, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      
      atomikosProperties0.setDefaultJtaTimeout(long0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals((-2818L), atomikosProperties0.getCheckpointInterval());
      assertEquals(1, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-2818L), atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      
      boolean boolean0 = true;
      boolean boolean1 = true;
      atomikosProperties0.setEnableLogging(boolean1);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals((-2818L), atomikosProperties0.getCheckpointInterval());
      assertEquals(1, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-2818L), atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      
      atomikosProperties0.setSerialJtaTransactions(boolean0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals((-2818L), atomikosProperties0.getCheckpointInterval());
      assertEquals(1, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-2818L), atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      
      String string0 = atomikosProperties0.getLogBaseName();
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals((-2818L), atomikosProperties0.getCheckpointInterval());
      assertEquals(1, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-2818L), atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNotNull(string0);
      assertEquals("tmlog", string0);
      
      String string1 = "C/%px2Z";
      atomikosProperties0.setLogBaseDir(string1);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals((-2818L), atomikosProperties0.getCheckpointInterval());
      assertEquals(1, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-2818L), atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals("C/%px2Z", atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      
      Properties properties1 = atomikosProperties0.asProperties();
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals((-2818L), atomikosProperties0.getCheckpointInterval());
      assertEquals(1, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-2818L), atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals("C/%px2Z", atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(properties1.isEmpty());
      assertEquals(10, properties1.size());
      assertNotNull(properties1);
      assertNotSame(properties1, properties0);
      assertFalse(properties1.equals((Object)properties0));
      
      boolean boolean2 = atomikosProperties0.isThreadedTwoPhaseCommit();
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals((-2818L), atomikosProperties0.getCheckpointInterval());
      assertEquals(1, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-2818L), atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals("C/%px2Z", atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string2 = atomikosProperties0.getLogBaseDir();
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals((-2818L), atomikosProperties0.getCheckpointInterval());
      assertEquals(1, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-2818L), atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals("C/%px2Z", atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNotNull(string2);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string2.equals((Object)string0));
      assertEquals("C/%px2Z", string2);
      
      Properties properties2 = atomikosProperties0.asProperties();
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals((-2818L), atomikosProperties0.getCheckpointInterval());
      assertEquals(1, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-2818L), atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals("C/%px2Z", atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(10, properties2.size());
      assertFalse(properties2.isEmpty());
      assertNotNull(properties2);
      assertNotSame(properties2, properties0);
      assertNotSame(properties2, properties1);
      assertFalse(properties2.equals((Object)properties0));
      assertFalse(properties2.equals((Object)properties1));
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNotNull(atomikosProperties0);
      
      String string0 = "ZEU[wRzt1:egHk";
      atomikosProperties0.setService(string0);
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("ZEU[wRzt1:egHk", atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      
      String string1 = "force_shutdown_on_vm_exit";
      atomikosProperties0.setTransactionManagerUniqueName(string1);
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("ZEU[wRzt1:egHk", atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("force_shutdown_on_vm_exit", atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = 2761;
      atomikosProperties0.setMaxActives(int0);
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("ZEU[wRzt1:egHk", atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(2761, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("force_shutdown_on_vm_exit", atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isEnableLogging());
      
      long long0 = atomikosProperties0.getDefaultJtaTimeout();
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("ZEU[wRzt1:egHk", atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(2761, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("force_shutdown_on_vm_exit", atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(10000L, long0);
      
      String string2 = atomikosProperties0.getService();
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("ZEU[wRzt1:egHk", atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(2761, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("force_shutdown_on_vm_exit", atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNotNull(string2);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      assertFalse(string2.equals((Object)string1));
      assertEquals("ZEU[wRzt1:egHk", string2);
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNotNull(atomikosProperties0);
      
      long long0 = 0L;
      boolean boolean0 = true;
      String string0 = "";
      atomikosProperties0.setTransactionManagerUniqueName(string0);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      
      atomikosProperties0.setEnableLogging(boolean0);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      
      atomikosProperties0.setDefaultJtaTimeout(long0);
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      
      String string1 = atomikosProperties0.getTransactionManagerUniqueName();
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNotNull(string1);
      assertSame(string1, string0);
      assertEquals("", string1);
      
      atomikosProperties0.setLogBaseName(string1);
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertSame(string1, string0);
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertNotNull(atomikosProperties0);
      
      long long0 = (-585L);
      atomikosProperties0.setDefaultJtaTimeout(long0);
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals((-585L), atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      
      long long1 = atomikosProperties0.getDefaultJtaTimeout();
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals((-585L), atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertTrue(long1 == long0);
      assertEquals((-585L), long1);
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNotNull(atomikosProperties0);
      
      String string0 = null;
      atomikosProperties0.setLogBaseName(string0);
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      
      String string1 = "";
      atomikosProperties0.setLogBaseDir(string1);
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      
      boolean boolean0 = false;
      atomikosProperties0.setSerialJtaTransactions(boolean0);
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      
      long long0 = 0L;
      atomikosProperties0.setCheckpointInterval(long0);
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      
      long long1 = 331L;
      atomikosProperties0.setDefaultJtaTimeout(long1);
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(331L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(long1 == long0);
      
      int int0 = 2913;
      atomikosProperties0.setMaxActives(int0);
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(331L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(2913, atomikosProperties0.getMaxActives());
      
      atomikosProperties0.setDefaultJtaTimeout(long1);
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(331L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(2913, atomikosProperties0.getMaxActives());
      assertFalse(long1 == long0);
      
      String string2 = "5w6XvZ,@NY &[?";
      atomikosProperties0.setService(string2);
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getLogBaseName());
      assertEquals("5w6XvZ,@NY &[?", atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(331L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(2913, atomikosProperties0.getMaxActives());
      assertNotSame(string2, string1);
      assertFalse(string2.equals((Object)string1));
      
      atomikosProperties0.setLogBaseDir(string1);
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getLogBaseName());
      assertEquals("5w6XvZ,@NY &[?", atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(331L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(2913, atomikosProperties0.getMaxActives());
      assertNotSame(string1, string2);
      assertFalse(string1.equals((Object)string2));
      
      long long2 = atomikosProperties0.getMaxTimeout();
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getLogBaseName());
      assertEquals("5w6XvZ,@NY &[?", atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(331L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(2913, atomikosProperties0.getMaxActives());
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertEquals(300000L, long2);
      
      long long3 = atomikosProperties0.getCheckpointInterval();
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getLogBaseName());
      assertEquals("5w6XvZ,@NY &[?", atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(331L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(2913, atomikosProperties0.getMaxActives());
      assertFalse(long3 == long2);
      assertFalse(long3 == long1);
      assertTrue(long3 == long0);
      assertEquals(0L, long3);
  }
}
