import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test0001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0001");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        atomikosProperties0.setSerialJtaTransactions(true);
        java.lang.Class<?> wildcardClass5 = atomikosProperties0.getClass();
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0002");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Properties properties7 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet8 = properties7.keySet();
        boolean boolean9 = properties1.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) properties7);
        java.io.Writer writer10 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties7.store(writer10, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0003");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        java.lang.Object obj8 = properties3.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection9 = properties3.values();
        java.io.OutputStream outputStream10 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.save(outputStream10, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(objCollection9);
    }

    @Test
    public void test0004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0004");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        boolean boolean7 = properties3.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        java.util.Enumeration<java.lang.Object> objEnumeration13 = properties11.keys();
        java.lang.Object obj16 = properties11.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection17 = properties11.values();
        boolean boolean18 = properties3.containsKey((java.lang.Object) properties11);
        java.lang.String str21 = properties11.getProperty("", "tmlog");
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNotNull(objEnumeration13);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(objCollection17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "tmlog" + "'", str21, "tmlog");
    }

    @Test
    public void test0005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0005");
        java.util.Properties properties0 = new java.util.Properties();
        java.io.Reader reader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.load(reader1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0006");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Properties properties5 = new java.util.Properties(properties3);
        java.lang.Object obj7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj8 = properties5.replace((java.lang.Object) (byte) 100, obj7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
    }

    @Test
    public void test0007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0007");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        boolean boolean7 = properties3.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        java.util.Enumeration<java.lang.Object> objEnumeration13 = properties11.keys();
        java.lang.Object obj16 = properties11.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection17 = properties11.values();
        boolean boolean18 = properties3.containsKey((java.lang.Object) properties11);
        java.util.Properties properties19 = new java.util.Properties(properties3);
        java.util.Properties properties20 = new java.util.Properties(properties3);
        java.io.OutputStream outputStream21 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties20.store(outputStream21, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNotNull(objEnumeration13);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(objCollection17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0008");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        boolean boolean3 = atomikosProperties0.isEnableLogging();
        java.util.Properties properties4 = atomikosProperties0.asProperties();
        properties4.clear();
        java.util.Properties properties6 = null;
        java.util.Properties properties7 = new java.util.Properties(properties6);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties9 = atomikosProperties8.asProperties();
        properties7.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties9);
        java.util.Enumeration<java.lang.Object> objEnumeration11 = properties9.keys();
        java.lang.Object obj13 = properties4.put((java.lang.Object) properties9, (java.lang.Object) (byte) 0);
        java.io.OutputStream outputStream14 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties4.store(outputStream14, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(properties4);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertNotNull(objEnumeration11);
        org.junit.Assert.assertNull(obj13);
    }

    @Test
    public void test0009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0009");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        boolean boolean3 = atomikosProperties0.isEnableLogging();
        java.util.Properties properties4 = atomikosProperties0.asProperties();
        properties4.clear();
        java.util.Properties properties6 = null;
        java.util.Properties properties7 = new java.util.Properties(properties6);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties9 = atomikosProperties8.asProperties();
        properties7.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties9);
        java.util.Enumeration<java.lang.Object> objEnumeration11 = properties9.keys();
        java.lang.Object obj13 = properties4.put((java.lang.Object) properties9, (java.lang.Object) (byte) 0);
        java.io.OutputStream outputStream14 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties4.save(outputStream14, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(properties4);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertNotNull(objEnumeration11);
        org.junit.Assert.assertNull(obj13);
    }

    @Test
    public void test0010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0010");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        boolean boolean7 = properties3.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        java.util.Enumeration<java.lang.Object> objEnumeration13 = properties11.keys();
        java.lang.Object obj16 = properties11.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection17 = properties11.values();
        boolean boolean18 = properties3.containsKey((java.lang.Object) properties11);
        java.util.Properties properties19 = new java.util.Properties(properties3);
        java.util.Set<java.lang.Object> objSet20 = properties3.keySet();
        java.io.OutputStream outputStream21 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.storeToXML(outputStream21, "hi!", "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNotNull(objEnumeration13);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(objCollection17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(objSet20);
    }

    @Test
    public void test0011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0011");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        boolean boolean3 = atomikosProperties0.isEnableLogging();
        java.util.Properties properties4 = atomikosProperties0.asProperties();
        java.io.Reader reader5 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties4.load(reader5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(properties4);
    }

    @Test
    public void test0012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0012");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Properties properties7 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet8 = properties7.keySet();
        boolean boolean9 = properties1.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) properties7);
        java.io.InputStream inputStream10 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties7.load(inputStream10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0013");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties(properties1);
        java.io.OutputStream outputStream3 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.save(outputStream3, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0014");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        boolean boolean3 = atomikosProperties0.isEnableLogging();
        java.util.Properties properties4 = atomikosProperties0.asProperties();
        java.io.OutputStream outputStream5 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties4.save(outputStream5, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(properties4);
    }

    @Test
    public void test0015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0015");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        boolean boolean3 = atomikosProperties0.isEnableLogging();
        java.util.Properties properties4 = atomikosProperties0.asProperties();
        properties4.clear();
        java.util.Properties properties6 = null;
        java.util.Properties properties7 = new java.util.Properties(properties6);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties9 = atomikosProperties8.asProperties();
        properties7.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties9);
        java.util.Enumeration<java.lang.Object> objEnumeration11 = properties9.keys();
        java.lang.Object obj13 = properties4.put((java.lang.Object) properties9, (java.lang.Object) (byte) 0);
        java.io.Reader reader14 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties4.load(reader14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(properties4);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertNotNull(objEnumeration11);
        org.junit.Assert.assertNull(obj13);
    }

    @Test
    public void test0016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0016");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.defaultJtaTimeout;
        boolean boolean2 = atomikosProperties0.enableLogging;
        atomikosProperties0.setSerialJtaTransactions(true);
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        java.io.Reader reader6 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties5.load(reader6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 10000L + "'", long1 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(properties5);
    }

    @Test
    public void test0017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0017");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        boolean boolean7 = properties3.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        java.util.Enumeration<java.lang.Object> objEnumeration13 = properties11.keys();
        java.lang.Object obj16 = properties11.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection17 = properties11.values();
        boolean boolean18 = properties3.containsKey((java.lang.Object) properties11);
        java.util.Properties properties19 = new java.util.Properties(properties3);
        java.util.Properties properties20 = new java.util.Properties(properties3);
        java.util.Properties properties21 = null;
        java.util.Properties properties22 = new java.util.Properties(properties21);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties24 = atomikosProperties23.asProperties();
        properties22.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties24);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties26.setService("");
        atomikosProperties26.setThreadedTwoPhaseCommit(true);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties31.setService("");
        atomikosProperties31.setSerialJtaTransactions(true);
        atomikosProperties31.setEnableLogging(false);
        java.lang.String str38 = atomikosProperties31.logBaseName;
        java.lang.Object obj39 = properties24.replace((java.lang.Object) atomikosProperties26, (java.lang.Object) atomikosProperties31);
        java.util.Properties properties40 = atomikosProperties31.asProperties();
        boolean boolean41 = properties3.containsKey((java.lang.Object) properties40);
        java.io.OutputStream outputStream42 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties40.store(outputStream42, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNotNull(objEnumeration13);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(objCollection17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(properties24);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNotNull(properties40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test0018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0018");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        boolean boolean7 = properties3.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        java.util.Enumeration<java.lang.Object> objEnumeration13 = properties11.keys();
        java.lang.Object obj16 = properties11.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection17 = properties11.values();
        boolean boolean18 = properties3.containsKey((java.lang.Object) properties11);
        java.util.Properties properties19 = new java.util.Properties(properties3);
        java.util.Set<java.lang.Object> objSet20 = properties3.keySet();
        java.io.InputStream inputStream21 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.loadFromXML(inputStream21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNotNull(objEnumeration13);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(objCollection17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(objSet20);
    }

    @Test
    public void test0019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0019");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        long long2 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setCheckpointInterval(0L);
        atomikosProperties0.setForceShutdownOnVmExit(false);
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10000L + "'", long2 == 10000L);
    }

    @Test
    public void test0020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0020");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        boolean boolean7 = properties3.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        java.util.Enumeration<java.lang.Object> objEnumeration13 = properties11.keys();
        java.lang.Object obj16 = properties11.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection17 = properties11.values();
        boolean boolean18 = properties3.containsKey((java.lang.Object) properties11);
        java.util.Properties properties19 = new java.util.Properties(properties3);
        java.util.Properties properties20 = new java.util.Properties(properties3);
        java.io.PrintWriter printWriter21 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.list(printWriter21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNotNull(objEnumeration13);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(objCollection17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0021");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        boolean boolean3 = atomikosProperties0.isEnableLogging();
        java.util.Properties properties4 = atomikosProperties0.asProperties();
        java.util.Properties properties5 = null;
        java.util.Properties properties6 = new java.util.Properties(properties5);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties8 = atomikosProperties7.asProperties();
        properties6.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.setService("");
        atomikosProperties10.setThreadedTwoPhaseCommit(true);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties15.setService("");
        atomikosProperties15.setSerialJtaTransactions(true);
        atomikosProperties15.setEnableLogging(false);
        java.lang.String str22 = atomikosProperties15.logBaseName;
        java.lang.Object obj23 = properties8.replace((java.lang.Object) atomikosProperties10, (java.lang.Object) atomikosProperties15);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long25 = atomikosProperties24.defaultJtaTimeout;
        boolean boolean26 = atomikosProperties24.enableLogging;
        atomikosProperties24.setSerialJtaTransactions(true);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj29 = properties4.putIfAbsent(obj23, (java.lang.Object) true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(properties4);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "tmlog" + "'", str22, "tmlog");
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 10000L + "'", long25 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test0022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0022");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        java.lang.Object obj8 = properties3.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.io.PrintStream printStream9 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.list(printStream9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(obj8);
    }

    @Test
    public void test0023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0023");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        java.lang.Object obj8 = properties3.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.io.Writer writer9 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.store(writer9, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(obj8);
    }

    @Test
    public void test0024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0024");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties5.setService("");
        atomikosProperties5.setThreadedTwoPhaseCommit(true);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.setService("");
        atomikosProperties10.setSerialJtaTransactions(true);
        atomikosProperties10.setEnableLogging(false);
        java.lang.String str17 = atomikosProperties10.logBaseName;
        java.lang.Object obj18 = properties3.replace((java.lang.Object) atomikosProperties5, (java.lang.Object) atomikosProperties10);
        java.util.Properties properties19 = atomikosProperties10.asProperties();
        java.io.PrintStream printStream20 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties19.list(printStream20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(properties19);
    }

    @Test
    public void test0025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0025");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        boolean boolean3 = atomikosProperties0.isEnableLogging();
        java.util.Properties properties4 = atomikosProperties0.asProperties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        java.io.Writer writer6 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties4.store(writer6, "tmlog");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(properties4);
    }

    @Test
    public void test0026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0026");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.io.PrintWriter printWriter3 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties2.list(printWriter3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNotNull(properties2);
    }

    @Test
    public void test0027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0027");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        boolean boolean7 = properties3.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        java.util.Properties properties15 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet16 = properties15.keySet();
        boolean boolean17 = properties9.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) properties15);
        java.util.Enumeration<java.lang.Object> objEnumeration18 = properties9.elements();
        boolean boolean20 = properties3.remove((java.lang.Object) properties9, (java.lang.Object) 50);
        properties3.clear();
        java.lang.String str24 = properties3.getProperty("{}", "tmlog");
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNotNull(objSet16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objEnumeration18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "tmlog" + "'", str24, "tmlog");
    }

    @Test
    public void test0028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0028");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        boolean boolean7 = properties3.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        java.util.Enumeration<java.lang.Object> objEnumeration13 = properties11.keys();
        java.lang.Object obj16 = properties11.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection17 = properties11.values();
        boolean boolean18 = properties3.containsKey((java.lang.Object) properties11);
        java.util.Properties properties19 = new java.util.Properties(properties3);
        java.util.Properties properties20 = new java.util.Properties(properties3);
        java.util.Properties properties21 = null;
        java.util.Properties properties22 = new java.util.Properties(properties21);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties24 = atomikosProperties23.asProperties();
        properties22.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties24);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties26.setService("");
        atomikosProperties26.setThreadedTwoPhaseCommit(true);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties31.setService("");
        atomikosProperties31.setSerialJtaTransactions(true);
        atomikosProperties31.setEnableLogging(false);
        java.lang.String str38 = atomikosProperties31.logBaseName;
        java.lang.Object obj39 = properties24.replace((java.lang.Object) atomikosProperties26, (java.lang.Object) atomikosProperties31);
        java.util.Properties properties40 = atomikosProperties31.asProperties();
        boolean boolean41 = properties3.containsKey((java.lang.Object) properties40);
        java.io.OutputStream outputStream42 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.storeToXML(outputStream42, "{}", "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNotNull(objEnumeration13);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(objCollection17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(properties24);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNotNull(properties40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test0029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0029");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.io.OutputStream outputStream3 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties2.store(outputStream3, "tmlog");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNotNull(properties2);
    }

    @Test
    public void test0030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0030");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Properties properties5 = new java.util.Properties(properties3);
        java.io.Reader reader6 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.load(reader6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
    }

    @Test
    public void test0031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0031");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Properties properties5 = new java.util.Properties(properties3);
        java.io.PrintStream printStream6 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.list(printStream6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
    }

    @Test
    public void test0032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0032");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        java.lang.Object obj8 = properties3.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection9 = properties3.values();
        java.util.Set<java.lang.String> strSet10 = properties3.stringPropertyNames();
        java.util.Enumeration<java.lang.Object> objEnumeration11 = properties3.elements();
        java.io.Writer writer12 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.store(writer12, "{}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(objCollection9);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(objEnumeration11);
    }

    @Test
    public void test0033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0033");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        java.lang.Object obj8 = properties3.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection9 = properties3.values();
        java.util.Properties properties10 = new java.util.Properties();
        java.lang.Object obj13 = properties10.getOrDefault((java.lang.Object) (short) 1, (java.lang.Object) (-1.0d));
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        java.util.Properties properties15 = new java.util.Properties(properties3);
        java.io.OutputStream outputStream16 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.storeToXML(outputStream16, "{}", "tmlog");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(objCollection9);
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + (-1.0d) + "'", obj13, (-1.0d));
    }

    @Test
    public void test0034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0034");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        boolean boolean3 = atomikosProperties0.isEnableLogging();
        java.util.Properties properties4 = atomikosProperties0.asProperties();
        boolean boolean5 = atomikosProperties0.isThreadedTwoPhaseCommit();
        java.lang.Class<?> wildcardClass6 = atomikosProperties0.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(properties4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0035");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Properties properties5 = new java.util.Properties(properties3);
        java.util.Collection<java.lang.Object> objCollection6 = properties3.values();
        java.io.InputStream inputStream7 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.loadFromXML(inputStream7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objCollection6);
    }

    @Test
    public void test0036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0036");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        boolean boolean7 = properties3.containsValue((java.lang.Object) 0.0f);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long10 = atomikosProperties9.defaultJtaTimeout;
        boolean boolean11 = atomikosProperties9.enableLogging;
        atomikosProperties9.setSerialJtaTransactions(true);
        java.lang.Object obj14 = properties3.putIfAbsent((java.lang.Object) 100L, (java.lang.Object) true);
        java.util.Properties properties15 = new java.util.Properties(properties3);
        java.io.Reader reader16 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties15.load(reader16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(obj14);
    }

    @Test
    public void test0037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0037");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        boolean boolean7 = properties3.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        java.util.Enumeration<java.lang.Object> objEnumeration13 = properties11.keys();
        java.lang.Object obj16 = properties11.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection17 = properties11.values();
        boolean boolean18 = properties3.containsKey((java.lang.Object) properties11);
        java.util.Properties properties19 = new java.util.Properties(properties3);
        java.io.PrintWriter printWriter20 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.list(printWriter20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNotNull(objEnumeration13);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(objCollection17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0038");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Properties properties5 = new java.util.Properties(properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties7 = atomikosProperties6.asProperties();
        java.util.Set<java.lang.String> strSet8 = properties7.stringPropertyNames();
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties7);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        long long12 = atomikosProperties10.getDefaultJtaTimeout();
        long long13 = atomikosProperties10.getDefaultJtaTimeout();
        boolean boolean14 = atomikosProperties10.serialJtaTransactions;
        boolean boolean15 = atomikosProperties10.isSerialJtaTransactions();
        java.lang.String str16 = atomikosProperties10.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties17.setService("");
        atomikosProperties17.setThreadedTwoPhaseCommit(true);
        long long22 = atomikosProperties17.getCheckpointInterval();
        atomikosProperties17.maxTimeout = (-1);
        java.util.Properties properties25 = atomikosProperties17.asProperties();
        java.util.Enumeration<?> wildcardEnumeration26 = properties25.propertyNames();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj27 = properties5.putIfAbsent((java.lang.Object) str16, (java.lang.Object) wildcardEnumeration26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10000L + "'", long12 == 10000L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10000L + "'", long13 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 500L + "'", long22 == 500L);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertNotNull(wildcardEnumeration26);
    }

    @Test
    public void test0039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0039");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Properties properties5 = new java.util.Properties(properties3);
        java.util.Properties properties6 = new java.util.Properties(properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties8 = atomikosProperties7.asProperties();
        java.util.Properties properties9 = atomikosProperties7.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.setService("");
        boolean boolean13 = atomikosProperties10.isEnableLogging();
        java.util.Properties properties14 = atomikosProperties10.asProperties();
        java.lang.Object obj15 = properties3.getOrDefault((java.lang.Object) properties9, (java.lang.Object) atomikosProperties10);
        java.lang.String str18 = properties9.getProperty("hi!", "{}");
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "{}" + "'", str18, "{}");
    }

    @Test
    public void test0040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0040");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        java.lang.Object obj8 = properties3.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.io.OutputStream outputStream9 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.storeToXML(outputStream9, "{}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(obj8);
    }

    @Test
    public void test0041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0041");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        boolean boolean3 = atomikosProperties0.isEnableLogging();
        java.util.Properties properties4 = atomikosProperties0.asProperties();
        properties4.clear();
        java.util.Properties properties6 = null;
        java.util.Properties properties7 = new java.util.Properties(properties6);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties9 = atomikosProperties8.asProperties();
        properties7.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties9);
        java.util.Enumeration<java.lang.Object> objEnumeration11 = properties9.keys();
        java.lang.Object obj13 = properties4.put((java.lang.Object) properties9, (java.lang.Object) (byte) 0);
        boolean boolean14 = properties9.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean16 = atomikosProperties15.forceShutdownOnVmExit;
        atomikosProperties15.setSerialJtaTransactions(true);
        boolean boolean19 = properties9.containsKey((java.lang.Object) atomikosProperties15);
        java.util.Properties properties20 = new java.util.Properties(properties9);
        java.io.PrintWriter printWriter21 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties20.list(printWriter21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(properties4);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertNotNull(objEnumeration11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0042");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        java.lang.String str5 = properties1.getProperty("{}", "hi!");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
    }

    @Test
    public void test0043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0043");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties3 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean4 = atomikosProperties3.enableLogging;
        atomikosProperties3.setMaxActives((int) (byte) 1);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties7.setService("");
        atomikosProperties7.setThreadedTwoPhaseCommit(true);
        long long12 = atomikosProperties7.getCheckpointInterval();
        atomikosProperties7.maxTimeout = (-1);
        java.util.Properties properties15 = atomikosProperties7.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long17 = atomikosProperties16.defaultJtaTimeout;
        boolean boolean18 = atomikosProperties16.enableLogging;
        atomikosProperties16.setSerialJtaTransactions(true);
        java.util.Properties properties21 = atomikosProperties16.asProperties();
        properties15.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties21);
        java.util.Enumeration<java.lang.Object> objEnumeration23 = properties15.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean25 = atomikosProperties24.forceShutdownOnVmExit;
        atomikosProperties24.setSerialJtaTransactions(true);
        java.lang.String str28 = atomikosProperties24.logBaseName;
        boolean boolean29 = atomikosProperties24.forceShutdownOnVmExit;
        int int30 = atomikosProperties24.maxActives;
        java.lang.String str31 = atomikosProperties24.logBaseName;
        atomikosProperties24.setForceShutdownOnVmExit(true);
        java.util.Properties properties34 = atomikosProperties24.asProperties();
        boolean boolean35 = atomikosProperties24.isForceShutdownOnVmExit();
        java.util.Properties properties36 = atomikosProperties24.asProperties();
        boolean boolean37 = properties1.replace((java.lang.Object) (byte) 1, (java.lang.Object) properties15, (java.lang.Object) atomikosProperties24);
        java.io.InputStream inputStream38 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.loadFromXML(inputStream38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 500L + "'", long12 == 500L);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10000L + "'", long17 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(properties21);
        org.junit.Assert.assertNotNull(objEnumeration23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "tmlog" + "'", str28, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 50 + "'", int30 == 50);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "tmlog" + "'", str31, "tmlog");
        org.junit.Assert.assertNotNull(properties34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(properties36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test0044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0044");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Properties properties5 = new java.util.Properties(properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties7 = atomikosProperties6.asProperties();
        java.util.Set<java.lang.String> strSet8 = properties7.stringPropertyNames();
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties7);
        java.io.Writer writer10 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties5.store(writer10, "tmlog");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNotNull(strSet8);
    }

    @Test
    public void test0045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0045");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        java.lang.Object obj8 = properties3.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Properties properties9 = new java.util.Properties(properties3);
        java.io.OutputStream outputStream10 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.save(outputStream10, "tmlog");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(obj8);
    }

    @Test
    public void test0046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0046");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Collection<java.lang.Object> objCollection5 = properties1.values();
        java.io.PrintWriter printWriter6 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.list(printWriter6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objCollection5);
    }

    @Test
    public void test0047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0047");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        boolean boolean3 = atomikosProperties0.isEnableLogging();
        java.util.Properties properties4 = atomikosProperties0.asProperties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        java.io.InputStream inputStream6 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties5.loadFromXML(inputStream6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(properties4);
    }

    @Test
    public void test0048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0048");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        long long5 = atomikosProperties0.getCheckpointInterval();
        atomikosProperties0.maxTimeout = (-1);
        java.util.Properties properties8 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long10 = atomikosProperties9.defaultJtaTimeout;
        boolean boolean11 = atomikosProperties9.enableLogging;
        atomikosProperties9.setSerialJtaTransactions(true);
        java.util.Properties properties14 = atomikosProperties9.asProperties();
        properties8.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties14);
        java.io.OutputStream outputStream16 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties8.storeToXML(outputStream16, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 500L + "'", long5 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(properties14);
    }

    @Test
    public void test0049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0049");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        long long5 = atomikosProperties0.getCheckpointInterval();
        atomikosProperties0.maxTimeout = (-1);
        java.lang.Class<?> wildcardClass8 = atomikosProperties0.getClass();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 500L + "'", long5 == 500L);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0050");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Properties properties5 = new java.util.Properties(properties3);
        java.util.Properties properties6 = new java.util.Properties(properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties8 = atomikosProperties7.asProperties();
        java.util.Properties properties9 = atomikosProperties7.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.setService("");
        boolean boolean13 = atomikosProperties10.isEnableLogging();
        java.util.Properties properties14 = atomikosProperties10.asProperties();
        java.lang.Object obj15 = properties3.getOrDefault((java.lang.Object) properties9, (java.lang.Object) atomikosProperties10);
        java.util.Collection<java.lang.Object> objCollection16 = properties3.values();
        java.io.Writer writer17 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.store(writer17, "tmlog");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertNotNull(objCollection16);
    }

    @Test
    public void test0051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0051");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        boolean boolean7 = properties3.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        java.util.Enumeration<java.lang.Object> objEnumeration13 = properties11.keys();
        java.lang.Object obj16 = properties11.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection17 = properties11.values();
        boolean boolean18 = properties3.containsKey((java.lang.Object) properties11);
        java.util.Properties properties19 = new java.util.Properties(properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long21 = atomikosProperties20.defaultJtaTimeout;
        boolean boolean22 = atomikosProperties20.enableLogging;
        atomikosProperties20.setSerialJtaTransactions(true);
        java.util.Properties properties25 = atomikosProperties20.asProperties();
        java.util.Properties properties26 = atomikosProperties20.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean28 = atomikosProperties27.forceShutdownOnVmExit;
        atomikosProperties27.setSerialJtaTransactions(true);
        java.lang.String str31 = atomikosProperties27.logBaseName;
        boolean boolean32 = atomikosProperties27.forceShutdownOnVmExit;
        int int33 = atomikosProperties27.maxActives;
        java.lang.String str34 = atomikosProperties27.logBaseName;
        atomikosProperties27.setForceShutdownOnVmExit(true);
        java.util.Properties properties37 = atomikosProperties27.asProperties();
        boolean boolean38 = atomikosProperties27.isForceShutdownOnVmExit();
        java.util.Properties properties39 = atomikosProperties27.asProperties();
        java.lang.Object obj40 = properties3.replace((java.lang.Object) atomikosProperties20, (java.lang.Object) atomikosProperties27);
        java.lang.Object obj41 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean42 = properties3.containsValue(obj41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNotNull(objEnumeration13);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(objCollection17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10000L + "'", long21 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertNotNull(properties26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "tmlog" + "'", str31, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 50 + "'", int33 == 50);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "tmlog" + "'", str34, "tmlog");
        org.junit.Assert.assertNotNull(properties37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(properties39);
        org.junit.Assert.assertNull(obj40);
    }

    @Test
    public void test0052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0052");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        boolean boolean3 = atomikosProperties0.isEnableLogging();
        java.util.Properties properties4 = atomikosProperties0.asProperties();
        properties4.clear();
        java.util.Properties properties6 = null;
        java.util.Properties properties7 = new java.util.Properties(properties6);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties9 = atomikosProperties8.asProperties();
        properties7.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties9);
        java.util.Enumeration<java.lang.Object> objEnumeration11 = properties9.keys();
        java.lang.Object obj13 = properties4.put((java.lang.Object) properties9, (java.lang.Object) (byte) 0);
        boolean boolean14 = properties9.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean16 = atomikosProperties15.forceShutdownOnVmExit;
        atomikosProperties15.setSerialJtaTransactions(true);
        boolean boolean19 = properties9.containsKey((java.lang.Object) atomikosProperties15);
        java.util.Properties properties20 = new java.util.Properties(properties9);
        java.io.Reader reader21 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties20.load(reader21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(properties4);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertNotNull(objEnumeration11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0053");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        long long5 = atomikosProperties0.getCheckpointInterval();
        atomikosProperties0.maxTimeout = (-1);
        java.util.Properties properties8 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long10 = atomikosProperties9.defaultJtaTimeout;
        boolean boolean11 = atomikosProperties9.enableLogging;
        atomikosProperties9.setSerialJtaTransactions(true);
        java.util.Properties properties14 = atomikosProperties9.asProperties();
        properties8.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties14);
        java.util.Enumeration<java.lang.Object> objEnumeration16 = properties8.elements();
        java.io.PrintStream printStream17 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties8.list(printStream17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 500L + "'", long5 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertNotNull(objEnumeration16);
    }

    @Test
    public void test0054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0054");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        boolean boolean7 = properties3.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        java.util.Enumeration<java.lang.Object> objEnumeration13 = properties11.keys();
        java.lang.Object obj16 = properties11.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection17 = properties11.values();
        boolean boolean18 = properties3.containsKey((java.lang.Object) properties11);
        java.lang.String str21 = properties3.getProperty("{}", "hi!");
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNotNull(objEnumeration13);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(objCollection17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
    }

    @Test
    public void test0055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0055");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        boolean boolean7 = properties3.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties8 = new java.util.Properties(properties3);
        java.lang.Object obj9 = properties8.clone();
        java.io.InputStream inputStream10 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties8.load(inputStream10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "{}");
    }

    @Test
    public void test0056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0056");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        boolean boolean7 = properties3.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        java.util.Enumeration<java.lang.Object> objEnumeration13 = properties11.keys();
        java.lang.Object obj16 = properties11.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection17 = properties11.values();
        boolean boolean18 = properties3.containsKey((java.lang.Object) properties11);
        java.util.Properties properties19 = new java.util.Properties(properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long21 = atomikosProperties20.defaultJtaTimeout;
        boolean boolean22 = atomikosProperties20.enableLogging;
        atomikosProperties20.setSerialJtaTransactions(true);
        java.util.Properties properties25 = atomikosProperties20.asProperties();
        java.util.Properties properties26 = atomikosProperties20.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean28 = atomikosProperties27.forceShutdownOnVmExit;
        atomikosProperties27.setSerialJtaTransactions(true);
        java.lang.String str31 = atomikosProperties27.logBaseName;
        boolean boolean32 = atomikosProperties27.forceShutdownOnVmExit;
        int int33 = atomikosProperties27.maxActives;
        java.lang.String str34 = atomikosProperties27.logBaseName;
        atomikosProperties27.setForceShutdownOnVmExit(true);
        java.util.Properties properties37 = atomikosProperties27.asProperties();
        boolean boolean38 = atomikosProperties27.isForceShutdownOnVmExit();
        java.util.Properties properties39 = atomikosProperties27.asProperties();
        java.lang.Object obj40 = properties3.replace((java.lang.Object) atomikosProperties20, (java.lang.Object) atomikosProperties27);
        java.io.PrintStream printStream41 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.list(printStream41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNotNull(objEnumeration13);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(objCollection17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10000L + "'", long21 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertNotNull(properties26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "tmlog" + "'", str31, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 50 + "'", int33 == 50);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "tmlog" + "'", str34, "tmlog");
        org.junit.Assert.assertNotNull(properties37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(properties39);
        org.junit.Assert.assertNull(obj40);
    }

    @Test
    public void test0057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0057");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        java.lang.Object obj8 = properties3.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection9 = properties3.values();
        java.util.Properties properties10 = new java.util.Properties();
        java.lang.Object obj13 = properties10.getOrDefault((java.lang.Object) (short) 1, (java.lang.Object) (-1.0d));
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        java.io.InputStream inputStream15 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.loadFromXML(inputStream15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(objCollection9);
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + (-1.0d) + "'", obj13, (-1.0d));
    }

    @Test
    public void test0058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0058");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        java.lang.Object obj8 = properties3.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection9 = properties3.values();
        java.util.Set<java.lang.String> strSet10 = properties3.stringPropertyNames();
        java.util.Enumeration<java.lang.Object> objEnumeration11 = properties3.elements();
        java.util.Properties properties12 = new java.util.Properties(properties3);
        java.io.OutputStream outputStream13 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.save(outputStream13, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(objCollection9);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(objEnumeration11);
    }

    @Test
    public void test0059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0059");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        java.lang.Object obj8 = properties3.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection9 = properties3.values();
        java.util.Properties properties10 = new java.util.Properties();
        java.lang.Object obj13 = properties10.getOrDefault((java.lang.Object) (short) 1, (java.lang.Object) (-1.0d));
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        java.util.Properties properties15 = null;
        java.util.Properties properties16 = new java.util.Properties(properties15);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties18 = atomikosProperties17.asProperties();
        properties16.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties18);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties20.setService("");
        atomikosProperties20.setThreadedTwoPhaseCommit(true);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties25.setService("");
        atomikosProperties25.setSerialJtaTransactions(true);
        atomikosProperties25.setEnableLogging(false);
        java.lang.String str32 = atomikosProperties25.logBaseName;
        java.lang.Object obj33 = properties18.replace((java.lang.Object) atomikosProperties20, (java.lang.Object) atomikosProperties25);
        boolean boolean34 = properties3.contains((java.lang.Object) properties18);
        java.lang.String str35 = properties18.toString();
        java.io.InputStream inputStream36 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties18.load(inputStream36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(objCollection9);
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + (-1.0d) + "'", obj13, (-1.0d));
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "tmlog" + "'", str32, "tmlog");
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str35, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
    }

    @Test
    public void test0060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0060");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.setSerialJtaTransactions(true);
        java.lang.String str4 = atomikosProperties0.logBaseName;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties6 = atomikosProperties5.asProperties();
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties9.setService("");
        atomikosProperties9.setThreadedTwoPhaseCommit(true);
        long long14 = atomikosProperties9.getCheckpointInterval();
        boolean boolean15 = atomikosProperties9.threadedTwoPhaseCommit;
        atomikosProperties0.set(properties7, "tmlog", (java.lang.Object) atomikosProperties9);
        java.io.OutputStream outputStream17 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties7.save(outputStream17, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tmlog" + "'", str4, "tmlog");
        org.junit.Assert.assertNotNull(properties6);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 500L + "'", long14 == 500L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test0061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0061");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Properties properties5 = new java.util.Properties(properties3);
        java.util.Properties properties6 = new java.util.Properties(properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties8 = atomikosProperties7.asProperties();
        java.util.Properties properties9 = atomikosProperties7.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.setService("");
        boolean boolean13 = atomikosProperties10.isEnableLogging();
        java.util.Properties properties14 = atomikosProperties10.asProperties();
        java.lang.Object obj15 = properties3.getOrDefault((java.lang.Object) properties9, (java.lang.Object) atomikosProperties10);
        java.util.Collection<java.lang.Object> objCollection16 = properties3.values();
        java.io.Writer writer17 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.store(writer17, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertNotNull(objCollection16);
    }

    @Test
    public void test0062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0062");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        java.lang.Object obj8 = properties3.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection9 = properties3.values();
        java.util.Set<java.lang.String> strSet10 = properties3.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties11.setService("");
        atomikosProperties11.setSerialJtaTransactions(true);
        java.util.Properties properties16 = atomikosProperties11.asProperties();
        properties16.clear();
        java.util.Properties properties19 = null;
        java.util.Properties properties20 = new java.util.Properties(properties19);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties22 = atomikosProperties21.asProperties();
        properties20.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties22);
        java.util.Enumeration<java.lang.Object> objEnumeration24 = properties22.keys();
        boolean boolean26 = properties22.containsValue((java.lang.Object) 0.0f);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long29 = atomikosProperties28.defaultJtaTimeout;
        boolean boolean30 = atomikosProperties28.enableLogging;
        atomikosProperties28.setSerialJtaTransactions(true);
        java.lang.Object obj33 = properties22.putIfAbsent((java.lang.Object) 100L, (java.lang.Object) true);
        boolean boolean34 = properties16.remove((java.lang.Object) 1.0f, (java.lang.Object) 100L);
        java.util.Properties properties35 = null;
        java.util.Properties properties36 = new java.util.Properties(properties35);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties38 = atomikosProperties37.asProperties();
        properties36.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties38);
        java.util.Enumeration<java.lang.Object> objEnumeration40 = properties38.keys();
        java.lang.Object obj43 = properties38.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Properties properties44 = new java.util.Properties(properties38);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties46 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties46.setService("");
        atomikosProperties46.setSerialJtaTransactions(true);
        java.util.Properties properties51 = atomikosProperties46.asProperties();
        properties51.clear();
        boolean boolean53 = properties16.replace((java.lang.Object) properties38, (java.lang.Object) 0.0d, (java.lang.Object) properties51);
        java.util.Properties properties54 = null;
        java.util.Properties properties55 = new java.util.Properties(properties54);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties56 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties57 = atomikosProperties56.asProperties();
        properties55.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties57);
        java.util.Collection<java.lang.Object> objCollection59 = properties55.values();
        java.lang.Object obj60 = properties3.replace((java.lang.Object) 0.0d, (java.lang.Object) properties55);
        java.io.PrintStream printStream61 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.list(printStream61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(objCollection9);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertNotNull(properties22);
        org.junit.Assert.assertNotNull(objEnumeration24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 10000L + "'", long29 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(properties38);
        org.junit.Assert.assertNotNull(objEnumeration40);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNotNull(properties51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(properties57);
        org.junit.Assert.assertNotNull(objCollection59);
        org.junit.Assert.assertNull(obj60);
    }

    @Test
    public void test0063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0063");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        java.lang.Object obj8 = properties3.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection9 = properties3.values();
        java.util.Properties properties10 = new java.util.Properties();
        java.lang.Object obj13 = properties10.getOrDefault((java.lang.Object) (short) 1, (java.lang.Object) (-1.0d));
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        java.util.Properties properties15 = new java.util.Properties(properties3);
        java.lang.Object obj16 = properties15.clone();
        java.lang.String str19 = properties15.getProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(objCollection9);
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + (-1.0d) + "'", obj13, (-1.0d));
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "{}");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str19, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
    }

    @Test
    public void test0064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0064");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        boolean boolean7 = properties3.containsValue((java.lang.Object) 0.0f);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties8.defaultJtaTimeout = (byte) -1;
        int int11 = atomikosProperties8.maxActives;
        java.util.Properties properties12 = null;
        java.util.Properties properties13 = new java.util.Properties(properties12);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj14 = properties3.putIfAbsent((java.lang.Object) atomikosProperties8, (java.lang.Object) properties12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 50 + "'", int11 == 50);
    }

    @Test
    public void test0065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0065");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        boolean boolean7 = properties3.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties8 = new java.util.Properties(properties3);
        java.lang.Object obj9 = properties8.clone();
        java.io.OutputStream outputStream10 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties8.store(outputStream10, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "{}");
    }

    @Test
    public void test0066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0066");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        java.lang.Object obj8 = properties3.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Properties properties9 = new java.util.Properties(properties3);
        java.io.Writer writer10 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.store(writer10, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(obj8);
    }

    @Test
    public void test0067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0067");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        long long2 = atomikosProperties0.getDefaultJtaTimeout();
        long long3 = atomikosProperties0.getDefaultJtaTimeout();
        boolean boolean4 = atomikosProperties0.serialJtaTransactions;
        boolean boolean5 = atomikosProperties0.isForceShutdownOnVmExit();
        boolean boolean6 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.checkpointInterval = (byte) 10;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10000L + "'", long2 == 10000L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 10000L + "'", long3 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test0068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0068");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        atomikosProperties0.setSerialJtaTransactions(true);
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        properties5.clear();
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        java.util.Enumeration<java.lang.Object> objEnumeration13 = properties11.keys();
        boolean boolean15 = properties11.containsValue((java.lang.Object) 0.0f);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long18 = atomikosProperties17.defaultJtaTimeout;
        boolean boolean19 = atomikosProperties17.enableLogging;
        atomikosProperties17.setSerialJtaTransactions(true);
        java.lang.Object obj22 = properties11.putIfAbsent((java.lang.Object) 100L, (java.lang.Object) true);
        boolean boolean23 = properties5.remove((java.lang.Object) 1.0f, (java.lang.Object) 100L);
        java.util.Properties properties24 = null;
        java.util.Properties properties25 = new java.util.Properties(properties24);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties27 = atomikosProperties26.asProperties();
        properties25.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties27);
        java.util.Enumeration<java.lang.Object> objEnumeration29 = properties27.keys();
        java.lang.Object obj32 = properties27.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Properties properties33 = new java.util.Properties(properties27);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties35.setService("");
        atomikosProperties35.setSerialJtaTransactions(true);
        java.util.Properties properties40 = atomikosProperties35.asProperties();
        properties40.clear();
        boolean boolean42 = properties5.replace((java.lang.Object) properties27, (java.lang.Object) 0.0d, (java.lang.Object) properties40);
        java.util.Enumeration<java.lang.Object> objEnumeration43 = properties27.keys();
        java.io.OutputStream outputStream44 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties27.save(outputStream44, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNotNull(objEnumeration13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10000L + "'", long18 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(properties27);
        org.junit.Assert.assertNotNull(objEnumeration29);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNotNull(properties40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(objEnumeration43);
    }

    @Test
    public void test0069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0069");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        boolean boolean3 = atomikosProperties0.isEnableLogging();
        java.util.Properties properties4 = atomikosProperties0.asProperties();
        properties4.clear();
        java.util.Enumeration<java.lang.Object> objEnumeration6 = properties4.elements();
        java.io.PrintStream printStream7 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties4.list(printStream7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(properties4);
        org.junit.Assert.assertNotNull(objEnumeration6);
    }

    @Test
    public void test0070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0070");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties(properties1);
        java.lang.String str5 = properties2.getProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "{}");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{}" + "'", str5, "{}");
    }

    @Test
    public void test0071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0071");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Properties properties7 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet8 = properties7.keySet();
        boolean boolean9 = properties1.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) properties7);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet10 = properties1.entrySet();
        java.util.Properties properties11 = new java.util.Properties(properties1);
        java.io.OutputStream outputStream12 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties11.save(outputStream12, "tmlog");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(objEntrySet10);
    }

    @Test
    public void test0072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0072");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration6 = properties3.elements();
        java.util.Properties properties7 = null;
        java.util.Properties properties8 = new java.util.Properties(properties7);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties10 = atomikosProperties9.asProperties();
        properties8.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        java.util.Properties properties12 = new java.util.Properties(properties10);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties13.defaultJtaTimeout = (byte) -1;
        java.util.Properties properties16 = atomikosProperties13.asProperties();
        boolean boolean17 = properties10.contains((java.lang.Object) properties16);
        java.util.Properties properties18 = null;
        java.util.Properties properties19 = new java.util.Properties(properties18);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties21 = atomikosProperties20.asProperties();
        properties19.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties21);
        java.util.Enumeration<java.lang.Object> objEnumeration23 = properties21.keys();
        boolean boolean25 = properties21.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties26 = null;
        java.util.Properties properties27 = new java.util.Properties(properties26);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties29 = atomikosProperties28.asProperties();
        properties27.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties29);
        java.util.Enumeration<java.lang.Object> objEnumeration31 = properties29.keys();
        java.lang.Object obj34 = properties29.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection35 = properties29.values();
        boolean boolean36 = properties21.containsKey((java.lang.Object) properties29);
        java.util.Properties properties37 = new java.util.Properties(properties21);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long39 = atomikosProperties38.defaultJtaTimeout;
        boolean boolean40 = atomikosProperties38.enableLogging;
        atomikosProperties38.setSerialJtaTransactions(true);
        java.util.Properties properties43 = atomikosProperties38.asProperties();
        java.util.Properties properties44 = atomikosProperties38.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties45 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean46 = atomikosProperties45.forceShutdownOnVmExit;
        atomikosProperties45.setSerialJtaTransactions(true);
        java.lang.String str49 = atomikosProperties45.logBaseName;
        boolean boolean50 = atomikosProperties45.forceShutdownOnVmExit;
        int int51 = atomikosProperties45.maxActives;
        java.lang.String str52 = atomikosProperties45.logBaseName;
        atomikosProperties45.setForceShutdownOnVmExit(true);
        java.util.Properties properties55 = atomikosProperties45.asProperties();
        boolean boolean56 = atomikosProperties45.isForceShutdownOnVmExit();
        java.util.Properties properties57 = atomikosProperties45.asProperties();
        java.lang.Object obj58 = properties21.replace((java.lang.Object) atomikosProperties38, (java.lang.Object) atomikosProperties45);
        java.lang.Object obj59 = properties3.putIfAbsent((java.lang.Object) properties16, (java.lang.Object) atomikosProperties45);
        java.util.Collection<java.lang.Object> objCollection60 = properties16.values();
        java.io.OutputStream outputStream61 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties16.storeToXML(outputStream61, "", "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNotNull(objEnumeration6);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(properties21);
        org.junit.Assert.assertNotNull(objEnumeration23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(properties29);
        org.junit.Assert.assertNotNull(objEnumeration31);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNotNull(objCollection35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 10000L + "'", long39 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(properties43);
        org.junit.Assert.assertNotNull(properties44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "tmlog" + "'", str49, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 50 + "'", int51 == 50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "tmlog" + "'", str52, "tmlog");
        org.junit.Assert.assertNotNull(properties55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(properties57);
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertNotNull(objCollection60);
    }

    @Test
    public void test0073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0073");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        atomikosProperties0.setSerialJtaTransactions(true);
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        java.lang.String str6 = atomikosProperties0.service;
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test0074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0074");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        boolean boolean7 = properties3.containsValue((java.lang.Object) 0.0f);
        java.lang.Object obj8 = null;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean10 = atomikosProperties9.enableLogging;
        atomikosProperties9.maxTimeout = 50;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj13 = properties3.put(obj8, (java.lang.Object) atomikosProperties9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test0075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0075");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.checkpointInterval = 300000L;
        java.util.Properties properties4 = null;
        java.util.Properties properties5 = new java.util.Properties(properties4);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties7 = atomikosProperties6.asProperties();
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties7);
        java.util.Enumeration<java.lang.Object> objEnumeration9 = properties7.keys();
        boolean boolean11 = properties7.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties12 = null;
        java.util.Properties properties13 = new java.util.Properties(properties12);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties15 = atomikosProperties14.asProperties();
        properties13.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties15);
        java.util.Properties properties19 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet20 = properties19.keySet();
        boolean boolean21 = properties13.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) properties19);
        java.util.Enumeration<java.lang.Object> objEnumeration22 = properties13.elements();
        boolean boolean24 = properties7.remove((java.lang.Object) properties13, (java.lang.Object) 50);
        java.util.Properties properties26 = null;
        java.util.Properties properties27 = new java.util.Properties(properties26);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties29 = atomikosProperties28.asProperties();
        properties27.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties29);
        java.util.Properties properties31 = new java.util.Properties(properties29);
        java.util.Collection<java.lang.Object> objCollection32 = properties29.values();
        atomikosProperties0.set(properties13, "{}", (java.lang.Object) objCollection32);
        java.lang.String str34 = atomikosProperties0.logBaseDir;
        boolean boolean35 = atomikosProperties0.enableLogging;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNotNull(objEnumeration9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertNotNull(objSet20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(objEnumeration22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(properties29);
        org.junit.Assert.assertNotNull(objCollection32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test0076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0076");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        boolean boolean7 = properties3.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        java.util.Enumeration<java.lang.Object> objEnumeration13 = properties11.keys();
        java.lang.Object obj16 = properties11.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection17 = properties11.values();
        boolean boolean18 = properties3.containsKey((java.lang.Object) properties11);
        java.util.Properties properties19 = new java.util.Properties(properties3);
        java.util.Properties properties20 = new java.util.Properties(properties3);
        java.lang.String str21 = properties20.toString();
        java.lang.Object obj24 = properties20.setProperty("tmlog", "");
        java.util.Properties properties25 = new java.util.Properties(properties20);
        java.util.Properties properties26 = new java.util.Properties(properties20);
        java.lang.Class<?> wildcardClass27 = properties26.getClass();
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNotNull(objEnumeration13);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(objCollection17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "{}" + "'", str21, "{}");
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0077");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        atomikosProperties0.setSerialJtaTransactions(true);
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        java.util.Properties properties6 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties8 = atomikosProperties7.asProperties();
        long long9 = atomikosProperties7.getDefaultJtaTimeout();
        atomikosProperties7.logBaseName = "tmlog";
        atomikosProperties7.setForceShutdownOnVmExit(false);
        java.lang.Object obj14 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj15 = properties6.replace((java.lang.Object) false, obj14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertNotNull(properties6);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10000L + "'", long9 == 10000L);
    }

    @Test
    public void test0078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0078");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        boolean boolean7 = properties3.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        java.util.Enumeration<java.lang.Object> objEnumeration13 = properties11.keys();
        java.lang.Object obj16 = properties11.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection17 = properties11.values();
        boolean boolean18 = properties3.containsKey((java.lang.Object) properties11);
        java.util.Properties properties19 = new java.util.Properties(properties3);
        java.util.Properties properties20 = new java.util.Properties(properties3);
        java.lang.String str21 = properties20.toString();
        java.io.InputStream inputStream22 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties20.load(inputStream22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNotNull(objEnumeration13);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(objCollection17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "{}" + "'", str21, "{}");
    }

    @Test
    public void test0079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0079");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        java.lang.Object obj8 = properties3.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection9 = properties3.values();
        java.util.Properties properties10 = new java.util.Properties();
        java.lang.Object obj13 = properties10.getOrDefault((java.lang.Object) (short) 1, (java.lang.Object) (-1.0d));
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        java.io.OutputStream outputStream15 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties10.storeToXML(outputStream15, "hi!", "tmlog");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(objCollection9);
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + (-1.0d) + "'", obj13, (-1.0d));
    }

    @Test
    public void test0080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0080");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Properties properties7 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet8 = properties7.keySet();
        boolean boolean9 = properties1.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) properties7);
        java.util.Collection<java.lang.Object> objCollection10 = properties7.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties11.defaultJtaTimeout = (byte) -1;
        atomikosProperties11.setSerialJtaTransactions(false);
        java.lang.String str16 = atomikosProperties11.getTransactionManagerUniqueName();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj18 = properties7.putIfAbsent((java.lang.Object) str16, (java.lang.Object) 100.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(objCollection10);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test0081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0081");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.defaultJtaTimeout;
        boolean boolean2 = atomikosProperties0.enableLogging;
        atomikosProperties0.setSerialJtaTransactions(true);
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        java.util.Properties properties6 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties9 = atomikosProperties8.asProperties();
        atomikosProperties8.checkpointInterval = 1L;
        boolean boolean12 = atomikosProperties8.forceShutdownOnVmExit;
        java.lang.Object obj13 = properties6.put((java.lang.Object) (short) 0, (java.lang.Object) atomikosProperties8);
        java.lang.Object obj14 = properties6.clone();
        java.io.PrintWriter printWriter15 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties6.list(printWriter15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 10000L + "'", long1 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertNotNull(properties6);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNotNull(obj14);
    }

    @Test
    public void test0082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0082");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        atomikosProperties0.setSerialJtaTransactions(true);
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        properties5.clear();
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        java.util.Enumeration<java.lang.Object> objEnumeration13 = properties11.keys();
        boolean boolean15 = properties11.containsValue((java.lang.Object) 0.0f);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long18 = atomikosProperties17.defaultJtaTimeout;
        boolean boolean19 = atomikosProperties17.enableLogging;
        atomikosProperties17.setSerialJtaTransactions(true);
        java.lang.Object obj22 = properties11.putIfAbsent((java.lang.Object) 100L, (java.lang.Object) true);
        boolean boolean23 = properties5.remove((java.lang.Object) 1.0f, (java.lang.Object) 100L);
        java.lang.Class<?> wildcardClass24 = properties5.getClass();
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNotNull(objEnumeration13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10000L + "'", long18 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0083");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties5.setService("");
        atomikosProperties5.setThreadedTwoPhaseCommit(true);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.setService("");
        atomikosProperties10.setSerialJtaTransactions(true);
        atomikosProperties10.setEnableLogging(false);
        java.lang.String str17 = atomikosProperties10.logBaseName;
        java.lang.Object obj18 = properties3.replace((java.lang.Object) atomikosProperties5, (java.lang.Object) atomikosProperties10);
        java.io.PrintStream printStream19 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.list(printStream19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(obj18);
    }

    @Test
    public void test0084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0084");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        boolean boolean3 = atomikosProperties0.isEnableLogging();
        java.util.Properties properties4 = atomikosProperties0.asProperties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties6.setService("");
        boolean boolean9 = atomikosProperties6.isEnableLogging();
        java.util.Properties properties10 = atomikosProperties6.asProperties();
        atomikosProperties6.setSerialJtaTransactions(false);
        java.lang.String str13 = atomikosProperties6.getLogBaseName();
        atomikosProperties6.setTransactionManagerUniqueName("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties16.defaultJtaTimeout = (byte) -1;
        java.util.Properties properties19 = atomikosProperties16.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean21 = atomikosProperties20.forceShutdownOnVmExit;
        atomikosProperties20.setSerialJtaTransactions(true);
        java.lang.String str24 = atomikosProperties20.logBaseName;
        atomikosProperties20.service = "tmlog";
        java.util.Properties properties27 = atomikosProperties20.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean29 = atomikosProperties28.forceShutdownOnVmExit;
        java.lang.String str30 = atomikosProperties28.getLogBaseDir();
        java.lang.Object obj31 = properties19.getOrDefault((java.lang.Object) atomikosProperties20, (java.lang.Object) str30);
        java.lang.Object obj32 = properties4.put((java.lang.Object) atomikosProperties6, (java.lang.Object) atomikosProperties20);
        boolean boolean33 = properties4.isEmpty();
        java.io.Writer writer34 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties4.store(writer34, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(properties4);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNotNull(properties19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "tmlog" + "'", str24, "tmlog");
        org.junit.Assert.assertNotNull(properties27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test0085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0085");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.checkpointInterval = 300000L;
        java.util.Properties properties4 = null;
        java.util.Properties properties5 = new java.util.Properties(properties4);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties7 = atomikosProperties6.asProperties();
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties7);
        java.util.Enumeration<java.lang.Object> objEnumeration9 = properties7.keys();
        boolean boolean11 = properties7.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties12 = null;
        java.util.Properties properties13 = new java.util.Properties(properties12);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties15 = atomikosProperties14.asProperties();
        properties13.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties15);
        java.util.Properties properties19 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet20 = properties19.keySet();
        boolean boolean21 = properties13.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) properties19);
        java.util.Enumeration<java.lang.Object> objEnumeration22 = properties13.elements();
        boolean boolean24 = properties7.remove((java.lang.Object) properties13, (java.lang.Object) 50);
        java.util.Properties properties26 = null;
        java.util.Properties properties27 = new java.util.Properties(properties26);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties29 = atomikosProperties28.asProperties();
        properties27.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties29);
        java.util.Properties properties31 = new java.util.Properties(properties29);
        java.util.Collection<java.lang.Object> objCollection32 = properties29.values();
        atomikosProperties0.set(properties13, "{}", (java.lang.Object) objCollection32);
        java.io.InputStream inputStream34 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties13.load(inputStream34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNotNull(objEnumeration9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertNotNull(objSet20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(objEnumeration22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(properties29);
        org.junit.Assert.assertNotNull(objCollection32);
    }

    @Test
    public void test0086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0086");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        java.lang.Object obj8 = properties3.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection9 = properties3.values();
        java.util.Set<java.lang.String> strSet10 = properties3.stringPropertyNames();
        java.util.Enumeration<java.lang.Object> objEnumeration11 = properties3.elements();
        java.io.InputStream inputStream12 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.loadFromXML(inputStream12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(objCollection9);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(objEnumeration11);
    }

    @Test
    public void test0087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0087");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Properties properties5 = new java.util.Properties(properties3);
        java.util.Properties properties6 = new java.util.Properties(properties3);
        java.io.OutputStream outputStream7 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties6.save(outputStream7, "{}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
    }

    @Test
    public void test0088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0088");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.io.PrintStream printStream5 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.list(printStream5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
    }

    @Test
    public void test0089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0089");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        java.lang.Object obj8 = properties3.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection9 = properties3.values();
        java.util.Set<java.lang.String> strSet10 = properties3.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties11.setService("");
        boolean boolean14 = atomikosProperties11.isEnableLogging();
        java.util.Properties properties15 = atomikosProperties11.asProperties();
        atomikosProperties11.setDefaultJtaTimeout(300000L);
        atomikosProperties11.maxActives = (short) 0;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str21 = atomikosProperties20.getTransactionManagerUniqueName();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj22 = properties3.putIfAbsent((java.lang.Object) atomikosProperties11, (java.lang.Object) str21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(objCollection9);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test0090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0090");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        boolean boolean3 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.service = "{}";
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test0091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0091");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        long long5 = atomikosProperties0.getCheckpointInterval();
        atomikosProperties0.maxTimeout = (-1);
        java.util.Properties properties8 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long10 = atomikosProperties9.defaultJtaTimeout;
        boolean boolean11 = atomikosProperties9.enableLogging;
        atomikosProperties9.setSerialJtaTransactions(true);
        java.util.Properties properties14 = atomikosProperties9.asProperties();
        properties8.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties14);
        java.util.Properties properties16 = null;
        java.util.Properties properties17 = new java.util.Properties(properties16);
        java.util.Properties properties18 = new java.util.Properties(properties17);
        java.util.Properties properties19 = null;
        java.util.Properties properties20 = new java.util.Properties(properties19);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties22 = atomikosProperties21.asProperties();
        properties20.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties22);
        java.util.Enumeration<java.lang.Object> objEnumeration24 = properties22.keys();
        boolean boolean26 = properties22.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties27 = null;
        java.util.Properties properties28 = new java.util.Properties(properties27);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties30 = atomikosProperties29.asProperties();
        properties28.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties30);
        java.util.Enumeration<java.lang.Object> objEnumeration32 = properties30.keys();
        java.lang.Object obj35 = properties30.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection36 = properties30.values();
        boolean boolean37 = properties22.containsKey((java.lang.Object) properties30);
        java.util.Properties properties38 = new java.util.Properties(properties22);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties39 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long40 = atomikosProperties39.defaultJtaTimeout;
        boolean boolean41 = atomikosProperties39.enableLogging;
        atomikosProperties39.setSerialJtaTransactions(true);
        java.util.Properties properties44 = atomikosProperties39.asProperties();
        java.util.Properties properties45 = atomikosProperties39.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties46 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean47 = atomikosProperties46.forceShutdownOnVmExit;
        atomikosProperties46.setSerialJtaTransactions(true);
        java.lang.String str50 = atomikosProperties46.logBaseName;
        boolean boolean51 = atomikosProperties46.forceShutdownOnVmExit;
        int int52 = atomikosProperties46.maxActives;
        java.lang.String str53 = atomikosProperties46.logBaseName;
        atomikosProperties46.setForceShutdownOnVmExit(true);
        java.util.Properties properties56 = atomikosProperties46.asProperties();
        boolean boolean57 = atomikosProperties46.isForceShutdownOnVmExit();
        java.util.Properties properties58 = atomikosProperties46.asProperties();
        java.lang.Object obj59 = properties22.replace((java.lang.Object) atomikosProperties39, (java.lang.Object) atomikosProperties46);
        java.lang.String str60 = atomikosProperties46.getLogBaseDir();
        atomikosProperties46.logBaseName = "{}";
        java.util.Properties properties63 = atomikosProperties46.asProperties();
        atomikosProperties46.setThreadedTwoPhaseCommit(false);
        java.lang.Object obj66 = properties14.put((java.lang.Object) properties18, (java.lang.Object) atomikosProperties46);
        java.util.Properties properties67 = new java.util.Properties(properties18);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties68 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties68.setService("");
        boolean boolean71 = atomikosProperties68.isEnableLogging();
        atomikosProperties68.setLogBaseName("tmlog");
        java.lang.String str74 = atomikosProperties68.getTransactionManagerUniqueName();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj75 = properties67.get((java.lang.Object) str74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 500L + "'", long5 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertNotNull(properties22);
        org.junit.Assert.assertNotNull(objEnumeration24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(properties30);
        org.junit.Assert.assertNotNull(objEnumeration32);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNotNull(objCollection36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 10000L + "'", long40 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(properties44);
        org.junit.Assert.assertNotNull(properties45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "tmlog" + "'", str50, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 50 + "'", int52 == 50);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "tmlog" + "'", str53, "tmlog");
        org.junit.Assert.assertNotNull(properties56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(properties58);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(properties63);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNull(str74);
    }

    @Test
    public void test0092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0092");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        boolean boolean7 = properties3.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties8 = new java.util.Properties(properties3);
        java.io.OutputStream outputStream9 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties8.storeToXML(outputStream9, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0093");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.setSerialJtaTransactions(true);
        java.lang.String str4 = atomikosProperties0.logBaseName;
        boolean boolean5 = atomikosProperties0.forceShutdownOnVmExit;
        int int6 = atomikosProperties0.maxActives;
        java.lang.String str7 = atomikosProperties0.logBaseName;
        atomikosProperties0.setForceShutdownOnVmExit(true);
        java.util.Properties properties10 = atomikosProperties0.asProperties();
        boolean boolean11 = atomikosProperties0.isForceShutdownOnVmExit();
        java.util.Properties properties12 = atomikosProperties0.asProperties();
        atomikosProperties0.transactionManagerUniqueName = "{}";
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tmlog" + "'", str4, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 50 + "'", int6 == 50);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "tmlog" + "'", str7, "tmlog");
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(properties12);
    }

    @Test
    public void test0094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0094");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.setSerialJtaTransactions(true);
        java.lang.String str4 = atomikosProperties0.logBaseName;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties6 = atomikosProperties5.asProperties();
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties9.setService("");
        atomikosProperties9.setThreadedTwoPhaseCommit(true);
        long long14 = atomikosProperties9.getCheckpointInterval();
        boolean boolean15 = atomikosProperties9.threadedTwoPhaseCommit;
        atomikosProperties0.set(properties7, "tmlog", (java.lang.Object) atomikosProperties9);
        atomikosProperties9.setLogBaseName("{}");
        java.util.Properties properties19 = null;
        java.util.Properties properties20 = new java.util.Properties(properties19);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties22 = atomikosProperties21.asProperties();
        properties20.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties22);
        java.util.Properties properties24 = new java.util.Properties(properties22);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties25.defaultJtaTimeout = (byte) -1;
        java.util.Properties properties28 = atomikosProperties25.asProperties();
        boolean boolean29 = properties22.contains((java.lang.Object) properties28);
        atomikosProperties9.set(properties28, "tmlog", (java.lang.Object) 'a');
        int int33 = properties28.size();
        java.io.Writer writer34 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties28.store(writer34, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tmlog" + "'", str4, "tmlog");
        org.junit.Assert.assertNotNull(properties6);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 500L + "'", long14 == 500L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(properties22);
        org.junit.Assert.assertNotNull(properties28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
    }

    @Test
    public void test0095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0095");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        boolean boolean7 = properties3.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        java.util.Enumeration<java.lang.Object> objEnumeration13 = properties11.keys();
        java.lang.Object obj16 = properties11.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection17 = properties11.values();
        boolean boolean18 = properties3.containsKey((java.lang.Object) properties11);
        java.util.Properties properties19 = new java.util.Properties(properties3);
        java.util.Properties properties20 = null;
        java.util.Properties properties21 = new java.util.Properties(properties20);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties23 = atomikosProperties22.asProperties();
        properties21.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties23);
        java.util.Enumeration<java.lang.Object> objEnumeration25 = properties23.keys();
        java.lang.Object obj28 = properties23.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection29 = properties23.values();
        java.util.Properties properties30 = new java.util.Properties();
        java.lang.Object obj33 = properties30.getOrDefault((java.lang.Object) (short) 1, (java.lang.Object) (-1.0d));
        properties23.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties30);
        java.util.Properties properties35 = null;
        java.util.Properties properties36 = new java.util.Properties(properties35);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties38 = atomikosProperties37.asProperties();
        properties36.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties38);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties40.setService("");
        atomikosProperties40.setThreadedTwoPhaseCommit(true);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties45 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties45.setService("");
        atomikosProperties45.setSerialJtaTransactions(true);
        atomikosProperties45.setEnableLogging(false);
        java.lang.String str52 = atomikosProperties45.logBaseName;
        java.lang.Object obj53 = properties38.replace((java.lang.Object) atomikosProperties40, (java.lang.Object) atomikosProperties45);
        boolean boolean54 = properties23.contains((java.lang.Object) properties38);
        java.lang.String str55 = properties38.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties56 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties56.setLogBaseDir("");
        atomikosProperties56.setMaxTimeout(100L);
        long long61 = atomikosProperties56.getDefaultJtaTimeout();
        java.lang.Object obj62 = properties3.putIfAbsent((java.lang.Object) properties38, (java.lang.Object) atomikosProperties56);
        atomikosProperties56.enableLogging = false;
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNotNull(objEnumeration13);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(objCollection17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(properties23);
        org.junit.Assert.assertNotNull(objEnumeration25);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNotNull(objCollection29);
        org.junit.Assert.assertEquals("'" + obj33 + "' != '" + (-1.0d) + "'", obj33, (-1.0d));
        org.junit.Assert.assertNotNull(properties38);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "tmlog" + "'", str52, "tmlog");
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str55, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 10000L + "'", long61 == 10000L);
        org.junit.Assert.assertNull(obj62);
    }

    @Test
    public void test0096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0096");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        long long5 = atomikosProperties0.getCheckpointInterval();
        atomikosProperties0.maxTimeout = (-1);
        java.util.Properties properties8 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long10 = atomikosProperties9.defaultJtaTimeout;
        boolean boolean11 = atomikosProperties9.enableLogging;
        atomikosProperties9.setSerialJtaTransactions(true);
        java.util.Properties properties14 = atomikosProperties9.asProperties();
        properties8.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties14);
        java.util.Properties properties16 = null;
        java.util.Properties properties17 = new java.util.Properties(properties16);
        java.util.Properties properties18 = new java.util.Properties(properties17);
        java.util.Properties properties19 = null;
        java.util.Properties properties20 = new java.util.Properties(properties19);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties22 = atomikosProperties21.asProperties();
        properties20.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties22);
        java.util.Enumeration<java.lang.Object> objEnumeration24 = properties22.keys();
        boolean boolean26 = properties22.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties27 = null;
        java.util.Properties properties28 = new java.util.Properties(properties27);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties30 = atomikosProperties29.asProperties();
        properties28.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties30);
        java.util.Enumeration<java.lang.Object> objEnumeration32 = properties30.keys();
        java.lang.Object obj35 = properties30.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection36 = properties30.values();
        boolean boolean37 = properties22.containsKey((java.lang.Object) properties30);
        java.util.Properties properties38 = new java.util.Properties(properties22);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties39 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long40 = atomikosProperties39.defaultJtaTimeout;
        boolean boolean41 = atomikosProperties39.enableLogging;
        atomikosProperties39.setSerialJtaTransactions(true);
        java.util.Properties properties44 = atomikosProperties39.asProperties();
        java.util.Properties properties45 = atomikosProperties39.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties46 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean47 = atomikosProperties46.forceShutdownOnVmExit;
        atomikosProperties46.setSerialJtaTransactions(true);
        java.lang.String str50 = atomikosProperties46.logBaseName;
        boolean boolean51 = atomikosProperties46.forceShutdownOnVmExit;
        int int52 = atomikosProperties46.maxActives;
        java.lang.String str53 = atomikosProperties46.logBaseName;
        atomikosProperties46.setForceShutdownOnVmExit(true);
        java.util.Properties properties56 = atomikosProperties46.asProperties();
        boolean boolean57 = atomikosProperties46.isForceShutdownOnVmExit();
        java.util.Properties properties58 = atomikosProperties46.asProperties();
        java.lang.Object obj59 = properties22.replace((java.lang.Object) atomikosProperties39, (java.lang.Object) atomikosProperties46);
        java.lang.String str60 = atomikosProperties46.getLogBaseDir();
        atomikosProperties46.logBaseName = "{}";
        java.util.Properties properties63 = atomikosProperties46.asProperties();
        atomikosProperties46.setThreadedTwoPhaseCommit(false);
        java.lang.Object obj66 = properties14.put((java.lang.Object) properties18, (java.lang.Object) atomikosProperties46);
        java.util.Properties properties67 = new java.util.Properties(properties18);
        java.io.Reader reader68 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties18.load(reader68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 500L + "'", long5 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertNotNull(properties22);
        org.junit.Assert.assertNotNull(objEnumeration24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(properties30);
        org.junit.Assert.assertNotNull(objEnumeration32);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNotNull(objCollection36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 10000L + "'", long40 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(properties44);
        org.junit.Assert.assertNotNull(properties45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "tmlog" + "'", str50, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 50 + "'", int52 == 50);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "tmlog" + "'", str53, "tmlog");
        org.junit.Assert.assertNotNull(properties56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(properties58);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(properties63);
        org.junit.Assert.assertNull(obj66);
    }

    @Test
    public void test0097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0097");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties(properties1);
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.io.Reader reader4 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties2.load(reader4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0098");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.forceShutdownOnVmExit;
        java.lang.String str2 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
    }

    @Test
    public void test0099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0099");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        java.lang.Class<?> wildcardClass6 = objEnumeration5.getClass();
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0100");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.io.PrintStream printStream3 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties2.list(printStream3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNotNull(properties2);
    }

    @Test
    public void test0101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0101");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.setSerialJtaTransactions(true);
        java.lang.String str4 = atomikosProperties0.logBaseName;
        boolean boolean5 = atomikosProperties0.forceShutdownOnVmExit;
        int int6 = atomikosProperties0.maxActives;
        java.lang.String str7 = atomikosProperties0.logBaseName;
        atomikosProperties0.transactionManagerUniqueName = "hi!";
        atomikosProperties0.setMaxActives((int) (short) 10);
        java.util.Properties properties12 = atomikosProperties0.asProperties();
        java.util.Properties properties13 = atomikosProperties0.asProperties();
        java.io.OutputStream outputStream14 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties13.store(outputStream14, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tmlog" + "'", str4, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 50 + "'", int6 == 50);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "tmlog" + "'", str7, "tmlog");
        org.junit.Assert.assertNotNull(properties12);
        org.junit.Assert.assertNotNull(properties13);
    }

    @Test
    public void test0102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0102");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties3 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean4 = atomikosProperties3.enableLogging;
        atomikosProperties3.setMaxActives((int) (byte) 1);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties7.setService("");
        atomikosProperties7.setThreadedTwoPhaseCommit(true);
        long long12 = atomikosProperties7.getCheckpointInterval();
        atomikosProperties7.maxTimeout = (-1);
        java.util.Properties properties15 = atomikosProperties7.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long17 = atomikosProperties16.defaultJtaTimeout;
        boolean boolean18 = atomikosProperties16.enableLogging;
        atomikosProperties16.setSerialJtaTransactions(true);
        java.util.Properties properties21 = atomikosProperties16.asProperties();
        properties15.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties21);
        java.util.Enumeration<java.lang.Object> objEnumeration23 = properties15.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean25 = atomikosProperties24.forceShutdownOnVmExit;
        atomikosProperties24.setSerialJtaTransactions(true);
        java.lang.String str28 = atomikosProperties24.logBaseName;
        boolean boolean29 = atomikosProperties24.forceShutdownOnVmExit;
        int int30 = atomikosProperties24.maxActives;
        java.lang.String str31 = atomikosProperties24.logBaseName;
        atomikosProperties24.setForceShutdownOnVmExit(true);
        java.util.Properties properties34 = atomikosProperties24.asProperties();
        boolean boolean35 = atomikosProperties24.isForceShutdownOnVmExit();
        java.util.Properties properties36 = atomikosProperties24.asProperties();
        boolean boolean37 = properties1.replace((java.lang.Object) (byte) 1, (java.lang.Object) properties15, (java.lang.Object) atomikosProperties24);
        java.lang.String str40 = properties1.getProperty("{}", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 500L + "'", long12 == 500L);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10000L + "'", long17 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(properties21);
        org.junit.Assert.assertNotNull(objEnumeration23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "tmlog" + "'", str28, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 50 + "'", int30 == 50);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "tmlog" + "'", str31, "tmlog");
        org.junit.Assert.assertNotNull(properties34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(properties36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str40, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
    }

    @Test
    public void test0103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0103");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        atomikosProperties0.setSerialJtaTransactions(true);
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        java.io.OutputStream outputStream6 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties5.storeToXML(outputStream6, "tmlog");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties5);
    }

    @Test
    public void test0104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0104");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        long long5 = atomikosProperties0.getCheckpointInterval();
        atomikosProperties0.maxTimeout = (-1);
        java.util.Properties properties8 = atomikosProperties0.asProperties();
        java.io.OutputStream outputStream9 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties8.store(outputStream9, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 500L + "'", long5 == 500L);
        org.junit.Assert.assertNotNull(properties8);
    }

    @Test
    public void test0105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0105");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        java.lang.Object obj8 = properties3.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection9 = properties3.values();
        java.util.Properties properties10 = new java.util.Properties();
        java.lang.Object obj13 = properties10.getOrDefault((java.lang.Object) (short) 1, (java.lang.Object) (-1.0d));
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        java.util.Properties properties15 = new java.util.Properties(properties3);
        java.lang.String str16 = properties3.toString();
        java.io.InputStream inputStream17 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.loadFromXML(inputStream17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(objCollection9);
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + (-1.0d) + "'", obj13, (-1.0d));
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str16, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
    }

    @Test
    public void test0106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0106");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        java.lang.Object obj8 = properties3.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection9 = properties3.values();
        java.util.Properties properties10 = new java.util.Properties();
        java.lang.Object obj13 = properties10.getOrDefault((java.lang.Object) (short) 1, (java.lang.Object) (-1.0d));
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        java.util.Properties properties15 = new java.util.Properties(properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean17 = atomikosProperties16.forceShutdownOnVmExit;
        atomikosProperties16.setSerialJtaTransactions(true);
        java.lang.String str20 = atomikosProperties16.logBaseName;
        atomikosProperties16.service = "tmlog";
        boolean boolean23 = properties15.containsValue((java.lang.Object) "tmlog");
        java.util.Properties properties24 = new java.util.Properties(properties15);
        java.io.PrintStream printStream25 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties24.list(printStream25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(objCollection9);
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + (-1.0d) + "'", obj13, (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "tmlog" + "'", str20, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test0107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0107");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        java.util.Set<java.lang.String> strSet2 = properties1.stringPropertyNames();
        java.lang.Object obj3 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean4 = properties1.containsValue(obj3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNotNull(strSet2);
    }

    @Test
    public void test0108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0108");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        atomikosProperties0.setSerialJtaTransactions(true);
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        properties5.clear();
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        java.util.Enumeration<java.lang.Object> objEnumeration13 = properties11.keys();
        boolean boolean15 = properties11.containsValue((java.lang.Object) 0.0f);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long18 = atomikosProperties17.defaultJtaTimeout;
        boolean boolean19 = atomikosProperties17.enableLogging;
        atomikosProperties17.setSerialJtaTransactions(true);
        java.lang.Object obj22 = properties11.putIfAbsent((java.lang.Object) 100L, (java.lang.Object) true);
        boolean boolean23 = properties5.remove((java.lang.Object) 1.0f, (java.lang.Object) 100L);
        java.util.Properties properties24 = null;
        java.util.Properties properties25 = new java.util.Properties(properties24);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties27 = atomikosProperties26.asProperties();
        properties25.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties27);
        java.util.Enumeration<java.lang.Object> objEnumeration29 = properties27.keys();
        java.lang.Object obj32 = properties27.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Properties properties33 = new java.util.Properties(properties27);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties35.setService("");
        atomikosProperties35.setSerialJtaTransactions(true);
        java.util.Properties properties40 = atomikosProperties35.asProperties();
        properties40.clear();
        boolean boolean42 = properties5.replace((java.lang.Object) properties27, (java.lang.Object) 0.0d, (java.lang.Object) properties40);
        java.io.InputStream inputStream43 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties5.load(inputStream43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNotNull(objEnumeration13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10000L + "'", long18 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(properties27);
        org.junit.Assert.assertNotNull(objEnumeration29);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNotNull(properties40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test0109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0109");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        boolean boolean7 = properties3.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        java.util.Properties properties15 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet16 = properties15.keySet();
        boolean boolean17 = properties9.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) properties15);
        java.util.Enumeration<java.lang.Object> objEnumeration18 = properties9.elements();
        boolean boolean20 = properties3.remove((java.lang.Object) properties9, (java.lang.Object) 50);
        java.io.PrintWriter printWriter21 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.list(printWriter21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNotNull(objSet16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objEnumeration18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0110");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        atomikosProperties0.setSerialJtaTransactions(true);
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        properties5.clear();
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        java.util.Enumeration<java.lang.Object> objEnumeration13 = properties11.keys();
        boolean boolean15 = properties11.containsValue((java.lang.Object) 0.0f);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long18 = atomikosProperties17.defaultJtaTimeout;
        boolean boolean19 = atomikosProperties17.enableLogging;
        atomikosProperties17.setSerialJtaTransactions(true);
        java.lang.Object obj22 = properties11.putIfAbsent((java.lang.Object) 100L, (java.lang.Object) true);
        boolean boolean23 = properties5.remove((java.lang.Object) 1.0f, (java.lang.Object) 100L);
        java.util.Properties properties24 = null;
        java.util.Properties properties25 = new java.util.Properties(properties24);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties27 = atomikosProperties26.asProperties();
        properties25.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties27);
        java.util.Enumeration<java.lang.Object> objEnumeration29 = properties27.keys();
        java.lang.Object obj32 = properties27.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Properties properties33 = new java.util.Properties(properties27);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties35.setService("");
        atomikosProperties35.setSerialJtaTransactions(true);
        java.util.Properties properties40 = atomikosProperties35.asProperties();
        properties40.clear();
        boolean boolean42 = properties5.replace((java.lang.Object) properties27, (java.lang.Object) 0.0d, (java.lang.Object) properties40);
        java.io.PrintStream printStream43 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties5.list(printStream43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNotNull(objEnumeration13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10000L + "'", long18 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(properties27);
        org.junit.Assert.assertNotNull(objEnumeration29);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNotNull(properties40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test0111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0111");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Properties properties7 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet8 = properties7.keySet();
        boolean boolean9 = properties1.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) properties7);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet10 = properties1.entrySet();
        java.util.Properties properties11 = null;
        java.util.Properties properties12 = new java.util.Properties(properties11);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties14 = atomikosProperties13.asProperties();
        properties12.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties14);
        java.util.Enumeration<java.lang.Object> objEnumeration16 = properties14.keys();
        java.lang.Object obj19 = properties14.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Properties properties20 = new java.util.Properties(properties14);
        boolean boolean21 = properties1.contains((java.lang.Object) properties20);
        java.io.InputStream inputStream22 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties20.load(inputStream22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(objEntrySet10);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertNotNull(objEnumeration16);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test0112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0112");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        boolean boolean3 = atomikosProperties0.isEnableLogging();
        java.util.Properties properties4 = atomikosProperties0.asProperties();
        properties4.clear();
        java.io.Writer writer6 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties4.store(writer6, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(properties4);
    }

    @Test
    public void test0113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0113");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        boolean boolean7 = properties3.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        java.util.Properties properties15 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet16 = properties15.keySet();
        boolean boolean17 = properties9.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) properties15);
        java.util.Enumeration<java.lang.Object> objEnumeration18 = properties9.elements();
        boolean boolean20 = properties3.remove((java.lang.Object) properties9, (java.lang.Object) 50);
        java.util.Properties properties21 = null;
        java.util.Properties properties22 = new java.util.Properties(properties21);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties24 = atomikosProperties23.asProperties();
        properties22.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties24);
        java.util.Properties properties26 = new java.util.Properties(properties24);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties27.defaultJtaTimeout = (byte) -1;
        java.util.Properties properties30 = atomikosProperties27.asProperties();
        boolean boolean31 = properties24.contains((java.lang.Object) properties30);
        java.util.Properties properties32 = null;
        java.util.Properties properties33 = new java.util.Properties(properties32);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties34 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties35 = atomikosProperties34.asProperties();
        properties33.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties35);
        java.util.Enumeration<java.lang.Object> objEnumeration37 = properties35.keys();
        boolean boolean39 = properties35.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties40 = new java.util.Properties(properties35);
        java.lang.Object obj41 = properties9.replace((java.lang.Object) properties30, (java.lang.Object) properties40);
        java.io.OutputStream outputStream42 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties40.storeToXML(outputStream42, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNotNull(objSet16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objEnumeration18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(properties24);
        org.junit.Assert.assertNotNull(properties30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(properties35);
        org.junit.Assert.assertNotNull(objEnumeration37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(obj41);
    }

    @Test
    public void test0114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0114");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        atomikosProperties0.setSerialJtaTransactions(true);
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        properties5.clear();
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        java.util.Enumeration<java.lang.Object> objEnumeration13 = properties11.keys();
        boolean boolean15 = properties11.containsValue((java.lang.Object) 0.0f);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long18 = atomikosProperties17.defaultJtaTimeout;
        boolean boolean19 = atomikosProperties17.enableLogging;
        atomikosProperties17.setSerialJtaTransactions(true);
        java.lang.Object obj22 = properties11.putIfAbsent((java.lang.Object) 100L, (java.lang.Object) true);
        boolean boolean23 = properties5.remove((java.lang.Object) 1.0f, (java.lang.Object) 100L);
        java.io.PrintStream printStream24 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties5.list(printStream24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNotNull(objEnumeration13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10000L + "'", long18 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test0115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0115");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Properties properties5 = new java.util.Properties(properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties7 = atomikosProperties6.asProperties();
        java.util.Set<java.lang.String> strSet8 = properties7.stringPropertyNames();
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties7);
        properties7.clear();
        java.io.PrintStream printStream11 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties7.list(printStream11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNotNull(strSet8);
    }

    @Test
    public void test0116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0116");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        java.lang.String str8 = properties3.getProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "");
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test0117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0117");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.setSerialJtaTransactions(true);
        java.lang.String str4 = atomikosProperties0.logBaseName;
        boolean boolean5 = atomikosProperties0.forceShutdownOnVmExit;
        int int6 = atomikosProperties0.maxActives;
        java.lang.String str7 = atomikosProperties0.logBaseName;
        java.util.Properties properties8 = atomikosProperties0.asProperties();
        java.io.InputStream inputStream9 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties8.loadFromXML(inputStream9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tmlog" + "'", str4, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 50 + "'", int6 == 50);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "tmlog" + "'", str7, "tmlog");
        org.junit.Assert.assertNotNull(properties8);
    }

    @Test
    public void test0118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0118");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        long long5 = atomikosProperties0.getCheckpointInterval();
        atomikosProperties0.maxTimeout = (-1);
        java.util.Properties properties8 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long10 = atomikosProperties9.defaultJtaTimeout;
        boolean boolean11 = atomikosProperties9.enableLogging;
        atomikosProperties9.setSerialJtaTransactions(true);
        java.util.Properties properties14 = atomikosProperties9.asProperties();
        properties8.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties14);
        java.util.Properties properties16 = null;
        java.util.Properties properties17 = new java.util.Properties(properties16);
        java.util.Properties properties18 = new java.util.Properties(properties17);
        java.util.Properties properties19 = null;
        java.util.Properties properties20 = new java.util.Properties(properties19);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties22 = atomikosProperties21.asProperties();
        properties20.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties22);
        java.util.Enumeration<java.lang.Object> objEnumeration24 = properties22.keys();
        boolean boolean26 = properties22.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties27 = null;
        java.util.Properties properties28 = new java.util.Properties(properties27);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties30 = atomikosProperties29.asProperties();
        properties28.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties30);
        java.util.Enumeration<java.lang.Object> objEnumeration32 = properties30.keys();
        java.lang.Object obj35 = properties30.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection36 = properties30.values();
        boolean boolean37 = properties22.containsKey((java.lang.Object) properties30);
        java.util.Properties properties38 = new java.util.Properties(properties22);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties39 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long40 = atomikosProperties39.defaultJtaTimeout;
        boolean boolean41 = atomikosProperties39.enableLogging;
        atomikosProperties39.setSerialJtaTransactions(true);
        java.util.Properties properties44 = atomikosProperties39.asProperties();
        java.util.Properties properties45 = atomikosProperties39.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties46 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean47 = atomikosProperties46.forceShutdownOnVmExit;
        atomikosProperties46.setSerialJtaTransactions(true);
        java.lang.String str50 = atomikosProperties46.logBaseName;
        boolean boolean51 = atomikosProperties46.forceShutdownOnVmExit;
        int int52 = atomikosProperties46.maxActives;
        java.lang.String str53 = atomikosProperties46.logBaseName;
        atomikosProperties46.setForceShutdownOnVmExit(true);
        java.util.Properties properties56 = atomikosProperties46.asProperties();
        boolean boolean57 = atomikosProperties46.isForceShutdownOnVmExit();
        java.util.Properties properties58 = atomikosProperties46.asProperties();
        java.lang.Object obj59 = properties22.replace((java.lang.Object) atomikosProperties39, (java.lang.Object) atomikosProperties46);
        java.lang.String str60 = atomikosProperties46.getLogBaseDir();
        atomikosProperties46.logBaseName = "{}";
        java.util.Properties properties63 = atomikosProperties46.asProperties();
        atomikosProperties46.setThreadedTwoPhaseCommit(false);
        java.lang.Object obj66 = properties14.put((java.lang.Object) properties18, (java.lang.Object) atomikosProperties46);
        java.io.OutputStream outputStream67 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties18.storeToXML(outputStream67, "hi!", "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 500L + "'", long5 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertNotNull(properties22);
        org.junit.Assert.assertNotNull(objEnumeration24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(properties30);
        org.junit.Assert.assertNotNull(objEnumeration32);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNotNull(objCollection36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 10000L + "'", long40 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(properties44);
        org.junit.Assert.assertNotNull(properties45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "tmlog" + "'", str50, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 50 + "'", int52 == 50);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "tmlog" + "'", str53, "tmlog");
        org.junit.Assert.assertNotNull(properties56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(properties58);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(properties63);
        org.junit.Assert.assertNull(obj66);
    }

    @Test
    public void test0119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0119");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties(properties1);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet3 = properties1.entrySet();
        java.io.InputStream inputStream4 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.loadFromXML(inputStream4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEntrySet3);
    }

    @Test
    public void test0120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0120");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.setSerialJtaTransactions(true);
        java.lang.String str4 = atomikosProperties0.logBaseName;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties6 = atomikosProperties5.asProperties();
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties9.setService("");
        atomikosProperties9.setThreadedTwoPhaseCommit(true);
        long long14 = atomikosProperties9.getCheckpointInterval();
        boolean boolean15 = atomikosProperties9.threadedTwoPhaseCommit;
        atomikosProperties0.set(properties7, "tmlog", (java.lang.Object) atomikosProperties9);
        atomikosProperties9.setLogBaseName("{}");
        java.util.Properties properties19 = null;
        java.util.Properties properties20 = new java.util.Properties(properties19);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties22 = atomikosProperties21.asProperties();
        properties20.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties22);
        java.util.Properties properties24 = new java.util.Properties(properties22);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties25.defaultJtaTimeout = (byte) -1;
        java.util.Properties properties28 = atomikosProperties25.asProperties();
        boolean boolean29 = properties22.contains((java.lang.Object) properties28);
        atomikosProperties9.set(properties28, "tmlog", (java.lang.Object) 'a');
        int int33 = properties28.size();
        java.lang.Class<?> wildcardClass34 = properties28.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tmlog" + "'", str4, "tmlog");
        org.junit.Assert.assertNotNull(properties6);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 500L + "'", long14 == 500L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(properties22);
        org.junit.Assert.assertNotNull(properties28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0121");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.checkpointInterval = 1L;
        java.lang.String str4 = atomikosProperties0.getService();
        java.lang.String str5 = atomikosProperties0.getLogBaseName();
        java.util.Properties properties6 = atomikosProperties0.asProperties();
        java.util.Properties properties7 = null;
        java.util.Properties properties8 = new java.util.Properties(properties7);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties10 = atomikosProperties9.asProperties();
        properties8.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        java.util.Properties properties14 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet15 = properties14.keySet();
        boolean boolean16 = properties8.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) properties14);
        java.util.Collection<java.lang.Object> objCollection17 = properties14.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties18.setService("");
        boolean boolean21 = atomikosProperties18.isEnableLogging();
        java.util.Properties properties22 = atomikosProperties18.asProperties();
        properties22.clear();
        java.util.Properties properties24 = null;
        java.util.Properties properties25 = new java.util.Properties(properties24);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties27 = atomikosProperties26.asProperties();
        properties25.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties27);
        java.util.Enumeration<java.lang.Object> objEnumeration29 = properties27.keys();
        java.lang.Object obj31 = properties22.put((java.lang.Object) properties27, (java.lang.Object) (byte) 0);
        java.lang.Object obj32 = properties6.getOrDefault((java.lang.Object) objCollection17, obj31);
        java.lang.Class<?> wildcardClass33 = properties6.getClass();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tmlog" + "'", str5, "tmlog");
        org.junit.Assert.assertNotNull(properties6);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertNotNull(objSet15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objCollection17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(properties22);
        org.junit.Assert.assertNotNull(properties27);
        org.junit.Assert.assertNotNull(objEnumeration29);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0122");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        boolean boolean3 = atomikosProperties0.isEnableLogging();
        java.util.Properties properties4 = atomikosProperties0.asProperties();
        properties4.clear();
        java.io.OutputStream outputStream6 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties4.save(outputStream6, "{}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(properties4);
    }

    @Test
    public void test0123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0123");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Properties properties5 = new java.util.Properties(properties3);
        java.util.Collection<java.lang.Object> objCollection6 = properties3.values();
        java.util.Properties properties7 = new java.util.Properties(properties3);
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        java.util.Properties properties15 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet16 = properties15.keySet();
        boolean boolean17 = properties9.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) properties15);
        java.util.Enumeration<java.lang.Object> objEnumeration18 = properties9.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long20 = atomikosProperties19.defaultJtaTimeout;
        boolean boolean21 = atomikosProperties19.enableLogging;
        atomikosProperties19.setSerialJtaTransactions(true);
        java.util.Properties properties24 = atomikosProperties19.asProperties();
        java.util.Properties properties25 = null;
        java.util.Properties properties26 = new java.util.Properties(properties25);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties28 = atomikosProperties27.asProperties();
        properties26.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties28);
        java.util.Enumeration<java.lang.Object> objEnumeration30 = properties28.keys();
        java.lang.Object obj33 = properties28.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection34 = properties28.values();
        java.util.Set<java.lang.String> strSet35 = properties28.stringPropertyNames();
        boolean boolean36 = properties24.contains((java.lang.Object) properties28);
        java.lang.Object obj37 = properties3.replace((java.lang.Object) properties9, (java.lang.Object) properties28);
        java.lang.Class<?> wildcardClass38 = properties3.getClass();
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objCollection6);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNotNull(objSet16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objEnumeration18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10000L + "'", long20 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(properties24);
        org.junit.Assert.assertNotNull(properties28);
        org.junit.Assert.assertNotNull(objEnumeration30);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNotNull(objCollection34);
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0124");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties(properties1);
        java.util.Properties properties3 = new java.util.Properties(properties1);
        java.io.InputStream inputStream4 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.load(inputStream4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0125");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        boolean boolean7 = properties3.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        java.util.Properties properties15 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet16 = properties15.keySet();
        boolean boolean17 = properties9.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) properties15);
        java.util.Enumeration<java.lang.Object> objEnumeration18 = properties9.elements();
        boolean boolean20 = properties3.remove((java.lang.Object) properties9, (java.lang.Object) 50);
        java.io.PrintStream printStream21 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.list(printStream21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNotNull(objSet16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objEnumeration18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0126");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        boolean boolean7 = properties3.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        java.util.Properties properties15 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet16 = properties15.keySet();
        boolean boolean17 = properties9.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) properties15);
        java.util.Enumeration<java.lang.Object> objEnumeration18 = properties9.elements();
        boolean boolean20 = properties3.remove((java.lang.Object) properties9, (java.lang.Object) 50);
        java.util.Properties properties21 = null;
        java.util.Properties properties22 = new java.util.Properties(properties21);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties24 = atomikosProperties23.asProperties();
        properties22.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties24);
        java.util.Properties properties26 = new java.util.Properties(properties24);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties27.defaultJtaTimeout = (byte) -1;
        java.util.Properties properties30 = atomikosProperties27.asProperties();
        boolean boolean31 = properties24.contains((java.lang.Object) properties30);
        java.util.Properties properties32 = null;
        java.util.Properties properties33 = new java.util.Properties(properties32);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties34 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties35 = atomikosProperties34.asProperties();
        properties33.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties35);
        java.util.Enumeration<java.lang.Object> objEnumeration37 = properties35.keys();
        boolean boolean39 = properties35.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties40 = new java.util.Properties(properties35);
        java.lang.Object obj41 = properties9.replace((java.lang.Object) properties30, (java.lang.Object) properties40);
        java.io.OutputStream outputStream42 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties30.save(outputStream42, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNotNull(objSet16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objEnumeration18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(properties24);
        org.junit.Assert.assertNotNull(properties30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(properties35);
        org.junit.Assert.assertNotNull(objEnumeration37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(obj41);
    }

    @Test
    public void test0127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0127");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Properties properties5 = new java.util.Properties(properties3);
        java.util.Properties properties6 = new java.util.Properties(properties3);
        java.io.OutputStream outputStream7 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.save(outputStream7, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
    }

    @Test
    public void test0128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0128");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties3 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean4 = atomikosProperties3.enableLogging;
        atomikosProperties3.setMaxActives((int) (byte) 1);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties7.setService("");
        atomikosProperties7.setThreadedTwoPhaseCommit(true);
        long long12 = atomikosProperties7.getCheckpointInterval();
        atomikosProperties7.maxTimeout = (-1);
        java.util.Properties properties15 = atomikosProperties7.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long17 = atomikosProperties16.defaultJtaTimeout;
        boolean boolean18 = atomikosProperties16.enableLogging;
        atomikosProperties16.setSerialJtaTransactions(true);
        java.util.Properties properties21 = atomikosProperties16.asProperties();
        properties15.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties21);
        java.util.Enumeration<java.lang.Object> objEnumeration23 = properties15.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean25 = atomikosProperties24.forceShutdownOnVmExit;
        atomikosProperties24.setSerialJtaTransactions(true);
        java.lang.String str28 = atomikosProperties24.logBaseName;
        boolean boolean29 = atomikosProperties24.forceShutdownOnVmExit;
        int int30 = atomikosProperties24.maxActives;
        java.lang.String str31 = atomikosProperties24.logBaseName;
        atomikosProperties24.setForceShutdownOnVmExit(true);
        java.util.Properties properties34 = atomikosProperties24.asProperties();
        boolean boolean35 = atomikosProperties24.isForceShutdownOnVmExit();
        java.util.Properties properties36 = atomikosProperties24.asProperties();
        boolean boolean37 = properties1.replace((java.lang.Object) (byte) 1, (java.lang.Object) properties15, (java.lang.Object) atomikosProperties24);
        java.io.InputStream inputStream38 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties15.load(inputStream38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 500L + "'", long12 == 500L);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10000L + "'", long17 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(properties21);
        org.junit.Assert.assertNotNull(objEnumeration23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "tmlog" + "'", str28, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 50 + "'", int30 == 50);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "tmlog" + "'", str31, "tmlog");
        org.junit.Assert.assertNotNull(properties34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(properties36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test0129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0129");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Properties properties5 = new java.util.Properties(properties3);
        java.util.Properties properties6 = new java.util.Properties(properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties8 = atomikosProperties7.asProperties();
        java.util.Properties properties9 = atomikosProperties7.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.setService("");
        boolean boolean13 = atomikosProperties10.isEnableLogging();
        java.util.Properties properties14 = atomikosProperties10.asProperties();
        java.lang.Object obj15 = properties3.getOrDefault((java.lang.Object) properties9, (java.lang.Object) atomikosProperties10);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties16.setService("");
        atomikosProperties16.setThreadedTwoPhaseCommit(true);
        long long21 = atomikosProperties16.getCheckpointInterval();
        atomikosProperties16.setMaxTimeout(0L);
        atomikosProperties16.setSerialJtaTransactions(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties26.setService("");
        atomikosProperties26.setSerialJtaTransactions(true);
        atomikosProperties26.setEnableLogging(false);
        atomikosProperties26.logBaseName = "tmlog";
        int int35 = atomikosProperties26.maxActives;
        boolean boolean36 = atomikosProperties26.isEnableLogging();
        java.util.Properties properties37 = null;
        java.util.Properties properties38 = new java.util.Properties(properties37);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties39 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties40 = atomikosProperties39.asProperties();
        properties38.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties40);
        java.util.Enumeration<java.lang.Object> objEnumeration42 = properties40.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration43 = properties40.elements();
        java.util.Properties properties44 = null;
        java.util.Properties properties45 = new java.util.Properties(properties44);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties46 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties47 = atomikosProperties46.asProperties();
        properties45.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties47);
        java.util.Properties properties49 = new java.util.Properties(properties47);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties50.defaultJtaTimeout = (byte) -1;
        java.util.Properties properties53 = atomikosProperties50.asProperties();
        boolean boolean54 = properties47.contains((java.lang.Object) properties53);
        java.util.Properties properties55 = null;
        java.util.Properties properties56 = new java.util.Properties(properties55);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties57 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties58 = atomikosProperties57.asProperties();
        properties56.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties58);
        java.util.Enumeration<java.lang.Object> objEnumeration60 = properties58.keys();
        boolean boolean62 = properties58.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties63 = null;
        java.util.Properties properties64 = new java.util.Properties(properties63);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties65 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties66 = atomikosProperties65.asProperties();
        properties64.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties66);
        java.util.Enumeration<java.lang.Object> objEnumeration68 = properties66.keys();
        java.lang.Object obj71 = properties66.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection72 = properties66.values();
        boolean boolean73 = properties58.containsKey((java.lang.Object) properties66);
        java.util.Properties properties74 = new java.util.Properties(properties58);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties75 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long76 = atomikosProperties75.defaultJtaTimeout;
        boolean boolean77 = atomikosProperties75.enableLogging;
        atomikosProperties75.setSerialJtaTransactions(true);
        java.util.Properties properties80 = atomikosProperties75.asProperties();
        java.util.Properties properties81 = atomikosProperties75.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties82 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean83 = atomikosProperties82.forceShutdownOnVmExit;
        atomikosProperties82.setSerialJtaTransactions(true);
        java.lang.String str86 = atomikosProperties82.logBaseName;
        boolean boolean87 = atomikosProperties82.forceShutdownOnVmExit;
        int int88 = atomikosProperties82.maxActives;
        java.lang.String str89 = atomikosProperties82.logBaseName;
        atomikosProperties82.setForceShutdownOnVmExit(true);
        java.util.Properties properties92 = atomikosProperties82.asProperties();
        boolean boolean93 = atomikosProperties82.isForceShutdownOnVmExit();
        java.util.Properties properties94 = atomikosProperties82.asProperties();
        java.lang.Object obj95 = properties58.replace((java.lang.Object) atomikosProperties75, (java.lang.Object) atomikosProperties82);
        java.lang.Object obj96 = properties40.putIfAbsent((java.lang.Object) properties53, (java.lang.Object) atomikosProperties82);
        boolean boolean97 = properties3.replace((java.lang.Object) false, (java.lang.Object) boolean36, (java.lang.Object) atomikosProperties82);
        int int98 = atomikosProperties82.maxActives;
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 500L + "'", long21 == 500L);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 50 + "'", int35 == 50);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(properties40);
        org.junit.Assert.assertNotNull(objEnumeration42);
        org.junit.Assert.assertNotNull(objEnumeration43);
        org.junit.Assert.assertNotNull(properties47);
        org.junit.Assert.assertNotNull(properties53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(properties58);
        org.junit.Assert.assertNotNull(objEnumeration60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(properties66);
        org.junit.Assert.assertNotNull(objEnumeration68);
        org.junit.Assert.assertNull(obj71);
        org.junit.Assert.assertNotNull(objCollection72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 10000L + "'", long76 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(properties80);
        org.junit.Assert.assertNotNull(properties81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "tmlog" + "'", str86, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 50 + "'", int88 == 50);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "tmlog" + "'", str89, "tmlog");
        org.junit.Assert.assertNotNull(properties92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNotNull(properties94);
        org.junit.Assert.assertNull(obj95);
        org.junit.Assert.assertNull(obj96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 50 + "'", int98 == 50);
    }

    @Test
    public void test0130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0130");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        java.lang.Object obj8 = properties3.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection9 = properties3.values();
        java.util.Properties properties10 = new java.util.Properties();
        java.lang.Object obj13 = properties10.getOrDefault((java.lang.Object) (short) 1, (java.lang.Object) (-1.0d));
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        java.util.Properties properties15 = null;
        java.util.Properties properties16 = new java.util.Properties(properties15);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties18 = atomikosProperties17.asProperties();
        properties16.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties18);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties20.setService("");
        atomikosProperties20.setThreadedTwoPhaseCommit(true);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties25.setService("");
        atomikosProperties25.setSerialJtaTransactions(true);
        atomikosProperties25.setEnableLogging(false);
        java.lang.String str32 = atomikosProperties25.logBaseName;
        java.lang.Object obj33 = properties18.replace((java.lang.Object) atomikosProperties20, (java.lang.Object) atomikosProperties25);
        boolean boolean34 = properties3.contains((java.lang.Object) properties18);
        java.lang.String str35 = properties18.toString();
        java.io.OutputStream outputStream36 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties18.store(outputStream36, "{}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(objCollection9);
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + (-1.0d) + "'", obj13, (-1.0d));
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "tmlog" + "'", str32, "tmlog");
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str35, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
    }

    @Test
    public void test0131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0131");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties(properties1);
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = null;
        java.util.Properties properties5 = new java.util.Properties(properties4);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties7 = atomikosProperties6.asProperties();
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties7);
        java.util.Enumeration<java.lang.Object> objEnumeration9 = properties7.keys();
        boolean boolean11 = properties7.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties12 = null;
        java.util.Properties properties13 = new java.util.Properties(properties12);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties15 = atomikosProperties14.asProperties();
        properties13.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties15);
        java.util.Enumeration<java.lang.Object> objEnumeration17 = properties15.keys();
        java.lang.Object obj20 = properties15.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection21 = properties15.values();
        boolean boolean22 = properties7.containsKey((java.lang.Object) properties15);
        java.util.Properties properties23 = new java.util.Properties(properties7);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean25 = atomikosProperties24.forceShutdownOnVmExit;
        atomikosProperties24.setSerialJtaTransactions(true);
        java.lang.String str28 = atomikosProperties24.logBaseName;
        boolean boolean29 = atomikosProperties24.forceShutdownOnVmExit;
        atomikosProperties24.logBaseName = "tmlog";
        atomikosProperties24.enableLogging = true;
        long long34 = atomikosProperties24.getDefaultJtaTimeout();
        boolean boolean35 = atomikosProperties24.isForceShutdownOnVmExit();
        boolean boolean36 = properties2.remove((java.lang.Object) properties7, (java.lang.Object) boolean35);
        java.io.Writer writer37 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties7.store(writer37, "tmlog");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNotNull(objEnumeration9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertNotNull(objEnumeration17);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNotNull(objCollection21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "tmlog" + "'", str28, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 10000L + "'", long34 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test0132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0132");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        boolean boolean7 = properties3.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        java.util.Enumeration<java.lang.Object> objEnumeration13 = properties11.keys();
        java.lang.Object obj16 = properties11.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection17 = properties11.values();
        boolean boolean18 = properties3.containsKey((java.lang.Object) properties11);
        java.util.Properties properties19 = new java.util.Properties(properties3);
        java.lang.Object obj20 = properties19.clone();
        java.io.OutputStream outputStream21 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties19.storeToXML(outputStream21, "tmlog");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNotNull(objEnumeration13);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(objCollection17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{}");
    }

    @Test
    public void test0133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0133");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.setSerialJtaTransactions(true);
        java.lang.String str4 = atomikosProperties0.logBaseName;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties6 = atomikosProperties5.asProperties();
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties9.setService("");
        atomikosProperties9.setThreadedTwoPhaseCommit(true);
        long long14 = atomikosProperties9.getCheckpointInterval();
        boolean boolean15 = atomikosProperties9.threadedTwoPhaseCommit;
        atomikosProperties0.set(properties7, "tmlog", (java.lang.Object) atomikosProperties9);
        atomikosProperties9.setLogBaseName("{}");
        java.util.Properties properties19 = null;
        java.util.Properties properties20 = new java.util.Properties(properties19);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties22 = atomikosProperties21.asProperties();
        properties20.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties22);
        java.util.Properties properties24 = new java.util.Properties(properties22);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties25.defaultJtaTimeout = (byte) -1;
        java.util.Properties properties28 = atomikosProperties25.asProperties();
        boolean boolean29 = properties22.contains((java.lang.Object) properties28);
        atomikosProperties9.set(properties28, "tmlog", (java.lang.Object) 'a');
        java.lang.Object obj33 = properties28.clone();
        java.io.PrintWriter printWriter34 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties28.list(printWriter34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tmlog" + "'", str4, "tmlog");
        org.junit.Assert.assertNotNull(properties6);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 500L + "'", long14 == 500L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(properties22);
        org.junit.Assert.assertNotNull(properties28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(obj33);
// flaky:         org.junit.Assert.assertEquals(obj33.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tmlog=a, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tmlog=a, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tmlog=a, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
    }

    @Test
    public void test0134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0134");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration6 = properties3.elements();
        java.util.Properties properties7 = null;
        java.util.Properties properties8 = new java.util.Properties(properties7);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties10 = atomikosProperties9.asProperties();
        properties8.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        java.util.Properties properties12 = new java.util.Properties(properties10);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties13.defaultJtaTimeout = (byte) -1;
        java.util.Properties properties16 = atomikosProperties13.asProperties();
        boolean boolean17 = properties10.contains((java.lang.Object) properties16);
        java.util.Properties properties18 = null;
        java.util.Properties properties19 = new java.util.Properties(properties18);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties21 = atomikosProperties20.asProperties();
        properties19.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties21);
        java.util.Enumeration<java.lang.Object> objEnumeration23 = properties21.keys();
        boolean boolean25 = properties21.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties26 = null;
        java.util.Properties properties27 = new java.util.Properties(properties26);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties29 = atomikosProperties28.asProperties();
        properties27.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties29);
        java.util.Enumeration<java.lang.Object> objEnumeration31 = properties29.keys();
        java.lang.Object obj34 = properties29.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection35 = properties29.values();
        boolean boolean36 = properties21.containsKey((java.lang.Object) properties29);
        java.util.Properties properties37 = new java.util.Properties(properties21);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long39 = atomikosProperties38.defaultJtaTimeout;
        boolean boolean40 = atomikosProperties38.enableLogging;
        atomikosProperties38.setSerialJtaTransactions(true);
        java.util.Properties properties43 = atomikosProperties38.asProperties();
        java.util.Properties properties44 = atomikosProperties38.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties45 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean46 = atomikosProperties45.forceShutdownOnVmExit;
        atomikosProperties45.setSerialJtaTransactions(true);
        java.lang.String str49 = atomikosProperties45.logBaseName;
        boolean boolean50 = atomikosProperties45.forceShutdownOnVmExit;
        int int51 = atomikosProperties45.maxActives;
        java.lang.String str52 = atomikosProperties45.logBaseName;
        atomikosProperties45.setForceShutdownOnVmExit(true);
        java.util.Properties properties55 = atomikosProperties45.asProperties();
        boolean boolean56 = atomikosProperties45.isForceShutdownOnVmExit();
        java.util.Properties properties57 = atomikosProperties45.asProperties();
        java.lang.Object obj58 = properties21.replace((java.lang.Object) atomikosProperties38, (java.lang.Object) atomikosProperties45);
        java.lang.Object obj59 = properties3.putIfAbsent((java.lang.Object) properties16, (java.lang.Object) atomikosProperties45);
        java.util.Collection<java.lang.Object> objCollection60 = properties16.values();
        java.io.OutputStream outputStream61 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties16.storeToXML(outputStream61, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNotNull(objEnumeration6);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(properties21);
        org.junit.Assert.assertNotNull(objEnumeration23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(properties29);
        org.junit.Assert.assertNotNull(objEnumeration31);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNotNull(objCollection35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 10000L + "'", long39 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(properties43);
        org.junit.Assert.assertNotNull(properties44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "tmlog" + "'", str49, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 50 + "'", int51 == 50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "tmlog" + "'", str52, "tmlog");
        org.junit.Assert.assertNotNull(properties55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(properties57);
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertNotNull(objCollection60);
    }

    @Test
    public void test0135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0135");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties3 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean4 = atomikosProperties3.enableLogging;
        atomikosProperties3.setMaxActives((int) (byte) 1);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties7.setService("");
        atomikosProperties7.setThreadedTwoPhaseCommit(true);
        long long12 = atomikosProperties7.getCheckpointInterval();
        atomikosProperties7.maxTimeout = (-1);
        java.util.Properties properties15 = atomikosProperties7.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long17 = atomikosProperties16.defaultJtaTimeout;
        boolean boolean18 = atomikosProperties16.enableLogging;
        atomikosProperties16.setSerialJtaTransactions(true);
        java.util.Properties properties21 = atomikosProperties16.asProperties();
        properties15.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties21);
        java.util.Enumeration<java.lang.Object> objEnumeration23 = properties15.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean25 = atomikosProperties24.forceShutdownOnVmExit;
        atomikosProperties24.setSerialJtaTransactions(true);
        java.lang.String str28 = atomikosProperties24.logBaseName;
        boolean boolean29 = atomikosProperties24.forceShutdownOnVmExit;
        int int30 = atomikosProperties24.maxActives;
        java.lang.String str31 = atomikosProperties24.logBaseName;
        atomikosProperties24.setForceShutdownOnVmExit(true);
        java.util.Properties properties34 = atomikosProperties24.asProperties();
        boolean boolean35 = atomikosProperties24.isForceShutdownOnVmExit();
        java.util.Properties properties36 = atomikosProperties24.asProperties();
        boolean boolean37 = properties1.replace((java.lang.Object) (byte) 1, (java.lang.Object) properties15, (java.lang.Object) atomikosProperties24);
        java.util.Properties properties38 = new java.util.Properties(properties1);
        java.util.Enumeration<?> wildcardEnumeration39 = properties1.propertyNames();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 500L + "'", long12 == 500L);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10000L + "'", long17 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(properties21);
        org.junit.Assert.assertNotNull(objEnumeration23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "tmlog" + "'", str28, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 50 + "'", int30 == 50);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "tmlog" + "'", str31, "tmlog");
        org.junit.Assert.assertNotNull(properties34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(properties36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(wildcardEnumeration39);
    }

    @Test
    public void test0136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0136");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        boolean boolean7 = properties3.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties8 = new java.util.Properties(properties3);
        java.io.Writer writer9 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.store(writer9, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0137");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        boolean boolean7 = properties3.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        java.util.Properties properties15 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet16 = properties15.keySet();
        boolean boolean17 = properties9.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) properties15);
        java.util.Enumeration<java.lang.Object> objEnumeration18 = properties9.elements();
        boolean boolean20 = properties3.remove((java.lang.Object) properties9, (java.lang.Object) 50);
        properties3.clear();
        java.lang.String str24 = properties3.getProperty("", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNotNull(objSet16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objEnumeration18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str24, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
    }

    @Test
    public void test0138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0138");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        boolean boolean7 = properties3.containsValue((java.lang.Object) 0.0f);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long10 = atomikosProperties9.defaultJtaTimeout;
        boolean boolean11 = atomikosProperties9.enableLogging;
        atomikosProperties9.setSerialJtaTransactions(true);
        java.lang.Object obj14 = properties3.putIfAbsent((java.lang.Object) 100L, (java.lang.Object) true);
        java.util.Properties properties15 = new java.util.Properties(properties3);
        java.util.Properties properties16 = new java.util.Properties(properties15);
        java.io.OutputStream outputStream17 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties16.store(outputStream17, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(obj14);
    }

    @Test
    public void test0139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0139");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        boolean boolean7 = properties3.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        java.util.Properties properties15 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet16 = properties15.keySet();
        boolean boolean17 = properties9.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) properties15);
        java.util.Enumeration<java.lang.Object> objEnumeration18 = properties9.elements();
        boolean boolean20 = properties3.remove((java.lang.Object) properties9, (java.lang.Object) 50);
        java.util.Properties properties21 = null;
        java.util.Properties properties22 = new java.util.Properties(properties21);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties24 = atomikosProperties23.asProperties();
        properties22.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties24);
        java.util.Properties properties26 = new java.util.Properties(properties24);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties27.defaultJtaTimeout = (byte) -1;
        java.util.Properties properties30 = atomikosProperties27.asProperties();
        boolean boolean31 = properties24.contains((java.lang.Object) properties30);
        java.util.Properties properties32 = null;
        java.util.Properties properties33 = new java.util.Properties(properties32);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties34 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties35 = atomikosProperties34.asProperties();
        properties33.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties35);
        java.util.Enumeration<java.lang.Object> objEnumeration37 = properties35.keys();
        boolean boolean39 = properties35.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties40 = new java.util.Properties(properties35);
        java.lang.Object obj41 = properties9.replace((java.lang.Object) properties30, (java.lang.Object) properties40);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean43 = atomikosProperties42.forceShutdownOnVmExit;
        atomikosProperties42.setSerialJtaTransactions(true);
        java.lang.String str46 = atomikosProperties42.logBaseName;
        boolean boolean47 = atomikosProperties42.forceShutdownOnVmExit;
        int int48 = atomikosProperties42.maxActives;
        java.lang.String str49 = atomikosProperties42.logBaseName;
        atomikosProperties42.setForceShutdownOnVmExit(true);
        java.lang.Object obj52 = properties30.remove((java.lang.Object) atomikosProperties42);
        java.io.PrintWriter printWriter53 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties30.list(printWriter53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNotNull(objSet16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objEnumeration18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(properties24);
        org.junit.Assert.assertNotNull(properties30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(properties35);
        org.junit.Assert.assertNotNull(objEnumeration37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "tmlog" + "'", str46, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 50 + "'", int48 == 50);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "tmlog" + "'", str49, "tmlog");
        org.junit.Assert.assertNull(obj52);
    }

    @Test
    public void test0140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0140");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        boolean boolean7 = properties3.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        java.util.Properties properties15 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet16 = properties15.keySet();
        boolean boolean17 = properties9.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) properties15);
        java.util.Enumeration<java.lang.Object> objEnumeration18 = properties9.elements();
        boolean boolean20 = properties3.remove((java.lang.Object) properties9, (java.lang.Object) 50);
        java.util.Properties properties21 = null;
        java.util.Properties properties22 = new java.util.Properties(properties21);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties24 = atomikosProperties23.asProperties();
        properties22.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties24);
        java.util.Properties properties26 = new java.util.Properties(properties24);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties28 = atomikosProperties27.asProperties();
        java.util.Set<java.lang.String> strSet29 = properties28.stringPropertyNames();
        properties26.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties28);
        java.util.Properties properties31 = new java.util.Properties(properties28);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean33 = atomikosProperties32.forceShutdownOnVmExit;
        atomikosProperties32.setSerialJtaTransactions(true);
        java.lang.String str36 = atomikosProperties32.logBaseName;
        boolean boolean37 = atomikosProperties32.forceShutdownOnVmExit;
        int int38 = atomikosProperties32.maxActives;
        java.lang.String str39 = atomikosProperties32.logBaseName;
        atomikosProperties32.setForceShutdownOnVmExit(true);
        java.util.Properties properties42 = atomikosProperties32.asProperties();
        java.lang.Object obj43 = properties3.getOrDefault((java.lang.Object) properties28, (java.lang.Object) properties42);
        java.lang.Object obj46 = properties3.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "tmlog");
        java.io.OutputStream outputStream47 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.storeToXML(outputStream47, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNotNull(objSet16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objEnumeration18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(properties24);
        org.junit.Assert.assertNotNull(properties28);
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "tmlog" + "'", str36, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 50 + "'", int38 == 50);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "tmlog" + "'", str39, "tmlog");
        org.junit.Assert.assertNotNull(properties42);
        org.junit.Assert.assertNotNull(obj43);
// flaky:         org.junit.Assert.assertEquals(obj43.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=true, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=true, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=true, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(obj46);
    }

    @Test
    public void test0141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0141");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        boolean boolean7 = properties3.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        java.util.Enumeration<java.lang.Object> objEnumeration13 = properties11.keys();
        java.lang.Object obj16 = properties11.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection17 = properties11.values();
        boolean boolean18 = properties3.containsKey((java.lang.Object) properties11);
        java.util.Properties properties19 = new java.util.Properties(properties3);
        java.util.Properties properties20 = null;
        java.util.Properties properties21 = new java.util.Properties(properties20);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties23 = atomikosProperties22.asProperties();
        properties21.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties23);
        java.util.Enumeration<java.lang.Object> objEnumeration25 = properties23.keys();
        java.lang.Object obj28 = properties23.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection29 = properties23.values();
        java.util.Properties properties30 = new java.util.Properties();
        java.lang.Object obj33 = properties30.getOrDefault((java.lang.Object) (short) 1, (java.lang.Object) (-1.0d));
        properties23.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties30);
        java.util.Properties properties35 = null;
        java.util.Properties properties36 = new java.util.Properties(properties35);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties38 = atomikosProperties37.asProperties();
        properties36.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties38);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties40.setService("");
        atomikosProperties40.setThreadedTwoPhaseCommit(true);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties45 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties45.setService("");
        atomikosProperties45.setSerialJtaTransactions(true);
        atomikosProperties45.setEnableLogging(false);
        java.lang.String str52 = atomikosProperties45.logBaseName;
        java.lang.Object obj53 = properties38.replace((java.lang.Object) atomikosProperties40, (java.lang.Object) atomikosProperties45);
        boolean boolean54 = properties23.contains((java.lang.Object) properties38);
        java.lang.String str55 = properties38.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties56 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties56.setLogBaseDir("");
        atomikosProperties56.setMaxTimeout(100L);
        long long61 = atomikosProperties56.getDefaultJtaTimeout();
        java.lang.Object obj62 = properties3.putIfAbsent((java.lang.Object) properties38, (java.lang.Object) atomikosProperties56);
        java.lang.Class<?> wildcardClass63 = properties38.getClass();
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNotNull(objEnumeration13);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(objCollection17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(properties23);
        org.junit.Assert.assertNotNull(objEnumeration25);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNotNull(objCollection29);
        org.junit.Assert.assertEquals("'" + obj33 + "' != '" + (-1.0d) + "'", obj33, (-1.0d));
        org.junit.Assert.assertNotNull(properties38);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "tmlog" + "'", str52, "tmlog");
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str55, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 10000L + "'", long61 == 10000L);
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test0142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0142");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Properties properties5 = new java.util.Properties(properties3);
        java.util.Properties properties6 = new java.util.Properties(properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties8 = atomikosProperties7.asProperties();
        java.util.Properties properties9 = atomikosProperties7.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.setService("");
        boolean boolean13 = atomikosProperties10.isEnableLogging();
        java.util.Properties properties14 = atomikosProperties10.asProperties();
        java.lang.Object obj15 = properties3.getOrDefault((java.lang.Object) properties9, (java.lang.Object) atomikosProperties10);
        java.util.Collection<java.lang.Object> objCollection16 = properties3.values();
        properties3.clear();
        java.io.Reader reader18 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.load(reader18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertNotNull(objCollection16);
    }

    @Test
    public void test0143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0143");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Properties properties5 = new java.util.Properties(properties3);
        java.io.OutputStream outputStream6 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.storeToXML(outputStream6, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
    }

    @Test
    public void test0144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0144");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        boolean boolean3 = atomikosProperties0.isEnableLogging();
        java.util.Properties properties4 = atomikosProperties0.asProperties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties6.setService("");
        boolean boolean9 = atomikosProperties6.isEnableLogging();
        java.util.Properties properties10 = atomikosProperties6.asProperties();
        atomikosProperties6.setSerialJtaTransactions(false);
        java.lang.String str13 = atomikosProperties6.getLogBaseName();
        atomikosProperties6.setTransactionManagerUniqueName("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties16.defaultJtaTimeout = (byte) -1;
        java.util.Properties properties19 = atomikosProperties16.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean21 = atomikosProperties20.forceShutdownOnVmExit;
        atomikosProperties20.setSerialJtaTransactions(true);
        java.lang.String str24 = atomikosProperties20.logBaseName;
        atomikosProperties20.service = "tmlog";
        java.util.Properties properties27 = atomikosProperties20.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean29 = atomikosProperties28.forceShutdownOnVmExit;
        java.lang.String str30 = atomikosProperties28.getLogBaseDir();
        java.lang.Object obj31 = properties19.getOrDefault((java.lang.Object) atomikosProperties20, (java.lang.Object) str30);
        java.lang.Object obj32 = properties4.put((java.lang.Object) atomikosProperties6, (java.lang.Object) atomikosProperties20);
        java.util.Properties properties33 = new java.util.Properties(properties4);
        java.lang.String str36 = properties33.getProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(properties4);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNotNull(properties19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "tmlog" + "'", str24, "tmlog");
        org.junit.Assert.assertNotNull(properties27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
    }

    @Test
    public void test0145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0145");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        boolean boolean3 = atomikosProperties0.isEnableLogging();
        java.util.Properties properties4 = atomikosProperties0.asProperties();
        properties4.clear();
        java.util.Properties properties6 = null;
        java.util.Properties properties7 = new java.util.Properties(properties6);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties9 = atomikosProperties8.asProperties();
        properties7.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties9);
        java.util.Enumeration<java.lang.Object> objEnumeration11 = properties9.keys();
        java.lang.Object obj13 = properties4.put((java.lang.Object) properties9, (java.lang.Object) (byte) 0);
        boolean boolean14 = properties9.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean16 = atomikosProperties15.forceShutdownOnVmExit;
        atomikosProperties15.setSerialJtaTransactions(true);
        boolean boolean19 = properties9.containsKey((java.lang.Object) atomikosProperties15);
        atomikosProperties15.setLogBaseName("hi!");
        int int22 = atomikosProperties15.getMaxActives();
        atomikosProperties15.setEnableLogging(true);
        atomikosProperties15.maxActives = 9;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(properties4);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertNotNull(objEnumeration11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 50 + "'", int22 == 50);
    }

    @Test
    public void test0146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0146");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Properties properties5 = new java.util.Properties(properties3);
        java.util.Properties properties6 = new java.util.Properties(properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties8 = atomikosProperties7.asProperties();
        java.util.Properties properties9 = atomikosProperties7.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.setService("");
        boolean boolean13 = atomikosProperties10.isEnableLogging();
        java.util.Properties properties14 = atomikosProperties10.asProperties();
        java.lang.Object obj15 = properties3.getOrDefault((java.lang.Object) properties9, (java.lang.Object) atomikosProperties10);
        java.lang.String str16 = atomikosProperties10.logBaseName;
        atomikosProperties10.setLogBaseDir("");
        long long19 = atomikosProperties10.checkpointInterval;
        atomikosProperties10.maxTimeout = 1;
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tmlog" + "'", str16, "tmlog");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 500L + "'", long19 == 500L);
    }

    @Test
    public void test0147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0147");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        boolean boolean7 = properties3.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        java.util.Enumeration<java.lang.Object> objEnumeration13 = properties11.keys();
        java.lang.Object obj16 = properties11.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection17 = properties11.values();
        boolean boolean18 = properties3.containsKey((java.lang.Object) properties11);
        java.util.Properties properties19 = new java.util.Properties(properties3);
        java.util.Properties properties20 = new java.util.Properties(properties3);
        java.util.Properties properties21 = null;
        java.util.Properties properties22 = new java.util.Properties(properties21);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties24 = atomikosProperties23.asProperties();
        properties22.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties24);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties26.setService("");
        atomikosProperties26.setThreadedTwoPhaseCommit(true);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties31.setService("");
        atomikosProperties31.setSerialJtaTransactions(true);
        atomikosProperties31.setEnableLogging(false);
        java.lang.String str38 = atomikosProperties31.logBaseName;
        java.lang.Object obj39 = properties24.replace((java.lang.Object) atomikosProperties26, (java.lang.Object) atomikosProperties31);
        java.util.Properties properties40 = atomikosProperties31.asProperties();
        boolean boolean41 = properties3.containsKey((java.lang.Object) properties40);
        java.lang.Object obj42 = properties40.clone();
        java.io.InputStream inputStream43 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties40.loadFromXML(inputStream43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNotNull(objEnumeration13);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(objCollection17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(properties24);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNotNull(properties40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(obj42);
// flaky:         org.junit.Assert.assertEquals(obj42.toString(), "{com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.service=, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "{com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.service=, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "{com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.service=, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
    }

    @Test
    public void test0148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0148");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Properties properties5 = new java.util.Properties(properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties7 = atomikosProperties6.asProperties();
        java.util.Set<java.lang.String> strSet8 = properties7.stringPropertyNames();
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties7);
        java.io.Reader reader10 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties5.load(reader10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNotNull(strSet8);
    }

    @Test
    public void test0149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0149");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Properties properties7 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet8 = properties7.keySet();
        boolean boolean9 = properties1.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) properties7);
        java.util.Collection<java.lang.Object> objCollection10 = properties7.values();
        java.util.Enumeration<java.lang.Object> objEnumeration11 = properties7.keys();
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(objCollection10);
        org.junit.Assert.assertNotNull(objEnumeration11);
    }

    @Test
    public void test0150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0150");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        long long5 = atomikosProperties0.getCheckpointInterval();
        atomikosProperties0.maxTimeout = (-1);
        java.util.Properties properties8 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long10 = atomikosProperties9.defaultJtaTimeout;
        boolean boolean11 = atomikosProperties9.enableLogging;
        atomikosProperties9.setSerialJtaTransactions(true);
        java.util.Properties properties14 = atomikosProperties9.asProperties();
        properties8.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties14);
        java.util.Properties properties16 = null;
        java.util.Properties properties17 = new java.util.Properties(properties16);
        java.util.Properties properties18 = new java.util.Properties(properties17);
        java.util.Properties properties19 = null;
        java.util.Properties properties20 = new java.util.Properties(properties19);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties22 = atomikosProperties21.asProperties();
        properties20.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties22);
        java.util.Enumeration<java.lang.Object> objEnumeration24 = properties22.keys();
        boolean boolean26 = properties22.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties27 = null;
        java.util.Properties properties28 = new java.util.Properties(properties27);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties30 = atomikosProperties29.asProperties();
        properties28.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties30);
        java.util.Enumeration<java.lang.Object> objEnumeration32 = properties30.keys();
        java.lang.Object obj35 = properties30.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection36 = properties30.values();
        boolean boolean37 = properties22.containsKey((java.lang.Object) properties30);
        java.util.Properties properties38 = new java.util.Properties(properties22);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties39 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long40 = atomikosProperties39.defaultJtaTimeout;
        boolean boolean41 = atomikosProperties39.enableLogging;
        atomikosProperties39.setSerialJtaTransactions(true);
        java.util.Properties properties44 = atomikosProperties39.asProperties();
        java.util.Properties properties45 = atomikosProperties39.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties46 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean47 = atomikosProperties46.forceShutdownOnVmExit;
        atomikosProperties46.setSerialJtaTransactions(true);
        java.lang.String str50 = atomikosProperties46.logBaseName;
        boolean boolean51 = atomikosProperties46.forceShutdownOnVmExit;
        int int52 = atomikosProperties46.maxActives;
        java.lang.String str53 = atomikosProperties46.logBaseName;
        atomikosProperties46.setForceShutdownOnVmExit(true);
        java.util.Properties properties56 = atomikosProperties46.asProperties();
        boolean boolean57 = atomikosProperties46.isForceShutdownOnVmExit();
        java.util.Properties properties58 = atomikosProperties46.asProperties();
        java.lang.Object obj59 = properties22.replace((java.lang.Object) atomikosProperties39, (java.lang.Object) atomikosProperties46);
        java.lang.String str60 = atomikosProperties46.getLogBaseDir();
        atomikosProperties46.logBaseName = "{}";
        java.util.Properties properties63 = atomikosProperties46.asProperties();
        atomikosProperties46.setThreadedTwoPhaseCommit(false);
        java.lang.Object obj66 = properties14.put((java.lang.Object) properties18, (java.lang.Object) atomikosProperties46);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Enumeration<?> wildcardEnumeration67 = properties14.propertyNames();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.util.Properties cannot be cast to java.lang.String");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 500L + "'", long5 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertNotNull(properties22);
        org.junit.Assert.assertNotNull(objEnumeration24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(properties30);
        org.junit.Assert.assertNotNull(objEnumeration32);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNotNull(objCollection36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 10000L + "'", long40 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(properties44);
        org.junit.Assert.assertNotNull(properties45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "tmlog" + "'", str50, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 50 + "'", int52 == 50);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "tmlog" + "'", str53, "tmlog");
        org.junit.Assert.assertNotNull(properties56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(properties58);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(properties63);
        org.junit.Assert.assertNull(obj66);
    }

    @Test
    public void test0151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0151");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Properties properties5 = new java.util.Properties(properties3);
        java.util.Collection<java.lang.Object> objCollection6 = properties3.values();
        java.util.Properties properties7 = new java.util.Properties(properties3);
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        java.util.Properties properties15 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet16 = properties15.keySet();
        boolean boolean17 = properties9.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) properties15);
        java.util.Enumeration<java.lang.Object> objEnumeration18 = properties9.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long20 = atomikosProperties19.defaultJtaTimeout;
        boolean boolean21 = atomikosProperties19.enableLogging;
        atomikosProperties19.setSerialJtaTransactions(true);
        java.util.Properties properties24 = atomikosProperties19.asProperties();
        java.util.Properties properties25 = null;
        java.util.Properties properties26 = new java.util.Properties(properties25);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties28 = atomikosProperties27.asProperties();
        properties26.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties28);
        java.util.Enumeration<java.lang.Object> objEnumeration30 = properties28.keys();
        java.lang.Object obj33 = properties28.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection34 = properties28.values();
        java.util.Set<java.lang.String> strSet35 = properties28.stringPropertyNames();
        boolean boolean36 = properties24.contains((java.lang.Object) properties28);
        java.lang.Object obj37 = properties3.replace((java.lang.Object) properties9, (java.lang.Object) properties28);
        java.io.OutputStream outputStream38 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.storeToXML(outputStream38, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objCollection6);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNotNull(objSet16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objEnumeration18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10000L + "'", long20 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(properties24);
        org.junit.Assert.assertNotNull(properties28);
        org.junit.Assert.assertNotNull(objEnumeration30);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNotNull(objCollection34);
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(obj37);
    }

    @Test
    public void test0152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0152");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties3 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean4 = atomikosProperties3.enableLogging;
        atomikosProperties3.setMaxActives((int) (byte) 1);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties7.setService("");
        atomikosProperties7.setThreadedTwoPhaseCommit(true);
        long long12 = atomikosProperties7.getCheckpointInterval();
        atomikosProperties7.maxTimeout = (-1);
        java.util.Properties properties15 = atomikosProperties7.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long17 = atomikosProperties16.defaultJtaTimeout;
        boolean boolean18 = atomikosProperties16.enableLogging;
        atomikosProperties16.setSerialJtaTransactions(true);
        java.util.Properties properties21 = atomikosProperties16.asProperties();
        properties15.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties21);
        java.util.Enumeration<java.lang.Object> objEnumeration23 = properties15.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean25 = atomikosProperties24.forceShutdownOnVmExit;
        atomikosProperties24.setSerialJtaTransactions(true);
        java.lang.String str28 = atomikosProperties24.logBaseName;
        boolean boolean29 = atomikosProperties24.forceShutdownOnVmExit;
        int int30 = atomikosProperties24.maxActives;
        java.lang.String str31 = atomikosProperties24.logBaseName;
        atomikosProperties24.setForceShutdownOnVmExit(true);
        java.util.Properties properties34 = atomikosProperties24.asProperties();
        boolean boolean35 = atomikosProperties24.isForceShutdownOnVmExit();
        java.util.Properties properties36 = atomikosProperties24.asProperties();
        boolean boolean37 = properties1.replace((java.lang.Object) (byte) 1, (java.lang.Object) properties15, (java.lang.Object) atomikosProperties24);
        java.util.Properties properties38 = new java.util.Properties(properties1);
        java.lang.Object obj39 = properties38.clone();
        java.io.PrintStream printStream40 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties38.list(printStream40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 500L + "'", long12 == 500L);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10000L + "'", long17 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(properties21);
        org.junit.Assert.assertNotNull(objEnumeration23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "tmlog" + "'", str28, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 50 + "'", int30 == 50);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "tmlog" + "'", str31, "tmlog");
        org.junit.Assert.assertNotNull(properties34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(properties36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertEquals(obj39.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "{}");
    }

    @Test
    public void test0153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0153");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        java.lang.Object obj8 = properties3.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection9 = properties3.values();
        java.util.Properties properties10 = new java.util.Properties();
        java.lang.Object obj13 = properties10.getOrDefault((java.lang.Object) (short) 1, (java.lang.Object) (-1.0d));
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        java.util.Properties properties15 = new java.util.Properties(properties3);
        java.util.Properties properties16 = null;
        java.util.Properties properties17 = new java.util.Properties(properties16);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties19 = atomikosProperties18.asProperties();
        properties17.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties19);
        java.util.Enumeration<java.lang.Object> objEnumeration21 = properties19.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration22 = properties19.elements();
        java.util.Properties properties23 = null;
        java.util.Properties properties24 = new java.util.Properties(properties23);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties26 = atomikosProperties25.asProperties();
        properties24.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties26);
        java.util.Properties properties28 = new java.util.Properties(properties26);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties29.defaultJtaTimeout = (byte) -1;
        java.util.Properties properties32 = atomikosProperties29.asProperties();
        boolean boolean33 = properties26.contains((java.lang.Object) properties32);
        java.util.Properties properties34 = null;
        java.util.Properties properties35 = new java.util.Properties(properties34);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties37 = atomikosProperties36.asProperties();
        properties35.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties37);
        java.util.Enumeration<java.lang.Object> objEnumeration39 = properties37.keys();
        boolean boolean41 = properties37.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties42 = null;
        java.util.Properties properties43 = new java.util.Properties(properties42);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties45 = atomikosProperties44.asProperties();
        properties43.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties45);
        java.util.Enumeration<java.lang.Object> objEnumeration47 = properties45.keys();
        java.lang.Object obj50 = properties45.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection51 = properties45.values();
        boolean boolean52 = properties37.containsKey((java.lang.Object) properties45);
        java.util.Properties properties53 = new java.util.Properties(properties37);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties54 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long55 = atomikosProperties54.defaultJtaTimeout;
        boolean boolean56 = atomikosProperties54.enableLogging;
        atomikosProperties54.setSerialJtaTransactions(true);
        java.util.Properties properties59 = atomikosProperties54.asProperties();
        java.util.Properties properties60 = atomikosProperties54.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties61 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean62 = atomikosProperties61.forceShutdownOnVmExit;
        atomikosProperties61.setSerialJtaTransactions(true);
        java.lang.String str65 = atomikosProperties61.logBaseName;
        boolean boolean66 = atomikosProperties61.forceShutdownOnVmExit;
        int int67 = atomikosProperties61.maxActives;
        java.lang.String str68 = atomikosProperties61.logBaseName;
        atomikosProperties61.setForceShutdownOnVmExit(true);
        java.util.Properties properties71 = atomikosProperties61.asProperties();
        boolean boolean72 = atomikosProperties61.isForceShutdownOnVmExit();
        java.util.Properties properties73 = atomikosProperties61.asProperties();
        java.lang.Object obj74 = properties37.replace((java.lang.Object) atomikosProperties54, (java.lang.Object) atomikosProperties61);
        java.lang.Object obj75 = properties19.putIfAbsent((java.lang.Object) properties32, (java.lang.Object) atomikosProperties61);
        java.util.Collection<java.lang.Object> objCollection76 = properties32.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet77 = properties32.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties78 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean79 = atomikosProperties78.enableLogging;
        atomikosProperties78.setMaxActives((int) (byte) 1);
        java.lang.Object obj82 = properties15.replace((java.lang.Object) properties32, (java.lang.Object) atomikosProperties78);
        boolean boolean83 = atomikosProperties78.forceShutdownOnVmExit;
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(objCollection9);
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + (-1.0d) + "'", obj13, (-1.0d));
        org.junit.Assert.assertNotNull(properties19);
        org.junit.Assert.assertNotNull(objEnumeration21);
        org.junit.Assert.assertNotNull(objEnumeration22);
        org.junit.Assert.assertNotNull(properties26);
        org.junit.Assert.assertNotNull(properties32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(properties37);
        org.junit.Assert.assertNotNull(objEnumeration39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(properties45);
        org.junit.Assert.assertNotNull(objEnumeration47);
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertNotNull(objCollection51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 10000L + "'", long55 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(properties59);
        org.junit.Assert.assertNotNull(properties60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "tmlog" + "'", str65, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 50 + "'", int67 == 50);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "tmlog" + "'", str68, "tmlog");
        org.junit.Assert.assertNotNull(properties71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(properties73);
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertNull(obj75);
        org.junit.Assert.assertNotNull(objCollection76);
        org.junit.Assert.assertNotNull(objEntrySet77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNull(obj82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test0154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0154");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        boolean boolean7 = properties3.containsValue((java.lang.Object) 0.0f);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long10 = atomikosProperties9.defaultJtaTimeout;
        boolean boolean11 = atomikosProperties9.enableLogging;
        atomikosProperties9.setSerialJtaTransactions(true);
        java.lang.Object obj14 = properties3.putIfAbsent((java.lang.Object) 100L, (java.lang.Object) true);
        java.util.Properties properties15 = new java.util.Properties(properties3);
        properties3.clear();
        java.util.Properties properties17 = new java.util.Properties(properties3);
        java.lang.String str20 = properties17.getProperty("", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str20, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
    }

    @Test
    public void test0155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0155");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        boolean boolean3 = atomikosProperties0.isEnableLogging();
        java.util.Properties properties4 = atomikosProperties0.asProperties();
        properties4.clear();
        java.io.OutputStream outputStream6 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties4.storeToXML(outputStream6, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(properties4);
    }

    @Test
    public void test0156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0156");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        atomikosProperties0.setSerialJtaTransactions(true);
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        properties5.clear();
        java.util.Properties properties7 = null;
        java.util.Properties properties8 = new java.util.Properties(properties7);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties10 = atomikosProperties9.asProperties();
        properties8.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        java.util.Enumeration<java.lang.Object> objEnumeration12 = properties10.keys();
        boolean boolean14 = properties10.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties15 = new java.util.Properties(properties10);
        java.lang.Object obj16 = properties15.clone();
        boolean boolean17 = properties5.equals((java.lang.Object) properties15);
        java.io.PrintWriter printWriter18 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties5.list(printWriter18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertNotNull(objEnumeration12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "{}");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test0157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0157");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.setSerialJtaTransactions(true);
        java.lang.String str4 = atomikosProperties0.logBaseName;
        atomikosProperties0.service = "tmlog";
        long long7 = atomikosProperties0.checkpointInterval;
        boolean boolean8 = atomikosProperties0.isForceShutdownOnVmExit();
        boolean boolean9 = atomikosProperties0.isSerialJtaTransactions();
        boolean boolean10 = atomikosProperties0.threadedTwoPhaseCommit;
        atomikosProperties0.checkpointInterval = 9L;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tmlog" + "'", str4, "tmlog");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0158");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        java.lang.Object obj8 = properties3.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection9 = properties3.values();
        java.util.Properties properties10 = new java.util.Properties();
        java.lang.Object obj13 = properties10.getOrDefault((java.lang.Object) (short) 1, (java.lang.Object) (-1.0d));
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        java.util.Properties properties15 = new java.util.Properties(properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean17 = atomikosProperties16.forceShutdownOnVmExit;
        atomikosProperties16.setSerialJtaTransactions(true);
        java.lang.String str20 = atomikosProperties16.logBaseName;
        atomikosProperties16.service = "tmlog";
        boolean boolean23 = properties15.containsValue((java.lang.Object) "tmlog");
        java.util.Properties properties24 = new java.util.Properties(properties15);
        java.lang.String str27 = properties15.getProperty("", "{}");
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(objCollection9);
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + (-1.0d) + "'", obj13, (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "tmlog" + "'", str20, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "{}" + "'", str27, "{}");
    }

    @Test
    public void test0159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0159");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        java.lang.Object obj8 = properties3.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection9 = properties3.values();
        java.util.Set<java.lang.String> strSet10 = properties3.stringPropertyNames();
        java.util.Enumeration<java.lang.Object> objEnumeration11 = properties3.elements();
        java.io.OutputStream outputStream12 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.save(outputStream12, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(objCollection9);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(objEnumeration11);
    }

    @Test
    public void test0160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0160");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        boolean boolean3 = atomikosProperties0.isEnableLogging();
        java.util.Properties properties4 = atomikosProperties0.asProperties();
        properties4.clear();
        java.util.Properties properties6 = null;
        java.util.Properties properties7 = new java.util.Properties(properties6);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties9 = atomikosProperties8.asProperties();
        properties7.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties9);
        java.util.Enumeration<java.lang.Object> objEnumeration11 = properties9.keys();
        java.lang.Object obj13 = properties4.put((java.lang.Object) properties9, (java.lang.Object) (byte) 0);
        boolean boolean14 = properties9.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean16 = atomikosProperties15.forceShutdownOnVmExit;
        atomikosProperties15.setSerialJtaTransactions(true);
        boolean boolean19 = properties9.containsKey((java.lang.Object) atomikosProperties15);
        atomikosProperties15.setLogBaseName("hi!");
        atomikosProperties15.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.Class<?> wildcardClass24 = atomikosProperties15.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(properties4);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertNotNull(objEnumeration11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0161");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        boolean boolean7 = properties3.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        java.util.Properties properties15 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet16 = properties15.keySet();
        boolean boolean17 = properties9.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) properties15);
        java.util.Enumeration<java.lang.Object> objEnumeration18 = properties9.elements();
        boolean boolean20 = properties3.remove((java.lang.Object) properties9, (java.lang.Object) 50);
        java.util.Properties properties21 = null;
        java.util.Properties properties22 = new java.util.Properties(properties21);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties24 = atomikosProperties23.asProperties();
        properties22.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties24);
        java.util.Properties properties26 = new java.util.Properties(properties24);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties28 = atomikosProperties27.asProperties();
        java.util.Set<java.lang.String> strSet29 = properties28.stringPropertyNames();
        properties26.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties28);
        java.util.Properties properties31 = new java.util.Properties(properties28);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean33 = atomikosProperties32.forceShutdownOnVmExit;
        atomikosProperties32.setSerialJtaTransactions(true);
        java.lang.String str36 = atomikosProperties32.logBaseName;
        boolean boolean37 = atomikosProperties32.forceShutdownOnVmExit;
        int int38 = atomikosProperties32.maxActives;
        java.lang.String str39 = atomikosProperties32.logBaseName;
        atomikosProperties32.setForceShutdownOnVmExit(true);
        java.util.Properties properties42 = atomikosProperties32.asProperties();
        java.lang.Object obj43 = properties3.getOrDefault((java.lang.Object) properties28, (java.lang.Object) properties42);
        java.lang.Object obj46 = properties3.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "tmlog");
        java.io.OutputStream outputStream47 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.storeToXML(outputStream47, "hi!", "{}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNotNull(objSet16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objEnumeration18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(properties24);
        org.junit.Assert.assertNotNull(properties28);
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "tmlog" + "'", str36, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 50 + "'", int38 == 50);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "tmlog" + "'", str39, "tmlog");
        org.junit.Assert.assertNotNull(properties42);
        org.junit.Assert.assertNotNull(obj43);
// flaky:         org.junit.Assert.assertEquals(obj43.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=true, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=true, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=true, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(obj46);
    }

    @Test
    public void test0162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0162");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        long long5 = atomikosProperties0.getCheckpointInterval();
        boolean boolean6 = atomikosProperties0.threadedTwoPhaseCommit;
        atomikosProperties0.transactionManagerUniqueName = "tmlog";
        boolean boolean9 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.setForceShutdownOnVmExit(true);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 500L + "'", long5 == 500L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test0163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0163");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.setSerialJtaTransactions(true);
        java.lang.String str4 = atomikosProperties0.logBaseName;
        boolean boolean5 = atomikosProperties0.forceShutdownOnVmExit;
        int int6 = atomikosProperties0.maxActives;
        java.lang.String str7 = atomikosProperties0.logBaseName;
        atomikosProperties0.setForceShutdownOnVmExit(true);
        java.util.Properties properties10 = atomikosProperties0.asProperties();
        boolean boolean11 = atomikosProperties0.isForceShutdownOnVmExit();
        java.util.Properties properties12 = atomikosProperties0.asProperties();
        java.lang.String str13 = atomikosProperties0.getLogBaseName();
        long long14 = atomikosProperties0.getDefaultJtaTimeout();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tmlog" + "'", str4, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 50 + "'", int6 == 50);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "tmlog" + "'", str7, "tmlog");
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(properties12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10000L + "'", long14 == 10000L);
    }

    @Test
    public void test0164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0164");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Properties properties5 = new java.util.Properties(properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties7 = atomikosProperties6.asProperties();
        java.util.Set<java.lang.String> strSet8 = properties7.stringPropertyNames();
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties7);
        int int10 = properties5.size();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet11 = properties5.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties13 = atomikosProperties12.asProperties();
        atomikosProperties12.checkpointInterval = 1L;
        boolean boolean16 = atomikosProperties12.forceShutdownOnVmExit;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties17.setService("");
        atomikosProperties17.setThreadedTwoPhaseCommit(true);
        long long22 = atomikosProperties17.getCheckpointInterval();
        atomikosProperties17.setMaxTimeout(0L);
        atomikosProperties17.setSerialJtaTransactions(false);
        boolean boolean27 = atomikosProperties17.isThreadedTwoPhaseCommit();
        long long28 = atomikosProperties17.getDefaultJtaTimeout();
        java.util.Properties properties29 = atomikosProperties17.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean31 = atomikosProperties30.forceShutdownOnVmExit;
        atomikosProperties30.setSerialJtaTransactions(true);
        java.lang.String str34 = atomikosProperties30.logBaseName;
        boolean boolean35 = atomikosProperties30.forceShutdownOnVmExit;
        atomikosProperties30.logBaseName = "tmlog";
        atomikosProperties30.enableLogging = true;
        java.lang.String str40 = atomikosProperties30.service;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean41 = properties5.replace((java.lang.Object) boolean16, (java.lang.Object) atomikosProperties17, (java.lang.Object) str40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 9 + "'", int10 == 9);
        org.junit.Assert.assertNotNull(objEntrySet11);
        org.junit.Assert.assertNotNull(properties13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 500L + "'", long22 == 500L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 10000L + "'", long28 == 10000L);
        org.junit.Assert.assertNotNull(properties29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "tmlog" + "'", str34, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(str40);
    }

    @Test
    public void test0165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0165");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        boolean boolean7 = properties3.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        java.util.Properties properties15 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet16 = properties15.keySet();
        boolean boolean17 = properties9.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) properties15);
        java.util.Enumeration<java.lang.Object> objEnumeration18 = properties9.elements();
        boolean boolean20 = properties3.remove((java.lang.Object) properties9, (java.lang.Object) 50);
        java.io.Writer writer21 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties9.store(writer21, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNotNull(objSet16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objEnumeration18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0166");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        boolean boolean3 = atomikosProperties0.isEnableLogging();
        java.util.Properties properties4 = atomikosProperties0.asProperties();
        properties4.clear();
        java.util.Properties properties6 = null;
        java.util.Properties properties7 = new java.util.Properties(properties6);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties9 = atomikosProperties8.asProperties();
        properties7.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties9);
        java.util.Enumeration<java.lang.Object> objEnumeration11 = properties9.keys();
        java.lang.Object obj13 = properties4.put((java.lang.Object) properties9, (java.lang.Object) (byte) 0);
        boolean boolean14 = properties9.isEmpty();
        boolean boolean15 = properties9.isEmpty();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet16 = properties9.entrySet();
        java.util.Properties properties17 = null;
        java.util.Properties properties18 = new java.util.Properties(properties17);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties20 = atomikosProperties19.asProperties();
        properties18.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties20);
        java.util.Properties properties22 = new java.util.Properties(properties20);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties24 = atomikosProperties23.asProperties();
        java.util.Set<java.lang.String> strSet25 = properties24.stringPropertyNames();
        properties22.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties24);
        int int27 = properties22.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties28.defaultJtaTimeout = (byte) -1;
        java.util.Properties properties31 = atomikosProperties28.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean33 = atomikosProperties32.forceShutdownOnVmExit;
        atomikosProperties32.setSerialJtaTransactions(true);
        java.lang.String str36 = atomikosProperties32.logBaseName;
        atomikosProperties32.service = "tmlog";
        java.util.Properties properties39 = atomikosProperties32.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean41 = atomikosProperties40.forceShutdownOnVmExit;
        java.lang.String str42 = atomikosProperties40.getLogBaseDir();
        java.lang.Object obj43 = properties31.getOrDefault((java.lang.Object) atomikosProperties32, (java.lang.Object) str42);
        long long44 = atomikosProperties32.getDefaultJtaTimeout();
        atomikosProperties32.setLogBaseName("{}");
        int int47 = atomikosProperties32.maxActives;
        java.lang.Object obj48 = properties9.replace((java.lang.Object) properties22, (java.lang.Object) int47);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties49.setService("");
        atomikosProperties49.setThreadedTwoPhaseCommit(true);
        long long54 = atomikosProperties49.getCheckpointInterval();
        java.util.Properties properties55 = atomikosProperties49.asProperties();
        java.util.Properties properties56 = null;
        java.util.Properties properties57 = new java.util.Properties(properties56);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties58 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties59 = atomikosProperties58.asProperties();
        properties57.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties59);
        java.util.Enumeration<java.lang.Object> objEnumeration61 = properties59.keys();
        boolean boolean63 = properties59.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties64 = null;
        java.util.Properties properties65 = new java.util.Properties(properties64);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties66 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties67 = atomikosProperties66.asProperties();
        properties65.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties67);
        java.util.Enumeration<java.lang.Object> objEnumeration69 = properties67.keys();
        java.lang.Object obj72 = properties67.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection73 = properties67.values();
        boolean boolean74 = properties59.containsKey((java.lang.Object) properties67);
        java.util.Properties properties75 = new java.util.Properties(properties59);
        java.util.Set<java.lang.Object> objSet76 = properties59.keySet();
        java.util.Enumeration<java.lang.Object> objEnumeration77 = properties59.keys();
        java.lang.Object obj78 = properties9.getOrDefault((java.lang.Object) properties55, (java.lang.Object) properties59);
        java.util.Collection<java.lang.Object> objCollection79 = properties9.values();
        java.lang.String str80 = properties9.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(properties4);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertNotNull(objEnumeration11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(objEntrySet16);
        org.junit.Assert.assertNotNull(properties20);
        org.junit.Assert.assertNotNull(properties24);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertNotNull(properties31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "tmlog" + "'", str36, "tmlog");
        org.junit.Assert.assertNotNull(properties39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 10000L + "'", long44 == 10000L);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 50 + "'", int47 == 50);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 500L + "'", long54 == 500L);
        org.junit.Assert.assertNotNull(properties55);
        org.junit.Assert.assertNotNull(properties59);
        org.junit.Assert.assertNotNull(objEnumeration61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(properties67);
        org.junit.Assert.assertNotNull(objEnumeration69);
        org.junit.Assert.assertNull(obj72);
        org.junit.Assert.assertNotNull(objCollection73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(objSet76);
        org.junit.Assert.assertNotNull(objEnumeration77);
        org.junit.Assert.assertNotNull(obj78);
// flaky:         org.junit.Assert.assertEquals(obj78.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj78), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj78), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNotNull(objCollection79);
// flaky:         org.junit.Assert.assertEquals("'" + str80 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str80, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
    }

    @Test
    public void test0167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0167");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        atomikosProperties0.logBaseDir = "hi!";
        java.lang.Class<?> wildcardClass5 = atomikosProperties0.getClass();
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0168");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        boolean boolean7 = properties3.containsValue((java.lang.Object) 0.0f);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long10 = atomikosProperties9.defaultJtaTimeout;
        boolean boolean11 = atomikosProperties9.enableLogging;
        atomikosProperties9.setSerialJtaTransactions(true);
        java.lang.Object obj14 = properties3.putIfAbsent((java.lang.Object) 100L, (java.lang.Object) true);
        java.util.Properties properties15 = new java.util.Properties(properties3);
        properties3.clear();
        java.util.Properties properties17 = new java.util.Properties(properties3);
        java.io.InputStream inputStream18 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties17.load(inputStream18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(obj14);
    }

    @Test
    public void test0169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0169");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration6 = properties3.elements();
        java.util.Properties properties7 = null;
        java.util.Properties properties8 = new java.util.Properties(properties7);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties10 = atomikosProperties9.asProperties();
        properties8.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        java.util.Properties properties12 = new java.util.Properties(properties10);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties13.defaultJtaTimeout = (byte) -1;
        java.util.Properties properties16 = atomikosProperties13.asProperties();
        boolean boolean17 = properties10.contains((java.lang.Object) properties16);
        java.util.Properties properties18 = null;
        java.util.Properties properties19 = new java.util.Properties(properties18);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties21 = atomikosProperties20.asProperties();
        properties19.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties21);
        java.util.Enumeration<java.lang.Object> objEnumeration23 = properties21.keys();
        boolean boolean25 = properties21.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties26 = null;
        java.util.Properties properties27 = new java.util.Properties(properties26);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties29 = atomikosProperties28.asProperties();
        properties27.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties29);
        java.util.Enumeration<java.lang.Object> objEnumeration31 = properties29.keys();
        java.lang.Object obj34 = properties29.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection35 = properties29.values();
        boolean boolean36 = properties21.containsKey((java.lang.Object) properties29);
        java.util.Properties properties37 = new java.util.Properties(properties21);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long39 = atomikosProperties38.defaultJtaTimeout;
        boolean boolean40 = atomikosProperties38.enableLogging;
        atomikosProperties38.setSerialJtaTransactions(true);
        java.util.Properties properties43 = atomikosProperties38.asProperties();
        java.util.Properties properties44 = atomikosProperties38.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties45 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean46 = atomikosProperties45.forceShutdownOnVmExit;
        atomikosProperties45.setSerialJtaTransactions(true);
        java.lang.String str49 = atomikosProperties45.logBaseName;
        boolean boolean50 = atomikosProperties45.forceShutdownOnVmExit;
        int int51 = atomikosProperties45.maxActives;
        java.lang.String str52 = atomikosProperties45.logBaseName;
        atomikosProperties45.setForceShutdownOnVmExit(true);
        java.util.Properties properties55 = atomikosProperties45.asProperties();
        boolean boolean56 = atomikosProperties45.isForceShutdownOnVmExit();
        java.util.Properties properties57 = atomikosProperties45.asProperties();
        java.lang.Object obj58 = properties21.replace((java.lang.Object) atomikosProperties38, (java.lang.Object) atomikosProperties45);
        java.lang.Object obj59 = properties3.putIfAbsent((java.lang.Object) properties16, (java.lang.Object) atomikosProperties45);
        java.io.OutputStream outputStream60 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties16.save(outputStream60, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNotNull(objEnumeration6);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(properties21);
        org.junit.Assert.assertNotNull(objEnumeration23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(properties29);
        org.junit.Assert.assertNotNull(objEnumeration31);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNotNull(objCollection35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 10000L + "'", long39 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(properties43);
        org.junit.Assert.assertNotNull(properties44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "tmlog" + "'", str49, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 50 + "'", int51 == 50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "tmlog" + "'", str52, "tmlog");
        org.junit.Assert.assertNotNull(properties55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(properties57);
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertNull(obj59);
    }

    @Test
    public void test0170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0170");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        boolean boolean7 = properties3.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        java.util.Properties properties15 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet16 = properties15.keySet();
        boolean boolean17 = properties9.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) properties15);
        java.util.Enumeration<java.lang.Object> objEnumeration18 = properties9.elements();
        boolean boolean20 = properties3.remove((java.lang.Object) properties9, (java.lang.Object) 50);
        java.util.Properties properties21 = null;
        java.util.Properties properties22 = new java.util.Properties(properties21);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties24 = atomikosProperties23.asProperties();
        properties22.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties24);
        java.util.Properties properties26 = new java.util.Properties(properties24);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties27.defaultJtaTimeout = (byte) -1;
        java.util.Properties properties30 = atomikosProperties27.asProperties();
        boolean boolean31 = properties24.contains((java.lang.Object) properties30);
        java.util.Properties properties32 = null;
        java.util.Properties properties33 = new java.util.Properties(properties32);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties34 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties35 = atomikosProperties34.asProperties();
        properties33.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties35);
        java.util.Enumeration<java.lang.Object> objEnumeration37 = properties35.keys();
        boolean boolean39 = properties35.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties40 = new java.util.Properties(properties35);
        java.lang.Object obj41 = properties9.replace((java.lang.Object) properties30, (java.lang.Object) properties40);
        properties40.clear();
        java.io.Reader reader43 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties40.load(reader43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNotNull(objSet16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objEnumeration18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(properties24);
        org.junit.Assert.assertNotNull(properties30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(properties35);
        org.junit.Assert.assertNotNull(objEnumeration37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(obj41);
    }

    @Test
    public void test0171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0171");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        boolean boolean7 = properties3.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        java.util.Properties properties15 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet16 = properties15.keySet();
        boolean boolean17 = properties9.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) properties15);
        java.util.Enumeration<java.lang.Object> objEnumeration18 = properties9.elements();
        boolean boolean20 = properties3.remove((java.lang.Object) properties9, (java.lang.Object) 50);
        java.util.Properties properties21 = null;
        java.util.Properties properties22 = new java.util.Properties(properties21);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties24 = atomikosProperties23.asProperties();
        properties22.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties24);
        java.util.Properties properties26 = new java.util.Properties(properties24);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties27.defaultJtaTimeout = (byte) -1;
        java.util.Properties properties30 = atomikosProperties27.asProperties();
        boolean boolean31 = properties24.contains((java.lang.Object) properties30);
        java.util.Properties properties32 = null;
        java.util.Properties properties33 = new java.util.Properties(properties32);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties34 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties35 = atomikosProperties34.asProperties();
        properties33.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties35);
        java.util.Enumeration<java.lang.Object> objEnumeration37 = properties35.keys();
        boolean boolean39 = properties35.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties40 = new java.util.Properties(properties35);
        java.lang.Object obj41 = properties9.replace((java.lang.Object) properties30, (java.lang.Object) properties40);
        java.util.Properties properties42 = new java.util.Properties(properties40);
        java.io.OutputStream outputStream43 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties40.storeToXML(outputStream43, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNotNull(objSet16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objEnumeration18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(properties24);
        org.junit.Assert.assertNotNull(properties30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(properties35);
        org.junit.Assert.assertNotNull(objEnumeration37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(obj41);
    }

    @Test
    public void test0172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0172");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        long long5 = atomikosProperties0.getCheckpointInterval();
        atomikosProperties0.maxTimeout = (-1);
        java.util.Properties properties8 = atomikosProperties0.asProperties();
        java.util.Enumeration<?> wildcardEnumeration9 = properties8.propertyNames();
        java.util.Set<java.lang.String> strSet10 = properties8.stringPropertyNames();
        java.util.Properties properties11 = null;
        java.util.Properties properties12 = new java.util.Properties(properties11);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties14 = atomikosProperties13.asProperties();
        properties12.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties14);
        java.util.Properties properties16 = new java.util.Properties(properties14);
        java.util.Properties properties17 = new java.util.Properties(properties16);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties18.setService("");
        atomikosProperties18.setSerialJtaTransactions(true);
        atomikosProperties18.setEnableLogging(false);
        atomikosProperties18.logBaseName = "tmlog";
        int int27 = atomikosProperties18.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties28.setService("");
        atomikosProperties28.setSerialJtaTransactions(true);
        atomikosProperties28.setEnableLogging(false);
        atomikosProperties28.logBaseName = "tmlog";
        atomikosProperties28.maxActives = 1;
        atomikosProperties28.setEnableLogging(true);
        java.lang.String str41 = atomikosProperties28.service;
        atomikosProperties28.setCheckpointInterval((long) (byte) 0);
        long long44 = atomikosProperties28.getDefaultJtaTimeout();
        boolean boolean45 = properties17.remove((java.lang.Object) atomikosProperties18, (java.lang.Object) long44);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties46 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties46.setService("");
        boolean boolean49 = atomikosProperties46.isEnableLogging();
        java.util.Properties properties50 = atomikosProperties46.asProperties();
        properties50.clear();
        java.util.Properties properties52 = null;
        java.util.Properties properties53 = new java.util.Properties(properties52);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties54 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties55 = atomikosProperties54.asProperties();
        properties53.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties55);
        java.util.Enumeration<java.lang.Object> objEnumeration57 = properties55.keys();
        java.lang.Object obj59 = properties50.put((java.lang.Object) properties55, (java.lang.Object) (byte) 0);
        boolean boolean60 = properties55.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties61 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean62 = atomikosProperties61.forceShutdownOnVmExit;
        atomikosProperties61.setSerialJtaTransactions(true);
        boolean boolean65 = properties55.containsKey((java.lang.Object) atomikosProperties61);
        atomikosProperties61.setLogBaseName("hi!");
        int int68 = atomikosProperties61.getMaxActives();
        atomikosProperties61.setCheckpointInterval((long) (short) -1);
        atomikosProperties61.setLogBaseDir("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.Object obj73 = properties8.put((java.lang.Object) properties17, (java.lang.Object) atomikosProperties61);
        java.io.PrintWriter printWriter74 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties17.list(printWriter74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 500L + "'", long5 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertNotNull(wildcardEnumeration9);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 50 + "'", int27 == 50);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 10000L + "'", long44 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(properties50);
        org.junit.Assert.assertNotNull(properties55);
        org.junit.Assert.assertNotNull(objEnumeration57);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 50 + "'", int68 == 50);
        org.junit.Assert.assertNull(obj73);
    }

    @Test
    public void test0173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0173");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = null;
        java.util.Properties properties2 = new java.util.Properties(properties1);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties3 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties4 = atomikosProperties3.asProperties();
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        java.util.Enumeration<java.lang.Object> objEnumeration6 = properties4.keys();
        boolean boolean8 = properties4.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties9 = null;
        java.util.Properties properties10 = new java.util.Properties(properties9);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties12 = atomikosProperties11.asProperties();
        properties10.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties12);
        java.util.Enumeration<java.lang.Object> objEnumeration14 = properties12.keys();
        java.lang.Object obj17 = properties12.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection18 = properties12.values();
        boolean boolean19 = properties4.containsKey((java.lang.Object) properties12);
        java.util.Properties properties20 = new java.util.Properties(properties4);
        java.util.Properties properties21 = new java.util.Properties(properties4);
        java.lang.String str22 = properties21.toString();
        java.lang.Object obj25 = properties21.setProperty("tmlog", "");
        java.util.Properties properties26 = new java.util.Properties(properties21);
        java.util.Properties properties27 = new java.util.Properties(properties21);
        java.lang.Object obj28 = properties0.remove((java.lang.Object) properties27);
        java.lang.String str29 = properties0.toString();
        java.util.Enumeration<java.lang.Object> objEnumeration30 = properties0.keys();
        java.io.PrintWriter printWriter31 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.list(printWriter31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties4);
        org.junit.Assert.assertNotNull(objEnumeration6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(properties12);
        org.junit.Assert.assertNotNull(objEnumeration14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(objCollection18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{}" + "'", str22, "{}");
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "{}" + "'", str29, "{}");
        org.junit.Assert.assertNotNull(objEnumeration30);
    }

    @Test
    public void test0174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0174");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        int int3 = atomikosProperties0.getMaxActives();
        atomikosProperties0.checkpointInterval = (byte) 0;
        atomikosProperties0.logBaseName = "tmlog";
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 50 + "'", int3 == 50);
    }

    @Test
    public void test0175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0175");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.setSerialJtaTransactions(true);
        java.lang.String str4 = atomikosProperties0.logBaseName;
        boolean boolean5 = atomikosProperties0.forceShutdownOnVmExit;
        int int6 = atomikosProperties0.maxActives;
        java.lang.String str7 = atomikosProperties0.logBaseName;
        java.lang.String str8 = atomikosProperties0.getService();
        java.lang.String str9 = atomikosProperties0.getService();
        boolean boolean10 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.service = "{}";
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tmlog" + "'", str4, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 50 + "'", int6 == 50);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "tmlog" + "'", str7, "tmlog");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test0176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0176");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        boolean boolean7 = properties3.containsValue((java.lang.Object) 0.0f);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long10 = atomikosProperties9.defaultJtaTimeout;
        boolean boolean11 = atomikosProperties9.enableLogging;
        atomikosProperties9.setSerialJtaTransactions(true);
        java.lang.Object obj14 = properties3.putIfAbsent((java.lang.Object) 100L, (java.lang.Object) true);
        java.util.Properties properties15 = new java.util.Properties(properties3);
        java.util.Properties properties16 = new java.util.Properties(properties15);
        java.util.Collection<java.lang.Object> objCollection17 = properties16.values();
        java.io.PrintWriter printWriter18 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties16.list(printWriter18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(objCollection17);
    }

    @Test
    public void test0177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0177");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Properties properties5 = new java.util.Properties(properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties7 = atomikosProperties6.asProperties();
        java.util.Set<java.lang.String> strSet8 = properties7.stringPropertyNames();
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties7);
        properties7.clear();
        java.util.Set<java.lang.Object> objSet11 = properties7.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties13.setService("");
        atomikosProperties13.setThreadedTwoPhaseCommit(true);
        long long18 = atomikosProperties13.getCheckpointInterval();
        atomikosProperties13.maxTimeout = (-1);
        java.util.Properties properties21 = atomikosProperties13.asProperties();
        java.lang.Object obj22 = properties7.putIfAbsent((java.lang.Object) atomikosProperties12, (java.lang.Object) properties21);
        java.io.OutputStream outputStream23 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties21.storeToXML(outputStream23, "", "{}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(objSet11);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 500L + "'", long18 == 500L);
        org.junit.Assert.assertNotNull(properties21);
        org.junit.Assert.assertNull(obj22);
    }

    @Test
    public void test0178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0178");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Properties properties5 = new java.util.Properties(properties3);
        java.util.Collection<java.lang.Object> objCollection6 = properties3.values();
        java.util.Properties properties7 = new java.util.Properties(properties3);
        properties3.clear();
        java.util.Properties properties9 = new java.util.Properties(properties3);
        java.io.InputStream inputStream10 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties9.loadFromXML(inputStream10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objCollection6);
    }

    @Test
    public void test0179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0179");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration6 = properties3.elements();
        java.util.Properties properties7 = null;
        java.util.Properties properties8 = new java.util.Properties(properties7);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties10 = atomikosProperties9.asProperties();
        properties8.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        java.util.Properties properties12 = new java.util.Properties(properties10);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties13.defaultJtaTimeout = (byte) -1;
        java.util.Properties properties16 = atomikosProperties13.asProperties();
        boolean boolean17 = properties10.contains((java.lang.Object) properties16);
        java.util.Properties properties18 = null;
        java.util.Properties properties19 = new java.util.Properties(properties18);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties21 = atomikosProperties20.asProperties();
        properties19.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties21);
        java.util.Enumeration<java.lang.Object> objEnumeration23 = properties21.keys();
        boolean boolean25 = properties21.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties26 = null;
        java.util.Properties properties27 = new java.util.Properties(properties26);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties29 = atomikosProperties28.asProperties();
        properties27.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties29);
        java.util.Enumeration<java.lang.Object> objEnumeration31 = properties29.keys();
        java.lang.Object obj34 = properties29.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection35 = properties29.values();
        boolean boolean36 = properties21.containsKey((java.lang.Object) properties29);
        java.util.Properties properties37 = new java.util.Properties(properties21);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long39 = atomikosProperties38.defaultJtaTimeout;
        boolean boolean40 = atomikosProperties38.enableLogging;
        atomikosProperties38.setSerialJtaTransactions(true);
        java.util.Properties properties43 = atomikosProperties38.asProperties();
        java.util.Properties properties44 = atomikosProperties38.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties45 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean46 = atomikosProperties45.forceShutdownOnVmExit;
        atomikosProperties45.setSerialJtaTransactions(true);
        java.lang.String str49 = atomikosProperties45.logBaseName;
        boolean boolean50 = atomikosProperties45.forceShutdownOnVmExit;
        int int51 = atomikosProperties45.maxActives;
        java.lang.String str52 = atomikosProperties45.logBaseName;
        atomikosProperties45.setForceShutdownOnVmExit(true);
        java.util.Properties properties55 = atomikosProperties45.asProperties();
        boolean boolean56 = atomikosProperties45.isForceShutdownOnVmExit();
        java.util.Properties properties57 = atomikosProperties45.asProperties();
        java.lang.Object obj58 = properties21.replace((java.lang.Object) atomikosProperties38, (java.lang.Object) atomikosProperties45);
        java.lang.Object obj59 = properties3.putIfAbsent((java.lang.Object) properties16, (java.lang.Object) atomikosProperties45);
        java.lang.String str60 = atomikosProperties45.logBaseDir;
        long long61 = atomikosProperties45.getMaxTimeout();
        atomikosProperties45.setDefaultJtaTimeout((long) ' ');
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNotNull(objEnumeration6);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(properties21);
        org.junit.Assert.assertNotNull(objEnumeration23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(properties29);
        org.junit.Assert.assertNotNull(objEnumeration31);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNotNull(objCollection35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 10000L + "'", long39 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(properties43);
        org.junit.Assert.assertNotNull(properties44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "tmlog" + "'", str49, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 50 + "'", int51 == 50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "tmlog" + "'", str52, "tmlog");
        org.junit.Assert.assertNotNull(properties55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(properties57);
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 300000L + "'", long61 == 300000L);
    }

    @Test
    public void test0180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0180");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        java.lang.Object obj8 = properties3.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection9 = properties3.values();
        java.util.Properties properties10 = new java.util.Properties();
        java.lang.Object obj13 = properties10.getOrDefault((java.lang.Object) (short) 1, (java.lang.Object) (-1.0d));
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        java.lang.String str15 = properties10.toString();
        java.io.PrintStream printStream16 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties10.list(printStream16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(objCollection9);
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + (-1.0d) + "'", obj13, (-1.0d));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{}" + "'", str15, "{}");
    }

    @Test
    public void test0181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0181");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.setSerialJtaTransactions(true);
        java.lang.String str4 = atomikosProperties0.logBaseName;
        boolean boolean5 = atomikosProperties0.forceShutdownOnVmExit;
        int int6 = atomikosProperties0.maxActives;
        java.lang.String str7 = atomikosProperties0.logBaseName;
        atomikosProperties0.setForceShutdownOnVmExit(true);
        java.util.Properties properties10 = atomikosProperties0.asProperties();
        boolean boolean11 = atomikosProperties0.isForceShutdownOnVmExit();
        java.util.Properties properties12 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties13.setService("");
        atomikosProperties13.setSerialJtaTransactions(true);
        atomikosProperties13.setEnableLogging(false);
        java.lang.String str20 = atomikosProperties13.logBaseName;
        boolean boolean21 = atomikosProperties13.isSerialJtaTransactions();
        java.util.Properties properties22 = null;
        java.util.Properties properties23 = new java.util.Properties(properties22);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties25 = atomikosProperties24.asProperties();
        properties23.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties25);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties25.keys();
        java.lang.Object obj30 = properties25.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection31 = properties25.values();
        java.util.Properties properties32 = new java.util.Properties();
        java.lang.Object obj35 = properties32.getOrDefault((java.lang.Object) (short) 1, (java.lang.Object) (-1.0d));
        properties25.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties32);
        java.util.Properties properties37 = null;
        java.util.Properties properties38 = new java.util.Properties(properties37);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties39 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties40 = atomikosProperties39.asProperties();
        properties38.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties40);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties42.setService("");
        atomikosProperties42.setThreadedTwoPhaseCommit(true);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties47 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties47.setService("");
        atomikosProperties47.setSerialJtaTransactions(true);
        atomikosProperties47.setEnableLogging(false);
        java.lang.String str54 = atomikosProperties47.logBaseName;
        java.lang.Object obj55 = properties40.replace((java.lang.Object) atomikosProperties42, (java.lang.Object) atomikosProperties47);
        boolean boolean56 = properties25.contains((java.lang.Object) properties40);
        java.lang.String str57 = properties40.toString();
        java.util.Set<java.lang.Object> objSet58 = properties40.keySet();
        java.lang.Object obj59 = properties12.replace((java.lang.Object) atomikosProperties13, (java.lang.Object) properties40);
        java.io.InputStream inputStream60 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties40.load(inputStream60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tmlog" + "'", str4, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 50 + "'", int6 == 50);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "tmlog" + "'", str7, "tmlog");
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(properties12);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "tmlog" + "'", str20, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNotNull(objCollection31);
        org.junit.Assert.assertEquals("'" + obj35 + "' != '" + (-1.0d) + "'", obj35, (-1.0d));
        org.junit.Assert.assertNotNull(properties40);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "tmlog" + "'", str54, "tmlog");
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str57, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNotNull(objSet58);
        org.junit.Assert.assertNull(obj59);
    }

    @Test
    public void test0182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0182");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Properties properties7 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet8 = properties7.keySet();
        boolean boolean9 = properties1.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) properties7);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet10 = properties1.entrySet();
        java.util.Properties properties11 = new java.util.Properties(properties1);
        java.util.Properties properties12 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet13 = properties12.keySet();
        java.lang.Object obj15 = properties1.putIfAbsent((java.lang.Object) objSet13, (java.lang.Object) 1.0f);
        java.lang.Object obj16 = null;
        java.util.Properties properties17 = null;
        java.util.Properties properties18 = new java.util.Properties(properties17);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties20 = atomikosProperties19.asProperties();
        properties18.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties20);
        java.util.Enumeration<java.lang.Object> objEnumeration22 = properties20.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration23 = properties20.elements();
        java.util.Properties properties24 = new java.util.Properties();
        java.util.Properties properties25 = null;
        java.util.Properties properties26 = new java.util.Properties(properties25);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties28 = atomikosProperties27.asProperties();
        properties26.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties28);
        java.util.Enumeration<java.lang.Object> objEnumeration30 = properties28.keys();
        boolean boolean32 = properties28.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties33 = null;
        java.util.Properties properties34 = new java.util.Properties(properties33);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties36 = atomikosProperties35.asProperties();
        properties34.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties36);
        java.util.Enumeration<java.lang.Object> objEnumeration38 = properties36.keys();
        java.lang.Object obj41 = properties36.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection42 = properties36.values();
        boolean boolean43 = properties28.containsKey((java.lang.Object) properties36);
        java.util.Properties properties44 = new java.util.Properties(properties28);
        java.util.Properties properties45 = new java.util.Properties(properties28);
        java.lang.String str46 = properties45.toString();
        java.lang.Object obj49 = properties45.setProperty("tmlog", "");
        java.util.Properties properties50 = new java.util.Properties(properties45);
        java.util.Properties properties51 = new java.util.Properties(properties45);
        java.lang.Object obj52 = properties24.remove((java.lang.Object) properties51);
        java.lang.String str53 = properties24.toString();
        java.util.Enumeration<java.lang.Object> objEnumeration54 = properties24.keys();
        java.util.Properties properties55 = new java.util.Properties(properties24);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean56 = properties1.replace(obj16, (java.lang.Object) properties20, (java.lang.Object) properties24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(objEntrySet10);
        org.junit.Assert.assertNotNull(objSet13);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNotNull(properties20);
        org.junit.Assert.assertNotNull(objEnumeration22);
        org.junit.Assert.assertNotNull(objEnumeration23);
        org.junit.Assert.assertNotNull(properties28);
        org.junit.Assert.assertNotNull(objEnumeration30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(properties36);
        org.junit.Assert.assertNotNull(objEnumeration38);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertNotNull(objCollection42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "{}" + "'", str46, "{}");
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "{}" + "'", str53, "{}");
        org.junit.Assert.assertNotNull(objEnumeration54);
    }

    @Test
    public void test0183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0183");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        java.lang.Object obj8 = properties3.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection9 = properties3.values();
        java.util.Properties properties10 = new java.util.Properties();
        java.lang.Object obj13 = properties10.getOrDefault((java.lang.Object) (short) 1, (java.lang.Object) (-1.0d));
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        java.util.Properties properties15 = new java.util.Properties(properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean17 = atomikosProperties16.forceShutdownOnVmExit;
        atomikosProperties16.setSerialJtaTransactions(true);
        java.lang.String str20 = atomikosProperties16.logBaseName;
        atomikosProperties16.service = "tmlog";
        boolean boolean23 = properties15.containsValue((java.lang.Object) "tmlog");
        java.util.Properties properties24 = new java.util.Properties(properties15);
        java.io.PrintWriter printWriter25 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties24.list(printWriter25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(objCollection9);
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + (-1.0d) + "'", obj13, (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "tmlog" + "'", str20, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test0184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0184");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.defaultJtaTimeout = (byte) -1;
        java.util.Properties properties3 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties4.setService("");
        atomikosProperties4.setThreadedTwoPhaseCommit(true);
        long long9 = atomikosProperties4.getCheckpointInterval();
        atomikosProperties4.forceShutdownOnVmExit = true;
        atomikosProperties4.setSerialJtaTransactions(true);
        java.util.Properties properties14 = atomikosProperties4.asProperties();
        boolean boolean15 = properties3.containsValue((java.lang.Object) properties14);
        java.lang.String str18 = properties3.getProperty("tmlog", "{}");
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 500L + "'", long9 == 500L);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "{}" + "'", str18, "{}");
    }

    @Test
    public void test0185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0185");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        boolean boolean7 = properties3.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        java.util.Enumeration<java.lang.Object> objEnumeration13 = properties11.keys();
        java.lang.Object obj16 = properties11.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection17 = properties11.values();
        boolean boolean18 = properties3.containsKey((java.lang.Object) properties11);
        java.util.Properties properties19 = new java.util.Properties(properties3);
        java.util.Properties properties20 = new java.util.Properties(properties3);
        java.util.Properties properties21 = null;
        java.util.Properties properties22 = new java.util.Properties(properties21);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties24 = atomikosProperties23.asProperties();
        properties22.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties24);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties26.setService("");
        atomikosProperties26.setThreadedTwoPhaseCommit(true);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties31.setService("");
        atomikosProperties31.setSerialJtaTransactions(true);
        atomikosProperties31.setEnableLogging(false);
        java.lang.String str38 = atomikosProperties31.logBaseName;
        java.lang.Object obj39 = properties24.replace((java.lang.Object) atomikosProperties26, (java.lang.Object) atomikosProperties31);
        java.util.Properties properties40 = atomikosProperties31.asProperties();
        boolean boolean41 = properties3.containsKey((java.lang.Object) properties40);
        java.lang.Object obj42 = properties40.clone();
        java.io.OutputStream outputStream43 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties40.store(outputStream43, "{}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNotNull(objEnumeration13);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(objCollection17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(properties24);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNotNull(properties40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(obj42);
// flaky:         org.junit.Assert.assertEquals(obj42.toString(), "{com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.service=, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "{com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.service=, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "{com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.service=, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
    }

    @Test
    public void test0186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0186");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        java.util.Set<java.lang.String> strSet2 = properties1.stringPropertyNames();
        java.lang.String str5 = properties1.getProperty("{}", "{}");
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{}" + "'", str5, "{}");
    }

    @Test
    public void test0187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0187");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        java.util.Set<java.lang.String> strSet2 = properties1.stringPropertyNames();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties6 = atomikosProperties5.asProperties();
        properties4.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties6);
        java.util.Enumeration<java.lang.Object> objEnumeration8 = properties6.keys();
        boolean boolean10 = properties6.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties11 = null;
        java.util.Properties properties12 = new java.util.Properties(properties11);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties14 = atomikosProperties13.asProperties();
        properties12.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties14);
        java.util.Enumeration<java.lang.Object> objEnumeration16 = properties14.keys();
        java.lang.Object obj19 = properties14.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection20 = properties14.values();
        boolean boolean21 = properties6.containsKey((java.lang.Object) properties14);
        java.lang.Object obj22 = properties1.get((java.lang.Object) properties6);
        java.io.Writer writer23 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.store(writer23, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(properties6);
        org.junit.Assert.assertNotNull(objEnumeration8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertNotNull(objEnumeration16);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNotNull(objCollection20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(obj22);
    }

    @Test
    public void test0188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0188");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        boolean boolean7 = properties3.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        java.util.Enumeration<java.lang.Object> objEnumeration13 = properties11.keys();
        java.lang.Object obj16 = properties11.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection17 = properties11.values();
        boolean boolean18 = properties3.containsKey((java.lang.Object) properties11);
        java.util.Properties properties19 = new java.util.Properties(properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long21 = atomikosProperties20.defaultJtaTimeout;
        boolean boolean22 = atomikosProperties20.enableLogging;
        atomikosProperties20.setSerialJtaTransactions(true);
        java.util.Properties properties25 = atomikosProperties20.asProperties();
        java.util.Properties properties26 = atomikosProperties20.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean28 = atomikosProperties27.forceShutdownOnVmExit;
        atomikosProperties27.setSerialJtaTransactions(true);
        java.lang.String str31 = atomikosProperties27.logBaseName;
        boolean boolean32 = atomikosProperties27.forceShutdownOnVmExit;
        int int33 = atomikosProperties27.maxActives;
        java.lang.String str34 = atomikosProperties27.logBaseName;
        atomikosProperties27.setForceShutdownOnVmExit(true);
        java.util.Properties properties37 = atomikosProperties27.asProperties();
        boolean boolean38 = atomikosProperties27.isForceShutdownOnVmExit();
        java.util.Properties properties39 = atomikosProperties27.asProperties();
        java.lang.Object obj40 = properties3.replace((java.lang.Object) atomikosProperties20, (java.lang.Object) atomikosProperties27);
        java.lang.String str41 = atomikosProperties27.getLogBaseDir();
        atomikosProperties27.logBaseName = "{}";
        java.util.Properties properties44 = atomikosProperties27.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties45 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties45.setLogBaseDir("");
        atomikosProperties45.setMaxTimeout(100L);
        long long50 = atomikosProperties45.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties51 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties52 = atomikosProperties51.asProperties();
        atomikosProperties51.checkpointInterval = 1L;
        java.lang.String str55 = atomikosProperties51.getService();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean56 = properties44.remove((java.lang.Object) long50, (java.lang.Object) str55);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNotNull(objEnumeration13);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(objCollection17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10000L + "'", long21 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertNotNull(properties26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "tmlog" + "'", str31, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 50 + "'", int33 == 50);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "tmlog" + "'", str34, "tmlog");
        org.junit.Assert.assertNotNull(properties37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(properties39);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(properties44);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 10000L + "'", long50 == 10000L);
        org.junit.Assert.assertNotNull(properties52);
        org.junit.Assert.assertNull(str55);
    }

    @Test
    public void test0189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0189");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration6 = properties3.elements();
        java.util.Properties properties7 = null;
        java.util.Properties properties8 = new java.util.Properties(properties7);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties10 = atomikosProperties9.asProperties();
        properties8.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        java.util.Properties properties12 = new java.util.Properties(properties10);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties13.defaultJtaTimeout = (byte) -1;
        java.util.Properties properties16 = atomikosProperties13.asProperties();
        boolean boolean17 = properties10.contains((java.lang.Object) properties16);
        java.util.Properties properties18 = null;
        java.util.Properties properties19 = new java.util.Properties(properties18);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties21 = atomikosProperties20.asProperties();
        properties19.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties21);
        java.util.Enumeration<java.lang.Object> objEnumeration23 = properties21.keys();
        boolean boolean25 = properties21.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties26 = null;
        java.util.Properties properties27 = new java.util.Properties(properties26);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties29 = atomikosProperties28.asProperties();
        properties27.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties29);
        java.util.Enumeration<java.lang.Object> objEnumeration31 = properties29.keys();
        java.lang.Object obj34 = properties29.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection35 = properties29.values();
        boolean boolean36 = properties21.containsKey((java.lang.Object) properties29);
        java.util.Properties properties37 = new java.util.Properties(properties21);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long39 = atomikosProperties38.defaultJtaTimeout;
        boolean boolean40 = atomikosProperties38.enableLogging;
        atomikosProperties38.setSerialJtaTransactions(true);
        java.util.Properties properties43 = atomikosProperties38.asProperties();
        java.util.Properties properties44 = atomikosProperties38.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties45 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean46 = atomikosProperties45.forceShutdownOnVmExit;
        atomikosProperties45.setSerialJtaTransactions(true);
        java.lang.String str49 = atomikosProperties45.logBaseName;
        boolean boolean50 = atomikosProperties45.forceShutdownOnVmExit;
        int int51 = atomikosProperties45.maxActives;
        java.lang.String str52 = atomikosProperties45.logBaseName;
        atomikosProperties45.setForceShutdownOnVmExit(true);
        java.util.Properties properties55 = atomikosProperties45.asProperties();
        boolean boolean56 = atomikosProperties45.isForceShutdownOnVmExit();
        java.util.Properties properties57 = atomikosProperties45.asProperties();
        java.lang.Object obj58 = properties21.replace((java.lang.Object) atomikosProperties38, (java.lang.Object) atomikosProperties45);
        java.lang.Object obj59 = properties3.putIfAbsent((java.lang.Object) properties16, (java.lang.Object) atomikosProperties45);
        java.util.Collection<java.lang.Object> objCollection60 = properties16.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet61 = properties16.entrySet();
        java.util.Properties properties62 = new java.util.Properties(properties16);
        java.lang.Class<?> wildcardClass63 = properties62.getClass();
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNotNull(objEnumeration6);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(properties21);
        org.junit.Assert.assertNotNull(objEnumeration23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(properties29);
        org.junit.Assert.assertNotNull(objEnumeration31);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNotNull(objCollection35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 10000L + "'", long39 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(properties43);
        org.junit.Assert.assertNotNull(properties44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "tmlog" + "'", str49, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 50 + "'", int51 == 50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "tmlog" + "'", str52, "tmlog");
        org.junit.Assert.assertNotNull(properties55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(properties57);
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertNotNull(objCollection60);
        org.junit.Assert.assertNotNull(objEntrySet61);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test0190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0190");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Properties properties5 = new java.util.Properties(properties3);
        java.util.Collection<java.lang.Object> objCollection6 = properties3.values();
        java.util.Properties properties7 = new java.util.Properties(properties3);
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        java.util.Properties properties15 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet16 = properties15.keySet();
        boolean boolean17 = properties9.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) properties15);
        java.util.Enumeration<java.lang.Object> objEnumeration18 = properties9.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long20 = atomikosProperties19.defaultJtaTimeout;
        boolean boolean21 = atomikosProperties19.enableLogging;
        atomikosProperties19.setSerialJtaTransactions(true);
        java.util.Properties properties24 = atomikosProperties19.asProperties();
        java.util.Properties properties25 = null;
        java.util.Properties properties26 = new java.util.Properties(properties25);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties28 = atomikosProperties27.asProperties();
        properties26.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties28);
        java.util.Enumeration<java.lang.Object> objEnumeration30 = properties28.keys();
        java.lang.Object obj33 = properties28.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection34 = properties28.values();
        java.util.Set<java.lang.String> strSet35 = properties28.stringPropertyNames();
        boolean boolean36 = properties24.contains((java.lang.Object) properties28);
        java.lang.Object obj37 = properties3.replace((java.lang.Object) properties9, (java.lang.Object) properties28);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass38 = obj37.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objCollection6);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNotNull(objSet16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objEnumeration18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10000L + "'", long20 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(properties24);
        org.junit.Assert.assertNotNull(properties28);
        org.junit.Assert.assertNotNull(objEnumeration30);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNotNull(objCollection34);
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(obj37);
    }

    @Test
    public void test0191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0191");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Properties properties7 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet8 = properties7.keySet();
        boolean boolean9 = properties1.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) properties7);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet10 = properties1.entrySet();
        java.util.Properties properties11 = new java.util.Properties(properties1);
        java.io.OutputStream outputStream12 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.store(outputStream12, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(objEntrySet10);
    }

    @Test
    public void test0192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0192");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        boolean boolean7 = properties3.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        java.util.Enumeration<java.lang.Object> objEnumeration13 = properties11.keys();
        java.lang.Object obj16 = properties11.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection17 = properties11.values();
        boolean boolean18 = properties3.containsKey((java.lang.Object) properties11);
        java.util.Properties properties19 = new java.util.Properties(properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long21 = atomikosProperties20.defaultJtaTimeout;
        boolean boolean22 = atomikosProperties20.enableLogging;
        atomikosProperties20.setSerialJtaTransactions(true);
        java.util.Properties properties25 = atomikosProperties20.asProperties();
        java.util.Properties properties26 = atomikosProperties20.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean28 = atomikosProperties27.forceShutdownOnVmExit;
        atomikosProperties27.setSerialJtaTransactions(true);
        java.lang.String str31 = atomikosProperties27.logBaseName;
        boolean boolean32 = atomikosProperties27.forceShutdownOnVmExit;
        int int33 = atomikosProperties27.maxActives;
        java.lang.String str34 = atomikosProperties27.logBaseName;
        atomikosProperties27.setForceShutdownOnVmExit(true);
        java.util.Properties properties37 = atomikosProperties27.asProperties();
        boolean boolean38 = atomikosProperties27.isForceShutdownOnVmExit();
        java.util.Properties properties39 = atomikosProperties27.asProperties();
        java.lang.Object obj40 = properties3.replace((java.lang.Object) atomikosProperties20, (java.lang.Object) atomikosProperties27);
        java.util.Set<java.lang.String> strSet41 = properties3.stringPropertyNames();
        java.util.Set<java.lang.Object> objSet42 = properties3.keySet();
        java.io.OutputStream outputStream43 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.save(outputStream43, "tmlog");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNotNull(objEnumeration13);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(objCollection17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10000L + "'", long21 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertNotNull(properties26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "tmlog" + "'", str31, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 50 + "'", int33 == 50);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "tmlog" + "'", str34, "tmlog");
        org.junit.Assert.assertNotNull(properties37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(properties39);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertNotNull(objSet42);
    }

    @Test
    public void test0193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0193");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        boolean boolean7 = properties3.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        java.util.Properties properties15 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet16 = properties15.keySet();
        boolean boolean17 = properties9.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) properties15);
        java.util.Enumeration<java.lang.Object> objEnumeration18 = properties9.elements();
        boolean boolean20 = properties3.remove((java.lang.Object) properties9, (java.lang.Object) 50);
        java.util.Properties properties21 = null;
        java.util.Properties properties22 = new java.util.Properties(properties21);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties24 = atomikosProperties23.asProperties();
        properties22.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties24);
        java.util.Properties properties26 = new java.util.Properties(properties24);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties27.defaultJtaTimeout = (byte) -1;
        java.util.Properties properties30 = atomikosProperties27.asProperties();
        boolean boolean31 = properties24.contains((java.lang.Object) properties30);
        java.util.Properties properties32 = null;
        java.util.Properties properties33 = new java.util.Properties(properties32);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties34 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties35 = atomikosProperties34.asProperties();
        properties33.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties35);
        java.util.Enumeration<java.lang.Object> objEnumeration37 = properties35.keys();
        boolean boolean39 = properties35.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties40 = new java.util.Properties(properties35);
        java.lang.Object obj41 = properties9.replace((java.lang.Object) properties30, (java.lang.Object) properties40);
        properties40.clear();
        java.io.OutputStream outputStream43 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties40.storeToXML(outputStream43, "", "tmlog");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNotNull(objSet16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objEnumeration18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(properties24);
        org.junit.Assert.assertNotNull(properties30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(properties35);
        org.junit.Assert.assertNotNull(objEnumeration37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(obj41);
    }

    @Test
    public void test0194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0194");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.checkpointInterval = 1L;
        java.lang.String str4 = atomikosProperties0.getService();
        java.lang.String str5 = atomikosProperties0.getLogBaseName();
        java.util.Properties properties6 = atomikosProperties0.asProperties();
        java.io.InputStream inputStream7 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties6.loadFromXML(inputStream7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tmlog" + "'", str5, "tmlog");
        org.junit.Assert.assertNotNull(properties6);
    }

    @Test
    public void test0195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0195");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.checkpointInterval = 1L;
        java.lang.String str4 = atomikosProperties0.getService();
        java.lang.String str5 = atomikosProperties0.getLogBaseName();
        java.util.Properties properties6 = atomikosProperties0.asProperties();
        java.util.Properties properties7 = null;
        java.util.Properties properties8 = new java.util.Properties(properties7);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties10 = atomikosProperties9.asProperties();
        properties8.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        java.util.Properties properties14 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet15 = properties14.keySet();
        boolean boolean16 = properties8.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) properties14);
        java.util.Collection<java.lang.Object> objCollection17 = properties14.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties18.setService("");
        boolean boolean21 = atomikosProperties18.isEnableLogging();
        java.util.Properties properties22 = atomikosProperties18.asProperties();
        properties22.clear();
        java.util.Properties properties24 = null;
        java.util.Properties properties25 = new java.util.Properties(properties24);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties27 = atomikosProperties26.asProperties();
        properties25.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties27);
        java.util.Enumeration<java.lang.Object> objEnumeration29 = properties27.keys();
        java.lang.Object obj31 = properties22.put((java.lang.Object) properties27, (java.lang.Object) (byte) 0);
        java.lang.Object obj32 = properties6.getOrDefault((java.lang.Object) objCollection17, obj31);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties34 = atomikosProperties33.asProperties();
        long long35 = atomikosProperties33.getDefaultJtaTimeout();
        atomikosProperties33.setCheckpointInterval(0L);
        java.lang.Object obj38 = properties6.get((java.lang.Object) 0L);
        java.lang.String str41 = properties6.getProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, 100=true, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "");
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tmlog" + "'", str5, "tmlog");
        org.junit.Assert.assertNotNull(properties6);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertNotNull(objSet15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objCollection17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(properties22);
        org.junit.Assert.assertNotNull(properties27);
        org.junit.Assert.assertNotNull(objEnumeration29);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNotNull(properties34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 10000L + "'", long35 == 10000L);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
    }

    @Test
    public void test0196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0196");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        java.lang.Object obj8 = properties3.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection9 = properties3.values();
        java.util.Properties properties10 = new java.util.Properties();
        java.lang.Object obj13 = properties10.getOrDefault((java.lang.Object) (short) 1, (java.lang.Object) (-1.0d));
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        java.util.Properties properties15 = new java.util.Properties(properties3);
        java.io.Writer writer16 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.store(writer16, "tmlog");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(objCollection9);
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + (-1.0d) + "'", obj13, (-1.0d));
    }

    @Test
    public void test0197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0197");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties6.setService("");
        atomikosProperties6.setSerialJtaTransactions(true);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean12 = atomikosProperties11.forceShutdownOnVmExit;
        atomikosProperties11.setSerialJtaTransactions(true);
        boolean boolean15 = properties3.remove((java.lang.Object) atomikosProperties6, (java.lang.Object) true);
        atomikosProperties6.setForceShutdownOnVmExit(false);
        atomikosProperties6.setLogBaseDir("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0198");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        boolean boolean7 = properties3.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties8 = new java.util.Properties(properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean10 = atomikosProperties9.forceShutdownOnVmExit;
        atomikosProperties9.setSerialJtaTransactions(true);
        java.lang.String str13 = atomikosProperties9.logBaseName;
        atomikosProperties9.service = "tmlog";
        atomikosProperties9.setSerialJtaTransactions(false);
        atomikosProperties9.setMaxTimeout((long) '4');
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties20.defaultJtaTimeout = (byte) -1;
        java.util.Properties properties23 = atomikosProperties20.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean25 = atomikosProperties24.forceShutdownOnVmExit;
        atomikosProperties24.setSerialJtaTransactions(true);
        java.lang.String str28 = atomikosProperties24.logBaseName;
        atomikosProperties24.service = "tmlog";
        java.util.Properties properties31 = atomikosProperties24.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean33 = atomikosProperties32.forceShutdownOnVmExit;
        java.lang.String str34 = atomikosProperties32.getLogBaseDir();
        java.lang.Object obj35 = properties23.getOrDefault((java.lang.Object) atomikosProperties24, (java.lang.Object) str34);
        long long36 = atomikosProperties24.getDefaultJtaTimeout();
        atomikosProperties24.setLogBaseName("{}");
        int int39 = atomikosProperties24.maxActives;
        long long40 = atomikosProperties24.maxTimeout;
        boolean boolean41 = properties8.remove((java.lang.Object) atomikosProperties9, (java.lang.Object) long40);
        java.lang.Object obj44 = properties8.setProperty("{}", "");
        java.io.PrintStream printStream45 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties8.list(printStream45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNotNull(properties23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "tmlog" + "'", str28, "tmlog");
        org.junit.Assert.assertNotNull(properties31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 10000L + "'", long36 == 10000L);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 50 + "'", int39 == 50);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 300000L + "'", long40 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(obj44);
    }

    @Test
    public void test0199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0199");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.setSerialJtaTransactions(true);
        java.lang.String str4 = atomikosProperties0.logBaseName;
        boolean boolean5 = atomikosProperties0.forceShutdownOnVmExit;
        int int6 = atomikosProperties0.maxActives;
        java.lang.String str7 = atomikosProperties0.logBaseName;
        atomikosProperties0.setForceShutdownOnVmExit(true);
        java.util.Properties properties10 = atomikosProperties0.asProperties();
        boolean boolean11 = atomikosProperties0.isForceShutdownOnVmExit();
        java.util.Properties properties12 = atomikosProperties0.asProperties();
        java.io.PrintWriter printWriter13 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties12.list(printWriter13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tmlog" + "'", str4, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 50 + "'", int6 == 50);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "tmlog" + "'", str7, "tmlog");
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(properties12);
    }

    @Test
    public void test0200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0200");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties5.setService("");
        atomikosProperties5.setThreadedTwoPhaseCommit(true);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.setService("");
        atomikosProperties10.setSerialJtaTransactions(true);
        atomikosProperties10.setEnableLogging(false);
        java.lang.String str17 = atomikosProperties10.logBaseName;
        java.lang.Object obj18 = properties3.replace((java.lang.Object) atomikosProperties5, (java.lang.Object) atomikosProperties10);
        java.lang.String str20 = properties3.getProperty("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties21.setService("");
        boolean boolean24 = atomikosProperties21.isEnableLogging();
        java.util.Properties properties25 = atomikosProperties21.asProperties();
        atomikosProperties21.setDefaultJtaTimeout(300000L);
        atomikosProperties21.maxActives = (short) 0;
        java.lang.Object obj30 = properties3.remove((java.lang.Object) atomikosProperties21);
        long long31 = atomikosProperties21.getDefaultJtaTimeout();
        java.lang.String str32 = atomikosProperties21.getService();
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 300000L + "'", long31 == 300000L);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
    }

    @Test
    public void test0201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0201");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Properties properties5 = new java.util.Properties(properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties7 = atomikosProperties6.asProperties();
        java.util.Set<java.lang.String> strSet8 = properties7.stringPropertyNames();
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties7);
        properties7.clear();
        java.util.Set<java.lang.Object> objSet11 = properties7.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties13.setService("");
        atomikosProperties13.setThreadedTwoPhaseCommit(true);
        long long18 = atomikosProperties13.getCheckpointInterval();
        atomikosProperties13.maxTimeout = (-1);
        java.util.Properties properties21 = atomikosProperties13.asProperties();
        java.lang.Object obj22 = properties7.putIfAbsent((java.lang.Object) atomikosProperties12, (java.lang.Object) properties21);
        java.io.OutputStream outputStream23 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties7.storeToXML(outputStream23, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, 100=true, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(objSet11);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 500L + "'", long18 == 500L);
        org.junit.Assert.assertNotNull(properties21);
        org.junit.Assert.assertNull(obj22);
    }

    @Test
    public void test0202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0202");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        boolean boolean7 = properties3.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        java.util.Enumeration<java.lang.Object> objEnumeration13 = properties11.keys();
        java.lang.Object obj16 = properties11.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection17 = properties11.values();
        boolean boolean18 = properties3.containsKey((java.lang.Object) properties11);
        java.util.Properties properties19 = new java.util.Properties(properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long21 = atomikosProperties20.defaultJtaTimeout;
        boolean boolean22 = atomikosProperties20.enableLogging;
        atomikosProperties20.setSerialJtaTransactions(true);
        java.util.Properties properties25 = atomikosProperties20.asProperties();
        java.util.Properties properties26 = atomikosProperties20.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean28 = atomikosProperties27.forceShutdownOnVmExit;
        atomikosProperties27.setSerialJtaTransactions(true);
        java.lang.String str31 = atomikosProperties27.logBaseName;
        boolean boolean32 = atomikosProperties27.forceShutdownOnVmExit;
        int int33 = atomikosProperties27.maxActives;
        java.lang.String str34 = atomikosProperties27.logBaseName;
        atomikosProperties27.setForceShutdownOnVmExit(true);
        java.util.Properties properties37 = atomikosProperties27.asProperties();
        boolean boolean38 = atomikosProperties27.isForceShutdownOnVmExit();
        java.util.Properties properties39 = atomikosProperties27.asProperties();
        java.lang.Object obj40 = properties3.replace((java.lang.Object) atomikosProperties20, (java.lang.Object) atomikosProperties27);
        long long41 = atomikosProperties27.getDefaultJtaTimeout();
        java.lang.String str42 = atomikosProperties27.logBaseName;
        java.lang.String str43 = atomikosProperties27.getLogBaseName();
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNotNull(objEnumeration13);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(objCollection17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10000L + "'", long21 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertNotNull(properties26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "tmlog" + "'", str31, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 50 + "'", int33 == 50);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "tmlog" + "'", str34, "tmlog");
        org.junit.Assert.assertNotNull(properties37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(properties39);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 10000L + "'", long41 == 10000L);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "tmlog" + "'", str42, "tmlog");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "tmlog" + "'", str43, "tmlog");
    }

    @Test
    public void test0203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0203");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.defaultJtaTimeout;
        boolean boolean2 = atomikosProperties0.enableLogging;
        atomikosProperties0.setSerialJtaTransactions(true);
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        java.util.Properties properties6 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties9 = atomikosProperties8.asProperties();
        atomikosProperties8.checkpointInterval = 1L;
        boolean boolean12 = atomikosProperties8.forceShutdownOnVmExit;
        java.lang.Object obj13 = properties6.put((java.lang.Object) (short) 0, (java.lang.Object) atomikosProperties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long15 = atomikosProperties14.defaultJtaTimeout;
        boolean boolean16 = atomikosProperties14.enableLogging;
        int int17 = atomikosProperties14.maxActives;
        java.lang.String str18 = atomikosProperties14.getService();
        java.util.Properties properties19 = null;
        java.util.Properties properties20 = new java.util.Properties(properties19);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties22 = atomikosProperties21.asProperties();
        properties20.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties22);
        java.util.Enumeration<java.lang.Object> objEnumeration24 = properties22.keys();
        boolean boolean26 = properties22.containsValue((java.lang.Object) 0.0f);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long29 = atomikosProperties28.defaultJtaTimeout;
        boolean boolean30 = atomikosProperties28.enableLogging;
        atomikosProperties28.setSerialJtaTransactions(true);
        java.lang.Object obj33 = properties22.putIfAbsent((java.lang.Object) 100L, (java.lang.Object) true);
        java.util.Enumeration<java.lang.Object> objEnumeration34 = properties22.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties36.setService("");
        atomikosProperties36.setSerialJtaTransactions(true);
        atomikosProperties36.setEnableLogging(false);
        atomikosProperties36.service = "tmlog";
        atomikosProperties14.set(properties22, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", (java.lang.Object) atomikosProperties36);
        boolean boolean46 = properties6.contains((java.lang.Object) atomikosProperties36);
        java.io.PrintStream printStream47 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties6.list(printStream47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 10000L + "'", long1 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertNotNull(properties6);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10000L + "'", long15 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 50 + "'", int17 == 50);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(properties22);
        org.junit.Assert.assertNotNull(objEnumeration24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 10000L + "'", long29 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNotNull(objEnumeration34);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test0204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0204");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties(properties1);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet3 = properties1.entrySet();
        java.io.OutputStream outputStream4 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.storeToXML(outputStream4, "", "{}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objEntrySet3);
    }

    @Test
    public void test0205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0205");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        long long5 = atomikosProperties0.getCheckpointInterval();
        atomikosProperties0.maxTimeout = (-1);
        java.util.Properties properties8 = atomikosProperties0.asProperties();
        atomikosProperties0.serialJtaTransactions = true;
        java.lang.Class<?> wildcardClass11 = atomikosProperties0.getClass();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 500L + "'", long5 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0206");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        boolean boolean7 = properties3.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        java.util.Properties properties15 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet16 = properties15.keySet();
        boolean boolean17 = properties9.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) properties15);
        java.util.Enumeration<java.lang.Object> objEnumeration18 = properties9.elements();
        boolean boolean20 = properties3.remove((java.lang.Object) properties9, (java.lang.Object) 50);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties21.setService("");
        atomikosProperties21.logBaseDir = "hi!";
        atomikosProperties21.setMaxTimeout(500L);
        atomikosProperties21.logBaseName = "hi!";
        java.util.Properties properties30 = null;
        java.util.Properties properties31 = new java.util.Properties(properties30);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties33 = atomikosProperties32.asProperties();
        properties31.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties33);
        java.util.Enumeration<java.lang.Object> objEnumeration35 = properties33.keys();
        boolean boolean37 = properties33.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties38 = null;
        java.util.Properties properties39 = new java.util.Properties(properties38);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties41 = atomikosProperties40.asProperties();
        properties39.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties41);
        java.util.Enumeration<java.lang.Object> objEnumeration43 = properties41.keys();
        java.lang.Object obj46 = properties41.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection47 = properties41.values();
        boolean boolean48 = properties33.containsKey((java.lang.Object) properties41);
        java.util.Properties properties49 = new java.util.Properties(properties33);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long51 = atomikosProperties50.defaultJtaTimeout;
        boolean boolean52 = atomikosProperties50.enableLogging;
        atomikosProperties50.setSerialJtaTransactions(true);
        java.util.Properties properties55 = atomikosProperties50.asProperties();
        java.util.Properties properties56 = atomikosProperties50.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties57 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean58 = atomikosProperties57.forceShutdownOnVmExit;
        atomikosProperties57.setSerialJtaTransactions(true);
        java.lang.String str61 = atomikosProperties57.logBaseName;
        boolean boolean62 = atomikosProperties57.forceShutdownOnVmExit;
        int int63 = atomikosProperties57.maxActives;
        java.lang.String str64 = atomikosProperties57.logBaseName;
        atomikosProperties57.setForceShutdownOnVmExit(true);
        java.util.Properties properties67 = atomikosProperties57.asProperties();
        boolean boolean68 = atomikosProperties57.isForceShutdownOnVmExit();
        java.util.Properties properties69 = atomikosProperties57.asProperties();
        java.lang.Object obj70 = properties33.replace((java.lang.Object) atomikosProperties50, (java.lang.Object) atomikosProperties57);
        java.lang.Object obj71 = properties3.getOrDefault((java.lang.Object) "hi!", (java.lang.Object) atomikosProperties57);
        java.util.Enumeration<java.lang.Object> objEnumeration72 = properties3.elements();
        java.util.Properties properties73 = null;
        java.util.Properties properties74 = new java.util.Properties(properties73);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties75 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties76 = atomikosProperties75.asProperties();
        properties74.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties76);
        java.util.Enumeration<java.lang.Object> objEnumeration78 = properties76.keys();
        boolean boolean80 = properties76.containsValue((java.lang.Object) 0.0f);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties82 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long83 = atomikosProperties82.defaultJtaTimeout;
        boolean boolean84 = atomikosProperties82.enableLogging;
        atomikosProperties82.setSerialJtaTransactions(true);
        java.lang.Object obj87 = properties76.putIfAbsent((java.lang.Object) 100L, (java.lang.Object) true);
        java.util.Properties properties88 = new java.util.Properties(properties76);
        java.util.Properties properties89 = new java.util.Properties(properties88);
        java.util.Collection<java.lang.Object> objCollection90 = properties89.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties91 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean92 = atomikosProperties91.forceShutdownOnVmExit;
        atomikosProperties91.serialJtaTransactions = false;
        long long95 = atomikosProperties91.maxTimeout;
        java.util.Properties properties96 = atomikosProperties91.asProperties();
        java.lang.Object obj97 = properties3.getOrDefault((java.lang.Object) properties89, (java.lang.Object) atomikosProperties91);
        atomikosProperties91.maxActives = 0;
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNotNull(objSet16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objEnumeration18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(properties33);
        org.junit.Assert.assertNotNull(objEnumeration35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(properties41);
        org.junit.Assert.assertNotNull(objEnumeration43);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNotNull(objCollection47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 10000L + "'", long51 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(properties55);
        org.junit.Assert.assertNotNull(properties56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "tmlog" + "'", str61, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 50 + "'", int63 == 50);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "tmlog" + "'", str64, "tmlog");
        org.junit.Assert.assertNotNull(properties67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(properties69);
        org.junit.Assert.assertNull(obj70);
        org.junit.Assert.assertNotNull(obj71);
        org.junit.Assert.assertNotNull(objEnumeration72);
        org.junit.Assert.assertNotNull(properties76);
        org.junit.Assert.assertNotNull(objEnumeration78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 10000L + "'", long83 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNull(obj87);
        org.junit.Assert.assertNotNull(objCollection90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + 300000L + "'", long95 == 300000L);
        org.junit.Assert.assertNotNull(properties96);
        org.junit.Assert.assertNotNull(obj97);
    }

    @Test
    public void test0207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0207");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties6.setService("");
        atomikosProperties6.setSerialJtaTransactions(true);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean12 = atomikosProperties11.forceShutdownOnVmExit;
        atomikosProperties11.setSerialJtaTransactions(true);
        boolean boolean15 = properties3.remove((java.lang.Object) atomikosProperties6, (java.lang.Object) true);
        java.util.Set<java.lang.String> strSet16 = properties3.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties17.setService("");
        atomikosProperties17.setSerialJtaTransactions(true);
        atomikosProperties17.setEnableLogging(false);
        atomikosProperties17.service = "tmlog";
        atomikosProperties17.threadedTwoPhaseCommit = true;
        boolean boolean28 = atomikosProperties17.isForceShutdownOnVmExit();
        java.util.Properties properties29 = atomikosProperties17.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean31 = atomikosProperties30.forceShutdownOnVmExit;
        atomikosProperties30.setSerialJtaTransactions(true);
        java.lang.String str34 = atomikosProperties30.logBaseName;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties36 = atomikosProperties35.asProperties();
        java.util.Properties properties37 = atomikosProperties35.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties39 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties39.setService("");
        atomikosProperties39.setThreadedTwoPhaseCommit(true);
        long long44 = atomikosProperties39.getCheckpointInterval();
        boolean boolean45 = atomikosProperties39.threadedTwoPhaseCommit;
        atomikosProperties30.set(properties37, "tmlog", (java.lang.Object) atomikosProperties39);
        atomikosProperties39.setLogBaseName("{}");
        java.util.Properties properties49 = null;
        java.util.Properties properties50 = new java.util.Properties(properties49);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties51 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties52 = atomikosProperties51.asProperties();
        properties50.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties52);
        java.util.Properties properties54 = new java.util.Properties(properties52);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties55 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties55.defaultJtaTimeout = (byte) -1;
        java.util.Properties properties58 = atomikosProperties55.asProperties();
        boolean boolean59 = properties52.contains((java.lang.Object) properties58);
        atomikosProperties39.set(properties58, "tmlog", (java.lang.Object) 'a');
        java.util.Properties properties63 = atomikosProperties39.asProperties();
        java.util.Properties properties64 = null;
        java.util.Properties properties65 = new java.util.Properties(properties64);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties66 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties67 = atomikosProperties66.asProperties();
        properties65.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties67);
        java.util.Properties properties71 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet72 = properties71.keySet();
        boolean boolean73 = properties65.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) properties71);
        boolean boolean74 = properties3.replace((java.lang.Object) atomikosProperties17, (java.lang.Object) properties63, (java.lang.Object) true);
        java.io.OutputStream outputStream75 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.store(outputStream75, "{}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(properties29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "tmlog" + "'", str34, "tmlog");
        org.junit.Assert.assertNotNull(properties36);
        org.junit.Assert.assertNotNull(properties37);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 500L + "'", long44 == 500L);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(properties52);
        org.junit.Assert.assertNotNull(properties58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(properties63);
        org.junit.Assert.assertNotNull(properties67);
        org.junit.Assert.assertNotNull(objSet72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test0208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0208");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        atomikosProperties0.setSerialJtaTransactions(true);
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        properties5.clear();
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        java.util.Enumeration<java.lang.Object> objEnumeration13 = properties11.keys();
        boolean boolean15 = properties11.containsValue((java.lang.Object) 0.0f);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long18 = atomikosProperties17.defaultJtaTimeout;
        boolean boolean19 = atomikosProperties17.enableLogging;
        atomikosProperties17.setSerialJtaTransactions(true);
        java.lang.Object obj22 = properties11.putIfAbsent((java.lang.Object) 100L, (java.lang.Object) true);
        boolean boolean23 = properties5.remove((java.lang.Object) 1.0f, (java.lang.Object) 100L);
        java.io.OutputStream outputStream24 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties5.storeToXML(outputStream24, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNotNull(objEnumeration13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10000L + "'", long18 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test0209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0209");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        java.util.Properties properties5 = null;
        java.util.Properties properties7 = null;
        java.util.Properties properties8 = new java.util.Properties(properties7);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties10 = atomikosProperties9.asProperties();
        properties8.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setService("");
        atomikosProperties12.setThreadedTwoPhaseCommit(true);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties17.setService("");
        atomikosProperties17.setSerialJtaTransactions(true);
        atomikosProperties17.setEnableLogging(false);
        java.lang.String str24 = atomikosProperties17.logBaseName;
        java.lang.Object obj25 = properties10.replace((java.lang.Object) atomikosProperties12, (java.lang.Object) atomikosProperties17);
        java.lang.String str27 = properties10.getProperty("");
        // The following exception was thrown during execution in test generation
        try {
            atomikosProperties0.set(properties5, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, 100=true, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", (java.lang.Object) "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "tmlog" + "'", str24, "tmlog");
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNull(str27);
    }

    @Test
    public void test0210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0210");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        java.lang.Object obj8 = properties3.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection9 = properties3.values();
        java.util.Properties properties10 = new java.util.Properties();
        java.lang.Object obj13 = properties10.getOrDefault((java.lang.Object) (short) 1, (java.lang.Object) (-1.0d));
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        java.util.Properties properties15 = new java.util.Properties(properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties16.setService("");
        boolean boolean19 = atomikosProperties16.isEnableLogging();
        java.util.Properties properties20 = atomikosProperties16.asProperties();
        atomikosProperties16.setSerialJtaTransactions(false);
        atomikosProperties16.enableLogging = false;
        java.lang.String str25 = atomikosProperties16.service;
        atomikosProperties16.forceShutdownOnVmExit = false;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean29 = atomikosProperties28.forceShutdownOnVmExit;
        atomikosProperties28.setSerialJtaTransactions(true);
        java.lang.String str32 = atomikosProperties28.logBaseName;
        boolean boolean33 = atomikosProperties28.forceShutdownOnVmExit;
        int int34 = atomikosProperties28.maxActives;
        java.lang.String str35 = atomikosProperties28.logBaseName;
        atomikosProperties28.setForceShutdownOnVmExit(true);
        java.util.Properties properties38 = atomikosProperties28.asProperties();
        boolean boolean39 = atomikosProperties28.isForceShutdownOnVmExit();
        java.util.Properties properties40 = atomikosProperties28.asProperties();
        atomikosProperties28.setSerialJtaTransactions(false);
        atomikosProperties28.setCheckpointInterval((long) 'a');
        java.lang.Object obj45 = properties3.put((java.lang.Object) atomikosProperties16, (java.lang.Object) 'a');
        java.lang.Object obj46 = null;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties47 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties47.setService("");
        atomikosProperties47.setSerialJtaTransactions(true);
        atomikosProperties47.setEnableLogging(false);
        java.lang.String str54 = atomikosProperties47.logBaseName;
        boolean boolean55 = atomikosProperties47.isSerialJtaTransactions();
        java.lang.String str56 = atomikosProperties47.service;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj57 = properties3.putIfAbsent(obj46, (java.lang.Object) str56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(objCollection9);
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + (-1.0d) + "'", obj13, (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(properties20);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "tmlog" + "'", str32, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 50 + "'", int34 == 50);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "tmlog" + "'", str35, "tmlog");
        org.junit.Assert.assertNotNull(properties38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(properties40);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "tmlog" + "'", str54, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
    }

    @Test
    public void test0211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0211");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        atomikosProperties0.setSerialJtaTransactions(true);
        atomikosProperties0.setEnableLogging(false);
        atomikosProperties0.logBaseName = "tmlog";
        atomikosProperties0.maxActives = 1;
        atomikosProperties0.setEnableLogging(true);
        long long13 = atomikosProperties0.getMaxTimeout();
        boolean boolean14 = atomikosProperties0.serialJtaTransactions;
        atomikosProperties0.setEnableLogging(false);
        atomikosProperties0.setDefaultJtaTimeout((long) '4');
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 300000L + "'", long13 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test0212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0212");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.defaultJtaTimeout = (byte) -1;
        java.util.Properties properties3 = atomikosProperties0.asProperties();
        atomikosProperties0.setSerialJtaTransactions(true);
        java.util.Properties properties6 = atomikosProperties0.asProperties();
        atomikosProperties0.logBaseName = "";
        int int9 = atomikosProperties0.getMaxActives();
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(properties6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
    }

    @Test
    public void test0213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0213");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        boolean boolean3 = atomikosProperties0.isEnableLogging();
        java.util.Properties properties4 = atomikosProperties0.asProperties();
        atomikosProperties0.setSerialJtaTransactions(false);
        atomikosProperties0.enableLogging = false;
        java.lang.String str9 = atomikosProperties0.logBaseName;
        boolean boolean10 = atomikosProperties0.isForceShutdownOnVmExit();
        java.lang.String str11 = atomikosProperties0.getLogBaseName();
        long long12 = atomikosProperties0.checkpointInterval;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(properties4);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tmlog" + "'", str9, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "tmlog" + "'", str11, "tmlog");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 500L + "'", long12 == 500L);
    }

    @Test
    public void test0214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0214");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        long long5 = atomikosProperties0.getCheckpointInterval();
        atomikosProperties0.maxTimeout = (-1);
        java.util.Properties properties8 = atomikosProperties0.asProperties();
        java.util.Enumeration<?> wildcardEnumeration9 = properties8.propertyNames();
        java.lang.Object obj10 = null;
        java.util.Properties properties11 = null;
        java.util.Properties properties12 = new java.util.Properties(properties11);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties14 = atomikosProperties13.asProperties();
        properties12.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties14);
        java.util.Properties properties16 = new java.util.Properties(properties14);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties18 = atomikosProperties17.asProperties();
        java.util.Set<java.lang.String> strSet19 = properties18.stringPropertyNames();
        properties16.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties18);
        int int21 = properties16.size();
        java.lang.String str22 = properties16.toString();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean23 = properties8.remove(obj10, (java.lang.Object) str22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 500L + "'", long5 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertNotNull(wildcardEnumeration9);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 9 + "'", int21 == 9);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str22, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
    }

    @Test
    public void test0215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0215");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties(properties1);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet3 = properties1.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean5 = atomikosProperties4.forceShutdownOnVmExit;
        atomikosProperties4.setSerialJtaTransactions(true);
        java.lang.String str8 = atomikosProperties4.logBaseName;
        atomikosProperties4.service = "tmlog";
        java.util.Properties properties11 = atomikosProperties4.asProperties();
        int int12 = atomikosProperties4.maxActives;
        long long13 = atomikosProperties4.getCheckpointInterval();
        long long14 = atomikosProperties4.checkpointInterval;
        boolean boolean15 = properties1.containsValue((java.lang.Object) atomikosProperties4);
        java.lang.Object obj18 = properties1.setProperty("hi!", "{}");
        org.junit.Assert.assertNotNull(objEntrySet3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "tmlog" + "'", str8, "tmlog");
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 50 + "'", int12 == 50);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 500L + "'", long13 == 500L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 500L + "'", long14 == 500L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(obj18);
    }

    @Test
    public void test0216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0216");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        boolean boolean7 = properties3.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        java.util.Enumeration<java.lang.Object> objEnumeration13 = properties11.keys();
        java.lang.Object obj16 = properties11.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection17 = properties11.values();
        boolean boolean18 = properties3.containsKey((java.lang.Object) properties11);
        java.util.Properties properties19 = new java.util.Properties(properties3);
        java.util.Properties properties20 = new java.util.Properties(properties3);
        java.lang.String str21 = properties20.toString();
        java.util.Properties properties22 = null;
        java.util.Properties properties23 = new java.util.Properties(properties22);
        java.util.Properties properties24 = new java.util.Properties(properties23);
        java.util.Properties properties25 = new java.util.Properties(properties24);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties26.setService("");
        atomikosProperties26.setThreadedTwoPhaseCommit(true);
        atomikosProperties26.setMaxTimeout(1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean34 = atomikosProperties33.forceShutdownOnVmExit;
        atomikosProperties33.setSerialJtaTransactions(true);
        java.lang.String str37 = atomikosProperties33.logBaseName;
        boolean boolean38 = atomikosProperties33.forceShutdownOnVmExit;
        int int39 = atomikosProperties33.maxActives;
        java.lang.String str40 = atomikosProperties33.logBaseName;
        atomikosProperties33.setForceShutdownOnVmExit(true);
        java.util.Properties properties43 = atomikosProperties33.asProperties();
        boolean boolean44 = atomikosProperties33.isForceShutdownOnVmExit();
        java.util.Properties properties45 = atomikosProperties33.asProperties();
        atomikosProperties33.setSerialJtaTransactions(false);
        java.lang.String str48 = atomikosProperties33.logBaseName;
        boolean boolean49 = properties20.replace((java.lang.Object) properties24, (java.lang.Object) 1L, (java.lang.Object) atomikosProperties33);
        java.util.Set<java.lang.Object> objSet50 = properties24.keySet();
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNotNull(objEnumeration13);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(objCollection17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "{}" + "'", str21, "{}");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "tmlog" + "'", str37, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 50 + "'", int39 == 50);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "tmlog" + "'", str40, "tmlog");
        org.junit.Assert.assertNotNull(properties43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(properties45);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "tmlog" + "'", str48, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(objSet50);
    }

    @Test
    public void test0217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0217");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Properties properties5 = new java.util.Properties(properties3);
        java.util.Collection<java.lang.Object> objCollection6 = properties3.values();
        java.util.Properties properties7 = new java.util.Properties(properties3);
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        java.util.Properties properties15 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet16 = properties15.keySet();
        boolean boolean17 = properties9.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) properties15);
        java.util.Enumeration<java.lang.Object> objEnumeration18 = properties9.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long20 = atomikosProperties19.defaultJtaTimeout;
        boolean boolean21 = atomikosProperties19.enableLogging;
        atomikosProperties19.setSerialJtaTransactions(true);
        java.util.Properties properties24 = atomikosProperties19.asProperties();
        java.util.Properties properties25 = null;
        java.util.Properties properties26 = new java.util.Properties(properties25);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties28 = atomikosProperties27.asProperties();
        properties26.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties28);
        java.util.Enumeration<java.lang.Object> objEnumeration30 = properties28.keys();
        java.lang.Object obj33 = properties28.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection34 = properties28.values();
        java.util.Set<java.lang.String> strSet35 = properties28.stringPropertyNames();
        boolean boolean36 = properties24.contains((java.lang.Object) properties28);
        java.lang.Object obj37 = properties3.replace((java.lang.Object) properties9, (java.lang.Object) properties28);
        java.util.Properties properties38 = null;
        java.util.Properties properties39 = new java.util.Properties(properties38);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties41 = atomikosProperties40.asProperties();
        properties39.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties41);
        java.util.Enumeration<java.lang.Object> objEnumeration43 = properties41.keys();
        java.lang.Object obj46 = properties41.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Properties properties47 = new java.util.Properties(properties41);
        boolean boolean48 = properties3.containsValue((java.lang.Object) properties41);
        java.lang.String str51 = properties3.getProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, 100=true, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "{}");
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objCollection6);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNotNull(objSet16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objEnumeration18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10000L + "'", long20 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(properties24);
        org.junit.Assert.assertNotNull(properties28);
        org.junit.Assert.assertNotNull(objEnumeration30);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNotNull(objCollection34);
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNotNull(properties41);
        org.junit.Assert.assertNotNull(objEnumeration43);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "{}" + "'", str51, "{}");
    }

    @Test
    public void test0218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0218");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.checkpointInterval = 1L;
        java.lang.String str4 = atomikosProperties0.getService();
        java.lang.String str5 = atomikosProperties0.getLogBaseName();
        java.util.Properties properties6 = atomikosProperties0.asProperties();
        boolean boolean8 = properties6.equals((java.lang.Object) 10);
        java.io.InputStream inputStream9 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties6.loadFromXML(inputStream9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tmlog" + "'", str5, "tmlog");
        org.junit.Assert.assertNotNull(properties6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0219");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Properties properties5 = new java.util.Properties(properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties7 = atomikosProperties6.asProperties();
        java.util.Set<java.lang.String> strSet8 = properties7.stringPropertyNames();
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties7);
        properties7.clear();
        java.util.Set<java.lang.Object> objSet11 = properties7.keySet();
        properties7.clear();
        java.io.PrintWriter printWriter13 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties7.list(printWriter13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(objSet11);
    }

    @Test
    public void test0220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0220");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        atomikosProperties0.setSerialJtaTransactions(true);
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        properties5.clear();
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        java.util.Enumeration<java.lang.Object> objEnumeration13 = properties11.keys();
        boolean boolean15 = properties11.containsValue((java.lang.Object) 0.0f);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long18 = atomikosProperties17.defaultJtaTimeout;
        boolean boolean19 = atomikosProperties17.enableLogging;
        atomikosProperties17.setSerialJtaTransactions(true);
        java.lang.Object obj22 = properties11.putIfAbsent((java.lang.Object) 100L, (java.lang.Object) true);
        boolean boolean23 = properties5.remove((java.lang.Object) 1.0f, (java.lang.Object) 100L);
        java.util.Properties properties24 = null;
        java.util.Properties properties25 = new java.util.Properties(properties24);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties27 = atomikosProperties26.asProperties();
        properties25.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties27);
        java.util.Enumeration<java.lang.Object> objEnumeration29 = properties27.keys();
        java.lang.Object obj32 = properties27.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Properties properties33 = new java.util.Properties(properties27);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties35.setService("");
        atomikosProperties35.setSerialJtaTransactions(true);
        java.util.Properties properties40 = atomikosProperties35.asProperties();
        properties40.clear();
        boolean boolean42 = properties5.replace((java.lang.Object) properties27, (java.lang.Object) 0.0d, (java.lang.Object) properties40);
        java.util.Enumeration<java.lang.Object> objEnumeration43 = properties5.elements();
        java.io.Writer writer44 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties5.store(writer44, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNotNull(objEnumeration13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10000L + "'", long18 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(properties27);
        org.junit.Assert.assertNotNull(objEnumeration29);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNotNull(properties40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(objEnumeration43);
    }

    @Test
    public void test0221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0221");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Properties properties5 = new java.util.Properties(properties3);
        java.util.Properties properties6 = new java.util.Properties(properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties8 = atomikosProperties7.asProperties();
        java.util.Properties properties9 = atomikosProperties7.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.setService("");
        boolean boolean13 = atomikosProperties10.isEnableLogging();
        java.util.Properties properties14 = atomikosProperties10.asProperties();
        java.lang.Object obj15 = properties3.getOrDefault((java.lang.Object) properties9, (java.lang.Object) atomikosProperties10);
        java.util.Collection<java.lang.Object> objCollection16 = properties3.values();
        java.io.OutputStream outputStream17 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.save(outputStream17, "{}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertNotNull(objCollection16);
    }

    @Test
    public void test0222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0222");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        long long5 = atomikosProperties0.getCheckpointInterval();
        atomikosProperties0.forceShutdownOnVmExit = true;
        atomikosProperties0.setSerialJtaTransactions(true);
        java.util.Properties properties10 = atomikosProperties0.asProperties();
        java.util.Properties properties11 = new java.util.Properties(properties10);
        java.io.PrintWriter printWriter12 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties10.list(printWriter12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 500L + "'", long5 == 500L);
        org.junit.Assert.assertNotNull(properties10);
    }

    @Test
    public void test0223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0223");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.setSerialJtaTransactions(true);
        java.lang.String str4 = atomikosProperties0.logBaseName;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties6 = atomikosProperties5.asProperties();
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties9.setService("");
        atomikosProperties9.setThreadedTwoPhaseCommit(true);
        long long14 = atomikosProperties9.getCheckpointInterval();
        boolean boolean15 = atomikosProperties9.threadedTwoPhaseCommit;
        atomikosProperties0.set(properties7, "tmlog", (java.lang.Object) atomikosProperties9);
        java.util.Properties properties17 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties19 = atomikosProperties18.asProperties();
        atomikosProperties18.checkpointInterval = 1L;
        boolean boolean22 = atomikosProperties18.forceShutdownOnVmExit;
        java.lang.String str23 = atomikosProperties18.getLogBaseName();
        long long24 = atomikosProperties18.maxTimeout;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean26 = atomikosProperties25.forceShutdownOnVmExit;
        atomikosProperties25.setSerialJtaTransactions(true);
        java.lang.String str29 = atomikosProperties25.logBaseName;
        atomikosProperties25.service = "tmlog";
        java.util.Properties properties32 = atomikosProperties25.asProperties();
        java.util.Set<java.lang.Object> objSet33 = properties32.keySet();
        java.lang.Object obj34 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean35 = properties17.replace((java.lang.Object) long24, (java.lang.Object) properties32, obj34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tmlog" + "'", str4, "tmlog");
        org.junit.Assert.assertNotNull(properties6);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 500L + "'", long14 == 500L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(properties17);
        org.junit.Assert.assertNotNull(properties19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "tmlog" + "'", str23, "tmlog");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 300000L + "'", long24 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "tmlog" + "'", str29, "tmlog");
        org.junit.Assert.assertNotNull(properties32);
        org.junit.Assert.assertNotNull(objSet33);
    }

    @Test
    public void test0224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0224");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Properties properties7 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet8 = properties7.keySet();
        boolean boolean9 = properties1.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) properties7);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet10 = properties1.entrySet();
        java.util.Properties properties11 = null;
        java.util.Properties properties12 = new java.util.Properties(properties11);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties14 = atomikosProperties13.asProperties();
        properties12.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties14);
        java.util.Enumeration<java.lang.Object> objEnumeration16 = properties14.keys();
        java.lang.Object obj19 = properties14.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Properties properties20 = new java.util.Properties(properties14);
        boolean boolean21 = properties1.contains((java.lang.Object) properties20);
        int int22 = properties1.size();
        java.io.OutputStream outputStream23 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.storeToXML(outputStream23, "{}", "tmlog");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(objEntrySet10);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertNotNull(objEnumeration16);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 9 + "'", int22 == 9);
    }

    @Test
    public void test0225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0225");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        boolean boolean6 = properties3.isEmpty();
        java.util.Properties properties7 = null;
        java.util.Properties properties8 = new java.util.Properties(properties7);
        boolean boolean9 = properties8.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean11 = atomikosProperties10.enableLogging;
        atomikosProperties10.setMaxActives((int) (byte) 1);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties14.setService("");
        atomikosProperties14.setThreadedTwoPhaseCommit(true);
        long long19 = atomikosProperties14.getCheckpointInterval();
        atomikosProperties14.maxTimeout = (-1);
        java.util.Properties properties22 = atomikosProperties14.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long24 = atomikosProperties23.defaultJtaTimeout;
        boolean boolean25 = atomikosProperties23.enableLogging;
        atomikosProperties23.setSerialJtaTransactions(true);
        java.util.Properties properties28 = atomikosProperties23.asProperties();
        properties22.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties28);
        java.util.Enumeration<java.lang.Object> objEnumeration30 = properties22.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean32 = atomikosProperties31.forceShutdownOnVmExit;
        atomikosProperties31.setSerialJtaTransactions(true);
        java.lang.String str35 = atomikosProperties31.logBaseName;
        boolean boolean36 = atomikosProperties31.forceShutdownOnVmExit;
        int int37 = atomikosProperties31.maxActives;
        java.lang.String str38 = atomikosProperties31.logBaseName;
        atomikosProperties31.setForceShutdownOnVmExit(true);
        java.util.Properties properties41 = atomikosProperties31.asProperties();
        boolean boolean42 = atomikosProperties31.isForceShutdownOnVmExit();
        java.util.Properties properties43 = atomikosProperties31.asProperties();
        boolean boolean44 = properties8.replace((java.lang.Object) (byte) 1, (java.lang.Object) properties22, (java.lang.Object) atomikosProperties31);
        java.util.Properties properties45 = new java.util.Properties(properties8);
        java.lang.Object obj46 = properties45.clone();
        java.util.Properties properties47 = null;
        java.util.Properties properties48 = new java.util.Properties(properties47);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties50 = atomikosProperties49.asProperties();
        properties48.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties50);
        java.util.Enumeration<java.lang.Object> objEnumeration52 = properties50.keys();
        java.lang.Object obj55 = properties50.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection56 = properties50.values();
        java.util.Properties properties57 = new java.util.Properties();
        java.lang.Object obj60 = properties57.getOrDefault((java.lang.Object) (short) 1, (java.lang.Object) (-1.0d));
        properties50.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties57);
        java.lang.Object obj62 = properties3.put((java.lang.Object) properties45, (java.lang.Object) properties50);
        java.lang.String str65 = properties50.getProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, 100=true, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=false, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 500L + "'", long19 == 500L);
        org.junit.Assert.assertNotNull(properties22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 10000L + "'", long24 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(properties28);
        org.junit.Assert.assertNotNull(objEnumeration30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "tmlog" + "'", str35, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 50 + "'", int37 == 50);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNotNull(properties41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(properties43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertEquals(obj46.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj46), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj46), "{}");
        org.junit.Assert.assertNotNull(properties50);
        org.junit.Assert.assertNotNull(objEnumeration52);
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertNotNull(objCollection56);
        org.junit.Assert.assertEquals("'" + obj60 + "' != '" + (-1.0d) + "'", obj60, (-1.0d));
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=false, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str65, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=false, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
    }

    @Test
    public void test0226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0226");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.serialJtaTransactions = false;
        long long4 = atomikosProperties0.maxTimeout;
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        java.io.InputStream inputStream6 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties5.loadFromXML(inputStream6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 300000L + "'", long4 == 300000L);
        org.junit.Assert.assertNotNull(properties5);
    }

    @Test
    public void test0227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0227");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Properties properties5 = new java.util.Properties(properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties7 = atomikosProperties6.asProperties();
        java.util.Set<java.lang.String> strSet8 = properties7.stringPropertyNames();
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties7);
        java.util.Properties properties10 = new java.util.Properties(properties5);
        java.io.OutputStream outputStream11 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties5.store(outputStream11, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNotNull(strSet8);
    }

    @Test
    public void test0228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0228");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        boolean boolean7 = properties3.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties8 = new java.util.Properties(properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean10 = atomikosProperties9.forceShutdownOnVmExit;
        atomikosProperties9.setSerialJtaTransactions(true);
        java.lang.String str13 = atomikosProperties9.logBaseName;
        atomikosProperties9.service = "tmlog";
        atomikosProperties9.setSerialJtaTransactions(false);
        atomikosProperties9.setMaxTimeout((long) '4');
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties20.defaultJtaTimeout = (byte) -1;
        java.util.Properties properties23 = atomikosProperties20.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean25 = atomikosProperties24.forceShutdownOnVmExit;
        atomikosProperties24.setSerialJtaTransactions(true);
        java.lang.String str28 = atomikosProperties24.logBaseName;
        atomikosProperties24.service = "tmlog";
        java.util.Properties properties31 = atomikosProperties24.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean33 = atomikosProperties32.forceShutdownOnVmExit;
        java.lang.String str34 = atomikosProperties32.getLogBaseDir();
        java.lang.Object obj35 = properties23.getOrDefault((java.lang.Object) atomikosProperties24, (java.lang.Object) str34);
        long long36 = atomikosProperties24.getDefaultJtaTimeout();
        atomikosProperties24.setLogBaseName("{}");
        int int39 = atomikosProperties24.maxActives;
        long long40 = atomikosProperties24.maxTimeout;
        boolean boolean41 = properties8.remove((java.lang.Object) atomikosProperties9, (java.lang.Object) long40);
        java.lang.Object obj44 = properties8.setProperty("{}", "");
        java.io.Reader reader45 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties8.load(reader45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNotNull(properties23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "tmlog" + "'", str28, "tmlog");
        org.junit.Assert.assertNotNull(properties31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 10000L + "'", long36 == 10000L);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 50 + "'", int39 == 50);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 300000L + "'", long40 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(obj44);
    }

    @Test
    public void test0229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0229");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        boolean boolean7 = properties3.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        java.util.Enumeration<java.lang.Object> objEnumeration13 = properties11.keys();
        java.lang.Object obj16 = properties11.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection17 = properties11.values();
        boolean boolean18 = properties3.containsKey((java.lang.Object) properties11);
        properties11.clear();
        java.util.Set<java.lang.Object> objSet20 = properties11.keySet();
        java.lang.String str23 = properties11.getProperty("", "{}");
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNotNull(objEnumeration13);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(objCollection17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(objSet20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "{}" + "'", str23, "{}");
    }

    @Test
    public void test0230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0230");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        java.lang.Object obj8 = properties3.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection9 = properties3.values();
        java.util.Properties properties10 = new java.util.Properties();
        java.lang.Object obj13 = properties10.getOrDefault((java.lang.Object) (short) 1, (java.lang.Object) (-1.0d));
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        java.util.Properties properties15 = new java.util.Properties(properties3);
        java.lang.String str16 = properties3.toString();
        java.util.Enumeration<?> wildcardEnumeration17 = properties3.propertyNames();
        java.io.InputStream inputStream18 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.load(inputStream18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(objCollection9);
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + (-1.0d) + "'", obj13, (-1.0d));
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str16, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNotNull(wildcardEnumeration17);
    }

    @Test
    public void test0231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0231");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        long long5 = atomikosProperties0.getCheckpointInterval();
        long long6 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.setSerialJtaTransactions(false);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 500L + "'", long5 == 500L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 300000L + "'", long6 == 300000L);
    }

    @Test
    public void test0232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0232");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        long long5 = atomikosProperties0.getCheckpointInterval();
        atomikosProperties0.maxTimeout = (-1);
        java.util.Properties properties8 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long10 = atomikosProperties9.defaultJtaTimeout;
        boolean boolean11 = atomikosProperties9.enableLogging;
        atomikosProperties9.setSerialJtaTransactions(true);
        java.util.Properties properties14 = atomikosProperties9.asProperties();
        properties8.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties14);
        java.util.Enumeration<java.lang.Object> objEnumeration16 = properties8.elements();
        java.util.Properties properties17 = new java.util.Properties(properties8);
        java.util.Properties properties18 = new java.util.Properties(properties8);
        java.io.PrintStream printStream19 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties8.list(printStream19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 500L + "'", long5 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertNotNull(objEnumeration16);
    }

    @Test
    public void test0233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0233");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        java.lang.Object obj8 = properties3.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection9 = properties3.values();
        java.util.Properties properties10 = new java.util.Properties();
        java.lang.Object obj13 = properties10.getOrDefault((java.lang.Object) (short) 1, (java.lang.Object) (-1.0d));
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        java.util.Properties properties15 = new java.util.Properties(properties3);
        java.lang.String str16 = properties3.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties17.setService("");
        atomikosProperties17.setThreadedTwoPhaseCommit(true);
        long long22 = atomikosProperties17.getCheckpointInterval();
        atomikosProperties17.maxTimeout = (-1);
        java.util.Properties properties25 = atomikosProperties17.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long27 = atomikosProperties26.defaultJtaTimeout;
        boolean boolean28 = atomikosProperties26.enableLogging;
        atomikosProperties26.setSerialJtaTransactions(true);
        java.util.Properties properties31 = atomikosProperties26.asProperties();
        properties25.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties31);
        java.util.Enumeration<java.lang.Object> objEnumeration33 = properties25.elements();
        java.util.Properties properties34 = new java.util.Properties(properties25);
        java.lang.Object obj35 = properties3.get((java.lang.Object) properties25);
        java.util.Set<java.lang.String> strSet36 = properties3.stringPropertyNames();
        java.util.Properties properties37 = null;
        java.util.Properties properties38 = new java.util.Properties(properties37);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties39 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties40 = atomikosProperties39.asProperties();
        properties38.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties40);
        java.util.Properties properties42 = new java.util.Properties(properties40);
        java.util.Properties properties43 = new java.util.Properties(properties42);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties44.setService("");
        atomikosProperties44.setSerialJtaTransactions(true);
        atomikosProperties44.setEnableLogging(false);
        atomikosProperties44.logBaseName = "tmlog";
        int int53 = atomikosProperties44.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties54 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties54.setService("");
        atomikosProperties54.setSerialJtaTransactions(true);
        atomikosProperties54.setEnableLogging(false);
        atomikosProperties54.logBaseName = "tmlog";
        atomikosProperties54.maxActives = 1;
        atomikosProperties54.setEnableLogging(true);
        java.lang.String str67 = atomikosProperties54.service;
        atomikosProperties54.setCheckpointInterval((long) (byte) 0);
        long long70 = atomikosProperties54.getDefaultJtaTimeout();
        boolean boolean71 = properties43.remove((java.lang.Object) atomikosProperties44, (java.lang.Object) long70);
        boolean boolean72 = properties3.containsValue((java.lang.Object) atomikosProperties44);
        java.util.Enumeration<?> wildcardEnumeration73 = properties3.propertyNames();
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(objCollection9);
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + (-1.0d) + "'", obj13, (-1.0d));
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str16, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 500L + "'", long22 == 500L);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10000L + "'", long27 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(properties31);
        org.junit.Assert.assertNotNull(objEnumeration33);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertNotNull(properties40);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 50 + "'", int53 == 50);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 10000L + "'", long70 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(wildcardEnumeration73);
    }

    @Test
    public void test0234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0234");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.defaultJtaTimeout;
        long long2 = atomikosProperties0.getCheckpointInterval();
        atomikosProperties0.checkpointInterval = 300000L;
        java.lang.String str5 = atomikosProperties0.getTransactionManagerUniqueName();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 10000L + "'", long1 == 10000L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 500L + "'", long2 == 500L);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test0235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0235");
        java.util.Properties properties0 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties1 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties2 = atomikosProperties1.asProperties();
        atomikosProperties1.setLogBaseName("hi!");
        atomikosProperties1.setCheckpointInterval((long) ' ');
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties7.setService("");
        atomikosProperties7.setThreadedTwoPhaseCommit(true);
        long long12 = atomikosProperties7.getCheckpointInterval();
        atomikosProperties7.maxTimeout = (-1);
        java.util.Properties properties15 = atomikosProperties7.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long17 = atomikosProperties16.defaultJtaTimeout;
        boolean boolean18 = atomikosProperties16.enableLogging;
        atomikosProperties16.setSerialJtaTransactions(true);
        java.util.Properties properties21 = atomikosProperties16.asProperties();
        properties15.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties21);
        java.util.Enumeration<java.lang.Object> objEnumeration23 = properties15.elements();
        java.lang.Object obj24 = properties0.putIfAbsent((java.lang.Object) ' ', (java.lang.Object) properties15);
        java.lang.String str27 = properties0.getProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=false, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, 100=true, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 500L + "'", long12 == 500L);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10000L + "'", long17 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(properties21);
        org.junit.Assert.assertNotNull(objEnumeration23);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, 100=true, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str27, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, 100=true, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
    }

    @Test
    public void test0236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0236");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        boolean boolean7 = properties3.containsValue((java.lang.Object) 0.0f);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long10 = atomikosProperties9.defaultJtaTimeout;
        boolean boolean11 = atomikosProperties9.enableLogging;
        atomikosProperties9.setSerialJtaTransactions(true);
        java.lang.Object obj14 = properties3.putIfAbsent((java.lang.Object) 100L, (java.lang.Object) true);
        java.util.Enumeration<java.lang.Object> objEnumeration15 = properties3.elements();
        java.lang.String str16 = properties3.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Enumeration<?> wildcardEnumeration17 = properties3.propertyNames();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.Long cannot be cast to java.lang.String");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(objEnumeration15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, 100=true, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str16, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, 100=true, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
    }

    @Test
    public void test0237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0237");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        atomikosProperties0.setSerialJtaTransactions(true);
        atomikosProperties0.setEnableLogging(false);
        java.lang.String str7 = atomikosProperties0.logBaseName;
        java.lang.Class<?> wildcardClass8 = atomikosProperties0.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "tmlog" + "'", str7, "tmlog");
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0238");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        boolean boolean7 = properties3.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        java.util.Properties properties15 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet16 = properties15.keySet();
        boolean boolean17 = properties9.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) properties15);
        java.util.Enumeration<java.lang.Object> objEnumeration18 = properties9.elements();
        boolean boolean20 = properties3.remove((java.lang.Object) properties9, (java.lang.Object) 50);
        properties3.clear();
        java.util.Enumeration<java.lang.Object> objEnumeration22 = properties3.elements();
        java.util.Properties properties23 = new java.util.Properties(properties3);
        java.io.Writer writer24 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties23.store(writer24, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=false, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNotNull(objSet16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objEnumeration18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objEnumeration22);
    }

    @Test
    public void test0239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0239");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        boolean boolean7 = properties3.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        java.util.Enumeration<java.lang.Object> objEnumeration13 = properties11.keys();
        java.lang.Object obj16 = properties11.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection17 = properties11.values();
        boolean boolean18 = properties3.containsKey((java.lang.Object) properties11);
        java.util.Properties properties19 = new java.util.Properties(properties3);
        java.util.Properties properties20 = new java.util.Properties(properties3);
        java.lang.Object obj23 = properties3.setProperty("tmlog", "tmlog");
        java.io.OutputStream outputStream24 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.storeToXML(outputStream24, "", "{}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNotNull(objEnumeration13);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(objCollection17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj23);
    }

    @Test
    public void test0240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0240");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        boolean boolean3 = atomikosProperties0.isEnableLogging();
        java.util.Properties properties4 = atomikosProperties0.asProperties();
        atomikosProperties0.setDefaultJtaTimeout(300000L);
        atomikosProperties0.maxActives = (short) 0;
        java.lang.Class<?> wildcardClass9 = atomikosProperties0.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(properties4);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0241");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Properties properties5 = new java.util.Properties(properties3);
        java.util.Enumeration<?> wildcardEnumeration6 = properties3.propertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean8 = atomikosProperties7.forceShutdownOnVmExit;
        atomikosProperties7.setSerialJtaTransactions(true);
        java.lang.String str11 = atomikosProperties7.logBaseName;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties13 = atomikosProperties12.asProperties();
        java.util.Properties properties14 = atomikosProperties12.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties16.setService("");
        atomikosProperties16.setThreadedTwoPhaseCommit(true);
        long long21 = atomikosProperties16.getCheckpointInterval();
        boolean boolean22 = atomikosProperties16.threadedTwoPhaseCommit;
        atomikosProperties7.set(properties14, "tmlog", (java.lang.Object) atomikosProperties16);
        java.lang.String str24 = atomikosProperties16.getLogBaseDir();
        atomikosProperties16.logBaseName = "";
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties27.setService("");
        atomikosProperties27.setSerialJtaTransactions(true);
        atomikosProperties27.setEnableLogging(false);
        atomikosProperties27.logBaseName = "tmlog";
        atomikosProperties27.setMaxActives((int) '#');
        atomikosProperties27.setService("hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties40.setService("");
        atomikosProperties40.setSerialJtaTransactions(true);
        atomikosProperties40.setEnableLogging(false);
        atomikosProperties40.logBaseName = "tmlog";
        atomikosProperties40.maxActives = 1;
        atomikosProperties40.setEnableLogging(true);
        java.lang.String str53 = atomikosProperties40.service;
        java.lang.String str54 = atomikosProperties40.getTransactionManagerUniqueName();
        atomikosProperties40.checkpointInterval = '#';
        atomikosProperties40.setForceShutdownOnVmExit(true);
        boolean boolean59 = properties3.replace((java.lang.Object) atomikosProperties16, (java.lang.Object) atomikosProperties27, (java.lang.Object) atomikosProperties40);
        java.io.OutputStream outputStream60 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.save(outputStream60, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(wildcardEnumeration6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "tmlog" + "'", str11, "tmlog");
        org.junit.Assert.assertNotNull(properties13);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 500L + "'", long21 == 500L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test0242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0242");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Properties properties5 = new java.util.Properties(properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties7 = atomikosProperties6.asProperties();
        java.util.Set<java.lang.String> strSet8 = properties7.stringPropertyNames();
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties7);
        properties7.clear();
        java.util.Set<java.lang.Object> objSet11 = properties7.keySet();
        properties7.clear();
        java.util.Properties properties13 = new java.util.Properties(properties7);
        java.lang.Object obj14 = null;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties15.defaultJtaTimeout = (byte) -1;
        java.util.Properties properties18 = atomikosProperties15.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setService("");
        atomikosProperties19.setThreadedTwoPhaseCommit(true);
        long long24 = atomikosProperties19.getCheckpointInterval();
        atomikosProperties19.maxTimeout = (-1);
        java.util.Properties properties27 = atomikosProperties19.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long29 = atomikosProperties28.defaultJtaTimeout;
        boolean boolean30 = atomikosProperties28.enableLogging;
        atomikosProperties28.setSerialJtaTransactions(true);
        java.util.Properties properties33 = atomikosProperties28.asProperties();
        properties27.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties33);
        java.util.Enumeration<java.lang.Object> objEnumeration35 = properties27.elements();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean36 = properties13.replace(obj14, (java.lang.Object) atomikosProperties15, (java.lang.Object) objEnumeration35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(objSet11);
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 500L + "'", long24 == 500L);
        org.junit.Assert.assertNotNull(properties27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 10000L + "'", long29 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(properties33);
        org.junit.Assert.assertNotNull(objEnumeration35);
    }

    @Test
    public void test0243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0243");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        atomikosProperties0.setSerialJtaTransactions(true);
        atomikosProperties0.setEnableLogging(false);
        java.lang.String str7 = atomikosProperties0.logBaseName;
        int int8 = atomikosProperties0.maxActives;
        atomikosProperties0.setEnableLogging(false);
        java.util.Properties properties11 = atomikosProperties0.asProperties();
        java.io.InputStream inputStream12 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties11.loadFromXML(inputStream12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "tmlog" + "'", str7, "tmlog");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 50 + "'", int8 == 50);
        org.junit.Assert.assertNotNull(properties11);
    }

    @Test
    public void test0244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0244");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        boolean boolean7 = properties3.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        java.util.Enumeration<java.lang.Object> objEnumeration13 = properties11.keys();
        java.lang.Object obj16 = properties11.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection17 = properties11.values();
        boolean boolean18 = properties3.containsKey((java.lang.Object) properties11);
        java.util.Properties properties19 = new java.util.Properties(properties3);
        java.lang.Object obj20 = properties19.clone();
        java.util.Collection<java.lang.Object> objCollection21 = properties19.values();
        java.io.Writer writer22 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties19.store(writer22, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNotNull(objEnumeration13);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(objCollection17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{}");
        org.junit.Assert.assertNotNull(objCollection21);
    }

    @Test
    public void test0245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0245");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        java.lang.Object obj8 = properties3.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection9 = properties3.values();
        java.util.Properties properties10 = new java.util.Properties();
        java.lang.Object obj13 = properties10.getOrDefault((java.lang.Object) (short) 1, (java.lang.Object) (-1.0d));
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        java.util.Properties properties15 = null;
        java.util.Properties properties16 = new java.util.Properties(properties15);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties18 = atomikosProperties17.asProperties();
        properties16.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties18);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties20.setService("");
        atomikosProperties20.setThreadedTwoPhaseCommit(true);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties25.setService("");
        atomikosProperties25.setSerialJtaTransactions(true);
        atomikosProperties25.setEnableLogging(false);
        java.lang.String str32 = atomikosProperties25.logBaseName;
        java.lang.Object obj33 = properties18.replace((java.lang.Object) atomikosProperties20, (java.lang.Object) atomikosProperties25);
        boolean boolean34 = properties3.contains((java.lang.Object) properties18);
        properties18.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean37 = atomikosProperties36.forceShutdownOnVmExit;
        atomikosProperties36.setSerialJtaTransactions(true);
        java.lang.String str40 = atomikosProperties36.logBaseName;
        boolean boolean41 = atomikosProperties36.forceShutdownOnVmExit;
        int int42 = atomikosProperties36.maxActives;
        atomikosProperties36.setService("hi!");
        java.util.Properties properties45 = atomikosProperties36.asProperties();
        java.util.Properties properties46 = new java.util.Properties(properties45);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet47 = properties45.entrySet();
        java.lang.Object obj48 = properties18.get((java.lang.Object) properties45);
        java.io.InputStream inputStream49 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties18.loadFromXML(inputStream49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(objCollection9);
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + (-1.0d) + "'", obj13, (-1.0d));
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "tmlog" + "'", str32, "tmlog");
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "tmlog" + "'", str40, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 50 + "'", int42 == 50);
        org.junit.Assert.assertNotNull(properties45);
        org.junit.Assert.assertNotNull(objEntrySet47);
        org.junit.Assert.assertNull(obj48);
    }

    @Test
    public void test0246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0246");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        java.lang.Object obj8 = properties3.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Properties properties9 = new java.util.Properties(properties3);
        java.io.InputStream inputStream10 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.loadFromXML(inputStream10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(obj8);
    }

    @Test
    public void test0247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0247");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Properties properties5 = new java.util.Properties(properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties7 = atomikosProperties6.asProperties();
        java.util.Set<java.lang.String> strSet8 = properties7.stringPropertyNames();
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties7);
        properties7.clear();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet11 = properties7.entrySet();
        java.util.Properties properties12 = null;
        java.util.Properties properties13 = new java.util.Properties(properties12);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties15 = atomikosProperties14.asProperties();
        properties13.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties15);
        java.util.Enumeration<java.lang.Object> objEnumeration17 = properties15.keys();
        boolean boolean19 = properties15.containsValue((java.lang.Object) 0.0f);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long22 = atomikosProperties21.defaultJtaTimeout;
        boolean boolean23 = atomikosProperties21.enableLogging;
        atomikosProperties21.setSerialJtaTransactions(true);
        java.lang.Object obj26 = properties15.putIfAbsent((java.lang.Object) 100L, (java.lang.Object) true);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties15.elements();
        java.lang.Class<?> wildcardClass28 = properties15.getClass();
        java.lang.Object obj29 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj30 = properties7.replace((java.lang.Object) properties15, obj29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(objEntrySet11);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertNotNull(objEnumeration17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 10000L + "'", long22 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0248");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.defaultJtaTimeout;
        boolean boolean2 = atomikosProperties0.enableLogging;
        int int3 = atomikosProperties0.maxActives;
        java.lang.String str4 = atomikosProperties0.getService();
        java.util.Properties properties5 = null;
        java.util.Properties properties6 = new java.util.Properties(properties5);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties8 = atomikosProperties7.asProperties();
        properties6.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        java.util.Enumeration<java.lang.Object> objEnumeration10 = properties8.keys();
        boolean boolean12 = properties8.containsValue((java.lang.Object) 0.0f);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long15 = atomikosProperties14.defaultJtaTimeout;
        boolean boolean16 = atomikosProperties14.enableLogging;
        atomikosProperties14.setSerialJtaTransactions(true);
        java.lang.Object obj19 = properties8.putIfAbsent((java.lang.Object) 100L, (java.lang.Object) true);
        java.util.Enumeration<java.lang.Object> objEnumeration20 = properties8.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties22.setService("");
        atomikosProperties22.setSerialJtaTransactions(true);
        atomikosProperties22.setEnableLogging(false);
        atomikosProperties22.service = "tmlog";
        atomikosProperties0.set(properties8, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", (java.lang.Object) atomikosProperties22);
        boolean boolean32 = atomikosProperties22.isForceShutdownOnVmExit();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 10000L + "'", long1 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 50 + "'", int3 == 50);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertNotNull(objEnumeration10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10000L + "'", long15 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNotNull(objEnumeration20);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test0249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0249");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        java.lang.Object obj8 = properties3.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection9 = properties3.values();
        java.util.Properties properties10 = new java.util.Properties();
        java.lang.Object obj13 = properties10.getOrDefault((java.lang.Object) (short) 1, (java.lang.Object) (-1.0d));
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        java.util.Properties properties15 = null;
        java.util.Properties properties16 = new java.util.Properties(properties15);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties18 = atomikosProperties17.asProperties();
        properties16.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties18);
        java.util.Properties properties20 = new java.util.Properties(properties18);
        java.util.Properties properties21 = new java.util.Properties(properties18);
        java.util.Collection<java.lang.Object> objCollection22 = properties21.values();
        java.util.Enumeration<?> wildcardEnumeration23 = properties21.propertyNames();
        java.lang.Object obj24 = properties10.get((java.lang.Object) wildcardEnumeration23);
        java.io.PrintStream printStream25 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties10.list(printStream25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(objCollection9);
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + (-1.0d) + "'", obj13, (-1.0d));
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertNotNull(objCollection22);
        org.junit.Assert.assertNotNull(wildcardEnumeration23);
        org.junit.Assert.assertNull(obj24);
    }

    @Test
    public void test0250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0250");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        java.lang.Object obj8 = properties3.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection9 = properties3.values();
        java.util.Properties properties10 = new java.util.Properties();
        java.lang.Object obj13 = properties10.getOrDefault((java.lang.Object) (short) 1, (java.lang.Object) (-1.0d));
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        java.util.Properties properties15 = new java.util.Properties(properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean17 = atomikosProperties16.forceShutdownOnVmExit;
        atomikosProperties16.setSerialJtaTransactions(true);
        java.lang.String str20 = atomikosProperties16.logBaseName;
        atomikosProperties16.service = "tmlog";
        boolean boolean23 = properties15.containsValue((java.lang.Object) "tmlog");
        java.util.Properties properties24 = new java.util.Properties(properties15);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet25 = properties15.entrySet();
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(objCollection9);
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + (-1.0d) + "'", obj13, (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "tmlog" + "'", str20, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(objEntrySet25);
    }

    @Test
    public void test0251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0251");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        boolean boolean7 = properties3.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        java.util.Enumeration<java.lang.Object> objEnumeration13 = properties11.keys();
        java.lang.Object obj16 = properties11.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection17 = properties11.values();
        boolean boolean18 = properties3.containsKey((java.lang.Object) properties11);
        java.util.Properties properties19 = new java.util.Properties(properties3);
        java.util.Properties properties20 = new java.util.Properties(properties3);
        java.io.Reader reader21 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties20.load(reader21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNotNull(objEnumeration13);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(objCollection17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0252");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        java.util.Set<java.lang.String> strSet2 = properties1.stringPropertyNames();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties6 = atomikosProperties5.asProperties();
        properties4.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties6);
        java.util.Enumeration<java.lang.Object> objEnumeration8 = properties6.keys();
        boolean boolean10 = properties6.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties11 = null;
        java.util.Properties properties12 = new java.util.Properties(properties11);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties14 = atomikosProperties13.asProperties();
        properties12.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties14);
        java.util.Enumeration<java.lang.Object> objEnumeration16 = properties14.keys();
        java.lang.Object obj19 = properties14.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection20 = properties14.values();
        boolean boolean21 = properties6.containsKey((java.lang.Object) properties14);
        java.lang.Object obj22 = properties1.get((java.lang.Object) properties6);
        java.util.Set<java.lang.String> strSet23 = properties1.stringPropertyNames();
        java.io.Writer writer24 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.store(writer24, "tmlog");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(properties6);
        org.junit.Assert.assertNotNull(objEnumeration8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertNotNull(objEnumeration16);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNotNull(objCollection20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNotNull(strSet23);
    }

    @Test
    public void test0253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0253");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.setSerialJtaTransactions(true);
        java.lang.String str4 = atomikosProperties0.logBaseName;
        atomikosProperties0.service = "tmlog";
        atomikosProperties0.setSerialJtaTransactions(false);
        java.util.Properties properties9 = atomikosProperties0.asProperties();
        java.io.OutputStream outputStream10 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties9.storeToXML(outputStream10, "{}", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, true=true, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tmlog" + "'", str4, "tmlog");
        org.junit.Assert.assertNotNull(properties9);
    }

    @Test
    public void test0254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0254");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        java.lang.Object obj8 = properties3.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection9 = properties3.values();
        java.util.Properties properties10 = new java.util.Properties();
        java.lang.Object obj13 = properties10.getOrDefault((java.lang.Object) (short) 1, (java.lang.Object) (-1.0d));
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        java.util.Properties properties15 = new java.util.Properties(properties3);
        java.io.Reader reader16 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties15.load(reader16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(objCollection9);
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + (-1.0d) + "'", obj13, (-1.0d));
    }

    @Test
    public void test0255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0255");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        java.lang.Object obj8 = properties3.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection9 = properties3.values();
        java.util.Properties properties10 = new java.util.Properties();
        java.lang.Object obj13 = properties10.getOrDefault((java.lang.Object) (short) 1, (java.lang.Object) (-1.0d));
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        java.util.Properties properties15 = null;
        java.util.Properties properties16 = new java.util.Properties(properties15);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties18 = atomikosProperties17.asProperties();
        properties16.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties18);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties20.setService("");
        atomikosProperties20.setThreadedTwoPhaseCommit(true);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties25.setService("");
        atomikosProperties25.setSerialJtaTransactions(true);
        atomikosProperties25.setEnableLogging(false);
        java.lang.String str32 = atomikosProperties25.logBaseName;
        java.lang.Object obj33 = properties18.replace((java.lang.Object) atomikosProperties20, (java.lang.Object) atomikosProperties25);
        boolean boolean34 = properties3.contains((java.lang.Object) properties18);
        java.lang.String str37 = properties3.getProperty("{}", "{}");
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(objCollection9);
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + (-1.0d) + "'", obj13, (-1.0d));
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "tmlog" + "'", str32, "tmlog");
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "{}" + "'", str37, "{}");
    }

    @Test
    public void test0256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0256");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties6.setService("");
        atomikosProperties6.setSerialJtaTransactions(true);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean12 = atomikosProperties11.forceShutdownOnVmExit;
        atomikosProperties11.setSerialJtaTransactions(true);
        boolean boolean15 = properties3.remove((java.lang.Object) atomikosProperties6, (java.lang.Object) true);
        java.util.Set<java.lang.String> strSet16 = properties3.stringPropertyNames();
        java.util.Properties properties17 = null;
        java.util.Properties properties18 = new java.util.Properties(properties17);
        java.util.Properties properties19 = new java.util.Properties(properties18);
        java.util.Properties properties20 = new java.util.Properties(properties18);
        java.lang.Object obj21 = properties3.get((java.lang.Object) properties18);
        java.io.InputStream inputStream22 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.load(inputStream22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNull(obj21);
    }

    @Test
    public void test0257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0257");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        java.lang.Object obj8 = properties3.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection9 = properties3.values();
        java.util.Set<java.lang.String> strSet10 = properties3.stringPropertyNames();
        java.util.Enumeration<java.lang.Object> objEnumeration11 = properties3.elements();
        java.util.Properties properties12 = new java.util.Properties(properties3);
        java.io.InputStream inputStream13 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties12.load(inputStream13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(objCollection9);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(objEnumeration11);
    }

    @Test
    public void test0258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0258");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        atomikosProperties0.setSerialJtaTransactions(true);
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        properties5.clear();
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        java.util.Enumeration<java.lang.Object> objEnumeration13 = properties11.keys();
        boolean boolean15 = properties11.containsValue((java.lang.Object) 0.0f);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long18 = atomikosProperties17.defaultJtaTimeout;
        boolean boolean19 = atomikosProperties17.enableLogging;
        atomikosProperties17.setSerialJtaTransactions(true);
        java.lang.Object obj22 = properties11.putIfAbsent((java.lang.Object) 100L, (java.lang.Object) true);
        boolean boolean23 = properties5.remove((java.lang.Object) 1.0f, (java.lang.Object) 100L);
        java.util.Properties properties24 = null;
        java.util.Properties properties25 = new java.util.Properties(properties24);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties27 = atomikosProperties26.asProperties();
        properties25.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties27);
        java.util.Enumeration<java.lang.Object> objEnumeration29 = properties27.keys();
        java.lang.Object obj32 = properties27.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Properties properties33 = new java.util.Properties(properties27);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties35.setService("");
        atomikosProperties35.setSerialJtaTransactions(true);
        java.util.Properties properties40 = atomikosProperties35.asProperties();
        properties40.clear();
        boolean boolean42 = properties5.replace((java.lang.Object) properties27, (java.lang.Object) 0.0d, (java.lang.Object) properties40);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean45 = atomikosProperties44.forceShutdownOnVmExit;
        atomikosProperties44.setSerialJtaTransactions(true);
        java.lang.String str48 = atomikosProperties44.logBaseName;
        boolean boolean49 = atomikosProperties44.forceShutdownOnVmExit;
        int int50 = atomikosProperties44.maxActives;
        java.lang.String str51 = atomikosProperties44.logBaseName;
        atomikosProperties44.transactionManagerUniqueName = "hi!";
        boolean boolean54 = atomikosProperties44.serialJtaTransactions;
        atomikosProperties44.setSerialJtaTransactions(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties57 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties57.setService("");
        boolean boolean60 = atomikosProperties57.isEnableLogging();
        atomikosProperties57.setService("");
        boolean boolean63 = atomikosProperties57.enableLogging;
        long long64 = atomikosProperties57.getMaxTimeout();
        boolean boolean65 = properties27.replace((java.lang.Object) 500L, (java.lang.Object) atomikosProperties44, (java.lang.Object) atomikosProperties57);
        java.io.OutputStream outputStream66 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties27.storeToXML(outputStream66, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNotNull(objEnumeration13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10000L + "'", long18 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(properties27);
        org.junit.Assert.assertNotNull(objEnumeration29);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNotNull(properties40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "tmlog" + "'", str48, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 50 + "'", int50 == 50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "tmlog" + "'", str51, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 300000L + "'", long64 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test0259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0259");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration6 = properties3.elements();
        java.util.Properties properties7 = null;
        java.util.Properties properties8 = new java.util.Properties(properties7);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties10 = atomikosProperties9.asProperties();
        properties8.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        java.util.Properties properties12 = new java.util.Properties(properties10);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties13.defaultJtaTimeout = (byte) -1;
        java.util.Properties properties16 = atomikosProperties13.asProperties();
        boolean boolean17 = properties10.contains((java.lang.Object) properties16);
        java.util.Properties properties18 = null;
        java.util.Properties properties19 = new java.util.Properties(properties18);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties21 = atomikosProperties20.asProperties();
        properties19.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties21);
        java.util.Enumeration<java.lang.Object> objEnumeration23 = properties21.keys();
        boolean boolean25 = properties21.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties26 = null;
        java.util.Properties properties27 = new java.util.Properties(properties26);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties29 = atomikosProperties28.asProperties();
        properties27.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties29);
        java.util.Enumeration<java.lang.Object> objEnumeration31 = properties29.keys();
        java.lang.Object obj34 = properties29.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection35 = properties29.values();
        boolean boolean36 = properties21.containsKey((java.lang.Object) properties29);
        java.util.Properties properties37 = new java.util.Properties(properties21);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long39 = atomikosProperties38.defaultJtaTimeout;
        boolean boolean40 = atomikosProperties38.enableLogging;
        atomikosProperties38.setSerialJtaTransactions(true);
        java.util.Properties properties43 = atomikosProperties38.asProperties();
        java.util.Properties properties44 = atomikosProperties38.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties45 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean46 = atomikosProperties45.forceShutdownOnVmExit;
        atomikosProperties45.setSerialJtaTransactions(true);
        java.lang.String str49 = atomikosProperties45.logBaseName;
        boolean boolean50 = atomikosProperties45.forceShutdownOnVmExit;
        int int51 = atomikosProperties45.maxActives;
        java.lang.String str52 = atomikosProperties45.logBaseName;
        atomikosProperties45.setForceShutdownOnVmExit(true);
        java.util.Properties properties55 = atomikosProperties45.asProperties();
        boolean boolean56 = atomikosProperties45.isForceShutdownOnVmExit();
        java.util.Properties properties57 = atomikosProperties45.asProperties();
        java.lang.Object obj58 = properties21.replace((java.lang.Object) atomikosProperties38, (java.lang.Object) atomikosProperties45);
        java.lang.Object obj59 = properties3.putIfAbsent((java.lang.Object) properties16, (java.lang.Object) atomikosProperties45);
        atomikosProperties45.setMaxTimeout(9L);
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNotNull(objEnumeration6);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(properties21);
        org.junit.Assert.assertNotNull(objEnumeration23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(properties29);
        org.junit.Assert.assertNotNull(objEnumeration31);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNotNull(objCollection35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 10000L + "'", long39 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(properties43);
        org.junit.Assert.assertNotNull(properties44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "tmlog" + "'", str49, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 50 + "'", int51 == 50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "tmlog" + "'", str52, "tmlog");
        org.junit.Assert.assertNotNull(properties55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(properties57);
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertNull(obj59);
    }

    @Test
    public void test0260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0260");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Properties properties5 = new java.util.Properties(properties3);
        java.util.Properties properties6 = new java.util.Properties(properties3);
        java.lang.String str8 = properties3.getProperty("hi!");
        java.util.Properties properties9 = null;
        java.util.Properties properties10 = new java.util.Properties(properties9);
        boolean boolean11 = properties10.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean13 = atomikosProperties12.enableLogging;
        atomikosProperties12.setMaxActives((int) (byte) 1);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties16.setService("");
        atomikosProperties16.setThreadedTwoPhaseCommit(true);
        long long21 = atomikosProperties16.getCheckpointInterval();
        atomikosProperties16.maxTimeout = (-1);
        java.util.Properties properties24 = atomikosProperties16.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long26 = atomikosProperties25.defaultJtaTimeout;
        boolean boolean27 = atomikosProperties25.enableLogging;
        atomikosProperties25.setSerialJtaTransactions(true);
        java.util.Properties properties30 = atomikosProperties25.asProperties();
        properties24.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties30);
        java.util.Enumeration<java.lang.Object> objEnumeration32 = properties24.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean34 = atomikosProperties33.forceShutdownOnVmExit;
        atomikosProperties33.setSerialJtaTransactions(true);
        java.lang.String str37 = atomikosProperties33.logBaseName;
        boolean boolean38 = atomikosProperties33.forceShutdownOnVmExit;
        int int39 = atomikosProperties33.maxActives;
        java.lang.String str40 = atomikosProperties33.logBaseName;
        atomikosProperties33.setForceShutdownOnVmExit(true);
        java.util.Properties properties43 = atomikosProperties33.asProperties();
        boolean boolean44 = atomikosProperties33.isForceShutdownOnVmExit();
        java.util.Properties properties45 = atomikosProperties33.asProperties();
        boolean boolean46 = properties10.replace((java.lang.Object) (byte) 1, (java.lang.Object) properties24, (java.lang.Object) atomikosProperties33);
        java.util.Properties properties47 = new java.util.Properties(properties10);
        boolean boolean48 = properties3.equals((java.lang.Object) properties10);
        java.io.OutputStream outputStream49 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.storeToXML(outputStream49, "{}", "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 500L + "'", long21 == 500L);
        org.junit.Assert.assertNotNull(properties24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 10000L + "'", long26 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(properties30);
        org.junit.Assert.assertNotNull(objEnumeration32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "tmlog" + "'", str37, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 50 + "'", int39 == 50);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "tmlog" + "'", str40, "tmlog");
        org.junit.Assert.assertNotNull(properties43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(properties45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test0261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0261");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        boolean boolean7 = properties3.containsValue((java.lang.Object) 0.0f);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long10 = atomikosProperties9.defaultJtaTimeout;
        boolean boolean11 = atomikosProperties9.enableLogging;
        atomikosProperties9.setSerialJtaTransactions(true);
        java.lang.Object obj14 = properties3.putIfAbsent((java.lang.Object) 100L, (java.lang.Object) true);
        java.util.Properties properties15 = new java.util.Properties(properties3);
        java.util.Properties properties16 = new java.util.Properties(properties15);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet17 = properties15.entrySet();
        java.io.Writer writer18 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties15.store(writer18, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(objEntrySet17);
    }

    @Test
    public void test0262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0262");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Properties properties5 = new java.util.Properties(properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties7 = atomikosProperties6.asProperties();
        java.util.Set<java.lang.String> strSet8 = properties7.stringPropertyNames();
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties7);
        java.util.Enumeration<?> wildcardEnumeration10 = properties7.propertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties11.setService("");
        boolean boolean14 = atomikosProperties11.isEnableLogging();
        java.util.Properties properties15 = atomikosProperties11.asProperties();
        properties15.clear();
        java.util.Set<java.lang.Object> objSet17 = properties15.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean19 = atomikosProperties18.enableLogging;
        atomikosProperties18.setMaxActives((int) (byte) 1);
        atomikosProperties18.enableLogging = false;
        long long24 = atomikosProperties18.checkpointInterval;
        boolean boolean25 = properties7.remove((java.lang.Object) properties15, (java.lang.Object) atomikosProperties18);
        java.io.OutputStream outputStream26 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties15.store(outputStream26, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, true=true, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(wildcardEnumeration10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertNotNull(objSet17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 500L + "'", long24 == 500L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test0263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0263");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        atomikosProperties0.setMaxTimeout(1L);
        atomikosProperties0.maxActives = 'a';
    }

    @Test
    public void test0264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0264");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        java.lang.Object obj8 = properties3.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection9 = properties3.values();
        java.util.Properties properties10 = new java.util.Properties();
        java.lang.Object obj13 = properties10.getOrDefault((java.lang.Object) (short) 1, (java.lang.Object) (-1.0d));
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        java.util.Properties properties15 = null;
        java.util.Properties properties16 = new java.util.Properties(properties15);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties18 = atomikosProperties17.asProperties();
        properties16.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties18);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties20.setService("");
        atomikosProperties20.setThreadedTwoPhaseCommit(true);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties25.setService("");
        atomikosProperties25.setSerialJtaTransactions(true);
        atomikosProperties25.setEnableLogging(false);
        java.lang.String str32 = atomikosProperties25.logBaseName;
        java.lang.Object obj33 = properties18.replace((java.lang.Object) atomikosProperties20, (java.lang.Object) atomikosProperties25);
        boolean boolean34 = properties3.contains((java.lang.Object) properties18);
        java.util.Properties properties35 = new java.util.Properties(properties18);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long37 = atomikosProperties36.defaultJtaTimeout;
        boolean boolean38 = atomikosProperties36.enableLogging;
        atomikosProperties36.setSerialJtaTransactions(true);
        java.util.Properties properties41 = atomikosProperties36.asProperties();
        java.util.Properties properties42 = atomikosProperties36.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties45 = atomikosProperties44.asProperties();
        atomikosProperties44.checkpointInterval = 1L;
        boolean boolean48 = atomikosProperties44.forceShutdownOnVmExit;
        java.lang.Object obj49 = properties42.put((java.lang.Object) (short) 0, (java.lang.Object) atomikosProperties44);
        boolean boolean50 = atomikosProperties44.isSerialJtaTransactions();
        atomikosProperties44.logBaseName = "";
        java.lang.Object obj53 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj54 = properties35.put((java.lang.Object) "", obj53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(objCollection9);
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + (-1.0d) + "'", obj13, (-1.0d));
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "tmlog" + "'", str32, "tmlog");
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 10000L + "'", long37 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(properties41);
        org.junit.Assert.assertNotNull(properties42);
        org.junit.Assert.assertNotNull(properties45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
    }

    @Test
    public void test0265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0265");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        java.lang.String str2 = properties1.toString();
        org.junit.Assert.assertNotNull(properties1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str2, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
    }

    @Test
    public void test0266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0266");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.setSerialJtaTransactions(true);
        java.lang.String str4 = atomikosProperties0.logBaseName;
        atomikosProperties0.service = "tmlog";
        long long7 = atomikosProperties0.checkpointInterval;
        boolean boolean8 = atomikosProperties0.isForceShutdownOnVmExit();
        boolean boolean9 = atomikosProperties0.isSerialJtaTransactions();
        boolean boolean10 = atomikosProperties0.threadedTwoPhaseCommit;
        long long11 = atomikosProperties0.defaultJtaTimeout;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tmlog" + "'", str4, "tmlog");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10000L + "'", long11 == 10000L);
    }

    @Test
    public void test0267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0267");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        boolean boolean2 = properties1.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties3 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean4 = atomikosProperties3.enableLogging;
        atomikosProperties3.setMaxActives((int) (byte) 1);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties7.setService("");
        atomikosProperties7.setThreadedTwoPhaseCommit(true);
        long long12 = atomikosProperties7.getCheckpointInterval();
        atomikosProperties7.maxTimeout = (-1);
        java.util.Properties properties15 = atomikosProperties7.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long17 = atomikosProperties16.defaultJtaTimeout;
        boolean boolean18 = atomikosProperties16.enableLogging;
        atomikosProperties16.setSerialJtaTransactions(true);
        java.util.Properties properties21 = atomikosProperties16.asProperties();
        properties15.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties21);
        java.util.Enumeration<java.lang.Object> objEnumeration23 = properties15.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean25 = atomikosProperties24.forceShutdownOnVmExit;
        atomikosProperties24.setSerialJtaTransactions(true);
        java.lang.String str28 = atomikosProperties24.logBaseName;
        boolean boolean29 = atomikosProperties24.forceShutdownOnVmExit;
        int int30 = atomikosProperties24.maxActives;
        java.lang.String str31 = atomikosProperties24.logBaseName;
        atomikosProperties24.setForceShutdownOnVmExit(true);
        java.util.Properties properties34 = atomikosProperties24.asProperties();
        boolean boolean35 = atomikosProperties24.isForceShutdownOnVmExit();
        java.util.Properties properties36 = atomikosProperties24.asProperties();
        boolean boolean37 = properties1.replace((java.lang.Object) (byte) 1, (java.lang.Object) properties15, (java.lang.Object) atomikosProperties24);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties38.defaultJtaTimeout = (byte) -1;
        java.util.Properties properties41 = atomikosProperties38.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean43 = atomikosProperties42.forceShutdownOnVmExit;
        atomikosProperties42.setSerialJtaTransactions(true);
        java.lang.String str46 = atomikosProperties42.logBaseName;
        atomikosProperties42.service = "tmlog";
        java.util.Properties properties49 = atomikosProperties42.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean51 = atomikosProperties50.forceShutdownOnVmExit;
        java.lang.String str52 = atomikosProperties50.getLogBaseDir();
        java.lang.Object obj53 = properties41.getOrDefault((java.lang.Object) atomikosProperties42, (java.lang.Object) str52);
        long long54 = atomikosProperties42.getDefaultJtaTimeout();
        atomikosProperties42.setLogBaseName("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties57 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties58 = atomikosProperties57.asProperties();
        atomikosProperties57.checkpointInterval = 1L;
        java.lang.String str61 = atomikosProperties57.getService();
        java.lang.String str62 = atomikosProperties57.getLogBaseName();
        java.util.Properties properties63 = atomikosProperties57.asProperties();
        java.util.Properties properties64 = null;
        java.util.Properties properties65 = new java.util.Properties(properties64);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties66 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties67 = atomikosProperties66.asProperties();
        properties65.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties67);
        java.util.Properties properties71 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet72 = properties71.keySet();
        boolean boolean73 = properties65.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) properties71);
        java.util.Collection<java.lang.Object> objCollection74 = properties71.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties75 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties75.setService("");
        boolean boolean78 = atomikosProperties75.isEnableLogging();
        java.util.Properties properties79 = atomikosProperties75.asProperties();
        properties79.clear();
        java.util.Properties properties81 = null;
        java.util.Properties properties82 = new java.util.Properties(properties81);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties83 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties84 = atomikosProperties83.asProperties();
        properties82.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties84);
        java.util.Enumeration<java.lang.Object> objEnumeration86 = properties84.keys();
        java.lang.Object obj88 = properties79.put((java.lang.Object) properties84, (java.lang.Object) (byte) 0);
        java.lang.Object obj89 = properties63.getOrDefault((java.lang.Object) objCollection74, obj88);
        java.lang.Object obj90 = properties1.putIfAbsent((java.lang.Object) "{}", (java.lang.Object) objCollection74);
        java.io.PrintWriter printWriter91 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.list(printWriter91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 500L + "'", long12 == 500L);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10000L + "'", long17 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(properties21);
        org.junit.Assert.assertNotNull(objEnumeration23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "tmlog" + "'", str28, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 50 + "'", int30 == 50);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "tmlog" + "'", str31, "tmlog");
        org.junit.Assert.assertNotNull(properties34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(properties36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(properties41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "tmlog" + "'", str46, "tmlog");
        org.junit.Assert.assertNotNull(properties49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 10000L + "'", long54 == 10000L);
        org.junit.Assert.assertNotNull(properties58);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "tmlog" + "'", str62, "tmlog");
        org.junit.Assert.assertNotNull(properties63);
        org.junit.Assert.assertNotNull(properties67);
        org.junit.Assert.assertNotNull(objSet72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objCollection74);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(properties79);
        org.junit.Assert.assertNotNull(properties84);
        org.junit.Assert.assertNotNull(objEnumeration86);
        org.junit.Assert.assertNull(obj88);
        org.junit.Assert.assertNull(obj89);
        org.junit.Assert.assertNull(obj90);
    }

    @Test
    public void test0268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0268");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Properties properties5 = new java.util.Properties(properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties7 = atomikosProperties6.asProperties();
        java.util.Set<java.lang.String> strSet8 = properties7.stringPropertyNames();
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties7);
        java.util.Properties properties10 = new java.util.Properties(properties5);
        java.io.PrintWriter printWriter11 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties5.list(printWriter11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNotNull(strSet8);
    }

    @Test
    public void test0269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0269");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        boolean boolean3 = atomikosProperties0.isEnableLogging();
        java.util.Properties properties4 = atomikosProperties0.asProperties();
        properties4.clear();
        java.util.Properties properties6 = null;
        java.util.Properties properties7 = new java.util.Properties(properties6);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties9 = atomikosProperties8.asProperties();
        properties7.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties9);
        java.util.Enumeration<java.lang.Object> objEnumeration11 = properties9.keys();
        java.lang.Object obj13 = properties4.put((java.lang.Object) properties9, (java.lang.Object) (byte) 0);
        boolean boolean14 = properties9.isEmpty();
        boolean boolean15 = properties9.isEmpty();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet16 = properties9.entrySet();
        java.util.Properties properties17 = null;
        java.util.Properties properties18 = new java.util.Properties(properties17);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties20 = atomikosProperties19.asProperties();
        properties18.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties20);
        java.util.Properties properties22 = new java.util.Properties(properties20);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties24 = atomikosProperties23.asProperties();
        java.util.Set<java.lang.String> strSet25 = properties24.stringPropertyNames();
        properties22.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties24);
        int int27 = properties22.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties28.defaultJtaTimeout = (byte) -1;
        java.util.Properties properties31 = atomikosProperties28.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean33 = atomikosProperties32.forceShutdownOnVmExit;
        atomikosProperties32.setSerialJtaTransactions(true);
        java.lang.String str36 = atomikosProperties32.logBaseName;
        atomikosProperties32.service = "tmlog";
        java.util.Properties properties39 = atomikosProperties32.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean41 = atomikosProperties40.forceShutdownOnVmExit;
        java.lang.String str42 = atomikosProperties40.getLogBaseDir();
        java.lang.Object obj43 = properties31.getOrDefault((java.lang.Object) atomikosProperties32, (java.lang.Object) str42);
        long long44 = atomikosProperties32.getDefaultJtaTimeout();
        atomikosProperties32.setLogBaseName("{}");
        int int47 = atomikosProperties32.maxActives;
        java.lang.Object obj48 = properties9.replace((java.lang.Object) properties22, (java.lang.Object) int47);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties49.setService("");
        atomikosProperties49.setThreadedTwoPhaseCommit(true);
        long long54 = atomikosProperties49.getCheckpointInterval();
        java.util.Properties properties55 = atomikosProperties49.asProperties();
        java.util.Properties properties56 = null;
        java.util.Properties properties57 = new java.util.Properties(properties56);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties58 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties59 = atomikosProperties58.asProperties();
        properties57.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties59);
        java.util.Enumeration<java.lang.Object> objEnumeration61 = properties59.keys();
        boolean boolean63 = properties59.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties64 = null;
        java.util.Properties properties65 = new java.util.Properties(properties64);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties66 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties67 = atomikosProperties66.asProperties();
        properties65.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties67);
        java.util.Enumeration<java.lang.Object> objEnumeration69 = properties67.keys();
        java.lang.Object obj72 = properties67.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection73 = properties67.values();
        boolean boolean74 = properties59.containsKey((java.lang.Object) properties67);
        java.util.Properties properties75 = new java.util.Properties(properties59);
        java.util.Set<java.lang.Object> objSet76 = properties59.keySet();
        java.util.Enumeration<java.lang.Object> objEnumeration77 = properties59.keys();
        java.lang.Object obj78 = properties9.getOrDefault((java.lang.Object) properties55, (java.lang.Object) properties59);
        java.util.Collection<java.lang.Object> objCollection79 = properties9.values();
        java.io.OutputStream outputStream80 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties9.storeToXML(outputStream80, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, 100=true, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(properties4);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertNotNull(objEnumeration11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(objEntrySet16);
        org.junit.Assert.assertNotNull(properties20);
        org.junit.Assert.assertNotNull(properties24);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertNotNull(properties31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "tmlog" + "'", str36, "tmlog");
        org.junit.Assert.assertNotNull(properties39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 10000L + "'", long44 == 10000L);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 50 + "'", int47 == 50);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 500L + "'", long54 == 500L);
        org.junit.Assert.assertNotNull(properties55);
        org.junit.Assert.assertNotNull(properties59);
        org.junit.Assert.assertNotNull(objEnumeration61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(properties67);
        org.junit.Assert.assertNotNull(objEnumeration69);
        org.junit.Assert.assertNull(obj72);
        org.junit.Assert.assertNotNull(objCollection73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(objSet76);
        org.junit.Assert.assertNotNull(objEnumeration77);
        org.junit.Assert.assertNotNull(obj78);
// flaky:         org.junit.Assert.assertEquals(obj78.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj78), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj78), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNotNull(objCollection79);
    }

    @Test
    public void test0270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0270");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Properties properties5 = new java.util.Properties(properties3);
        java.util.Properties properties6 = new java.util.Properties(properties3);
        java.lang.String str8 = properties3.getProperty("hi!");
        java.util.Enumeration<java.lang.Object> objEnumeration9 = properties3.keys();
        java.io.OutputStream outputStream10 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.storeToXML(outputStream10, "{}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(objEnumeration9);
    }

    @Test
    public void test0271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0271");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.setSerialJtaTransactions(true);
        java.lang.String str4 = atomikosProperties0.logBaseName;
        boolean boolean5 = atomikosProperties0.forceShutdownOnVmExit;
        int int6 = atomikosProperties0.maxActives;
        java.lang.String str7 = atomikosProperties0.logBaseName;
        atomikosProperties0.setForceShutdownOnVmExit(true);
        java.util.Properties properties10 = atomikosProperties0.asProperties();
        boolean boolean11 = atomikosProperties0.isForceShutdownOnVmExit();
        long long12 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.logBaseName = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties0.setMaxTimeout(32L);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tmlog" + "'", str4, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 50 + "'", int6 == 50);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "tmlog" + "'", str7, "tmlog");
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10000L + "'", long12 == 10000L);
    }

    @Test
    public void test0272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0272");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        boolean boolean7 = properties3.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties8 = new java.util.Properties(properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean10 = atomikosProperties9.forceShutdownOnVmExit;
        atomikosProperties9.setSerialJtaTransactions(true);
        java.lang.String str13 = atomikosProperties9.logBaseName;
        boolean boolean14 = atomikosProperties9.forceShutdownOnVmExit;
        int int15 = atomikosProperties9.maxActives;
        java.lang.String str16 = atomikosProperties9.logBaseName;
        atomikosProperties9.transactionManagerUniqueName = "hi!";
        atomikosProperties9.setMaxActives((int) (short) 10);
        java.util.Properties properties21 = atomikosProperties9.asProperties();
        java.util.Properties properties22 = atomikosProperties9.asProperties();
        java.lang.Object obj23 = properties8.remove((java.lang.Object) atomikosProperties9);
        java.io.Reader reader24 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties8.load(reader24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 50 + "'", int15 == 50);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tmlog" + "'", str16, "tmlog");
        org.junit.Assert.assertNotNull(properties21);
        org.junit.Assert.assertNotNull(properties22);
        org.junit.Assert.assertNull(obj23);
    }

    @Test
    public void test0273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0273");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Properties properties5 = new java.util.Properties(properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties6.defaultJtaTimeout = (byte) -1;
        java.util.Properties properties9 = atomikosProperties6.asProperties();
        boolean boolean10 = properties3.contains((java.lang.Object) properties9);
        java.util.Enumeration<java.lang.Object> objEnumeration11 = properties9.elements();
        java.util.Properties properties12 = new java.util.Properties(properties9);
        java.io.OutputStream outputStream13 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties12.store(outputStream13, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(objEnumeration11);
    }

    @Test
    public void test0274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0274");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        boolean boolean7 = properties3.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties8 = new java.util.Properties(properties3);
        java.lang.Object obj9 = properties8.clone();
        java.io.OutputStream outputStream10 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties8.storeToXML(outputStream10, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "{}");
    }

    @Test
    public void test0275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0275");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Properties properties5 = new java.util.Properties(properties3);
        java.util.Properties properties6 = new java.util.Properties(properties3);
        java.util.Enumeration<?> wildcardEnumeration7 = properties6.propertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties8.setService("");
        atomikosProperties8.setSerialJtaTransactions(true);
        atomikosProperties8.setEnableLogging(false);
        java.lang.String str15 = atomikosProperties8.logBaseName;
        int int16 = atomikosProperties8.maxActives;
        atomikosProperties8.setEnableLogging(false);
        java.util.Properties properties19 = atomikosProperties8.asProperties();
        java.lang.Object obj20 = properties6.remove((java.lang.Object) properties19);
        java.util.Set<java.lang.Object> objSet21 = properties19.keySet();
        java.lang.Object obj23 = properties19.remove((java.lang.Object) 1);
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(wildcardEnumeration7);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "tmlog" + "'", str15, "tmlog");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 50 + "'", int16 == 50);
        org.junit.Assert.assertNotNull(properties19);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNotNull(objSet21);
        org.junit.Assert.assertNull(obj23);
    }

    @Test
    public void test0276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0276");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        java.lang.Object obj8 = properties3.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection9 = properties3.values();
        java.util.Properties properties10 = new java.util.Properties();
        java.lang.Object obj13 = properties10.getOrDefault((java.lang.Object) (short) 1, (java.lang.Object) (-1.0d));
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        java.util.Properties properties15 = new java.util.Properties(properties3);
        java.lang.String str16 = properties3.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties17.setService("");
        atomikosProperties17.setThreadedTwoPhaseCommit(true);
        long long22 = atomikosProperties17.getCheckpointInterval();
        atomikosProperties17.maxTimeout = (-1);
        java.util.Properties properties25 = atomikosProperties17.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long27 = atomikosProperties26.defaultJtaTimeout;
        boolean boolean28 = atomikosProperties26.enableLogging;
        atomikosProperties26.setSerialJtaTransactions(true);
        java.util.Properties properties31 = atomikosProperties26.asProperties();
        properties25.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties31);
        java.util.Enumeration<java.lang.Object> objEnumeration33 = properties25.elements();
        java.util.Properties properties34 = new java.util.Properties(properties25);
        java.lang.Object obj35 = properties3.get((java.lang.Object) properties25);
        java.util.Set<java.lang.String> strSet36 = properties3.stringPropertyNames();
        java.io.PrintWriter printWriter37 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.list(printWriter37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(objCollection9);
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + (-1.0d) + "'", obj13, (-1.0d));
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str16, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 500L + "'", long22 == 500L);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10000L + "'", long27 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(properties31);
        org.junit.Assert.assertNotNull(objEnumeration33);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNotNull(strSet36);
    }

    @Test
    public void test0277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0277");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        java.lang.Object obj8 = properties3.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection9 = properties3.values();
        java.util.Properties properties10 = new java.util.Properties();
        java.lang.Object obj13 = properties10.getOrDefault((java.lang.Object) (short) 1, (java.lang.Object) (-1.0d));
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        java.util.Properties properties15 = new java.util.Properties(properties3);
        java.lang.Object obj16 = properties15.clone();
        boolean boolean17 = properties15.isEmpty();
        java.util.Set<java.lang.Object> objSet18 = properties15.keySet();
        java.io.PrintStream printStream19 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties15.list(printStream19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(objCollection9);
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + (-1.0d) + "'", obj13, (-1.0d));
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "{}");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objSet18);
    }

    @Test
    public void test0278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0278");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        java.lang.Object obj8 = properties3.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection9 = properties3.values();
        java.util.Properties properties10 = new java.util.Properties();
        java.lang.Object obj13 = properties10.getOrDefault((java.lang.Object) (short) 1, (java.lang.Object) (-1.0d));
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        java.util.Properties properties15 = new java.util.Properties(properties3);
        java.lang.String str16 = properties3.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties17.setService("");
        atomikosProperties17.setThreadedTwoPhaseCommit(true);
        long long22 = atomikosProperties17.getCheckpointInterval();
        atomikosProperties17.maxTimeout = (-1);
        java.util.Properties properties25 = atomikosProperties17.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long27 = atomikosProperties26.defaultJtaTimeout;
        boolean boolean28 = atomikosProperties26.enableLogging;
        atomikosProperties26.setSerialJtaTransactions(true);
        java.util.Properties properties31 = atomikosProperties26.asProperties();
        properties25.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties31);
        java.util.Enumeration<java.lang.Object> objEnumeration33 = properties25.elements();
        java.util.Properties properties34 = new java.util.Properties(properties25);
        java.lang.Object obj35 = properties3.get((java.lang.Object) properties25);
        java.io.Writer writer36 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.store(writer36, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(objCollection9);
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + (-1.0d) + "'", obj13, (-1.0d));
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str16, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 500L + "'", long22 == 500L);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10000L + "'", long27 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(properties31);
        org.junit.Assert.assertNotNull(objEnumeration33);
        org.junit.Assert.assertNull(obj35);
    }

    @Test
    public void test0279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0279");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        boolean boolean7 = properties3.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        java.util.Enumeration<java.lang.Object> objEnumeration13 = properties11.keys();
        java.lang.Object obj16 = properties11.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection17 = properties11.values();
        boolean boolean18 = properties3.containsKey((java.lang.Object) properties11);
        java.util.Properties properties19 = new java.util.Properties(properties3);
        java.util.Properties properties20 = new java.util.Properties(properties3);
        java.lang.String str21 = properties20.toString();
        java.util.Enumeration<?> wildcardEnumeration22 = properties20.propertyNames();
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNotNull(objEnumeration13);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(objCollection17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "{}" + "'", str21, "{}");
        org.junit.Assert.assertNotNull(wildcardEnumeration22);
    }

    @Test
    public void test0280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0280");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.defaultJtaTimeout;
        boolean boolean2 = atomikosProperties0.enableLogging;
        atomikosProperties0.setSerialJtaTransactions(true);
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        java.util.Properties properties6 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties9 = atomikosProperties8.asProperties();
        atomikosProperties8.checkpointInterval = 1L;
        boolean boolean12 = atomikosProperties8.forceShutdownOnVmExit;
        java.lang.Object obj13 = properties6.put((java.lang.Object) (short) 0, (java.lang.Object) atomikosProperties8);
        java.util.Properties properties14 = null;
        java.util.Properties properties15 = new java.util.Properties(properties14);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties17 = atomikosProperties16.asProperties();
        properties15.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties17);
        java.util.Enumeration<java.lang.Object> objEnumeration19 = properties17.keys();
        java.lang.Object obj22 = properties17.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection23 = properties17.values();
        java.util.Properties properties24 = new java.util.Properties();
        java.lang.Object obj27 = properties24.getOrDefault((java.lang.Object) (short) 1, (java.lang.Object) (-1.0d));
        properties17.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties24);
        java.util.Properties properties29 = new java.util.Properties(properties17);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean31 = atomikosProperties30.forceShutdownOnVmExit;
        atomikosProperties30.setSerialJtaTransactions(true);
        java.lang.String str34 = atomikosProperties30.logBaseName;
        atomikosProperties30.service = "tmlog";
        boolean boolean37 = properties29.containsValue((java.lang.Object) "tmlog");
        java.util.Properties properties38 = new java.util.Properties(properties29);
        boolean boolean39 = properties6.containsKey((java.lang.Object) properties38);
        java.io.PrintStream printStream40 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties6.list(printStream40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 10000L + "'", long1 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertNotNull(properties6);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNotNull(properties17);
        org.junit.Assert.assertNotNull(objEnumeration19);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNotNull(objCollection23);
        org.junit.Assert.assertEquals("'" + obj27 + "' != '" + (-1.0d) + "'", obj27, (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "tmlog" + "'", str34, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test0281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0281");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.setSerialJtaTransactions(true);
        java.lang.String str4 = atomikosProperties0.logBaseName;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties6 = atomikosProperties5.asProperties();
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties9.setService("");
        atomikosProperties9.setThreadedTwoPhaseCommit(true);
        long long14 = atomikosProperties9.getCheckpointInterval();
        boolean boolean15 = atomikosProperties9.threadedTwoPhaseCommit;
        atomikosProperties0.set(properties7, "tmlog", (java.lang.Object) atomikosProperties9);
        java.io.OutputStream outputStream17 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties7.storeToXML(outputStream17, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=false, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, 100=true, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tmlog" + "'", str4, "tmlog");
        org.junit.Assert.assertNotNull(properties6);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 500L + "'", long14 == 500L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test0282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0282");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.checkpointInterval = 300000L;
        java.util.Properties properties4 = null;
        java.util.Properties properties5 = new java.util.Properties(properties4);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties7 = atomikosProperties6.asProperties();
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties7);
        java.util.Enumeration<java.lang.Object> objEnumeration9 = properties7.keys();
        boolean boolean11 = properties7.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties12 = null;
        java.util.Properties properties13 = new java.util.Properties(properties12);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties15 = atomikosProperties14.asProperties();
        properties13.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties15);
        java.util.Properties properties19 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet20 = properties19.keySet();
        boolean boolean21 = properties13.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) properties19);
        java.util.Enumeration<java.lang.Object> objEnumeration22 = properties13.elements();
        boolean boolean24 = properties7.remove((java.lang.Object) properties13, (java.lang.Object) 50);
        java.util.Properties properties26 = null;
        java.util.Properties properties27 = new java.util.Properties(properties26);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties29 = atomikosProperties28.asProperties();
        properties27.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties29);
        java.util.Properties properties31 = new java.util.Properties(properties29);
        java.util.Collection<java.lang.Object> objCollection32 = properties29.values();
        atomikosProperties0.set(properties13, "{}", (java.lang.Object) objCollection32);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties34 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties35 = atomikosProperties34.asProperties();
        java.util.Properties properties36 = atomikosProperties34.asProperties();
        java.lang.Object obj37 = properties13.remove((java.lang.Object) atomikosProperties34);
        properties13.clear();
        java.io.OutputStream outputStream39 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties13.storeToXML(outputStream39, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, true=true, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, true=true, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNotNull(objEnumeration9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertNotNull(objSet20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(objEnumeration22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(properties29);
        org.junit.Assert.assertNotNull(objCollection32);
        org.junit.Assert.assertNotNull(properties35);
        org.junit.Assert.assertNotNull(properties36);
        org.junit.Assert.assertNull(obj37);
    }

    @Test
    public void test0283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0283");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        boolean boolean7 = properties3.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        java.util.Properties properties15 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet16 = properties15.keySet();
        boolean boolean17 = properties9.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) properties15);
        java.util.Enumeration<java.lang.Object> objEnumeration18 = properties9.elements();
        boolean boolean20 = properties3.remove((java.lang.Object) properties9, (java.lang.Object) 50);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties21.setService("");
        atomikosProperties21.logBaseDir = "hi!";
        atomikosProperties21.setMaxTimeout(500L);
        atomikosProperties21.logBaseName = "hi!";
        java.util.Properties properties30 = null;
        java.util.Properties properties31 = new java.util.Properties(properties30);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties33 = atomikosProperties32.asProperties();
        properties31.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties33);
        java.util.Enumeration<java.lang.Object> objEnumeration35 = properties33.keys();
        boolean boolean37 = properties33.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties38 = null;
        java.util.Properties properties39 = new java.util.Properties(properties38);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties41 = atomikosProperties40.asProperties();
        properties39.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties41);
        java.util.Enumeration<java.lang.Object> objEnumeration43 = properties41.keys();
        java.lang.Object obj46 = properties41.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection47 = properties41.values();
        boolean boolean48 = properties33.containsKey((java.lang.Object) properties41);
        java.util.Properties properties49 = new java.util.Properties(properties33);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long51 = atomikosProperties50.defaultJtaTimeout;
        boolean boolean52 = atomikosProperties50.enableLogging;
        atomikosProperties50.setSerialJtaTransactions(true);
        java.util.Properties properties55 = atomikosProperties50.asProperties();
        java.util.Properties properties56 = atomikosProperties50.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties57 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean58 = atomikosProperties57.forceShutdownOnVmExit;
        atomikosProperties57.setSerialJtaTransactions(true);
        java.lang.String str61 = atomikosProperties57.logBaseName;
        boolean boolean62 = atomikosProperties57.forceShutdownOnVmExit;
        int int63 = atomikosProperties57.maxActives;
        java.lang.String str64 = atomikosProperties57.logBaseName;
        atomikosProperties57.setForceShutdownOnVmExit(true);
        java.util.Properties properties67 = atomikosProperties57.asProperties();
        boolean boolean68 = atomikosProperties57.isForceShutdownOnVmExit();
        java.util.Properties properties69 = atomikosProperties57.asProperties();
        java.lang.Object obj70 = properties33.replace((java.lang.Object) atomikosProperties50, (java.lang.Object) atomikosProperties57);
        java.lang.Object obj71 = properties3.getOrDefault((java.lang.Object) "hi!", (java.lang.Object) atomikosProperties57);
        java.util.Enumeration<java.lang.Object> objEnumeration72 = properties3.elements();
        java.util.Properties properties73 = null;
        java.util.Properties properties74 = new java.util.Properties(properties73);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties75 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties76 = atomikosProperties75.asProperties();
        properties74.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties76);
        java.util.Enumeration<java.lang.Object> objEnumeration78 = properties76.keys();
        boolean boolean80 = properties76.containsValue((java.lang.Object) 0.0f);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties82 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long83 = atomikosProperties82.defaultJtaTimeout;
        boolean boolean84 = atomikosProperties82.enableLogging;
        atomikosProperties82.setSerialJtaTransactions(true);
        java.lang.Object obj87 = properties76.putIfAbsent((java.lang.Object) 100L, (java.lang.Object) true);
        java.util.Properties properties88 = new java.util.Properties(properties76);
        java.util.Properties properties89 = new java.util.Properties(properties88);
        java.util.Collection<java.lang.Object> objCollection90 = properties89.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties91 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean92 = atomikosProperties91.forceShutdownOnVmExit;
        atomikosProperties91.serialJtaTransactions = false;
        long long95 = atomikosProperties91.maxTimeout;
        java.util.Properties properties96 = atomikosProperties91.asProperties();
        java.lang.Object obj97 = properties3.getOrDefault((java.lang.Object) properties89, (java.lang.Object) atomikosProperties91);
        atomikosProperties91.maxActives = (byte) 0;
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNotNull(objSet16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objEnumeration18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(properties33);
        org.junit.Assert.assertNotNull(objEnumeration35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(properties41);
        org.junit.Assert.assertNotNull(objEnumeration43);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNotNull(objCollection47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 10000L + "'", long51 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(properties55);
        org.junit.Assert.assertNotNull(properties56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "tmlog" + "'", str61, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 50 + "'", int63 == 50);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "tmlog" + "'", str64, "tmlog");
        org.junit.Assert.assertNotNull(properties67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(properties69);
        org.junit.Assert.assertNull(obj70);
        org.junit.Assert.assertNotNull(obj71);
        org.junit.Assert.assertNotNull(objEnumeration72);
        org.junit.Assert.assertNotNull(properties76);
        org.junit.Assert.assertNotNull(objEnumeration78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 10000L + "'", long83 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNull(obj87);
        org.junit.Assert.assertNotNull(objCollection90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + 300000L + "'", long95 == 300000L);
        org.junit.Assert.assertNotNull(properties96);
        org.junit.Assert.assertNotNull(obj97);
    }

    @Test
    public void test0284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0284");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        boolean boolean3 = atomikosProperties0.isEnableLogging();
        java.util.Properties properties4 = atomikosProperties0.asProperties();
        properties4.clear();
        java.util.Properties properties6 = null;
        java.util.Properties properties7 = new java.util.Properties(properties6);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties9 = atomikosProperties8.asProperties();
        properties7.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties9);
        java.util.Enumeration<java.lang.Object> objEnumeration11 = properties9.keys();
        java.lang.Object obj13 = properties4.put((java.lang.Object) properties9, (java.lang.Object) (byte) 0);
        java.io.PrintStream printStream14 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties4.list(printStream14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(properties4);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertNotNull(objEnumeration11);
        org.junit.Assert.assertNull(obj13);
    }

    @Test
    public void test0285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0285");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        java.lang.Object obj8 = properties3.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection9 = properties3.values();
        java.util.Properties properties10 = new java.util.Properties();
        java.lang.Object obj13 = properties10.getOrDefault((java.lang.Object) (short) 1, (java.lang.Object) (-1.0d));
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        java.util.Properties properties15 = new java.util.Properties(properties3);
        java.util.Properties properties16 = null;
        java.util.Properties properties17 = new java.util.Properties(properties16);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties19 = atomikosProperties18.asProperties();
        properties17.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties19);
        java.util.Enumeration<java.lang.Object> objEnumeration21 = properties19.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration22 = properties19.elements();
        java.util.Properties properties23 = null;
        java.util.Properties properties24 = new java.util.Properties(properties23);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties26 = atomikosProperties25.asProperties();
        properties24.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties26);
        java.util.Properties properties28 = new java.util.Properties(properties26);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties29.defaultJtaTimeout = (byte) -1;
        java.util.Properties properties32 = atomikosProperties29.asProperties();
        boolean boolean33 = properties26.contains((java.lang.Object) properties32);
        java.util.Properties properties34 = null;
        java.util.Properties properties35 = new java.util.Properties(properties34);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties37 = atomikosProperties36.asProperties();
        properties35.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties37);
        java.util.Enumeration<java.lang.Object> objEnumeration39 = properties37.keys();
        boolean boolean41 = properties37.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties42 = null;
        java.util.Properties properties43 = new java.util.Properties(properties42);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties45 = atomikosProperties44.asProperties();
        properties43.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties45);
        java.util.Enumeration<java.lang.Object> objEnumeration47 = properties45.keys();
        java.lang.Object obj50 = properties45.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection51 = properties45.values();
        boolean boolean52 = properties37.containsKey((java.lang.Object) properties45);
        java.util.Properties properties53 = new java.util.Properties(properties37);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties54 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long55 = atomikosProperties54.defaultJtaTimeout;
        boolean boolean56 = atomikosProperties54.enableLogging;
        atomikosProperties54.setSerialJtaTransactions(true);
        java.util.Properties properties59 = atomikosProperties54.asProperties();
        java.util.Properties properties60 = atomikosProperties54.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties61 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean62 = atomikosProperties61.forceShutdownOnVmExit;
        atomikosProperties61.setSerialJtaTransactions(true);
        java.lang.String str65 = atomikosProperties61.logBaseName;
        boolean boolean66 = atomikosProperties61.forceShutdownOnVmExit;
        int int67 = atomikosProperties61.maxActives;
        java.lang.String str68 = atomikosProperties61.logBaseName;
        atomikosProperties61.setForceShutdownOnVmExit(true);
        java.util.Properties properties71 = atomikosProperties61.asProperties();
        boolean boolean72 = atomikosProperties61.isForceShutdownOnVmExit();
        java.util.Properties properties73 = atomikosProperties61.asProperties();
        java.lang.Object obj74 = properties37.replace((java.lang.Object) atomikosProperties54, (java.lang.Object) atomikosProperties61);
        java.lang.Object obj75 = properties19.putIfAbsent((java.lang.Object) properties32, (java.lang.Object) atomikosProperties61);
        java.util.Collection<java.lang.Object> objCollection76 = properties32.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet77 = properties32.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties78 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean79 = atomikosProperties78.enableLogging;
        atomikosProperties78.setMaxActives((int) (byte) 1);
        java.lang.Object obj82 = properties15.replace((java.lang.Object) properties32, (java.lang.Object) atomikosProperties78);
        java.io.OutputStream outputStream83 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties15.storeToXML(outputStream83, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, true=true, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, true=true, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(objCollection9);
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + (-1.0d) + "'", obj13, (-1.0d));
        org.junit.Assert.assertNotNull(properties19);
        org.junit.Assert.assertNotNull(objEnumeration21);
        org.junit.Assert.assertNotNull(objEnumeration22);
        org.junit.Assert.assertNotNull(properties26);
        org.junit.Assert.assertNotNull(properties32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(properties37);
        org.junit.Assert.assertNotNull(objEnumeration39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(properties45);
        org.junit.Assert.assertNotNull(objEnumeration47);
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertNotNull(objCollection51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 10000L + "'", long55 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(properties59);
        org.junit.Assert.assertNotNull(properties60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "tmlog" + "'", str65, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 50 + "'", int67 == 50);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "tmlog" + "'", str68, "tmlog");
        org.junit.Assert.assertNotNull(properties71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(properties73);
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertNull(obj75);
        org.junit.Assert.assertNotNull(objCollection76);
        org.junit.Assert.assertNotNull(objEntrySet77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNull(obj82);
    }

    @Test
    public void test0286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0286");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Properties properties5 = new java.util.Properties(properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties7 = atomikosProperties6.asProperties();
        java.util.Set<java.lang.String> strSet8 = properties7.stringPropertyNames();
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties7);
        properties7.clear();
        java.io.PrintWriter printWriter11 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties7.list(printWriter11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNotNull(strSet8);
    }

    @Test
    public void test0287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0287");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Properties properties5 = new java.util.Properties(properties3);
        java.util.Properties properties6 = new java.util.Properties(properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties8 = atomikosProperties7.asProperties();
        java.util.Properties properties9 = atomikosProperties7.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.setService("");
        boolean boolean13 = atomikosProperties10.isEnableLogging();
        java.util.Properties properties14 = atomikosProperties10.asProperties();
        java.lang.Object obj15 = properties3.getOrDefault((java.lang.Object) properties9, (java.lang.Object) atomikosProperties10);
        java.io.InputStream inputStream16 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties9.loadFromXML(inputStream16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertNotNull(obj15);
    }

    @Test
    public void test0288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0288");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Properties properties7 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet8 = properties7.keySet();
        boolean boolean9 = properties1.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) properties7);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet10 = properties1.entrySet();
        java.lang.String str11 = properties1.toString();
        java.lang.Object obj12 = null;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties13.setService("");
        boolean boolean16 = atomikosProperties13.isEnableLogging();
        java.util.Properties properties17 = atomikosProperties13.asProperties();
        boolean boolean18 = atomikosProperties13.isThreadedTwoPhaseCommit();
        java.util.Properties properties19 = atomikosProperties13.asProperties();
        atomikosProperties13.transactionManagerUniqueName = "tmlog";
        boolean boolean22 = atomikosProperties13.isEnableLogging();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj23 = properties1.put(obj12, (java.lang.Object) boolean22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(objEntrySet10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str11, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(properties17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(properties19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test0289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0289");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Properties properties5 = new java.util.Properties(properties3);
        java.util.Collection<java.lang.Object> objCollection6 = properties3.values();
        java.util.Properties properties7 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration8 = properties3.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties9.setService("");
        boolean boolean12 = atomikosProperties9.isEnableLogging();
        java.util.Properties properties13 = atomikosProperties9.asProperties();
        properties13.clear();
        java.util.Properties properties15 = null;
        java.util.Properties properties16 = new java.util.Properties(properties15);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties18 = atomikosProperties17.asProperties();
        properties16.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties18);
        java.util.Enumeration<java.lang.Object> objEnumeration20 = properties18.keys();
        java.lang.Object obj22 = properties13.put((java.lang.Object) properties18, (java.lang.Object) (byte) 0);
        boolean boolean23 = properties18.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean25 = atomikosProperties24.forceShutdownOnVmExit;
        atomikosProperties24.setSerialJtaTransactions(true);
        boolean boolean28 = properties18.containsKey((java.lang.Object) atomikosProperties24);
        atomikosProperties24.setLogBaseName("hi!");
        int int31 = atomikosProperties24.getMaxActives();
        boolean boolean32 = properties3.equals((java.lang.Object) int31);
        java.util.Properties properties33 = null;
        java.util.Properties properties34 = new java.util.Properties(properties33);
        java.util.Properties properties35 = new java.util.Properties(properties34);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet36 = properties34.entrySet();
        boolean boolean37 = properties3.contains((java.lang.Object) properties34);
        java.io.PrintWriter printWriter38 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties34.list(printWriter38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objCollection6);
        org.junit.Assert.assertNotNull(objEnumeration8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(properties13);
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertNotNull(objEnumeration20);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 50 + "'", int31 == 50);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objEntrySet36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test0290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0290");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.setSerialJtaTransactions(true);
        java.lang.String str4 = atomikosProperties0.logBaseName;
        boolean boolean5 = atomikosProperties0.forceShutdownOnVmExit;
        int int6 = atomikosProperties0.maxActives;
        java.lang.String str7 = atomikosProperties0.logBaseName;
        atomikosProperties0.setForceShutdownOnVmExit(true);
        atomikosProperties0.maxActives = '4';
        atomikosProperties0.service = "{}";
        java.util.Properties properties14 = atomikosProperties0.asProperties();
        java.io.OutputStream outputStream15 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties14.storeToXML(outputStream15, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tmlog" + "'", str4, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 50 + "'", int6 == 50);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "tmlog" + "'", str7, "tmlog");
        org.junit.Assert.assertNotNull(properties14);
    }

    @Test
    public void test0291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0291");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        int int3 = atomikosProperties0.getMaxActives();
        java.lang.String str4 = atomikosProperties0.logBaseName;
        long long5 = atomikosProperties0.getDefaultJtaTimeout();
        boolean boolean6 = atomikosProperties0.isForceShutdownOnVmExit();
        java.lang.String str7 = atomikosProperties0.service;
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 50 + "'", int3 == 50);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tmlog" + "'", str4, "tmlog");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 10000L + "'", long5 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test0292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0292");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Properties properties5 = new java.util.Properties(properties3);
        java.util.Enumeration<?> wildcardEnumeration6 = properties3.propertyNames();
        java.io.InputStream inputStream7 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.load(inputStream7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(wildcardEnumeration6);
    }

    @Test
    public void test0293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0293");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties(properties1);
        java.util.Properties properties3 = new java.util.Properties(properties1);
        boolean boolean4 = properties1.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties1.elements();
        java.io.PrintStream printStream6 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.list(printStream6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objEnumeration5);
    }

    @Test
    public void test0294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0294");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        atomikosProperties0.setSerialJtaTransactions(true);
        atomikosProperties0.setEnableLogging(false);
        java.lang.String str7 = atomikosProperties0.logBaseName;
        int int8 = atomikosProperties0.maxActives;
        java.lang.String str9 = atomikosProperties0.getTransactionManagerUniqueName();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "tmlog" + "'", str7, "tmlog");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 50 + "'", int8 == 50);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test0295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0295");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        boolean boolean3 = atomikosProperties0.isEnableLogging();
        java.util.Properties properties4 = atomikosProperties0.asProperties();
        properties4.clear();
        java.util.Enumeration<java.lang.Object> objEnumeration6 = properties4.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties7.setService("");
        atomikosProperties7.setSerialJtaTransactions(true);
        atomikosProperties7.setEnableLogging(false);
        long long14 = atomikosProperties7.getCheckpointInterval();
        atomikosProperties7.setForceShutdownOnVmExit(false);
        long long17 = atomikosProperties7.checkpointInterval;
        java.lang.Object obj18 = properties4.remove((java.lang.Object) atomikosProperties7);
        java.io.OutputStream outputStream19 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties4.storeToXML(outputStream19, "", "{}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(properties4);
        org.junit.Assert.assertNotNull(objEnumeration6);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 500L + "'", long14 == 500L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 500L + "'", long17 == 500L);
        org.junit.Assert.assertNull(obj18);
    }

    @Test
    public void test0296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0296");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        atomikosProperties0.setSerialJtaTransactions(true);
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        properties5.clear();
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        java.util.Enumeration<java.lang.Object> objEnumeration13 = properties11.keys();
        boolean boolean15 = properties11.containsValue((java.lang.Object) 0.0f);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long18 = atomikosProperties17.defaultJtaTimeout;
        boolean boolean19 = atomikosProperties17.enableLogging;
        atomikosProperties17.setSerialJtaTransactions(true);
        java.lang.Object obj22 = properties11.putIfAbsent((java.lang.Object) 100L, (java.lang.Object) true);
        boolean boolean23 = properties5.remove((java.lang.Object) 1.0f, (java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties24.setService("");
        atomikosProperties24.setSerialJtaTransactions(true);
        java.util.Properties properties29 = atomikosProperties24.asProperties();
        properties29.clear();
        java.lang.Object obj32 = properties5.put((java.lang.Object) properties29, (java.lang.Object) (short) 1);
        java.util.Enumeration<java.lang.Object> objEnumeration33 = properties5.elements();
        java.util.Set<java.lang.String> strSet34 = properties5.stringPropertyNames();
        java.io.OutputStream outputStream35 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties5.store(outputStream35, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, true=true, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNotNull(objEnumeration13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10000L + "'", long18 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(properties29);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNotNull(objEnumeration33);
        org.junit.Assert.assertNotNull(strSet34);
    }

    @Test
    public void test0297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0297");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        atomikosProperties0.setSerialJtaTransactions(true);
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        properties5.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean8 = atomikosProperties7.forceShutdownOnVmExit;
        atomikosProperties7.setSerialJtaTransactions(true);
        java.lang.String str11 = atomikosProperties7.logBaseName;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties13 = atomikosProperties12.asProperties();
        java.util.Properties properties14 = atomikosProperties12.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties16.setService("");
        atomikosProperties16.setThreadedTwoPhaseCommit(true);
        long long21 = atomikosProperties16.getCheckpointInterval();
        boolean boolean22 = atomikosProperties16.threadedTwoPhaseCommit;
        atomikosProperties7.set(properties14, "tmlog", (java.lang.Object) atomikosProperties16);
        boolean boolean24 = properties5.containsValue((java.lang.Object) atomikosProperties16);
        java.util.Properties properties25 = atomikosProperties16.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean27 = atomikosProperties26.forceShutdownOnVmExit;
        atomikosProperties26.setSerialJtaTransactions(true);
        java.lang.String str30 = atomikosProperties26.logBaseName;
        boolean boolean31 = atomikosProperties26.forceShutdownOnVmExit;
        int int32 = atomikosProperties26.maxActives;
        java.lang.String str33 = atomikosProperties26.logBaseName;
        atomikosProperties26.setForceShutdownOnVmExit(true);
        java.util.Properties properties36 = atomikosProperties26.asProperties();
        boolean boolean37 = atomikosProperties26.isForceShutdownOnVmExit();
        java.util.Properties properties38 = atomikosProperties26.asProperties();
        atomikosProperties26.setSerialJtaTransactions(false);
        atomikosProperties26.setCheckpointInterval((long) 'a');
        atomikosProperties26.transactionManagerUniqueName = "";
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties45 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties45.setService("");
        atomikosProperties45.setSerialJtaTransactions(true);
        atomikosProperties45.setEnableLogging(false);
        atomikosProperties45.logBaseName = "tmlog";
        atomikosProperties45.maxActives = 1;
        atomikosProperties45.setEnableLogging(true);
        long long58 = atomikosProperties45.getMaxTimeout();
        java.lang.String str59 = atomikosProperties45.getTransactionManagerUniqueName();
        atomikosProperties45.setService("hi!");
        java.lang.String str62 = atomikosProperties45.logBaseName;
        java.lang.Object obj63 = properties25.getOrDefault((java.lang.Object) atomikosProperties26, (java.lang.Object) str62);
        boolean boolean64 = atomikosProperties26.isThreadedTwoPhaseCommit();
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "tmlog" + "'", str11, "tmlog");
        org.junit.Assert.assertNotNull(properties13);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 500L + "'", long21 == 500L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "tmlog" + "'", str30, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 50 + "'", int32 == 50);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "tmlog" + "'", str33, "tmlog");
        org.junit.Assert.assertNotNull(properties36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(properties38);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 300000L + "'", long58 == 300000L);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "tmlog" + "'", str62, "tmlog");
        org.junit.Assert.assertEquals("'" + obj63 + "' != '" + "tmlog" + "'", obj63, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test0298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0298");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        boolean boolean7 = properties3.containsValue((java.lang.Object) 0.0f);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long10 = atomikosProperties9.defaultJtaTimeout;
        boolean boolean11 = atomikosProperties9.enableLogging;
        atomikosProperties9.setSerialJtaTransactions(true);
        java.lang.Object obj14 = properties3.putIfAbsent((java.lang.Object) 100L, (java.lang.Object) true);
        java.util.Enumeration<java.lang.Object> objEnumeration15 = properties3.elements();
        java.lang.String str16 = properties3.toString();
        java.lang.String str19 = properties3.getProperty("tmlog", "hi!");
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(objEnumeration15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, 100=true, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str16, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, 100=true, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
    }

    @Test
    public void test0299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0299");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        boolean boolean7 = properties3.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        java.util.Properties properties15 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet16 = properties15.keySet();
        boolean boolean17 = properties9.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) properties15);
        java.util.Enumeration<java.lang.Object> objEnumeration18 = properties9.elements();
        boolean boolean20 = properties3.remove((java.lang.Object) properties9, (java.lang.Object) 50);
        properties3.clear();
        java.util.Enumeration<java.lang.Object> objEnumeration22 = properties3.elements();
        java.io.InputStream inputStream23 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.load(inputStream23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNotNull(objSet16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objEnumeration18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objEnumeration22);
    }

    @Test
    public void test0300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0300");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        long long2 = atomikosProperties0.getDefaultJtaTimeout();
        long long3 = atomikosProperties0.getDefaultJtaTimeout();
        boolean boolean4 = atomikosProperties0.serialJtaTransactions;
        boolean boolean5 = atomikosProperties0.isSerialJtaTransactions();
        java.lang.String str6 = atomikosProperties0.service;
        atomikosProperties0.enableLogging = true;
        atomikosProperties0.setService("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, true=true, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        long long11 = atomikosProperties0.checkpointInterval;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10000L + "'", long2 == 10000L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 10000L + "'", long3 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 500L + "'", long11 == 500L);
    }

    @Test
    public void test0301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0301");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Properties properties5 = new java.util.Properties(properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties7 = atomikosProperties6.asProperties();
        java.util.Set<java.lang.String> strSet8 = properties7.stringPropertyNames();
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties7);
        java.io.InputStream inputStream10 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties7.loadFromXML(inputStream10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNotNull(strSet8);
    }

    @Test
    public void test0302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0302");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.setSerialJtaTransactions(true);
        java.lang.String str4 = atomikosProperties0.logBaseName;
        boolean boolean5 = atomikosProperties0.forceShutdownOnVmExit;
        int int6 = atomikosProperties0.maxActives;
        java.lang.String str7 = atomikosProperties0.logBaseName;
        atomikosProperties0.setForceShutdownOnVmExit(true);
        java.util.Properties properties10 = atomikosProperties0.asProperties();
        boolean boolean11 = atomikosProperties0.isForceShutdownOnVmExit();
        java.util.Properties properties12 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties13.setService("");
        atomikosProperties13.setSerialJtaTransactions(true);
        atomikosProperties13.setEnableLogging(false);
        java.lang.String str20 = atomikosProperties13.logBaseName;
        boolean boolean21 = atomikosProperties13.isSerialJtaTransactions();
        java.util.Properties properties22 = null;
        java.util.Properties properties23 = new java.util.Properties(properties22);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties25 = atomikosProperties24.asProperties();
        properties23.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties25);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties25.keys();
        java.lang.Object obj30 = properties25.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection31 = properties25.values();
        java.util.Properties properties32 = new java.util.Properties();
        java.lang.Object obj35 = properties32.getOrDefault((java.lang.Object) (short) 1, (java.lang.Object) (-1.0d));
        properties25.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties32);
        java.util.Properties properties37 = null;
        java.util.Properties properties38 = new java.util.Properties(properties37);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties39 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties40 = atomikosProperties39.asProperties();
        properties38.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties40);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties42.setService("");
        atomikosProperties42.setThreadedTwoPhaseCommit(true);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties47 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties47.setService("");
        atomikosProperties47.setSerialJtaTransactions(true);
        atomikosProperties47.setEnableLogging(false);
        java.lang.String str54 = atomikosProperties47.logBaseName;
        java.lang.Object obj55 = properties40.replace((java.lang.Object) atomikosProperties42, (java.lang.Object) atomikosProperties47);
        boolean boolean56 = properties25.contains((java.lang.Object) properties40);
        java.lang.String str57 = properties40.toString();
        java.util.Set<java.lang.Object> objSet58 = properties40.keySet();
        java.lang.Object obj59 = properties12.replace((java.lang.Object) atomikosProperties13, (java.lang.Object) properties40);
        atomikosProperties13.setEnableLogging(false);
        atomikosProperties13.service = "hi!";
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tmlog" + "'", str4, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 50 + "'", int6 == 50);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "tmlog" + "'", str7, "tmlog");
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(properties12);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "tmlog" + "'", str20, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNotNull(objCollection31);
        org.junit.Assert.assertEquals("'" + obj35 + "' != '" + (-1.0d) + "'", obj35, (-1.0d));
        org.junit.Assert.assertNotNull(properties40);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "tmlog" + "'", str54, "tmlog");
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str57, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNotNull(objSet58);
        org.junit.Assert.assertNull(obj59);
    }

    @Test
    public void test0303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0303");
        java.util.Properties properties0 = new java.util.Properties();
        java.io.InputStream inputStream1 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.load(inputStream1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0304");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        java.lang.Object obj8 = properties3.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection9 = properties3.values();
        java.util.Properties properties10 = new java.util.Properties();
        java.lang.Object obj13 = properties10.getOrDefault((java.lang.Object) (short) 1, (java.lang.Object) (-1.0d));
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        java.util.Properties properties15 = new java.util.Properties(properties3);
        java.util.Properties properties16 = null;
        java.util.Properties properties17 = new java.util.Properties(properties16);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties19 = atomikosProperties18.asProperties();
        properties17.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties19);
        java.util.Enumeration<java.lang.Object> objEnumeration21 = properties19.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration22 = properties19.elements();
        java.util.Properties properties23 = null;
        java.util.Properties properties24 = new java.util.Properties(properties23);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties26 = atomikosProperties25.asProperties();
        properties24.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties26);
        java.util.Properties properties28 = new java.util.Properties(properties26);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties29.defaultJtaTimeout = (byte) -1;
        java.util.Properties properties32 = atomikosProperties29.asProperties();
        boolean boolean33 = properties26.contains((java.lang.Object) properties32);
        java.util.Properties properties34 = null;
        java.util.Properties properties35 = new java.util.Properties(properties34);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties37 = atomikosProperties36.asProperties();
        properties35.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties37);
        java.util.Enumeration<java.lang.Object> objEnumeration39 = properties37.keys();
        boolean boolean41 = properties37.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties42 = null;
        java.util.Properties properties43 = new java.util.Properties(properties42);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties45 = atomikosProperties44.asProperties();
        properties43.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties45);
        java.util.Enumeration<java.lang.Object> objEnumeration47 = properties45.keys();
        java.lang.Object obj50 = properties45.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection51 = properties45.values();
        boolean boolean52 = properties37.containsKey((java.lang.Object) properties45);
        java.util.Properties properties53 = new java.util.Properties(properties37);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties54 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long55 = atomikosProperties54.defaultJtaTimeout;
        boolean boolean56 = atomikosProperties54.enableLogging;
        atomikosProperties54.setSerialJtaTransactions(true);
        java.util.Properties properties59 = atomikosProperties54.asProperties();
        java.util.Properties properties60 = atomikosProperties54.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties61 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean62 = atomikosProperties61.forceShutdownOnVmExit;
        atomikosProperties61.setSerialJtaTransactions(true);
        java.lang.String str65 = atomikosProperties61.logBaseName;
        boolean boolean66 = atomikosProperties61.forceShutdownOnVmExit;
        int int67 = atomikosProperties61.maxActives;
        java.lang.String str68 = atomikosProperties61.logBaseName;
        atomikosProperties61.setForceShutdownOnVmExit(true);
        java.util.Properties properties71 = atomikosProperties61.asProperties();
        boolean boolean72 = atomikosProperties61.isForceShutdownOnVmExit();
        java.util.Properties properties73 = atomikosProperties61.asProperties();
        java.lang.Object obj74 = properties37.replace((java.lang.Object) atomikosProperties54, (java.lang.Object) atomikosProperties61);
        java.lang.Object obj75 = properties19.putIfAbsent((java.lang.Object) properties32, (java.lang.Object) atomikosProperties61);
        java.util.Collection<java.lang.Object> objCollection76 = properties32.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet77 = properties32.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties78 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean79 = atomikosProperties78.enableLogging;
        atomikosProperties78.setMaxActives((int) (byte) 1);
        java.lang.Object obj82 = properties15.replace((java.lang.Object) properties32, (java.lang.Object) atomikosProperties78);
        atomikosProperties78.defaultJtaTimeout = (short) 0;
        atomikosProperties78.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, tmlog=tmlog}");
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(objCollection9);
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + (-1.0d) + "'", obj13, (-1.0d));
        org.junit.Assert.assertNotNull(properties19);
        org.junit.Assert.assertNotNull(objEnumeration21);
        org.junit.Assert.assertNotNull(objEnumeration22);
        org.junit.Assert.assertNotNull(properties26);
        org.junit.Assert.assertNotNull(properties32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(properties37);
        org.junit.Assert.assertNotNull(objEnumeration39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(properties45);
        org.junit.Assert.assertNotNull(objEnumeration47);
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertNotNull(objCollection51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 10000L + "'", long55 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(properties59);
        org.junit.Assert.assertNotNull(properties60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "tmlog" + "'", str65, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 50 + "'", int67 == 50);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "tmlog" + "'", str68, "tmlog");
        org.junit.Assert.assertNotNull(properties71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(properties73);
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertNull(obj75);
        org.junit.Assert.assertNotNull(objCollection76);
        org.junit.Assert.assertNotNull(objEntrySet77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNull(obj82);
    }

    @Test
    public void test0305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0305");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.setSerialJtaTransactions(true);
        java.lang.String str4 = atomikosProperties0.logBaseName;
        atomikosProperties0.service = "tmlog";
        java.util.Properties properties7 = atomikosProperties0.asProperties();
        long long8 = atomikosProperties0.checkpointInterval;
        boolean boolean9 = atomikosProperties0.isEnableLogging();
        java.util.Properties properties10 = atomikosProperties0.asProperties();
        java.io.Writer writer11 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties10.store(writer11, "tmlog");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tmlog" + "'", str4, "tmlog");
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(properties10);
    }

    @Test
    public void test0306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0306");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties5.setService("");
        atomikosProperties5.setThreadedTwoPhaseCommit(true);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.setService("");
        atomikosProperties10.setSerialJtaTransactions(true);
        atomikosProperties10.setEnableLogging(false);
        java.lang.String str17 = atomikosProperties10.logBaseName;
        java.lang.Object obj18 = properties3.replace((java.lang.Object) atomikosProperties5, (java.lang.Object) atomikosProperties10);
        java.lang.String str20 = properties3.getProperty("");
        java.io.PrintWriter printWriter21 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.list(printWriter21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test0307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0307");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Properties properties7 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet8 = properties7.keySet();
        boolean boolean9 = properties1.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) properties7);
        java.util.Enumeration<java.lang.Object> objEnumeration10 = properties1.keys();
        java.io.OutputStream outputStream11 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.storeToXML(outputStream11, "tmlog");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(objEnumeration10);
    }

    @Test
    public void test0308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0308");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        boolean boolean3 = atomikosProperties0.isEnableLogging();
        java.util.Properties properties4 = atomikosProperties0.asProperties();
        atomikosProperties0.setSerialJtaTransactions(false);
        atomikosProperties0.setForceShutdownOnVmExit(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(properties4);
    }

    @Test
    public void test0309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0309");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.defaultJtaTimeout;
        boolean boolean2 = atomikosProperties0.enableLogging;
        atomikosProperties0.setSerialJtaTransactions(true);
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "tmlog";
        atomikosProperties0.forceShutdownOnVmExit = true;
        boolean boolean10 = atomikosProperties0.serialJtaTransactions;
        boolean boolean11 = atomikosProperties0.enableLogging;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 10000L + "'", long1 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test0310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0310");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        boolean boolean3 = atomikosProperties0.isEnableLogging();
        java.util.Properties properties4 = atomikosProperties0.asProperties();
        properties4.clear();
        java.lang.String str8 = properties4.getProperty("{}", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, tmlog=tmlog}");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(properties4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, tmlog=tmlog}" + "'", str8, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, tmlog=tmlog}");
    }

    @Test
    public void test0311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0311");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        atomikosProperties0.setSerialJtaTransactions(true);
        atomikosProperties0.setEnableLogging(false);
        java.lang.String str7 = atomikosProperties0.logBaseName;
        boolean boolean8 = atomikosProperties0.isSerialJtaTransactions();
        java.lang.String str9 = atomikosProperties0.service;
        atomikosProperties0.service = "hi!";
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "tmlog" + "'", str7, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test0312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0312");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.setSerialJtaTransactions(true);
        java.lang.String str4 = atomikosProperties0.logBaseName;
        atomikosProperties0.service = "tmlog";
        java.util.Properties properties7 = atomikosProperties0.asProperties();
        int int8 = atomikosProperties0.maxActives;
        long long9 = atomikosProperties0.getCheckpointInterval();
        long long10 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, 100=true, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tmlog" + "'", str4, "tmlog");
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 50 + "'", int8 == 50);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 500L + "'", long9 == 500L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 500L + "'", long10 == 500L);
    }

    @Test
    public void test0313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0313");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        atomikosProperties0.setSerialJtaTransactions(true);
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        java.util.Properties properties6 = atomikosProperties0.asProperties();
        java.util.Properties properties7 = new java.util.Properties(properties6);
        java.io.OutputStream outputStream8 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties6.storeToXML(outputStream8, "tmlog");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertNotNull(properties6);
    }

    @Test
    public void test0314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0314");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Properties properties5 = new java.util.Properties(properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties7 = atomikosProperties6.asProperties();
        java.util.Set<java.lang.String> strSet8 = properties7.stringPropertyNames();
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties7);
        int int10 = properties5.size();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet11 = properties5.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setService("");
        boolean boolean15 = atomikosProperties12.isEnableLogging();
        java.util.Properties properties16 = atomikosProperties12.asProperties();
        atomikosProperties12.setSerialJtaTransactions(false);
        java.lang.Object obj19 = properties5.remove((java.lang.Object) atomikosProperties12);
        java.lang.String str20 = atomikosProperties12.getLogBaseName();
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 9 + "'", int10 == 9);
        org.junit.Assert.assertNotNull(objEntrySet11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "tmlog" + "'", str20, "tmlog");
    }

    @Test
    public void test0315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0315");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        long long5 = atomikosProperties0.getCheckpointInterval();
        atomikosProperties0.forceShutdownOnVmExit = true;
        atomikosProperties0.setSerialJtaTransactions(true);
        java.util.Properties properties10 = atomikosProperties0.asProperties();
        java.util.Properties properties11 = new java.util.Properties(properties10);
        java.io.PrintStream printStream12 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties11.list(printStream12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 500L + "'", long5 == 500L);
        org.junit.Assert.assertNotNull(properties10);
    }

    @Test
    public void test0316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0316");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Properties properties5 = new java.util.Properties(properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties7 = atomikosProperties6.asProperties();
        java.util.Set<java.lang.String> strSet8 = properties7.stringPropertyNames();
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties7);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.defaultJtaTimeout = (byte) -1;
        java.util.Properties properties13 = atomikosProperties10.asProperties();
        java.util.Properties properties14 = atomikosProperties10.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties15.setService("");
        java.lang.String str18 = atomikosProperties15.getService();
        atomikosProperties15.maxTimeout = 1L;
        java.lang.Object obj21 = properties7.put((java.lang.Object) atomikosProperties10, (java.lang.Object) 1L);
        java.io.InputStream inputStream22 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties7.loadFromXML(inputStream22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(properties13);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNull(obj21);
    }

    @Test
    public void test0317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0317");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties(properties1);
        java.util.Properties properties3 = new java.util.Properties(properties1);
        java.util.Set<java.lang.Object> objSet4 = properties1.keySet();
        java.io.Reader reader5 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.load(reader5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objSet4);
    }

    @Test
    public void test0318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0318");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        boolean boolean7 = properties3.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        java.util.Enumeration<java.lang.Object> objEnumeration13 = properties11.keys();
        java.lang.Object obj16 = properties11.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection17 = properties11.values();
        boolean boolean18 = properties3.containsKey((java.lang.Object) properties11);
        java.util.Properties properties19 = new java.util.Properties(properties3);
        java.lang.Object obj20 = properties19.clone();
        java.util.Properties properties21 = new java.util.Properties(properties19);
        java.util.Properties properties22 = new java.util.Properties(properties19);
        java.io.PrintWriter printWriter23 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties22.list(printWriter23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNotNull(objEnumeration13);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(objCollection17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{}");
    }

    @Test
    public void test0319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0319");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Properties properties5 = new java.util.Properties(properties3);
        java.util.Collection<java.lang.Object> objCollection6 = properties3.values();
        java.util.Properties properties7 = new java.util.Properties(properties3);
        properties3.clear();
        java.util.Properties properties9 = new java.util.Properties(properties3);
        java.util.Properties properties10 = new java.util.Properties(properties3);
        java.io.InputStream inputStream11 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.loadFromXML(inputStream11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objCollection6);
    }

    @Test
    public void test0320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0320");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        boolean boolean7 = properties3.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        java.util.Enumeration<java.lang.Object> objEnumeration13 = properties11.keys();
        java.lang.Object obj16 = properties11.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection17 = properties11.values();
        boolean boolean18 = properties3.containsKey((java.lang.Object) properties11);
        java.util.Properties properties19 = new java.util.Properties(properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean21 = atomikosProperties20.forceShutdownOnVmExit;
        atomikosProperties20.setSerialJtaTransactions(true);
        java.lang.String str24 = atomikosProperties20.logBaseName;
        boolean boolean25 = atomikosProperties20.forceShutdownOnVmExit;
        int int26 = atomikosProperties20.maxActives;
        java.lang.String str27 = atomikosProperties20.logBaseName;
        atomikosProperties20.transactionManagerUniqueName = "hi!";
        atomikosProperties20.setMaxActives((int) (short) 10);
        java.util.Properties properties32 = atomikosProperties20.asProperties();
        java.util.Properties properties33 = atomikosProperties20.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties34 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties34.setService("");
        atomikosProperties34.setSerialJtaTransactions(true);
        java.util.Properties properties39 = atomikosProperties34.asProperties();
        properties39.clear();
        java.util.Properties properties42 = null;
        java.util.Properties properties43 = new java.util.Properties(properties42);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties45 = atomikosProperties44.asProperties();
        properties43.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties45);
        java.util.Enumeration<java.lang.Object> objEnumeration47 = properties45.keys();
        boolean boolean49 = properties45.containsValue((java.lang.Object) 0.0f);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties51 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long52 = atomikosProperties51.defaultJtaTimeout;
        boolean boolean53 = atomikosProperties51.enableLogging;
        atomikosProperties51.setSerialJtaTransactions(true);
        java.lang.Object obj56 = properties45.putIfAbsent((java.lang.Object) 100L, (java.lang.Object) true);
        boolean boolean57 = properties39.remove((java.lang.Object) 1.0f, (java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties58 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties58.setService("");
        atomikosProperties58.setSerialJtaTransactions(true);
        java.util.Properties properties63 = atomikosProperties58.asProperties();
        properties63.clear();
        java.lang.Object obj66 = properties39.put((java.lang.Object) properties63, (java.lang.Object) (short) 1);
        java.util.Enumeration<java.lang.Object> objEnumeration67 = properties39.elements();
        java.util.Set<java.lang.String> strSet68 = properties39.stringPropertyNames();
        java.lang.Object obj70 = properties33.put((java.lang.Object) strSet68, (java.lang.Object) (-1.0d));
        java.util.Set<java.lang.Object> objSet71 = properties33.keySet();
        java.lang.Object obj72 = null;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties73 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties73.setService("");
        atomikosProperties73.logBaseDir = "hi!";
        atomikosProperties73.setMaxTimeout(500L);
        atomikosProperties73.maxTimeout = (-1L);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean82 = properties3.replace((java.lang.Object) objSet71, obj72, (java.lang.Object) (-1L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNotNull(objEnumeration13);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(objCollection17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "tmlog" + "'", str24, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 50 + "'", int26 == 50);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "tmlog" + "'", str27, "tmlog");
        org.junit.Assert.assertNotNull(properties32);
        org.junit.Assert.assertNotNull(properties33);
        org.junit.Assert.assertNotNull(properties39);
        org.junit.Assert.assertNotNull(properties45);
        org.junit.Assert.assertNotNull(objEnumeration47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 10000L + "'", long52 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(properties63);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertNotNull(objEnumeration67);
        org.junit.Assert.assertNotNull(strSet68);
        org.junit.Assert.assertNull(obj70);
        org.junit.Assert.assertNotNull(objSet71);
    }

    @Test
    public void test0321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0321");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Properties properties5 = new java.util.Properties(properties3);
        java.util.Properties properties6 = new java.util.Properties(properties5);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties7.setService("");
        atomikosProperties7.setSerialJtaTransactions(true);
        atomikosProperties7.setEnableLogging(false);
        atomikosProperties7.logBaseName = "tmlog";
        int int16 = atomikosProperties7.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties17.setService("");
        atomikosProperties17.setSerialJtaTransactions(true);
        atomikosProperties17.setEnableLogging(false);
        atomikosProperties17.logBaseName = "tmlog";
        atomikosProperties17.maxActives = 1;
        atomikosProperties17.setEnableLogging(true);
        java.lang.String str30 = atomikosProperties17.service;
        atomikosProperties17.setCheckpointInterval((long) (byte) 0);
        long long33 = atomikosProperties17.getDefaultJtaTimeout();
        boolean boolean34 = properties6.remove((java.lang.Object) atomikosProperties7, (java.lang.Object) long33);
        java.io.PrintStream printStream35 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties6.list(printStream35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 50 + "'", int16 == 50);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 10000L + "'", long33 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test0322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0322");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration6 = properties3.elements();
        java.util.Properties properties7 = null;
        java.util.Properties properties8 = new java.util.Properties(properties7);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties10 = atomikosProperties9.asProperties();
        properties8.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        java.util.Properties properties12 = new java.util.Properties(properties10);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties13.defaultJtaTimeout = (byte) -1;
        java.util.Properties properties16 = atomikosProperties13.asProperties();
        boolean boolean17 = properties10.contains((java.lang.Object) properties16);
        java.util.Properties properties18 = null;
        java.util.Properties properties19 = new java.util.Properties(properties18);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties21 = atomikosProperties20.asProperties();
        properties19.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties21);
        java.util.Enumeration<java.lang.Object> objEnumeration23 = properties21.keys();
        boolean boolean25 = properties21.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties26 = null;
        java.util.Properties properties27 = new java.util.Properties(properties26);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties29 = atomikosProperties28.asProperties();
        properties27.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties29);
        java.util.Enumeration<java.lang.Object> objEnumeration31 = properties29.keys();
        java.lang.Object obj34 = properties29.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection35 = properties29.values();
        boolean boolean36 = properties21.containsKey((java.lang.Object) properties29);
        java.util.Properties properties37 = new java.util.Properties(properties21);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long39 = atomikosProperties38.defaultJtaTimeout;
        boolean boolean40 = atomikosProperties38.enableLogging;
        atomikosProperties38.setSerialJtaTransactions(true);
        java.util.Properties properties43 = atomikosProperties38.asProperties();
        java.util.Properties properties44 = atomikosProperties38.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties45 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean46 = atomikosProperties45.forceShutdownOnVmExit;
        atomikosProperties45.setSerialJtaTransactions(true);
        java.lang.String str49 = atomikosProperties45.logBaseName;
        boolean boolean50 = atomikosProperties45.forceShutdownOnVmExit;
        int int51 = atomikosProperties45.maxActives;
        java.lang.String str52 = atomikosProperties45.logBaseName;
        atomikosProperties45.setForceShutdownOnVmExit(true);
        java.util.Properties properties55 = atomikosProperties45.asProperties();
        boolean boolean56 = atomikosProperties45.isForceShutdownOnVmExit();
        java.util.Properties properties57 = atomikosProperties45.asProperties();
        java.lang.Object obj58 = properties21.replace((java.lang.Object) atomikosProperties38, (java.lang.Object) atomikosProperties45);
        java.lang.Object obj59 = properties3.putIfAbsent((java.lang.Object) properties16, (java.lang.Object) atomikosProperties45);
        java.util.Collection<java.lang.Object> objCollection60 = properties16.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet61 = properties16.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties62 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties62.setService("");
        atomikosProperties62.setThreadedTwoPhaseCommit(true);
        long long67 = atomikosProperties62.getCheckpointInterval();
        atomikosProperties62.maxTimeout = (-1);
        java.util.Properties properties70 = atomikosProperties62.asProperties();
        java.util.Enumeration<?> wildcardEnumeration71 = properties70.propertyNames();
        java.util.Set<java.lang.String> strSet72 = properties70.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties73 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties74 = atomikosProperties73.asProperties();
        long long75 = atomikosProperties73.getDefaultJtaTimeout();
        long long76 = atomikosProperties73.getDefaultJtaTimeout();
        boolean boolean77 = atomikosProperties73.serialJtaTransactions;
        boolean boolean78 = properties70.contains((java.lang.Object) boolean77);
        boolean boolean79 = properties16.contains((java.lang.Object) boolean78);
        java.util.Set<java.lang.String> strSet80 = properties16.stringPropertyNames();
        java.util.Enumeration<java.lang.Object> objEnumeration81 = properties16.elements();
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNotNull(objEnumeration6);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(properties21);
        org.junit.Assert.assertNotNull(objEnumeration23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(properties29);
        org.junit.Assert.assertNotNull(objEnumeration31);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNotNull(objCollection35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 10000L + "'", long39 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(properties43);
        org.junit.Assert.assertNotNull(properties44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "tmlog" + "'", str49, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 50 + "'", int51 == 50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "tmlog" + "'", str52, "tmlog");
        org.junit.Assert.assertNotNull(properties55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(properties57);
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertNotNull(objCollection60);
        org.junit.Assert.assertNotNull(objEntrySet61);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 500L + "'", long67 == 500L);
        org.junit.Assert.assertNotNull(properties70);
        org.junit.Assert.assertNotNull(wildcardEnumeration71);
        org.junit.Assert.assertNotNull(strSet72);
        org.junit.Assert.assertNotNull(properties74);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 10000L + "'", long75 == 10000L);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 10000L + "'", long76 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(strSet80);
        org.junit.Assert.assertNotNull(objEnumeration81);
    }

    @Test
    public void test0323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0323");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        atomikosProperties0.setSerialJtaTransactions(true);
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        java.util.Properties properties6 = atomikosProperties0.asProperties();
        java.util.Properties properties7 = null;
        java.util.Properties properties8 = new java.util.Properties(properties7);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties10 = atomikosProperties9.asProperties();
        properties8.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        java.util.Enumeration<java.lang.Object> objEnumeration12 = properties10.keys();
        java.lang.Object obj15 = properties10.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection16 = properties10.values();
        java.util.Properties properties17 = new java.util.Properties();
        java.lang.Object obj20 = properties17.getOrDefault((java.lang.Object) (short) 1, (java.lang.Object) (-1.0d));
        properties10.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties17);
        java.util.Properties properties23 = null;
        java.util.Properties properties24 = new java.util.Properties(properties23);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties26 = atomikosProperties25.asProperties();
        properties24.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties26);
        java.util.Enumeration<java.lang.Object> objEnumeration28 = properties26.keys();
        java.lang.Object obj31 = properties26.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection32 = properties26.values();
        java.util.Properties properties33 = new java.util.Properties();
        java.lang.Object obj36 = properties33.getOrDefault((java.lang.Object) (short) 1, (java.lang.Object) (-1.0d));
        properties26.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties33);
        atomikosProperties0.set(properties10, "", (java.lang.Object) properties26);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties39 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean40 = atomikosProperties39.forceShutdownOnVmExit;
        atomikosProperties39.setSerialJtaTransactions(true);
        java.lang.String str43 = atomikosProperties39.logBaseName;
        atomikosProperties39.service = "tmlog";
        java.util.Properties properties46 = atomikosProperties39.asProperties();
        properties10.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties46);
        java.io.OutputStream outputStream48 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties46.save(outputStream48, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, true=true, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertNotNull(properties6);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertNotNull(objEnumeration12);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNotNull(objCollection16);
        org.junit.Assert.assertEquals("'" + obj20 + "' != '" + (-1.0d) + "'", obj20, (-1.0d));
        org.junit.Assert.assertNotNull(properties26);
        org.junit.Assert.assertNotNull(objEnumeration28);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNotNull(objCollection32);
        org.junit.Assert.assertEquals("'" + obj36 + "' != '" + (-1.0d) + "'", obj36, (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "tmlog" + "'", str43, "tmlog");
        org.junit.Assert.assertNotNull(properties46);
    }

    @Test
    public void test0324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0324");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.setSerialJtaTransactions(true);
        java.lang.String str4 = atomikosProperties0.logBaseName;
        boolean boolean5 = atomikosProperties0.forceShutdownOnVmExit;
        int int6 = atomikosProperties0.maxActives;
        java.lang.String str7 = atomikosProperties0.logBaseName;
        atomikosProperties0.transactionManagerUniqueName = "hi!";
        atomikosProperties0.setMaxActives((int) (short) 10);
        java.util.Properties properties12 = atomikosProperties0.asProperties();
        java.util.Properties properties13 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties14.setService("");
        atomikosProperties14.setSerialJtaTransactions(true);
        java.util.Properties properties19 = atomikosProperties14.asProperties();
        properties19.clear();
        java.util.Properties properties22 = null;
        java.util.Properties properties23 = new java.util.Properties(properties22);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties25 = atomikosProperties24.asProperties();
        properties23.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties25);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties25.keys();
        boolean boolean29 = properties25.containsValue((java.lang.Object) 0.0f);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long32 = atomikosProperties31.defaultJtaTimeout;
        boolean boolean33 = atomikosProperties31.enableLogging;
        atomikosProperties31.setSerialJtaTransactions(true);
        java.lang.Object obj36 = properties25.putIfAbsent((java.lang.Object) 100L, (java.lang.Object) true);
        boolean boolean37 = properties19.remove((java.lang.Object) 1.0f, (java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties38.setService("");
        atomikosProperties38.setSerialJtaTransactions(true);
        java.util.Properties properties43 = atomikosProperties38.asProperties();
        properties43.clear();
        java.lang.Object obj46 = properties19.put((java.lang.Object) properties43, (java.lang.Object) (short) 1);
        java.util.Enumeration<java.lang.Object> objEnumeration47 = properties19.elements();
        java.util.Set<java.lang.String> strSet48 = properties19.stringPropertyNames();
        java.lang.Object obj50 = properties13.put((java.lang.Object) strSet48, (java.lang.Object) (-1.0d));
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties51 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties52 = atomikosProperties51.asProperties();
        long long53 = atomikosProperties51.getDefaultJtaTimeout();
        long long54 = atomikosProperties51.getDefaultJtaTimeout();
        boolean boolean55 = atomikosProperties51.serialJtaTransactions;
        boolean boolean56 = atomikosProperties51.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties57 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean58 = atomikosProperties57.forceShutdownOnVmExit;
        atomikosProperties57.setSerialJtaTransactions(true);
        java.lang.String str61 = atomikosProperties57.logBaseName;
        atomikosProperties57.service = "tmlog";
        java.util.Properties properties64 = atomikosProperties57.asProperties();
        long long65 = atomikosProperties57.checkpointInterval;
        boolean boolean66 = atomikosProperties57.isEnableLogging();
        java.util.Properties properties67 = atomikosProperties57.asProperties();
        java.lang.Object obj68 = properties13.put((java.lang.Object) boolean56, (java.lang.Object) properties67);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tmlog" + "'", str4, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 50 + "'", int6 == 50);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "tmlog" + "'", str7, "tmlog");
        org.junit.Assert.assertNotNull(properties12);
        org.junit.Assert.assertNotNull(properties13);
        org.junit.Assert.assertNotNull(properties19);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 10000L + "'", long32 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(properties43);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNotNull(objEnumeration47);
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertNotNull(properties52);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 10000L + "'", long53 == 10000L);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 10000L + "'", long54 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "tmlog" + "'", str61, "tmlog");
        org.junit.Assert.assertNotNull(properties64);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 500L + "'", long65 == 500L);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(properties67);
        org.junit.Assert.assertNull(obj68);
    }

    @Test
    public void test0325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0325");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Properties properties5 = new java.util.Properties(properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties7 = atomikosProperties6.asProperties();
        java.util.Set<java.lang.String> strSet8 = properties7.stringPropertyNames();
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties7);
        java.util.Properties properties10 = new java.util.Properties(properties7);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean12 = atomikosProperties11.forceShutdownOnVmExit;
        atomikosProperties11.setSerialJtaTransactions(true);
        java.lang.String str15 = atomikosProperties11.logBaseName;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties17 = atomikosProperties16.asProperties();
        java.util.Properties properties18 = atomikosProperties16.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties20.setService("");
        atomikosProperties20.setThreadedTwoPhaseCommit(true);
        long long25 = atomikosProperties20.getCheckpointInterval();
        boolean boolean26 = atomikosProperties20.threadedTwoPhaseCommit;
        atomikosProperties11.set(properties18, "tmlog", (java.lang.Object) atomikosProperties20);
        atomikosProperties20.setLogBaseName("{}");
        java.util.Properties properties30 = null;
        java.util.Properties properties31 = new java.util.Properties(properties30);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties33 = atomikosProperties32.asProperties();
        properties31.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties33);
        java.util.Properties properties35 = new java.util.Properties(properties33);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties36.defaultJtaTimeout = (byte) -1;
        java.util.Properties properties39 = atomikosProperties36.asProperties();
        boolean boolean40 = properties33.contains((java.lang.Object) properties39);
        atomikosProperties20.set(properties39, "tmlog", (java.lang.Object) 'a');
        int int44 = properties39.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties45 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean46 = atomikosProperties45.forceShutdownOnVmExit;
        atomikosProperties45.setSerialJtaTransactions(true);
        java.lang.String str49 = atomikosProperties45.logBaseName;
        boolean boolean50 = atomikosProperties45.forceShutdownOnVmExit;
        atomikosProperties45.logBaseName = "tmlog";
        atomikosProperties45.setCheckpointInterval((long) 100);
        java.lang.Object obj55 = properties10.putIfAbsent((java.lang.Object) int44, (java.lang.Object) 100);
        java.lang.String str57 = properties10.getProperty("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties58 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties59 = atomikosProperties58.asProperties();
        long long60 = atomikosProperties58.getDefaultJtaTimeout();
        atomikosProperties58.setCheckpointInterval(0L);
        atomikosProperties58.defaultJtaTimeout = ' ';
        java.util.Properties properties65 = atomikosProperties58.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties66 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean67 = atomikosProperties66.forceShutdownOnVmExit;
        java.lang.String str68 = atomikosProperties66.getLogBaseDir();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties69 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties69.setService("");
        atomikosProperties69.setSerialJtaTransactions(true);
        java.util.Properties properties74 = atomikosProperties69.asProperties();
        java.util.Properties properties75 = atomikosProperties69.asProperties();
        atomikosProperties69.transactionManagerUniqueName = "";
        java.lang.String str78 = atomikosProperties69.getService();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean79 = properties10.replace((java.lang.Object) properties65, (java.lang.Object) str68, (java.lang.Object) str78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "tmlog" + "'", str15, "tmlog");
        org.junit.Assert.assertNotNull(properties17);
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 500L + "'", long25 == 500L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(properties33);
        org.junit.Assert.assertNotNull(properties39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "tmlog" + "'", str49, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(properties59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 10000L + "'", long60 == 10000L);
        org.junit.Assert.assertNotNull(properties65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNotNull(properties74);
        org.junit.Assert.assertNotNull(properties75);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
    }

    @Test
    public void test0326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0326");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.serialJtaTransactions = false;
        long long4 = atomikosProperties0.maxTimeout;
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        java.lang.String str8 = properties5.getProperty("hi!", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, tmlog=tmlog}");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 300000L + "'", long4 == 300000L);
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, tmlog=tmlog}" + "'", str8, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, tmlog=tmlog}");
    }

    @Test
    public void test0327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0327");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        java.lang.Object obj8 = properties3.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection9 = properties3.values();
        java.util.Properties properties10 = new java.util.Properties();
        java.lang.Object obj13 = properties10.getOrDefault((java.lang.Object) (short) 1, (java.lang.Object) (-1.0d));
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        java.util.Properties properties15 = new java.util.Properties(properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties16.setService("");
        boolean boolean19 = atomikosProperties16.isEnableLogging();
        java.util.Properties properties20 = atomikosProperties16.asProperties();
        atomikosProperties16.setSerialJtaTransactions(false);
        atomikosProperties16.enableLogging = false;
        java.lang.String str25 = atomikosProperties16.service;
        atomikosProperties16.forceShutdownOnVmExit = false;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean29 = atomikosProperties28.forceShutdownOnVmExit;
        atomikosProperties28.setSerialJtaTransactions(true);
        java.lang.String str32 = atomikosProperties28.logBaseName;
        boolean boolean33 = atomikosProperties28.forceShutdownOnVmExit;
        int int34 = atomikosProperties28.maxActives;
        java.lang.String str35 = atomikosProperties28.logBaseName;
        atomikosProperties28.setForceShutdownOnVmExit(true);
        java.util.Properties properties38 = atomikosProperties28.asProperties();
        boolean boolean39 = atomikosProperties28.isForceShutdownOnVmExit();
        java.util.Properties properties40 = atomikosProperties28.asProperties();
        atomikosProperties28.setSerialJtaTransactions(false);
        atomikosProperties28.setCheckpointInterval((long) 'a');
        java.lang.Object obj45 = properties3.put((java.lang.Object) atomikosProperties16, (java.lang.Object) 'a');
        java.lang.String str46 = atomikosProperties16.logBaseName;
        boolean boolean47 = atomikosProperties16.forceShutdownOnVmExit;
        boolean boolean48 = atomikosProperties16.threadedTwoPhaseCommit;
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(objCollection9);
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + (-1.0d) + "'", obj13, (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(properties20);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "tmlog" + "'", str32, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 50 + "'", int34 == 50);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "tmlog" + "'", str35, "tmlog");
        org.junit.Assert.assertNotNull(properties38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(properties40);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "tmlog" + "'", str46, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test0328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0328");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties6.setService("");
        atomikosProperties6.setSerialJtaTransactions(true);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean12 = atomikosProperties11.forceShutdownOnVmExit;
        atomikosProperties11.setSerialJtaTransactions(true);
        boolean boolean15 = properties3.remove((java.lang.Object) atomikosProperties6, (java.lang.Object) true);
        java.io.InputStream inputStream16 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.load(inputStream16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0329");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        long long5 = atomikosProperties0.getCheckpointInterval();
        atomikosProperties0.maxTimeout = (-1);
        atomikosProperties0.setCheckpointInterval((long) 9);
        atomikosProperties0.setSerialJtaTransactions(false);
        atomikosProperties0.serialJtaTransactions = true;
        int int14 = atomikosProperties0.maxActives;
        long long15 = atomikosProperties0.getMaxTimeout();
        java.util.Properties properties16 = null;
        java.util.Properties properties17 = new java.util.Properties(properties16);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties19 = atomikosProperties18.asProperties();
        properties17.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties19);
        java.util.Enumeration<java.lang.Object> objEnumeration21 = properties19.keys();
        java.lang.Object obj24 = properties19.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Properties properties25 = new java.util.Properties(properties19);
        java.util.Properties properties27 = null;
        java.util.Properties properties28 = new java.util.Properties(properties27);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties30 = atomikosProperties29.asProperties();
        properties28.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties30);
        java.util.Enumeration<java.lang.Object> objEnumeration32 = properties30.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration33 = properties30.elements();
        atomikosProperties0.set(properties25, "hi!", (java.lang.Object) properties30);
        java.io.PrintWriter printWriter35 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties25.list(printWriter35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 500L + "'", long5 == 500L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 50 + "'", int14 == 50);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertNotNull(properties19);
        org.junit.Assert.assertNotNull(objEnumeration21);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(properties30);
        org.junit.Assert.assertNotNull(objEnumeration32);
        org.junit.Assert.assertNotNull(objEnumeration33);
    }

    @Test
    public void test0330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0330");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        long long5 = atomikosProperties0.getCheckpointInterval();
        atomikosProperties0.maxTimeout = (-1);
        java.util.Properties properties8 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long10 = atomikosProperties9.defaultJtaTimeout;
        boolean boolean11 = atomikosProperties9.enableLogging;
        atomikosProperties9.setSerialJtaTransactions(true);
        java.util.Properties properties14 = atomikosProperties9.asProperties();
        properties8.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties14);
        java.util.Properties properties16 = null;
        java.util.Properties properties17 = new java.util.Properties(properties16);
        java.util.Properties properties18 = new java.util.Properties(properties17);
        java.util.Properties properties19 = null;
        java.util.Properties properties20 = new java.util.Properties(properties19);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties22 = atomikosProperties21.asProperties();
        properties20.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties22);
        java.util.Enumeration<java.lang.Object> objEnumeration24 = properties22.keys();
        boolean boolean26 = properties22.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties27 = null;
        java.util.Properties properties28 = new java.util.Properties(properties27);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties30 = atomikosProperties29.asProperties();
        properties28.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties30);
        java.util.Enumeration<java.lang.Object> objEnumeration32 = properties30.keys();
        java.lang.Object obj35 = properties30.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection36 = properties30.values();
        boolean boolean37 = properties22.containsKey((java.lang.Object) properties30);
        java.util.Properties properties38 = new java.util.Properties(properties22);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties39 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long40 = atomikosProperties39.defaultJtaTimeout;
        boolean boolean41 = atomikosProperties39.enableLogging;
        atomikosProperties39.setSerialJtaTransactions(true);
        java.util.Properties properties44 = atomikosProperties39.asProperties();
        java.util.Properties properties45 = atomikosProperties39.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties46 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean47 = atomikosProperties46.forceShutdownOnVmExit;
        atomikosProperties46.setSerialJtaTransactions(true);
        java.lang.String str50 = atomikosProperties46.logBaseName;
        boolean boolean51 = atomikosProperties46.forceShutdownOnVmExit;
        int int52 = atomikosProperties46.maxActives;
        java.lang.String str53 = atomikosProperties46.logBaseName;
        atomikosProperties46.setForceShutdownOnVmExit(true);
        java.util.Properties properties56 = atomikosProperties46.asProperties();
        boolean boolean57 = atomikosProperties46.isForceShutdownOnVmExit();
        java.util.Properties properties58 = atomikosProperties46.asProperties();
        java.lang.Object obj59 = properties22.replace((java.lang.Object) atomikosProperties39, (java.lang.Object) atomikosProperties46);
        java.lang.String str60 = atomikosProperties46.getLogBaseDir();
        atomikosProperties46.logBaseName = "{}";
        java.util.Properties properties63 = atomikosProperties46.asProperties();
        atomikosProperties46.setThreadedTwoPhaseCommit(false);
        java.lang.Object obj66 = properties14.put((java.lang.Object) properties18, (java.lang.Object) atomikosProperties46);
        java.io.InputStream inputStream67 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties18.load(inputStream67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 500L + "'", long5 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertNotNull(properties22);
        org.junit.Assert.assertNotNull(objEnumeration24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(properties30);
        org.junit.Assert.assertNotNull(objEnumeration32);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNotNull(objCollection36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 10000L + "'", long40 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(properties44);
        org.junit.Assert.assertNotNull(properties45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "tmlog" + "'", str50, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 50 + "'", int52 == 50);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "tmlog" + "'", str53, "tmlog");
        org.junit.Assert.assertNotNull(properties56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(properties58);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(properties63);
        org.junit.Assert.assertNull(obj66);
    }

    @Test
    public void test0331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0331");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        boolean boolean7 = properties3.containsValue((java.lang.Object) 0.0f);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long10 = atomikosProperties9.defaultJtaTimeout;
        boolean boolean11 = atomikosProperties9.enableLogging;
        atomikosProperties9.setSerialJtaTransactions(true);
        java.lang.Object obj14 = properties3.putIfAbsent((java.lang.Object) 100L, (java.lang.Object) true);
        java.util.Properties properties15 = new java.util.Properties(properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties16.setService("");
        atomikosProperties16.setThreadedTwoPhaseCommit(true);
        atomikosProperties16.setMaxTimeout(1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties24 = atomikosProperties23.asProperties();
        long long25 = atomikosProperties23.getDefaultJtaTimeout();
        atomikosProperties23.setCheckpointInterval(0L);
        atomikosProperties23.defaultJtaTimeout = ' ';
        boolean boolean30 = atomikosProperties23.serialJtaTransactions;
        java.lang.Object obj31 = properties3.putIfAbsent((java.lang.Object) 1L, (java.lang.Object) atomikosProperties23);
        java.io.OutputStream outputStream32 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.storeToXML(outputStream32, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, 100=true, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(properties24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 10000L + "'", long25 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNull(obj31);
    }

    @Test
    public void test0332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0332");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties5.setService("");
        atomikosProperties5.setThreadedTwoPhaseCommit(true);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.setService("");
        atomikosProperties10.setSerialJtaTransactions(true);
        atomikosProperties10.setEnableLogging(false);
        java.lang.String str17 = atomikosProperties10.logBaseName;
        java.lang.Object obj18 = properties3.replace((java.lang.Object) atomikosProperties5, (java.lang.Object) atomikosProperties10);
        atomikosProperties5.maxActives = (-1);
        java.lang.String str21 = atomikosProperties5.service;
        atomikosProperties5.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
    }

    @Test
    public void test0333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0333");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.defaultJtaTimeout;
        boolean boolean2 = atomikosProperties0.enableLogging;
        atomikosProperties0.setSerialJtaTransactions(true);
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        java.util.Properties properties6 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties9 = atomikosProperties8.asProperties();
        atomikosProperties8.checkpointInterval = 1L;
        boolean boolean12 = atomikosProperties8.forceShutdownOnVmExit;
        java.lang.Object obj13 = properties6.put((java.lang.Object) (short) 0, (java.lang.Object) atomikosProperties8);
        boolean boolean14 = atomikosProperties8.isSerialJtaTransactions();
        java.util.Properties properties15 = atomikosProperties8.asProperties();
        java.io.PrintStream printStream16 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties15.list(printStream16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 10000L + "'", long1 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertNotNull(properties6);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(properties15);
    }

    @Test
    public void test0334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0334");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        long long2 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setCheckpointInterval(0L);
        atomikosProperties0.defaultJtaTimeout = ' ';
        java.util.Properties properties7 = atomikosProperties0.asProperties();
        java.io.OutputStream outputStream8 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties7.save(outputStream8, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=false, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10000L + "'", long2 == 10000L);
        org.junit.Assert.assertNotNull(properties7);
    }

    @Test
    public void test0335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0335");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        atomikosProperties0.setSerialJtaTransactions(true);
        atomikosProperties0.setEnableLogging(false);
        long long7 = atomikosProperties0.getCheckpointInterval();
        atomikosProperties0.setForceShutdownOnVmExit(false);
        java.lang.Class<?> wildcardClass10 = atomikosProperties0.getClass();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0336");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        java.lang.Object obj8 = properties3.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection9 = properties3.values();
        java.util.Set<java.lang.String> strSet10 = properties3.stringPropertyNames();
        java.util.Enumeration<java.lang.Object> objEnumeration11 = properties3.elements();
        java.util.Properties properties12 = new java.util.Properties(properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties13.setService("");
        boolean boolean16 = atomikosProperties13.isEnableLogging();
        java.util.Properties properties17 = atomikosProperties13.asProperties();
        atomikosProperties13.setDefaultJtaTimeout(300000L);
        atomikosProperties13.maxActives = (short) 0;
        atomikosProperties13.setForceShutdownOnVmExit(false);
        java.lang.String str24 = atomikosProperties13.logBaseDir;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties25.setService("");
        atomikosProperties25.setThreadedTwoPhaseCommit(true);
        long long30 = atomikosProperties25.getCheckpointInterval();
        boolean boolean31 = atomikosProperties25.threadedTwoPhaseCommit;
        atomikosProperties25.transactionManagerUniqueName = "tmlog";
        boolean boolean34 = atomikosProperties25.forceShutdownOnVmExit;
        boolean boolean35 = atomikosProperties25.enableLogging;
        atomikosProperties25.defaultJtaTimeout = 1;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj38 = properties3.putIfAbsent((java.lang.Object) str24, (java.lang.Object) atomikosProperties25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(objCollection9);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(objEnumeration11);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(properties17);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 500L + "'", long30 == 500L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test0337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0337");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        atomikosProperties0.setSerialJtaTransactions(true);
        atomikosProperties0.setEnableLogging(false);
        atomikosProperties0.logBaseName = "tmlog";
        atomikosProperties0.maxActives = 1;
        atomikosProperties0.setEnableLogging(true);
        atomikosProperties0.forceShutdownOnVmExit = true;
    }

    @Test
    public void test0338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0338");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.setSerialJtaTransactions(true);
        java.lang.String str4 = atomikosProperties0.logBaseName;
        boolean boolean5 = atomikosProperties0.forceShutdownOnVmExit;
        int int6 = atomikosProperties0.maxActives;
        java.lang.String str7 = atomikosProperties0.logBaseName;
        atomikosProperties0.checkpointInterval = 9L;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tmlog" + "'", str4, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 50 + "'", int6 == 50);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "tmlog" + "'", str7, "tmlog");
    }

    @Test
    public void test0339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0339");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.checkpointInterval = 1L;
        java.lang.String str4 = atomikosProperties0.getService();
        java.lang.String str5 = atomikosProperties0.getLogBaseName();
        java.util.Properties properties6 = atomikosProperties0.asProperties();
        boolean boolean8 = properties6.equals((java.lang.Object) 10);
        java.io.OutputStream outputStream9 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties6.storeToXML(outputStream9, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tmlog" + "'", str5, "tmlog");
        org.junit.Assert.assertNotNull(properties6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0340");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties5.setService("");
        atomikosProperties5.setThreadedTwoPhaseCommit(true);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.setService("");
        atomikosProperties10.setSerialJtaTransactions(true);
        atomikosProperties10.setEnableLogging(false);
        java.lang.String str17 = atomikosProperties10.logBaseName;
        java.lang.Object obj18 = properties3.replace((java.lang.Object) atomikosProperties5, (java.lang.Object) atomikosProperties10);
        java.lang.String str20 = properties3.getProperty("");
        java.util.Properties properties21 = new java.util.Properties(properties3);
        java.lang.String str24 = properties3.getProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, true=true, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "{}");
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "{}" + "'", str24, "{}");
    }

    @Test
    public void test0341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0341");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.defaultJtaTimeout = (byte) -1;
        atomikosProperties0.setSerialJtaTransactions(false);
        java.lang.String str5 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.maxActives = (short) 10;
        boolean boolean8 = atomikosProperties0.isEnableLogging();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test0342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0342");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        atomikosProperties0.setSerialJtaTransactions(true);
        atomikosProperties0.setEnableLogging(false);
        java.lang.String str7 = atomikosProperties0.logBaseName;
        boolean boolean8 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.enableLogging = false;
        atomikosProperties0.service = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, tmlog=tmlog}";
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "tmlog" + "'", str7, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test0343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0343");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        atomikosProperties0.setSerialJtaTransactions(true);
        atomikosProperties0.setEnableLogging(false);
        atomikosProperties0.logBaseName = "tmlog";
        atomikosProperties0.serialJtaTransactions = false;
        java.util.Properties properties11 = atomikosProperties0.asProperties();
        java.lang.String str12 = atomikosProperties0.getLogBaseName();
        java.lang.String str13 = atomikosProperties0.getService();
        atomikosProperties0.service = "";
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "tmlog" + "'", str12, "tmlog");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test0344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0344");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        boolean boolean7 = properties3.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        java.util.Enumeration<java.lang.Object> objEnumeration13 = properties11.keys();
        java.lang.Object obj16 = properties11.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection17 = properties11.values();
        boolean boolean18 = properties3.containsKey((java.lang.Object) properties11);
        java.util.Properties properties19 = new java.util.Properties(properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long21 = atomikosProperties20.defaultJtaTimeout;
        boolean boolean22 = atomikosProperties20.enableLogging;
        atomikosProperties20.setSerialJtaTransactions(true);
        java.util.Properties properties25 = atomikosProperties20.asProperties();
        java.util.Properties properties26 = atomikosProperties20.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean28 = atomikosProperties27.forceShutdownOnVmExit;
        atomikosProperties27.setSerialJtaTransactions(true);
        java.lang.String str31 = atomikosProperties27.logBaseName;
        boolean boolean32 = atomikosProperties27.forceShutdownOnVmExit;
        int int33 = atomikosProperties27.maxActives;
        java.lang.String str34 = atomikosProperties27.logBaseName;
        atomikosProperties27.setForceShutdownOnVmExit(true);
        java.util.Properties properties37 = atomikosProperties27.asProperties();
        boolean boolean38 = atomikosProperties27.isForceShutdownOnVmExit();
        java.util.Properties properties39 = atomikosProperties27.asProperties();
        java.lang.Object obj40 = properties3.replace((java.lang.Object) atomikosProperties20, (java.lang.Object) atomikosProperties27);
        java.util.Set<java.lang.String> strSet41 = properties3.stringPropertyNames();
        java.io.InputStream inputStream42 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.loadFromXML(inputStream42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNotNull(objEnumeration13);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(objCollection17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10000L + "'", long21 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertNotNull(properties26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "tmlog" + "'", str31, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 50 + "'", int33 == 50);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "tmlog" + "'", str34, "tmlog");
        org.junit.Assert.assertNotNull(properties37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(properties39);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNotNull(strSet41);
    }

    @Test
    public void test0345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0345");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Properties properties5 = new java.util.Properties(properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties7 = atomikosProperties6.asProperties();
        java.util.Set<java.lang.String> strSet8 = properties7.stringPropertyNames();
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties7);
        java.io.OutputStream outputStream10 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties7.save(outputStream10, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNotNull(strSet8);
    }

    @Test
    public void test0346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0346");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Properties properties7 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet8 = properties7.keySet();
        boolean boolean9 = properties1.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) properties7);
        java.util.Collection<java.lang.Object> objCollection10 = properties7.values();
        java.util.Properties properties11 = null;
        java.util.Properties properties12 = new java.util.Properties(properties11);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties14 = atomikosProperties13.asProperties();
        properties12.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties14);
        java.util.Enumeration<java.lang.Object> objEnumeration16 = properties14.keys();
        java.lang.Object obj19 = properties14.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection20 = properties14.values();
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.Object obj24 = properties21.getOrDefault((java.lang.Object) (short) 1, (java.lang.Object) (-1.0d));
        properties14.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties21);
        java.util.Properties properties26 = new java.util.Properties(properties14);
        java.lang.String str27 = properties14.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties28.setService("");
        atomikosProperties28.setThreadedTwoPhaseCommit(true);
        long long33 = atomikosProperties28.getCheckpointInterval();
        atomikosProperties28.maxTimeout = (-1);
        java.util.Properties properties36 = atomikosProperties28.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long38 = atomikosProperties37.defaultJtaTimeout;
        boolean boolean39 = atomikosProperties37.enableLogging;
        atomikosProperties37.setSerialJtaTransactions(true);
        java.util.Properties properties42 = atomikosProperties37.asProperties();
        properties36.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties42);
        java.util.Enumeration<java.lang.Object> objEnumeration44 = properties36.elements();
        java.util.Properties properties45 = new java.util.Properties(properties36);
        java.lang.Object obj46 = properties14.get((java.lang.Object) properties36);
        java.util.Set<java.lang.String> strSet47 = properties14.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties48 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean49 = atomikosProperties48.forceShutdownOnVmExit;
        atomikosProperties48.setSerialJtaTransactions(true);
        java.lang.String str52 = atomikosProperties48.logBaseName;
        boolean boolean53 = atomikosProperties48.forceShutdownOnVmExit;
        int int54 = atomikosProperties48.maxActives;
        atomikosProperties48.setService("hi!");
        boolean boolean57 = atomikosProperties48.isThreadedTwoPhaseCommit();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties58 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties58.setService("");
        atomikosProperties58.logBaseDir = "hi!";
        atomikosProperties58.setMaxTimeout(500L);
        atomikosProperties58.maxTimeout = (-1L);
        java.lang.Object obj67 = properties14.getOrDefault((java.lang.Object) boolean57, (java.lang.Object) atomikosProperties58);
        properties7.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties14);
        java.util.Properties properties69 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties70 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties71 = atomikosProperties70.asProperties();
        atomikosProperties70.setLogBaseName("hi!");
        atomikosProperties70.setCheckpointInterval((long) ' ');
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties76 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties76.setService("");
        atomikosProperties76.setThreadedTwoPhaseCommit(true);
        long long81 = atomikosProperties76.getCheckpointInterval();
        atomikosProperties76.maxTimeout = (-1);
        java.util.Properties properties84 = atomikosProperties76.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties85 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long86 = atomikosProperties85.defaultJtaTimeout;
        boolean boolean87 = atomikosProperties85.enableLogging;
        atomikosProperties85.setSerialJtaTransactions(true);
        java.util.Properties properties90 = atomikosProperties85.asProperties();
        properties84.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties90);
        java.util.Enumeration<java.lang.Object> objEnumeration92 = properties84.elements();
        java.lang.Object obj93 = properties69.putIfAbsent((java.lang.Object) ' ', (java.lang.Object) properties84);
        java.util.Properties properties94 = new java.util.Properties(properties69);
        java.util.Properties properties95 = new java.util.Properties(properties69);
        java.lang.Object obj96 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj97 = properties7.put((java.lang.Object) properties69, obj96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(objCollection10);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertNotNull(objEnumeration16);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNotNull(objCollection20);
        org.junit.Assert.assertEquals("'" + obj24 + "' != '" + (-1.0d) + "'", obj24, (-1.0d));
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str27, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 500L + "'", long33 == 500L);
        org.junit.Assert.assertNotNull(properties36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 10000L + "'", long38 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(properties42);
        org.junit.Assert.assertNotNull(objEnumeration44);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "tmlog" + "'", str52, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 50 + "'", int54 == 50);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(obj67);
        org.junit.Assert.assertNotNull(properties71);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 500L + "'", long81 == 500L);
        org.junit.Assert.assertNotNull(properties84);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 10000L + "'", long86 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(properties90);
        org.junit.Assert.assertNotNull(objEnumeration92);
        org.junit.Assert.assertNull(obj93);
    }

    @Test
    public void test0347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0347");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        boolean boolean3 = atomikosProperties0.isEnableLogging();
        java.util.Properties properties4 = atomikosProperties0.asProperties();
        properties4.clear();
        java.util.Properties properties6 = null;
        java.util.Properties properties7 = new java.util.Properties(properties6);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties9 = atomikosProperties8.asProperties();
        properties7.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties9);
        java.util.Enumeration<java.lang.Object> objEnumeration11 = properties9.keys();
        java.lang.Object obj13 = properties4.put((java.lang.Object) properties9, (java.lang.Object) (byte) 0);
        boolean boolean14 = properties9.isEmpty();
        boolean boolean15 = properties9.isEmpty();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet16 = properties9.entrySet();
        java.util.Properties properties17 = null;
        java.util.Properties properties18 = new java.util.Properties(properties17);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties20 = atomikosProperties19.asProperties();
        properties18.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties20);
        java.util.Properties properties22 = new java.util.Properties(properties20);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties24 = atomikosProperties23.asProperties();
        java.util.Set<java.lang.String> strSet25 = properties24.stringPropertyNames();
        properties22.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties24);
        int int27 = properties22.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties28.defaultJtaTimeout = (byte) -1;
        java.util.Properties properties31 = atomikosProperties28.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean33 = atomikosProperties32.forceShutdownOnVmExit;
        atomikosProperties32.setSerialJtaTransactions(true);
        java.lang.String str36 = atomikosProperties32.logBaseName;
        atomikosProperties32.service = "tmlog";
        java.util.Properties properties39 = atomikosProperties32.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean41 = atomikosProperties40.forceShutdownOnVmExit;
        java.lang.String str42 = atomikosProperties40.getLogBaseDir();
        java.lang.Object obj43 = properties31.getOrDefault((java.lang.Object) atomikosProperties32, (java.lang.Object) str42);
        long long44 = atomikosProperties32.getDefaultJtaTimeout();
        atomikosProperties32.setLogBaseName("{}");
        int int47 = atomikosProperties32.maxActives;
        java.lang.Object obj48 = properties9.replace((java.lang.Object) properties22, (java.lang.Object) int47);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties49.setService("");
        atomikosProperties49.setThreadedTwoPhaseCommit(true);
        long long54 = atomikosProperties49.getCheckpointInterval();
        java.util.Properties properties55 = atomikosProperties49.asProperties();
        java.util.Properties properties56 = null;
        java.util.Properties properties57 = new java.util.Properties(properties56);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties58 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties59 = atomikosProperties58.asProperties();
        properties57.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties59);
        java.util.Enumeration<java.lang.Object> objEnumeration61 = properties59.keys();
        boolean boolean63 = properties59.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties64 = null;
        java.util.Properties properties65 = new java.util.Properties(properties64);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties66 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties67 = atomikosProperties66.asProperties();
        properties65.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties67);
        java.util.Enumeration<java.lang.Object> objEnumeration69 = properties67.keys();
        java.lang.Object obj72 = properties67.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection73 = properties67.values();
        boolean boolean74 = properties59.containsKey((java.lang.Object) properties67);
        java.util.Properties properties75 = new java.util.Properties(properties59);
        java.util.Set<java.lang.Object> objSet76 = properties59.keySet();
        java.util.Enumeration<java.lang.Object> objEnumeration77 = properties59.keys();
        java.lang.Object obj78 = properties9.getOrDefault((java.lang.Object) properties55, (java.lang.Object) properties59);
        java.util.Properties properties79 = new java.util.Properties(properties59);
        java.io.PrintWriter printWriter80 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties59.list(printWriter80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(properties4);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertNotNull(objEnumeration11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(objEntrySet16);
        org.junit.Assert.assertNotNull(properties20);
        org.junit.Assert.assertNotNull(properties24);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertNotNull(properties31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "tmlog" + "'", str36, "tmlog");
        org.junit.Assert.assertNotNull(properties39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 10000L + "'", long44 == 10000L);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 50 + "'", int47 == 50);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 500L + "'", long54 == 500L);
        org.junit.Assert.assertNotNull(properties55);
        org.junit.Assert.assertNotNull(properties59);
        org.junit.Assert.assertNotNull(objEnumeration61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(properties67);
        org.junit.Assert.assertNotNull(objEnumeration69);
        org.junit.Assert.assertNull(obj72);
        org.junit.Assert.assertNotNull(objCollection73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(objSet76);
        org.junit.Assert.assertNotNull(objEnumeration77);
        org.junit.Assert.assertNotNull(obj78);
// flaky:         org.junit.Assert.assertEquals(obj78.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj78), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj78), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
    }

    @Test
    public void test0348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0348");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.defaultJtaTimeout;
        boolean boolean2 = atomikosProperties0.enableLogging;
        atomikosProperties0.setSerialJtaTransactions(true);
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        java.util.Properties properties6 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties9 = atomikosProperties8.asProperties();
        atomikosProperties8.checkpointInterval = 1L;
        boolean boolean12 = atomikosProperties8.forceShutdownOnVmExit;
        java.lang.Object obj13 = properties6.put((java.lang.Object) (short) 0, (java.lang.Object) atomikosProperties8);
        java.util.Properties properties14 = null;
        java.util.Properties properties15 = new java.util.Properties(properties14);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties17 = atomikosProperties16.asProperties();
        properties15.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties17);
        java.util.Enumeration<java.lang.Object> objEnumeration19 = properties17.keys();
        java.lang.Object obj22 = properties17.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection23 = properties17.values();
        java.util.Properties properties24 = new java.util.Properties();
        java.lang.Object obj27 = properties24.getOrDefault((java.lang.Object) (short) 1, (java.lang.Object) (-1.0d));
        properties17.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties24);
        java.util.Properties properties29 = new java.util.Properties(properties17);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean31 = atomikosProperties30.forceShutdownOnVmExit;
        atomikosProperties30.setSerialJtaTransactions(true);
        java.lang.String str34 = atomikosProperties30.logBaseName;
        atomikosProperties30.service = "tmlog";
        boolean boolean37 = properties29.containsValue((java.lang.Object) "tmlog");
        java.util.Properties properties38 = new java.util.Properties(properties29);
        boolean boolean39 = properties6.containsKey((java.lang.Object) properties38);
        java.util.Properties properties40 = new java.util.Properties(properties6);
        java.io.PrintStream printStream41 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties40.list(printStream41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 10000L + "'", long1 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertNotNull(properties6);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNotNull(properties17);
        org.junit.Assert.assertNotNull(objEnumeration19);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNotNull(objCollection23);
        org.junit.Assert.assertEquals("'" + obj27 + "' != '" + (-1.0d) + "'", obj27, (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "tmlog" + "'", str34, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test0349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0349");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        long long5 = atomikosProperties0.getCheckpointInterval();
        atomikosProperties0.forceShutdownOnVmExit = true;
        atomikosProperties0.setSerialJtaTransactions(true);
        java.util.Properties properties10 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long12 = atomikosProperties11.defaultJtaTimeout;
        boolean boolean13 = atomikosProperties11.enableLogging;
        atomikosProperties11.setSerialJtaTransactions(true);
        java.util.Properties properties16 = atomikosProperties11.asProperties();
        java.util.Properties properties17 = atomikosProperties11.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties20 = atomikosProperties19.asProperties();
        atomikosProperties19.checkpointInterval = 1L;
        boolean boolean23 = atomikosProperties19.forceShutdownOnVmExit;
        java.lang.Object obj24 = properties17.put((java.lang.Object) (short) 0, (java.lang.Object) atomikosProperties19);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long26 = atomikosProperties25.defaultJtaTimeout;
        boolean boolean27 = atomikosProperties25.enableLogging;
        int int28 = atomikosProperties25.maxActives;
        java.lang.String str29 = atomikosProperties25.getService();
        java.util.Properties properties30 = null;
        java.util.Properties properties31 = new java.util.Properties(properties30);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties33 = atomikosProperties32.asProperties();
        properties31.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties33);
        java.util.Enumeration<java.lang.Object> objEnumeration35 = properties33.keys();
        boolean boolean37 = properties33.containsValue((java.lang.Object) 0.0f);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties39 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long40 = atomikosProperties39.defaultJtaTimeout;
        boolean boolean41 = atomikosProperties39.enableLogging;
        atomikosProperties39.setSerialJtaTransactions(true);
        java.lang.Object obj44 = properties33.putIfAbsent((java.lang.Object) 100L, (java.lang.Object) true);
        java.util.Enumeration<java.lang.Object> objEnumeration45 = properties33.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties47 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties47.setService("");
        atomikosProperties47.setSerialJtaTransactions(true);
        atomikosProperties47.setEnableLogging(false);
        atomikosProperties47.service = "tmlog";
        atomikosProperties25.set(properties33, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", (java.lang.Object) atomikosProperties47);
        boolean boolean57 = properties17.contains((java.lang.Object) atomikosProperties47);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties59 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties59.setService("");
        atomikosProperties59.setThreadedTwoPhaseCommit(true);
        long long64 = atomikosProperties59.getCheckpointInterval();
        atomikosProperties59.maxTimeout = (-1);
        java.util.Properties properties67 = atomikosProperties59.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties68 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long69 = atomikosProperties68.defaultJtaTimeout;
        boolean boolean70 = atomikosProperties68.enableLogging;
        atomikosProperties68.setSerialJtaTransactions(true);
        java.util.Properties properties73 = atomikosProperties68.asProperties();
        properties67.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties73);
        java.util.Enumeration<java.lang.Object> objEnumeration75 = properties67.elements();
        atomikosProperties0.set(properties17, "hi!", (java.lang.Object) objEnumeration75);
        boolean boolean77 = atomikosProperties0.isThreadedTwoPhaseCommit();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 500L + "'", long5 == 500L);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10000L + "'", long12 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertNotNull(properties17);
        org.junit.Assert.assertNotNull(properties20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 10000L + "'", long26 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 50 + "'", int28 == 50);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(properties33);
        org.junit.Assert.assertNotNull(objEnumeration35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 10000L + "'", long40 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNotNull(objEnumeration45);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 500L + "'", long64 == 500L);
        org.junit.Assert.assertNotNull(properties67);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 10000L + "'", long69 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(properties73);
        org.junit.Assert.assertNotNull(objEnumeration75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
    }

    @Test
    public void test0350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0350");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.setSerialJtaTransactions(true);
        java.lang.String str4 = atomikosProperties0.logBaseName;
        boolean boolean5 = atomikosProperties0.forceShutdownOnVmExit;
        int int6 = atomikosProperties0.maxActives;
        atomikosProperties0.setService("hi!");
        java.util.Properties properties9 = atomikosProperties0.asProperties();
        java.io.OutputStream outputStream10 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties9.storeToXML(outputStream10, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tmlog" + "'", str4, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 50 + "'", int6 == 50);
        org.junit.Assert.assertNotNull(properties9);
    }

    @Test
    public void test0351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0351");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        atomikosProperties0.setSerialJtaTransactions(true);
        atomikosProperties0.setEnableLogging(false);
        atomikosProperties0.logBaseName = "tmlog";
        atomikosProperties0.serialJtaTransactions = false;
        java.util.Properties properties11 = atomikosProperties0.asProperties();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet12 = properties11.entrySet();
        java.io.Writer writer13 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties11.store(writer13, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=false, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNotNull(objEntrySet12);
    }

    @Test
    public void test0352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0352");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        java.util.Set<java.lang.String> strSet2 = properties1.stringPropertyNames();
        java.util.Properties properties3 = null;
        java.util.Properties properties4 = new java.util.Properties(properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties6 = atomikosProperties5.asProperties();
        properties4.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties6);
        java.util.Enumeration<java.lang.Object> objEnumeration8 = properties6.keys();
        boolean boolean10 = properties6.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties11 = null;
        java.util.Properties properties12 = new java.util.Properties(properties11);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties14 = atomikosProperties13.asProperties();
        properties12.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties14);
        java.util.Enumeration<java.lang.Object> objEnumeration16 = properties14.keys();
        java.lang.Object obj19 = properties14.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection20 = properties14.values();
        boolean boolean21 = properties6.containsKey((java.lang.Object) properties14);
        java.lang.Object obj22 = properties1.get((java.lang.Object) properties6);
        java.io.Writer writer23 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties6.store(writer23, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(properties6);
        org.junit.Assert.assertNotNull(objEnumeration8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertNotNull(objEnumeration16);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNotNull(objCollection20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(obj22);
    }

    @Test
    public void test0353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0353");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Properties properties5 = new java.util.Properties(properties3);
        java.util.Collection<java.lang.Object> objCollection6 = properties3.values();
        java.util.Properties properties7 = new java.util.Properties(properties3);
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        java.util.Properties properties15 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet16 = properties15.keySet();
        boolean boolean17 = properties9.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) properties15);
        java.util.Enumeration<java.lang.Object> objEnumeration18 = properties9.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long20 = atomikosProperties19.defaultJtaTimeout;
        boolean boolean21 = atomikosProperties19.enableLogging;
        atomikosProperties19.setSerialJtaTransactions(true);
        java.util.Properties properties24 = atomikosProperties19.asProperties();
        java.util.Properties properties25 = null;
        java.util.Properties properties26 = new java.util.Properties(properties25);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties28 = atomikosProperties27.asProperties();
        properties26.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties28);
        java.util.Enumeration<java.lang.Object> objEnumeration30 = properties28.keys();
        java.lang.Object obj33 = properties28.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection34 = properties28.values();
        java.util.Set<java.lang.String> strSet35 = properties28.stringPropertyNames();
        boolean boolean36 = properties24.contains((java.lang.Object) properties28);
        java.lang.Object obj37 = properties3.replace((java.lang.Object) properties9, (java.lang.Object) properties28);
        java.util.Set<java.lang.Object> objSet38 = properties9.keySet();
        java.lang.Object obj41 = properties9.setProperty("", "tmlog");
        java.util.Properties properties42 = null;
        java.util.Properties properties43 = new java.util.Properties(properties42);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties45 = atomikosProperties44.asProperties();
        properties43.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties45);
        java.util.Enumeration<java.lang.Object> objEnumeration47 = properties45.keys();
        java.lang.Object obj50 = properties45.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection51 = properties45.values();
        java.util.Properties properties52 = new java.util.Properties();
        java.lang.Object obj55 = properties52.getOrDefault((java.lang.Object) (short) 1, (java.lang.Object) (-1.0d));
        properties45.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties52);
        java.util.Properties properties57 = new java.util.Properties(properties45);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties58 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean59 = atomikosProperties58.forceShutdownOnVmExit;
        atomikosProperties58.setSerialJtaTransactions(true);
        java.lang.String str62 = atomikosProperties58.logBaseName;
        atomikosProperties58.service = "tmlog";
        boolean boolean65 = properties57.containsValue((java.lang.Object) "tmlog");
        java.util.Properties properties66 = new java.util.Properties(properties57);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties67 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean68 = atomikosProperties67.forceShutdownOnVmExit;
        atomikosProperties67.setSerialJtaTransactions(true);
        java.lang.String str71 = atomikosProperties67.logBaseName;
        atomikosProperties67.service = "tmlog";
        java.util.Properties properties74 = atomikosProperties67.asProperties();
        long long75 = atomikosProperties67.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties76 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties76.setService("");
        atomikosProperties76.setSerialJtaTransactions(true);
        atomikosProperties76.setEnableLogging(false);
        java.lang.Object obj83 = properties57.put((java.lang.Object) atomikosProperties67, (java.lang.Object) false);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj84 = properties9.get(obj83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objCollection6);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNotNull(objSet16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objEnumeration18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10000L + "'", long20 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(properties24);
        org.junit.Assert.assertNotNull(properties28);
        org.junit.Assert.assertNotNull(objEnumeration30);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNotNull(objCollection34);
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNotNull(objSet38);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertNotNull(properties45);
        org.junit.Assert.assertNotNull(objEnumeration47);
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertNotNull(objCollection51);
        org.junit.Assert.assertEquals("'" + obj55 + "' != '" + (-1.0d) + "'", obj55, (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "tmlog" + "'", str62, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "tmlog" + "'", str71, "tmlog");
        org.junit.Assert.assertNotNull(properties74);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 500L + "'", long75 == 500L);
        org.junit.Assert.assertNull(obj83);
    }

    @Test
    public void test0354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0354");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        long long5 = atomikosProperties0.getCheckpointInterval();
        atomikosProperties0.setMaxTimeout(0L);
        atomikosProperties0.setSerialJtaTransactions(false);
        boolean boolean10 = atomikosProperties0.isThreadedTwoPhaseCommit();
        atomikosProperties0.service = "hi!";
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 500L + "'", long5 == 500L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test0355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0355");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        boolean boolean6 = properties3.isEmpty();
        java.util.Properties properties7 = null;
        java.util.Properties properties8 = new java.util.Properties(properties7);
        boolean boolean9 = properties8.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean11 = atomikosProperties10.enableLogging;
        atomikosProperties10.setMaxActives((int) (byte) 1);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties14.setService("");
        atomikosProperties14.setThreadedTwoPhaseCommit(true);
        long long19 = atomikosProperties14.getCheckpointInterval();
        atomikosProperties14.maxTimeout = (-1);
        java.util.Properties properties22 = atomikosProperties14.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long24 = atomikosProperties23.defaultJtaTimeout;
        boolean boolean25 = atomikosProperties23.enableLogging;
        atomikosProperties23.setSerialJtaTransactions(true);
        java.util.Properties properties28 = atomikosProperties23.asProperties();
        properties22.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties28);
        java.util.Enumeration<java.lang.Object> objEnumeration30 = properties22.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean32 = atomikosProperties31.forceShutdownOnVmExit;
        atomikosProperties31.setSerialJtaTransactions(true);
        java.lang.String str35 = atomikosProperties31.logBaseName;
        boolean boolean36 = atomikosProperties31.forceShutdownOnVmExit;
        int int37 = atomikosProperties31.maxActives;
        java.lang.String str38 = atomikosProperties31.logBaseName;
        atomikosProperties31.setForceShutdownOnVmExit(true);
        java.util.Properties properties41 = atomikosProperties31.asProperties();
        boolean boolean42 = atomikosProperties31.isForceShutdownOnVmExit();
        java.util.Properties properties43 = atomikosProperties31.asProperties();
        boolean boolean44 = properties8.replace((java.lang.Object) (byte) 1, (java.lang.Object) properties22, (java.lang.Object) atomikosProperties31);
        java.util.Properties properties45 = new java.util.Properties(properties8);
        java.lang.Object obj46 = properties45.clone();
        java.util.Properties properties47 = null;
        java.util.Properties properties48 = new java.util.Properties(properties47);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties50 = atomikosProperties49.asProperties();
        properties48.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties50);
        java.util.Enumeration<java.lang.Object> objEnumeration52 = properties50.keys();
        java.lang.Object obj55 = properties50.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection56 = properties50.values();
        java.util.Properties properties57 = new java.util.Properties();
        java.lang.Object obj60 = properties57.getOrDefault((java.lang.Object) (short) 1, (java.lang.Object) (-1.0d));
        properties50.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties57);
        java.lang.Object obj62 = properties3.put((java.lang.Object) properties45, (java.lang.Object) properties50);
        java.util.Properties properties63 = new java.util.Properties(properties45);
        java.io.PrintStream printStream64 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties63.list(printStream64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 500L + "'", long19 == 500L);
        org.junit.Assert.assertNotNull(properties22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 10000L + "'", long24 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(properties28);
        org.junit.Assert.assertNotNull(objEnumeration30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "tmlog" + "'", str35, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 50 + "'", int37 == 50);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNotNull(properties41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(properties43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertEquals(obj46.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj46), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj46), "{}");
        org.junit.Assert.assertNotNull(properties50);
        org.junit.Assert.assertNotNull(objEnumeration52);
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertNotNull(objCollection56);
        org.junit.Assert.assertEquals("'" + obj60 + "' != '" + (-1.0d) + "'", obj60, (-1.0d));
        org.junit.Assert.assertNull(obj62);
    }

    @Test
    public void test0356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0356");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties(properties1);
        java.util.Properties properties3 = new java.util.Properties(properties1);
        java.io.OutputStream outputStream4 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.save(outputStream4, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, true=true, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0357");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.checkpointInterval = 1L;
        java.lang.String str4 = atomikosProperties0.getService();
        java.lang.String str5 = atomikosProperties0.getLogBaseName();
        java.util.Properties properties6 = atomikosProperties0.asProperties();
        java.util.Properties properties7 = null;
        java.util.Properties properties8 = new java.util.Properties(properties7);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties10 = atomikosProperties9.asProperties();
        properties8.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        java.util.Properties properties14 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet15 = properties14.keySet();
        boolean boolean16 = properties8.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) properties14);
        java.util.Collection<java.lang.Object> objCollection17 = properties14.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties18.setService("");
        boolean boolean21 = atomikosProperties18.isEnableLogging();
        java.util.Properties properties22 = atomikosProperties18.asProperties();
        properties22.clear();
        java.util.Properties properties24 = null;
        java.util.Properties properties25 = new java.util.Properties(properties24);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties27 = atomikosProperties26.asProperties();
        properties25.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties27);
        java.util.Enumeration<java.lang.Object> objEnumeration29 = properties27.keys();
        java.lang.Object obj31 = properties22.put((java.lang.Object) properties27, (java.lang.Object) (byte) 0);
        java.lang.Object obj32 = properties6.getOrDefault((java.lang.Object) objCollection17, obj31);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean34 = atomikosProperties33.forceShutdownOnVmExit;
        atomikosProperties33.setSerialJtaTransactions(true);
        java.lang.String str37 = atomikosProperties33.logBaseName;
        atomikosProperties33.service = "tmlog";
        atomikosProperties33.setSerialJtaTransactions(false);
        java.util.Properties properties42 = atomikosProperties33.asProperties();
        properties6.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties42);
        java.util.Properties properties44 = null;
        java.util.Properties properties45 = new java.util.Properties(properties44);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties46 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties47 = atomikosProperties46.asProperties();
        properties45.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties47);
        java.util.Enumeration<java.lang.Object> objEnumeration49 = properties47.keys();
        boolean boolean51 = properties47.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties52 = null;
        java.util.Properties properties53 = new java.util.Properties(properties52);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties54 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties55 = atomikosProperties54.asProperties();
        properties53.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties55);
        java.util.Properties properties59 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet60 = properties59.keySet();
        boolean boolean61 = properties53.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) properties59);
        java.util.Enumeration<java.lang.Object> objEnumeration62 = properties53.elements();
        boolean boolean64 = properties47.remove((java.lang.Object) properties53, (java.lang.Object) 50);
        java.util.Properties properties65 = null;
        java.util.Properties properties66 = new java.util.Properties(properties65);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties67 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties68 = atomikosProperties67.asProperties();
        properties66.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties68);
        java.util.Properties properties70 = new java.util.Properties(properties68);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties71 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties72 = atomikosProperties71.asProperties();
        java.util.Set<java.lang.String> strSet73 = properties72.stringPropertyNames();
        properties70.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties72);
        java.util.Properties properties75 = new java.util.Properties(properties72);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties76 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean77 = atomikosProperties76.forceShutdownOnVmExit;
        atomikosProperties76.setSerialJtaTransactions(true);
        java.lang.String str80 = atomikosProperties76.logBaseName;
        boolean boolean81 = atomikosProperties76.forceShutdownOnVmExit;
        int int82 = atomikosProperties76.maxActives;
        java.lang.String str83 = atomikosProperties76.logBaseName;
        atomikosProperties76.setForceShutdownOnVmExit(true);
        java.util.Properties properties86 = atomikosProperties76.asProperties();
        java.lang.Object obj87 = properties47.getOrDefault((java.lang.Object) properties72, (java.lang.Object) properties86);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties88 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean89 = atomikosProperties88.forceShutdownOnVmExit;
        boolean boolean90 = atomikosProperties88.isSerialJtaTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties91 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties91.setService("");
        atomikosProperties91.defaultJtaTimeout = 10;
        boolean boolean96 = properties6.replace((java.lang.Object) properties72, (java.lang.Object) atomikosProperties88, (java.lang.Object) 10);
        java.util.Properties properties97 = atomikosProperties88.asProperties();
        int int98 = properties97.size();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tmlog" + "'", str5, "tmlog");
        org.junit.Assert.assertNotNull(properties6);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertNotNull(objSet15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objCollection17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(properties22);
        org.junit.Assert.assertNotNull(properties27);
        org.junit.Assert.assertNotNull(objEnumeration29);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "tmlog" + "'", str37, "tmlog");
        org.junit.Assert.assertNotNull(properties42);
        org.junit.Assert.assertNotNull(properties47);
        org.junit.Assert.assertNotNull(objEnumeration49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(properties55);
        org.junit.Assert.assertNotNull(objSet60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(objEnumeration62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(properties68);
        org.junit.Assert.assertNotNull(properties72);
        org.junit.Assert.assertNotNull(strSet73);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "tmlog" + "'", str80, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 50 + "'", int82 == 50);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "tmlog" + "'", str83, "tmlog");
        org.junit.Assert.assertNotNull(properties86);
        org.junit.Assert.assertNotNull(obj87);
// flaky:         org.junit.Assert.assertEquals(obj87.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=true, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj87), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=true, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj87), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=true, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(properties97);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 9 + "'", int98 == 9);
    }

    @Test
    public void test0358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0358");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        boolean boolean7 = properties3.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        java.util.Enumeration<java.lang.Object> objEnumeration13 = properties11.keys();
        java.lang.Object obj16 = properties11.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection17 = properties11.values();
        boolean boolean18 = properties3.containsKey((java.lang.Object) properties11);
        java.util.Properties properties19 = new java.util.Properties(properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long21 = atomikosProperties20.defaultJtaTimeout;
        boolean boolean22 = atomikosProperties20.enableLogging;
        atomikosProperties20.setSerialJtaTransactions(true);
        java.util.Properties properties25 = atomikosProperties20.asProperties();
        java.util.Properties properties26 = atomikosProperties20.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean28 = atomikosProperties27.forceShutdownOnVmExit;
        atomikosProperties27.setSerialJtaTransactions(true);
        java.lang.String str31 = atomikosProperties27.logBaseName;
        boolean boolean32 = atomikosProperties27.forceShutdownOnVmExit;
        int int33 = atomikosProperties27.maxActives;
        java.lang.String str34 = atomikosProperties27.logBaseName;
        atomikosProperties27.setForceShutdownOnVmExit(true);
        java.util.Properties properties37 = atomikosProperties27.asProperties();
        boolean boolean38 = atomikosProperties27.isForceShutdownOnVmExit();
        java.util.Properties properties39 = atomikosProperties27.asProperties();
        java.lang.Object obj40 = properties3.replace((java.lang.Object) atomikosProperties20, (java.lang.Object) atomikosProperties27);
        java.util.Properties properties41 = new java.util.Properties(properties3);
        java.io.OutputStream outputStream42 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.storeToXML(outputStream42, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, true=true, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNotNull(objEnumeration13);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(objCollection17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10000L + "'", long21 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertNotNull(properties26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "tmlog" + "'", str31, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 50 + "'", int33 == 50);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "tmlog" + "'", str34, "tmlog");
        org.junit.Assert.assertNotNull(properties37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(properties39);
        org.junit.Assert.assertNull(obj40);
    }

    @Test
    public void test0359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0359");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.setSerialJtaTransactions(true);
        java.lang.String str4 = atomikosProperties0.logBaseName;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties6 = atomikosProperties5.asProperties();
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties9.setService("");
        atomikosProperties9.setThreadedTwoPhaseCommit(true);
        long long14 = atomikosProperties9.getCheckpointInterval();
        boolean boolean15 = atomikosProperties9.threadedTwoPhaseCommit;
        atomikosProperties0.set(properties7, "tmlog", (java.lang.Object) atomikosProperties9);
        boolean boolean17 = atomikosProperties9.forceShutdownOnVmExit;
        atomikosProperties9.setSerialJtaTransactions(false);
        java.util.Properties properties20 = null;
        java.util.Properties properties21 = new java.util.Properties(properties20);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties23 = atomikosProperties22.asProperties();
        properties21.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties23);
        java.util.Properties properties25 = new java.util.Properties(properties23);
        java.util.Collection<java.lang.Object> objCollection26 = properties23.values();
        java.util.Properties properties27 = new java.util.Properties(properties23);
        int int28 = properties23.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean31 = atomikosProperties30.forceShutdownOnVmExit;
        atomikosProperties30.setSerialJtaTransactions(true);
        java.lang.String str34 = atomikosProperties30.logBaseName;
        boolean boolean35 = atomikosProperties30.forceShutdownOnVmExit;
        int int36 = atomikosProperties30.maxActives;
        java.lang.String str37 = atomikosProperties30.logBaseName;
        atomikosProperties30.transactionManagerUniqueName = "hi!";
        atomikosProperties30.setMaxActives((int) (short) 10);
        java.util.Properties properties42 = atomikosProperties30.asProperties();
        java.util.Properties properties43 = atomikosProperties30.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties44.setService("");
        atomikosProperties44.setSerialJtaTransactions(true);
        java.util.Properties properties49 = atomikosProperties44.asProperties();
        properties49.clear();
        java.util.Properties properties52 = null;
        java.util.Properties properties53 = new java.util.Properties(properties52);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties54 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties55 = atomikosProperties54.asProperties();
        properties53.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties55);
        java.util.Enumeration<java.lang.Object> objEnumeration57 = properties55.keys();
        boolean boolean59 = properties55.containsValue((java.lang.Object) 0.0f);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties61 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long62 = atomikosProperties61.defaultJtaTimeout;
        boolean boolean63 = atomikosProperties61.enableLogging;
        atomikosProperties61.setSerialJtaTransactions(true);
        java.lang.Object obj66 = properties55.putIfAbsent((java.lang.Object) 100L, (java.lang.Object) true);
        boolean boolean67 = properties49.remove((java.lang.Object) 1.0f, (java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties68 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties68.setService("");
        atomikosProperties68.setSerialJtaTransactions(true);
        java.util.Properties properties73 = atomikosProperties68.asProperties();
        properties73.clear();
        java.lang.Object obj76 = properties49.put((java.lang.Object) properties73, (java.lang.Object) (short) 1);
        java.util.Enumeration<java.lang.Object> objEnumeration77 = properties49.elements();
        java.util.Set<java.lang.String> strSet78 = properties49.stringPropertyNames();
        java.lang.Object obj80 = properties43.put((java.lang.Object) strSet78, (java.lang.Object) (-1.0d));
        java.util.Set<java.lang.String> strSet81 = properties43.stringPropertyNames();
        atomikosProperties9.set(properties23, "hi!", (java.lang.Object) properties43);
        atomikosProperties9.setEnableLogging(false);
        long long85 = atomikosProperties9.maxTimeout;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tmlog" + "'", str4, "tmlog");
        org.junit.Assert.assertNotNull(properties6);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 500L + "'", long14 == 500L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(properties23);
        org.junit.Assert.assertNotNull(objCollection26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 9 + "'", int28 == 9);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "tmlog" + "'", str34, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 50 + "'", int36 == 50);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "tmlog" + "'", str37, "tmlog");
        org.junit.Assert.assertNotNull(properties42);
        org.junit.Assert.assertNotNull(properties43);
        org.junit.Assert.assertNotNull(properties49);
        org.junit.Assert.assertNotNull(properties55);
        org.junit.Assert.assertNotNull(objEnumeration57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 10000L + "'", long62 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(properties73);
        org.junit.Assert.assertNull(obj76);
        org.junit.Assert.assertNotNull(objEnumeration77);
        org.junit.Assert.assertNotNull(strSet78);
        org.junit.Assert.assertNull(obj80);
        org.junit.Assert.assertNotNull(strSet81);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 300000L + "'", long85 == 300000L);
    }

    @Test
    public void test0360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0360");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Properties properties5 = new java.util.Properties(properties3);
        java.util.Properties properties6 = new java.util.Properties(properties3);
        java.lang.String str8 = properties3.getProperty("hi!");
        java.util.Properties properties9 = null;
        java.util.Properties properties10 = new java.util.Properties(properties9);
        boolean boolean11 = properties10.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean13 = atomikosProperties12.enableLogging;
        atomikosProperties12.setMaxActives((int) (byte) 1);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties16.setService("");
        atomikosProperties16.setThreadedTwoPhaseCommit(true);
        long long21 = atomikosProperties16.getCheckpointInterval();
        atomikosProperties16.maxTimeout = (-1);
        java.util.Properties properties24 = atomikosProperties16.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long26 = atomikosProperties25.defaultJtaTimeout;
        boolean boolean27 = atomikosProperties25.enableLogging;
        atomikosProperties25.setSerialJtaTransactions(true);
        java.util.Properties properties30 = atomikosProperties25.asProperties();
        properties24.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties30);
        java.util.Enumeration<java.lang.Object> objEnumeration32 = properties24.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean34 = atomikosProperties33.forceShutdownOnVmExit;
        atomikosProperties33.setSerialJtaTransactions(true);
        java.lang.String str37 = atomikosProperties33.logBaseName;
        boolean boolean38 = atomikosProperties33.forceShutdownOnVmExit;
        int int39 = atomikosProperties33.maxActives;
        java.lang.String str40 = atomikosProperties33.logBaseName;
        atomikosProperties33.setForceShutdownOnVmExit(true);
        java.util.Properties properties43 = atomikosProperties33.asProperties();
        boolean boolean44 = atomikosProperties33.isForceShutdownOnVmExit();
        java.util.Properties properties45 = atomikosProperties33.asProperties();
        boolean boolean46 = properties10.replace((java.lang.Object) (byte) 1, (java.lang.Object) properties24, (java.lang.Object) atomikosProperties33);
        java.util.Properties properties47 = new java.util.Properties(properties10);
        boolean boolean48 = properties3.equals((java.lang.Object) properties10);
        java.util.Enumeration<java.lang.Object> objEnumeration49 = properties3.elements();
        java.util.Properties properties50 = null;
        java.util.Properties properties51 = new java.util.Properties(properties50);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties52 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties53 = atomikosProperties52.asProperties();
        properties51.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties53);
        java.util.Properties properties55 = new java.util.Properties(properties53);
        java.util.Properties properties56 = new java.util.Properties(properties55);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties57 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties57.setService("");
        atomikosProperties57.setSerialJtaTransactions(true);
        atomikosProperties57.setEnableLogging(false);
        atomikosProperties57.logBaseName = "tmlog";
        int int66 = atomikosProperties57.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties67 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties67.setService("");
        atomikosProperties67.setSerialJtaTransactions(true);
        atomikosProperties67.setEnableLogging(false);
        atomikosProperties67.logBaseName = "tmlog";
        atomikosProperties67.maxActives = 1;
        atomikosProperties67.setEnableLogging(true);
        java.lang.String str80 = atomikosProperties67.service;
        atomikosProperties67.setCheckpointInterval((long) (byte) 0);
        long long83 = atomikosProperties67.getDefaultJtaTimeout();
        boolean boolean84 = properties56.remove((java.lang.Object) atomikosProperties57, (java.lang.Object) long83);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties85 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean86 = atomikosProperties85.forceShutdownOnVmExit;
        atomikosProperties85.setSerialJtaTransactions(true);
        java.lang.String str89 = atomikosProperties85.logBaseName;
        boolean boolean90 = atomikosProperties85.forceShutdownOnVmExit;
        int int91 = atomikosProperties85.maxActives;
        java.lang.String str92 = atomikosProperties85.logBaseName;
        atomikosProperties85.transactionManagerUniqueName = "hi!";
        java.lang.Object obj95 = properties3.put((java.lang.Object) long83, (java.lang.Object) "hi!");
        java.io.Reader reader96 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.load(reader96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 500L + "'", long21 == 500L);
        org.junit.Assert.assertNotNull(properties24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 10000L + "'", long26 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(properties30);
        org.junit.Assert.assertNotNull(objEnumeration32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "tmlog" + "'", str37, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 50 + "'", int39 == 50);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "tmlog" + "'", str40, "tmlog");
        org.junit.Assert.assertNotNull(properties43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(properties45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(objEnumeration49);
        org.junit.Assert.assertNotNull(properties53);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 50 + "'", int66 == 50);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 10000L + "'", long83 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "tmlog" + "'", str89, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 50 + "'", int91 == 50);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "tmlog" + "'", str92, "tmlog");
        org.junit.Assert.assertNull(obj95);
    }

    @Test
    public void test0361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0361");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        boolean boolean3 = atomikosProperties0.isEnableLogging();
        java.util.Properties properties4 = atomikosProperties0.asProperties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties6.setService("");
        boolean boolean9 = atomikosProperties6.isEnableLogging();
        java.util.Properties properties10 = atomikosProperties6.asProperties();
        atomikosProperties6.setSerialJtaTransactions(false);
        java.lang.String str13 = atomikosProperties6.getLogBaseName();
        atomikosProperties6.setTransactionManagerUniqueName("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties16.defaultJtaTimeout = (byte) -1;
        java.util.Properties properties19 = atomikosProperties16.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean21 = atomikosProperties20.forceShutdownOnVmExit;
        atomikosProperties20.setSerialJtaTransactions(true);
        java.lang.String str24 = atomikosProperties20.logBaseName;
        atomikosProperties20.service = "tmlog";
        java.util.Properties properties27 = atomikosProperties20.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean29 = atomikosProperties28.forceShutdownOnVmExit;
        java.lang.String str30 = atomikosProperties28.getLogBaseDir();
        java.lang.Object obj31 = properties19.getOrDefault((java.lang.Object) atomikosProperties20, (java.lang.Object) str30);
        java.lang.Object obj32 = properties4.put((java.lang.Object) atomikosProperties6, (java.lang.Object) atomikosProperties20);
        atomikosProperties6.logBaseDir = "hi!";
        java.util.Properties properties35 = null;
        java.util.Properties properties36 = new java.util.Properties(properties35);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties38 = atomikosProperties37.asProperties();
        properties36.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties38);
        java.util.Enumeration<java.lang.Object> objEnumeration40 = properties38.keys();
        java.lang.Object obj43 = properties38.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection44 = properties38.values();
        java.util.Properties properties45 = new java.util.Properties();
        java.lang.Object obj48 = properties45.getOrDefault((java.lang.Object) (short) 1, (java.lang.Object) (-1.0d));
        properties38.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties45);
        java.util.Properties properties50 = new java.util.Properties(properties38);
        java.lang.String str51 = properties38.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties52 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties52.setService("");
        atomikosProperties52.setThreadedTwoPhaseCommit(true);
        long long57 = atomikosProperties52.getCheckpointInterval();
        atomikosProperties52.maxTimeout = (-1);
        java.util.Properties properties60 = atomikosProperties52.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties61 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long62 = atomikosProperties61.defaultJtaTimeout;
        boolean boolean63 = atomikosProperties61.enableLogging;
        atomikosProperties61.setSerialJtaTransactions(true);
        java.util.Properties properties66 = atomikosProperties61.asProperties();
        properties60.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties66);
        java.util.Enumeration<java.lang.Object> objEnumeration68 = properties60.elements();
        java.util.Properties properties69 = new java.util.Properties(properties60);
        java.lang.Object obj70 = properties38.get((java.lang.Object) properties60);
        java.util.Set<java.lang.String> strSet71 = properties38.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties73 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean74 = atomikosProperties73.forceShutdownOnVmExit;
        atomikosProperties73.setSerialJtaTransactions(true);
        java.lang.String str77 = atomikosProperties73.logBaseName;
        boolean boolean78 = atomikosProperties73.forceShutdownOnVmExit;
        atomikosProperties73.logBaseName = "tmlog";
        atomikosProperties73.setCheckpointInterval((long) 100);
        atomikosProperties73.setLogBaseName("");
        atomikosProperties73.setLogBaseDir("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Properties properties87 = atomikosProperties73.asProperties();
        atomikosProperties6.set(properties38, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, 100=true, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", (java.lang.Object) atomikosProperties73);
        atomikosProperties6.setMaxTimeout((long) 1);
        java.lang.Class<?> wildcardClass91 = atomikosProperties6.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(properties4);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNotNull(properties19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "tmlog" + "'", str24, "tmlog");
        org.junit.Assert.assertNotNull(properties27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNotNull(properties38);
        org.junit.Assert.assertNotNull(objEnumeration40);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNotNull(objCollection44);
        org.junit.Assert.assertEquals("'" + obj48 + "' != '" + (-1.0d) + "'", obj48, (-1.0d));
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str51, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 500L + "'", long57 == 500L);
        org.junit.Assert.assertNotNull(properties60);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 10000L + "'", long62 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(properties66);
        org.junit.Assert.assertNotNull(objEnumeration68);
        org.junit.Assert.assertNull(obj70);
        org.junit.Assert.assertNotNull(strSet71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "tmlog" + "'", str77, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(properties87);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test0362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0362");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Properties properties7 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet8 = properties7.keySet();
        boolean boolean9 = properties1.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) properties7);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet10 = properties1.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties11.setService("");
        atomikosProperties11.setThreadedTwoPhaseCommit(true);
        long long16 = atomikosProperties11.getCheckpointInterval();
        boolean boolean17 = atomikosProperties11.threadedTwoPhaseCommit;
        atomikosProperties11.transactionManagerUniqueName = "tmlog";
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties20.setService("");
        boolean boolean23 = atomikosProperties20.isEnableLogging();
        java.util.Properties properties24 = atomikosProperties20.asProperties();
        java.util.Properties properties25 = new java.util.Properties(properties24);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties26.setService("");
        boolean boolean29 = atomikosProperties26.isEnableLogging();
        java.util.Properties properties30 = atomikosProperties26.asProperties();
        atomikosProperties26.setSerialJtaTransactions(false);
        java.lang.String str33 = atomikosProperties26.getLogBaseName();
        atomikosProperties26.setTransactionManagerUniqueName("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties36.defaultJtaTimeout = (byte) -1;
        java.util.Properties properties39 = atomikosProperties36.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean41 = atomikosProperties40.forceShutdownOnVmExit;
        atomikosProperties40.setSerialJtaTransactions(true);
        java.lang.String str44 = atomikosProperties40.logBaseName;
        atomikosProperties40.service = "tmlog";
        java.util.Properties properties47 = atomikosProperties40.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties48 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean49 = atomikosProperties48.forceShutdownOnVmExit;
        java.lang.String str50 = atomikosProperties48.getLogBaseDir();
        java.lang.Object obj51 = properties39.getOrDefault((java.lang.Object) atomikosProperties40, (java.lang.Object) str50);
        java.lang.Object obj52 = properties24.put((java.lang.Object) atomikosProperties26, (java.lang.Object) atomikosProperties40);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties53 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean54 = atomikosProperties53.forceShutdownOnVmExit;
        atomikosProperties53.checkpointInterval = 300000L;
        java.util.Properties properties57 = null;
        java.util.Properties properties58 = new java.util.Properties(properties57);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties59 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties60 = atomikosProperties59.asProperties();
        properties58.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties60);
        java.util.Enumeration<java.lang.Object> objEnumeration62 = properties60.keys();
        boolean boolean64 = properties60.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties65 = null;
        java.util.Properties properties66 = new java.util.Properties(properties65);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties67 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties68 = atomikosProperties67.asProperties();
        properties66.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties68);
        java.util.Properties properties72 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet73 = properties72.keySet();
        boolean boolean74 = properties66.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) properties72);
        java.util.Enumeration<java.lang.Object> objEnumeration75 = properties66.elements();
        boolean boolean77 = properties60.remove((java.lang.Object) properties66, (java.lang.Object) 50);
        java.util.Properties properties79 = null;
        java.util.Properties properties80 = new java.util.Properties(properties79);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties81 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties82 = atomikosProperties81.asProperties();
        properties80.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties82);
        java.util.Properties properties84 = new java.util.Properties(properties82);
        java.util.Collection<java.lang.Object> objCollection85 = properties82.values();
        atomikosProperties53.set(properties66, "{}", (java.lang.Object) objCollection85);
        boolean boolean87 = properties1.replace((java.lang.Object) "tmlog", (java.lang.Object) atomikosProperties26, (java.lang.Object) atomikosProperties53);
        java.util.Properties properties88 = new java.util.Properties(properties1);
        java.util.Properties properties89 = new java.util.Properties(properties88);
        java.util.Enumeration<java.lang.Object> objEnumeration90 = properties88.keys();
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(objEntrySet10);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 500L + "'", long16 == 500L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(properties24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(properties30);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "tmlog" + "'", str33, "tmlog");
        org.junit.Assert.assertNotNull(properties39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "tmlog" + "'", str44, "tmlog");
        org.junit.Assert.assertNotNull(properties47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(properties60);
        org.junit.Assert.assertNotNull(objEnumeration62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(properties68);
        org.junit.Assert.assertNotNull(objSet73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(objEnumeration75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(properties82);
        org.junit.Assert.assertNotNull(objCollection85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(objEnumeration90);
    }

    @Test
    public void test0363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0363");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.setSerialJtaTransactions(true);
        java.lang.String str4 = atomikosProperties0.logBaseName;
        atomikosProperties0.service = "tmlog";
        atomikosProperties0.defaultJtaTimeout = '4';
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tmlog" + "'", str4, "tmlog");
    }

    @Test
    public void test0364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0364");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        atomikosProperties0.setSerialJtaTransactions(true);
        atomikosProperties0.setEnableLogging(false);
        atomikosProperties0.logBaseName = "tmlog";
        atomikosProperties0.maxActives = 1;
        atomikosProperties0.setEnableLogging(true);
        long long13 = atomikosProperties0.getMaxTimeout();
        java.lang.String str14 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.setService("hi!");
        java.lang.String str17 = atomikosProperties0.logBaseName;
        boolean boolean18 = atomikosProperties0.isThreadedTwoPhaseCommit();
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 300000L + "'", long13 == 300000L);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0365");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.serialJtaTransactions = false;
        java.util.Properties properties4 = atomikosProperties0.asProperties();
        long long5 = atomikosProperties0.getDefaultJtaTimeout();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(properties4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 10000L + "'", long5 == 10000L);
    }

    @Test
    public void test0366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0366");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.checkpointInterval = 1L;
        boolean boolean4 = atomikosProperties0.forceShutdownOnVmExit;
        java.lang.String str5 = atomikosProperties0.getLogBaseName();
        boolean boolean6 = atomikosProperties0.enableLogging;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tmlog" + "'", str5, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test0367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0367");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        boolean boolean7 = properties3.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        java.util.Properties properties15 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet16 = properties15.keySet();
        boolean boolean17 = properties9.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) properties15);
        java.util.Enumeration<java.lang.Object> objEnumeration18 = properties9.elements();
        boolean boolean20 = properties3.remove((java.lang.Object) properties9, (java.lang.Object) 50);
        java.io.PrintStream printStream21 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties9.list(printStream21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNotNull(objSet16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objEnumeration18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0368");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        atomikosProperties0.setSerialJtaTransactions(true);
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        java.util.Properties properties6 = atomikosProperties0.asProperties();
        long long7 = atomikosProperties0.defaultJtaTimeout;
        atomikosProperties0.setLogBaseName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertNotNull(properties6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
    }

    @Test
    public void test0369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0369");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.defaultJtaTimeout;
        boolean boolean2 = atomikosProperties0.enableLogging;
        atomikosProperties0.setSerialJtaTransactions(true);
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        atomikosProperties0.service = "tmlog";
        atomikosProperties0.forceShutdownOnVmExit = true;
        boolean boolean10 = atomikosProperties0.isSerialJtaTransactions();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 10000L + "'", long1 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test0370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0370");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        long long2 = atomikosProperties0.getDefaultJtaTimeout();
        long long3 = atomikosProperties0.getDefaultJtaTimeout();
        boolean boolean4 = atomikosProperties0.serialJtaTransactions;
        boolean boolean5 = atomikosProperties0.isForceShutdownOnVmExit();
        java.lang.String str6 = atomikosProperties0.getLogBaseName();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10000L + "'", long2 == 10000L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 10000L + "'", long3 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
    }

    @Test
    public void test0371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0371");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.checkpointInterval = 1L;
        java.lang.String str4 = atomikosProperties0.getService();
        java.lang.String str5 = atomikosProperties0.getLogBaseName();
        java.util.Properties properties6 = atomikosProperties0.asProperties();
        java.util.Properties properties7 = null;
        java.util.Properties properties8 = new java.util.Properties(properties7);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties10 = atomikosProperties9.asProperties();
        properties8.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        java.util.Properties properties14 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet15 = properties14.keySet();
        boolean boolean16 = properties8.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) properties14);
        java.util.Collection<java.lang.Object> objCollection17 = properties14.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties18.setService("");
        boolean boolean21 = atomikosProperties18.isEnableLogging();
        java.util.Properties properties22 = atomikosProperties18.asProperties();
        properties22.clear();
        java.util.Properties properties24 = null;
        java.util.Properties properties25 = new java.util.Properties(properties24);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties27 = atomikosProperties26.asProperties();
        properties25.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties27);
        java.util.Enumeration<java.lang.Object> objEnumeration29 = properties27.keys();
        java.lang.Object obj31 = properties22.put((java.lang.Object) properties27, (java.lang.Object) (byte) 0);
        java.lang.Object obj32 = properties6.getOrDefault((java.lang.Object) objCollection17, obj31);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean34 = atomikosProperties33.forceShutdownOnVmExit;
        atomikosProperties33.setSerialJtaTransactions(true);
        java.lang.String str37 = atomikosProperties33.logBaseName;
        atomikosProperties33.service = "tmlog";
        atomikosProperties33.setSerialJtaTransactions(false);
        java.util.Properties properties42 = atomikosProperties33.asProperties();
        properties6.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties42);
        java.util.Properties properties44 = new java.util.Properties(properties6);
        java.io.InputStream inputStream45 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties44.loadFromXML(inputStream45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tmlog" + "'", str5, "tmlog");
        org.junit.Assert.assertNotNull(properties6);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertNotNull(objSet15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objCollection17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(properties22);
        org.junit.Assert.assertNotNull(properties27);
        org.junit.Assert.assertNotNull(objEnumeration29);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "tmlog" + "'", str37, "tmlog");
        org.junit.Assert.assertNotNull(properties42);
    }

    @Test
    public void test0372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0372");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Properties properties5 = new java.util.Properties(properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties7 = atomikosProperties6.asProperties();
        java.util.Set<java.lang.String> strSet8 = properties7.stringPropertyNames();
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties7);
        properties7.clear();
        java.util.Set<java.lang.Object> objSet11 = properties7.keySet();
        properties7.clear();
        java.util.Properties properties13 = new java.util.Properties(properties7);
        java.lang.Object obj14 = properties7.clone();
        java.util.Properties properties15 = null;
        java.util.Properties properties16 = new java.util.Properties(properties15);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties18 = atomikosProperties17.asProperties();
        properties16.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties18);
        java.util.Enumeration<java.lang.Object> objEnumeration20 = properties18.keys();
        boolean boolean22 = properties18.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties23 = null;
        java.util.Properties properties24 = new java.util.Properties(properties23);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties26 = atomikosProperties25.asProperties();
        properties24.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties26);
        java.util.Properties properties30 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet31 = properties30.keySet();
        boolean boolean32 = properties24.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) properties30);
        java.util.Enumeration<java.lang.Object> objEnumeration33 = properties24.elements();
        boolean boolean35 = properties18.remove((java.lang.Object) properties24, (java.lang.Object) 50);
        java.util.Properties properties36 = null;
        java.util.Properties properties37 = new java.util.Properties(properties36);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties39 = atomikosProperties38.asProperties();
        properties37.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties39);
        java.util.Properties properties41 = new java.util.Properties(properties39);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties42.defaultJtaTimeout = (byte) -1;
        java.util.Properties properties45 = atomikosProperties42.asProperties();
        boolean boolean46 = properties39.contains((java.lang.Object) properties45);
        java.util.Properties properties47 = null;
        java.util.Properties properties48 = new java.util.Properties(properties47);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties50 = atomikosProperties49.asProperties();
        properties48.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties50);
        java.util.Enumeration<java.lang.Object> objEnumeration52 = properties50.keys();
        boolean boolean54 = properties50.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties55 = new java.util.Properties(properties50);
        java.lang.Object obj56 = properties24.replace((java.lang.Object) properties45, (java.lang.Object) properties55);
        properties55.clear();
        boolean boolean58 = properties55.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties59 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties59.setService("");
        atomikosProperties59.setSerialJtaTransactions(true);
        atomikosProperties59.setEnableLogging(false);
        java.lang.String str66 = atomikosProperties59.logBaseName;
        int int67 = atomikosProperties59.maxActives;
        atomikosProperties59.setEnableLogging(false);
        java.util.Properties properties70 = atomikosProperties59.asProperties();
        java.util.Properties properties71 = null;
        java.util.Properties properties72 = new java.util.Properties(properties71);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties73 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties74 = atomikosProperties73.asProperties();
        properties72.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties74);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties76 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties76.setService("");
        atomikosProperties76.setThreadedTwoPhaseCommit(true);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties81 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties81.setService("");
        atomikosProperties81.setSerialJtaTransactions(true);
        atomikosProperties81.setEnableLogging(false);
        java.lang.String str88 = atomikosProperties81.logBaseName;
        java.lang.Object obj89 = properties74.replace((java.lang.Object) atomikosProperties76, (java.lang.Object) atomikosProperties81);
        java.util.Properties properties90 = atomikosProperties81.asProperties();
        atomikosProperties81.setLogBaseName("");
        boolean boolean93 = properties7.replace((java.lang.Object) properties55, (java.lang.Object) atomikosProperties59, (java.lang.Object) "");
        java.util.Collection<java.lang.Object> objCollection94 = properties55.values();
        java.lang.Object obj97 = properties55.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=true, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=tmlog, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "tmlog");
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(objSet11);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "{}");
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertNotNull(objEnumeration20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(properties26);
        org.junit.Assert.assertNotNull(objSet31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objEnumeration33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(properties39);
        org.junit.Assert.assertNotNull(properties45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(properties50);
        org.junit.Assert.assertNotNull(objEnumeration52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "tmlog" + "'", str66, "tmlog");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 50 + "'", int67 == 50);
        org.junit.Assert.assertNotNull(properties70);
        org.junit.Assert.assertNotNull(properties74);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "tmlog" + "'", str88, "tmlog");
        org.junit.Assert.assertNull(obj89);
        org.junit.Assert.assertNotNull(properties90);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(objCollection94);
        org.junit.Assert.assertNull(obj97);
    }

    @Test
    public void test0373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0373");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties(properties1);
        java.util.Properties properties3 = new java.util.Properties(properties2);
        java.util.Properties properties4 = null;
        java.util.Properties properties5 = new java.util.Properties(properties4);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties7 = atomikosProperties6.asProperties();
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties7);
        java.util.Enumeration<java.lang.Object> objEnumeration9 = properties7.keys();
        boolean boolean11 = properties7.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties12 = null;
        java.util.Properties properties13 = new java.util.Properties(properties12);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties15 = atomikosProperties14.asProperties();
        properties13.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties15);
        java.util.Enumeration<java.lang.Object> objEnumeration17 = properties15.keys();
        java.lang.Object obj20 = properties15.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection21 = properties15.values();
        boolean boolean22 = properties7.containsKey((java.lang.Object) properties15);
        java.util.Properties properties23 = new java.util.Properties(properties7);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean25 = atomikosProperties24.forceShutdownOnVmExit;
        atomikosProperties24.setSerialJtaTransactions(true);
        java.lang.String str28 = atomikosProperties24.logBaseName;
        boolean boolean29 = atomikosProperties24.forceShutdownOnVmExit;
        atomikosProperties24.logBaseName = "tmlog";
        atomikosProperties24.enableLogging = true;
        long long34 = atomikosProperties24.getDefaultJtaTimeout();
        boolean boolean35 = atomikosProperties24.isForceShutdownOnVmExit();
        boolean boolean36 = properties2.remove((java.lang.Object) properties7, (java.lang.Object) boolean35);
        java.io.Writer writer37 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties2.store(writer37, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, tmlog=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNotNull(objEnumeration9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertNotNull(objEnumeration17);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNotNull(objCollection21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "tmlog" + "'", str28, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 10000L + "'", long34 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test0374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0374");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        atomikosProperties0.setSerialJtaTransactions(true);
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        properties5.clear();
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        java.util.Enumeration<java.lang.Object> objEnumeration13 = properties11.keys();
        boolean boolean15 = properties11.containsValue((java.lang.Object) 0.0f);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long18 = atomikosProperties17.defaultJtaTimeout;
        boolean boolean19 = atomikosProperties17.enableLogging;
        atomikosProperties17.setSerialJtaTransactions(true);
        java.lang.Object obj22 = properties11.putIfAbsent((java.lang.Object) 100L, (java.lang.Object) true);
        boolean boolean23 = properties5.remove((java.lang.Object) 1.0f, (java.lang.Object) 100L);
        java.util.Properties properties24 = null;
        java.util.Properties properties25 = new java.util.Properties(properties24);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties27 = atomikosProperties26.asProperties();
        properties25.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties27);
        java.util.Enumeration<java.lang.Object> objEnumeration29 = properties27.keys();
        java.lang.Object obj32 = properties27.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Properties properties33 = new java.util.Properties(properties27);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties35.setService("");
        atomikosProperties35.setSerialJtaTransactions(true);
        java.util.Properties properties40 = atomikosProperties35.asProperties();
        properties40.clear();
        boolean boolean42 = properties5.replace((java.lang.Object) properties27, (java.lang.Object) 0.0d, (java.lang.Object) properties40);
        java.util.Enumeration<java.lang.Object> objEnumeration43 = properties5.elements();
        java.util.Properties properties44 = null;
        java.util.Properties properties45 = new java.util.Properties(properties44);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties46 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties47 = atomikosProperties46.asProperties();
        properties45.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties47);
        java.util.Properties properties49 = new java.util.Properties(properties47);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties51 = atomikosProperties50.asProperties();
        java.util.Set<java.lang.String> strSet52 = properties51.stringPropertyNames();
        properties49.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties51);
        java.util.Enumeration<?> wildcardEnumeration54 = properties51.propertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties55 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties55.setService("");
        boolean boolean58 = atomikosProperties55.isEnableLogging();
        java.util.Properties properties59 = atomikosProperties55.asProperties();
        properties59.clear();
        java.util.Set<java.lang.Object> objSet61 = properties59.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties62 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean63 = atomikosProperties62.enableLogging;
        atomikosProperties62.setMaxActives((int) (byte) 1);
        atomikosProperties62.enableLogging = false;
        long long68 = atomikosProperties62.checkpointInterval;
        boolean boolean69 = properties51.remove((java.lang.Object) properties59, (java.lang.Object) atomikosProperties62);
        java.util.Properties properties70 = atomikosProperties62.asProperties();
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties70);
        java.util.Properties properties72 = new java.util.Properties(properties70);
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNotNull(objEnumeration13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10000L + "'", long18 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(properties27);
        org.junit.Assert.assertNotNull(objEnumeration29);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNotNull(properties40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(objEnumeration43);
        org.junit.Assert.assertNotNull(properties47);
        org.junit.Assert.assertNotNull(properties51);
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertNotNull(wildcardEnumeration54);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(properties59);
        org.junit.Assert.assertNotNull(objSet61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 500L + "'", long68 == 500L);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(properties70);
    }

    @Test
    public void test0375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0375");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        atomikosProperties0.setSerialJtaTransactions(true);
        atomikosProperties0.setEnableLogging(false);
        boolean boolean7 = atomikosProperties0.forceShutdownOnVmExit;
        boolean boolean8 = atomikosProperties0.threadedTwoPhaseCommit;
        java.util.Properties properties9 = atomikosProperties0.asProperties();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet10 = properties9.entrySet();
        java.util.Properties properties11 = new java.util.Properties(properties9);
        java.lang.String str12 = properties11.toString();
        java.io.Reader reader13 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties11.load(reader13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertNotNull(objEntrySet10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "{}" + "'", str12, "{}");
    }

    @Test
    public void test0376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0376");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        boolean boolean7 = properties3.containsValue((java.lang.Object) 0.0f);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long10 = atomikosProperties9.defaultJtaTimeout;
        boolean boolean11 = atomikosProperties9.enableLogging;
        atomikosProperties9.setSerialJtaTransactions(true);
        java.lang.Object obj14 = properties3.putIfAbsent((java.lang.Object) 100L, (java.lang.Object) true);
        java.util.Properties properties15 = new java.util.Properties(properties3);
        java.io.Writer writer16 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties15.store(writer16, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=true, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=tmlog, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(obj14);
    }

    @Test
    public void test0377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0377");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        boolean boolean3 = atomikosProperties0.isEnableLogging();
        java.util.Properties properties4 = atomikosProperties0.asProperties();
        atomikosProperties0.setDefaultJtaTimeout(300000L);
        atomikosProperties0.setMaxTimeout((long) ' ');
        atomikosProperties0.transactionManagerUniqueName = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties0.setCheckpointInterval(500L);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(properties4);
    }

    @Test
    public void test0378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0378");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties(properties1);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties3 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties3.setService("");
        atomikosProperties3.setSerialJtaTransactions(true);
        atomikosProperties3.setEnableLogging(false);
        java.lang.String str10 = atomikosProperties3.logBaseName;
        boolean boolean11 = atomikosProperties3.isSerialJtaTransactions();
        boolean boolean12 = properties2.containsValue((java.lang.Object) boolean11);
        java.io.InputStream inputStream13 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties2.load(inputStream13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "tmlog" + "'", str10, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0379");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.checkpointInterval = 1L;
        boolean boolean4 = atomikosProperties0.forceShutdownOnVmExit;
        long long5 = atomikosProperties0.defaultJtaTimeout;
        java.util.Properties properties6 = atomikosProperties0.asProperties();
        java.io.PrintStream printStream7 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties6.list(printStream7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 10000L + "'", long5 == 10000L);
        org.junit.Assert.assertNotNull(properties6);
    }

    @Test
    public void test0380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0380");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        atomikosProperties0.setSerialJtaTransactions(true);
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        properties5.clear();
        java.util.Properties properties7 = null;
        java.util.Properties properties8 = new java.util.Properties(properties7);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties10 = atomikosProperties9.asProperties();
        properties8.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        java.util.Enumeration<java.lang.Object> objEnumeration12 = properties10.keys();
        boolean boolean14 = properties10.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties15 = new java.util.Properties(properties10);
        java.lang.Object obj16 = properties15.clone();
        boolean boolean17 = properties5.equals((java.lang.Object) properties15);
        java.util.Properties properties18 = null;
        java.util.Properties properties19 = new java.util.Properties(properties18);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties21 = atomikosProperties20.asProperties();
        properties19.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties21);
        java.util.Properties properties25 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet26 = properties25.keySet();
        boolean boolean27 = properties19.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) properties25);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet28 = properties19.entrySet();
        java.util.Properties properties29 = null;
        java.util.Properties properties30 = new java.util.Properties(properties29);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties32 = atomikosProperties31.asProperties();
        properties30.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties32);
        java.util.Enumeration<java.lang.Object> objEnumeration34 = properties32.keys();
        java.lang.Object obj37 = properties32.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Properties properties38 = new java.util.Properties(properties32);
        boolean boolean39 = properties19.contains((java.lang.Object) properties38);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties41.setService("");
        atomikosProperties41.setThreadedTwoPhaseCommit(true);
        long long46 = atomikosProperties41.getCheckpointInterval();
        atomikosProperties41.forceShutdownOnVmExit = true;
        boolean boolean49 = atomikosProperties41.isForceShutdownOnVmExit();
        java.lang.Object obj50 = properties19.putIfAbsent((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", (java.lang.Object) atomikosProperties41);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties51 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties51.setService("");
        atomikosProperties51.setThreadedTwoPhaseCommit(true);
        long long56 = atomikosProperties51.getCheckpointInterval();
        atomikosProperties51.maxTimeout = (-1);
        java.util.Properties properties59 = atomikosProperties51.asProperties();
        java.util.Enumeration<?> wildcardEnumeration60 = properties59.propertyNames();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj61 = properties15.replace(obj50, (java.lang.Object) wildcardEnumeration60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertNotNull(objEnumeration12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "{}");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(properties21);
        org.junit.Assert.assertNotNull(objSet26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(objEntrySet28);
        org.junit.Assert.assertNotNull(properties32);
        org.junit.Assert.assertNotNull(objEnumeration34);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 500L + "'", long46 == 500L);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 500L + "'", long56 == 500L);
        org.junit.Assert.assertNotNull(properties59);
        org.junit.Assert.assertNotNull(wildcardEnumeration60);
    }

    @Test
    public void test0381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0381");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Properties properties5 = new java.util.Properties(properties3);
        java.util.Collection<java.lang.Object> objCollection6 = properties3.values();
        int int7 = properties3.size();
        java.io.InputStream inputStream8 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.load(inputStream8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objCollection6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 9 + "'", int7 == 9);
    }

    @Test
    public void test0382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0382");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        atomikosProperties0.setSerialJtaTransactions(true);
        atomikosProperties0.setEnableLogging(false);
        atomikosProperties0.logBaseName = "tmlog";
        atomikosProperties0.maxActives = 1;
        atomikosProperties0.setEnableLogging(true);
        long long13 = atomikosProperties0.getMaxTimeout();
        int int14 = atomikosProperties0.maxActives;
        atomikosProperties0.setLogBaseName("");
        long long17 = atomikosProperties0.getCheckpointInterval();
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 300000L + "'", long13 == 300000L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 500L + "'", long17 == 500L);
    }

    @Test
    public void test0383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0383");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        atomikosProperties0.setSerialJtaTransactions(true);
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        properties5.clear();
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        java.util.Enumeration<java.lang.Object> objEnumeration13 = properties11.keys();
        boolean boolean15 = properties11.containsValue((java.lang.Object) 0.0f);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long18 = atomikosProperties17.defaultJtaTimeout;
        boolean boolean19 = atomikosProperties17.enableLogging;
        atomikosProperties17.setSerialJtaTransactions(true);
        java.lang.Object obj22 = properties11.putIfAbsent((java.lang.Object) 100L, (java.lang.Object) true);
        boolean boolean23 = properties5.remove((java.lang.Object) 1.0f, (java.lang.Object) 100L);
        java.util.Properties properties24 = null;
        java.util.Properties properties25 = new java.util.Properties(properties24);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties27 = atomikosProperties26.asProperties();
        properties25.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties27);
        java.util.Enumeration<java.lang.Object> objEnumeration29 = properties27.keys();
        java.lang.Object obj32 = properties27.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Properties properties33 = new java.util.Properties(properties27);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties35.setService("");
        atomikosProperties35.setSerialJtaTransactions(true);
        java.util.Properties properties40 = atomikosProperties35.asProperties();
        properties40.clear();
        boolean boolean42 = properties5.replace((java.lang.Object) properties27, (java.lang.Object) 0.0d, (java.lang.Object) properties40);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties43 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean44 = atomikosProperties43.forceShutdownOnVmExit;
        atomikosProperties43.setSerialJtaTransactions(true);
        java.lang.String str47 = atomikosProperties43.logBaseName;
        atomikosProperties43.service = "tmlog";
        java.util.Properties properties50 = atomikosProperties43.asProperties();
        java.util.Set<java.lang.Object> objSet51 = properties50.keySet();
        java.util.Enumeration<java.lang.Object> objEnumeration52 = properties50.keys();
        java.lang.Object obj53 = properties5.remove((java.lang.Object) objEnumeration52);
        java.io.PrintStream printStream54 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties5.list(printStream54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNotNull(objEnumeration13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10000L + "'", long18 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(properties27);
        org.junit.Assert.assertNotNull(objEnumeration29);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNotNull(properties40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "tmlog" + "'", str47, "tmlog");
        org.junit.Assert.assertNotNull(properties50);
        org.junit.Assert.assertNotNull(objSet51);
        org.junit.Assert.assertNotNull(objEnumeration52);
        org.junit.Assert.assertNull(obj53);
    }

    @Test
    public void test0384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0384");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        atomikosProperties0.setSerialJtaTransactions(true);
        atomikosProperties0.setEnableLogging(false);
        atomikosProperties0.service = "tmlog";
        atomikosProperties0.threadedTwoPhaseCommit = true;
        boolean boolean11 = atomikosProperties0.isForceShutdownOnVmExit();
        boolean boolean12 = atomikosProperties0.threadedTwoPhaseCommit;
        boolean boolean13 = atomikosProperties0.isSerialJtaTransactions();
        java.lang.Class<?> wildcardClass14 = atomikosProperties0.getClass();
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0385");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties(properties1);
        java.io.OutputStream outputStream3 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties2.storeToXML(outputStream3, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "tmlog");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0386");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        boolean boolean3 = atomikosProperties0.isEnableLogging();
        java.util.Properties properties4 = atomikosProperties0.asProperties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties6.setService("");
        boolean boolean9 = atomikosProperties6.isEnableLogging();
        java.util.Properties properties10 = atomikosProperties6.asProperties();
        atomikosProperties6.setSerialJtaTransactions(false);
        java.lang.String str13 = atomikosProperties6.getLogBaseName();
        atomikosProperties6.setTransactionManagerUniqueName("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties16.defaultJtaTimeout = (byte) -1;
        java.util.Properties properties19 = atomikosProperties16.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean21 = atomikosProperties20.forceShutdownOnVmExit;
        atomikosProperties20.setSerialJtaTransactions(true);
        java.lang.String str24 = atomikosProperties20.logBaseName;
        atomikosProperties20.service = "tmlog";
        java.util.Properties properties27 = atomikosProperties20.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean29 = atomikosProperties28.forceShutdownOnVmExit;
        java.lang.String str30 = atomikosProperties28.getLogBaseDir();
        java.lang.Object obj31 = properties19.getOrDefault((java.lang.Object) atomikosProperties20, (java.lang.Object) str30);
        java.lang.Object obj32 = properties4.put((java.lang.Object) atomikosProperties6, (java.lang.Object) atomikosProperties20);
        java.util.Properties properties33 = new java.util.Properties(properties4);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties34 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties34.setService("");
        atomikosProperties34.setSerialJtaTransactions(true);
        atomikosProperties34.setEnableLogging(false);
        atomikosProperties34.logBaseName = "tmlog";
        atomikosProperties34.maxActives = 1;
        atomikosProperties34.setEnableLogging(true);
        java.lang.String str47 = atomikosProperties34.service;
        java.lang.String str48 = atomikosProperties34.getTransactionManagerUniqueName();
        atomikosProperties34.checkpointInterval = '#';
        atomikosProperties34.setForceShutdownOnVmExit(true);
        boolean boolean53 = properties33.equals((java.lang.Object) atomikosProperties34);
        java.lang.Object obj54 = null;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties55 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean56 = atomikosProperties55.forceShutdownOnVmExit;
        atomikosProperties55.setSerialJtaTransactions(true);
        java.lang.String str59 = atomikosProperties55.logBaseName;
        boolean boolean60 = atomikosProperties55.forceShutdownOnVmExit;
        int int61 = atomikosProperties55.maxActives;
        java.lang.String str62 = atomikosProperties55.logBaseName;
        atomikosProperties55.transactionManagerUniqueName = "hi!";
        java.lang.String str65 = atomikosProperties55.getService();
        long long66 = atomikosProperties55.getDefaultJtaTimeout();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean67 = properties33.remove(obj54, (java.lang.Object) atomikosProperties55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(properties4);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNotNull(properties19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "tmlog" + "'", str24, "tmlog");
        org.junit.Assert.assertNotNull(properties27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "tmlog" + "'", str59, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 50 + "'", int61 == 50);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "tmlog" + "'", str62, "tmlog");
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 10000L + "'", long66 == 10000L);
    }

    @Test
    public void test0387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0387");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        long long5 = atomikosProperties0.getCheckpointInterval();
        boolean boolean6 = atomikosProperties0.threadedTwoPhaseCommit;
        atomikosProperties0.transactionManagerUniqueName = "tmlog";
        boolean boolean9 = atomikosProperties0.forceShutdownOnVmExit;
        boolean boolean10 = atomikosProperties0.enableLogging;
        atomikosProperties0.defaultJtaTimeout = 1;
        atomikosProperties0.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties0.transactionManagerUniqueName = "";
        java.util.Properties properties17 = atomikosProperties0.asProperties();
        java.util.Set<java.lang.String> strSet18 = properties17.stringPropertyNames();
        java.io.OutputStream outputStream19 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties17.save(outputStream19, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, tmlog=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 500L + "'", long5 == 500L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(properties17);
        org.junit.Assert.assertNotNull(strSet18);
    }

    @Test
    public void test0388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0388");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        java.lang.Object obj8 = properties3.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection9 = properties3.values();
        java.util.Properties properties10 = new java.util.Properties();
        java.lang.Object obj13 = properties10.getOrDefault((java.lang.Object) (short) 1, (java.lang.Object) (-1.0d));
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        java.util.Properties properties15 = null;
        java.util.Properties properties16 = new java.util.Properties(properties15);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties18 = atomikosProperties17.asProperties();
        properties16.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties18);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties20.setService("");
        atomikosProperties20.setThreadedTwoPhaseCommit(true);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties25.setService("");
        atomikosProperties25.setSerialJtaTransactions(true);
        atomikosProperties25.setEnableLogging(false);
        java.lang.String str32 = atomikosProperties25.logBaseName;
        java.lang.Object obj33 = properties18.replace((java.lang.Object) atomikosProperties20, (java.lang.Object) atomikosProperties25);
        boolean boolean34 = properties3.contains((java.lang.Object) properties18);
        java.lang.String str35 = properties18.toString();
        int int36 = properties18.size();
        java.io.OutputStream outputStream37 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties18.storeToXML(outputStream37, "tmlog", "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(objCollection9);
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + (-1.0d) + "'", obj13, (-1.0d));
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "tmlog" + "'", str32, "tmlog");
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str35, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 9 + "'", int36 == 9);
    }

    @Test
    public void test0389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0389");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        boolean boolean3 = atomikosProperties0.isEnableLogging();
        java.util.Properties properties4 = atomikosProperties0.asProperties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties6.setService("");
        boolean boolean9 = atomikosProperties6.isEnableLogging();
        java.util.Properties properties10 = atomikosProperties6.asProperties();
        atomikosProperties6.setSerialJtaTransactions(false);
        java.lang.String str13 = atomikosProperties6.getLogBaseName();
        atomikosProperties6.setTransactionManagerUniqueName("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties16.defaultJtaTimeout = (byte) -1;
        java.util.Properties properties19 = atomikosProperties16.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean21 = atomikosProperties20.forceShutdownOnVmExit;
        atomikosProperties20.setSerialJtaTransactions(true);
        java.lang.String str24 = atomikosProperties20.logBaseName;
        atomikosProperties20.service = "tmlog";
        java.util.Properties properties27 = atomikosProperties20.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean29 = atomikosProperties28.forceShutdownOnVmExit;
        java.lang.String str30 = atomikosProperties28.getLogBaseDir();
        java.lang.Object obj31 = properties19.getOrDefault((java.lang.Object) atomikosProperties20, (java.lang.Object) str30);
        java.lang.Object obj32 = properties4.put((java.lang.Object) atomikosProperties6, (java.lang.Object) atomikosProperties20);
        java.util.Properties properties33 = new java.util.Properties(properties4);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties34 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties34.setService("");
        atomikosProperties34.setSerialJtaTransactions(true);
        atomikosProperties34.setEnableLogging(false);
        atomikosProperties34.logBaseName = "tmlog";
        atomikosProperties34.maxActives = 1;
        atomikosProperties34.setEnableLogging(true);
        java.lang.String str47 = atomikosProperties34.service;
        java.lang.String str48 = atomikosProperties34.getTransactionManagerUniqueName();
        atomikosProperties34.checkpointInterval = '#';
        atomikosProperties34.setForceShutdownOnVmExit(true);
        boolean boolean53 = properties33.equals((java.lang.Object) atomikosProperties34);
        long long54 = atomikosProperties34.defaultJtaTimeout;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(properties4);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNotNull(properties19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "tmlog" + "'", str24, "tmlog");
        org.junit.Assert.assertNotNull(properties27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 10000L + "'", long54 == 10000L);
    }

    @Test
    public void test0390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0390");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        boolean boolean3 = atomikosProperties0.isEnableLogging();
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.transactionManagerUniqueName = "";
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
    }

    @Test
    public void test0391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0391");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Collection<java.lang.Object> objCollection5 = properties1.values();
        properties1.clear();
        java.lang.String str9 = properties1.getProperty("", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objCollection5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str9, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
    }

    @Test
    public void test0392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0392");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.setSerialJtaTransactions(true);
        java.lang.String str4 = atomikosProperties0.logBaseName;
        atomikosProperties0.service = "tmlog";
        java.util.Properties properties7 = atomikosProperties0.asProperties();
        java.util.Set<java.lang.Object> objSet8 = properties7.keySet();
        java.io.PrintWriter printWriter9 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties7.list(printWriter9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tmlog" + "'", str4, "tmlog");
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNotNull(objSet8);
    }

    @Test
    public void test0393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0393");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        atomikosProperties0.setSerialJtaTransactions(true);
        atomikosProperties0.setEnableLogging(false);
        atomikosProperties0.logBaseName = "tmlog";
        atomikosProperties0.maxActives = 1;
        atomikosProperties0.setEnableLogging(true);
        long long13 = atomikosProperties0.getMaxTimeout();
        int int14 = atomikosProperties0.maxActives;
        atomikosProperties0.setLogBaseName("");
        boolean boolean17 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.forceShutdownOnVmExit = false;
        java.lang.Class<?> wildcardClass20 = atomikosProperties0.getClass();
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 300000L + "'", long13 == 300000L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0394");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj3 = properties0.getOrDefault((java.lang.Object) (short) 1, (java.lang.Object) (-1.0d));
        java.io.OutputStream outputStream4 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.store(outputStream4, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj3 + "' != '" + (-1.0d) + "'", obj3, (-1.0d));
    }

    @Test
    public void test0395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0395");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        long long5 = atomikosProperties0.getCheckpointInterval();
        atomikosProperties0.forceShutdownOnVmExit = true;
        atomikosProperties0.setSerialJtaTransactions(true);
        java.util.Properties properties10 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long12 = atomikosProperties11.defaultJtaTimeout;
        boolean boolean13 = atomikosProperties11.enableLogging;
        atomikosProperties11.setSerialJtaTransactions(true);
        java.util.Properties properties16 = atomikosProperties11.asProperties();
        java.util.Properties properties17 = atomikosProperties11.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties20 = atomikosProperties19.asProperties();
        atomikosProperties19.checkpointInterval = 1L;
        boolean boolean23 = atomikosProperties19.forceShutdownOnVmExit;
        java.lang.Object obj24 = properties17.put((java.lang.Object) (short) 0, (java.lang.Object) atomikosProperties19);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long26 = atomikosProperties25.defaultJtaTimeout;
        boolean boolean27 = atomikosProperties25.enableLogging;
        int int28 = atomikosProperties25.maxActives;
        java.lang.String str29 = atomikosProperties25.getService();
        java.util.Properties properties30 = null;
        java.util.Properties properties31 = new java.util.Properties(properties30);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties33 = atomikosProperties32.asProperties();
        properties31.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties33);
        java.util.Enumeration<java.lang.Object> objEnumeration35 = properties33.keys();
        boolean boolean37 = properties33.containsValue((java.lang.Object) 0.0f);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties39 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long40 = atomikosProperties39.defaultJtaTimeout;
        boolean boolean41 = atomikosProperties39.enableLogging;
        atomikosProperties39.setSerialJtaTransactions(true);
        java.lang.Object obj44 = properties33.putIfAbsent((java.lang.Object) 100L, (java.lang.Object) true);
        java.util.Enumeration<java.lang.Object> objEnumeration45 = properties33.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties47 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties47.setService("");
        atomikosProperties47.setSerialJtaTransactions(true);
        atomikosProperties47.setEnableLogging(false);
        atomikosProperties47.service = "tmlog";
        atomikosProperties25.set(properties33, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", (java.lang.Object) atomikosProperties47);
        boolean boolean57 = properties17.contains((java.lang.Object) atomikosProperties47);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties59 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties59.setService("");
        atomikosProperties59.setThreadedTwoPhaseCommit(true);
        long long64 = atomikosProperties59.getCheckpointInterval();
        atomikosProperties59.maxTimeout = (-1);
        java.util.Properties properties67 = atomikosProperties59.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties68 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long69 = atomikosProperties68.defaultJtaTimeout;
        boolean boolean70 = atomikosProperties68.enableLogging;
        atomikosProperties68.setSerialJtaTransactions(true);
        java.util.Properties properties73 = atomikosProperties68.asProperties();
        properties67.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties73);
        java.util.Enumeration<java.lang.Object> objEnumeration75 = properties67.elements();
        atomikosProperties0.set(properties17, "hi!", (java.lang.Object) objEnumeration75);
        boolean boolean77 = properties17.isEmpty();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 500L + "'", long5 == 500L);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10000L + "'", long12 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertNotNull(properties17);
        org.junit.Assert.assertNotNull(properties20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 10000L + "'", long26 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 50 + "'", int28 == 50);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(properties33);
        org.junit.Assert.assertNotNull(objEnumeration35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 10000L + "'", long40 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNotNull(objEnumeration45);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 500L + "'", long64 == 500L);
        org.junit.Assert.assertNotNull(properties67);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 10000L + "'", long69 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(properties73);
        org.junit.Assert.assertNotNull(objEnumeration75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test0396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0396");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        java.lang.Object obj8 = properties3.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection9 = properties3.values();
        java.util.Properties properties10 = new java.util.Properties();
        java.lang.Object obj13 = properties10.getOrDefault((java.lang.Object) (short) 1, (java.lang.Object) (-1.0d));
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        java.util.Properties properties15 = new java.util.Properties(properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean17 = atomikosProperties16.forceShutdownOnVmExit;
        atomikosProperties16.setSerialJtaTransactions(true);
        java.lang.String str20 = atomikosProperties16.logBaseName;
        atomikosProperties16.service = "tmlog";
        boolean boolean23 = properties15.containsValue((java.lang.Object) "tmlog");
        java.util.Properties properties24 = new java.util.Properties(properties15);
        java.lang.String str25 = properties24.toString();
        int int26 = properties24.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties27.setService("");
        atomikosProperties27.setThreadedTwoPhaseCommit(true);
        long long32 = atomikosProperties27.getCheckpointInterval();
        boolean boolean33 = atomikosProperties27.threadedTwoPhaseCommit;
        long long34 = atomikosProperties27.defaultJtaTimeout;
        boolean boolean35 = properties24.containsKey((java.lang.Object) atomikosProperties27);
        boolean boolean36 = properties24.isEmpty();
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(objCollection9);
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + (-1.0d) + "'", obj13, (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "tmlog" + "'", str20, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "{}" + "'", str25, "{}");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 500L + "'", long32 == 500L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 10000L + "'", long34 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test0397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0397");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        boolean boolean3 = atomikosProperties0.isEnableLogging();
        java.util.Properties properties4 = atomikosProperties0.asProperties();
        properties4.clear();
        java.util.Properties properties6 = null;
        java.util.Properties properties7 = new java.util.Properties(properties6);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties9 = atomikosProperties8.asProperties();
        properties7.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties9);
        java.util.Enumeration<java.lang.Object> objEnumeration11 = properties9.keys();
        java.lang.Object obj13 = properties4.put((java.lang.Object) properties9, (java.lang.Object) (byte) 0);
        boolean boolean14 = properties9.isEmpty();
        boolean boolean15 = properties9.isEmpty();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet16 = properties9.entrySet();
        java.util.Properties properties17 = null;
        java.util.Properties properties18 = new java.util.Properties(properties17);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties20 = atomikosProperties19.asProperties();
        properties18.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties20);
        java.util.Properties properties22 = new java.util.Properties(properties20);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties24 = atomikosProperties23.asProperties();
        java.util.Set<java.lang.String> strSet25 = properties24.stringPropertyNames();
        properties22.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties24);
        int int27 = properties22.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties28.defaultJtaTimeout = (byte) -1;
        java.util.Properties properties31 = atomikosProperties28.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean33 = atomikosProperties32.forceShutdownOnVmExit;
        atomikosProperties32.setSerialJtaTransactions(true);
        java.lang.String str36 = atomikosProperties32.logBaseName;
        atomikosProperties32.service = "tmlog";
        java.util.Properties properties39 = atomikosProperties32.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean41 = atomikosProperties40.forceShutdownOnVmExit;
        java.lang.String str42 = atomikosProperties40.getLogBaseDir();
        java.lang.Object obj43 = properties31.getOrDefault((java.lang.Object) atomikosProperties32, (java.lang.Object) str42);
        long long44 = atomikosProperties32.getDefaultJtaTimeout();
        atomikosProperties32.setLogBaseName("{}");
        int int47 = atomikosProperties32.maxActives;
        java.lang.Object obj48 = properties9.replace((java.lang.Object) properties22, (java.lang.Object) int47);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties49.setService("");
        atomikosProperties49.setThreadedTwoPhaseCommit(true);
        long long54 = atomikosProperties49.getCheckpointInterval();
        java.util.Properties properties55 = atomikosProperties49.asProperties();
        java.util.Properties properties56 = null;
        java.util.Properties properties57 = new java.util.Properties(properties56);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties58 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties59 = atomikosProperties58.asProperties();
        properties57.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties59);
        java.util.Enumeration<java.lang.Object> objEnumeration61 = properties59.keys();
        boolean boolean63 = properties59.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties64 = null;
        java.util.Properties properties65 = new java.util.Properties(properties64);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties66 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties67 = atomikosProperties66.asProperties();
        properties65.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties67);
        java.util.Enumeration<java.lang.Object> objEnumeration69 = properties67.keys();
        java.lang.Object obj72 = properties67.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection73 = properties67.values();
        boolean boolean74 = properties59.containsKey((java.lang.Object) properties67);
        java.util.Properties properties75 = new java.util.Properties(properties59);
        java.util.Set<java.lang.Object> objSet76 = properties59.keySet();
        java.util.Enumeration<java.lang.Object> objEnumeration77 = properties59.keys();
        java.lang.Object obj78 = properties9.getOrDefault((java.lang.Object) properties55, (java.lang.Object) properties59);
        java.util.Collection<java.lang.Object> objCollection79 = properties9.values();
        java.util.Enumeration<?> wildcardEnumeration80 = properties9.propertyNames();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(properties4);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertNotNull(objEnumeration11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(objEntrySet16);
        org.junit.Assert.assertNotNull(properties20);
        org.junit.Assert.assertNotNull(properties24);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertNotNull(properties31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "tmlog" + "'", str36, "tmlog");
        org.junit.Assert.assertNotNull(properties39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 10000L + "'", long44 == 10000L);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 50 + "'", int47 == 50);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 500L + "'", long54 == 500L);
        org.junit.Assert.assertNotNull(properties55);
        org.junit.Assert.assertNotNull(properties59);
        org.junit.Assert.assertNotNull(objEnumeration61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(properties67);
        org.junit.Assert.assertNotNull(objEnumeration69);
        org.junit.Assert.assertNull(obj72);
        org.junit.Assert.assertNotNull(objCollection73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(objSet76);
        org.junit.Assert.assertNotNull(objEnumeration77);
        org.junit.Assert.assertNotNull(obj78);
// flaky:         org.junit.Assert.assertEquals(obj78.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj78), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj78), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNotNull(objCollection79);
        org.junit.Assert.assertNotNull(wildcardEnumeration80);
    }

    @Test
    public void test0398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0398");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties6.setService("");
        atomikosProperties6.setSerialJtaTransactions(true);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean12 = atomikosProperties11.forceShutdownOnVmExit;
        atomikosProperties11.setSerialJtaTransactions(true);
        boolean boolean15 = properties3.remove((java.lang.Object) atomikosProperties6, (java.lang.Object) true);
        atomikosProperties6.setForceShutdownOnVmExit(false);
        atomikosProperties6.logBaseName = "tmlog";
        atomikosProperties6.setSerialJtaTransactions(false);
        java.util.Properties properties22 = atomikosProperties6.asProperties();
        java.io.OutputStream outputStream23 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties22.store(outputStream23, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, true=true, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(properties22);
    }

    @Test
    public void test0399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0399");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        long long5 = atomikosProperties0.getCheckpointInterval();
        boolean boolean6 = atomikosProperties0.threadedTwoPhaseCommit;
        atomikosProperties0.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, true=true, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 500L + "'", long5 == 500L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test0400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0400");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        java.lang.Object obj8 = properties3.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection9 = properties3.values();
        java.util.Properties properties10 = new java.util.Properties();
        java.lang.Object obj13 = properties10.getOrDefault((java.lang.Object) (short) 1, (java.lang.Object) (-1.0d));
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        java.util.Properties properties15 = new java.util.Properties(properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean17 = atomikosProperties16.forceShutdownOnVmExit;
        atomikosProperties16.setSerialJtaTransactions(true);
        java.lang.String str20 = atomikosProperties16.logBaseName;
        atomikosProperties16.service = "tmlog";
        boolean boolean23 = properties15.containsValue((java.lang.Object) "tmlog");
        java.util.Properties properties24 = new java.util.Properties(properties15);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean26 = atomikosProperties25.forceShutdownOnVmExit;
        atomikosProperties25.setSerialJtaTransactions(true);
        java.lang.String str29 = atomikosProperties25.logBaseName;
        atomikosProperties25.service = "tmlog";
        java.util.Properties properties32 = atomikosProperties25.asProperties();
        long long33 = atomikosProperties25.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties34 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties34.setService("");
        atomikosProperties34.setSerialJtaTransactions(true);
        atomikosProperties34.setEnableLogging(false);
        java.lang.Object obj41 = properties15.put((java.lang.Object) atomikosProperties25, (java.lang.Object) false);
        java.util.Enumeration<java.lang.Object> objEnumeration42 = properties15.elements();
        java.io.InputStream inputStream43 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties15.loadFromXML(inputStream43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(objCollection9);
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + (-1.0d) + "'", obj13, (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "tmlog" + "'", str20, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "tmlog" + "'", str29, "tmlog");
        org.junit.Assert.assertNotNull(properties32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 500L + "'", long33 == 500L);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertNotNull(objEnumeration42);
    }

    @Test
    public void test0401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0401");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        atomikosProperties0.setSerialJtaTransactions(true);
        atomikosProperties0.setEnableLogging(false);
        atomikosProperties0.logBaseName = "tmlog";
        atomikosProperties0.serialJtaTransactions = false;
        java.lang.String str11 = atomikosProperties0.logBaseName;
        java.lang.String str12 = atomikosProperties0.getTransactionManagerUniqueName();
        long long13 = atomikosProperties0.getMaxTimeout();
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "tmlog" + "'", str11, "tmlog");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 300000L + "'", long13 == 300000L);
    }

    @Test
    public void test0402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0402");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        atomikosProperties0.setSerialJtaTransactions(true);
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        properties5.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean8 = atomikosProperties7.forceShutdownOnVmExit;
        atomikosProperties7.setSerialJtaTransactions(true);
        java.lang.String str11 = atomikosProperties7.logBaseName;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties13 = atomikosProperties12.asProperties();
        java.util.Properties properties14 = atomikosProperties12.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties16.setService("");
        atomikosProperties16.setThreadedTwoPhaseCommit(true);
        long long21 = atomikosProperties16.getCheckpointInterval();
        boolean boolean22 = atomikosProperties16.threadedTwoPhaseCommit;
        atomikosProperties7.set(properties14, "tmlog", (java.lang.Object) atomikosProperties16);
        boolean boolean24 = properties5.containsValue((java.lang.Object) atomikosProperties16);
        atomikosProperties16.maxTimeout = (-1L);
        java.lang.String str27 = atomikosProperties16.getService();
        atomikosProperties16.logBaseDir = "";
        long long30 = atomikosProperties16.getDefaultJtaTimeout();
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "tmlog" + "'", str11, "tmlog");
        org.junit.Assert.assertNotNull(properties13);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 500L + "'", long21 == 500L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 10000L + "'", long30 == 10000L);
    }

    @Test
    public void test0403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0403");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties5.setService("");
        atomikosProperties5.setThreadedTwoPhaseCommit(true);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.setService("");
        atomikosProperties10.setSerialJtaTransactions(true);
        atomikosProperties10.setEnableLogging(false);
        java.lang.String str17 = atomikosProperties10.logBaseName;
        java.lang.Object obj18 = properties3.replace((java.lang.Object) atomikosProperties5, (java.lang.Object) atomikosProperties10);
        java.util.Properties properties19 = atomikosProperties10.asProperties();
        java.io.PrintWriter printWriter20 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties19.list(printWriter20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(properties19);
    }

    @Test
    public void test0404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0404");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        java.lang.Object obj8 = properties3.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection9 = properties3.values();
        java.util.Properties properties10 = new java.util.Properties();
        java.lang.Object obj13 = properties10.getOrDefault((java.lang.Object) (short) 1, (java.lang.Object) (-1.0d));
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        java.util.Properties properties15 = new java.util.Properties(properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean17 = atomikosProperties16.forceShutdownOnVmExit;
        atomikosProperties16.setSerialJtaTransactions(true);
        java.lang.String str20 = atomikosProperties16.logBaseName;
        atomikosProperties16.service = "tmlog";
        boolean boolean23 = properties15.containsValue((java.lang.Object) "tmlog");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties24.setService("");
        atomikosProperties24.setSerialJtaTransactions(true);
        atomikosProperties24.setEnableLogging(false);
        boolean boolean31 = atomikosProperties24.forceShutdownOnVmExit;
        java.lang.Object obj32 = properties15.remove((java.lang.Object) boolean31);
        java.lang.String str34 = properties15.getProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, true=true, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Properties properties35 = new java.util.Properties(properties15);
        java.util.Properties properties36 = new java.util.Properties(properties15);
        java.io.OutputStream outputStream37 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties15.store(outputStream37, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(objCollection9);
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + (-1.0d) + "'", obj13, (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "tmlog" + "'", str20, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNull(str34);
    }

    @Test
    public void test0405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0405");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        boolean boolean7 = properties3.containsValue((java.lang.Object) 0.0f);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long10 = atomikosProperties9.defaultJtaTimeout;
        boolean boolean11 = atomikosProperties9.enableLogging;
        atomikosProperties9.setSerialJtaTransactions(true);
        java.lang.Object obj14 = properties3.putIfAbsent((java.lang.Object) 100L, (java.lang.Object) true);
        java.util.Properties properties15 = new java.util.Properties(properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties16.setService("");
        atomikosProperties16.setThreadedTwoPhaseCommit(true);
        atomikosProperties16.setMaxTimeout(1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties24 = atomikosProperties23.asProperties();
        long long25 = atomikosProperties23.getDefaultJtaTimeout();
        atomikosProperties23.setCheckpointInterval(0L);
        atomikosProperties23.defaultJtaTimeout = ' ';
        boolean boolean30 = atomikosProperties23.serialJtaTransactions;
        java.lang.Object obj31 = properties3.putIfAbsent((java.lang.Object) 1L, (java.lang.Object) atomikosProperties23);
        java.io.InputStream inputStream32 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.loadFromXML(inputStream32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(properties24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 10000L + "'", long25 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNull(obj31);
    }

    @Test
    public void test0406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0406");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.setSerialJtaTransactions(true);
        java.lang.String str4 = atomikosProperties0.logBaseName;
        boolean boolean5 = atomikosProperties0.forceShutdownOnVmExit;
        int int6 = atomikosProperties0.maxActives;
        java.lang.String str7 = atomikosProperties0.logBaseName;
        atomikosProperties0.setForceShutdownOnVmExit(true);
        java.util.Properties properties10 = atomikosProperties0.asProperties();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        atomikosProperties0.threadedTwoPhaseCommit = true;
        atomikosProperties0.maxActives = 100;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tmlog" + "'", str4, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 50 + "'", int6 == 50);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "tmlog" + "'", str7, "tmlog");
        org.junit.Assert.assertNotNull(properties10);
    }

    @Test
    public void test0407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0407");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        boolean boolean3 = atomikosProperties0.isEnableLogging();
        java.util.Properties properties4 = atomikosProperties0.asProperties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties6.setService("");
        boolean boolean9 = atomikosProperties6.isEnableLogging();
        java.util.Properties properties10 = atomikosProperties6.asProperties();
        atomikosProperties6.setSerialJtaTransactions(false);
        java.lang.String str13 = atomikosProperties6.getLogBaseName();
        atomikosProperties6.setTransactionManagerUniqueName("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties16.defaultJtaTimeout = (byte) -1;
        java.util.Properties properties19 = atomikosProperties16.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean21 = atomikosProperties20.forceShutdownOnVmExit;
        atomikosProperties20.setSerialJtaTransactions(true);
        java.lang.String str24 = atomikosProperties20.logBaseName;
        atomikosProperties20.service = "tmlog";
        java.util.Properties properties27 = atomikosProperties20.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean29 = atomikosProperties28.forceShutdownOnVmExit;
        java.lang.String str30 = atomikosProperties28.getLogBaseDir();
        java.lang.Object obj31 = properties19.getOrDefault((java.lang.Object) atomikosProperties20, (java.lang.Object) str30);
        java.lang.Object obj32 = properties4.put((java.lang.Object) atomikosProperties6, (java.lang.Object) atomikosProperties20);
        java.util.Properties properties33 = new java.util.Properties(properties4);
        java.lang.Object obj34 = properties33.clone();
        java.util.Properties properties35 = null;
        java.util.Properties properties36 = new java.util.Properties(properties35);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties38 = atomikosProperties37.asProperties();
        properties36.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties38);
        java.util.Properties properties40 = new java.util.Properties(properties38);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties42 = atomikosProperties41.asProperties();
        java.util.Set<java.lang.String> strSet43 = properties42.stringPropertyNames();
        properties40.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties42);
        properties42.clear();
        java.util.Set<java.lang.Object> objSet46 = properties42.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties47 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties48 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties48.setService("");
        atomikosProperties48.setThreadedTwoPhaseCommit(true);
        long long53 = atomikosProperties48.getCheckpointInterval();
        atomikosProperties48.maxTimeout = (-1);
        java.util.Properties properties56 = atomikosProperties48.asProperties();
        java.lang.Object obj57 = properties42.putIfAbsent((java.lang.Object) atomikosProperties47, (java.lang.Object) properties56);
        java.lang.Object obj58 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean59 = properties33.remove((java.lang.Object) properties42, obj58);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(properties4);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNotNull(properties19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "tmlog" + "'", str24, "tmlog");
        org.junit.Assert.assertNotNull(properties27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "{}");
        org.junit.Assert.assertNotNull(properties38);
        org.junit.Assert.assertNotNull(properties42);
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertNotNull(objSet46);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 500L + "'", long53 == 500L);
        org.junit.Assert.assertNotNull(properties56);
        org.junit.Assert.assertNull(obj57);
    }

    @Test
    public void test0408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0408");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        java.lang.Object obj8 = properties3.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection9 = properties3.values();
        java.util.Properties properties10 = new java.util.Properties();
        java.lang.Object obj13 = properties10.getOrDefault((java.lang.Object) (short) 1, (java.lang.Object) (-1.0d));
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        java.lang.String str15 = properties10.toString();
        java.io.Reader reader16 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties10.load(reader16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(objCollection9);
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + (-1.0d) + "'", obj13, (-1.0d));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{}" + "'", str15, "{}");
    }

    @Test
    public void test0409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0409");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        boolean boolean7 = properties3.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        java.util.Enumeration<java.lang.Object> objEnumeration13 = properties11.keys();
        java.lang.Object obj16 = properties11.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection17 = properties11.values();
        boolean boolean18 = properties3.containsKey((java.lang.Object) properties11);
        java.util.Properties properties19 = new java.util.Properties(properties3);
        java.util.Properties properties20 = new java.util.Properties(properties3);
        java.util.Properties properties21 = null;
        java.util.Properties properties22 = new java.util.Properties(properties21);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties24 = atomikosProperties23.asProperties();
        properties22.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties24);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties26.setService("");
        atomikosProperties26.setThreadedTwoPhaseCommit(true);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties31.setService("");
        atomikosProperties31.setSerialJtaTransactions(true);
        atomikosProperties31.setEnableLogging(false);
        java.lang.String str38 = atomikosProperties31.logBaseName;
        java.lang.Object obj39 = properties24.replace((java.lang.Object) atomikosProperties26, (java.lang.Object) atomikosProperties31);
        java.util.Properties properties40 = atomikosProperties31.asProperties();
        boolean boolean41 = properties3.containsKey((java.lang.Object) properties40);
        java.lang.Object obj42 = properties40.clone();
        java.io.OutputStream outputStream43 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties40.store(outputStream43, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNotNull(objEnumeration13);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(objCollection17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(properties24);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNotNull(properties40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(obj42);
// flaky:         org.junit.Assert.assertEquals(obj42.toString(), "{com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.service=, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "{com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.service=, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "{com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.service=, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
    }

    @Test
    public void test0410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0410");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Properties properties5 = new java.util.Properties(properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties7 = atomikosProperties6.asProperties();
        java.util.Set<java.lang.String> strSet8 = properties7.stringPropertyNames();
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties7);
        java.util.Properties properties10 = new java.util.Properties(properties7);
        java.io.PrintWriter printWriter11 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties7.list(printWriter11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNotNull(strSet8);
    }

    @Test
    public void test0411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0411");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Properties properties5 = new java.util.Properties(properties3);
        java.util.Collection<java.lang.Object> objCollection6 = properties3.values();
        java.util.Properties properties7 = new java.util.Properties(properties3);
        java.lang.Object obj8 = properties3.clone();
        java.util.Properties properties9 = new java.util.Properties(properties3);
        java.io.OutputStream outputStream10 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties9.save(outputStream10, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, true=true, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objCollection6);
        org.junit.Assert.assertNotNull(obj8);
// flaky:         org.junit.Assert.assertEquals(obj8.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
    }

    @Test
    public void test0412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0412");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Properties properties7 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet8 = properties7.keySet();
        boolean boolean9 = properties1.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) properties7);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet10 = properties1.entrySet();
        java.util.Properties properties11 = null;
        java.util.Properties properties12 = new java.util.Properties(properties11);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties14 = atomikosProperties13.asProperties();
        properties12.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties14);
        java.util.Enumeration<java.lang.Object> objEnumeration16 = properties14.keys();
        java.lang.Object obj19 = properties14.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Properties properties20 = new java.util.Properties(properties14);
        boolean boolean21 = properties1.contains((java.lang.Object) properties20);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties23.setService("");
        atomikosProperties23.setThreadedTwoPhaseCommit(true);
        long long28 = atomikosProperties23.getCheckpointInterval();
        atomikosProperties23.forceShutdownOnVmExit = true;
        boolean boolean31 = atomikosProperties23.isForceShutdownOnVmExit();
        java.lang.Object obj32 = properties1.putIfAbsent((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", (java.lang.Object) atomikosProperties23);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean34 = atomikosProperties33.forceShutdownOnVmExit;
        atomikosProperties33.setSerialJtaTransactions(true);
        java.lang.String str37 = atomikosProperties33.logBaseName;
        boolean boolean38 = atomikosProperties33.forceShutdownOnVmExit;
        int int39 = atomikosProperties33.maxActives;
        java.lang.String str40 = atomikosProperties33.logBaseName;
        atomikosProperties33.transactionManagerUniqueName = "hi!";
        atomikosProperties33.setMaxActives((int) (short) 10);
        java.util.Properties properties45 = atomikosProperties33.asProperties();
        java.util.Properties properties46 = atomikosProperties33.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties47 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long48 = atomikosProperties47.defaultJtaTimeout;
        boolean boolean49 = atomikosProperties47.enableLogging;
        atomikosProperties47.setSerialJtaTransactions(true);
        java.util.Properties properties52 = atomikosProperties47.asProperties();
        java.util.Properties properties53 = atomikosProperties47.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties55 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties56 = atomikosProperties55.asProperties();
        atomikosProperties55.checkpointInterval = 1L;
        boolean boolean59 = atomikosProperties55.forceShutdownOnVmExit;
        java.lang.Object obj60 = properties53.put((java.lang.Object) (short) 0, (java.lang.Object) atomikosProperties55);
        java.util.Properties properties61 = null;
        java.util.Properties properties62 = new java.util.Properties(properties61);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties63 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties64 = atomikosProperties63.asProperties();
        properties62.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties64);
        java.util.Enumeration<java.lang.Object> objEnumeration66 = properties64.keys();
        java.lang.Object obj69 = properties64.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection70 = properties64.values();
        java.util.Properties properties71 = new java.util.Properties();
        java.lang.Object obj74 = properties71.getOrDefault((java.lang.Object) (short) 1, (java.lang.Object) (-1.0d));
        properties64.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties71);
        java.util.Properties properties76 = new java.util.Properties(properties64);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties77 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean78 = atomikosProperties77.forceShutdownOnVmExit;
        atomikosProperties77.setSerialJtaTransactions(true);
        java.lang.String str81 = atomikosProperties77.logBaseName;
        atomikosProperties77.service = "tmlog";
        boolean boolean84 = properties76.containsValue((java.lang.Object) "tmlog");
        java.util.Properties properties85 = new java.util.Properties(properties76);
        boolean boolean86 = properties53.containsKey((java.lang.Object) properties85);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties88 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties88.setService("");
        boolean boolean91 = atomikosProperties88.isEnableLogging();
        java.util.Properties properties92 = atomikosProperties88.asProperties();
        boolean boolean93 = atomikosProperties88.isThreadedTwoPhaseCommit();
        java.util.Properties properties94 = atomikosProperties88.asProperties();
        atomikosProperties33.set(properties53, "tmlog", (java.lang.Object) properties94);
        java.lang.Object obj96 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj97 = properties1.putIfAbsent((java.lang.Object) properties53, obj96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(objEntrySet10);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertNotNull(objEnumeration16);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 500L + "'", long28 == 500L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "tmlog" + "'", str37, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 50 + "'", int39 == 50);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "tmlog" + "'", str40, "tmlog");
        org.junit.Assert.assertNotNull(properties45);
        org.junit.Assert.assertNotNull(properties46);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 10000L + "'", long48 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(properties52);
        org.junit.Assert.assertNotNull(properties53);
        org.junit.Assert.assertNotNull(properties56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertNotNull(properties64);
        org.junit.Assert.assertNotNull(objEnumeration66);
        org.junit.Assert.assertNull(obj69);
        org.junit.Assert.assertNotNull(objCollection70);
        org.junit.Assert.assertEquals("'" + obj74 + "' != '" + (-1.0d) + "'", obj74, (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "tmlog" + "'", str81, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(properties92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(properties94);
    }

    @Test
    public void test0413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0413");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.defaultJtaTimeout;
        boolean boolean2 = atomikosProperties0.enableLogging;
        int int3 = atomikosProperties0.maxActives;
        java.lang.String str4 = atomikosProperties0.getService();
        java.util.Properties properties5 = null;
        java.util.Properties properties6 = new java.util.Properties(properties5);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties8 = atomikosProperties7.asProperties();
        properties6.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        java.util.Enumeration<java.lang.Object> objEnumeration10 = properties8.keys();
        boolean boolean12 = properties8.containsValue((java.lang.Object) 0.0f);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long15 = atomikosProperties14.defaultJtaTimeout;
        boolean boolean16 = atomikosProperties14.enableLogging;
        atomikosProperties14.setSerialJtaTransactions(true);
        java.lang.Object obj19 = properties8.putIfAbsent((java.lang.Object) 100L, (java.lang.Object) true);
        java.util.Enumeration<java.lang.Object> objEnumeration20 = properties8.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties22.setService("");
        atomikosProperties22.setSerialJtaTransactions(true);
        atomikosProperties22.setEnableLogging(false);
        atomikosProperties22.service = "tmlog";
        atomikosProperties0.set(properties8, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", (java.lang.Object) atomikosProperties22);
        atomikosProperties22.service = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=false, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        java.util.Properties properties34 = atomikosProperties22.asProperties();
        atomikosProperties22.setThreadedTwoPhaseCommit(true);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 10000L + "'", long1 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 50 + "'", int3 == 50);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertNotNull(objEnumeration10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10000L + "'", long15 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNotNull(objEnumeration20);
        org.junit.Assert.assertNotNull(properties34);
    }

    @Test
    public void test0414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0414");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Properties properties7 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet8 = properties7.keySet();
        boolean boolean9 = properties1.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) properties7);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet10 = properties1.entrySet();
        java.util.Properties properties11 = null;
        java.util.Properties properties12 = new java.util.Properties(properties11);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties14 = atomikosProperties13.asProperties();
        properties12.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties14);
        java.util.Enumeration<java.lang.Object> objEnumeration16 = properties14.keys();
        java.lang.Object obj19 = properties14.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Properties properties20 = new java.util.Properties(properties14);
        boolean boolean21 = properties1.contains((java.lang.Object) properties20);
        java.io.Writer writer22 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.store(writer22, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=false, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(objEntrySet10);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertNotNull(objEnumeration16);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test0415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0415");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        atomikosProperties0.setSerialJtaTransactions(true);
        atomikosProperties0.setEnableLogging(false);
        atomikosProperties0.logBaseName = "tmlog";
        atomikosProperties0.maxActives = 1;
        atomikosProperties0.setEnableLogging(true);
        long long13 = atomikosProperties0.getMaxTimeout();
        java.lang.String str14 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.service = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, true=true, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        java.lang.String str17 = atomikosProperties0.getTransactionManagerUniqueName();
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 300000L + "'", long13 == 300000L);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test0416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0416");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        boolean boolean7 = properties3.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties8 = new java.util.Properties(properties3);
        java.lang.Object obj9 = properties8.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        long long12 = atomikosProperties10.getDefaultJtaTimeout();
        long long13 = atomikosProperties10.getDefaultJtaTimeout();
        atomikosProperties10.setForceShutdownOnVmExit(false);
        atomikosProperties10.defaultJtaTimeout = (short) 0;
        int int18 = atomikosProperties10.getMaxActives();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setService("");
        atomikosProperties19.setSerialJtaTransactions(true);
        java.util.Properties properties24 = atomikosProperties19.asProperties();
        properties24.clear();
        java.util.Properties properties27 = null;
        java.util.Properties properties28 = new java.util.Properties(properties27);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties30 = atomikosProperties29.asProperties();
        properties28.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties30);
        java.util.Enumeration<java.lang.Object> objEnumeration32 = properties30.keys();
        boolean boolean34 = properties30.containsValue((java.lang.Object) 0.0f);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long37 = atomikosProperties36.defaultJtaTimeout;
        boolean boolean38 = atomikosProperties36.enableLogging;
        atomikosProperties36.setSerialJtaTransactions(true);
        java.lang.Object obj41 = properties30.putIfAbsent((java.lang.Object) 100L, (java.lang.Object) true);
        boolean boolean42 = properties24.remove((java.lang.Object) 1.0f, (java.lang.Object) 100L);
        java.util.Properties properties43 = null;
        java.util.Properties properties44 = new java.util.Properties(properties43);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties45 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties46 = atomikosProperties45.asProperties();
        properties44.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties46);
        java.util.Enumeration<java.lang.Object> objEnumeration48 = properties46.keys();
        java.lang.Object obj51 = properties46.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Properties properties52 = new java.util.Properties(properties46);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties54 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties54.setService("");
        atomikosProperties54.setSerialJtaTransactions(true);
        java.util.Properties properties59 = atomikosProperties54.asProperties();
        properties59.clear();
        boolean boolean61 = properties24.replace((java.lang.Object) properties46, (java.lang.Object) 0.0d, (java.lang.Object) properties59);
        java.util.Enumeration<java.lang.Object> objEnumeration62 = properties24.elements();
        java.util.Properties properties63 = null;
        java.util.Properties properties64 = new java.util.Properties(properties63);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties65 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties66 = atomikosProperties65.asProperties();
        properties64.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties66);
        java.util.Enumeration<java.lang.Object> objEnumeration68 = properties66.keys();
        java.lang.Object obj71 = properties66.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection72 = properties66.values();
        boolean boolean73 = properties24.containsKey((java.lang.Object) properties66);
        java.util.Properties properties74 = null;
        java.util.Properties properties75 = new java.util.Properties(properties74);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties76 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties77 = atomikosProperties76.asProperties();
        properties75.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties77);
        java.util.Properties properties79 = new java.util.Properties(properties77);
        java.util.Properties properties80 = new java.util.Properties(properties79);
        java.lang.Object obj83 = properties79.setProperty("tmlog", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        boolean boolean84 = properties8.replace((java.lang.Object) int18, (java.lang.Object) boolean73, (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.io.OutputStream outputStream85 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties8.save(outputStream85, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "{}");
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10000L + "'", long12 == 10000L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10000L + "'", long13 == 10000L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 50 + "'", int18 == 50);
        org.junit.Assert.assertNotNull(properties24);
        org.junit.Assert.assertNotNull(properties30);
        org.junit.Assert.assertNotNull(objEnumeration32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 10000L + "'", long37 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(properties46);
        org.junit.Assert.assertNotNull(objEnumeration48);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNotNull(properties59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(objEnumeration62);
        org.junit.Assert.assertNotNull(properties66);
        org.junit.Assert.assertNotNull(objEnumeration68);
        org.junit.Assert.assertNull(obj71);
        org.junit.Assert.assertNotNull(objCollection72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(properties77);
        org.junit.Assert.assertNull(obj83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test0417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0417");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        java.lang.Object obj8 = properties3.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Properties properties9 = new java.util.Properties(properties3);
        java.lang.String str11 = properties3.getProperty("");
        java.io.OutputStream outputStream12 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.save(outputStream12, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, true=true, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test0418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0418");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Properties properties5 = new java.util.Properties(properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties7 = atomikosProperties6.asProperties();
        java.util.Set<java.lang.String> strSet8 = properties7.stringPropertyNames();
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties7);
        java.io.OutputStream outputStream10 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties5.store(outputStream10, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNotNull(strSet8);
    }

    @Test
    public void test0419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0419");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Collection<java.lang.Object> objCollection5 = properties1.values();
        properties1.clear();
        java.lang.Object obj9 = properties1.setProperty("{}", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.io.OutputStream outputStream10 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.store(outputStream10, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objCollection5);
        org.junit.Assert.assertNull(obj9);
    }

    @Test
    public void test0420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0420");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.io.OutputStream outputStream2 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.save(outputStream2, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0421");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.setSerialJtaTransactions(true);
        java.lang.String str4 = atomikosProperties0.logBaseName;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties6 = atomikosProperties5.asProperties();
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties9.setService("");
        atomikosProperties9.setThreadedTwoPhaseCommit(true);
        long long14 = atomikosProperties9.getCheckpointInterval();
        boolean boolean15 = atomikosProperties9.threadedTwoPhaseCommit;
        atomikosProperties0.set(properties7, "tmlog", (java.lang.Object) atomikosProperties9);
        java.util.Properties properties17 = atomikosProperties0.asProperties();
        java.util.Collection<java.lang.Object> objCollection18 = properties17.values();
        java.io.PrintWriter printWriter19 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties17.list(printWriter19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tmlog" + "'", str4, "tmlog");
        org.junit.Assert.assertNotNull(properties6);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 500L + "'", long14 == 500L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(properties17);
        org.junit.Assert.assertNotNull(objCollection18);
    }

    @Test
    public void test0422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0422");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        boolean boolean7 = properties3.containsValue((java.lang.Object) 0.0f);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long10 = atomikosProperties9.defaultJtaTimeout;
        boolean boolean11 = atomikosProperties9.enableLogging;
        atomikosProperties9.setSerialJtaTransactions(true);
        java.lang.Object obj14 = properties3.putIfAbsent((java.lang.Object) 100L, (java.lang.Object) true);
        int int15 = properties3.size();
        java.io.Writer writer16 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.store(writer16, "{}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
    }

    @Test
    public void test0423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0423");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        long long2 = atomikosProperties0.getDefaultJtaTimeout();
        long long3 = atomikosProperties0.getDefaultJtaTimeout();
        boolean boolean4 = atomikosProperties0.serialJtaTransactions;
        boolean boolean5 = atomikosProperties0.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean7 = atomikosProperties6.forceShutdownOnVmExit;
        atomikosProperties6.setSerialJtaTransactions(true);
        java.lang.String str10 = atomikosProperties6.logBaseName;
        boolean boolean11 = atomikosProperties6.forceShutdownOnVmExit;
        atomikosProperties6.enableLogging = false;
        java.util.Properties properties14 = atomikosProperties6.asProperties();
        java.util.Properties properties16 = null;
        java.util.Properties properties17 = new java.util.Properties(properties16);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties19 = atomikosProperties18.asProperties();
        properties17.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties19);
        java.util.Properties properties21 = new java.util.Properties(properties19);
        java.util.Collection<java.lang.Object> objCollection22 = properties19.values();
        java.util.Properties properties23 = new java.util.Properties(properties19);
        properties19.clear();
        java.util.Properties properties25 = null;
        java.util.Properties properties26 = new java.util.Properties(properties25);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties28 = atomikosProperties27.asProperties();
        properties26.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties28);
        java.util.Enumeration<java.lang.Object> objEnumeration30 = properties28.keys();
        java.lang.Object obj33 = properties28.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection34 = properties28.values();
        java.util.Properties properties35 = new java.util.Properties();
        java.lang.Object obj38 = properties35.getOrDefault((java.lang.Object) (short) 1, (java.lang.Object) (-1.0d));
        properties28.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties35);
        java.util.Properties properties40 = new java.util.Properties(properties28);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean42 = atomikosProperties41.forceShutdownOnVmExit;
        atomikosProperties41.setSerialJtaTransactions(true);
        java.lang.String str45 = atomikosProperties41.logBaseName;
        atomikosProperties41.service = "tmlog";
        boolean boolean48 = properties40.containsValue((java.lang.Object) "tmlog");
        java.util.Properties properties49 = new java.util.Properties(properties40);
        boolean boolean50 = properties19.contains((java.lang.Object) properties40);
        atomikosProperties0.set(properties14, "hi!", (java.lang.Object) boolean50);
        java.lang.Object obj54 = properties14.setProperty("", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=false, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.io.OutputStream outputStream55 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties14.store(outputStream55, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=true, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=tmlog, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10000L + "'", long2 == 10000L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 10000L + "'", long3 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "tmlog" + "'", str10, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertNotNull(properties19);
        org.junit.Assert.assertNotNull(objCollection22);
        org.junit.Assert.assertNotNull(properties28);
        org.junit.Assert.assertNotNull(objEnumeration30);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNotNull(objCollection34);
        org.junit.Assert.assertEquals("'" + obj38 + "' != '" + (-1.0d) + "'", obj38, (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "tmlog" + "'", str45, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(obj54);
    }

    @Test
    public void test0424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0424");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        atomikosProperties0.setSerialJtaTransactions(true);
        atomikosProperties0.setEnableLogging(false);
        boolean boolean7 = atomikosProperties0.forceShutdownOnVmExit;
        boolean boolean8 = atomikosProperties0.threadedTwoPhaseCommit;
        java.util.Properties properties9 = atomikosProperties0.asProperties();
        java.util.Enumeration<java.lang.Object> objEnumeration10 = properties9.elements();
        java.io.PrintStream printStream11 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties9.list(printStream11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertNotNull(objEnumeration10);
    }

    @Test
    public void test0425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0425");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties(properties1);
        java.util.Properties properties3 = new java.util.Properties(properties1);
        boolean boolean4 = properties1.isEmpty();
        java.util.Properties properties5 = new java.util.Properties(properties1);
        java.io.Reader reader6 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.load(reader6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test0426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0426");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        boolean boolean7 = properties3.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        java.util.Properties properties15 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet16 = properties15.keySet();
        boolean boolean17 = properties9.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) properties15);
        java.util.Enumeration<java.lang.Object> objEnumeration18 = properties9.elements();
        boolean boolean20 = properties3.remove((java.lang.Object) properties9, (java.lang.Object) 50);
        java.util.Properties properties21 = null;
        java.util.Properties properties22 = new java.util.Properties(properties21);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties24 = atomikosProperties23.asProperties();
        properties22.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties24);
        java.util.Properties properties26 = new java.util.Properties(properties24);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties27.defaultJtaTimeout = (byte) -1;
        java.util.Properties properties30 = atomikosProperties27.asProperties();
        boolean boolean31 = properties24.contains((java.lang.Object) properties30);
        java.util.Properties properties32 = null;
        java.util.Properties properties33 = new java.util.Properties(properties32);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties34 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties35 = atomikosProperties34.asProperties();
        properties33.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties35);
        java.util.Enumeration<java.lang.Object> objEnumeration37 = properties35.keys();
        boolean boolean39 = properties35.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties40 = new java.util.Properties(properties35);
        java.lang.Object obj41 = properties9.replace((java.lang.Object) properties30, (java.lang.Object) properties40);
        java.util.Set<java.lang.Object> objSet42 = properties30.keySet();
        java.util.Properties properties43 = new java.util.Properties(properties30);
        java.io.Reader reader44 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties30.load(reader44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNotNull(objSet16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objEnumeration18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(properties24);
        org.junit.Assert.assertNotNull(properties30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(properties35);
        org.junit.Assert.assertNotNull(objEnumeration37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertNotNull(objSet42);
    }

    @Test
    public void test0427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0427");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        java.lang.Object obj8 = properties3.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection9 = properties3.values();
        java.util.Properties properties10 = new java.util.Properties();
        java.lang.Object obj13 = properties10.getOrDefault((java.lang.Object) (short) 1, (java.lang.Object) (-1.0d));
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        java.util.Properties properties15 = new java.util.Properties(properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean17 = atomikosProperties16.forceShutdownOnVmExit;
        atomikosProperties16.setSerialJtaTransactions(true);
        java.lang.String str20 = atomikosProperties16.logBaseName;
        atomikosProperties16.service = "tmlog";
        boolean boolean23 = properties15.containsValue((java.lang.Object) "tmlog");
        java.io.OutputStream outputStream24 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties15.save(outputStream24, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=true, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=tmlog, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(objCollection9);
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + (-1.0d) + "'", obj13, (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "tmlog" + "'", str20, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test0428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0428");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Properties properties5 = new java.util.Properties(properties3);
        java.util.Properties properties6 = new java.util.Properties(properties3);
        java.lang.String str8 = properties3.getProperty("hi!");
        java.util.Enumeration<?> wildcardEnumeration9 = properties3.propertyNames();
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(wildcardEnumeration9);
    }

    @Test
    public void test0429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0429");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.checkpointInterval = 1L;
        boolean boolean4 = atomikosProperties0.forceShutdownOnVmExit;
        long long5 = atomikosProperties0.defaultJtaTimeout;
        atomikosProperties0.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 10000L + "'", long5 == 10000L);
    }

    @Test
    public void test0430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0430");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        java.lang.Object obj8 = properties3.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection9 = properties3.values();
        java.util.Set<java.lang.String> strSet10 = properties3.stringPropertyNames();
        java.util.Enumeration<java.lang.Object> objEnumeration11 = properties3.elements();
        java.util.Enumeration<java.lang.Object> objEnumeration12 = properties3.elements();
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(objCollection9);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(objEnumeration11);
        org.junit.Assert.assertNotNull(objEnumeration12);
    }

    @Test
    public void test0431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0431");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        boolean boolean3 = atomikosProperties0.isEnableLogging();
        java.util.Properties properties4 = atomikosProperties0.asProperties();
        atomikosProperties0.setDefaultJtaTimeout(300000L);
        boolean boolean7 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.forceShutdownOnVmExit = true;
        atomikosProperties0.setSerialJtaTransactions(false);
        java.lang.Class<?> wildcardClass12 = atomikosProperties0.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(properties4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0432");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        java.lang.Object obj8 = properties3.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection9 = properties3.values();
        java.util.Properties properties10 = new java.util.Properties();
        java.lang.Object obj13 = properties10.getOrDefault((java.lang.Object) (short) 1, (java.lang.Object) (-1.0d));
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        java.util.Properties properties15 = new java.util.Properties(properties3);
        java.lang.String str16 = properties3.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties17.setService("");
        atomikosProperties17.setThreadedTwoPhaseCommit(true);
        long long22 = atomikosProperties17.getCheckpointInterval();
        atomikosProperties17.maxTimeout = (-1);
        java.util.Properties properties25 = atomikosProperties17.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long27 = atomikosProperties26.defaultJtaTimeout;
        boolean boolean28 = atomikosProperties26.enableLogging;
        atomikosProperties26.setSerialJtaTransactions(true);
        java.util.Properties properties31 = atomikosProperties26.asProperties();
        properties25.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties31);
        java.util.Enumeration<java.lang.Object> objEnumeration33 = properties25.elements();
        java.util.Properties properties34 = new java.util.Properties(properties25);
        java.lang.Object obj35 = properties3.get((java.lang.Object) properties25);
        java.util.Set<java.lang.String> strSet36 = properties3.stringPropertyNames();
        java.io.Writer writer37 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.store(writer37, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(objCollection9);
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + (-1.0d) + "'", obj13, (-1.0d));
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str16, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 500L + "'", long22 == 500L);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10000L + "'", long27 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(properties31);
        org.junit.Assert.assertNotNull(objEnumeration33);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNotNull(strSet36);
    }

    @Test
    public void test0433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0433");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        boolean boolean7 = properties3.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        java.util.Enumeration<java.lang.Object> objEnumeration13 = properties11.keys();
        java.lang.Object obj16 = properties11.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection17 = properties11.values();
        boolean boolean18 = properties3.containsKey((java.lang.Object) properties11);
        java.util.Properties properties19 = new java.util.Properties(properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long21 = atomikosProperties20.defaultJtaTimeout;
        boolean boolean22 = atomikosProperties20.enableLogging;
        atomikosProperties20.setSerialJtaTransactions(true);
        java.util.Properties properties25 = atomikosProperties20.asProperties();
        java.util.Properties properties26 = atomikosProperties20.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean28 = atomikosProperties27.forceShutdownOnVmExit;
        atomikosProperties27.setSerialJtaTransactions(true);
        java.lang.String str31 = atomikosProperties27.logBaseName;
        boolean boolean32 = atomikosProperties27.forceShutdownOnVmExit;
        int int33 = atomikosProperties27.maxActives;
        java.lang.String str34 = atomikosProperties27.logBaseName;
        atomikosProperties27.setForceShutdownOnVmExit(true);
        java.util.Properties properties37 = atomikosProperties27.asProperties();
        boolean boolean38 = atomikosProperties27.isForceShutdownOnVmExit();
        java.util.Properties properties39 = atomikosProperties27.asProperties();
        java.lang.Object obj40 = properties3.replace((java.lang.Object) atomikosProperties20, (java.lang.Object) atomikosProperties27);
        java.lang.String str41 = atomikosProperties27.getLogBaseDir();
        atomikosProperties27.logBaseName = "{}";
        java.util.Properties properties44 = atomikosProperties27.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties45 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties45.setService("");
        atomikosProperties45.setSerialJtaTransactions(true);
        atomikosProperties45.setEnableLogging(false);
        atomikosProperties45.logBaseName = "tmlog";
        atomikosProperties45.setMaxActives((int) '#');
        atomikosProperties45.setService("hi!");
        java.lang.Object obj58 = properties44.get((java.lang.Object) "hi!");
        java.util.Properties properties59 = new java.util.Properties(properties44);
        java.io.OutputStream outputStream60 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties59.storeToXML(outputStream60, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=false, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNotNull(objEnumeration13);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(objCollection17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10000L + "'", long21 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertNotNull(properties26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "tmlog" + "'", str31, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 50 + "'", int33 == 50);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "tmlog" + "'", str34, "tmlog");
        org.junit.Assert.assertNotNull(properties37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(properties39);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(properties44);
        org.junit.Assert.assertNull(obj58);
    }

    @Test
    public void test0434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0434");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        boolean boolean3 = atomikosProperties0.isEnableLogging();
        java.util.Properties properties4 = atomikosProperties0.asProperties();
        properties4.clear();
        java.util.Properties properties6 = null;
        java.util.Properties properties7 = new java.util.Properties(properties6);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties9 = atomikosProperties8.asProperties();
        properties7.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties9);
        java.util.Enumeration<java.lang.Object> objEnumeration11 = properties9.keys();
        java.lang.Object obj13 = properties4.put((java.lang.Object) properties9, (java.lang.Object) (byte) 0);
        boolean boolean14 = properties9.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean16 = atomikosProperties15.forceShutdownOnVmExit;
        atomikosProperties15.setSerialJtaTransactions(true);
        boolean boolean19 = properties9.containsKey((java.lang.Object) atomikosProperties15);
        atomikosProperties15.setTransactionManagerUniqueName("hi!");
        java.lang.String str22 = atomikosProperties15.getService();
        java.lang.String str23 = atomikosProperties15.getTransactionManagerUniqueName();
        boolean boolean24 = atomikosProperties15.enableLogging;
        boolean boolean25 = atomikosProperties15.forceShutdownOnVmExit;
        java.lang.String str26 = atomikosProperties15.logBaseDir;
        atomikosProperties15.setSerialJtaTransactions(true);
        atomikosProperties15.setThreadedTwoPhaseCommit(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(properties4);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertNotNull(objEnumeration11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(str26);
    }

    @Test
    public void test0435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0435");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        java.lang.Object obj8 = properties3.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection9 = properties3.values();
        java.util.Properties properties10 = new java.util.Properties();
        java.lang.Object obj13 = properties10.getOrDefault((java.lang.Object) (short) 1, (java.lang.Object) (-1.0d));
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        java.util.Properties properties15 = new java.util.Properties(properties3);
        java.lang.String str16 = properties3.toString();
        java.util.Enumeration<java.lang.Object> objEnumeration17 = properties3.elements();
        java.util.Properties properties18 = null;
        java.util.Properties properties19 = new java.util.Properties(properties18);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties21 = atomikosProperties20.asProperties();
        properties19.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties21);
        java.util.Enumeration<java.lang.Object> objEnumeration23 = properties21.keys();
        java.lang.Object obj26 = properties21.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection27 = properties21.values();
        java.util.Properties properties28 = new java.util.Properties();
        java.lang.Object obj31 = properties28.getOrDefault((java.lang.Object) (short) 1, (java.lang.Object) (-1.0d));
        properties21.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties28);
        java.util.Properties properties33 = new java.util.Properties(properties21);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties34 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties34.setService("");
        boolean boolean37 = atomikosProperties34.isEnableLogging();
        java.util.Properties properties38 = atomikosProperties34.asProperties();
        atomikosProperties34.setSerialJtaTransactions(false);
        atomikosProperties34.enableLogging = false;
        java.lang.String str43 = atomikosProperties34.service;
        atomikosProperties34.forceShutdownOnVmExit = false;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties46 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean47 = atomikosProperties46.forceShutdownOnVmExit;
        atomikosProperties46.setSerialJtaTransactions(true);
        java.lang.String str50 = atomikosProperties46.logBaseName;
        boolean boolean51 = atomikosProperties46.forceShutdownOnVmExit;
        int int52 = atomikosProperties46.maxActives;
        java.lang.String str53 = atomikosProperties46.logBaseName;
        atomikosProperties46.setForceShutdownOnVmExit(true);
        java.util.Properties properties56 = atomikosProperties46.asProperties();
        boolean boolean57 = atomikosProperties46.isForceShutdownOnVmExit();
        java.util.Properties properties58 = atomikosProperties46.asProperties();
        atomikosProperties46.setSerialJtaTransactions(false);
        atomikosProperties46.setCheckpointInterval((long) 'a');
        java.lang.Object obj63 = properties21.put((java.lang.Object) atomikosProperties34, (java.lang.Object) 'a');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean64 = properties3.containsValue(obj63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(objCollection9);
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + (-1.0d) + "'", obj13, (-1.0d));
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str16, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNotNull(objEnumeration17);
        org.junit.Assert.assertNotNull(properties21);
        org.junit.Assert.assertNotNull(objEnumeration23);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(objCollection27);
        org.junit.Assert.assertEquals("'" + obj31 + "' != '" + (-1.0d) + "'", obj31, (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(properties38);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "tmlog" + "'", str50, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 50 + "'", int52 == 50);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "tmlog" + "'", str53, "tmlog");
        org.junit.Assert.assertNotNull(properties56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(properties58);
        org.junit.Assert.assertNull(obj63);
    }

    @Test
    public void test0436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0436");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.defaultJtaTimeout;
        boolean boolean2 = atomikosProperties0.enableLogging;
        int int3 = atomikosProperties0.maxActives;
        java.lang.String str4 = atomikosProperties0.getService();
        java.util.Properties properties5 = null;
        java.util.Properties properties6 = new java.util.Properties(properties5);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties8 = atomikosProperties7.asProperties();
        properties6.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        java.util.Enumeration<java.lang.Object> objEnumeration10 = properties8.keys();
        boolean boolean12 = properties8.containsValue((java.lang.Object) 0.0f);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long15 = atomikosProperties14.defaultJtaTimeout;
        boolean boolean16 = atomikosProperties14.enableLogging;
        atomikosProperties14.setSerialJtaTransactions(true);
        java.lang.Object obj19 = properties8.putIfAbsent((java.lang.Object) 100L, (java.lang.Object) true);
        java.util.Enumeration<java.lang.Object> objEnumeration20 = properties8.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties22.setService("");
        atomikosProperties22.setSerialJtaTransactions(true);
        atomikosProperties22.setEnableLogging(false);
        atomikosProperties22.service = "tmlog";
        atomikosProperties0.set(properties8, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", (java.lang.Object) atomikosProperties22);
        atomikosProperties22.service = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=false, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties22.setService("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, true=true, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str36 = atomikosProperties22.logBaseDir;
        java.lang.String str37 = atomikosProperties22.getLogBaseDir();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 10000L + "'", long1 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 50 + "'", int3 == 50);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertNotNull(objEnumeration10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10000L + "'", long15 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNotNull(objEnumeration20);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(str37);
    }

    @Test
    public void test0437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0437");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        boolean boolean7 = properties3.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        java.util.Enumeration<java.lang.Object> objEnumeration13 = properties11.keys();
        java.lang.Object obj16 = properties11.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection17 = properties11.values();
        boolean boolean18 = properties3.containsKey((java.lang.Object) properties11);
        java.util.Properties properties19 = new java.util.Properties(properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long21 = atomikosProperties20.defaultJtaTimeout;
        boolean boolean22 = atomikosProperties20.enableLogging;
        atomikosProperties20.setSerialJtaTransactions(true);
        java.util.Properties properties25 = atomikosProperties20.asProperties();
        java.util.Properties properties26 = atomikosProperties20.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean28 = atomikosProperties27.forceShutdownOnVmExit;
        atomikosProperties27.setSerialJtaTransactions(true);
        java.lang.String str31 = atomikosProperties27.logBaseName;
        boolean boolean32 = atomikosProperties27.forceShutdownOnVmExit;
        int int33 = atomikosProperties27.maxActives;
        java.lang.String str34 = atomikosProperties27.logBaseName;
        atomikosProperties27.setForceShutdownOnVmExit(true);
        java.util.Properties properties37 = atomikosProperties27.asProperties();
        boolean boolean38 = atomikosProperties27.isForceShutdownOnVmExit();
        java.util.Properties properties39 = atomikosProperties27.asProperties();
        java.lang.Object obj40 = properties3.replace((java.lang.Object) atomikosProperties20, (java.lang.Object) atomikosProperties27);
        java.util.Set<java.lang.String> strSet41 = properties3.stringPropertyNames();
        java.util.Set<java.lang.Object> objSet42 = properties3.keySet();
        java.util.Properties properties43 = null;
        java.util.Properties properties44 = new java.util.Properties(properties43);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties45 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties46 = atomikosProperties45.asProperties();
        properties44.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties46);
        java.util.Properties properties48 = new java.util.Properties(properties46);
        java.util.Properties properties49 = new java.util.Properties(properties46);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties51 = atomikosProperties50.asProperties();
        java.util.Properties properties52 = atomikosProperties50.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties53 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties53.setService("");
        boolean boolean56 = atomikosProperties53.isEnableLogging();
        java.util.Properties properties57 = atomikosProperties53.asProperties();
        java.lang.Object obj58 = properties46.getOrDefault((java.lang.Object) properties52, (java.lang.Object) atomikosProperties53);
        java.util.Collection<java.lang.Object> objCollection59 = properties46.values();
        java.lang.Object obj60 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj61 = properties3.putIfAbsent((java.lang.Object) objCollection59, obj60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNotNull(objEnumeration13);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(objCollection17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10000L + "'", long21 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertNotNull(properties26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "tmlog" + "'", str31, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 50 + "'", int33 == 50);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "tmlog" + "'", str34, "tmlog");
        org.junit.Assert.assertNotNull(properties37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(properties39);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertNotNull(objSet42);
        org.junit.Assert.assertNotNull(properties46);
        org.junit.Assert.assertNotNull(properties51);
        org.junit.Assert.assertNotNull(properties52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(properties57);
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertNotNull(objCollection59);
    }

    @Test
    public void test0438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0438");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.setSerialJtaTransactions(true);
        java.lang.String str4 = atomikosProperties0.logBaseName;
        boolean boolean5 = atomikosProperties0.forceShutdownOnVmExit;
        int int6 = atomikosProperties0.maxActives;
        java.lang.String str7 = atomikosProperties0.logBaseName;
        atomikosProperties0.transactionManagerUniqueName = "hi!";
        atomikosProperties0.setMaxActives((int) (short) 10);
        java.util.Properties properties12 = atomikosProperties0.asProperties();
        java.util.Properties properties13 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties14.setService("");
        atomikosProperties14.setSerialJtaTransactions(true);
        java.util.Properties properties19 = atomikosProperties14.asProperties();
        properties19.clear();
        java.util.Properties properties22 = null;
        java.util.Properties properties23 = new java.util.Properties(properties22);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties25 = atomikosProperties24.asProperties();
        properties23.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties25);
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties25.keys();
        boolean boolean29 = properties25.containsValue((java.lang.Object) 0.0f);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long32 = atomikosProperties31.defaultJtaTimeout;
        boolean boolean33 = atomikosProperties31.enableLogging;
        atomikosProperties31.setSerialJtaTransactions(true);
        java.lang.Object obj36 = properties25.putIfAbsent((java.lang.Object) 100L, (java.lang.Object) true);
        boolean boolean37 = properties19.remove((java.lang.Object) 1.0f, (java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties38.setService("");
        atomikosProperties38.setSerialJtaTransactions(true);
        java.util.Properties properties43 = atomikosProperties38.asProperties();
        properties43.clear();
        java.lang.Object obj46 = properties19.put((java.lang.Object) properties43, (java.lang.Object) (short) 1);
        java.util.Enumeration<java.lang.Object> objEnumeration47 = properties19.elements();
        java.util.Set<java.lang.String> strSet48 = properties19.stringPropertyNames();
        java.lang.Object obj50 = properties13.put((java.lang.Object) strSet48, (java.lang.Object) (-1.0d));
        java.util.Set<java.lang.Object> objSet51 = properties13.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties52 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties52.setService("");
        boolean boolean55 = atomikosProperties52.isEnableLogging();
        java.util.Properties properties56 = atomikosProperties52.asProperties();
        atomikosProperties52.setSerialJtaTransactions(false);
        java.lang.String str59 = atomikosProperties52.getLogBaseName();
        atomikosProperties52.setTransactionManagerUniqueName("");
        boolean boolean62 = properties13.contains((java.lang.Object) atomikosProperties52);
        java.io.OutputStream outputStream63 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties13.save(outputStream63, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tmlog" + "'", str4, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 50 + "'", int6 == 50);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "tmlog" + "'", str7, "tmlog");
        org.junit.Assert.assertNotNull(properties12);
        org.junit.Assert.assertNotNull(properties13);
        org.junit.Assert.assertNotNull(properties19);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertNotNull(objEnumeration27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 10000L + "'", long32 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(properties43);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNotNull(objEnumeration47);
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertNotNull(objSet51);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(properties56);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "tmlog" + "'", str59, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test0439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0439");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration6 = properties3.elements();
        java.util.Properties properties7 = null;
        java.util.Properties properties8 = new java.util.Properties(properties7);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties10 = atomikosProperties9.asProperties();
        properties8.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        java.util.Properties properties12 = new java.util.Properties(properties10);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties13.defaultJtaTimeout = (byte) -1;
        java.util.Properties properties16 = atomikosProperties13.asProperties();
        boolean boolean17 = properties10.contains((java.lang.Object) properties16);
        java.util.Properties properties18 = null;
        java.util.Properties properties19 = new java.util.Properties(properties18);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties21 = atomikosProperties20.asProperties();
        properties19.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties21);
        java.util.Enumeration<java.lang.Object> objEnumeration23 = properties21.keys();
        boolean boolean25 = properties21.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties26 = null;
        java.util.Properties properties27 = new java.util.Properties(properties26);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties29 = atomikosProperties28.asProperties();
        properties27.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties29);
        java.util.Enumeration<java.lang.Object> objEnumeration31 = properties29.keys();
        java.lang.Object obj34 = properties29.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection35 = properties29.values();
        boolean boolean36 = properties21.containsKey((java.lang.Object) properties29);
        java.util.Properties properties37 = new java.util.Properties(properties21);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long39 = atomikosProperties38.defaultJtaTimeout;
        boolean boolean40 = atomikosProperties38.enableLogging;
        atomikosProperties38.setSerialJtaTransactions(true);
        java.util.Properties properties43 = atomikosProperties38.asProperties();
        java.util.Properties properties44 = atomikosProperties38.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties45 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean46 = atomikosProperties45.forceShutdownOnVmExit;
        atomikosProperties45.setSerialJtaTransactions(true);
        java.lang.String str49 = atomikosProperties45.logBaseName;
        boolean boolean50 = atomikosProperties45.forceShutdownOnVmExit;
        int int51 = atomikosProperties45.maxActives;
        java.lang.String str52 = atomikosProperties45.logBaseName;
        atomikosProperties45.setForceShutdownOnVmExit(true);
        java.util.Properties properties55 = atomikosProperties45.asProperties();
        boolean boolean56 = atomikosProperties45.isForceShutdownOnVmExit();
        java.util.Properties properties57 = atomikosProperties45.asProperties();
        java.lang.Object obj58 = properties21.replace((java.lang.Object) atomikosProperties38, (java.lang.Object) atomikosProperties45);
        java.lang.Object obj59 = properties3.putIfAbsent((java.lang.Object) properties16, (java.lang.Object) atomikosProperties45);
        java.util.Collection<java.lang.Object> objCollection60 = properties16.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet61 = properties16.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties62 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties62.setService("");
        atomikosProperties62.setThreadedTwoPhaseCommit(true);
        long long67 = atomikosProperties62.getCheckpointInterval();
        atomikosProperties62.maxTimeout = (-1);
        java.util.Properties properties70 = atomikosProperties62.asProperties();
        java.util.Enumeration<?> wildcardEnumeration71 = properties70.propertyNames();
        java.util.Set<java.lang.String> strSet72 = properties70.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties73 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties74 = atomikosProperties73.asProperties();
        long long75 = atomikosProperties73.getDefaultJtaTimeout();
        long long76 = atomikosProperties73.getDefaultJtaTimeout();
        boolean boolean77 = atomikosProperties73.serialJtaTransactions;
        boolean boolean78 = properties70.contains((java.lang.Object) boolean77);
        boolean boolean79 = properties16.contains((java.lang.Object) boolean78);
        java.io.Writer writer80 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties16.store(writer80, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNotNull(objEnumeration6);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(properties21);
        org.junit.Assert.assertNotNull(objEnumeration23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(properties29);
        org.junit.Assert.assertNotNull(objEnumeration31);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNotNull(objCollection35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 10000L + "'", long39 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(properties43);
        org.junit.Assert.assertNotNull(properties44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "tmlog" + "'", str49, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 50 + "'", int51 == 50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "tmlog" + "'", str52, "tmlog");
        org.junit.Assert.assertNotNull(properties55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(properties57);
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertNotNull(objCollection60);
        org.junit.Assert.assertNotNull(objEntrySet61);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 500L + "'", long67 == 500L);
        org.junit.Assert.assertNotNull(properties70);
        org.junit.Assert.assertNotNull(wildcardEnumeration71);
        org.junit.Assert.assertNotNull(strSet72);
        org.junit.Assert.assertNotNull(properties74);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 10000L + "'", long75 == 10000L);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 10000L + "'", long76 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test0440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0440");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.setSerialJtaTransactions(true);
        java.lang.String str4 = atomikosProperties0.logBaseName;
        boolean boolean5 = atomikosProperties0.forceShutdownOnVmExit;
        int int6 = atomikosProperties0.maxActives;
        java.lang.String str7 = atomikosProperties0.logBaseName;
        atomikosProperties0.serialJtaTransactions = true;
        java.lang.String str10 = atomikosProperties0.service;
        java.lang.String str11 = atomikosProperties0.getTransactionManagerUniqueName();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tmlog" + "'", str4, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 50 + "'", int6 == 50);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "tmlog" + "'", str7, "tmlog");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test0441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0441");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration6 = properties3.elements();
        java.util.Properties properties7 = null;
        java.util.Properties properties8 = new java.util.Properties(properties7);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties10 = atomikosProperties9.asProperties();
        properties8.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        java.util.Properties properties12 = new java.util.Properties(properties10);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties13.defaultJtaTimeout = (byte) -1;
        java.util.Properties properties16 = atomikosProperties13.asProperties();
        boolean boolean17 = properties10.contains((java.lang.Object) properties16);
        java.util.Properties properties18 = null;
        java.util.Properties properties19 = new java.util.Properties(properties18);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties21 = atomikosProperties20.asProperties();
        properties19.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties21);
        java.util.Enumeration<java.lang.Object> objEnumeration23 = properties21.keys();
        boolean boolean25 = properties21.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties26 = null;
        java.util.Properties properties27 = new java.util.Properties(properties26);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties29 = atomikosProperties28.asProperties();
        properties27.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties29);
        java.util.Enumeration<java.lang.Object> objEnumeration31 = properties29.keys();
        java.lang.Object obj34 = properties29.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection35 = properties29.values();
        boolean boolean36 = properties21.containsKey((java.lang.Object) properties29);
        java.util.Properties properties37 = new java.util.Properties(properties21);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long39 = atomikosProperties38.defaultJtaTimeout;
        boolean boolean40 = atomikosProperties38.enableLogging;
        atomikosProperties38.setSerialJtaTransactions(true);
        java.util.Properties properties43 = atomikosProperties38.asProperties();
        java.util.Properties properties44 = atomikosProperties38.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties45 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean46 = atomikosProperties45.forceShutdownOnVmExit;
        atomikosProperties45.setSerialJtaTransactions(true);
        java.lang.String str49 = atomikosProperties45.logBaseName;
        boolean boolean50 = atomikosProperties45.forceShutdownOnVmExit;
        int int51 = atomikosProperties45.maxActives;
        java.lang.String str52 = atomikosProperties45.logBaseName;
        atomikosProperties45.setForceShutdownOnVmExit(true);
        java.util.Properties properties55 = atomikosProperties45.asProperties();
        boolean boolean56 = atomikosProperties45.isForceShutdownOnVmExit();
        java.util.Properties properties57 = atomikosProperties45.asProperties();
        java.lang.Object obj58 = properties21.replace((java.lang.Object) atomikosProperties38, (java.lang.Object) atomikosProperties45);
        java.lang.Object obj59 = properties3.putIfAbsent((java.lang.Object) properties16, (java.lang.Object) atomikosProperties45);
        atomikosProperties45.setMaxTimeout((long) 100);
        java.lang.String str62 = atomikosProperties45.getService();
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNotNull(objEnumeration6);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(properties21);
        org.junit.Assert.assertNotNull(objEnumeration23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(properties29);
        org.junit.Assert.assertNotNull(objEnumeration31);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNotNull(objCollection35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 10000L + "'", long39 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(properties43);
        org.junit.Assert.assertNotNull(properties44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "tmlog" + "'", str49, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 50 + "'", int51 == 50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "tmlog" + "'", str52, "tmlog");
        org.junit.Assert.assertNotNull(properties55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(properties57);
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertNull(str62);
    }

    @Test
    public void test0442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0442");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Properties properties5 = new java.util.Properties(properties3);
        java.util.Collection<java.lang.Object> objCollection6 = properties3.values();
        java.util.Properties properties7 = new java.util.Properties(properties3);
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        java.util.Properties properties15 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet16 = properties15.keySet();
        boolean boolean17 = properties9.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) properties15);
        java.util.Enumeration<java.lang.Object> objEnumeration18 = properties9.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long20 = atomikosProperties19.defaultJtaTimeout;
        boolean boolean21 = atomikosProperties19.enableLogging;
        atomikosProperties19.setSerialJtaTransactions(true);
        java.util.Properties properties24 = atomikosProperties19.asProperties();
        java.util.Properties properties25 = null;
        java.util.Properties properties26 = new java.util.Properties(properties25);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties28 = atomikosProperties27.asProperties();
        properties26.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties28);
        java.util.Enumeration<java.lang.Object> objEnumeration30 = properties28.keys();
        java.lang.Object obj33 = properties28.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection34 = properties28.values();
        java.util.Set<java.lang.String> strSet35 = properties28.stringPropertyNames();
        boolean boolean36 = properties24.contains((java.lang.Object) properties28);
        java.lang.Object obj37 = properties3.replace((java.lang.Object) properties9, (java.lang.Object) properties28);
        java.util.Properties properties38 = null;
        java.util.Properties properties39 = new java.util.Properties(properties38);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties41 = atomikosProperties40.asProperties();
        properties39.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties41);
        java.util.Enumeration<java.lang.Object> objEnumeration43 = properties41.keys();
        java.lang.Object obj46 = properties41.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Properties properties47 = new java.util.Properties(properties41);
        boolean boolean48 = properties3.containsValue((java.lang.Object) properties41);
        java.util.Collection<java.lang.Object> objCollection49 = properties41.values();
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objCollection6);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNotNull(objSet16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objEnumeration18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10000L + "'", long20 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(properties24);
        org.junit.Assert.assertNotNull(properties28);
        org.junit.Assert.assertNotNull(objEnumeration30);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNotNull(objCollection34);
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNotNull(properties41);
        org.junit.Assert.assertNotNull(objEnumeration43);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(objCollection49);
    }

    @Test
    public void test0443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0443");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.setSerialJtaTransactions(true);
        java.lang.String str4 = atomikosProperties0.logBaseName;
        atomikosProperties0.service = "tmlog";
        long long7 = atomikosProperties0.checkpointInterval;
        boolean boolean8 = atomikosProperties0.isForceShutdownOnVmExit();
        int int9 = atomikosProperties0.getMaxActives();
        java.util.Properties properties10 = atomikosProperties0.asProperties();
        java.lang.Object obj11 = properties10.clone();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tmlog" + "'", str4, "tmlog");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertNotNull(obj11);
// flaky:         org.junit.Assert.assertEquals(obj11.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.service=tmlog, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.service=tmlog, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.service=tmlog, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
    }

    @Test
    public void test0444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0444");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.checkpointInterval = 300000L;
        java.util.Properties properties4 = null;
        java.util.Properties properties5 = new java.util.Properties(properties4);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties7 = atomikosProperties6.asProperties();
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties7);
        java.util.Enumeration<java.lang.Object> objEnumeration9 = properties7.keys();
        boolean boolean11 = properties7.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties12 = null;
        java.util.Properties properties13 = new java.util.Properties(properties12);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties15 = atomikosProperties14.asProperties();
        properties13.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties15);
        java.util.Properties properties19 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet20 = properties19.keySet();
        boolean boolean21 = properties13.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) properties19);
        java.util.Enumeration<java.lang.Object> objEnumeration22 = properties13.elements();
        boolean boolean24 = properties7.remove((java.lang.Object) properties13, (java.lang.Object) 50);
        java.util.Properties properties26 = null;
        java.util.Properties properties27 = new java.util.Properties(properties26);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties29 = atomikosProperties28.asProperties();
        properties27.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties29);
        java.util.Properties properties31 = new java.util.Properties(properties29);
        java.util.Collection<java.lang.Object> objCollection32 = properties29.values();
        atomikosProperties0.set(properties13, "{}", (java.lang.Object) objCollection32);
        java.util.Properties properties34 = atomikosProperties0.asProperties();
        java.io.PrintStream printStream35 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties34.list(printStream35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNotNull(objEnumeration9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertNotNull(objSet20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(objEnumeration22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(properties29);
        org.junit.Assert.assertNotNull(objCollection32);
        org.junit.Assert.assertNotNull(properties34);
    }

    @Test
    public void test0445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0445");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = null;
        java.util.Properties properties2 = new java.util.Properties(properties1);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties3 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties4 = atomikosProperties3.asProperties();
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        java.util.Enumeration<java.lang.Object> objEnumeration6 = properties4.keys();
        boolean boolean8 = properties4.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties9 = null;
        java.util.Properties properties10 = new java.util.Properties(properties9);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties12 = atomikosProperties11.asProperties();
        properties10.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties12);
        java.util.Enumeration<java.lang.Object> objEnumeration14 = properties12.keys();
        java.lang.Object obj17 = properties12.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection18 = properties12.values();
        boolean boolean19 = properties4.containsKey((java.lang.Object) properties12);
        java.util.Properties properties20 = new java.util.Properties(properties4);
        java.util.Properties properties21 = new java.util.Properties(properties4);
        java.lang.String str22 = properties21.toString();
        java.lang.Object obj25 = properties21.setProperty("tmlog", "");
        java.util.Properties properties26 = new java.util.Properties(properties21);
        java.util.Properties properties27 = new java.util.Properties(properties21);
        java.lang.Object obj28 = properties0.remove((java.lang.Object) properties27);
        java.lang.String str29 = properties0.toString();
        java.util.Enumeration<java.lang.Object> objEnumeration30 = properties0.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties31.setService("");
        atomikosProperties31.setSerialJtaTransactions(true);
        atomikosProperties31.setEnableLogging(false);
        atomikosProperties31.service = "tmlog";
        atomikosProperties31.threadedTwoPhaseCommit = true;
        boolean boolean42 = atomikosProperties31.isForceShutdownOnVmExit();
        java.util.Properties properties43 = atomikosProperties31.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties45 = atomikosProperties44.asProperties();
        long long46 = atomikosProperties44.getDefaultJtaTimeout();
        long long47 = atomikosProperties44.getDefaultJtaTimeout();
        atomikosProperties44.setForceShutdownOnVmExit(false);
        java.lang.Object obj50 = properties0.getOrDefault((java.lang.Object) atomikosProperties31, (java.lang.Object) atomikosProperties44);
        java.lang.String str51 = properties0.toString();
        java.io.PrintWriter printWriter52 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.list(printWriter52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties4);
        org.junit.Assert.assertNotNull(objEnumeration6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(properties12);
        org.junit.Assert.assertNotNull(objEnumeration14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(objCollection18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{}" + "'", str22, "{}");
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "{}" + "'", str29, "{}");
        org.junit.Assert.assertNotNull(objEnumeration30);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(properties43);
        org.junit.Assert.assertNotNull(properties45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 10000L + "'", long46 == 10000L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 10000L + "'", long47 == 10000L);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "{}" + "'", str51, "{}");
    }

    @Test
    public void test0446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0446");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        java.lang.Object obj8 = properties3.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection9 = properties3.values();
        java.util.Properties properties10 = new java.util.Properties();
        java.lang.Object obj13 = properties10.getOrDefault((java.lang.Object) (short) 1, (java.lang.Object) (-1.0d));
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        java.util.Properties properties15 = new java.util.Properties(properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean17 = atomikosProperties16.forceShutdownOnVmExit;
        atomikosProperties16.setSerialJtaTransactions(true);
        java.lang.String str20 = atomikosProperties16.logBaseName;
        atomikosProperties16.service = "tmlog";
        boolean boolean23 = properties15.containsValue((java.lang.Object) "tmlog");
        java.io.InputStream inputStream24 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties15.loadFromXML(inputStream24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(objCollection9);
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + (-1.0d) + "'", obj13, (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "tmlog" + "'", str20, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test0447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0447");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        long long5 = atomikosProperties0.getCheckpointInterval();
        atomikosProperties0.forceShutdownOnVmExit = true;
        atomikosProperties0.setSerialJtaTransactions(true);
        java.util.Properties properties10 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long12 = atomikosProperties11.defaultJtaTimeout;
        boolean boolean13 = atomikosProperties11.enableLogging;
        atomikosProperties11.setSerialJtaTransactions(true);
        java.util.Properties properties16 = atomikosProperties11.asProperties();
        java.util.Properties properties17 = atomikosProperties11.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties20 = atomikosProperties19.asProperties();
        atomikosProperties19.checkpointInterval = 1L;
        boolean boolean23 = atomikosProperties19.forceShutdownOnVmExit;
        java.lang.Object obj24 = properties17.put((java.lang.Object) (short) 0, (java.lang.Object) atomikosProperties19);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long26 = atomikosProperties25.defaultJtaTimeout;
        boolean boolean27 = atomikosProperties25.enableLogging;
        int int28 = atomikosProperties25.maxActives;
        java.lang.String str29 = atomikosProperties25.getService();
        java.util.Properties properties30 = null;
        java.util.Properties properties31 = new java.util.Properties(properties30);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties33 = atomikosProperties32.asProperties();
        properties31.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties33);
        java.util.Enumeration<java.lang.Object> objEnumeration35 = properties33.keys();
        boolean boolean37 = properties33.containsValue((java.lang.Object) 0.0f);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties39 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long40 = atomikosProperties39.defaultJtaTimeout;
        boolean boolean41 = atomikosProperties39.enableLogging;
        atomikosProperties39.setSerialJtaTransactions(true);
        java.lang.Object obj44 = properties33.putIfAbsent((java.lang.Object) 100L, (java.lang.Object) true);
        java.util.Enumeration<java.lang.Object> objEnumeration45 = properties33.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties47 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties47.setService("");
        atomikosProperties47.setSerialJtaTransactions(true);
        atomikosProperties47.setEnableLogging(false);
        atomikosProperties47.service = "tmlog";
        atomikosProperties25.set(properties33, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", (java.lang.Object) atomikosProperties47);
        boolean boolean57 = properties17.contains((java.lang.Object) atomikosProperties47);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties59 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties59.setService("");
        atomikosProperties59.setThreadedTwoPhaseCommit(true);
        long long64 = atomikosProperties59.getCheckpointInterval();
        atomikosProperties59.maxTimeout = (-1);
        java.util.Properties properties67 = atomikosProperties59.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties68 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long69 = atomikosProperties68.defaultJtaTimeout;
        boolean boolean70 = atomikosProperties68.enableLogging;
        atomikosProperties68.setSerialJtaTransactions(true);
        java.util.Properties properties73 = atomikosProperties68.asProperties();
        properties67.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties73);
        java.util.Enumeration<java.lang.Object> objEnumeration75 = properties67.elements();
        atomikosProperties0.set(properties17, "hi!", (java.lang.Object) objEnumeration75);
        java.lang.Class<?> wildcardClass77 = objEnumeration75.getClass();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 500L + "'", long5 == 500L);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10000L + "'", long12 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertNotNull(properties17);
        org.junit.Assert.assertNotNull(properties20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 10000L + "'", long26 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 50 + "'", int28 == 50);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(properties33);
        org.junit.Assert.assertNotNull(objEnumeration35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 10000L + "'", long40 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNotNull(objEnumeration45);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 500L + "'", long64 == 500L);
        org.junit.Assert.assertNotNull(properties67);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 10000L + "'", long69 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(properties73);
        org.junit.Assert.assertNotNull(objEnumeration75);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test0448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0448");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Properties properties5 = new java.util.Properties(properties3);
        java.util.Collection<java.lang.Object> objCollection6 = properties3.values();
        java.util.Properties properties7 = new java.util.Properties(properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration8 = properties3.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties9.setService("");
        boolean boolean12 = atomikosProperties9.isEnableLogging();
        java.util.Properties properties13 = atomikosProperties9.asProperties();
        properties13.clear();
        java.util.Properties properties15 = null;
        java.util.Properties properties16 = new java.util.Properties(properties15);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties18 = atomikosProperties17.asProperties();
        properties16.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties18);
        java.util.Enumeration<java.lang.Object> objEnumeration20 = properties18.keys();
        java.lang.Object obj22 = properties13.put((java.lang.Object) properties18, (java.lang.Object) (byte) 0);
        boolean boolean23 = properties18.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean25 = atomikosProperties24.forceShutdownOnVmExit;
        atomikosProperties24.setSerialJtaTransactions(true);
        boolean boolean28 = properties18.containsKey((java.lang.Object) atomikosProperties24);
        atomikosProperties24.setLogBaseName("hi!");
        int int31 = atomikosProperties24.getMaxActives();
        boolean boolean32 = properties3.equals((java.lang.Object) int31);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties33.defaultJtaTimeout = (byte) -1;
        atomikosProperties33.setSerialJtaTransactions(false);
        java.lang.Object obj38 = properties3.get((java.lang.Object) atomikosProperties33);
        long long39 = atomikosProperties33.maxTimeout;
        atomikosProperties33.setService("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        long long42 = atomikosProperties33.getDefaultJtaTimeout();
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objCollection6);
        org.junit.Assert.assertNotNull(objEnumeration8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(properties13);
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertNotNull(objEnumeration20);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 50 + "'", int31 == 50);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 300000L + "'", long39 == 300000L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-1L) + "'", long42 == (-1L));
    }

    @Test
    public void test0449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0449");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        boolean boolean7 = properties3.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        java.util.Enumeration<java.lang.Object> objEnumeration13 = properties11.keys();
        java.lang.Object obj16 = properties11.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection17 = properties11.values();
        boolean boolean18 = properties3.containsKey((java.lang.Object) properties11);
        java.util.Properties properties19 = new java.util.Properties(properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long21 = atomikosProperties20.defaultJtaTimeout;
        boolean boolean22 = atomikosProperties20.enableLogging;
        atomikosProperties20.setSerialJtaTransactions(true);
        java.util.Properties properties25 = atomikosProperties20.asProperties();
        java.util.Properties properties26 = atomikosProperties20.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean28 = atomikosProperties27.forceShutdownOnVmExit;
        atomikosProperties27.setSerialJtaTransactions(true);
        java.lang.String str31 = atomikosProperties27.logBaseName;
        boolean boolean32 = atomikosProperties27.forceShutdownOnVmExit;
        int int33 = atomikosProperties27.maxActives;
        java.lang.String str34 = atomikosProperties27.logBaseName;
        atomikosProperties27.setForceShutdownOnVmExit(true);
        java.util.Properties properties37 = atomikosProperties27.asProperties();
        boolean boolean38 = atomikosProperties27.isForceShutdownOnVmExit();
        java.util.Properties properties39 = atomikosProperties27.asProperties();
        java.lang.Object obj40 = properties3.replace((java.lang.Object) atomikosProperties20, (java.lang.Object) atomikosProperties27);
        java.util.Properties properties41 = new java.util.Properties(properties3);
        java.io.OutputStream outputStream42 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.storeToXML(outputStream42, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=false, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNotNull(objEnumeration13);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(objCollection17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10000L + "'", long21 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertNotNull(properties26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "tmlog" + "'", str31, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 50 + "'", int33 == 50);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "tmlog" + "'", str34, "tmlog");
        org.junit.Assert.assertNotNull(properties37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(properties39);
        org.junit.Assert.assertNull(obj40);
    }

    @Test
    public void test0450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0450");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Properties properties5 = new java.util.Properties(properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties7 = atomikosProperties6.asProperties();
        java.util.Set<java.lang.String> strSet8 = properties7.stringPropertyNames();
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties7);
        properties7.clear();
        java.util.Set<java.lang.Object> objSet11 = properties7.keySet();
        properties7.clear();
        java.util.Properties properties13 = new java.util.Properties(properties7);
        java.lang.String str14 = properties7.toString();
        java.io.InputStream inputStream15 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties7.load(inputStream15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(objSet11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "{}" + "'", str14, "{}");
    }

    @Test
    public void test0451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0451");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        boolean boolean7 = properties3.containsValue((java.lang.Object) 0.0f);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long10 = atomikosProperties9.defaultJtaTimeout;
        boolean boolean11 = atomikosProperties9.enableLogging;
        atomikosProperties9.setSerialJtaTransactions(true);
        java.lang.Object obj14 = properties3.putIfAbsent((java.lang.Object) 100L, (java.lang.Object) true);
        java.util.Properties properties15 = new java.util.Properties(properties3);
        properties3.clear();
        java.util.Properties properties17 = null;
        java.util.Properties properties18 = new java.util.Properties(properties17);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties20 = atomikosProperties19.asProperties();
        properties18.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties20);
        java.util.Properties properties22 = new java.util.Properties(properties20);
        java.util.Properties properties23 = new java.util.Properties(properties20);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties25 = atomikosProperties24.asProperties();
        java.util.Properties properties26 = atomikosProperties24.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties27.setService("");
        boolean boolean30 = atomikosProperties27.isEnableLogging();
        java.util.Properties properties31 = atomikosProperties27.asProperties();
        java.lang.Object obj32 = properties20.getOrDefault((java.lang.Object) properties26, (java.lang.Object) atomikosProperties27);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties33.setService("");
        atomikosProperties33.setSerialJtaTransactions(true);
        atomikosProperties33.setEnableLogging(false);
        java.lang.String str40 = atomikosProperties33.logBaseName;
        boolean boolean41 = atomikosProperties33.isSerialJtaTransactions();
        boolean boolean42 = atomikosProperties33.forceShutdownOnVmExit;
        atomikosProperties33.defaultJtaTimeout = 1;
        java.util.Properties properties45 = atomikosProperties33.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties46 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties46.setService("");
        atomikosProperties46.setSerialJtaTransactions(true);
        atomikosProperties46.setEnableLogging(false);
        boolean boolean53 = atomikosProperties46.forceShutdownOnVmExit;
        boolean boolean54 = properties3.replace((java.lang.Object) properties20, (java.lang.Object) properties45, (java.lang.Object) atomikosProperties46);
        java.io.Reader reader55 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties45.load(reader55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(properties20);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertNotNull(properties26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(properties31);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "tmlog" + "'", str40, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(properties45);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test0452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0452");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        java.lang.Object obj8 = properties3.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Properties properties9 = new java.util.Properties(properties3);
        java.lang.String str11 = properties3.getProperty("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties13 = atomikosProperties12.asProperties();
        java.util.Set<java.lang.String> strSet14 = properties13.stringPropertyNames();
        java.util.Properties properties15 = new java.util.Properties(properties13);
        boolean boolean16 = properties3.containsKey((java.lang.Object) properties13);
        java.io.Reader reader17 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.load(reader17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(properties13);
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0453");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        boolean boolean7 = properties3.containsValue((java.lang.Object) 0.0f);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long10 = atomikosProperties9.defaultJtaTimeout;
        boolean boolean11 = atomikosProperties9.enableLogging;
        atomikosProperties9.setSerialJtaTransactions(true);
        java.lang.Object obj14 = properties3.putIfAbsent((java.lang.Object) 100L, (java.lang.Object) true);
        java.util.Properties properties15 = new java.util.Properties(properties3);
        java.io.OutputStream outputStream16 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.storeToXML(outputStream16, "hi!", "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(obj14);
    }

    @Test
    public void test0454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0454");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration6 = properties3.elements();
        java.util.Properties properties7 = null;
        java.util.Properties properties8 = new java.util.Properties(properties7);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties10 = atomikosProperties9.asProperties();
        properties8.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        java.util.Properties properties12 = new java.util.Properties(properties10);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties13.defaultJtaTimeout = (byte) -1;
        java.util.Properties properties16 = atomikosProperties13.asProperties();
        boolean boolean17 = properties10.contains((java.lang.Object) properties16);
        java.util.Properties properties18 = null;
        java.util.Properties properties19 = new java.util.Properties(properties18);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties21 = atomikosProperties20.asProperties();
        properties19.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties21);
        java.util.Enumeration<java.lang.Object> objEnumeration23 = properties21.keys();
        boolean boolean25 = properties21.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties26 = null;
        java.util.Properties properties27 = new java.util.Properties(properties26);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties29 = atomikosProperties28.asProperties();
        properties27.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties29);
        java.util.Enumeration<java.lang.Object> objEnumeration31 = properties29.keys();
        java.lang.Object obj34 = properties29.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection35 = properties29.values();
        boolean boolean36 = properties21.containsKey((java.lang.Object) properties29);
        java.util.Properties properties37 = new java.util.Properties(properties21);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long39 = atomikosProperties38.defaultJtaTimeout;
        boolean boolean40 = atomikosProperties38.enableLogging;
        atomikosProperties38.setSerialJtaTransactions(true);
        java.util.Properties properties43 = atomikosProperties38.asProperties();
        java.util.Properties properties44 = atomikosProperties38.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties45 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean46 = atomikosProperties45.forceShutdownOnVmExit;
        atomikosProperties45.setSerialJtaTransactions(true);
        java.lang.String str49 = atomikosProperties45.logBaseName;
        boolean boolean50 = atomikosProperties45.forceShutdownOnVmExit;
        int int51 = atomikosProperties45.maxActives;
        java.lang.String str52 = atomikosProperties45.logBaseName;
        atomikosProperties45.setForceShutdownOnVmExit(true);
        java.util.Properties properties55 = atomikosProperties45.asProperties();
        boolean boolean56 = atomikosProperties45.isForceShutdownOnVmExit();
        java.util.Properties properties57 = atomikosProperties45.asProperties();
        java.lang.Object obj58 = properties21.replace((java.lang.Object) atomikosProperties38, (java.lang.Object) atomikosProperties45);
        java.lang.Object obj59 = properties3.putIfAbsent((java.lang.Object) properties16, (java.lang.Object) atomikosProperties45);
        java.util.Properties properties60 = new java.util.Properties(properties16);
        java.io.OutputStream outputStream61 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties60.store(outputStream61, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNotNull(objEnumeration6);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(properties21);
        org.junit.Assert.assertNotNull(objEnumeration23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(properties29);
        org.junit.Assert.assertNotNull(objEnumeration31);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNotNull(objCollection35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 10000L + "'", long39 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(properties43);
        org.junit.Assert.assertNotNull(properties44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "tmlog" + "'", str49, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 50 + "'", int51 == 50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "tmlog" + "'", str52, "tmlog");
        org.junit.Assert.assertNotNull(properties55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(properties57);
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertNull(obj59);
    }

    @Test
    public void test0455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0455");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Properties properties5 = new java.util.Properties(properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties7 = atomikosProperties6.asProperties();
        java.util.Set<java.lang.String> strSet8 = properties7.stringPropertyNames();
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties7);
        java.util.Properties properties10 = new java.util.Properties(properties7);
        java.io.InputStream inputStream11 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties7.loadFromXML(inputStream11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNotNull(strSet8);
    }

    @Test
    public void test0456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0456");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Properties properties1 = null;
        java.util.Properties properties2 = new java.util.Properties(properties1);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties3 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties4 = atomikosProperties3.asProperties();
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties4);
        java.util.Enumeration<java.lang.Object> objEnumeration6 = properties4.keys();
        boolean boolean8 = properties4.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties9 = null;
        java.util.Properties properties10 = new java.util.Properties(properties9);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties12 = atomikosProperties11.asProperties();
        properties10.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties12);
        java.util.Enumeration<java.lang.Object> objEnumeration14 = properties12.keys();
        java.lang.Object obj17 = properties12.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection18 = properties12.values();
        boolean boolean19 = properties4.containsKey((java.lang.Object) properties12);
        java.util.Properties properties20 = new java.util.Properties(properties4);
        java.util.Properties properties21 = new java.util.Properties(properties4);
        java.lang.String str22 = properties21.toString();
        java.lang.Object obj25 = properties21.setProperty("tmlog", "");
        java.util.Properties properties26 = new java.util.Properties(properties21);
        java.util.Properties properties27 = new java.util.Properties(properties21);
        java.lang.Object obj28 = properties0.remove((java.lang.Object) properties27);
        java.lang.String str29 = properties0.toString();
        java.util.Enumeration<java.lang.Object> objEnumeration30 = properties0.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties31.setService("");
        atomikosProperties31.setSerialJtaTransactions(true);
        atomikosProperties31.setEnableLogging(false);
        atomikosProperties31.service = "tmlog";
        atomikosProperties31.threadedTwoPhaseCommit = true;
        boolean boolean42 = atomikosProperties31.isForceShutdownOnVmExit();
        java.util.Properties properties43 = atomikosProperties31.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties45 = atomikosProperties44.asProperties();
        long long46 = atomikosProperties44.getDefaultJtaTimeout();
        long long47 = atomikosProperties44.getDefaultJtaTimeout();
        atomikosProperties44.setForceShutdownOnVmExit(false);
        java.lang.Object obj50 = properties0.getOrDefault((java.lang.Object) atomikosProperties31, (java.lang.Object) atomikosProperties44);
        atomikosProperties44.setDefaultJtaTimeout((long) (byte) 10);
        atomikosProperties44.setMaxActives((int) (byte) 1);
        org.junit.Assert.assertNotNull(properties4);
        org.junit.Assert.assertNotNull(objEnumeration6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(properties12);
        org.junit.Assert.assertNotNull(objEnumeration14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(objCollection18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{}" + "'", str22, "{}");
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "{}" + "'", str29, "{}");
        org.junit.Assert.assertNotNull(objEnumeration30);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(properties43);
        org.junit.Assert.assertNotNull(properties45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 10000L + "'", long46 == 10000L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 10000L + "'", long47 == 10000L);
        org.junit.Assert.assertNotNull(obj50);
    }

    @Test
    public void test0457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0457");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        boolean boolean3 = atomikosProperties0.isEnableLogging();
        java.util.Properties properties4 = atomikosProperties0.asProperties();
        properties4.clear();
        java.util.Properties properties6 = null;
        java.util.Properties properties7 = new java.util.Properties(properties6);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties9 = atomikosProperties8.asProperties();
        properties7.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties9);
        java.util.Enumeration<java.lang.Object> objEnumeration11 = properties9.keys();
        java.lang.Object obj13 = properties4.put((java.lang.Object) properties9, (java.lang.Object) (byte) 0);
        boolean boolean14 = properties9.isEmpty();
        boolean boolean15 = properties9.isEmpty();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet16 = properties9.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties17.setService("");
        atomikosProperties17.setSerialJtaTransactions(true);
        atomikosProperties17.setEnableLogging(false);
        atomikosProperties17.logBaseName = "tmlog";
        atomikosProperties17.maxActives = 1;
        atomikosProperties17.setEnableLogging(true);
        java.lang.String str30 = atomikosProperties17.service;
        boolean boolean31 = atomikosProperties17.isEnableLogging();
        atomikosProperties17.maxTimeout = (short) 0;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties34 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties34.setService("");
        atomikosProperties34.logBaseDir = "hi!";
        atomikosProperties34.setMaxTimeout(500L);
        atomikosProperties34.logBaseName = "hi!";
        atomikosProperties34.setThreadedTwoPhaseCommit(true);
        long long45 = atomikosProperties34.checkpointInterval;
        java.lang.Object obj46 = properties9.putIfAbsent((java.lang.Object) (short) 0, (java.lang.Object) long45);
        java.io.OutputStream outputStream47 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties9.storeToXML(outputStream47, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, 100=true, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(properties4);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertNotNull(objEnumeration11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(objEntrySet16);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 500L + "'", long45 == 500L);
        org.junit.Assert.assertNull(obj46);
    }

    @Test
    public void test0458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0458");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        long long5 = atomikosProperties0.getCheckpointInterval();
        atomikosProperties0.maxTimeout = (-1);
        java.util.Properties properties8 = atomikosProperties0.asProperties();
        java.util.Properties properties9 = null;
        java.util.Properties properties10 = new java.util.Properties(properties9);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties12 = atomikosProperties11.asProperties();
        properties10.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties12);
        java.util.Properties properties14 = new java.util.Properties(properties12);
        java.util.Enumeration<?> wildcardEnumeration15 = properties12.propertyNames();
        boolean boolean16 = properties8.containsKey((java.lang.Object) wildcardEnumeration15);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long18 = atomikosProperties17.defaultJtaTimeout;
        boolean boolean19 = atomikosProperties17.enableLogging;
        atomikosProperties17.setSerialJtaTransactions(true);
        java.util.Properties properties22 = atomikosProperties17.asProperties();
        java.util.Properties properties23 = atomikosProperties17.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties26 = atomikosProperties25.asProperties();
        atomikosProperties25.checkpointInterval = 1L;
        boolean boolean29 = atomikosProperties25.forceShutdownOnVmExit;
        java.lang.Object obj30 = properties23.put((java.lang.Object) (short) 0, (java.lang.Object) atomikosProperties25);
        boolean boolean31 = atomikosProperties25.isSerialJtaTransactions();
        java.util.Properties properties32 = atomikosProperties25.asProperties();
        boolean boolean33 = properties8.containsValue((java.lang.Object) atomikosProperties25);
        java.io.OutputStream outputStream34 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties8.store(outputStream34, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 500L + "'", long5 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertNotNull(properties12);
        org.junit.Assert.assertNotNull(wildcardEnumeration15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10000L + "'", long18 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(properties22);
        org.junit.Assert.assertNotNull(properties23);
        org.junit.Assert.assertNotNull(properties26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(properties32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test0459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0459");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        boolean boolean3 = atomikosProperties0.isEnableLogging();
        java.util.Properties properties4 = atomikosProperties0.asProperties();
        java.util.Properties properties5 = new java.util.Properties(properties4);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties6.setService("");
        boolean boolean9 = atomikosProperties6.isEnableLogging();
        java.util.Properties properties10 = atomikosProperties6.asProperties();
        atomikosProperties6.setSerialJtaTransactions(false);
        java.lang.String str13 = atomikosProperties6.getLogBaseName();
        atomikosProperties6.setTransactionManagerUniqueName("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties16.defaultJtaTimeout = (byte) -1;
        java.util.Properties properties19 = atomikosProperties16.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean21 = atomikosProperties20.forceShutdownOnVmExit;
        atomikosProperties20.setSerialJtaTransactions(true);
        java.lang.String str24 = atomikosProperties20.logBaseName;
        atomikosProperties20.service = "tmlog";
        java.util.Properties properties27 = atomikosProperties20.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean29 = atomikosProperties28.forceShutdownOnVmExit;
        java.lang.String str30 = atomikosProperties28.getLogBaseDir();
        java.lang.Object obj31 = properties19.getOrDefault((java.lang.Object) atomikosProperties20, (java.lang.Object) str30);
        java.lang.Object obj32 = properties4.put((java.lang.Object) atomikosProperties6, (java.lang.Object) atomikosProperties20);
        atomikosProperties6.logBaseDir = "hi!";
        java.util.Properties properties35 = null;
        java.util.Properties properties36 = new java.util.Properties(properties35);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties38 = atomikosProperties37.asProperties();
        properties36.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties38);
        java.util.Enumeration<java.lang.Object> objEnumeration40 = properties38.keys();
        java.lang.Object obj43 = properties38.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection44 = properties38.values();
        java.util.Properties properties45 = new java.util.Properties();
        java.lang.Object obj48 = properties45.getOrDefault((java.lang.Object) (short) 1, (java.lang.Object) (-1.0d));
        properties38.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties45);
        java.util.Properties properties50 = new java.util.Properties(properties38);
        java.lang.String str51 = properties38.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties52 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties52.setService("");
        atomikosProperties52.setThreadedTwoPhaseCommit(true);
        long long57 = atomikosProperties52.getCheckpointInterval();
        atomikosProperties52.maxTimeout = (-1);
        java.util.Properties properties60 = atomikosProperties52.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties61 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long62 = atomikosProperties61.defaultJtaTimeout;
        boolean boolean63 = atomikosProperties61.enableLogging;
        atomikosProperties61.setSerialJtaTransactions(true);
        java.util.Properties properties66 = atomikosProperties61.asProperties();
        properties60.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties66);
        java.util.Enumeration<java.lang.Object> objEnumeration68 = properties60.elements();
        java.util.Properties properties69 = new java.util.Properties(properties60);
        java.lang.Object obj70 = properties38.get((java.lang.Object) properties60);
        java.util.Set<java.lang.String> strSet71 = properties38.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties73 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean74 = atomikosProperties73.forceShutdownOnVmExit;
        atomikosProperties73.setSerialJtaTransactions(true);
        java.lang.String str77 = atomikosProperties73.logBaseName;
        boolean boolean78 = atomikosProperties73.forceShutdownOnVmExit;
        atomikosProperties73.logBaseName = "tmlog";
        atomikosProperties73.setCheckpointInterval((long) 100);
        atomikosProperties73.setLogBaseName("");
        atomikosProperties73.setLogBaseDir("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Properties properties87 = atomikosProperties73.asProperties();
        atomikosProperties6.set(properties38, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, 100=true, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", (java.lang.Object) atomikosProperties73);
        boolean boolean89 = atomikosProperties6.forceShutdownOnVmExit;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(properties4);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNotNull(properties19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "tmlog" + "'", str24, "tmlog");
        org.junit.Assert.assertNotNull(properties27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNotNull(properties38);
        org.junit.Assert.assertNotNull(objEnumeration40);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNotNull(objCollection44);
        org.junit.Assert.assertEquals("'" + obj48 + "' != '" + (-1.0d) + "'", obj48, (-1.0d));
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str51, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 500L + "'", long57 == 500L);
        org.junit.Assert.assertNotNull(properties60);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 10000L + "'", long62 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(properties66);
        org.junit.Assert.assertNotNull(objEnumeration68);
        org.junit.Assert.assertNull(obj70);
        org.junit.Assert.assertNotNull(strSet71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "tmlog" + "'", str77, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(properties87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test0460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0460");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        atomikosProperties0.setSerialJtaTransactions(true);
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        properties5.clear();
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        java.util.Enumeration<java.lang.Object> objEnumeration13 = properties11.keys();
        boolean boolean15 = properties11.containsValue((java.lang.Object) 0.0f);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long18 = atomikosProperties17.defaultJtaTimeout;
        boolean boolean19 = atomikosProperties17.enableLogging;
        atomikosProperties17.setSerialJtaTransactions(true);
        java.lang.Object obj22 = properties11.putIfAbsent((java.lang.Object) 100L, (java.lang.Object) true);
        boolean boolean23 = properties5.remove((java.lang.Object) 1.0f, (java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties24.setService("");
        atomikosProperties24.setSerialJtaTransactions(true);
        java.util.Properties properties29 = atomikosProperties24.asProperties();
        properties29.clear();
        java.lang.Object obj32 = properties5.put((java.lang.Object) properties29, (java.lang.Object) (short) 1);
        java.util.Enumeration<java.lang.Object> objEnumeration33 = properties5.elements();
        java.io.Writer writer34 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties5.store(writer34, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=true, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=tmlog, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNotNull(objEnumeration13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10000L + "'", long18 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(properties29);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNotNull(objEnumeration33);
    }

    @Test
    public void test0461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0461");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.defaultJtaTimeout = (byte) -1;
        java.util.Properties properties3 = atomikosProperties0.asProperties();
        java.util.Properties properties4 = atomikosProperties0.asProperties();
        java.io.OutputStream outputStream5 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties4.save(outputStream5, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(properties4);
    }

    @Test
    public void test0462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0462");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.setSerialJtaTransactions(true);
        java.lang.String str4 = atomikosProperties0.logBaseName;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties6 = atomikosProperties5.asProperties();
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties9.setService("");
        atomikosProperties9.setThreadedTwoPhaseCommit(true);
        long long14 = atomikosProperties9.getCheckpointInterval();
        boolean boolean15 = atomikosProperties9.threadedTwoPhaseCommit;
        atomikosProperties0.set(properties7, "tmlog", (java.lang.Object) atomikosProperties9);
        boolean boolean17 = atomikosProperties9.forceShutdownOnVmExit;
        atomikosProperties9.setSerialJtaTransactions(false);
        java.util.Properties properties20 = null;
        java.util.Properties properties21 = new java.util.Properties(properties20);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties23 = atomikosProperties22.asProperties();
        properties21.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties23);
        java.util.Properties properties25 = new java.util.Properties(properties23);
        java.util.Collection<java.lang.Object> objCollection26 = properties23.values();
        java.util.Properties properties27 = new java.util.Properties(properties23);
        int int28 = properties23.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean31 = atomikosProperties30.forceShutdownOnVmExit;
        atomikosProperties30.setSerialJtaTransactions(true);
        java.lang.String str34 = atomikosProperties30.logBaseName;
        boolean boolean35 = atomikosProperties30.forceShutdownOnVmExit;
        int int36 = atomikosProperties30.maxActives;
        java.lang.String str37 = atomikosProperties30.logBaseName;
        atomikosProperties30.transactionManagerUniqueName = "hi!";
        atomikosProperties30.setMaxActives((int) (short) 10);
        java.util.Properties properties42 = atomikosProperties30.asProperties();
        java.util.Properties properties43 = atomikosProperties30.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties44.setService("");
        atomikosProperties44.setSerialJtaTransactions(true);
        java.util.Properties properties49 = atomikosProperties44.asProperties();
        properties49.clear();
        java.util.Properties properties52 = null;
        java.util.Properties properties53 = new java.util.Properties(properties52);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties54 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties55 = atomikosProperties54.asProperties();
        properties53.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties55);
        java.util.Enumeration<java.lang.Object> objEnumeration57 = properties55.keys();
        boolean boolean59 = properties55.containsValue((java.lang.Object) 0.0f);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties61 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long62 = atomikosProperties61.defaultJtaTimeout;
        boolean boolean63 = atomikosProperties61.enableLogging;
        atomikosProperties61.setSerialJtaTransactions(true);
        java.lang.Object obj66 = properties55.putIfAbsent((java.lang.Object) 100L, (java.lang.Object) true);
        boolean boolean67 = properties49.remove((java.lang.Object) 1.0f, (java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties68 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties68.setService("");
        atomikosProperties68.setSerialJtaTransactions(true);
        java.util.Properties properties73 = atomikosProperties68.asProperties();
        properties73.clear();
        java.lang.Object obj76 = properties49.put((java.lang.Object) properties73, (java.lang.Object) (short) 1);
        java.util.Enumeration<java.lang.Object> objEnumeration77 = properties49.elements();
        java.util.Set<java.lang.String> strSet78 = properties49.stringPropertyNames();
        java.lang.Object obj80 = properties43.put((java.lang.Object) strSet78, (java.lang.Object) (-1.0d));
        java.util.Set<java.lang.String> strSet81 = properties43.stringPropertyNames();
        atomikosProperties9.set(properties23, "hi!", (java.lang.Object) properties43);
        atomikosProperties9.setMaxTimeout((long) (short) 100);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tmlog" + "'", str4, "tmlog");
        org.junit.Assert.assertNotNull(properties6);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 500L + "'", long14 == 500L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(properties23);
        org.junit.Assert.assertNotNull(objCollection26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 9 + "'", int28 == 9);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "tmlog" + "'", str34, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 50 + "'", int36 == 50);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "tmlog" + "'", str37, "tmlog");
        org.junit.Assert.assertNotNull(properties42);
        org.junit.Assert.assertNotNull(properties43);
        org.junit.Assert.assertNotNull(properties49);
        org.junit.Assert.assertNotNull(properties55);
        org.junit.Assert.assertNotNull(objEnumeration57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 10000L + "'", long62 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(properties73);
        org.junit.Assert.assertNull(obj76);
        org.junit.Assert.assertNotNull(objEnumeration77);
        org.junit.Assert.assertNotNull(strSet78);
        org.junit.Assert.assertNull(obj80);
        org.junit.Assert.assertNotNull(strSet81);
    }

    @Test
    public void test0463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0463");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        long long5 = atomikosProperties0.getCheckpointInterval();
        atomikosProperties0.setMaxTimeout(0L);
        atomikosProperties0.forceShutdownOnVmExit = false;
        atomikosProperties0.setEnableLogging(false);
        java.lang.String str12 = atomikosProperties0.logBaseDir;
        boolean boolean13 = atomikosProperties0.forceShutdownOnVmExit;
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 500L + "'", long5 == 500L);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0464");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties6.setService("");
        atomikosProperties6.setSerialJtaTransactions(true);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean12 = atomikosProperties11.forceShutdownOnVmExit;
        atomikosProperties11.setSerialJtaTransactions(true);
        boolean boolean15 = properties3.remove((java.lang.Object) atomikosProperties6, (java.lang.Object) true);
        java.util.Set<java.lang.String> strSet16 = properties3.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties17.setService("");
        atomikosProperties17.setSerialJtaTransactions(true);
        atomikosProperties17.setEnableLogging(false);
        atomikosProperties17.service = "tmlog";
        atomikosProperties17.threadedTwoPhaseCommit = true;
        boolean boolean28 = atomikosProperties17.isForceShutdownOnVmExit();
        java.util.Properties properties29 = atomikosProperties17.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean31 = atomikosProperties30.forceShutdownOnVmExit;
        atomikosProperties30.setSerialJtaTransactions(true);
        java.lang.String str34 = atomikosProperties30.logBaseName;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties36 = atomikosProperties35.asProperties();
        java.util.Properties properties37 = atomikosProperties35.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties39 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties39.setService("");
        atomikosProperties39.setThreadedTwoPhaseCommit(true);
        long long44 = atomikosProperties39.getCheckpointInterval();
        boolean boolean45 = atomikosProperties39.threadedTwoPhaseCommit;
        atomikosProperties30.set(properties37, "tmlog", (java.lang.Object) atomikosProperties39);
        atomikosProperties39.setLogBaseName("{}");
        java.util.Properties properties49 = null;
        java.util.Properties properties50 = new java.util.Properties(properties49);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties51 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties52 = atomikosProperties51.asProperties();
        properties50.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties52);
        java.util.Properties properties54 = new java.util.Properties(properties52);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties55 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties55.defaultJtaTimeout = (byte) -1;
        java.util.Properties properties58 = atomikosProperties55.asProperties();
        boolean boolean59 = properties52.contains((java.lang.Object) properties58);
        atomikosProperties39.set(properties58, "tmlog", (java.lang.Object) 'a');
        java.util.Properties properties63 = atomikosProperties39.asProperties();
        java.util.Properties properties64 = null;
        java.util.Properties properties65 = new java.util.Properties(properties64);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties66 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties67 = atomikosProperties66.asProperties();
        properties65.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties67);
        java.util.Properties properties71 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet72 = properties71.keySet();
        boolean boolean73 = properties65.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) properties71);
        boolean boolean74 = properties3.replace((java.lang.Object) atomikosProperties17, (java.lang.Object) properties63, (java.lang.Object) true);
        java.io.Reader reader75 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties63.load(reader75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(properties29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "tmlog" + "'", str34, "tmlog");
        org.junit.Assert.assertNotNull(properties36);
        org.junit.Assert.assertNotNull(properties37);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 500L + "'", long44 == 500L);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(properties52);
        org.junit.Assert.assertNotNull(properties58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(properties63);
        org.junit.Assert.assertNotNull(properties67);
        org.junit.Assert.assertNotNull(objSet72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test0465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0465");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        boolean boolean3 = atomikosProperties0.isEnableLogging();
        java.util.Properties properties4 = atomikosProperties0.asProperties();
        atomikosProperties0.setSerialJtaTransactions(false);
        atomikosProperties0.enableLogging = false;
        java.lang.String str9 = atomikosProperties0.service;
        atomikosProperties0.forceShutdownOnVmExit = false;
        java.util.Properties properties12 = null;
        java.util.Properties properties13 = new java.util.Properties(properties12);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties15 = atomikosProperties14.asProperties();
        properties13.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties15);
        java.util.Properties properties17 = new java.util.Properties(properties15);
        java.util.Properties properties18 = new java.util.Properties(properties15);
        java.lang.String str20 = properties15.getProperty("hi!");
        java.util.Properties properties22 = null;
        java.util.Properties properties23 = new java.util.Properties(properties22);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties25 = atomikosProperties24.asProperties();
        properties23.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties25);
        java.util.Properties properties27 = new java.util.Properties(properties25);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties29 = atomikosProperties28.asProperties();
        java.util.Set<java.lang.String> strSet30 = properties29.stringPropertyNames();
        properties27.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties29);
        properties29.clear();
        java.util.Set<java.lang.Object> objSet33 = properties29.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties34 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties35.setService("");
        atomikosProperties35.setThreadedTwoPhaseCommit(true);
        long long40 = atomikosProperties35.getCheckpointInterval();
        atomikosProperties35.maxTimeout = (-1);
        java.util.Properties properties43 = atomikosProperties35.asProperties();
        java.lang.Object obj44 = properties29.putIfAbsent((java.lang.Object) atomikosProperties34, (java.lang.Object) properties43);
        atomikosProperties0.set(properties15, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", (java.lang.Object) properties43);
        java.io.Writer writer46 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties43.store(writer46, "{}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(properties4);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertNotNull(properties29);
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertNotNull(objSet33);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 500L + "'", long40 == 500L);
        org.junit.Assert.assertNotNull(properties43);
        org.junit.Assert.assertNull(obj44);
    }

    @Test
    public void test0466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0466");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        atomikosProperties0.setSerialJtaTransactions(true);
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        java.util.Properties properties6 = atomikosProperties0.asProperties();
        java.util.Properties properties7 = new java.util.Properties(properties6);
        java.lang.String str10 = properties7.getProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=true, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=tmlog, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertNotNull(properties6);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str10, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
    }

    @Test
    public void test0467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0467");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        boolean boolean7 = properties3.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        java.util.Properties properties15 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet16 = properties15.keySet();
        boolean boolean17 = properties9.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) properties15);
        java.util.Enumeration<java.lang.Object> objEnumeration18 = properties9.elements();
        boolean boolean20 = properties3.remove((java.lang.Object) properties9, (java.lang.Object) 50);
        java.util.Properties properties21 = null;
        java.util.Properties properties22 = new java.util.Properties(properties21);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties24 = atomikosProperties23.asProperties();
        properties22.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties24);
        java.util.Properties properties26 = new java.util.Properties(properties24);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties27.defaultJtaTimeout = (byte) -1;
        java.util.Properties properties30 = atomikosProperties27.asProperties();
        boolean boolean31 = properties24.contains((java.lang.Object) properties30);
        java.util.Properties properties32 = null;
        java.util.Properties properties33 = new java.util.Properties(properties32);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties34 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties35 = atomikosProperties34.asProperties();
        properties33.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties35);
        java.util.Enumeration<java.lang.Object> objEnumeration37 = properties35.keys();
        boolean boolean39 = properties35.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties40 = new java.util.Properties(properties35);
        java.lang.Object obj41 = properties9.replace((java.lang.Object) properties30, (java.lang.Object) properties40);
        java.util.Properties properties42 = new java.util.Properties(properties40);
        java.util.Properties properties43 = new java.util.Properties(properties42);
        java.io.PrintWriter printWriter44 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties43.list(printWriter44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNotNull(objSet16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objEnumeration18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(properties24);
        org.junit.Assert.assertNotNull(properties30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(properties35);
        org.junit.Assert.assertNotNull(objEnumeration37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(obj41);
    }

    @Test
    public void test0468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0468");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        java.lang.Object obj8 = properties3.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection9 = properties3.values();
        java.util.Set<java.lang.String> strSet10 = properties3.stringPropertyNames();
        java.util.Enumeration<java.lang.Object> objEnumeration11 = properties3.elements();
        java.util.Properties properties12 = new java.util.Properties(properties3);
        int int13 = properties12.size();
        java.util.Enumeration<java.lang.Object> objEnumeration14 = properties12.keys();
        java.io.OutputStream outputStream15 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties12.storeToXML(outputStream15, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(objCollection9);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(objEnumeration11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(objEnumeration14);
    }

    @Test
    public void test0469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0469");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        boolean boolean3 = atomikosProperties0.threadedTwoPhaseCommit;
        atomikosProperties0.setCheckpointInterval(0L);
        boolean boolean6 = atomikosProperties0.enableLogging;
        boolean boolean7 = atomikosProperties0.threadedTwoPhaseCommit;
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0470");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        atomikosProperties0.setSerialJtaTransactions(true);
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        properties5.clear();
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        java.util.Enumeration<java.lang.Object> objEnumeration13 = properties11.keys();
        boolean boolean15 = properties11.containsValue((java.lang.Object) 0.0f);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long18 = atomikosProperties17.defaultJtaTimeout;
        boolean boolean19 = atomikosProperties17.enableLogging;
        atomikosProperties17.setSerialJtaTransactions(true);
        java.lang.Object obj22 = properties11.putIfAbsent((java.lang.Object) 100L, (java.lang.Object) true);
        boolean boolean23 = properties5.remove((java.lang.Object) 1.0f, (java.lang.Object) 100L);
        java.util.Properties properties24 = null;
        java.util.Properties properties25 = new java.util.Properties(properties24);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties27 = atomikosProperties26.asProperties();
        properties25.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties27);
        java.util.Enumeration<java.lang.Object> objEnumeration29 = properties27.keys();
        java.lang.Object obj32 = properties27.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Properties properties33 = new java.util.Properties(properties27);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties35.setService("");
        atomikosProperties35.setSerialJtaTransactions(true);
        java.util.Properties properties40 = atomikosProperties35.asProperties();
        properties40.clear();
        boolean boolean42 = properties5.replace((java.lang.Object) properties27, (java.lang.Object) 0.0d, (java.lang.Object) properties40);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean45 = atomikosProperties44.forceShutdownOnVmExit;
        atomikosProperties44.setSerialJtaTransactions(true);
        java.lang.String str48 = atomikosProperties44.logBaseName;
        boolean boolean49 = atomikosProperties44.forceShutdownOnVmExit;
        int int50 = atomikosProperties44.maxActives;
        java.lang.String str51 = atomikosProperties44.logBaseName;
        atomikosProperties44.transactionManagerUniqueName = "hi!";
        boolean boolean54 = atomikosProperties44.serialJtaTransactions;
        atomikosProperties44.setSerialJtaTransactions(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties57 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties57.setService("");
        boolean boolean60 = atomikosProperties57.isEnableLogging();
        atomikosProperties57.setService("");
        boolean boolean63 = atomikosProperties57.enableLogging;
        long long64 = atomikosProperties57.getMaxTimeout();
        boolean boolean65 = properties27.replace((java.lang.Object) 500L, (java.lang.Object) atomikosProperties44, (java.lang.Object) atomikosProperties57);
        java.lang.Object obj66 = properties27.clone();
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNotNull(objEnumeration13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10000L + "'", long18 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(properties27);
        org.junit.Assert.assertNotNull(objEnumeration29);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNotNull(properties40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "tmlog" + "'", str48, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 50 + "'", int50 == 50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "tmlog" + "'", str51, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 300000L + "'", long64 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(obj66);
// flaky:         org.junit.Assert.assertEquals(obj66.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj66), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj66), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
    }

    @Test
    public void test0471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0471");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        boolean boolean7 = properties3.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        java.util.Enumeration<java.lang.Object> objEnumeration13 = properties11.keys();
        java.lang.Object obj16 = properties11.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection17 = properties11.values();
        boolean boolean18 = properties3.containsKey((java.lang.Object) properties11);
        java.util.Properties properties19 = new java.util.Properties(properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long21 = atomikosProperties20.defaultJtaTimeout;
        boolean boolean22 = atomikosProperties20.enableLogging;
        atomikosProperties20.setSerialJtaTransactions(true);
        java.util.Properties properties25 = atomikosProperties20.asProperties();
        java.util.Properties properties26 = atomikosProperties20.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean28 = atomikosProperties27.forceShutdownOnVmExit;
        atomikosProperties27.setSerialJtaTransactions(true);
        java.lang.String str31 = atomikosProperties27.logBaseName;
        boolean boolean32 = atomikosProperties27.forceShutdownOnVmExit;
        int int33 = atomikosProperties27.maxActives;
        java.lang.String str34 = atomikosProperties27.logBaseName;
        atomikosProperties27.setForceShutdownOnVmExit(true);
        java.util.Properties properties37 = atomikosProperties27.asProperties();
        boolean boolean38 = atomikosProperties27.isForceShutdownOnVmExit();
        java.util.Properties properties39 = atomikosProperties27.asProperties();
        java.lang.Object obj40 = properties3.replace((java.lang.Object) atomikosProperties20, (java.lang.Object) atomikosProperties27);
        java.lang.String str41 = atomikosProperties27.getLogBaseDir();
        atomikosProperties27.logBaseName = "{}";
        java.util.Properties properties44 = atomikosProperties27.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties45 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties45.setService("");
        atomikosProperties45.setSerialJtaTransactions(true);
        atomikosProperties45.setEnableLogging(false);
        atomikosProperties45.logBaseName = "tmlog";
        atomikosProperties45.setMaxActives((int) '#');
        atomikosProperties45.setService("hi!");
        java.lang.Object obj58 = properties44.get((java.lang.Object) "hi!");
        java.util.Properties properties59 = new java.util.Properties(properties44);
        java.lang.String str61 = properties44.getProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.io.OutputStream outputStream62 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties44.store(outputStream62, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNotNull(objEnumeration13);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(objCollection17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10000L + "'", long21 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertNotNull(properties26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "tmlog" + "'", str31, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 50 + "'", int33 == 50);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "tmlog" + "'", str34, "tmlog");
        org.junit.Assert.assertNotNull(properties37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(properties39);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(properties44);
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertNull(str61);
    }

    @Test
    public void test0472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0472");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.checkpointInterval = 1L;
        java.lang.String str4 = atomikosProperties0.getService();
        java.lang.String str5 = atomikosProperties0.getLogBaseName();
        java.util.Properties properties6 = atomikosProperties0.asProperties();
        java.util.Properties properties7 = null;
        java.util.Properties properties8 = new java.util.Properties(properties7);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties10 = atomikosProperties9.asProperties();
        properties8.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties10);
        java.util.Properties properties14 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet15 = properties14.keySet();
        boolean boolean16 = properties8.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) properties14);
        java.util.Collection<java.lang.Object> objCollection17 = properties14.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties18.setService("");
        boolean boolean21 = atomikosProperties18.isEnableLogging();
        java.util.Properties properties22 = atomikosProperties18.asProperties();
        properties22.clear();
        java.util.Properties properties24 = null;
        java.util.Properties properties25 = new java.util.Properties(properties24);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties27 = atomikosProperties26.asProperties();
        properties25.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties27);
        java.util.Enumeration<java.lang.Object> objEnumeration29 = properties27.keys();
        java.lang.Object obj31 = properties22.put((java.lang.Object) properties27, (java.lang.Object) (byte) 0);
        java.lang.Object obj32 = properties6.getOrDefault((java.lang.Object) objCollection17, obj31);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean34 = atomikosProperties33.forceShutdownOnVmExit;
        atomikosProperties33.setSerialJtaTransactions(true);
        java.lang.String str37 = atomikosProperties33.logBaseName;
        atomikosProperties33.service = "tmlog";
        atomikosProperties33.setSerialJtaTransactions(false);
        java.util.Properties properties42 = atomikosProperties33.asProperties();
        properties6.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties42);
        java.util.Properties properties44 = new java.util.Properties(properties6);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties45 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties45.setService("");
        atomikosProperties45.logBaseDir = "hi!";
        atomikosProperties45.setMaxTimeout(500L);
        atomikosProperties45.maxTimeout = (-1L);
        atomikosProperties45.serialJtaTransactions = true;
        boolean boolean56 = atomikosProperties45.serialJtaTransactions;
        atomikosProperties45.service = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean59 = properties6.containsKey((java.lang.Object) atomikosProperties45);
        java.lang.Class<?> wildcardClass60 = atomikosProperties45.getClass();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tmlog" + "'", str5, "tmlog");
        org.junit.Assert.assertNotNull(properties6);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertNotNull(objSet15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objCollection17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(properties22);
        org.junit.Assert.assertNotNull(properties27);
        org.junit.Assert.assertNotNull(objEnumeration29);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "tmlog" + "'", str37, "tmlog");
        org.junit.Assert.assertNotNull(properties42);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test0473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0473");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        boolean boolean7 = properties3.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        java.util.Enumeration<java.lang.Object> objEnumeration13 = properties11.keys();
        java.lang.Object obj16 = properties11.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection17 = properties11.values();
        boolean boolean18 = properties3.containsKey((java.lang.Object) properties11);
        java.util.Properties properties19 = new java.util.Properties(properties3);
        java.util.Properties properties20 = new java.util.Properties(properties3);
        java.lang.String str21 = properties20.toString();
        java.util.Properties properties22 = null;
        java.util.Properties properties23 = new java.util.Properties(properties22);
        java.util.Properties properties24 = new java.util.Properties(properties23);
        java.util.Properties properties25 = new java.util.Properties(properties24);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties26.setService("");
        atomikosProperties26.setThreadedTwoPhaseCommit(true);
        atomikosProperties26.setMaxTimeout(1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean34 = atomikosProperties33.forceShutdownOnVmExit;
        atomikosProperties33.setSerialJtaTransactions(true);
        java.lang.String str37 = atomikosProperties33.logBaseName;
        boolean boolean38 = atomikosProperties33.forceShutdownOnVmExit;
        int int39 = atomikosProperties33.maxActives;
        java.lang.String str40 = atomikosProperties33.logBaseName;
        atomikosProperties33.setForceShutdownOnVmExit(true);
        java.util.Properties properties43 = atomikosProperties33.asProperties();
        boolean boolean44 = atomikosProperties33.isForceShutdownOnVmExit();
        java.util.Properties properties45 = atomikosProperties33.asProperties();
        atomikosProperties33.setSerialJtaTransactions(false);
        java.lang.String str48 = atomikosProperties33.logBaseName;
        boolean boolean49 = properties20.replace((java.lang.Object) properties24, (java.lang.Object) 1L, (java.lang.Object) atomikosProperties33);
        atomikosProperties33.setSerialJtaTransactions(true);
        int int52 = atomikosProperties33.getMaxActives();
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNotNull(objEnumeration13);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(objCollection17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "{}" + "'", str21, "{}");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "tmlog" + "'", str37, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 50 + "'", int39 == 50);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "tmlog" + "'", str40, "tmlog");
        org.junit.Assert.assertNotNull(properties43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(properties45);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "tmlog" + "'", str48, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 50 + "'", int52 == 50);
    }

    @Test
    public void test0474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0474");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        boolean boolean7 = properties3.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        java.util.Enumeration<java.lang.Object> objEnumeration13 = properties11.keys();
        java.lang.Object obj16 = properties11.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection17 = properties11.values();
        boolean boolean18 = properties3.containsKey((java.lang.Object) properties11);
        java.util.Properties properties19 = new java.util.Properties(properties3);
        java.util.Properties properties20 = null;
        java.util.Properties properties21 = new java.util.Properties(properties20);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties23 = atomikosProperties22.asProperties();
        properties21.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties23);
        java.util.Enumeration<java.lang.Object> objEnumeration25 = properties23.keys();
        java.lang.Object obj28 = properties23.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection29 = properties23.values();
        java.util.Properties properties30 = new java.util.Properties();
        java.lang.Object obj33 = properties30.getOrDefault((java.lang.Object) (short) 1, (java.lang.Object) (-1.0d));
        properties23.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties30);
        java.util.Properties properties35 = null;
        java.util.Properties properties36 = new java.util.Properties(properties35);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties38 = atomikosProperties37.asProperties();
        properties36.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties38);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties40.setService("");
        atomikosProperties40.setThreadedTwoPhaseCommit(true);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties45 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties45.setService("");
        atomikosProperties45.setSerialJtaTransactions(true);
        atomikosProperties45.setEnableLogging(false);
        java.lang.String str52 = atomikosProperties45.logBaseName;
        java.lang.Object obj53 = properties38.replace((java.lang.Object) atomikosProperties40, (java.lang.Object) atomikosProperties45);
        boolean boolean54 = properties23.contains((java.lang.Object) properties38);
        java.lang.String str55 = properties38.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties56 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties56.setLogBaseDir("");
        atomikosProperties56.setMaxTimeout(100L);
        long long61 = atomikosProperties56.getDefaultJtaTimeout();
        java.lang.Object obj62 = properties3.putIfAbsent((java.lang.Object) properties38, (java.lang.Object) atomikosProperties56);
        java.util.Properties properties63 = new java.util.Properties(properties38);
        java.util.Collection<java.lang.Object> objCollection64 = properties38.values();
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNotNull(objEnumeration13);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(objCollection17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(properties23);
        org.junit.Assert.assertNotNull(objEnumeration25);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNotNull(objCollection29);
        org.junit.Assert.assertEquals("'" + obj33 + "' != '" + (-1.0d) + "'", obj33, (-1.0d));
        org.junit.Assert.assertNotNull(properties38);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "tmlog" + "'", str52, "tmlog");
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str55, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 10000L + "'", long61 == 10000L);
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertNotNull(objCollection64);
    }

    @Test
    public void test0475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0475");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        boolean boolean7 = properties3.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        java.util.Enumeration<java.lang.Object> objEnumeration13 = properties11.keys();
        java.lang.Object obj16 = properties11.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection17 = properties11.values();
        boolean boolean18 = properties3.containsKey((java.lang.Object) properties11);
        java.util.Properties properties19 = new java.util.Properties(properties3);
        java.util.Properties properties20 = new java.util.Properties(properties3);
        java.lang.Object obj23 = properties3.setProperty("tmlog", "tmlog");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties24.setService("");
        atomikosProperties24.setThreadedTwoPhaseCommit(true);
        long long29 = atomikosProperties24.getCheckpointInterval();
        atomikosProperties24.setMaxTimeout(0L);
        atomikosProperties24.forceShutdownOnVmExit = false;
        java.lang.Object obj34 = properties3.get((java.lang.Object) atomikosProperties24);
        java.lang.String str37 = properties3.getProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, true=true, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "hi!");
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNotNull(objEnumeration13);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(objCollection17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 500L + "'", long29 == 500L);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
    }

    @Test
    public void test0476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0476");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Properties properties5 = new java.util.Properties(properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties7 = atomikosProperties6.asProperties();
        java.util.Set<java.lang.String> strSet8 = properties7.stringPropertyNames();
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties7);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.defaultJtaTimeout = (byte) -1;
        java.util.Properties properties13 = atomikosProperties10.asProperties();
        java.util.Properties properties14 = atomikosProperties10.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties15.setService("");
        java.lang.String str18 = atomikosProperties15.getService();
        atomikosProperties15.maxTimeout = 1L;
        java.lang.Object obj21 = properties7.put((java.lang.Object) atomikosProperties10, (java.lang.Object) 1L);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Enumeration<?> wildcardEnumeration22 = properties7.propertyNames();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.springframework.boot.jta.atomikos.AtomikosProperties cannot be cast to java.lang.String");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(properties13);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNull(obj21);
    }

    @Test
    public void test0477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0477");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        boolean boolean7 = properties3.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        java.util.Enumeration<java.lang.Object> objEnumeration13 = properties11.keys();
        java.lang.Object obj16 = properties11.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection17 = properties11.values();
        boolean boolean18 = properties3.containsKey((java.lang.Object) properties11);
        java.util.Properties properties19 = new java.util.Properties(properties3);
        java.util.Properties properties20 = new java.util.Properties(properties3);
        java.util.Properties properties21 = null;
        java.util.Properties properties22 = new java.util.Properties(properties21);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties24 = atomikosProperties23.asProperties();
        properties22.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties24);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties26.setService("");
        atomikosProperties26.setThreadedTwoPhaseCommit(true);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties31.setService("");
        atomikosProperties31.setSerialJtaTransactions(true);
        atomikosProperties31.setEnableLogging(false);
        java.lang.String str38 = atomikosProperties31.logBaseName;
        java.lang.Object obj39 = properties24.replace((java.lang.Object) atomikosProperties26, (java.lang.Object) atomikosProperties31);
        java.util.Properties properties40 = atomikosProperties31.asProperties();
        boolean boolean41 = properties3.containsKey((java.lang.Object) properties40);
        java.io.OutputStream outputStream42 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties40.save(outputStream42, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=false, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNotNull(objEnumeration13);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(objCollection17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(properties24);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNotNull(properties40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test0478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0478");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        boolean boolean7 = properties3.containsValue((java.lang.Object) 0.0f);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long10 = atomikosProperties9.defaultJtaTimeout;
        boolean boolean11 = atomikosProperties9.enableLogging;
        atomikosProperties9.setSerialJtaTransactions(true);
        java.lang.Object obj14 = properties3.putIfAbsent((java.lang.Object) 100L, (java.lang.Object) true);
        java.util.Enumeration<java.lang.Object> objEnumeration15 = properties3.elements();
        java.lang.String str16 = properties3.toString();
        java.lang.String str19 = properties3.getProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=false, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(objEnumeration15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, 100=true, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str16, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, 100=true, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=false, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str19, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=false, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
    }

    @Test
    public void test0479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0479");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        atomikosProperties0.setSerialJtaTransactions(true);
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        properties5.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean8 = atomikosProperties7.forceShutdownOnVmExit;
        atomikosProperties7.setSerialJtaTransactions(true);
        java.lang.String str11 = atomikosProperties7.logBaseName;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties13 = atomikosProperties12.asProperties();
        java.util.Properties properties14 = atomikosProperties12.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties16.setService("");
        atomikosProperties16.setThreadedTwoPhaseCommit(true);
        long long21 = atomikosProperties16.getCheckpointInterval();
        boolean boolean22 = atomikosProperties16.threadedTwoPhaseCommit;
        atomikosProperties7.set(properties14, "tmlog", (java.lang.Object) atomikosProperties16);
        boolean boolean24 = properties5.containsValue((java.lang.Object) atomikosProperties16);
        java.util.Properties properties25 = atomikosProperties16.asProperties();
        java.io.OutputStream outputStream26 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties25.save(outputStream26, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=false, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "tmlog" + "'", str11, "tmlog");
        org.junit.Assert.assertNotNull(properties13);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 500L + "'", long21 == 500L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(properties25);
    }

    @Test
    public void test0480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0480");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties5.setService("");
        atomikosProperties5.setThreadedTwoPhaseCommit(true);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.setService("");
        atomikosProperties10.setSerialJtaTransactions(true);
        atomikosProperties10.setEnableLogging(false);
        java.lang.String str17 = atomikosProperties10.logBaseName;
        java.lang.Object obj18 = properties3.replace((java.lang.Object) atomikosProperties5, (java.lang.Object) atomikosProperties10);
        java.lang.String str20 = properties3.getProperty("");
        java.util.Properties properties21 = new java.util.Properties(properties3);
        java.util.Properties properties22 = new java.util.Properties(properties21);
        java.util.Properties properties23 = null;
        java.util.Properties properties24 = new java.util.Properties(properties23);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties26 = atomikosProperties25.asProperties();
        properties24.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties26);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties28.setService("");
        atomikosProperties28.setThreadedTwoPhaseCommit(true);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties33.setService("");
        atomikosProperties33.setSerialJtaTransactions(true);
        atomikosProperties33.setEnableLogging(false);
        java.lang.String str40 = atomikosProperties33.logBaseName;
        java.lang.Object obj41 = properties26.replace((java.lang.Object) atomikosProperties28, (java.lang.Object) atomikosProperties33);
        java.util.Properties properties42 = null;
        java.util.Properties properties43 = new java.util.Properties(properties42);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties45 = atomikosProperties44.asProperties();
        properties43.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties45);
        java.util.Properties properties47 = new java.util.Properties(properties45);
        java.util.Properties properties48 = new java.util.Properties(properties47);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties49.setService("");
        atomikosProperties49.setSerialJtaTransactions(true);
        atomikosProperties49.setEnableLogging(false);
        atomikosProperties49.logBaseName = "tmlog";
        int int58 = atomikosProperties49.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties59 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties59.setService("");
        atomikosProperties59.setSerialJtaTransactions(true);
        atomikosProperties59.setEnableLogging(false);
        atomikosProperties59.logBaseName = "tmlog";
        atomikosProperties59.maxActives = 1;
        atomikosProperties59.setEnableLogging(true);
        java.lang.String str72 = atomikosProperties59.service;
        atomikosProperties59.setCheckpointInterval((long) (byte) 0);
        long long75 = atomikosProperties59.getDefaultJtaTimeout();
        boolean boolean76 = properties48.remove((java.lang.Object) atomikosProperties49, (java.lang.Object) long75);
        java.lang.String str77 = properties48.toString();
        java.lang.Object obj78 = properties22.getOrDefault((java.lang.Object) atomikosProperties33, (java.lang.Object) str77);
        java.io.OutputStream outputStream79 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties22.store(outputStream79, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(properties26);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "tmlog" + "'", str40, "tmlog");
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertNotNull(properties45);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 50 + "'", int58 == 50);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 10000L + "'", long75 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "{}" + "'", str77, "{}");
        org.junit.Assert.assertEquals("'" + obj78 + "' != '" + "{}" + "'", obj78, "{}");
    }

    @Test
    public void test0481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0481");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.setSerialJtaTransactions(true);
        java.lang.String str4 = atomikosProperties0.logBaseName;
        boolean boolean5 = atomikosProperties0.forceShutdownOnVmExit;
        int int6 = atomikosProperties0.maxActives;
        java.lang.String str7 = atomikosProperties0.logBaseName;
        atomikosProperties0.serialJtaTransactions = true;
        int int10 = atomikosProperties0.maxActives;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tmlog" + "'", str4, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 50 + "'", int6 == 50);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "tmlog" + "'", str7, "tmlog");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 50 + "'", int10 == 50);
    }

    @Test
    public void test0482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0482");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        atomikosProperties0.checkpointInterval = 1L;
        java.lang.String str4 = atomikosProperties0.getService();
        java.lang.String str5 = atomikosProperties0.getLogBaseName();
        atomikosProperties0.setMaxTimeout(1L);
        boolean boolean8 = atomikosProperties0.threadedTwoPhaseCommit;
        atomikosProperties0.setCheckpointInterval((long) (short) 10);
        java.lang.String str11 = atomikosProperties0.getLogBaseDir();
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tmlog" + "'", str5, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test0483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0483");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        boolean boolean7 = properties3.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        java.util.Properties properties15 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet16 = properties15.keySet();
        boolean boolean17 = properties9.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) properties15);
        java.util.Enumeration<java.lang.Object> objEnumeration18 = properties9.elements();
        boolean boolean20 = properties3.remove((java.lang.Object) properties9, (java.lang.Object) 50);
        java.util.Properties properties21 = null;
        java.util.Properties properties22 = new java.util.Properties(properties21);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties24 = atomikosProperties23.asProperties();
        properties22.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties24);
        java.util.Properties properties26 = new java.util.Properties(properties24);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties27.defaultJtaTimeout = (byte) -1;
        java.util.Properties properties30 = atomikosProperties27.asProperties();
        boolean boolean31 = properties24.contains((java.lang.Object) properties30);
        java.util.Properties properties32 = null;
        java.util.Properties properties33 = new java.util.Properties(properties32);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties34 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties35 = atomikosProperties34.asProperties();
        properties33.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties35);
        java.util.Enumeration<java.lang.Object> objEnumeration37 = properties35.keys();
        boolean boolean39 = properties35.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties40 = new java.util.Properties(properties35);
        java.lang.Object obj41 = properties9.replace((java.lang.Object) properties30, (java.lang.Object) properties40);
        java.util.Properties properties42 = new java.util.Properties(properties40);
        java.util.Properties properties43 = new java.util.Properties(properties42);
        java.util.Properties properties44 = new java.util.Properties(properties43);
        java.lang.String str46 = properties43.getProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, true=true, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNotNull(objSet16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objEnumeration18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(properties24);
        org.junit.Assert.assertNotNull(properties30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(properties35);
        org.junit.Assert.assertNotNull(objEnumeration37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertNull(str46);
    }

    @Test
    public void test0484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0484");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        boolean boolean7 = properties3.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties11 = atomikosProperties10.asProperties();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties11);
        java.util.Properties properties15 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet16 = properties15.keySet();
        boolean boolean17 = properties9.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) properties15);
        java.util.Enumeration<java.lang.Object> objEnumeration18 = properties9.elements();
        boolean boolean20 = properties3.remove((java.lang.Object) properties9, (java.lang.Object) 50);
        properties3.clear();
        java.util.Set<java.lang.Object> objSet22 = properties3.keySet();
        java.io.OutputStream outputStream23 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.storeToXML(outputStream23, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=true, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=tmlog, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNotNull(objSet16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objEnumeration18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objSet22);
    }

    @Test
    public void test0485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0485");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        boolean boolean3 = atomikosProperties0.isEnableLogging();
        java.util.Properties properties4 = atomikosProperties0.asProperties();
        atomikosProperties0.setSerialJtaTransactions(false);
        atomikosProperties0.enableLogging = false;
        java.lang.String str9 = atomikosProperties0.logBaseName;
        boolean boolean10 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.checkpointInterval = (short) -1;
        long long13 = atomikosProperties0.getCheckpointInterval();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(properties4);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tmlog" + "'", str9, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
    }

    @Test
    public void test0486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0486");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties1 = atomikosProperties0.asProperties();
        java.util.Set<java.lang.String> strSet2 = properties1.stringPropertyNames();
        java.util.Properties properties3 = new java.util.Properties(properties1);
        java.io.InputStream inputStream4 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.loadFromXML(inputStream4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties1);
        org.junit.Assert.assertNotNull(strSet2);
    }

    @Test
    public void test0487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0487");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties(properties1);
        java.util.Properties properties3 = new java.util.Properties(properties1);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean5 = atomikosProperties4.forceShutdownOnVmExit;
        atomikosProperties4.setSerialJtaTransactions(true);
        java.lang.String str8 = atomikosProperties4.logBaseName;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties10 = atomikosProperties9.asProperties();
        java.util.Properties properties11 = atomikosProperties9.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties13.setService("");
        atomikosProperties13.setThreadedTwoPhaseCommit(true);
        long long18 = atomikosProperties13.getCheckpointInterval();
        boolean boolean19 = atomikosProperties13.threadedTwoPhaseCommit;
        atomikosProperties4.set(properties11, "tmlog", (java.lang.Object) atomikosProperties13);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties21.defaultJtaTimeout = (byte) -1;
        java.util.Properties properties24 = atomikosProperties21.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean26 = atomikosProperties25.forceShutdownOnVmExit;
        atomikosProperties25.setSerialJtaTransactions(true);
        java.lang.String str29 = atomikosProperties25.logBaseName;
        atomikosProperties25.service = "tmlog";
        java.util.Properties properties32 = atomikosProperties25.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean34 = atomikosProperties33.forceShutdownOnVmExit;
        java.lang.String str35 = atomikosProperties33.getLogBaseDir();
        java.lang.Object obj36 = properties24.getOrDefault((java.lang.Object) atomikosProperties25, (java.lang.Object) str35);
        long long37 = atomikosProperties25.getDefaultJtaTimeout();
        atomikosProperties25.setLogBaseName("{}");
        int int40 = atomikosProperties25.maxActives;
        java.lang.Object obj41 = properties3.putIfAbsent((java.lang.Object) properties11, (java.lang.Object) atomikosProperties25);
        atomikosProperties25.logBaseName = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "tmlog" + "'", str8, "tmlog");
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 500L + "'", long18 == 500L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(properties24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "tmlog" + "'", str29, "tmlog");
        org.junit.Assert.assertNotNull(properties32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 10000L + "'", long37 == 10000L);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 50 + "'", int40 == 50);
        org.junit.Assert.assertNull(obj41);
    }

    @Test
    public void test0488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0488");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Properties properties7 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet8 = properties7.keySet();
        boolean boolean9 = properties1.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) properties7);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet10 = properties1.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties11.setService("");
        atomikosProperties11.setThreadedTwoPhaseCommit(true);
        long long16 = atomikosProperties11.getCheckpointInterval();
        boolean boolean17 = atomikosProperties11.threadedTwoPhaseCommit;
        atomikosProperties11.transactionManagerUniqueName = "tmlog";
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties20.setService("");
        boolean boolean23 = atomikosProperties20.isEnableLogging();
        java.util.Properties properties24 = atomikosProperties20.asProperties();
        java.util.Properties properties25 = new java.util.Properties(properties24);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties26.setService("");
        boolean boolean29 = atomikosProperties26.isEnableLogging();
        java.util.Properties properties30 = atomikosProperties26.asProperties();
        atomikosProperties26.setSerialJtaTransactions(false);
        java.lang.String str33 = atomikosProperties26.getLogBaseName();
        atomikosProperties26.setTransactionManagerUniqueName("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties36.defaultJtaTimeout = (byte) -1;
        java.util.Properties properties39 = atomikosProperties36.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean41 = atomikosProperties40.forceShutdownOnVmExit;
        atomikosProperties40.setSerialJtaTransactions(true);
        java.lang.String str44 = atomikosProperties40.logBaseName;
        atomikosProperties40.service = "tmlog";
        java.util.Properties properties47 = atomikosProperties40.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties48 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean49 = atomikosProperties48.forceShutdownOnVmExit;
        java.lang.String str50 = atomikosProperties48.getLogBaseDir();
        java.lang.Object obj51 = properties39.getOrDefault((java.lang.Object) atomikosProperties40, (java.lang.Object) str50);
        java.lang.Object obj52 = properties24.put((java.lang.Object) atomikosProperties26, (java.lang.Object) atomikosProperties40);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties53 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean54 = atomikosProperties53.forceShutdownOnVmExit;
        atomikosProperties53.checkpointInterval = 300000L;
        java.util.Properties properties57 = null;
        java.util.Properties properties58 = new java.util.Properties(properties57);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties59 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties60 = atomikosProperties59.asProperties();
        properties58.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties60);
        java.util.Enumeration<java.lang.Object> objEnumeration62 = properties60.keys();
        boolean boolean64 = properties60.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties65 = null;
        java.util.Properties properties66 = new java.util.Properties(properties65);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties67 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties68 = atomikosProperties67.asProperties();
        properties66.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties68);
        java.util.Properties properties72 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet73 = properties72.keySet();
        boolean boolean74 = properties66.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) properties72);
        java.util.Enumeration<java.lang.Object> objEnumeration75 = properties66.elements();
        boolean boolean77 = properties60.remove((java.lang.Object) properties66, (java.lang.Object) 50);
        java.util.Properties properties79 = null;
        java.util.Properties properties80 = new java.util.Properties(properties79);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties81 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties82 = atomikosProperties81.asProperties();
        properties80.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties82);
        java.util.Properties properties84 = new java.util.Properties(properties82);
        java.util.Collection<java.lang.Object> objCollection85 = properties82.values();
        atomikosProperties53.set(properties66, "{}", (java.lang.Object) objCollection85);
        boolean boolean87 = properties1.replace((java.lang.Object) "tmlog", (java.lang.Object) atomikosProperties26, (java.lang.Object) atomikosProperties53);
        atomikosProperties53.transactionManagerUniqueName = "tmlog";
        boolean boolean90 = atomikosProperties53.isForceShutdownOnVmExit();
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(objEntrySet10);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 500L + "'", long16 == 500L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(properties24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(properties30);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "tmlog" + "'", str33, "tmlog");
        org.junit.Assert.assertNotNull(properties39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "tmlog" + "'", str44, "tmlog");
        org.junit.Assert.assertNotNull(properties47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(properties60);
        org.junit.Assert.assertNotNull(objEnumeration62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(properties68);
        org.junit.Assert.assertNotNull(objSet73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(objEnumeration75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(properties82);
        org.junit.Assert.assertNotNull(objCollection85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test0489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0489");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.defaultJtaTimeout = (byte) -1;
        atomikosProperties0.setSerialJtaTransactions(false);
        atomikosProperties0.logBaseName = "";
        atomikosProperties0.setCheckpointInterval(500L);
        atomikosProperties0.setForceShutdownOnVmExit(true);
        java.util.Properties properties11 = atomikosProperties0.asProperties();
        java.util.Properties properties12 = null;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties14.setService("");
        atomikosProperties14.setThreadedTwoPhaseCommit(true);
        long long19 = atomikosProperties14.getCheckpointInterval();
        atomikosProperties14.maxTimeout = (-1);
        java.util.Properties properties22 = atomikosProperties14.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long24 = atomikosProperties23.defaultJtaTimeout;
        boolean boolean25 = atomikosProperties23.enableLogging;
        atomikosProperties23.setSerialJtaTransactions(true);
        java.util.Properties properties28 = atomikosProperties23.asProperties();
        properties22.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties28);
        java.util.Enumeration<java.lang.Object> objEnumeration30 = properties22.elements();
        java.util.Properties properties31 = new java.util.Properties(properties22);
        // The following exception was thrown during execution in test generation
        try {
            atomikosProperties0.set(properties12, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, true=true, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", (java.lang.Object) properties31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 500L + "'", long19 == 500L);
        org.junit.Assert.assertNotNull(properties22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 10000L + "'", long24 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(properties28);
        org.junit.Assert.assertNotNull(objEnumeration30);
    }

    @Test
    public void test0490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0490");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.defaultJtaTimeout = (byte) -1;
        java.util.Properties properties3 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties5 = atomikosProperties4.asProperties();
        long long6 = atomikosProperties4.getDefaultJtaTimeout();
        java.util.Properties properties7 = atomikosProperties4.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties8.setService("");
        atomikosProperties8.setSerialJtaTransactions(true);
        atomikosProperties8.setEnableLogging(false);
        atomikosProperties8.logBaseName = "tmlog";
        atomikosProperties8.serialJtaTransactions = false;
        atomikosProperties8.setService("{}");
        int int21 = atomikosProperties8.getMaxActives();
        boolean boolean22 = atomikosProperties8.enableLogging;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties24 = atomikosProperties23.asProperties();
        atomikosProperties23.setLogBaseName("hi!");
        atomikosProperties23.setCheckpointInterval((long) ' ');
        atomikosProperties23.transactionManagerUniqueName = "tmlog";
        atomikosProperties23.setLogBaseName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        boolean boolean33 = properties3.replace((java.lang.Object) atomikosProperties4, (java.lang.Object) boolean22, (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        boolean boolean34 = atomikosProperties4.isThreadedTwoPhaseCommit();
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 50 + "'", int21 == 50);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(properties24);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test0491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0491");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Properties properties5 = new java.util.Properties(properties3);
        java.util.Properties properties6 = new java.util.Properties(properties5);
        java.io.OutputStream outputStream7 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties5.storeToXML(outputStream7, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
    }

    @Test
    public void test0492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0492");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        boolean boolean3 = atomikosProperties0.isEnableLogging();
        java.util.Properties properties4 = atomikosProperties0.asProperties();
        properties4.clear();
        java.util.Properties properties6 = null;
        java.util.Properties properties7 = new java.util.Properties(properties6);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties9 = atomikosProperties8.asProperties();
        properties7.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties9);
        java.util.Enumeration<java.lang.Object> objEnumeration11 = properties9.keys();
        java.lang.Object obj13 = properties4.put((java.lang.Object) properties9, (java.lang.Object) (byte) 0);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet14 = properties4.entrySet();
        java.io.OutputStream outputStream15 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties4.save(outputStream15, "tmlog");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(properties4);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertNotNull(objEnumeration11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNotNull(objEntrySet14);
    }

    @Test
    public void test0493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0493");
        java.util.Properties properties0 = new java.util.Properties();
        java.util.Set<java.lang.Object> objSet1 = properties0.keySet();
        java.lang.String str3 = properties0.getProperty("{}");
        java.util.Properties properties4 = null;
        java.util.Properties properties5 = new java.util.Properties(properties4);
        java.util.Properties properties6 = new java.util.Properties(properties5);
        java.util.Properties properties7 = new java.util.Properties(properties5);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean9 = atomikosProperties8.forceShutdownOnVmExit;
        atomikosProperties8.setSerialJtaTransactions(true);
        java.lang.String str12 = atomikosProperties8.logBaseName;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties14 = atomikosProperties13.asProperties();
        java.util.Properties properties15 = atomikosProperties13.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties17.setService("");
        atomikosProperties17.setThreadedTwoPhaseCommit(true);
        long long22 = atomikosProperties17.getCheckpointInterval();
        boolean boolean23 = atomikosProperties17.threadedTwoPhaseCommit;
        atomikosProperties8.set(properties15, "tmlog", (java.lang.Object) atomikosProperties17);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties25.defaultJtaTimeout = (byte) -1;
        java.util.Properties properties28 = atomikosProperties25.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean30 = atomikosProperties29.forceShutdownOnVmExit;
        atomikosProperties29.setSerialJtaTransactions(true);
        java.lang.String str33 = atomikosProperties29.logBaseName;
        atomikosProperties29.service = "tmlog";
        java.util.Properties properties36 = atomikosProperties29.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean38 = atomikosProperties37.forceShutdownOnVmExit;
        java.lang.String str39 = atomikosProperties37.getLogBaseDir();
        java.lang.Object obj40 = properties28.getOrDefault((java.lang.Object) atomikosProperties29, (java.lang.Object) str39);
        long long41 = atomikosProperties29.getDefaultJtaTimeout();
        atomikosProperties29.setLogBaseName("{}");
        int int44 = atomikosProperties29.maxActives;
        java.lang.Object obj45 = properties7.putIfAbsent((java.lang.Object) properties15, (java.lang.Object) atomikosProperties29);
        boolean boolean46 = atomikosProperties29.enableLogging;
        java.util.Properties properties47 = null;
        java.util.Properties properties48 = new java.util.Properties(properties47);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties50 = atomikosProperties49.asProperties();
        properties48.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties50);
        java.util.Properties properties52 = new java.util.Properties(properties50);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties53 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties53.defaultJtaTimeout = (byte) -1;
        java.util.Properties properties56 = atomikosProperties53.asProperties();
        boolean boolean57 = properties50.contains((java.lang.Object) properties56);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties58 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long59 = atomikosProperties58.defaultJtaTimeout;
        boolean boolean60 = atomikosProperties58.enableLogging;
        atomikosProperties58.setSerialJtaTransactions(true);
        java.util.Properties properties63 = atomikosProperties58.asProperties();
        java.util.Properties properties64 = null;
        java.util.Properties properties65 = new java.util.Properties(properties64);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties66 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties67 = atomikosProperties66.asProperties();
        properties65.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties67);
        java.util.Enumeration<java.lang.Object> objEnumeration69 = properties67.keys();
        java.lang.Object obj72 = properties67.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection73 = properties67.values();
        java.util.Set<java.lang.String> strSet74 = properties67.stringPropertyNames();
        boolean boolean75 = properties63.contains((java.lang.Object) properties67);
        boolean boolean76 = properties50.contains((java.lang.Object) properties63);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties77 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean78 = atomikosProperties77.forceShutdownOnVmExit;
        atomikosProperties77.setSerialJtaTransactions(true);
        java.lang.String str81 = atomikosProperties77.logBaseName;
        atomikosProperties77.service = "tmlog";
        java.util.Properties properties84 = atomikosProperties77.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties85 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean86 = atomikosProperties85.forceShutdownOnVmExit;
        atomikosProperties85.setSerialJtaTransactions(true);
        java.lang.String str89 = atomikosProperties85.logBaseName;
        java.lang.Object obj90 = properties50.putIfAbsent((java.lang.Object) properties84, (java.lang.Object) str89);
        java.lang.Object obj91 = properties0.put((java.lang.Object) atomikosProperties29, (java.lang.Object) str89);
        java.io.InputStream inputStream92 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.loadFromXML(inputStream92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objSet1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "tmlog" + "'", str12, "tmlog");
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 500L + "'", long22 == 500L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(properties28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "tmlog" + "'", str33, "tmlog");
        org.junit.Assert.assertNotNull(properties36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 10000L + "'", long41 == 10000L);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 50 + "'", int44 == 50);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(properties50);
        org.junit.Assert.assertNotNull(properties56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 10000L + "'", long59 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(properties63);
        org.junit.Assert.assertNotNull(properties67);
        org.junit.Assert.assertNotNull(objEnumeration69);
        org.junit.Assert.assertNull(obj72);
        org.junit.Assert.assertNotNull(objCollection73);
        org.junit.Assert.assertNotNull(strSet74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "tmlog" + "'", str81, "tmlog");
        org.junit.Assert.assertNotNull(properties84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "tmlog" + "'", str89, "tmlog");
        org.junit.Assert.assertNull(obj90);
        org.junit.Assert.assertNull(obj91);
    }

    @Test
    public void test0494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0494");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        boolean boolean3 = atomikosProperties0.isEnableLogging();
        java.util.Properties properties4 = atomikosProperties0.asProperties();
        properties4.clear();
        java.util.Properties properties6 = null;
        java.util.Properties properties7 = new java.util.Properties(properties6);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties9 = atomikosProperties8.asProperties();
        properties7.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties9);
        java.util.Enumeration<java.lang.Object> objEnumeration11 = properties9.keys();
        java.lang.Object obj13 = properties4.put((java.lang.Object) properties9, (java.lang.Object) (byte) 0);
        boolean boolean14 = properties9.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean16 = atomikosProperties15.forceShutdownOnVmExit;
        atomikosProperties15.setSerialJtaTransactions(true);
        boolean boolean19 = properties9.containsKey((java.lang.Object) atomikosProperties15);
        atomikosProperties15.setLogBaseName("hi!");
        int int22 = atomikosProperties15.getMaxActives();
        atomikosProperties15.setCheckpointInterval((long) (short) -1);
        atomikosProperties15.setLogBaseDir("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties15.enableLogging = true;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(properties4);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertNotNull(objEnumeration11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 50 + "'", int22 == 50);
    }

    @Test
    public void test0495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0495");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Properties properties2 = new java.util.Properties(properties1);
        java.util.Properties properties3 = new java.util.Properties(properties2);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties4.setService("");
        atomikosProperties4.setSerialJtaTransactions(true);
        java.util.Properties properties9 = atomikosProperties4.asProperties();
        java.util.Properties properties10 = atomikosProperties4.asProperties();
        java.util.Properties properties11 = null;
        java.util.Properties properties12 = new java.util.Properties(properties11);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties14 = atomikosProperties13.asProperties();
        properties12.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties14);
        java.util.Enumeration<java.lang.Object> objEnumeration16 = properties14.keys();
        java.lang.Object obj19 = properties14.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection20 = properties14.values();
        java.util.Properties properties21 = new java.util.Properties();
        java.lang.Object obj24 = properties21.getOrDefault((java.lang.Object) (short) 1, (java.lang.Object) (-1.0d));
        properties14.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties21);
        java.util.Properties properties27 = null;
        java.util.Properties properties28 = new java.util.Properties(properties27);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties30 = atomikosProperties29.asProperties();
        properties28.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties30);
        java.util.Enumeration<java.lang.Object> objEnumeration32 = properties30.keys();
        java.lang.Object obj35 = properties30.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection36 = properties30.values();
        java.util.Properties properties37 = new java.util.Properties();
        java.lang.Object obj40 = properties37.getOrDefault((java.lang.Object) (short) 1, (java.lang.Object) (-1.0d));
        properties30.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties37);
        atomikosProperties4.set(properties14, "", (java.lang.Object) properties30);
        java.lang.Object obj43 = properties14.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties45 = atomikosProperties44.asProperties();
        long long46 = atomikosProperties44.getDefaultJtaTimeout();
        long long47 = atomikosProperties44.getDefaultJtaTimeout();
        boolean boolean48 = atomikosProperties44.serialJtaTransactions;
        boolean boolean49 = atomikosProperties44.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean51 = atomikosProperties50.forceShutdownOnVmExit;
        atomikosProperties50.setSerialJtaTransactions(true);
        java.lang.String str54 = atomikosProperties50.logBaseName;
        boolean boolean55 = atomikosProperties50.forceShutdownOnVmExit;
        atomikosProperties50.enableLogging = false;
        java.util.Properties properties58 = atomikosProperties50.asProperties();
        java.util.Properties properties60 = null;
        java.util.Properties properties61 = new java.util.Properties(properties60);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties62 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties63 = atomikosProperties62.asProperties();
        properties61.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties63);
        java.util.Properties properties65 = new java.util.Properties(properties63);
        java.util.Collection<java.lang.Object> objCollection66 = properties63.values();
        java.util.Properties properties67 = new java.util.Properties(properties63);
        properties63.clear();
        java.util.Properties properties69 = null;
        java.util.Properties properties70 = new java.util.Properties(properties69);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties71 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties72 = atomikosProperties71.asProperties();
        properties70.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties72);
        java.util.Enumeration<java.lang.Object> objEnumeration74 = properties72.keys();
        java.lang.Object obj77 = properties72.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection78 = properties72.values();
        java.util.Properties properties79 = new java.util.Properties();
        java.lang.Object obj82 = properties79.getOrDefault((java.lang.Object) (short) 1, (java.lang.Object) (-1.0d));
        properties72.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties79);
        java.util.Properties properties84 = new java.util.Properties(properties72);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties85 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean86 = atomikosProperties85.forceShutdownOnVmExit;
        atomikosProperties85.setSerialJtaTransactions(true);
        java.lang.String str89 = atomikosProperties85.logBaseName;
        atomikosProperties85.service = "tmlog";
        boolean boolean92 = properties84.containsValue((java.lang.Object) "tmlog");
        java.util.Properties properties93 = new java.util.Properties(properties84);
        boolean boolean94 = properties63.contains((java.lang.Object) properties84);
        atomikosProperties44.set(properties58, "hi!", (java.lang.Object) boolean94);
        java.lang.Object obj98 = properties58.setProperty("", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=false, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        boolean boolean99 = properties3.remove((java.lang.Object) properties14, (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=false, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertNotNull(objEnumeration16);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNotNull(objCollection20);
        org.junit.Assert.assertEquals("'" + obj24 + "' != '" + (-1.0d) + "'", obj24, (-1.0d));
        org.junit.Assert.assertNotNull(properties30);
        org.junit.Assert.assertNotNull(objEnumeration32);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNotNull(objCollection36);
        org.junit.Assert.assertEquals("'" + obj40 + "' != '" + (-1.0d) + "'", obj40, (-1.0d));
        org.junit.Assert.assertNotNull(obj43);
// flaky:         org.junit.Assert.assertEquals(obj43.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNotNull(properties45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 10000L + "'", long46 == 10000L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 10000L + "'", long47 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "tmlog" + "'", str54, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(properties58);
        org.junit.Assert.assertNotNull(properties63);
        org.junit.Assert.assertNotNull(objCollection66);
        org.junit.Assert.assertNotNull(properties72);
        org.junit.Assert.assertNotNull(objEnumeration74);
        org.junit.Assert.assertNull(obj77);
        org.junit.Assert.assertNotNull(objCollection78);
        org.junit.Assert.assertEquals("'" + obj82 + "' != '" + (-1.0d) + "'", obj82, (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "tmlog" + "'", str89, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNull(obj98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test0496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0496");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Properties properties5 = new java.util.Properties(properties3);
        java.util.Enumeration<?> wildcardEnumeration6 = properties3.propertyNames();
        java.util.Properties properties7 = new java.util.Properties(properties3);
        java.io.OutputStream outputStream8 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.storeToXML(outputStream8, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(wildcardEnumeration6);
    }

    @Test
    public void test0497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0497");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        atomikosProperties0.setSerialJtaTransactions(true);
        atomikosProperties0.setEnableLogging(false);
        atomikosProperties0.logBaseName = "tmlog";
        atomikosProperties0.maxActives = 1;
        atomikosProperties0.setEnableLogging(true);
        java.lang.String str13 = atomikosProperties0.service;
        java.lang.String str14 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.checkpointInterval = '#';
        int int17 = atomikosProperties0.getMaxActives();
        atomikosProperties0.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties0.setForceShutdownOnVmExit(true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
    }

    @Test
    public void test0498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0498");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        boolean boolean7 = properties3.containsValue((java.lang.Object) 0.0f);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long10 = atomikosProperties9.defaultJtaTimeout;
        boolean boolean11 = atomikosProperties9.enableLogging;
        atomikosProperties9.setSerialJtaTransactions(true);
        java.lang.Object obj14 = properties3.putIfAbsent((java.lang.Object) 100L, (java.lang.Object) true);
        java.util.Properties properties15 = new java.util.Properties(properties3);
        java.io.Writer writer16 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.store(writer16, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(obj14);
    }

    @Test
    public void test0499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0499");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties2 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties3 = atomikosProperties2.asProperties();
        properties1.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties3);
        java.util.Properties properties5 = new java.util.Properties(properties3);
        java.util.Enumeration<?> wildcardEnumeration6 = properties3.propertyNames();
        java.util.Properties properties7 = new java.util.Properties(properties3);
        java.lang.String str8 = properties3.toString();
        java.util.Properties properties9 = null;
        java.util.Properties properties10 = new java.util.Properties(properties9);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties12 = atomikosProperties11.asProperties();
        properties10.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties12);
        java.util.Enumeration<java.lang.Object> objEnumeration14 = properties12.keys();
        boolean boolean16 = properties12.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties17 = null;
        java.util.Properties properties18 = new java.util.Properties(properties17);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties20 = atomikosProperties19.asProperties();
        properties18.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties20);
        java.util.Enumeration<java.lang.Object> objEnumeration22 = properties20.keys();
        java.lang.Object obj25 = properties20.replace((java.lang.Object) 100.0f, (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection26 = properties20.values();
        boolean boolean27 = properties12.containsKey((java.lang.Object) properties20);
        java.util.Properties properties28 = new java.util.Properties(properties12);
        java.lang.Object obj29 = properties28.clone();
        java.util.Collection<java.lang.Object> objCollection30 = properties28.values();
        java.lang.Object obj31 = properties3.get((java.lang.Object) properties28);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties32.setService("");
        atomikosProperties32.setSerialJtaTransactions(true);
        atomikosProperties32.setEnableLogging(false);
        atomikosProperties32.setForceShutdownOnVmExit(true);
        java.util.Properties properties41 = null;
        java.util.Properties properties42 = new java.util.Properties(properties41);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties43 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties44 = atomikosProperties43.asProperties();
        properties42.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties44);
        java.util.Enumeration<java.lang.Object> objEnumeration46 = properties44.keys();
        boolean boolean48 = properties44.containsValue((java.lang.Object) 0.0f);
        java.util.Properties properties49 = new java.util.Properties(properties44);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean51 = atomikosProperties50.forceShutdownOnVmExit;
        atomikosProperties50.setSerialJtaTransactions(true);
        java.lang.String str54 = atomikosProperties50.logBaseName;
        atomikosProperties50.service = "tmlog";
        atomikosProperties50.setSerialJtaTransactions(false);
        atomikosProperties50.setMaxTimeout((long) '4');
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties61 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties61.defaultJtaTimeout = (byte) -1;
        java.util.Properties properties64 = atomikosProperties61.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties65 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean66 = atomikosProperties65.forceShutdownOnVmExit;
        atomikosProperties65.setSerialJtaTransactions(true);
        java.lang.String str69 = atomikosProperties65.logBaseName;
        atomikosProperties65.service = "tmlog";
        java.util.Properties properties72 = atomikosProperties65.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties73 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean74 = atomikosProperties73.forceShutdownOnVmExit;
        java.lang.String str75 = atomikosProperties73.getLogBaseDir();
        java.lang.Object obj76 = properties64.getOrDefault((java.lang.Object) atomikosProperties65, (java.lang.Object) str75);
        long long77 = atomikosProperties65.getDefaultJtaTimeout();
        atomikosProperties65.setLogBaseName("{}");
        int int80 = atomikosProperties65.maxActives;
        long long81 = atomikosProperties65.maxTimeout;
        boolean boolean82 = properties49.remove((java.lang.Object) atomikosProperties50, (java.lang.Object) long81);
        java.lang.Object obj85 = properties49.setProperty("{}", "");
        java.util.Enumeration<?> wildcardEnumeration86 = properties49.propertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties87 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.util.Properties properties88 = atomikosProperties87.asProperties();
        long long89 = atomikosProperties87.getDefaultJtaTimeout();
        atomikosProperties87.logBaseName = "tmlog";
        atomikosProperties87.setForceShutdownOnVmExit(false);
        atomikosProperties87.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.Object obj96 = properties49.remove((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj97 = properties3.put((java.lang.Object) atomikosProperties32, obj96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(wildcardEnumeration6);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str8, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNotNull(properties12);
        org.junit.Assert.assertNotNull(objEnumeration14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(properties20);
        org.junit.Assert.assertNotNull(objEnumeration22);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNotNull(objCollection26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "{}");
        org.junit.Assert.assertNotNull(objCollection30);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNotNull(properties44);
        org.junit.Assert.assertNotNull(objEnumeration46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "tmlog" + "'", str54, "tmlog");
        org.junit.Assert.assertNotNull(properties64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "tmlog" + "'", str69, "tmlog");
        org.junit.Assert.assertNotNull(properties72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNull(obj76);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 10000L + "'", long77 == 10000L);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 50 + "'", int80 == 50);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 300000L + "'", long81 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNull(obj85);
        org.junit.Assert.assertNotNull(wildcardEnumeration86);
        org.junit.Assert.assertNotNull(properties88);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 10000L + "'", long89 == 10000L);
        org.junit.Assert.assertNull(obj96);
    }

    @Test
    public void test0500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0500");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setService("");
        boolean boolean3 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.setLogBaseName("tmlog");
        long long6 = atomikosProperties0.defaultJtaTimeout;
        long long7 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.setDefaultJtaTimeout((long) (byte) -1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
    }
}
