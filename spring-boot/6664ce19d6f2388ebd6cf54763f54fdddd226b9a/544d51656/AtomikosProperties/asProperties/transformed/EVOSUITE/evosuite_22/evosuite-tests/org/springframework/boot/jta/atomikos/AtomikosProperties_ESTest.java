/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 08 21:09:58 GMT 2021
 */

package org.springframework.boot.jta.atomikos;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Properties;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.springframework.boot.jta.atomikos.AtomikosProperties;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AtomikosProperties_ESTest extends AtomikosProperties_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertNotNull(atomikosProperties0);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      
      atomikosProperties0.setService(atomikosProperties0.service);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      
      atomikosProperties0.setSerialJtaTransactions(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      
      atomikosProperties0.setMaxTimeout(atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.maxTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getMaxTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      
      atomikosProperties0.setCheckpointInterval(atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(10000L, atomikosProperties0.checkpointInterval);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getMaxTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getService());
      assertEquals(10000L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertNotNull(atomikosProperties0);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      
      atomikosProperties0.setEnableLogging(atomikosProperties0.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      
      atomikosProperties0.setDefaultJtaTimeout(atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(500L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      
      atomikosProperties0.setLogBaseDir(atomikosProperties0.logBaseName);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(500L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals("tmlog", atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      
      atomikosProperties0.setForceShutdownOnVmExit(atomikosProperties0.forceShutdownOnVmExit);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(500L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals("tmlog", atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      
      atomikosProperties0.setMaxActives(atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(500L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals("tmlog", atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      
      atomikosProperties0.setThreadedTwoPhaseCommit(atomikosProperties0.forceShutdownOnVmExit);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(500L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals("tmlog", atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertNotNull(atomikosProperties0);
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      
      atomikosProperties0.setLogBaseName(atomikosProperties0.service);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      
      atomikosProperties0.setTransactionManagerUniqueName(atomikosProperties0.logBaseDir);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertNotNull(atomikosProperties0);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      
      Properties properties0 = atomikosProperties0.asProperties();
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertNotNull(properties0);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(9, properties0.size());
      assertFalse(properties0.isEmpty());
      
      String string0 = "log_base_name";
      atomikosProperties0.set(properties0, string0, string0);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(9, properties0.size());
      assertFalse(properties0.isEmpty());
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      boolean boolean0 = true;
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertNotNull(atomikosProperties0);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      
      Properties properties0 = atomikosProperties0.asProperties();
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertNotNull(properties0);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(properties0.isEmpty());
      assertEquals(9, properties0.size());
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(50, atomikosProperties0.maxActives);
      assertNotNull(atomikosProperties0);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      
      int int0 = 0;
      atomikosProperties0.setMaxActives(int0);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(0, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      
      boolean boolean0 = atomikosProperties0.isSerialJtaTransactions();
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(0, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(boolean0);
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertNotNull(atomikosProperties0);
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      
      boolean boolean0 = false;
      atomikosProperties0.setSerialJtaTransactions(boolean0);
      assertFalse(atomikosProperties0.serialJtaTransactions);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(50, atomikosProperties0.maxActives);
      assertNotNull(atomikosProperties0);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      
      boolean boolean0 = true;
      atomikosProperties0.setEnableLogging(boolean0);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      
      long long0 = 1L;
      atomikosProperties0.checkpointInterval = long0;
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(1L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      
      boolean boolean1 = true;
      atomikosProperties0.forceShutdownOnVmExit = boolean1;
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(1L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      
      String string0 = ";9BSB97;G(hiO[q(R";
      atomikosProperties0.setLogBaseName(string0);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(1L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(";9BSB97;G(hiO[q(R", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(1L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      
      boolean boolean2 = atomikosProperties0.isThreadedTwoPhaseCommit();
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(1L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(";9BSB97;G(hiO[q(R", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(1L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(boolean2);
      
      Properties properties0 = null;
      String string1 = "org.eclipse.jetty.util.ArrayTernaryTrie";
      // Undeclared exception!
      try { 
        atomikosProperties0.set(properties0, string1, string1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.jta.atomikos.AtomikosProperties", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertNotNull(atomikosProperties0);
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      
      String string0 = "'(s+8,k";
      atomikosProperties0.setTransactionManagerUniqueName(string0);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("'(s+8,k", atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertNotNull(atomikosProperties0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      
      long long0 = 0L;
      atomikosProperties0.setCheckpointInterval(long0);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(0L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      
      String string0 = "LGZK/[c0**m\\8lrJPRf";
      atomikosProperties0.setLogBaseDir(string0);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(0L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("LGZK/[c0**m\\8lrJPRf", atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertNotNull(atomikosProperties0);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      
      String string0 = null;
      atomikosProperties0.setLogBaseName(string0);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertNotNull(atomikosProperties0);
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      
      boolean boolean0 = atomikosProperties0.isEnableLogging();
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(boolean0);
      
      atomikosProperties0.setSerialJtaTransactions(boolean0);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      
      String string0 = atomikosProperties0.getService();
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertNull(string0);
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertNotNull(atomikosProperties0);
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      
      long long0 = (-1L);
      atomikosProperties0.checkpointInterval = long0;
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1L), atomikosProperties0.getCheckpointInterval());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      
      String string0 = "max_timeout";
      atomikosProperties0.setService(string0);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1L), atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1L), atomikosProperties0.getCheckpointInterval());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("max_timeout", atomikosProperties0.getService());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      
      boolean boolean0 = false;
      atomikosProperties0.serialJtaTransactions = boolean0;
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1L), atomikosProperties0.getCheckpointInterval());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("max_timeout", atomikosProperties0.getService());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      
      boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
      assertTrue(boolean1 == boolean0);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1L), atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1L), atomikosProperties0.getCheckpointInterval());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("max_timeout", atomikosProperties0.getService());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(boolean1);
      
      String string1 = atomikosProperties0.getService();
      assertSame(string1, string0);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1L), atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertNotNull(string1);
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals((-1L), atomikosProperties0.getCheckpointInterval());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("max_timeout", atomikosProperties0.getService());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("max_timeout", string1);
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertNotNull(atomikosProperties0);
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals(50, atomikosProperties0.getMaxActives());
      
      boolean boolean0 = atomikosProperties0.isSerialJtaTransactions();
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(boolean0);
      
      atomikosProperties0.setSerialJtaTransactions(boolean0);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals(50, atomikosProperties0.getMaxActives());
      
      String string0 = "> \\:ky0o[ENpYlxO,@-";
      atomikosProperties0.setLogBaseDir(string0);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("> \\:ky0o[ENpYlxO,@-", atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals(50, atomikosProperties0.getMaxActives());
      
      atomikosProperties0.setEnableLogging(boolean0);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("> \\:ky0o[ENpYlxO,@-", atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals(50, atomikosProperties0.getMaxActives());
      
      String string1 = atomikosProperties0.getTransactionManagerUniqueName();
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertNull(string1);
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("> \\:ky0o[ENpYlxO,@-", atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals(50, atomikosProperties0.getMaxActives());
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertNotNull(atomikosProperties0);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      
      Properties properties0 = atomikosProperties0.asProperties();
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertNotNull(properties0);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(9, properties0.size());
      assertFalse(properties0.isEmpty());
      
      String string0 = "log_base_name";
      atomikosProperties0.transactionManagerUniqueName = string0;
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("log_base_name", atomikosProperties0.getTransactionManagerUniqueName());
      
      String string1 = atomikosProperties0.getLogBaseDir();
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertNull(string1);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("log_base_name", atomikosProperties0.getTransactionManagerUniqueName());
      
      String string2 = null;
      atomikosProperties0.setService(string2);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("log_base_name", atomikosProperties0.getTransactionManagerUniqueName());
      
      Properties properties1 = atomikosProperties0.asProperties();
      assertNotSame(properties1, properties0);
      assertFalse(properties1.equals((Object)properties0));
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertNotNull(properties1);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("log_base_name", atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(properties1.isEmpty());
      assertEquals(10, properties1.size());
      
      atomikosProperties0.setLogBaseDir(string2);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("log_base_name", atomikosProperties0.getTransactionManagerUniqueName());
      
      int int0 = (-638);
      atomikosProperties0.setMaxActives(int0);
      assertEquals((-638), atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals((-638), atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("log_base_name", atomikosProperties0.getTransactionManagerUniqueName());
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertNotNull(atomikosProperties0);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      
      int int0 = 0;
      boolean boolean0 = true;
      atomikosProperties0.forceShutdownOnVmExit = boolean0;
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      
      atomikosProperties0.setMaxActives(int0);
      assertTrue(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(0, atomikosProperties0.maxActives);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      
      int int1 = atomikosProperties0.getMaxActives();
      assertTrue(int1 == int0);
      assertTrue(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(0, atomikosProperties0.maxActives);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(0, int1);
      
      boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
      assertTrue(boolean1 == boolean0);
      assertTrue(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(0, atomikosProperties0.maxActives);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(boolean1);
      
      Properties properties0 = atomikosProperties0.asProperties();
      assertTrue(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(0, atomikosProperties0.maxActives);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertNotNull(properties0);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(9, properties0.size());
      assertFalse(properties0.isEmpty());
      
      atomikosProperties0.setSerialJtaTransactions(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(0, atomikosProperties0.maxActives);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertNotNull(atomikosProperties0);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      
      String string0 = "";
      long long0 = 0L;
      atomikosProperties0.setCheckpointInterval(long0);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(0L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      
      atomikosProperties0.service = string0;
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("", atomikosProperties0.getService());
      
      long long1 = 500L;
      atomikosProperties0.setDefaultJtaTimeout(long1);
      assertFalse(long1 == long0);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(500L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(0L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("", atomikosProperties0.getService());
      
      atomikosProperties0.setService(string0);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(500L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(0L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("", atomikosProperties0.getService());
      
      Properties properties0 = atomikosProperties0.asProperties();
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(500L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(0L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertNotNull(properties0);
      assertEquals(500L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("", atomikosProperties0.getService());
      assertFalse(properties0.isEmpty());
      assertEquals(10, properties0.size());
      
      Properties properties1 = atomikosProperties0.asProperties();
      assertNotSame(properties1, properties0);
      assertFalse(properties1.equals((Object)properties0));
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(500L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(0L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertNotNull(properties1);
      assertEquals(500L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("", atomikosProperties0.getService());
      assertEquals(10, properties1.size());
      assertFalse(properties1.isEmpty());
      
      boolean boolean0 = atomikosProperties0.isThreadedTwoPhaseCommit();
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(500L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(0L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("", atomikosProperties0.getService());
      assertFalse(boolean0);
      
      boolean boolean1 = atomikosProperties0.isThreadedTwoPhaseCommit();
      assertTrue(boolean1 == boolean0);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(500L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(0L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("", atomikosProperties0.getService());
      assertFalse(boolean1);
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertNotNull(atomikosProperties0);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      
      long long0 = (-1014L);
      atomikosProperties0.checkpointInterval = long0;
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals((-1014L), atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      
      long long1 = atomikosProperties0.getDefaultJtaTimeout();
      assertFalse(long1 == long0);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals((-1014L), atomikosProperties0.checkpointInterval);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals((-1014L), atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, long1);
      
      boolean boolean0 = atomikosProperties0.isEnableLogging();
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals((-1014L), atomikosProperties0.checkpointInterval);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals((-1014L), atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(boolean0);
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertNotNull(atomikosProperties0);
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      
      boolean boolean0 = true;
      atomikosProperties0.setForceShutdownOnVmExit(boolean0);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      
      boolean boolean1 = true;
      atomikosProperties0.setForceShutdownOnVmExit(boolean1);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      
      String string0 = atomikosProperties0.getTransactionManagerUniqueName();
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertNull(string0);
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      
      String string1 = atomikosProperties0.getService();
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertNull(string1);
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertNotNull(atomikosProperties0);
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      
      boolean boolean0 = false;
      atomikosProperties0.setEnableLogging(boolean0);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      
      String string0 = "/-sOLqF$'cI<TCpsj";
      atomikosProperties0.setTransactionManagerUniqueName(string0);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("/-sOLqF$'cI<TCpsj", atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      
      long long0 = atomikosProperties0.getCheckpointInterval();
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("/-sOLqF$'cI<TCpsj", atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, long0);
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertNotNull(atomikosProperties0);
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      
      int int0 = 0;
      atomikosProperties0.maxActives = int0;
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      
      String string0 = "}b3< J1@fZuWBu({1~";
      atomikosProperties0.service = string0;
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      
      atomikosProperties0.service = string0;
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      
      atomikosProperties0.setTransactionManagerUniqueName(string0);
      assertEquals(0, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      
      boolean boolean0 = true;
      atomikosProperties0.threadedTwoPhaseCommit = boolean0;
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      
      boolean boolean1 = true;
      atomikosProperties0.setEnableLogging(boolean1);
      assertEquals(0, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      
      atomikosProperties0.setSerialJtaTransactions(boolean1);
      assertEquals(0, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      
      Properties properties0 = atomikosProperties0.asProperties();
      assertEquals(0, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertNotNull(properties0);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(11, properties0.size());
      assertFalse(properties0.isEmpty());
      
      boolean boolean2 = atomikosProperties0.isSerialJtaTransactions();
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(0, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(boolean2);
      
      String string1 = "org.springframework.boot.jta.atomikos.AtomikosProperties";
      atomikosProperties0.service = string1;
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("org.springframework.boot.jta.atomikos.AtomikosProperties", atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      
      String string2 = atomikosProperties0.getService();
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string2.equals((Object)string0));
      assertEquals(0, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertNotNull(string2);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("org.springframework.boot.jta.atomikos.AtomikosProperties", atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("org.springframework.boot.jta.atomikos.AtomikosProperties", string2);
      
      Properties properties1 = atomikosProperties0.asProperties();
      assertNotSame(properties1, properties0);
      assertFalse(properties1.equals((Object)properties0));
      assertEquals(0, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertNotNull(properties1);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("org.springframework.boot.jta.atomikos.AtomikosProperties", atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(properties1.isEmpty());
      assertEquals(11, properties1.size());
      
      Properties properties2 = atomikosProperties0.asProperties();
      assertNotSame(properties2, properties1);
      assertNotSame(properties2, properties0);
      assertFalse(properties2.equals((Object)properties1));
      assertFalse(properties2.equals((Object)properties0));
      assertEquals(0, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertNotNull(properties2);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("org.springframework.boot.jta.atomikos.AtomikosProperties", atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(11, properties2.size());
      assertFalse(properties2.isEmpty());
      
      String string3 = atomikosProperties0.getService();
      assertSame(string3, string1);
      assertNotSame(string3, string0);
      assertSame(string3, string2);
      assertFalse(string3.equals((Object)string0));
      assertEquals(0, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertNotNull(string3);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("org.springframework.boot.jta.atomikos.AtomikosProperties", atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("org.springframework.boot.jta.atomikos.AtomikosProperties", string3);
      
      String string4 = "";
      atomikosProperties0.setTransactionManagerUniqueName(string4);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals(0, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("org.springframework.boot.jta.atomikos.AtomikosProperties", atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      
      long long0 = atomikosProperties0.getCheckpointInterval();
      assertEquals(0, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("org.springframework.boot.jta.atomikos.AtomikosProperties", atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, long0);
      
      boolean boolean3 = atomikosProperties0.isThreadedTwoPhaseCommit();
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertEquals(0, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("org.springframework.boot.jta.atomikos.AtomikosProperties", atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(boolean3);
      
      atomikosProperties0.setCheckpointInterval(long0);
      assertEquals(0, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("org.springframework.boot.jta.atomikos.AtomikosProperties", atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertNotNull(atomikosProperties0);
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      
      long long0 = (-1356L);
      atomikosProperties0.checkpointInterval = long0;
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals((-1356L), atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      
      long long1 = atomikosProperties0.getMaxTimeout();
      assertFalse(long1 == long0);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-1356L), atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals((-1356L), atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(300000L, long1);
      
      long long2 = 0L;
      atomikosProperties0.setDefaultJtaTimeout(long2);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals((-1356L), atomikosProperties0.checkpointInterval);
      assertEquals(0L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals((-1356L), atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertNotNull(atomikosProperties0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      
      String string0 = ")$";
      atomikosProperties0.set(properties0, string0, properties0);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(1, properties0.size());
      assertFalse(properties0.isEmpty());
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertNotNull(atomikosProperties0);
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      
      long long0 = (-2858L);
      Properties properties0 = atomikosProperties0.asProperties();
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertNotNull(properties0);
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(9, properties0.size());
      assertFalse(properties0.isEmpty());
      
      String string0 = "";
      String string1 = null;
      atomikosProperties0.set(properties0, string0, string1);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(9, properties0.size());
      assertFalse(properties0.isEmpty());
      
      atomikosProperties0.maxTimeout = long0;
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals((-2858L), atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      
      atomikosProperties0.defaultJtaTimeout = long0;
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals((-2858L), atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-2858L), atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      
      boolean boolean0 = atomikosProperties0.isThreadedTwoPhaseCommit();
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals((-2858L), atomikosProperties0.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals((-2858L), atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals((-2858L), atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-2858L), atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(boolean0);
      
      String string2 = "FileSystemStore.remove_committed(";
      atomikosProperties0.setLogBaseName(string2);
      assertNotSame(string2, string0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals((-2858L), atomikosProperties0.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals((-2858L), atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("FileSystemStore.remove_committed(", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals((-2858L), atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-2858L), atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertNotNull(atomikosProperties0);
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      
      boolean boolean0 = true;
      atomikosProperties0.setThreadedTwoPhaseCommit(boolean0);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertNotNull(atomikosProperties0);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      
      long long0 = 0L;
      atomikosProperties0.setCheckpointInterval(long0);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(0L, atomikosProperties0.checkpointInterval);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      
      long long1 = (-1274L);
      atomikosProperties0.setMaxTimeout(long1);
      assertFalse(long1 == long0);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(0L, atomikosProperties0.checkpointInterval);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals((-1274L), atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1274L), atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertNotNull(atomikosProperties0);
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      
      boolean boolean0 = false;
      atomikosProperties0.setForceShutdownOnVmExit(boolean0);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertNotNull(atomikosProperties0);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      
      String string0 = "";
      atomikosProperties0.transactionManagerUniqueName = string0;
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      
      boolean boolean0 = false;
      atomikosProperties0.setThreadedTwoPhaseCommit(boolean0);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      
      long long0 = (-1006L);
      atomikosProperties0.setCheckpointInterval(long0);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals((-1006L), atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals((-1006L), atomikosProperties0.getCheckpointInterval());
      
      long long1 = atomikosProperties0.getDefaultJtaTimeout();
      assertFalse(long1 == long0);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals((-1006L), atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals((-1006L), atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, long1);
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertNotNull(atomikosProperties0);
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      
      String string0 = atomikosProperties0.getTransactionManagerUniqueName();
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertNull(string0);
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      
      long long0 = (-1012L);
      atomikosProperties0.setCheckpointInterval(long0);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals((-1012L), atomikosProperties0.checkpointInterval);
      assertEquals(50, atomikosProperties0.maxActives);
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-1012L), atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      
      String string1 = atomikosProperties0.getLogBaseName();
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals((-1012L), atomikosProperties0.checkpointInterval);
      assertEquals(50, atomikosProperties0.maxActives);
      assertNotNull(string1);
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-1012L), atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tmlog", string1);
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertNotNull(atomikosProperties0);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      
      int int0 = (-1);
      atomikosProperties0.maxActives = int0;
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals((-1), atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      
      boolean boolean0 = atomikosProperties0.isForceShutdownOnVmExit();
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1), atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals((-1), atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(boolean0);
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertNotNull(atomikosProperties0);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getService());
      assertEquals(50, atomikosProperties0.getMaxActives());
      
      int int0 = (-3303);
      atomikosProperties0.setMaxActives(int0);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals((-3303), atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals((-3303), atomikosProperties0.getMaxActives());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getService());
      
      boolean boolean0 = false;
      atomikosProperties0.setSerialJtaTransactions(boolean0);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals((-3303), atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.serialJtaTransactions);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals((-3303), atomikosProperties0.getMaxActives());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getService());
      
      String string0 = "0TK7_Fk7Se4U83sA@";
      atomikosProperties0.logBaseName = string0;
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals((-3303), atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("0TK7_Fk7Se4U83sA@", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getService());
      
      Properties properties0 = atomikosProperties0.asProperties();
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals((-3303), atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.serialJtaTransactions);
      assertNotNull(properties0);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals((-3303), atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("0TK7_Fk7Se4U83sA@", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getService());
      assertEquals(9, properties0.size());
      assertFalse(properties0.isEmpty());
      
      long long0 = (-2368L);
      atomikosProperties0.setCheckpointInterval(long0);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals((-3303), atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-2368L), atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.serialJtaTransactions);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals((-3303), atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("0TK7_Fk7Se4U83sA@", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-2368L), atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getService());
      
      atomikosProperties0.setDefaultJtaTimeout(long0);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals((-3303), atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals((-2368L), atomikosProperties0.defaultJtaTimeout);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-2368L), atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals((-3303), atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("0TK7_Fk7Se4U83sA@", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-2368L), atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getService());
      assertEquals((-2368L), atomikosProperties0.getDefaultJtaTimeout());
      
      atomikosProperties0.setCheckpointInterval(int0);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals((-3303), atomikosProperties0.maxActives);
      assertEquals((-3303L), atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals((-2368L), atomikosProperties0.defaultJtaTimeout);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals((-3303), atomikosProperties0.getMaxActives());
      assertEquals((-3303L), atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("0TK7_Fk7Se4U83sA@", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getService());
      assertEquals((-2368L), atomikosProperties0.getDefaultJtaTimeout());
      
      boolean boolean1 = atomikosProperties0.isEnableLogging();
      assertFalse(boolean1 == boolean0);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals((-3303), atomikosProperties0.maxActives);
      assertEquals((-3303L), atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals((-2368L), atomikosProperties0.defaultJtaTimeout);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals((-3303), atomikosProperties0.getMaxActives());
      assertEquals((-3303L), atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("0TK7_Fk7Se4U83sA@", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getService());
      assertEquals((-2368L), atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(boolean1);
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertNotNull(atomikosProperties0);
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      
      String string0 = null;
      atomikosProperties0.setService(string0);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      
      boolean boolean0 = false;
      atomikosProperties0.serialJtaTransactions = boolean0;
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      
      String string1 = null;
      atomikosProperties0.logBaseName = string1;
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      
      String string2 = "rNWiY[ t)6";
      atomikosProperties0.logBaseName = string2;
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("rNWiY[ t)6", atomikosProperties0.getLogBaseName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      
      long long0 = 300000L;
      atomikosProperties0.setDefaultJtaTimeout(long0);
      assertFalse(atomikosProperties0.serialJtaTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("rNWiY[ t)6", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(300000L, atomikosProperties0.getDefaultJtaTimeout());
      
      atomikosProperties0.setForceShutdownOnVmExit(boolean0);
      assertFalse(atomikosProperties0.serialJtaTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("rNWiY[ t)6", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(300000L, atomikosProperties0.getDefaultJtaTimeout());
      
      atomikosProperties0.setService(string2);
      assertFalse(atomikosProperties0.serialJtaTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("rNWiY[ t)6", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("rNWiY[ t)6", atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getDefaultJtaTimeout());
      
      atomikosProperties0.setMaxTimeout(long0);
      assertFalse(atomikosProperties0.serialJtaTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("rNWiY[ t)6", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("rNWiY[ t)6", atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getDefaultJtaTimeout());
      
      atomikosProperties0.setCheckpointInterval(long0);
      assertFalse(atomikosProperties0.serialJtaTransactions);
      assertEquals(300000L, atomikosProperties0.checkpointInterval);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("rNWiY[ t)6", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("rNWiY[ t)6", atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.getCheckpointInterval());
      
      atomikosProperties0.setLogBaseName(string2);
      assertFalse(atomikosProperties0.serialJtaTransactions);
      assertEquals(300000L, atomikosProperties0.checkpointInterval);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("rNWiY[ t)6", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("rNWiY[ t)6", atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.getCheckpointInterval());
      
      boolean boolean1 = atomikosProperties0.isThreadedTwoPhaseCommit();
      assertTrue(boolean1 == boolean0);
      assertFalse(atomikosProperties0.serialJtaTransactions);
      assertEquals(300000L, atomikosProperties0.checkpointInterval);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("rNWiY[ t)6", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("rNWiY[ t)6", atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.getCheckpointInterval());
      assertFalse(boolean1);
      
      Properties properties0 = atomikosProperties0.asProperties();
      assertFalse(atomikosProperties0.serialJtaTransactions);
      assertEquals(300000L, atomikosProperties0.checkpointInterval);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.enableLogging);
      assertNotNull(properties0);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("rNWiY[ t)6", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("rNWiY[ t)6", atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.getCheckpointInterval());
      assertFalse(properties0.isEmpty());
      assertEquals(10, properties0.size());
      
      long long1 = (-1L);
      atomikosProperties0.setCheckpointInterval(long1);
      assertFalse(long1 == long0);
      assertFalse(atomikosProperties0.serialJtaTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals((-1L), atomikosProperties0.checkpointInterval);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("rNWiY[ t)6", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("rNWiY[ t)6", atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals((-1L), atomikosProperties0.getCheckpointInterval());
      
      atomikosProperties0.setLogBaseName(string0);
      assertFalse(atomikosProperties0.serialJtaTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals((-1L), atomikosProperties0.checkpointInterval);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getLogBaseName());
      assertEquals("rNWiY[ t)6", atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals((-1L), atomikosProperties0.getCheckpointInterval());
      
      long long2 = atomikosProperties0.getCheckpointInterval();
      assertTrue(long2 == long1);
      assertFalse(long2 == long0);
      assertFalse(atomikosProperties0.serialJtaTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals((-1L), atomikosProperties0.checkpointInterval);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getLogBaseName());
      assertEquals("rNWiY[ t)6", atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals((-1L), atomikosProperties0.getCheckpointInterval());
      assertEquals((-1L), long2);
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertNotNull(atomikosProperties0);
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      
      String string0 = null;
      atomikosProperties0.logBaseDir = string0;
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      
      long long0 = 0L;
      String string1 = "XhVC|'w\"{iD^qo!}[";
      atomikosProperties0.setLogBaseDir(string1);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals("XhVC|'w\"{iD^qo!}[", atomikosProperties0.getLogBaseDir());
      
      atomikosProperties0.setCheckpointInterval(long0);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(0L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals("XhVC|'w\"{iD^qo!}[", atomikosProperties0.getLogBaseDir());
      
      atomikosProperties0.checkpointInterval = long0;
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals("XhVC|'w\"{iD^qo!}[", atomikosProperties0.getLogBaseDir());
      
      String string2 = "A5 3@gG}5sS";
      atomikosProperties0.setLogBaseName(string2);
      assertNotSame(string2, string1);
      assertFalse(string2.equals((Object)string1));
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(0L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("A5 3@gG}5sS", atomikosProperties0.getLogBaseName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals("XhVC|'w\"{iD^qo!}[", atomikosProperties0.getLogBaseDir());
      
      long long1 = atomikosProperties0.getCheckpointInterval();
      assertTrue(long1 == long0);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(0L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("A5 3@gG}5sS", atomikosProperties0.getLogBaseName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals("XhVC|'w\"{iD^qo!}[", atomikosProperties0.getLogBaseDir());
      assertEquals(0L, long1);
      
      int int0 = 0;
      atomikosProperties0.setMaxActives(int0);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(0L, atomikosProperties0.checkpointInterval);
      assertEquals(0, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("A5 3@gG}5sS", atomikosProperties0.getLogBaseName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals("XhVC|'w\"{iD^qo!}[", atomikosProperties0.getLogBaseDir());
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertNotNull(atomikosProperties0);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      
      int int0 = atomikosProperties0.getMaxActives();
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, int0);
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertNotNull(atomikosProperties0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      
      String string0 = "";
      atomikosProperties0.logBaseName = string0;
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("", atomikosProperties0.getLogBaseName());
      
      long long0 = (-587L);
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      
      String string1 = "";
      Object object0 = new Object();
      assertNotNull(object0);
      
      atomikosProperties0.set(properties0, string1, object0);
      assertSame(string1, string0);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertFalse(properties0.isEmpty());
      assertEquals(1, properties0.size());
      
      atomikosProperties0.setCheckpointInterval(long0);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals((-587L), atomikosProperties0.checkpointInterval);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-587L), atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("", atomikosProperties0.getLogBaseName());
      
      atomikosProperties0.setCheckpointInterval(long0);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals((-587L), atomikosProperties0.checkpointInterval);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-587L), atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("", atomikosProperties0.getLogBaseName());
      
      String string2 = atomikosProperties0.getLogBaseName();
      assertSame(string2, string0);
      assertSame(string2, string1);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals((-587L), atomikosProperties0.checkpointInterval);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertNotNull(string2);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-587L), atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertEquals("", string2);
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertNotNull(atomikosProperties0);
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      
      int int0 = 127;
      atomikosProperties0.setMaxActives(int0);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(127, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(127, atomikosProperties0.getMaxActives());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      
      int int1 = (-3143);
      atomikosProperties0.setMaxActives(int1);
      assertFalse(int1 == int0);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-3143), atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-3143), atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      
      boolean boolean0 = true;
      Properties properties0 = atomikosProperties0.asProperties();
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-3143), atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertNotNull(properties0);
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-3143), atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(9, properties0.size());
      assertFalse(properties0.isEmpty());
      
      String string0 = "'pm4[O#ppG/g\"2";
      atomikosProperties0.set(properties0, string0, properties0);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-3143), atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-3143), atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10, properties0.size());
      assertFalse(properties0.isEmpty());
      
      atomikosProperties0.setEnableLogging(boolean0);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-3143), atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-3143), atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      
      String string1 = "oBP";
      atomikosProperties0.setTransactionManagerUniqueName(string1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-3143), atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-3143), atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("oBP", atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      
      String string2 = "2{\\y17~qYFvdeG,lCIt";
      atomikosProperties0.transactionManagerUniqueName = string2;
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-3143), atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("2{\\y17~qYFvdeG,lCIt", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      
      String string3 = atomikosProperties0.getLogBaseName();
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-3143), atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertNotNull(string3);
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-3143), atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("2{\\y17~qYFvdeG,lCIt", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tmlog", string3);
      
      int int2 = atomikosProperties0.getMaxActives();
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-3143), atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-3143), atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("2{\\y17~qYFvdeG,lCIt", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-3143), int2);
      
      boolean boolean1 = true;
      atomikosProperties0.setForceShutdownOnVmExit(boolean1);
      assertTrue(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals((-3143), atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals((-3143), atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("2{\\y17~qYFvdeG,lCIt", atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertNotNull(atomikosProperties0);
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      
      String string0 = "AV7!1QF4,9%OtrJ!+";
      atomikosProperties0.setTransactionManagerUniqueName(string0);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("AV7!1QF4,9%OtrJ!+", atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      
      long long0 = 0L;
      atomikosProperties0.defaultJtaTimeout = long0;
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("AV7!1QF4,9%OtrJ!+", atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      
      boolean boolean0 = true;
      atomikosProperties0.threadedTwoPhaseCommit = boolean0;
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("AV7!1QF4,9%OtrJ!+", atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      
      atomikosProperties0.setForceShutdownOnVmExit(boolean0);
      assertTrue(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(0L, atomikosProperties0.defaultJtaTimeout);
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("AV7!1QF4,9%OtrJ!+", atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      
      boolean boolean1 = atomikosProperties0.isSerialJtaTransactions();
      assertTrue(boolean1 == boolean0);
      assertTrue(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(0L, atomikosProperties0.defaultJtaTimeout);
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("AV7!1QF4,9%OtrJ!+", atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(boolean1);
      
      String string1 = atomikosProperties0.getTransactionManagerUniqueName();
      assertSame(string1, string0);
      assertTrue(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(0L, atomikosProperties0.defaultJtaTimeout);
      assertNotNull(string1);
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("AV7!1QF4,9%OtrJ!+", atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals("AV7!1QF4,9%OtrJ!+", string1);
      
      long long1 = atomikosProperties0.getCheckpointInterval();
      assertFalse(long1 == long0);
      assertTrue(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(0L, atomikosProperties0.defaultJtaTimeout);
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("AV7!1QF4,9%OtrJ!+", atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, long1);
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertNotNull(atomikosProperties0);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      
      String string0 = atomikosProperties0.getLogBaseName();
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertNotNull(string0);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tmlog", string0);
      
      long long0 = 668L;
      atomikosProperties0.defaultJtaTimeout = long0;
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertEquals(668L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      
      String string1 = ")mG7?%TN#Lr";
      atomikosProperties0.logBaseDir = string1;
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(")mG7?%TN#Lr", atomikosProperties0.getLogBaseDir());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertEquals(668L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      
      int int0 = 0;
      atomikosProperties0.setMaxActives(int0);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(0, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(668L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(")mG7?%TN#Lr", atomikosProperties0.getLogBaseDir());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertEquals(668L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      
      boolean boolean0 = false;
      String string2 = "min is greater than max: ";
      atomikosProperties0.logBaseName = string2;
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(")mG7?%TN#Lr", atomikosProperties0.getLogBaseDir());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("min is greater than max: ", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getService());
      assertEquals(668L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      
      atomikosProperties0.setEnableLogging(boolean0);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(0, atomikosProperties0.maxActives);
      assertEquals(668L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertFalse(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties0.isEnableLogging());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(")mG7?%TN#Lr", atomikosProperties0.getLogBaseDir());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("min is greater than max: ", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getService());
      assertEquals(668L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      
      String string3 = atomikosProperties0.getLogBaseDir();
      assertNotSame(string3, string0);
      assertSame(string3, string1);
      assertNotSame(string3, string2);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(0, atomikosProperties0.maxActives);
      assertEquals(668L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertFalse(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertNotNull(string3);
      assertFalse(atomikosProperties0.isEnableLogging());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(")mG7?%TN#Lr", atomikosProperties0.getLogBaseDir());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("min is greater than max: ", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getService());
      assertEquals(668L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(")mG7?%TN#Lr", string3);
      
      String string4 = atomikosProperties0.getLogBaseDir();
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertSame(string4, string1);
      assertSame(string4, string3);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(0, atomikosProperties0.maxActives);
      assertEquals(668L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertFalse(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertNotNull(string4);
      assertFalse(atomikosProperties0.isEnableLogging());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(")mG7?%TN#Lr", atomikosProperties0.getLogBaseDir());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("min is greater than max: ", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getService());
      assertEquals(668L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(")mG7?%TN#Lr", string4);
      
      String string5 = "enable_logging";
      atomikosProperties0.setService(string5);
      assertNotSame(string5, string4);
      assertNotSame(string5, string0);
      assertNotSame(string5, string1);
      assertNotSame(string5, string3);
      assertNotSame(string5, string2);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(0, atomikosProperties0.maxActives);
      assertEquals(668L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertFalse(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties0.isEnableLogging());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(")mG7?%TN#Lr", atomikosProperties0.getLogBaseDir());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("enable_logging", atomikosProperties0.getService());
      assertEquals("min is greater than max: ", atomikosProperties0.getLogBaseName());
      assertEquals(668L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertNotNull(atomikosProperties0);
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      
      String string0 = "";
      atomikosProperties0.setService(string0);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("", atomikosProperties0.getService());
      
      int int0 = 0;
      atomikosProperties0.maxActives = int0;
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("", atomikosProperties0.getService());
      
      String string1 = "max_actives";
      atomikosProperties0.service = string1;
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals("max_actives", atomikosProperties0.getService());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      
      String string2 = "";
      atomikosProperties0.setLogBaseDir(string2);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string2.equals((Object)string1));
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(0, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals("max_actives", atomikosProperties0.getService());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      
      long long0 = 0L;
      atomikosProperties0.setMaxTimeout(long0);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(0L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(0, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals("max_actives", atomikosProperties0.getService());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      
      String string3 = atomikosProperties0.getTransactionManagerUniqueName();
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(0L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(0, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertNull(string3);
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals("max_actives", atomikosProperties0.getService());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      
      atomikosProperties0.setLogBaseName(string0);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertFalse(string0.equals((Object)string1));
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(0L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(0, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals("max_actives", atomikosProperties0.getService());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("", atomikosProperties0.getLogBaseName());
      
      String string4 = atomikosProperties0.getLogBaseDir();
      assertSame(string4, string0);
      assertSame(string4, string2);
      assertNotSame(string4, string1);
      assertFalse(string4.equals((Object)string1));
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(0L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(0, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertNotNull(string4);
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals("max_actives", atomikosProperties0.getService());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertEquals("", string4);
      
      long long1 = 0L;
      atomikosProperties0.setDefaultJtaTimeout(long1);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(0L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(0, atomikosProperties0.maxActives);
      assertEquals(0L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertEquals("max_actives", atomikosProperties0.getService());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("", atomikosProperties0.getLogBaseName());
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertNotNull(atomikosProperties0);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      
      long long0 = 300000L;
      String string0 = "";
      atomikosProperties0.setTransactionManagerUniqueName(string0);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      
      atomikosProperties0.service = string0;
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("", atomikosProperties0.getService());
      
      atomikosProperties0.defaultJtaTimeout = long0;
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(300000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals("", atomikosProperties0.getService());
      
      String string1 = atomikosProperties0.getService();
      assertSame(string1, string0);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(300000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertNotNull(string1);
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(300000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals("", atomikosProperties0.getService());
      assertEquals("", string1);
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertNotNull(atomikosProperties0);
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      
      long long0 = 3033L;
      atomikosProperties0.setMaxTimeout(long0);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(3033L, atomikosProperties0.maxTimeout);
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(3033L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      
      long long1 = 0L;
      atomikosProperties0.maxTimeout = long1;
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      
      String string0 = "";
      atomikosProperties0.transactionManagerUniqueName = string0;
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      
      boolean boolean0 = false;
      atomikosProperties0.setSerialJtaTransactions(boolean0);
      assertFalse(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(0L, atomikosProperties0.maxTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      
      long long2 = atomikosProperties0.getMaxTimeout();
      assertFalse(long2 == long0);
      assertTrue(long2 == long1);
      assertFalse(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(0L, atomikosProperties0.maxTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(0L, long2);
      
      boolean boolean1 = false;
      atomikosProperties0.setForceShutdownOnVmExit(boolean1);
      assertFalse(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(0L, atomikosProperties0.maxTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      
      boolean boolean2 = atomikosProperties0.isSerialJtaTransactions();
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(0L, atomikosProperties0.maxTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(boolean2);
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertNotNull(atomikosProperties0);
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      
      String string0 = "T7@V";
      atomikosProperties0.setLogBaseName(string0);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("T7@V", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      
      String string1 = "+u^*?%#_OVm[;e";
      atomikosProperties0.setLogBaseDir(string1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("+u^*?%#_OVm[;e", atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("T7@V", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      
      String string2 = "match {} from {} byName={} byLocation={} in {}";
      atomikosProperties0.service = string2;
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("+u^*?%#_OVm[;e", atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("match {} from {} byName={} byLocation={} in {}", atomikosProperties0.getService());
      assertEquals("T7@V", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      
      boolean boolean0 = false;
      atomikosProperties0.forceShutdownOnVmExit = boolean0;
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("+u^*?%#_OVm[;e", atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("match {} from {} byName={} byLocation={} in {}", atomikosProperties0.getService());
      assertEquals("T7@V", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      
      String string3 = "\"6Z";
      atomikosProperties0.setLogBaseDir(string3);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("\"6Z", atomikosProperties0.getLogBaseDir());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("match {} from {} byName={} byLocation={} in {}", atomikosProperties0.getService());
      assertEquals("T7@V", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      
      long long0 = (-105L);
      atomikosProperties0.setDefaultJtaTimeout(long0);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-105L), atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals((-105L), atomikosProperties0.getDefaultJtaTimeout());
      assertEquals("\"6Z", atomikosProperties0.getLogBaseDir());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("match {} from {} byName={} byLocation={} in {}", atomikosProperties0.getService());
      assertEquals("T7@V", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      
      long long1 = atomikosProperties0.getDefaultJtaTimeout();
      assertTrue(long1 == long0);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-105L), atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals((-105L), atomikosProperties0.getDefaultJtaTimeout());
      assertEquals("\"6Z", atomikosProperties0.getLogBaseDir());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("match {} from {} byName={} byLocation={} in {}", atomikosProperties0.getService());
      assertEquals("T7@V", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-105L), long1);
      
      long long2 = atomikosProperties0.getMaxTimeout();
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-105L), atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals((-105L), atomikosProperties0.getDefaultJtaTimeout());
      assertEquals("\"6Z", atomikosProperties0.getLogBaseDir());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("match {} from {} byName={} byLocation={} in {}", atomikosProperties0.getService());
      assertEquals("T7@V", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(300000L, long2);
      
      Properties properties0 = atomikosProperties0.asProperties();
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-105L), atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertNotNull(properties0);
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals((-105L), atomikosProperties0.getDefaultJtaTimeout());
      assertEquals("\"6Z", atomikosProperties0.getLogBaseDir());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("match {} from {} byName={} byLocation={} in {}", atomikosProperties0.getService());
      assertEquals("T7@V", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(properties0.isEmpty());
      assertEquals(11, properties0.size());
      
      boolean boolean1 = false;
      atomikosProperties0.setEnableLogging(boolean1);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.enableLogging);
      assertEquals((-105L), atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals((-105L), atomikosProperties0.getDefaultJtaTimeout());
      assertEquals("\"6Z", atomikosProperties0.getLogBaseDir());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("match {} from {} byName={} byLocation={} in {}", atomikosProperties0.getService());
      assertEquals("T7@V", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertNotNull(atomikosProperties0);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      
      long long0 = 0L;
      atomikosProperties0.defaultJtaTimeout = long0;
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      
      long long1 = (-1L);
      atomikosProperties0.setMaxTimeout(long1);
      assertFalse(long1 == long0);
      assertEquals(0L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals((-1L), atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals((-1L), atomikosProperties0.getMaxTimeout());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getService());
      
      long long2 = atomikosProperties0.getMaxTimeout();
      assertTrue(long2 == long1);
      assertFalse(long2 == long0);
      assertEquals(0L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals((-1L), atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals((-1L), atomikosProperties0.getMaxTimeout());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals((-1L), long2);
      
      long long3 = 0L;
      atomikosProperties0.setMaxTimeout(long3);
      assertFalse(long3 == long2);
      assertFalse(long3 == long1);
      assertEquals(0L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(0L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getService());
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertNotNull(atomikosProperties0);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      
      int int0 = (-1217);
      int int1 = 50;
      atomikosProperties0.maxActives = int1;
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      
      atomikosProperties0.maxActives = int0;
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals((-1217), atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      
      String string0 = "&v\"r'7/WFP;v";
      boolean boolean0 = true;
      atomikosProperties0.setForceShutdownOnVmExit(boolean0);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1217), atomikosProperties0.maxActives);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals((-1217), atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      
      boolean boolean1 = true;
      atomikosProperties0.serialJtaTransactions = boolean1;
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals((-1217), atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isEnableLogging());
      
      atomikosProperties0.service = string0;
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("&v\"r'7/WFP;v", atomikosProperties0.getService());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals((-1217), atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      
      boolean boolean2 = atomikosProperties0.isForceShutdownOnVmExit();
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1217), atomikosProperties0.maxActives);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("&v\"r'7/WFP;v", atomikosProperties0.getService());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals((-1217), atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(boolean2);
      
      String string1 = atomikosProperties0.getTransactionManagerUniqueName();
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1217), atomikosProperties0.maxActives);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertNull(string1);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("&v\"r'7/WFP;v", atomikosProperties0.getService());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals((-1217), atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      
      boolean boolean3 = atomikosProperties0.isSerialJtaTransactions();
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1217), atomikosProperties0.maxActives);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("&v\"r'7/WFP;v", atomikosProperties0.getService());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals((-1217), atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(boolean3);
  }

  @Test(timeout = 11000)
  public void test44()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertNotNull(atomikosProperties0);
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      
      Properties properties0 = atomikosProperties0.asProperties();
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertNotNull(properties0);
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(properties0.isEmpty());
      assertEquals(9, properties0.size());
      
      long long0 = 0L;
      boolean boolean0 = false;
      atomikosProperties0.enableLogging = boolean0;
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      
      atomikosProperties0.defaultJtaTimeout = long0;
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      
      String string0 = null;
      atomikosProperties0.logBaseName = string0;
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      
      boolean boolean1 = false;
      atomikosProperties0.setForceShutdownOnVmExit(boolean1);
      assertFalse(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(0L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      
      String string1 = atomikosProperties0.getLogBaseName();
      assertFalse(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(0L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertNull(string1);
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      
      boolean boolean2 = atomikosProperties0.isSerialJtaTransactions();
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(0L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(boolean2);
      
      String string2 = "";
      atomikosProperties0.setService(string2);
      assertFalse(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(0L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("", atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      
      atomikosProperties0.setLogBaseName(string0);
      assertFalse(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(0L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("", atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      
      boolean boolean3 = atomikosProperties0.isSerialJtaTransactions();
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(0L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("", atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(boolean3);
      
      long long1 = atomikosProperties0.getDefaultJtaTimeout();
      assertTrue(long1 == long0);
      assertFalse(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(0L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("", atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(0L, long1);
      
      String string3 = "'nC@c*(2#0";
      atomikosProperties0.setLogBaseName(string3);
      assertNotSame(string3, string2);
      assertFalse(string3.equals((Object)string2));
      assertFalse(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(0L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("", atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      
      String string4 = "&d0B%L";
      atomikosProperties0.setLogBaseName(string4);
      assertNotSame(string4, string3);
      assertNotSame(string4, string2);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(0L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals("&d0B%L", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("", atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      
      long long2 = atomikosProperties0.getCheckpointInterval();
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertFalse(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(0L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals("&d0B%L", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("", atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, long2);
      
      long long3 = atomikosProperties0.getMaxTimeout();
      assertFalse(long3 == long0);
      assertFalse(long3 == long2);
      assertFalse(long3 == long1);
      assertFalse(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(0L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals("&d0B%L", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("", atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(300000L, long3);
      
      long long4 = 2215L;
      atomikosProperties0.setCheckpointInterval(long4);
      assertFalse(long4 == long2);
      assertFalse(long4 == long1);
      assertFalse(long4 == long3);
      assertFalse(long4 == long0);
      assertFalse(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(0L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(2215L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals("&d0B%L", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("", atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertEquals(2215L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      
      boolean boolean4 = atomikosProperties0.isEnableLogging();
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertFalse(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(0L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(2215L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals("&d0B%L", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("", atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertEquals(2215L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(boolean4);
  }

  @Test(timeout = 11000)
  public void test45()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertNotNull(atomikosProperties0);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      
      long long0 = 1368L;
      String string0 = "";
      atomikosProperties0.transactionManagerUniqueName = string0;
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      
      atomikosProperties0.maxTimeout = long0;
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(1368L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      
      boolean boolean0 = false;
      atomikosProperties0.forceShutdownOnVmExit = boolean0;
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(1368L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      
      boolean boolean1 = atomikosProperties0.isForceShutdownOnVmExit();
      assertTrue(boolean1 == boolean0);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(1368L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(1368L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(boolean1);
      
      Properties properties0 = atomikosProperties0.asProperties();
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(1368L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertNotNull(properties0);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(1368L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(properties0.isEmpty());
      assertEquals(10, properties0.size());
      
      Properties properties1 = (Properties)properties0.clone();
      assertNotSame(properties0, properties1);
      assertNotSame(properties1, properties0);
      assertTrue(properties1.equals((Object)properties0));
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(1368L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertNotNull(properties1);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(1368L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(properties0.isEmpty());
      assertEquals(10, properties0.size());
      assertFalse(properties1.isEmpty());
      assertEquals(10, properties1.size());
      
      String string1 = null;
      atomikosProperties0.set(properties0, string1, properties0);
      assertNotSame(properties0, properties1);
      assertFalse(properties0.equals((Object)properties1));
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(1368L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(1368L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(properties0.isEmpty());
      assertEquals(11, properties0.size());
      
      boolean boolean2 = atomikosProperties0.isThreadedTwoPhaseCommit();
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(1368L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(1368L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(boolean2);
      
      String string2 = "4NOm_EJ[nRt";
      atomikosProperties0.setService(string2);
      assertNotSame(string2, string0);
      assertFalse(string2.equals((Object)string0));
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(1368L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(1368L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("4NOm_EJ[nRt", atomikosProperties0.getService());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      
      String string3 = atomikosProperties0.getTransactionManagerUniqueName();
      assertNotSame(string3, string2);
      assertSame(string3, string0);
      assertFalse(string3.equals((Object)string2));
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(1368L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertNotNull(string3);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(1368L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("4NOm_EJ[nRt", atomikosProperties0.getService());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("", string3);
  }

  @Test(timeout = 11000)
  public void test46()  throws Throwable  {
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertNotNull(atomikosProperties0);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      
      boolean boolean0 = atomikosProperties0.isThreadedTwoPhaseCommit();
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(boolean0);
      
      atomikosProperties0.enableLogging = boolean0;
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      
      AtomikosProperties atomikosProperties1 = new AtomikosProperties();
      assertFalse(atomikosProperties1.equals((Object)atomikosProperties0));
      assertEquals(300000L, atomikosProperties1.maxTimeout);
      assertEquals(50, atomikosProperties1.maxActives);
      assertEquals(10000L, atomikosProperties1.defaultJtaTimeout);
      assertTrue(atomikosProperties1.serialJtaTransactions);
      assertFalse(atomikosProperties1.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties1.enableLogging);
      assertEquals(500L, atomikosProperties1.checkpointInterval);
      assertFalse(atomikosProperties1.forceShutdownOnVmExit);
      assertNotNull(atomikosProperties1);
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties1.getService());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertTrue(atomikosProperties1.isEnableLogging());
      
      Properties properties0 = atomikosProperties1.asProperties();
      assertNotSame(atomikosProperties1, atomikosProperties0);
      assertFalse(atomikosProperties1.equals((Object)atomikosProperties0));
      assertEquals(300000L, atomikosProperties1.maxTimeout);
      assertEquals(50, atomikosProperties1.maxActives);
      assertEquals(10000L, atomikosProperties1.defaultJtaTimeout);
      assertTrue(atomikosProperties1.serialJtaTransactions);
      assertFalse(atomikosProperties1.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties1.enableLogging);
      assertEquals(500L, atomikosProperties1.checkpointInterval);
      assertFalse(atomikosProperties1.forceShutdownOnVmExit);
      assertNotNull(properties0);
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties1.getService());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertFalse(properties0.isEmpty());
      assertEquals(9, properties0.size());
      
      String string0 = "threaded_2pc";
      atomikosProperties0.set(properties0, string0, atomikosProperties1);
      assertNotSame(atomikosProperties0, atomikosProperties1);
      assertNotSame(atomikosProperties1, atomikosProperties0);
      assertFalse(atomikosProperties0.equals((Object)atomikosProperties1));
      assertFalse(atomikosProperties1.equals((Object)atomikosProperties0));
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(300000L, atomikosProperties1.maxTimeout);
      assertEquals(50, atomikosProperties1.maxActives);
      assertEquals(10000L, atomikosProperties1.defaultJtaTimeout);
      assertTrue(atomikosProperties1.serialJtaTransactions);
      assertFalse(atomikosProperties1.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties1.enableLogging);
      assertEquals(500L, atomikosProperties1.checkpointInterval);
      assertFalse(atomikosProperties1.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties1.getService());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertFalse(properties0.isEmpty());
      assertEquals(9, properties0.size());
      
      int int0 = 288;
      atomikosProperties0.setMaxActives(int0);
      assertNotSame(atomikosProperties0, atomikosProperties1);
      assertFalse(atomikosProperties0.equals((Object)atomikosProperties1));
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(288, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(288, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      
      long long0 = 0L;
      atomikosProperties0.setDefaultJtaTimeout(long0);
      assertNotSame(atomikosProperties0, atomikosProperties1);
      assertFalse(atomikosProperties0.equals((Object)atomikosProperties1));
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(288, atomikosProperties0.maxActives);
      assertEquals(0L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(288, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
  }
}
